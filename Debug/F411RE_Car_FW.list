
F411RE_Car_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  0800c364  0800c364  0001c364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbe0  0800cbe0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbe0  0800cbe0  0001cbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbe8  0800cbe8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbe8  0800cbe8  0001cbe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbec  0800cbec  0001cbec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800cbf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c70  200000a0  0800cc90  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00003800  20009d10  0800cc90  00029d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000631bf  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000960d  00000000  00000000  0008328f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00033dea  00000000  00000000  0008c89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002238  00000000  00000000  000c0688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000060d0  00000000  00000000  000c28c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bad  00000000  00000000  000c8990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00048ba7  00000000  00000000  000eb53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b78a3  00000000  00000000  001340e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001eb987  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008320  00000000  00000000  001eb9dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c34c 	.word	0x0800c34c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800c34c 	.word	0x0800c34c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96e 	b.w	800093c <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468c      	mov	ip, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8083 	bne.w	800078e <__udivmoddi4+0x116>
 8000688:	428a      	cmp	r2, r1
 800068a:	4617      	mov	r7, r2
 800068c:	d947      	bls.n	800071e <__udivmoddi4+0xa6>
 800068e:	fab2 f282 	clz	r2, r2
 8000692:	b142      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000694:	f1c2 0020 	rsb	r0, r2, #32
 8000698:	fa24 f000 	lsr.w	r0, r4, r0
 800069c:	4091      	lsls	r1, r2
 800069e:	4097      	lsls	r7, r2
 80006a0:	ea40 0c01 	orr.w	ip, r0, r1
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbbc f6f8 	udiv	r6, ip, r8
 80006b0:	fa1f fe87 	uxth.w	lr, r7
 80006b4:	fb08 c116 	mls	r1, r8, r6, ip
 80006b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006bc:	fb06 f10e 	mul.w	r1, r6, lr
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ca:	f080 8119 	bcs.w	8000900 <__udivmoddi4+0x288>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8116 	bls.w	8000900 <__udivmoddi4+0x288>
 80006d4:	3e02      	subs	r6, #2
 80006d6:	443b      	add	r3, r7
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e0:	fb08 3310 	mls	r3, r8, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	45a6      	cmp	lr, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	193c      	adds	r4, r7, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8105 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006fa:	45a6      	cmp	lr, r4
 80006fc:	f240 8102 	bls.w	8000904 <__udivmoddi4+0x28c>
 8000700:	3802      	subs	r0, #2
 8000702:	443c      	add	r4, r7
 8000704:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000708:	eba4 040e 	sub.w	r4, r4, lr
 800070c:	2600      	movs	r6, #0
 800070e:	b11d      	cbz	r5, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c5 4300 	strd	r4, r3, [r5]
 8000718:	4631      	mov	r1, r6
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	b902      	cbnz	r2, 8000722 <__udivmoddi4+0xaa>
 8000720:	deff      	udf	#255	; 0xff
 8000722:	fab2 f282 	clz	r2, r2
 8000726:	2a00      	cmp	r2, #0
 8000728:	d150      	bne.n	80007cc <__udivmoddi4+0x154>
 800072a:	1bcb      	subs	r3, r1, r7
 800072c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000730:	fa1f f887 	uxth.w	r8, r7
 8000734:	2601      	movs	r6, #1
 8000736:	fbb3 fcfe 	udiv	ip, r3, lr
 800073a:	0c21      	lsrs	r1, r4, #16
 800073c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000744:	fb08 f30c 	mul.w	r3, r8, ip
 8000748:	428b      	cmp	r3, r1
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0xe4>
 800074c:	1879      	adds	r1, r7, r1
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0xe2>
 8000754:	428b      	cmp	r3, r1
 8000756:	f200 80e9 	bhi.w	800092c <__udivmoddi4+0x2b4>
 800075a:	4684      	mov	ip, r0
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1110 	mls	r1, lr, r0, r1
 8000768:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x10c>
 8000774:	193c      	adds	r4, r7, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x10a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80d9 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e7bf      	b.n	800070e <__udivmoddi4+0x96>
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0x12e>
 8000792:	2d00      	cmp	r5, #0
 8000794:	f000 80b1 	beq.w	80008fa <__udivmoddi4+0x282>
 8000798:	2600      	movs	r6, #0
 800079a:	e9c5 0100 	strd	r0, r1, [r5]
 800079e:	4630      	mov	r0, r6
 80007a0:	4631      	mov	r1, r6
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f683 	clz	r6, r3
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d14a      	bne.n	8000844 <__udivmoddi4+0x1cc>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0x140>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80b8 	bhi.w	8000928 <__udivmoddi4+0x2b0>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0103 	sbc.w	r1, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	468c      	mov	ip, r1
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d0a8      	beq.n	8000718 <__udivmoddi4+0xa0>
 80007c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ca:	e7a5      	b.n	8000718 <__udivmoddi4+0xa0>
 80007cc:	f1c2 0320 	rsb	r3, r2, #32
 80007d0:	fa20 f603 	lsr.w	r6, r0, r3
 80007d4:	4097      	lsls	r7, r2
 80007d6:	fa01 f002 	lsl.w	r0, r1, r2
 80007da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007de:	40d9      	lsrs	r1, r3
 80007e0:	4330      	orrs	r0, r6
 80007e2:	0c03      	lsrs	r3, r0, #16
 80007e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007e8:	fa1f f887 	uxth.w	r8, r7
 80007ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb06 f108 	mul.w	r1, r6, r8
 80007f8:	4299      	cmp	r1, r3
 80007fa:	fa04 f402 	lsl.w	r4, r4, r2
 80007fe:	d909      	bls.n	8000814 <__udivmoddi4+0x19c>
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	f106 3cff 	add.w	ip, r6, #4294967295
 8000806:	f080 808d 	bcs.w	8000924 <__udivmoddi4+0x2ac>
 800080a:	4299      	cmp	r1, r3
 800080c:	f240 808a 	bls.w	8000924 <__udivmoddi4+0x2ac>
 8000810:	3e02      	subs	r6, #2
 8000812:	443b      	add	r3, r7
 8000814:	1a5b      	subs	r3, r3, r1
 8000816:	b281      	uxth	r1, r0
 8000818:	fbb3 f0fe 	udiv	r0, r3, lr
 800081c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000824:	fb00 f308 	mul.w	r3, r0, r8
 8000828:	428b      	cmp	r3, r1
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x1c4>
 800082c:	1879      	adds	r1, r7, r1
 800082e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000832:	d273      	bcs.n	800091c <__udivmoddi4+0x2a4>
 8000834:	428b      	cmp	r3, r1
 8000836:	d971      	bls.n	800091c <__udivmoddi4+0x2a4>
 8000838:	3802      	subs	r0, #2
 800083a:	4439      	add	r1, r7
 800083c:	1acb      	subs	r3, r1, r3
 800083e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000842:	e778      	b.n	8000736 <__udivmoddi4+0xbe>
 8000844:	f1c6 0c20 	rsb	ip, r6, #32
 8000848:	fa03 f406 	lsl.w	r4, r3, r6
 800084c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000850:	431c      	orrs	r4, r3
 8000852:	fa20 f70c 	lsr.w	r7, r0, ip
 8000856:	fa01 f306 	lsl.w	r3, r1, r6
 800085a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800085e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000862:	431f      	orrs	r7, r3
 8000864:	0c3b      	lsrs	r3, r7, #16
 8000866:	fbb1 f9fe 	udiv	r9, r1, lr
 800086a:	fa1f f884 	uxth.w	r8, r4
 800086e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000872:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000876:	fb09 fa08 	mul.w	sl, r9, r8
 800087a:	458a      	cmp	sl, r1
 800087c:	fa02 f206 	lsl.w	r2, r2, r6
 8000880:	fa00 f306 	lsl.w	r3, r0, r6
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x220>
 8000886:	1861      	adds	r1, r4, r1
 8000888:	f109 30ff 	add.w	r0, r9, #4294967295
 800088c:	d248      	bcs.n	8000920 <__udivmoddi4+0x2a8>
 800088e:	458a      	cmp	sl, r1
 8000890:	d946      	bls.n	8000920 <__udivmoddi4+0x2a8>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4421      	add	r1, r4
 8000898:	eba1 010a 	sub.w	r1, r1, sl
 800089c:	b2bf      	uxth	r7, r7
 800089e:	fbb1 f0fe 	udiv	r0, r1, lr
 80008a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008aa:	fb00 f808 	mul.w	r8, r0, r8
 80008ae:	45b8      	cmp	r8, r7
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x24a>
 80008b2:	19e7      	adds	r7, r4, r7
 80008b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b8:	d22e      	bcs.n	8000918 <__udivmoddi4+0x2a0>
 80008ba:	45b8      	cmp	r8, r7
 80008bc:	d92c      	bls.n	8000918 <__udivmoddi4+0x2a0>
 80008be:	3802      	subs	r0, #2
 80008c0:	4427      	add	r7, r4
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	eba7 0708 	sub.w	r7, r7, r8
 80008ca:	fba0 8902 	umull	r8, r9, r0, r2
 80008ce:	454f      	cmp	r7, r9
 80008d0:	46c6      	mov	lr, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	d31a      	bcc.n	800090c <__udivmoddi4+0x294>
 80008d6:	d017      	beq.n	8000908 <__udivmoddi4+0x290>
 80008d8:	b15d      	cbz	r5, 80008f2 <__udivmoddi4+0x27a>
 80008da:	ebb3 020e 	subs.w	r2, r3, lr
 80008de:	eb67 0701 	sbc.w	r7, r7, r1
 80008e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008e6:	40f2      	lsrs	r2, r6
 80008e8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ec:	40f7      	lsrs	r7, r6
 80008ee:	e9c5 2700 	strd	r2, r7, [r5]
 80008f2:	2600      	movs	r6, #0
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e70b      	b.n	8000718 <__udivmoddi4+0xa0>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0x60>
 8000904:	4618      	mov	r0, r3
 8000906:	e6fd      	b.n	8000704 <__udivmoddi4+0x8c>
 8000908:	4543      	cmp	r3, r8
 800090a:	d2e5      	bcs.n	80008d8 <__udivmoddi4+0x260>
 800090c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000910:	eb69 0104 	sbc.w	r1, r9, r4
 8000914:	3801      	subs	r0, #1
 8000916:	e7df      	b.n	80008d8 <__udivmoddi4+0x260>
 8000918:	4608      	mov	r0, r1
 800091a:	e7d2      	b.n	80008c2 <__udivmoddi4+0x24a>
 800091c:	4660      	mov	r0, ip
 800091e:	e78d      	b.n	800083c <__udivmoddi4+0x1c4>
 8000920:	4681      	mov	r9, r0
 8000922:	e7b9      	b.n	8000898 <__udivmoddi4+0x220>
 8000924:	4666      	mov	r6, ip
 8000926:	e775      	b.n	8000814 <__udivmoddi4+0x19c>
 8000928:	4630      	mov	r0, r6
 800092a:	e74a      	b.n	80007c2 <__udivmoddi4+0x14a>
 800092c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000930:	4439      	add	r1, r7
 8000932:	e713      	b.n	800075c <__udivmoddi4+0xe4>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	e724      	b.n	8000784 <__udivmoddi4+0x10c>
 800093a:	bf00      	nop

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <ADXL_ReadAcceleration>:

/**
 * @brief	Returns all axes acceleration in float variable in units of m/(s^2)
 */
void ADXL_ReadAcceleration(float *AccelerationX, float *AccelerationY, float *AccelerationZ)
{
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	4606      	mov	r6, r0
 8000946:	460d      	mov	r5, r1
 8000948:	4614      	mov	r4, r2
	/* Variable declaration */
	uint16_t RawAccelX, RawAccelY, RawAccelZ;

	/* Read FIFO/DATA registers */
	__ADXL_READMULTIBYTE_FIFO(&RawAccelX, &RawAccelY, &RawAccelZ);
 800094a:	a901      	add	r1, sp, #4
 800094c:	f10d 0206 	add.w	r2, sp, #6
 8000950:	f10d 0002 	add.w	r0, sp, #2
 8000954:	f000 fa06 	bl	8000d64 <__ADXL_READMULTIBYTE_FIFO>

	/**
	 * Conversion from raw values to normal interpretation, and that value is multiplied with 3.90625mg/LSB
	 * resolution, or more accurately, 256LSB/g
	 */
	*AccelerationX = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelX))/1000.0f);
 8000958:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800095c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80009e0 <ADXL_ReadAcceleration+0xa0>
 8000960:	eddf 6a20 	vldr	s13, [pc, #128]	; 80009e4 <ADXL_ReadAcceleration+0xa4>
    if(value & 0x1000)
 8000964:	04d8      	lsls	r0, r3, #19
        return (-1 * temp);
 8000966:	bf44      	itt	mi
 8000968:	ea6f 43c3 	mvnmi.w	r3, r3, lsl #19
 800096c:	ea6f 43d3 	mvnmi.w	r3, r3, lsr #19
	*AccelerationX = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelX))/1000.0f);
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/1000.0f);
 8000978:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	*AccelerationX = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelX))/1000.0f);
 800097c:	ee67 7a87 	vmul.f32	s15, s15, s14
    if(value & 0x1000)
 8000980:	04d9      	lsls	r1, r3, #19
	*AccelerationX = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelX))/1000.0f);
 8000982:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        return (-1 * temp);
 8000986:	bf44      	itt	mi
 8000988:	ea6f 43c3 	mvnmi.w	r3, r3, lsl #19
 800098c:	ea6f 43d3 	mvnmi.w	r3, r3, lsr #19
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/1000.0f);
 8000990:	ee07 3a90 	vmov	s15, r3
	*AccelerationX = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelX))/1000.0f);
 8000994:	ed86 7a00 	vstr	s14, [r6]
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/1000.0f);
 8000998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800099c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80009e0 <ADXL_ReadAcceleration+0xa0>
 80009a0:	eddf 6a10 	vldr	s13, [pc, #64]	; 80009e4 <ADXL_ReadAcceleration+0xa4>
	*AccelerationZ = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelZ))/1000.0f);
 80009a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/1000.0f);
 80009a8:	ee67 7a87 	vmul.f32	s15, s15, s14
    if(value & 0x1000)
 80009ac:	04da      	lsls	r2, r3, #19
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/1000.0f);
 80009ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        return (-1 * temp);
 80009b2:	bf44      	itt	mi
 80009b4:	ea6f 43c3 	mvnmi.w	r3, r3, lsl #19
 80009b8:	ea6f 43d3 	mvnmi.w	r3, r3, lsr #19
	*AccelerationZ = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelZ))/1000.0f);
 80009bc:	ee07 3a90 	vmov	s15, r3
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/1000.0f);
 80009c0:	ed85 7a00 	vstr	s14, [r5]
	*AccelerationZ = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelZ))/1000.0f);
 80009c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80009e0 <ADXL_ReadAcceleration+0xa0>
 80009cc:	eddf 6a05 	vldr	s13, [pc, #20]	; 80009e4 <ADXL_ReadAcceleration+0xa4>
 80009d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80009d8:	ed84 7a00 	vstr	s14, [r4]
}
 80009dc:	b002      	add	sp, #8
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	407a0000 	.word	0x407a0000
 80009e4:	447a0000 	.word	0x447a0000

080009e8 <ADXL_ConfigureOffsets>:
 * @brief	Configures all offset register (acceleration calibration) so that data read from
 * 			DATA registers will take offset into account. (This includes taking +1g from Z
 * 			axis acceleration due to gravity into DATAZ0 and DATAZ1 registers).
 */
void ADXL_ConfigureOffsets(void)
{
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	b083      	sub	sp, #12
	/* Variable declarations */
	uint16_t InputSampleX = 0, InputSampleY = 0, InputSampleZ = 0;
 80009ec:	2400      	movs	r4, #0
 80009ee:	f8ad 4002 	strh.w	r4, [sp, #2]
 80009f2:	f8ad 4004 	strh.w	r4, [sp, #4]
 80009f6:	f8ad 4006 	strh.w	r4, [sp, #6]
	int8_t X_offset = 0, Y_offset = 0, Z_offset = 0;
	uint8_t OFSXvalue = 0, OFSYvalue = 0, OFSZvalue = 0;			/* values to be placed into the offset registers */

	/* Collect 10 samples of X, Y, and Z acceleration. Note that resolution is 3.90625mg/LSB at 13-bits */
#if defined(FREERTOS_INCLUDED)
	taskENTER_CRITICAL();
 80009fa:	f00a fa1b 	bl	800ae34 <vPortEnterCritical>
#endif

	/* Iterate NUM_ACCELERATION_OFFSET_SAMPLES number of times */
	for(volatile uint8_t idx=0; idx<NUM_ACCELERATION_OFFSET_SAMPLES; idx++)
 80009fe:	f88d 4001 	strb.w	r4, [sp, #1]
 8000a02:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000a06:	2b09      	cmp	r3, #9
 8000a08:	f200 808e 	bhi.w	8000b28 <ADXL_ConfigureOffsets+0x140>
	int32_t AvgSampleX = 0, AvgSampleY = 0, AvgSampleZ = 0;			/* a.k.a. X_0g, Y_0g, Z_0g in ADXL343 Datasheet page 28 */
 8000a0c:	4626      	mov	r6, r4
 8000a0e:	4625      	mov	r5, r4
	{
		/* Read Input samples and accumulate input samples in AvgSample variables */
		__ADXL_READMULTIBYTE_FIFO(&InputSampleX, &InputSampleY, &InputSampleZ);
 8000a10:	a901      	add	r1, sp, #4
 8000a12:	f10d 0206 	add.w	r2, sp, #6
 8000a16:	f10d 0002 	add.w	r0, sp, #2
 8000a1a:	f000 f9a3 	bl	8000d64 <__ADXL_READMULTIBYTE_FIFO>
		AvgSampleX += ADXL_TwosComplement_13bits(InputSampleX);
 8000a1e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		AvgSampleY += ADXL_TwosComplement_13bits(InputSampleY);
 8000a22:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    if(value & 0x1000)
 8000a26:	04d1      	lsls	r1, r2, #19
        return (-1 * temp);
 8000a28:	bf44      	itt	mi
 8000a2a:	ea6f 42c2 	mvnmi.w	r2, r2, lsl #19
 8000a2e:	ea6f 42d2 	mvnmi.w	r2, r2, lsr #19
		AvgSampleX += ADXL_TwosComplement_13bits(InputSampleX);
 8000a32:	4415      	add	r5, r2
    if(value & 0x1000)
 8000a34:	04da      	lsls	r2, r3, #19
        return (-1 * temp);
 8000a36:	bf48      	it	mi
 8000a38:	ea6f 43c3 	mvnmi.w	r3, r3, lsl #19
		AvgSampleZ += ADXL_TwosComplement_13bits(InputSampleZ);
 8000a3c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        return (-1 * temp);
 8000a40:	bf48      	it	mi
 8000a42:	ea6f 43d3 	mvnmi.w	r3, r3, lsr #19
		AvgSampleY += ADXL_TwosComplement_13bits(InputSampleY);
 8000a46:	441e      	add	r6, r3
        return (-1 * temp);
 8000a48:	ea6f 42c1 	mvn.w	r2, r1, lsl #19
    if(value & 0x1000)
 8000a4c:	04cb      	lsls	r3, r1, #19

		HAL_Delay(25);
 8000a4e:	f04f 0019 	mov.w	r0, #25
        return (-1 * temp);
 8000a52:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
		HAL_Delay(25);
 8000a56:	bf4a      	itet	mi
 8000a58:	2019      	movmi	r0, #25
		AvgSampleZ += ADXL_TwosComplement_13bits(InputSampleZ);
 8000a5a:	1864      	addpl	r4, r4, r1
		HAL_Delay(25);
 8000a5c:	18a4      	addmi	r4, r4, r2
 8000a5e:	f002 fb45 	bl	80030ec <HAL_Delay>
	for(volatile uint8_t idx=0; idx<NUM_ACCELERATION_OFFSET_SAMPLES; idx++)
 8000a62:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000a66:	3301      	adds	r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	f88d 3001 	strb.w	r3, [sp, #1]
 8000a6e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000a72:	2b09      	cmp	r3, #9
 8000a74:	d9cc      	bls.n	8000a10 <ADXL_ConfigureOffsets+0x28>
	AvgSampleX = AvgSampleX/NUM_ACCELERATION_OFFSET_SAMPLES;
	AvgSampleY = AvgSampleY/NUM_ACCELERATION_OFFSET_SAMPLES;
	AvgSampleZ = AvgSampleZ/NUM_ACCELERATION_OFFSET_SAMPLES - 256;		/* AvgSampleZ is noise in 1g base, and 256 = 1g for full-resolution mode */

#if defined(FREERTOS_INCLUDED)
	taskEXIT_CRITICAL();
 8000a76:	f00a f9ff 	bl	800ae78 <vPortExitCritical>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_POWER_CTL_BASE, NMAX_I2C_RETX);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	202d      	movs	r0, #45	; 0x2d
 8000a7e:	f000 f913 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
	 */
	Accelerometer_SetMeasurementMode(A_DISABLE);

	/* Calculate offset values */
	X_offset = -1 * round(AvgSampleX/4);
	Y_offset = -1 * round(AvgSampleY/4);
 8000a82:	4f31      	ldr	r7, [pc, #196]	; (8000b48 <ADXL_ConfigureOffsets+0x160>)
	__io_accelerometer_i2cWriteRegister(REG_POWER_CTL_BASE, temp, NMAX_I2C_RETX);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
 8000a8a:	202d      	movs	r0, #45	; 0x2d
 8000a8c:	f000 f8b2 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>
	Y_offset = -1 * round(AvgSampleY/4);
 8000a90:	fb87 3006 	smull	r3, r0, r7, r6
 8000a94:	17f6      	asrs	r6, r6, #31
 8000a96:	ebc6 1020 	rsb	r0, r6, r0, asr #4
 8000a9a:	f7ff fd43 	bl	8000524 <__aeabi_i2d>
 8000a9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f7ff fda8 	bl	80005f8 <__aeabi_d2iz>
	Z_offset = -1 * round(AvgSampleZ/4);
 8000aa8:	fb87 3704 	smull	r3, r7, r7, r4
 8000aac:	17e4      	asrs	r4, r4, #31
 8000aae:	ebc4 04a7 	rsb	r4, r4, r7, asr #2
	Y_offset = -1 * round(AvgSampleY/4);
 8000ab2:	b246      	sxtb	r6, r0
	Z_offset = -1 * round(AvgSampleZ/4);
 8000ab4:	f5b4 7080 	subs.w	r0, r4, #256	; 0x100
 8000ab8:	bf48      	it	mi
 8000aba:	f1a4 00fd 	submi.w	r0, r4, #253	; 0xfd
 8000abe:	1080      	asrs	r0, r0, #2
 8000ac0:	f7ff fd30 	bl	8000524 <__aeabi_i2d>
 8000ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f7ff fd95 	bl	80005f8 <__aeabi_d2iz>
	X_offset = -1 * round(AvgSampleX/4);
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <ADXL_ConfigureOffsets+0x160>)
	Z_offset = -1 * round(AvgSampleZ/4);
 8000ad0:	4604      	mov	r4, r0
	X_offset = -1 * round(AvgSampleX/4);
 8000ad2:	17e8      	asrs	r0, r5, #31
 8000ad4:	fb83 3505 	smull	r3, r5, r3, r5
 8000ad8:	ebc0 1025 	rsb	r0, r0, r5, asr #4
 8000adc:	f7ff fd22 	bl	8000524 <__aeabi_i2d>
 8000ae0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f7ff fd87 	bl	80005f8 <__aeabi_d2iz>
	Z_offset = -1 * round(AvgSampleZ/4);
 8000aea:	b264      	sxtb	r4, r4
        return input;
 8000aec:	b2c1      	uxtb	r1, r0
 8000aee:	b2f6      	uxtb	r6, r6
	OFSXvalue = ADXL_TwosComplement_8bits(X_offset);
	OFSYvalue = ADXL_TwosComplement_8bits(Y_offset);
	OFSZvalue = ADXL_TwosComplement_8bits(Z_offset);

	/* Write directly into offset registers */
	__io_accelerometer_i2cWriteRegister(REG_OFSX_BASE, OFSXvalue, NMAX_I2C_RETX);
 8000af0:	2201      	movs	r2, #1
 8000af2:	201e      	movs	r0, #30
 8000af4:	f000 f87e 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>
        return input;
 8000af8:	b2e4      	uxtb	r4, r4
	__io_accelerometer_i2cWriteRegister(REG_OFSY_BASE, OFSYvalue, NMAX_I2C_RETX);
 8000afa:	4631      	mov	r1, r6
 8000afc:	2201      	movs	r2, #1
 8000afe:	201f      	movs	r0, #31
 8000b00:	f000 f878 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>
	__io_accelerometer_i2cWriteRegister(REG_OFSZ_BASE, OFSZvalue, NMAX_I2C_RETX);
 8000b04:	4621      	mov	r1, r4
 8000b06:	2201      	movs	r2, #1
 8000b08:	2020      	movs	r0, #32
 8000b0a:	f000 f873 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_POWER_CTL_BASE, NMAX_I2C_RETX);
 8000b0e:	2101      	movs	r1, #1
 8000b10:	202d      	movs	r0, #45	; 0x2d
 8000b12:	f000 f8c9 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
		temp |= MSK_POWER_CTL_MEASURE;
 8000b16:	f040 0008 	orr.w	r0, r0, #8
	__io_accelerometer_i2cWriteRegister(REG_POWER_CTL_BASE, temp, NMAX_I2C_RETX);
 8000b1a:	b2c1      	uxtb	r1, r0
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	202d      	movs	r0, #45	; 0x2d
 8000b20:	f000 f868 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>

	/* Place device in measurement mode again, all changes will be applied afterwards */
	Accelerometer_SetMeasurementMode(A_ENABLE);
}
 8000b24:	b003      	add	sp, #12
 8000b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 8000b28:	f00a f9a6 	bl	800ae78 <vPortExitCritical>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_POWER_CTL_BASE, NMAX_I2C_RETX);
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	202d      	movs	r0, #45	; 0x2d
 8000b30:	f000 f8ba 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
	__io_accelerometer_i2cWriteRegister(REG_POWER_CTL_BASE, temp, NMAX_I2C_RETX);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
 8000b3a:	202d      	movs	r0, #45	; 0x2d
 8000b3c:	f000 f85a 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>
	Y_offset = -1 * round(AvgSampleY/4);
 8000b40:	4626      	mov	r6, r4
        return input;
 8000b42:	4621      	mov	r1, r4
	Z_offset = -1 * round(AvgSampleZ/4);
 8000b44:	2440      	movs	r4, #64	; 0x40
 8000b46:	e7d2      	b.n	8000aee <ADXL_ConfigureOffsets+0x106>
 8000b48:	66666667 	.word	0x66666667

08000b4c <ADXL343_Init>:

/**
 * @brief 	Initializes the ADXL343 in Standby Mode
 */
void ADXL343_Init(void)
{
 8000b4c:	b508      	push	{r3, lr}
	/* Place device in STANDBY mode for configuration */
	__RESET_ADXL343_REGISTERS();
 8000b4e:	f000 f94b 	bl	8000de8 <__RESET_ADXL343_REGISTERS>
	
	/* Check accelerometer device/serial ID */
	if(__io_accelerometer_i2cReadRegister(REG_DEVID_BASE, NMAX_I2C_RETX) == 0xE5)
 8000b52:	2101      	movs	r1, #1
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 f8a7 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
 8000b5a:	28e5      	cmp	r0, #229	; 0xe5
 8000b5c:	d001      	beq.n	8000b62 <ADXL343_Init+0x16>
	else
	{
#if defined(USE_VCOM)
		printf("Wrong Accelerometer ID detected\n\n");
#endif
		Error_Handler();
 8000b5e:	f001 fecb 	bl	80028f8 <Error_Handler>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_BW_RATE_BASE, NMAX_I2C_RETX);
 8000b62:	2101      	movs	r1, #1
 8000b64:	202c      	movs	r0, #44	; 0x2c
 8000b66:	f000 f89f 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
	temp &= MSK_REG_BW_LOWPOWER;
 8000b6a:	f000 0010 	and.w	r0, r0, #16
	__io_accelerometer_i2cWriteRegister(REG_BW_RATE_BASE, temp, NMAX_I2C_RETX);
 8000b6e:	f040 0109 	orr.w	r1, r0, #9
 8000b72:	2201      	movs	r2, #1
 8000b74:	202c      	movs	r0, #44	; 0x2c
 8000b76:	f000 f83d 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_BW_RATE_BASE, NMAX_I2C_RETX);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	202c      	movs	r0, #44	; 0x2c
 8000b7e:	f000 f893 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
		temp |= MSK_REG_BW_LOWPOWER;
 8000b82:	f040 0010 	orr.w	r0, r0, #16
	__io_accelerometer_i2cWriteRegister(REG_BW_RATE_BASE, temp, NMAX_I2C_RETX);
 8000b86:	2201      	movs	r2, #1
 8000b88:	b2c1      	uxtb	r1, r0
 8000b8a:	202c      	movs	r0, #44	; 0x2c
 8000b8c:	f000 f832 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>
	uint8_t retval = __io_accelerometer_i2cReadRegister(REG_INT_SOURCE_BASE, NMAX_I2C_RETX);
 8000b90:	2101      	movs	r1, #1
 8000b92:	2030      	movs	r0, #48	; 0x30
 8000b94:	f000 f888 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_DATA_FORMAT_BASE, NMAX_I2C_RETX);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	2031      	movs	r0, #49	; 0x31
 8000b9c:	f000 f884 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
		temp |= MSK_DATA_FORMAT_FULL_RES;
 8000ba0:	f040 0008 	orr.w	r0, r0, #8
	__io_accelerometer_i2cWriteRegister(REG_DATA_FORMAT_BASE, temp, NMAX_I2C_RETX);
 8000ba4:	b2c1      	uxtb	r1, r0
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2031      	movs	r0, #49	; 0x31
 8000baa:	f000 f823 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_DATA_FORMAT_BASE, NMAX_I2C_RETX);
 8000bae:	2101      	movs	r1, #1
 8000bb0:	2031      	movs	r0, #49	; 0x31
 8000bb2:	f000 f879 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
	temp = ((temp & ~(0x03)) | ((uint8_t)xRange));
 8000bb6:	f040 0003 	orr.w	r0, r0, #3
	__io_accelerometer_i2cWriteRegister(REG_DATA_FORMAT_BASE, temp, NMAX_I2C_RETX);
 8000bba:	b2c1      	uxtb	r1, r0
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2031      	movs	r0, #49	; 0x31
 8000bc0:	f000 f818 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_FIFO_CTL_BASE, NMAX_I2C_RETX);
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	2038      	movs	r0, #56	; 0x38
 8000bc8:	f000 f86e 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
	__io_accelerometer_i2cWriteRegister(REG_FIFO_CTL_BASE, temp, NMAX_I2C_RETX);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8000bd2:	2038      	movs	r0, #56	; 0x38
 8000bd4:	f000 f80e 	bl	8000bf4 <__io_accelerometer_i2cWriteRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_POWER_CTL_BASE, NMAX_I2C_RETX);
 8000bd8:	2101      	movs	r1, #1
 8000bda:	202d      	movs	r0, #45	; 0x2d
 8000bdc:	f000 f864 	bl	8000ca8 <__io_accelerometer_i2cReadRegister>
		temp |= MSK_POWER_CTL_MEASURE;
 8000be0:	f040 0008 	orr.w	r0, r0, #8
	__io_accelerometer_i2cWriteRegister(REG_POWER_CTL_BASE, temp, NMAX_I2C_RETX);
 8000be4:	b2c1      	uxtb	r1, r0
/*--- END OF CUSTOM ADXL343 CONFIGURATION TO MEASURE ACCELERATION FROM FIFO ---*/
	
	/* Place device in non STANDBY mode */
	Accelerometer_SetMeasurementMode(A_ENABLE);
	
}
 8000be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__io_accelerometer_i2cWriteRegister(REG_POWER_CTL_BASE, temp, NMAX_I2C_RETX);
 8000bea:	2201      	movs	r2, #1
 8000bec:	202d      	movs	r0, #45	; 0x2d
 8000bee:	f000 b801 	b.w	8000bf4 <__io_accelerometer_i2cWriteRegister>
 8000bf2:	bf00      	nop

08000bf4 <__io_accelerometer_i2cWriteRegister>:
 * @param      cRegAddress: Address of internal register to write into (8-bit internal address)
 *                   pData: 8-bit data to write
 *        nRetransmissions: Number of retransmissions to perform if a NACK occurs at each try
 */
void __io_accelerometer_i2cWriteRegister(uint8_t cRegAddress, uint8_t pData, uint8_t nRetransmissions)
{
 8000bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bf8:	b087      	sub	sp, #28
	uint8_t pTxBuff[1] = {pData};

	/* timeout counter variable */
	volatile uint8_t i2c_current_retx = 0;
 8000bfa:	2500      	movs	r5, #0
	do
	{
		i2c_process_status = SUCCESS;

		/* i2c single byte write operation */
		if(HAL_I2C_Mem_Write(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pTxBuff, 1, i2cTimeout) != HAL_OK)
 8000bfc:	4c28      	ldr	r4, [pc, #160]	; (8000ca0 <__io_accelerometer_i2cWriteRegister+0xac>)
		}

		/* If I2C is BUSY even after 16000 CPU cycles */
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
		{
			printf("I2C Bus still busy\n");
 8000bfe:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8000ca4 <__io_accelerometer_i2cWriteRegister+0xb0>
	uint8_t pTxBuff[1] = {pData};
 8000c02:	f88d 1010 	strb.w	r1, [sp, #16]
	volatile uint8_t i2c_current_retx = 0;
 8000c06:	4606      	mov	r6, r0
{
 8000c08:	4690      	mov	r8, r2
	volatile uint8_t i2c_current_retx = 0;
 8000c0a:	f88d 5012 	strb.w	r5, [sp, #18]
 8000c0e:	af04      	add	r7, sp, #16
		if(HAL_I2C_Mem_Write(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pTxBuff, 1, i2cTimeout) != HAL_OK)
 8000c10:	2232      	movs	r2, #50	; 0x32
 8000c12:	2301      	movs	r3, #1
 8000c14:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000c18:	9700      	str	r7, [sp, #0]
 8000c1a:	4632      	mov	r2, r6
 8000c1c:	21a6      	movs	r1, #166	; 0xa6
 8000c1e:	4620      	mov	r0, r4
		i2c_process_status = SUCCESS;
 8000c20:	f88d 5013 	strb.w	r5, [sp, #19]
		if(HAL_I2C_Mem_Write(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pTxBuff, 1, i2cTimeout) != HAL_OK)
 8000c24:	f003 ff08 	bl	8004a38 <HAL_I2C_Mem_Write>
 8000c28:	bbb8      	cbnz	r0, 8000c9a <__io_accelerometer_i2cWriteRegister+0xa6>
		volatile uint32_t errorhandler_counter = 0;
 8000c2a:	9505      	str	r5, [sp, #20]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 15999))
 8000c2c:	e006      	b.n	8000c3c <__io_accelerometer_i2cWriteRegister+0x48>
 8000c2e:	9b05      	ldr	r3, [sp, #20]
 8000c30:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000c34:	d207      	bcs.n	8000c46 <__io_accelerometer_i2cWriteRegister+0x52>
			errorhandler_counter++;
 8000c36:	9b05      	ldr	r3, [sp, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	9305      	str	r3, [sp, #20]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 15999))
 8000c3c:	4620      	mov	r0, r4
 8000c3e:	f004 ffe9 	bl	8005c14 <HAL_I2C_GetState>
 8000c42:	2820      	cmp	r0, #32
 8000c44:	d1f3      	bne.n	8000c2e <__io_accelerometer_i2cWriteRegister+0x3a>
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 8000c46:	9b05      	ldr	r3, [sp, #20]
 8000c48:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000c4c:	d21a      	bcs.n	8000c84 <__io_accelerometer_i2cWriteRegister+0x90>
			Error_Handler();
		}

		/* Counter to ensure repeating transaction only happens up to nRetransmissions */
		i2c_current_retx++;
 8000c4e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000c52:	3301      	adds	r3, #1
 8000c54:	b2db      	uxtb	r3, r3

  /* When Acknowledge failure occurs (Slave did not acknowledge it's address)
     Master restarts communication up to nRetransmissions */
	}
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 8000c56:	4620      	mov	r0, r4
		i2c_current_retx++;
 8000c58:	f88d 3012 	strb.w	r3, [sp, #18]
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 8000c5c:	f004 ffde 	bl	8005c1c <HAL_I2C_GetError>
 8000c60:	2804      	cmp	r0, #4
 8000c62:	d00a      	beq.n	8000c7a <__io_accelerometer_i2cWriteRegister+0x86>
		((i2c_process_status == ERROR) && (i2c_current_retx <= N_ERROR_RETX)));
 8000c64:	f89d 3013 	ldrb.w	r3, [sp, #19]
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d103      	bne.n	8000c74 <__io_accelerometer_i2cWriteRegister+0x80>
		((i2c_process_status == ERROR) && (i2c_current_retx <= N_ERROR_RETX)));
 8000c6c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d9cd      	bls.n	8000c10 <__io_accelerometer_i2cWriteRegister+0x1c>

}
 8000c74:	b007      	add	sp, #28
 8000c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 8000c7a:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000c7e:	4543      	cmp	r3, r8
 8000c80:	d9c6      	bls.n	8000c10 <__io_accelerometer_i2cWriteRegister+0x1c>
 8000c82:	e7ef      	b.n	8000c64 <__io_accelerometer_i2cWriteRegister+0x70>
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 8000c84:	4620      	mov	r0, r4
 8000c86:	f004 ffc5 	bl	8005c14 <HAL_I2C_GetState>
 8000c8a:	2820      	cmp	r0, #32
 8000c8c:	d0df      	beq.n	8000c4e <__io_accelerometer_i2cWriteRegister+0x5a>
			printf("I2C Bus still busy\n");
 8000c8e:	4648      	mov	r0, r9
 8000c90:	f00a fc16 	bl	800b4c0 <puts>
			Error_Handler();
 8000c94:	f001 fe30 	bl	80028f8 <Error_Handler>
 8000c98:	e7d9      	b.n	8000c4e <__io_accelerometer_i2cWriteRegister+0x5a>
			Error_Handler();
 8000c9a:	f001 fe2d 	bl	80028f8 <Error_Handler>
 8000c9e:	e7c4      	b.n	8000c2a <__io_accelerometer_i2cWriteRegister+0x36>
 8000ca0:	20009aa4 	.word	0x20009aa4
 8000ca4:	0800c3cc 	.word	0x0800c3cc

08000ca8 <__io_accelerometer_i2cReadRegister>:
 * @brief Reads data from the ADXL343's internal register
 * @param      cRegAddress: Address of internal register to read from (8-bit internal address)
 *        nRetransmissions: Number of retransmissions to perform if a NACK occurs at each try
 */
uint8_t __io_accelerometer_i2cReadRegister(uint8_t cRegAddress, uint8_t nRetransmissions)
{
 8000ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cac:	b087      	sub	sp, #28
	uint8_t pRxBuff[1] = {0x00};
 8000cae:	2500      	movs	r5, #0
	do
	{
		i2c_process_status = SUCCESS;

		/* i2c single byte read operation */
		if(HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pRxBuff, 1, i2cTimeout) != HAL_OK)
 8000cb0:	4c2a      	ldr	r4, [pc, #168]	; (8000d5c <__io_accelerometer_i2cReadRegister+0xb4>)
		}

		/* If I2C is BUSY even after 16000 CPU cycles */
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
		{
			printf("I2C Bus still busy\n");
 8000cb2:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8000d60 <__io_accelerometer_i2cReadRegister+0xb8>
	uint8_t pRxBuff[1] = {0x00};
 8000cb6:	f88d 5010 	strb.w	r5, [sp, #16]
	volatile uint8_t i2c_current_retx = 0;
 8000cba:	4606      	mov	r6, r0
{
 8000cbc:	4688      	mov	r8, r1
	volatile uint8_t i2c_current_retx = 0;
 8000cbe:	f88d 5012 	strb.w	r5, [sp, #18]
 8000cc2:	af04      	add	r7, sp, #16
		if(HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pRxBuff, 1, i2cTimeout) != HAL_OK)
 8000cc4:	2232      	movs	r2, #50	; 0x32
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000ccc:	9700      	str	r7, [sp, #0]
 8000cce:	4632      	mov	r2, r6
 8000cd0:	21a6      	movs	r1, #166	; 0xa6
 8000cd2:	4620      	mov	r0, r4
		i2c_process_status = SUCCESS;
 8000cd4:	f88d 5013 	strb.w	r5, [sp, #19]
		if(HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pRxBuff, 1, i2cTimeout) != HAL_OK)
 8000cd8:	f003 ffac 	bl	8004c34 <HAL_I2C_Mem_Read>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d139      	bne.n	8000d54 <__io_accelerometer_i2cReadRegister+0xac>
		volatile uint32_t errorhandler_counter = 0;
 8000ce0:	9505      	str	r5, [sp, #20]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 15999))
 8000ce2:	e006      	b.n	8000cf2 <__io_accelerometer_i2cReadRegister+0x4a>
 8000ce4:	9b05      	ldr	r3, [sp, #20]
 8000ce6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000cea:	d207      	bcs.n	8000cfc <__io_accelerometer_i2cReadRegister+0x54>
			errorhandler_counter++;
 8000cec:	9b05      	ldr	r3, [sp, #20]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	9305      	str	r3, [sp, #20]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 15999))
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	f004 ff8e 	bl	8005c14 <HAL_I2C_GetState>
 8000cf8:	2820      	cmp	r0, #32
 8000cfa:	d1f3      	bne.n	8000ce4 <__io_accelerometer_i2cReadRegister+0x3c>
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 8000cfc:	9b05      	ldr	r3, [sp, #20]
 8000cfe:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000d02:	d21c      	bcs.n	8000d3e <__io_accelerometer_i2cReadRegister+0x96>
			Error_Handler();
		}

		/* Counter to ensure repeating transaction only happens up to nRetransmissions */
		i2c_current_retx++;
 8000d04:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b2db      	uxtb	r3, r3

		/* When Acknowledge failure occurs (Slave did not acknowledge it's address)
       Master restarts communication up to nRetransmissions */
	}
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 8000d0c:	4620      	mov	r0, r4
		i2c_current_retx++;
 8000d0e:	f88d 3012 	strb.w	r3, [sp, #18]
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 8000d12:	f004 ff83 	bl	8005c1c <HAL_I2C_GetError>
 8000d16:	2804      	cmp	r0, #4
 8000d18:	d00c      	beq.n	8000d34 <__io_accelerometer_i2cReadRegister+0x8c>
		((i2c_process_status == ERROR) && (i2c_current_retx <= N_ERROR_RETX)));
 8000d1a:	f89d 3013 	ldrb.w	r3, [sp, #19]
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d103      	bne.n	8000d2a <__io_accelerometer_i2cReadRegister+0x82>
		((i2c_process_status == ERROR) && (i2c_current_retx <= N_ERROR_RETX)));
 8000d22:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000d26:	2b05      	cmp	r3, #5
 8000d28:	d9cc      	bls.n	8000cc4 <__io_accelerometer_i2cReadRegister+0x1c>

	/* Return 8-bit value read from internal register */
	return pRxBuff[0];

}
 8000d2a:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000d2e:	b007      	add	sp, #28
 8000d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 8000d34:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000d38:	4543      	cmp	r3, r8
 8000d3a:	d9c3      	bls.n	8000cc4 <__io_accelerometer_i2cReadRegister+0x1c>
 8000d3c:	e7ed      	b.n	8000d1a <__io_accelerometer_i2cReadRegister+0x72>
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f004 ff68 	bl	8005c14 <HAL_I2C_GetState>
 8000d44:	2820      	cmp	r0, #32
 8000d46:	d0dd      	beq.n	8000d04 <__io_accelerometer_i2cReadRegister+0x5c>
			printf("I2C Bus still busy\n");
 8000d48:	4648      	mov	r0, r9
 8000d4a:	f00a fbb9 	bl	800b4c0 <puts>
			Error_Handler();
 8000d4e:	f001 fdd3 	bl	80028f8 <Error_Handler>
 8000d52:	e7d7      	b.n	8000d04 <__io_accelerometer_i2cReadRegister+0x5c>
			Error_Handler();
 8000d54:	f001 fdd0 	bl	80028f8 <Error_Handler>
 8000d58:	e7c2      	b.n	8000ce0 <__io_accelerometer_i2cReadRegister+0x38>
 8000d5a:	bf00      	nop
 8000d5c:	20009aa4 	.word	0x20009aa4
 8000d60:	0800c3cc 	.word	0x0800c3cc

08000d64 <__ADXL_READMULTIBYTE_FIFO>:
 * @brief 	Reads data from the ADXL343's internal register
 * @param   Pointer to variables that will hold raw 16-bit acceleration values
 * @note	To be used with reading Accelerometer FIFO/Data Registers
 */
void __ADXL_READMULTIBYTE_FIFO(uint16_t *DataX, uint16_t *DataY, uint16_t *DataZ)
{
 8000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d66:	b087      	sub	sp, #28
	uint8_t pRxBuff[6] = {0x00};		/* Store received bytes in this array/buffer */
	HAL_StatusTypeDef l_status;			/* Used to check if HAL operations were successful or not */
	uint8_t RxLen = 6;					/* Number of bytes to be received in I2C operation */

	/* Perform I2C Memory Read operation. 0x32 represents address of DATAX0 register. */
	HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, ((uint8_t)0x32), cRegisterSize, (uint8_t*)pRxBuff, RxLen, i2cTimeout);
 8000d68:	2332      	movs	r3, #50	; 0x32
 8000d6a:	f04f 0c06 	mov.w	ip, #6
 8000d6e:	ac04      	add	r4, sp, #16
 8000d70:	e9cd 4c00 	strd	r4, ip, [sp]
 8000d74:	9302      	str	r3, [sp, #8]
{
 8000d76:	2400      	movs	r4, #0
 8000d78:	4607      	mov	r7, r0
 8000d7a:	460e      	mov	r6, r1
	HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, ((uint8_t)0x32), cRegisterSize, (uint8_t*)pRxBuff, RxLen, i2cTimeout);
 8000d7c:	4818      	ldr	r0, [pc, #96]	; (8000de0 <__ADXL_READMULTIBYTE_FIFO+0x7c>)
	uint8_t pRxBuff[6] = {0x00};		/* Store received bytes in this array/buffer */
 8000d7e:	9404      	str	r4, [sp, #16]
{
 8000d80:	4615      	mov	r5, r2
	HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, ((uint8_t)0x32), cRegisterSize, (uint8_t*)pRxBuff, RxLen, i2cTimeout);
 8000d82:	21a6      	movs	r1, #166	; 0xa6
 8000d84:	461a      	mov	r2, r3
 8000d86:	2301      	movs	r3, #1
	uint8_t pRxBuff[6] = {0x00};		/* Store received bytes in this array/buffer */
 8000d88:	f8ad 4014 	strh.w	r4, [sp, #20]
	HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, ((uint8_t)0x32), cRegisterSize, (uint8_t*)pRxBuff, RxLen, i2cTimeout);
 8000d8c:	f003 ff52 	bl	8004c34 <HAL_I2C_Mem_Read>

	/* Ensure HAL terminated/executed successfully */
	assert_param(l_status == HAL_OK);

	/* Wait until I2C bus is ready, and check if an ACK was received or not afterwards */
	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000d90:	4c13      	ldr	r4, [pc, #76]	; (8000de0 <__ADXL_READMULTIBYTE_FIFO+0x7c>)
 8000d92:	4620      	mov	r0, r4
 8000d94:	f004 ff3e 	bl	8005c14 <HAL_I2C_GetState>
 8000d98:	2820      	cmp	r0, #32
 8000d9a:	d1fa      	bne.n	8000d92 <__ADXL_READMULTIBYTE_FIFO+0x2e>
	assert_param(HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF);
 8000d9c:	4810      	ldr	r0, [pc, #64]	; (8000de0 <__ADXL_READMULTIBYTE_FIFO+0x7c>)
 8000d9e:	f004 ff3d 	bl	8005c1c <HAL_I2C_GetError>
 8000da2:	2804      	cmp	r0, #4
 8000da4:	d016      	beq.n	8000dd4 <__ADXL_READMULTIBYTE_FIFO+0x70>

	/* Assign passed input arguments the raw acceleration values for each axes */
	*DataX = (((uint16_t)pRxBuff[1] << 8) | pRxBuff[0]);
	*DataY = (((uint16_t)pRxBuff[3] << 8) | pRxBuff[2]);
 8000da6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8000daa:	f89d 2012 	ldrb.w	r2, [sp, #18]
	*DataX = (((uint16_t)pRxBuff[1] << 8) | pRxBuff[0]);
 8000dae:	f89d 4011 	ldrb.w	r4, [sp, #17]
 8000db2:	f89d 1010 	ldrb.w	r1, [sp, #16]
	*DataZ = (((uint16_t)pRxBuff[5] << 8) | pRxBuff[4]);
 8000db6:	f89d 0015 	ldrb.w	r0, [sp, #21]
	*DataY = (((uint16_t)pRxBuff[3] << 8) | pRxBuff[2]);
 8000dba:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	*DataZ = (((uint16_t)pRxBuff[5] << 8) | pRxBuff[4]);
 8000dbe:	f89d 3014 	ldrb.w	r3, [sp, #20]
	*DataX = (((uint16_t)pRxBuff[1] << 8) | pRxBuff[0]);
 8000dc2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
	*DataZ = (((uint16_t)pRxBuff[5] << 8) | pRxBuff[4]);
 8000dc6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	*DataX = (((uint16_t)pRxBuff[1] << 8) | pRxBuff[0]);
 8000dca:	8039      	strh	r1, [r7, #0]
	*DataY = (((uint16_t)pRxBuff[3] << 8) | pRxBuff[2]);
 8000dcc:	8032      	strh	r2, [r6, #0]
	*DataZ = (((uint16_t)pRxBuff[5] << 8) | pRxBuff[4]);
 8000dce:	802b      	strh	r3, [r5, #0]
}
 8000dd0:	b007      	add	sp, #28
 8000dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	assert_param(HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF);
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <__ADXL_READMULTIBYTE_FIFO+0x80>)
 8000dd6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000dda:	f001 fd8f 	bl	80028fc <assert_failed>
 8000dde:	e7e2      	b.n	8000da6 <__ADXL_READMULTIBYTE_FIFO+0x42>
 8000de0:	20009aa4 	.word	0x20009aa4
 8000de4:	0800c3e0 	.word	0x0800c3e0

08000de8 <__RESET_ADXL343_REGISTERS>:

/**
 * @brief Resets all the ADXL343 registers to reset values
 *        Check page 21 of the datasheet for its reset values
 */
void __RESET_ADXL343_REGISTERS(void){
 8000de8:	b530      	push	{r4, r5, lr}
	{
		i2c_process_status = SUCCESS;

		/* Perform multiple byte write to reset all the registers */
		HAL_StatusTypeDef l_status;
		l_status = HAL_I2C_Master_Transmit(&hi2c1, ACCELEROMETER_ADDRESS, (uint8_t*)ResetValues, cTotalAccelerometerRegisters + 1, i2cTimeout);
 8000dea:	4c1d      	ldr	r4, [pc, #116]	; (8000e60 <__RESET_ADXL343_REGISTERS+0x78>)
void __RESET_ADXL343_REGISTERS(void){
 8000dec:	b085      	sub	sp, #20

		/* Will be used for a ~3.5ms counter */
		volatile uint32_t errorhandler_counter = 0;

		/* Wait for i2c bus to become available */
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 55999))
 8000dee:	f64d 25bf 	movw	r5, #55999	; 0xdabf
		l_status = HAL_I2C_Master_Transmit(&hi2c1, ACCELEROMETER_ADDRESS, (uint8_t*)ResetValues, cTotalAccelerometerRegisters + 1, i2cTimeout);
 8000df2:	2332      	movs	r3, #50	; 0x32
		i2c_process_status = SUCCESS;
 8000df4:	2100      	movs	r1, #0
		l_status = HAL_I2C_Master_Transmit(&hi2c1, ACCELEROMETER_ADDRESS, (uint8_t*)ResetValues, cTotalAccelerometerRegisters + 1, i2cTimeout);
 8000df6:	9300      	str	r3, [sp, #0]
		i2c_process_status = SUCCESS;
 8000df8:	f88d 100b 	strb.w	r1, [sp, #11]
		l_status = HAL_I2C_Master_Transmit(&hi2c1, ACCELEROMETER_ADDRESS, (uint8_t*)ResetValues, cTotalAccelerometerRegisters + 1, i2cTimeout);
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <__RESET_ADXL343_REGISTERS+0x7c>)
 8000dfe:	231e      	movs	r3, #30
 8000e00:	21a6      	movs	r1, #166	; 0xa6
 8000e02:	4620      	mov	r0, r4
 8000e04:	f003 fcd0 	bl	80047a8 <HAL_I2C_Master_Transmit>
		if(l_status != HAL_OK)
 8000e08:	bb30      	cbnz	r0, 8000e58 <__RESET_ADXL343_REGISTERS+0x70>
		volatile uint32_t errorhandler_counter = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9303      	str	r3, [sp, #12]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 55999))
 8000e0e:	e005      	b.n	8000e1c <__RESET_ADXL343_REGISTERS+0x34>
 8000e10:	9b03      	ldr	r3, [sp, #12]
 8000e12:	42ab      	cmp	r3, r5
 8000e14:	d807      	bhi.n	8000e26 <__RESET_ADXL343_REGISTERS+0x3e>
		{
			errorhandler_counter++;
 8000e16:	9b03      	ldr	r3, [sp, #12]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	9303      	str	r3, [sp, #12]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 55999))
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f004 fef9 	bl	8005c14 <HAL_I2C_GetState>
 8000e22:	2820      	cmp	r0, #32
 8000e24:	d1f4      	bne.n	8000e10 <__RESET_ADXL343_REGISTERS+0x28>
		}

		/* If I2C bus is still BUSY after 56000 CPU cycles */
		if((errorhandler_counter >= 56000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 8000e26:	9b03      	ldr	r3, [sp, #12]
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d80a      	bhi.n	8000e42 <__RESET_ADXL343_REGISTERS+0x5a>
			Error_Handler();
		}

		/* Repeat transmission until an ACK signal is received */
	}
	while((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)||(i2c_process_status == ERROR));
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f004 fef5 	bl	8005c1c <HAL_I2C_GetError>
 8000e32:	2804      	cmp	r0, #4
 8000e34:	d0dd      	beq.n	8000df2 <__RESET_ADXL343_REGISTERS+0xa>
 8000e36:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d0d9      	beq.n	8000df2 <__RESET_ADXL343_REGISTERS+0xa>

}
 8000e3e:	b005      	add	sp, #20
 8000e40:	bd30      	pop	{r4, r5, pc}
		if((errorhandler_counter >= 56000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 8000e42:	4620      	mov	r0, r4
 8000e44:	f004 fee6 	bl	8005c14 <HAL_I2C_GetState>
 8000e48:	2820      	cmp	r0, #32
 8000e4a:	d0ef      	beq.n	8000e2c <__RESET_ADXL343_REGISTERS+0x44>
			printf("I2C Bus still busy\n");
 8000e4c:	4806      	ldr	r0, [pc, #24]	; (8000e68 <__RESET_ADXL343_REGISTERS+0x80>)
 8000e4e:	f00a fb37 	bl	800b4c0 <puts>
			Error_Handler();
 8000e52:	f001 fd51 	bl	80028f8 <Error_Handler>
 8000e56:	e7e9      	b.n	8000e2c <__RESET_ADXL343_REGISTERS+0x44>
			Error_Handler();
 8000e58:	f001 fd4e 	bl	80028f8 <Error_Handler>
 8000e5c:	e7d5      	b.n	8000e0a <__RESET_ADXL343_REGISTERS+0x22>
 8000e5e:	bf00      	nop
 8000e60:	20009aa4 	.word	0x20009aa4
 8000e64:	0800c408 	.word	0x0800c408
 8000e68:	0800c3cc 	.word	0x0800c3cc

08000e6c <Motor_Init>:
 * @note
 */
void Motor_Init(void)
{
	/* Initialize hardware layer (motor shield driver) */
	__MOTOR_HWInit();
 8000e6c:	f000 b954 	b.w	8001118 <__MOTOR_HWInit>

08000e70 <Car_ConfigDirection>:
	{
		__MOTOR_ConfigureAllWheelSpeed(SPEED_CAR_SLOW_PERCENTAGE);
	}
#endif

	switch(CarDirection)
 8000e70:	2804      	cmp	r0, #4
 8000e72:	f200 808e 	bhi.w	8000f92 <Car_ConfigDirection+0x122>
 8000e76:	e8df f000 	tbb	[pc, r0]
 8000e7a:	3317      	.short	0x3317
 8000e7c:	684f      	.short	0x684f
 8000e7e:	03          	.byte	0x03
 8000e7f:	00          	.byte	0x00
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8000e80:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <Car_ConfigDirection+0x128>)
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8000e88:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8000e90:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8000e92:	781a      	ldrb	r2, [r3, #0]
 8000e94:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8000e98:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8000ea0:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8000ea2:	7818      	ldrb	r0, [r3, #0]
 8000ea4:	f000 b964 	b.w	8001170 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <Car_ConfigDirection+0x128>)
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8000eb0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8000eb2:	781a      	ldrb	r2, [r3, #0]
 8000eb4:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8000eb8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN4_BITMASK;
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	f042 0208 	orr.w	r2, r2, #8
 8000ec0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	f002 027d 	and.w	r2, r2, #125	; 0x7d
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN1_BITMASK;
 8000ec8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8000ed0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT4_SELECTION_IN3_BITMASK;
 8000ed2:	781a      	ldrb	r2, [r3, #0]
 8000ed4:	f042 0201 	orr.w	r2, r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8000eda:	7818      	ldrb	r0, [r3, #0]
 8000edc:	f000 b948 	b.w	8001170 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <Car_ConfigDirection+0x128>)
 8000ee2:	781a      	ldrb	r2, [r3, #0]
 8000ee4:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8000ee8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN1_BITMASK;
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	f042 0220 	orr.w	r2, r2, #32
 8000ef0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8000ef2:	781a      	ldrb	r2, [r3, #0]
 8000ef4:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8000ef8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8000f00:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN1_BITMASK;
 8000f02:	781a      	ldrb	r2, [r3, #0]
 8000f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f08:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8000f10:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8000f12:	7818      	ldrb	r0, [r3, #0]
 8000f14:	f000 b92c 	b.w	8001170 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <Car_ConfigDirection+0x128>)
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8000f20:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN1_BITMASK;
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	f042 0220 	orr.w	r2, r2, #32
 8000f28:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8000f30:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN4_BITMASK;
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	f042 0208 	orr.w	r2, r2, #8
 8000f38:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8000f40:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN1_BITMASK;
 8000f42:	781a      	ldrb	r2, [r3, #0]
 8000f44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f48:	e7be      	b.n	8000ec8 <Car_ConfigDirection+0x58>
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <Car_ConfigDirection+0x128>)
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8000f52:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN2_BITMASK;
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	f042 0210 	orr.w	r2, r2, #16
 8000f5a:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8000f62:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN3_BITMASK;
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f6a:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8000f72:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN2_BITMASK;
 8000f74:	781a      	ldrb	r2, [r3, #0]
 8000f76:	f042 0202 	orr.w	r2, r2, #2
 8000f7a:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8000f82:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT4_SELECTION_IN4_BITMASK;
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	f042 0204 	orr.w	r2, r2, #4
 8000f8a:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8000f8c:	7818      	ldrb	r0, [r3, #0]
 8000f8e:	f000 b8ef 	b.w	8001170 <__MOTOR_SetShiftRegister>
 8000f92:	4b01      	ldr	r3, [pc, #4]	; (8000f98 <Car_ConfigDirection+0x128>)
 8000f94:	e785      	b.n	8000ea2 <Car_ConfigDirection+0x32>
 8000f96:	bf00      	nop
 8000f98:	200000bc 	.word	0x200000bc

08000f9c <__TEST_MOTOR_AlternateWheel>:
/**
 * @brief	Test code to check each wheel configuration and sequence
 */
void __TEST_MOTOR_AlternateWheel(uint32_t Counter)
{
	switch(Counter % 9)
 8000f9c:	4b5c      	ldr	r3, [pc, #368]	; (8001110 <__TEST_MOTOR_AlternateWheel+0x174>)
 8000f9e:	fba3 2300 	umull	r2, r3, r3, r0
 8000fa2:	085b      	lsrs	r3, r3, #1
 8000fa4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000fa8:	1ac0      	subs	r0, r0, r3
 8000faa:	3801      	subs	r0, #1
 8000fac:	2807      	cmp	r0, #7
 8000fae:	f200 80a5 	bhi.w	80010fc <__TEST_MOTOR_AlternateWheel+0x160>
 8000fb2:	e8df f000 	tbb	[pc, r0]
 8000fb6:	341c      	.short	0x341c
 8000fb8:	7e715941 	.word	0x7e715941
 8000fbc:	048b      	.short	0x048b
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8000fbe:	4b55      	ldr	r3, [pc, #340]	; (8001114 <__TEST_MOTOR_AlternateWheel+0x178>)
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8000fc6:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8000fce:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8000fd0:	781a      	ldrb	r2, [r3, #0]
 8000fd2:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8000fd6:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8000fde:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN3_BITMASK;
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fe6:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8000fe8:	7818      	ldrb	r0, [r3, #0]
 8000fea:	f000 b8c1 	b.w	8001170 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <__TEST_MOTOR_AlternateWheel+0x178>)
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8000ff6:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN1_BITMASK;
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ffe:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
					g_ShiftRegisterByteToSet |= MOT4_SELECTION_IN4_BITMASK;
 8001006:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 800100e:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8001016:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8001018:	7818      	ldrb	r0, [r3, #0]
 800101a:	f000 b8a9 	b.w	8001170 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 800101e:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <__TEST_MOTOR_AlternateWheel+0x178>)
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001026:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 800102e:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT4_SELECTION_IN3_BITMASK;
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	e7e6      	b.n	8001006 <__TEST_MOTOR_AlternateWheel+0x6a>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <__TEST_MOTOR_AlternateWheel+0x178>)
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001040:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8001048:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8001050:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN1_BITMASK;
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	f042 0220 	orr.w	r2, r2, #32
 8001058:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8001060:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8001062:	7818      	ldrb	r0, [r3, #0]
 8001064:	f000 b884 	b.w	8001170 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <__TEST_MOTOR_AlternateWheel+0x178>)
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001070:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001072:	781a      	ldrb	r2, [r3, #0]
 8001074:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8001078:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8001080:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8001088:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN4_BITMASK;
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	f042 0208 	orr.w	r2, r2, #8
 8001090:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8001092:	7818      	ldrb	r0, [r3, #0]
 8001094:	f000 b86c 	b.w	8001170 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <__TEST_MOTOR_AlternateWheel+0x178>)
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 80010a0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN2_BITMASK;
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	f042 0202 	orr.w	r2, r2, #2
 80010a8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 80010b0:	e7a9      	b.n	8001006 <__TEST_MOTOR_AlternateWheel+0x6a>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <__TEST_MOTOR_AlternateWheel+0x178>)
 80010b4:	781a      	ldrb	r2, [r3, #0]
 80010b6:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 80010ba:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 80010c2:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT4_SELECTION_IN4_BITMASK;
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	f042 0204 	orr.w	r2, r2, #4
 80010ca:	e79c      	b.n	8001006 <__TEST_MOTOR_AlternateWheel+0x6a>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <__TEST_MOTOR_AlternateWheel+0x178>)
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 80010d4:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 80010dc:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 80010e4:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN2_BITMASK;
 80010e6:	781a      	ldrb	r2, [r3, #0]
 80010e8:	f042 0210 	orr.w	r2, r2, #16
 80010ec:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 80010ee:	781a      	ldrb	r2, [r3, #0]
 80010f0:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 80010f4:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 80010f6:	7818      	ldrb	r0, [r3, #0]
 80010f8:	f000 b83a 	b.w	8001170 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <__TEST_MOTOR_AlternateWheel+0x178>)
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001104:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 800110c:	e77b      	b.n	8001006 <__TEST_MOTOR_AlternateWheel+0x6a>
 800110e:	bf00      	nop
 8001110:	38e38e39 	.word	0x38e38e39
 8001114:	200000bc 	.word	0x200000bc

08001118 <__MOTOR_HWInit>:
/**
 * @brief	Initialize motor driver and shift register
 * @note
 */
void __MOTOR_HWInit(void)
{
 8001118:	b538      	push	{r3, r4, r5, lr}
 * @brief	Enables the shift register by setting DIR_EN to LOW
 */
static void __MOTOR_EnableShiftRegister(void)
{
	/* The input pin is negated, and by default, the Shift Register is disabled */
	HAL_GPIO_WritePin(DIR_EN_GPIO_Port, DIR_EN_Pin, GPIO_PIN_RESET);
 800111a:	4810      	ldr	r0, [pc, #64]	; (800115c <__MOTOR_HWInit+0x44>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800111c:	4d10      	ldr	r5, [pc, #64]	; (8001160 <__MOTOR_HWInit+0x48>)
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800111e:	4c11      	ldr	r4, [pc, #68]	; (8001164 <__MOTOR_HWInit+0x4c>)
	HAL_GPIO_WritePin(DIR_EN_GPIO_Port, DIR_EN_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2120      	movs	r1, #32
 8001124:	f002 ff90 	bl	8004048 <HAL_GPIO_WritePin>
		CCRvalue = Percentage * 10;

	/* Configure all relevant CCR registers with the same duty cycle value */
	TIM3->CCR1 = CCRvalue;
	TIM3->CCR2 = CCRvalue;
	TIM1->CCR2 = CCRvalue;
 8001128:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <__MOTOR_HWInit+0x50>)
	TIM3->CCR1 = CCRvalue;
 800112a:	4910      	ldr	r1, [pc, #64]	; (800116c <__MOTOR_HWInit+0x54>)
 800112c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001130:	634b      	str	r3, [r1, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001132:	4628      	mov	r0, r5
	TIM3->CCR2 = CCRvalue;
 8001134:	638b      	str	r3, [r1, #56]	; 0x38
	TIM1->CCR2 = CCRvalue;
 8001136:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001138:	2104      	movs	r1, #4
	TIM1->CCR3 = CCRvalue;
 800113a:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800113c:	f005 ff0c 	bl	8006f58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001140:	4628      	mov	r0, r5
 8001142:	2108      	movs	r1, #8
 8001144:	f005 ff08 	bl	8006f58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001148:	4620      	mov	r0, r4
 800114a:	2100      	movs	r1, #0
 800114c:	f005 ff04 	bl	8006f58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001150:	4620      	mov	r0, r4
 8001152:	2104      	movs	r1, #4
}
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001158:	f005 befe 	b.w	8006f58 <HAL_TIM_PWM_Start>
 800115c:	40020400 	.word	0x40020400
 8001160:	20009bfc 	.word	0x20009bfc
 8001164:	20009bb4 	.word	0x20009bb4
 8001168:	40010000 	.word	0x40010000
 800116c:	40000400 	.word	0x40000400

08001170 <__MOTOR_SetShiftRegister>:
{
 8001170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	g_RecentShiftRegisterByte = cByte;
 8001174:	4b63      	ldr	r3, [pc, #396]	; (8001304 <__MOTOR_SetShiftRegister+0x194>)
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_SET);
 8001176:	4f64      	ldr	r7, [pc, #400]	; (8001308 <__MOTOR_SetShiftRegister+0x198>)
		HAL_GPIO_WritePin(DIR_SER_GPIO_Port, DIR_SER_Pin, GPIO_PIN_SET);
 8001178:	f8df 8190 	ldr.w	r8, [pc, #400]	; 800130c <__MOTOR_SetShiftRegister+0x19c>
	g_RecentShiftRegisterByte = cByte;
 800117c:	7018      	strb	r0, [r3, #0]
{
 800117e:	b084      	sub	sp, #16
 8001180:	4605      	mov	r5, r0
	g_RecentShiftRegisterByte = cByte;
 8001182:	2408      	movs	r4, #8
	for(volatile uint8_t i=0; i<0x7F; i++);
 8001184:	2600      	movs	r6, #0
		if(temp & 0x1)
 8001186:	f015 0301 	ands.w	r3, r5, #1
 800118a:	f000 808e 	beq.w	80012aa <__MOTOR_SetShiftRegister+0x13a>
		HAL_GPIO_WritePin(DIR_SER_GPIO_Port, DIR_SER_Pin, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001194:	4640      	mov	r0, r8
 8001196:	f002 ff57 	bl	8004048 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x3F; i++);
 800119a:	f88d 600a 	strb.w	r6, [sp, #10]
 800119e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80011a2:	2b3e      	cmp	r3, #62	; 0x3e
 80011a4:	d809      	bhi.n	80011ba <__MOTOR_SetShiftRegister+0x4a>
 80011a6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	f88d 300a 	strb.w	r3, [sp, #10]
 80011b2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80011b6:	2b3e      	cmp	r3, #62	; 0x3e
 80011b8:	d9f5      	bls.n	80011a6 <__MOTOR_SetShiftRegister+0x36>
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	4611      	mov	r1, r2
 80011be:	4638      	mov	r0, r7
 80011c0:	f002 ff42 	bl	8004048 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x7F; i++);
 80011c4:	f88d 600b 	strb.w	r6, [sp, #11]
 80011c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011cc:	2b7e      	cmp	r3, #126	; 0x7e
 80011ce:	d809      	bhi.n	80011e4 <__MOTOR_SetShiftRegister+0x74>
 80011d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f88d 300b 	strb.w	r3, [sp, #11]
 80011dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011e0:	2b7e      	cmp	r3, #126	; 0x7e
 80011e2:	d9f5      	bls.n	80011d0 <__MOTOR_SetShiftRegister+0x60>
		HAL_GPIO_WritePin(DIR_SER_GPIO_Port, DIR_SER_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ea:	4640      	mov	r0, r8
 80011ec:	f002 ff2c 	bl	8004048 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x3F; i++);
 80011f0:	f88d 600c 	strb.w	r6, [sp, #12]
 80011f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80011f8:	2b3e      	cmp	r3, #62	; 0x3e
 80011fa:	d809      	bhi.n	8001210 <__MOTOR_SetShiftRegister+0xa0>
 80011fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001200:	3301      	adds	r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f88d 300c 	strb.w	r3, [sp, #12]
 8001208:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800120c:	2b3e      	cmp	r3, #62	; 0x3e
 800120e:	d9f5      	bls.n	80011fc <__MOTOR_SetShiftRegister+0x8c>
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2101      	movs	r1, #1
 8001214:	4638      	mov	r0, r7
 8001216:	f002 ff17 	bl	8004048 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x3F; i++);
 800121a:	f88d 6007 	strb.w	r6, [sp, #7]
 800121e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001222:	2b3e      	cmp	r3, #62	; 0x3e
		temp = temp >> 1;
 8001224:	ea4f 0555 	mov.w	r5, r5, lsr #1
	for(volatile uint8_t i=0; i<0x3F; i++);
 8001228:	d809      	bhi.n	800123e <__MOTOR_SetShiftRegister+0xce>
 800122a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800122e:	3301      	adds	r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f88d 3007 	strb.w	r3, [sp, #7]
 8001236:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800123a:	2b3e      	cmp	r3, #62	; 0x3e
 800123c:	d9f5      	bls.n	800122a <__MOTOR_SetShiftRegister+0xba>
	for(uint8_t i=0; i<8; i++)
 800123e:	3c01      	subs	r4, #1
 8001240:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001244:	d19f      	bne.n	8001186 <__MOTOR_SetShiftRegister+0x16>
	HAL_GPIO_WritePin(DIR_LATCH_GPIO_Port, DIR_LATCH_Pin, GPIO_PIN_SET);
 8001246:	4831      	ldr	r0, [pc, #196]	; (800130c <__MOTOR_SetShiftRegister+0x19c>)
 8001248:	2201      	movs	r2, #1
 800124a:	2140      	movs	r1, #64	; 0x40
 800124c:	f002 fefc 	bl	8004048 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0xFF; i++);
 8001250:	f88d 4009 	strb.w	r4, [sp, #9]
 8001254:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001258:	2bff      	cmp	r3, #255	; 0xff
 800125a:	d009      	beq.n	8001270 <__MOTOR_SetShiftRegister+0x100>
 800125c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001260:	3301      	adds	r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f88d 3009 	strb.w	r3, [sp, #9]
 8001268:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800126c:	2bff      	cmp	r3, #255	; 0xff
 800126e:	d1f5      	bne.n	800125c <__MOTOR_SetShiftRegister+0xec>
	HAL_GPIO_WritePin(DIR_LATCH_GPIO_Port, DIR_LATCH_Pin, GPIO_PIN_RESET);
 8001270:	4826      	ldr	r0, [pc, #152]	; (800130c <__MOTOR_SetShiftRegister+0x19c>)
 8001272:	2200      	movs	r2, #0
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	f002 fee7 	bl	8004048 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0xFF; i++);
 800127a:	2300      	movs	r3, #0
 800127c:	f88d 3008 	strb.w	r3, [sp, #8]
 8001280:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d009      	beq.n	800129c <__MOTOR_SetShiftRegister+0x12c>
 8001288:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800128c:	3301      	adds	r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f88d 3008 	strb.w	r3, [sp, #8]
 8001294:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001298:	2bff      	cmp	r3, #255	; 0xff
 800129a:	d1f5      	bne.n	8001288 <__MOTOR_SetShiftRegister+0x118>
}
 800129c:	b004      	add	sp, #16
 800129e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for(volatile uint8_t i=0; i<0x3F; i++);
 80012a2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f88d 300d 	strb.w	r3, [sp, #13]
 80012ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80012b2:	2b3e      	cmp	r3, #62	; 0x3e
 80012b4:	d9f5      	bls.n	80012a2 <__MOTOR_SetShiftRegister+0x132>
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	4611      	mov	r1, r2
 80012ba:	4638      	mov	r0, r7
 80012bc:	f002 fec4 	bl	8004048 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x7F; i++);
 80012c0:	f88d 600e 	strb.w	r6, [sp, #14]
 80012c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012c8:	2b7e      	cmp	r3, #126	; 0x7e
 80012ca:	d809      	bhi.n	80012e0 <__MOTOR_SetShiftRegister+0x170>
 80012cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012d0:	3301      	adds	r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f88d 300e 	strb.w	r3, [sp, #14]
 80012d8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012dc:	2b7e      	cmp	r3, #126	; 0x7e
 80012de:	d9f5      	bls.n	80012cc <__MOTOR_SetShiftRegister+0x15c>
	for(volatile uint8_t i=0; i<0x3F; i++);
 80012e0:	f88d 600f 	strb.w	r6, [sp, #15]
 80012e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80012e8:	2b3e      	cmp	r3, #62	; 0x3e
 80012ea:	d891      	bhi.n	8001210 <__MOTOR_SetShiftRegister+0xa0>
 80012ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80012f0:	3301      	adds	r3, #1
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f88d 300f 	strb.w	r3, [sp, #15]
 80012f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80012fc:	2b3e      	cmp	r3, #62	; 0x3e
 80012fe:	d9f5      	bls.n	80012ec <__MOTOR_SetShiftRegister+0x17c>
 8001300:	e786      	b.n	8001210 <__MOTOR_SetShiftRegister+0xa0>
 8001302:	bf00      	nop
 8001304:	200000bd 	.word	0x200000bd
 8001308:	40020800 	.word	0x40020800
 800130c:	40020400 	.word	0x40020400

08001310 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001310:	b530      	push	{r4, r5, lr}
 8001312:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HCI_TL_SPI_Init+0x70>)

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001316:	481b      	ldr	r0, [pc, #108]	; (8001384 <HCI_TL_SPI_Init+0x74>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	2100      	movs	r1, #0
 800131a:	9101      	str	r1, [sp, #4]
 800131c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	9104      	str	r1, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HCI_TL_SPI_Init+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001332:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001334:	2201      	movs	r2, #1
 8001336:	e9cd 2302 	strd	r2, r3, [sp, #8]

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800133a:	2400      	movs	r4, #0
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800133c:	f002 fc6c 	bl	8003c18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001340:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001342:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001348:	2301      	movs	r3, #1
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800134a:	480e      	ldr	r0, [pc, #56]	; (8001384 <HCI_TL_SPI_Init+0x74>)
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800134c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001350:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001354:	f002 fc60 	bl	8003c18 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001358:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800135a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800135c:	2202      	movs	r2, #2
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800135e:	4809      	ldr	r0, [pc, #36]	; (8001384 <HCI_TL_SPI_Init+0x74>)
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001360:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001364:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001368:	f002 fc56 	bl	8003c18 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2102      	movs	r1, #2
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <HCI_TL_SPI_Init+0x74>)
 8001372:	f002 fe69 	bl	8004048 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8001376:	f001 f83b 	bl	80023f0 <BSP_SPI1_Init>
}
 800137a:	b009      	add	sp, #36	; 0x24
 800137c:	bd30      	pop	{r4, r5, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40020000 	.word	0x40020000
 8001388:	10110000 	.word	0x10110000

0800138c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800138c:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800138e:	4807      	ldr	r0, [pc, #28]	; (80013ac <HCI_TL_SPI_DeInit+0x20>)
 8001390:	2101      	movs	r1, #1
 8001392:	f002 fd91 	bl	8003eb8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <HCI_TL_SPI_DeInit+0x20>)
 8001398:	2102      	movs	r1, #2
 800139a:	f002 fd8d 	bl	8003eb8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800139e:	4803      	ldr	r0, [pc, #12]	; (80013ac <HCI_TL_SPI_DeInit+0x20>)
 80013a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a4:	f002 fd88 	bl	8003eb8 <HAL_GPIO_DeInit>
  return 0;
}
 80013a8:	2000      	movs	r0, #0
 80013aa:	bd08      	pop	{r3, pc}
 80013ac:	40020000 	.word	0x40020000

080013b0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80013b0:	b510      	push	{r4, lr}
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80013b2:	4c0d      	ldr	r4, [pc, #52]	; (80013e8 <HCI_TL_SPI_Reset+0x38>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	4620      	mov	r0, r4
 80013b8:	2102      	movs	r1, #2
 80013ba:	f002 fe45 	bl	8004048 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80013be:	4620      	mov	r0, r4
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c6:	f002 fe3f 	bl	8004048 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80013ca:	2005      	movs	r0, #5
 80013cc:	f001 fe8e 	bl	80030ec <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80013d0:	4620      	mov	r0, r4
 80013d2:	2201      	movs	r2, #1
 80013d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d8:	f002 fe36 	bl	8004048 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80013dc:	2005      	movs	r0, #5
 80013de:	f001 fe85 	bl	80030ec <HAL_Delay>
  return 0;
}
 80013e2:	2000      	movs	r0, #0
 80013e4:	bd10      	pop	{r4, pc}
 80013e6:	bf00      	nop
 80013e8:	40020000 	.word	0x40020000

080013ec <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_00 = 0x00;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HCI_TL_SPI_Receive+0x80>)
{
 80013f0:	4606      	mov	r6, r0
 80013f2:	460f      	mov	r7, r1
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80013f4:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 80013f8:	b087      	sub	sp, #28
  uint8_t char_00 = 0x00;
 80013fa:	2400      	movs	r4, #0
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80013fc:	9002      	str	r0, [sp, #8]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80013fe:	2006      	movs	r0, #6
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001400:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t char_00 = 0x00;
 8001404:	f88d 4006 	strb.w	r4, [sp, #6]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001408:	f002 f944 	bl	8003694 <HAL_NVIC_DisableIRQ>
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800140c:	4818      	ldr	r0, [pc, #96]	; (8001470 <HCI_TL_SPI_Receive+0x84>)
 800140e:	4622      	mov	r2, r4
 8001410:	2102      	movs	r1, #2
 8001412:	f002 fe19 	bl	8004048 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001416:	2205      	movs	r2, #5
 8001418:	a904      	add	r1, sp, #16
 800141a:	a802      	add	r0, sp, #8
 800141c:	f000 ffb2 	bl	8002384 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8001420:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001424:	f89d 3013 	ldrb.w	r3, [sp, #19]

  if(byte_count > 0)
 8001428:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 800142c:	d013      	beq.n	8001456 <HCI_TL_SPI_Receive+0x6a>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 800142e:	42bd      	cmp	r5, r7
 8001430:	bf28      	it	cs
 8001432:	463d      	movcs	r5, r7
    {
      byte_count = size;
    }

    for(len = 0; len < byte_count; len++)
 8001434:	b17d      	cbz	r5, 8001456 <HCI_TL_SPI_Receive+0x6a>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8001436:	2201      	movs	r2, #1
 8001438:	f10d 0107 	add.w	r1, sp, #7
 800143c:	f10d 0006 	add.w	r0, sp, #6
 8001440:	f000 ffa0 	bl	8002384 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8001444:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001448:	5532      	strb	r2, [r6, r4]
    for(len = 0; len < byte_count; len++)
 800144a:	1c63      	adds	r3, r4, #1
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4295      	cmp	r5, r2
 8001450:	4614      	mov	r4, r2
 8001452:	d8f0      	bhi.n	8001436 <HCI_TL_SPI_Receive+0x4a>
 8001454:	4615      	mov	r5, r2
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2102      	movs	r1, #2
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <HCI_TL_SPI_Receive+0x84>)
 800145c:	f002 fdf4 	bl	8004048 <HAL_GPIO_WritePin>
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001460:	2006      	movs	r0, #6
 8001462:	f002 f903 	bl	800366c <HAL_NVIC_EnableIRQ>

  HCI_TL_SPI_Enable_IRQ();

  return len;
}
 8001466:	4628      	mov	r0, r5
 8001468:	b007      	add	sp, #28
 800146a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146c:	0800c364 	.word	0x0800c364
 8001470:	40020000 	.word	0x40020000

08001474 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HCI_TL_SPI_Send+0xc4>)
    uint32_t tickstart_data_available = HAL_GetTick();

    result = 0;

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800147a:	4e30      	ldr	r6, [pc, #192]	; (800153c <HCI_TL_SPI_Send+0xc8>)
{
 800147c:	4681      	mov	r9, r0
 800147e:	460f      	mov	r7, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001480:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8001484:	b085      	sub	sp, #20
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8001486:	9000      	str	r0, [sp, #0]
 8001488:	f88d 1004 	strb.w	r1, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f001 fe28 	bl	80030e0 <HAL_GetTick>
 8001490:	4680      	mov	r8, r0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001492:	2006      	movs	r0, #6
 8001494:	f002 f8fe 	bl	8003694 <HAL_NVIC_DisableIRQ>
    uint32_t tickstart_data_available = HAL_GetTick();
 8001498:	f001 fe22 	bl	80030e0 <HAL_GetTick>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
    uint32_t tickstart_data_available = HAL_GetTick();
 800149e:	4605      	mov	r5, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80014a0:	2102      	movs	r1, #2
 80014a2:	4630      	mov	r0, r6
 80014a4:	f002 fdd0 	bl	8004048 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80014a8:	e004      	b.n	80014b4 <HCI_TL_SPI_Send+0x40>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80014aa:	f001 fe19 	bl	80030e0 <HAL_GetTick>
 80014ae:	1b40      	subs	r0, r0, r5
 80014b0:	280f      	cmp	r0, #15
 80014b2:	d83a      	bhi.n	800152a <HCI_TL_SPI_Send+0xb6>
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80014b4:	4821      	ldr	r0, [pc, #132]	; (800153c <HCI_TL_SPI_Send+0xc8>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	f002 fdb4 	bl	8004024 <HAL_GPIO_ReadPin>
    while(!IsDataAvailable())
 80014bc:	2801      	cmp	r0, #1
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80014be:	4604      	mov	r4, r0
    while(!IsDataAvailable())
 80014c0:	d1f3      	bne.n	80014aa <HCI_TL_SPI_Send+0x36>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80014c2:	2205      	movs	r2, #5
 80014c4:	a902      	add	r1, sp, #8
 80014c6:	4668      	mov	r0, sp
 80014c8:	f000 ff5c 	bl	8002384 <BSP_SPI1_SendRecv>
    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80014cc:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80014d0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    if(rx_bytes >= size)
 80014d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014d8:	42bb      	cmp	r3, r7
 80014da:	d213      	bcs.n	8001504 <HCI_TL_SPI_Send+0x90>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80014dc:	4622      	mov	r2, r4
 80014de:	2102      	movs	r1, #2
 80014e0:	4630      	mov	r0, r6
 80014e2:	f002 fdb1 	bl	8004048 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80014e6:	f001 fdfb 	bl	80030e0 <HAL_GetTick>
 80014ea:	eba0 0008 	sub.w	r0, r0, r8
 80014ee:	280f      	cmp	r0, #15
 80014f0:	d9d2      	bls.n	8001498 <HCI_TL_SPI_Send+0x24>
      break;
 80014f2:	f06f 0402 	mvn.w	r4, #2
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80014f6:	2006      	movs	r0, #6
 80014f8:	f002 f8b8 	bl	800366c <HAL_NVIC_EnableIRQ>
}
 80014fc:	4620      	mov	r0, r4
 80014fe:	b005      	add	sp, #20
 8001500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001504:	490e      	ldr	r1, [pc, #56]	; (8001540 <HCI_TL_SPI_Send+0xcc>)
 8001506:	463a      	mov	r2, r7
 8001508:	4648      	mov	r0, r9
 800150a:	f000 ff3b 	bl	8002384 <BSP_SPI1_SendRecv>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800150e:	4622      	mov	r2, r4
 8001510:	480a      	ldr	r0, [pc, #40]	; (800153c <HCI_TL_SPI_Send+0xc8>)
 8001512:	2102      	movs	r1, #2
 8001514:	f002 fd98 	bl	8004048 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001518:	f001 fde2 	bl	80030e0 <HAL_GetTick>
 800151c:	eba0 0008 	sub.w	r0, r0, r8
 8001520:	280f      	cmp	r0, #15
 8001522:	bf98      	it	ls
 8001524:	2400      	movls	r4, #0
 8001526:	d9e6      	bls.n	80014f6 <HCI_TL_SPI_Send+0x82>
 8001528:	e7e3      	b.n	80014f2 <HCI_TL_SPI_Send+0x7e>
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <HCI_TL_SPI_Send+0xc8>)
 800152c:	2201      	movs	r2, #1
 800152e:	2102      	movs	r1, #2
 8001530:	f002 fd8a 	bl	8004048 <HAL_GPIO_WritePin>
 8001534:	e7dd      	b.n	80014f2 <HCI_TL_SPI_Send+0x7e>
 8001536:	bf00      	nop
 8001538:	0800c36c 	.word	0x0800c36c
 800153c:	40020000 	.word	0x40020000
 8001540:	200000c0 	.word	0x200000c0

08001544 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001544:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001546:	4c07      	ldr	r4, [pc, #28]	; (8001564 <hci_tl_lowlevel_isr+0x20>)
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001548:	e002      	b.n	8001550 <hci_tl_lowlevel_isr+0xc>
  {
    if (hci_notify_asynch_evt(NULL))
 800154a:	f007 fb19 	bl	8008b80 <hci_notify_asynch_evt>
 800154e:	b940      	cbnz	r0, 8001562 <hci_tl_lowlevel_isr+0x1e>
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001550:	2101      	movs	r1, #1
 8001552:	4620      	mov	r0, r4
 8001554:	f002 fd66 	bl	8004024 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
  while(IsDataAvailable())
 800155a:	2b01      	cmp	r3, #1
    if (hci_notify_asynch_evt(NULL))
 800155c:	f04f 0000 	mov.w	r0, #0
  while(IsDataAvailable())
 8001560:	d0f3      	beq.n	800154a <hci_tl_lowlevel_isr+0x6>
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001562:	bd10      	pop	{r4, pc}
 8001564:	40020000 	.word	0x40020000

08001568 <hci_tl_lowlevel_init>:
{
 8001568:	b530      	push	{r4, r5, lr}
 800156a:	b089      	sub	sp, #36	; 0x24
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800156c:	4c11      	ldr	r4, [pc, #68]	; (80015b4 <hci_tl_lowlevel_init+0x4c>)
  fops.Receive = HCI_TL_SPI_Receive;
 800156e:	4912      	ldr	r1, [pc, #72]	; (80015b8 <hci_tl_lowlevel_init+0x50>)
  fops.Init    = HCI_TL_SPI_Init;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <hci_tl_lowlevel_init+0x54>)
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001572:	4813      	ldr	r0, [pc, #76]	; (80015c0 <hci_tl_lowlevel_init+0x58>)
  fops.Send    = HCI_TL_SPI_Send;
 8001574:	4d13      	ldr	r5, [pc, #76]	; (80015c4 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 8001576:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <hci_tl_lowlevel_init+0x60>)
  fops.Init    = HCI_TL_SPI_Init;
 8001578:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800157a:	9002      	str	r0, [sp, #8]
  fops.GetTick = BSP_GetTick;
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <hci_tl_lowlevel_init+0x64>)
 800157e:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8001580:	a801      	add	r0, sp, #4
  fops.Reset   = HCI_TL_SPI_Reset;
 8001582:	9203      	str	r2, [sp, #12]
  fops.Receive = HCI_TL_SPI_Receive;
 8001584:	e9cd 1504 	strd	r1, r5, [sp, #16]
  hci_register_io_bus (&fops);
 8001588:	f007 f9e0 	bl	800894c <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800158c:	4620      	mov	r0, r4
 800158e:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8001592:	f002 fb09 	bl	8003ba8 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <hci_tl_lowlevel_init+0x68>)
 8001598:	4620      	mov	r0, r4
 800159a:	2100      	movs	r1, #0
 800159c:	f002 fafe 	bl	8003b9c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2105      	movs	r1, #5
 80015a4:	2006      	movs	r0, #6
 80015a6:	f002 f817 	bl	80035d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015aa:	2006      	movs	r0, #6
 80015ac:	f002 f85e 	bl	800366c <HAL_NVIC_EnableIRQ>
}
 80015b0:	b009      	add	sp, #36	; 0x24
 80015b2:	bd30      	pop	{r4, r5, pc}
 80015b4:	200098f8 	.word	0x200098f8
 80015b8:	080013ed 	.word	0x080013ed
 80015bc:	08001311 	.word	0x08001311
 80015c0:	0800138d 	.word	0x0800138d
 80015c4:	08001475 	.word	0x08001475
 80015c8:	080013b1 	.word	0x080013b1
 80015cc:	080023b1 	.word	0x080023b1
 80015d0:	08001545 	.word	0x08001545

080015d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015d6:	4818      	ldr	r0, [pc, #96]	; (8001638 <MX_ADC1_Init+0x64>)
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <MX_ADC1_Init+0x68>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015da:	4919      	ldr	r1, [pc, #100]	; (8001640 <MX_ADC1_Init+0x6c>)
  hadc1.Instance = ADC1;
 80015dc:	6003      	str	r3, [r0, #0]
{
 80015de:	b084      	sub	sp, #16
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 80015e4:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015e6:	6042      	str	r2, [r0, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80015e8:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 80015ea:	e9cd 3301 	strd	r3, r3, [sp, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ee:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015f0:	6083      	str	r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015f2:	9300      	str	r3, [sp, #0]
  hadc1.Init.ScanConvMode = DISABLE;
 80015f4:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015f6:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015fe:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001600:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001604:	9303      	str	r3, [sp, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001606:	61c2      	str	r2, [r0, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001608:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800160a:	f001 fd81 	bl	8003110 <HAL_ADC_Init>
 800160e:	b960      	cbnz	r0, 800162a <MX_ADC1_Init+0x56>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001610:	2202      	movs	r2, #2
 8001612:	2301      	movs	r3, #1
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001614:	2400      	movs	r4, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <MX_ADC1_Init+0x64>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001618:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_2;
 800161c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001620:	f001 fed2 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8001624:	b920      	cbnz	r0, 8001630 <MX_ADC1_Init+0x5c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001626:	b004      	add	sp, #16
 8001628:	bd10      	pop	{r4, pc}
    Error_Handler();
 800162a:	f001 f965 	bl	80028f8 <Error_Handler>
 800162e:	e7ef      	b.n	8001610 <MX_ADC1_Init+0x3c>
    Error_Handler();
 8001630:	f001 f962 	bl	80028f8 <Error_Handler>
}
 8001634:	b004      	add	sp, #16
 8001636:	bd10      	pop	{r4, pc}
 8001638:	20009900 	.word	0x20009900
 800163c:	40012000 	.word	0x40012000
 8001640:	0f000001 	.word	0x0f000001

08001644 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001644:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8001646:	6802      	ldr	r2, [r0, #0]
 8001648:	4b24      	ldr	r3, [pc, #144]	; (80016dc <HAL_ADC_MspInit+0x98>)
{
 800164a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 800164e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001654:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001658:	9406      	str	r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 800165a:	d001      	beq.n	8001660 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800165c:	b008      	add	sp, #32
 800165e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001660:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001664:	9400      	str	r4, [sp, #0]
 8001666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8001668:	4e1d      	ldr	r6, [pc, #116]	; (80016e0 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800166a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800166e:	645a      	str	r2, [r3, #68]	; 0x44
 8001670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001672:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800168e:	2204      	movs	r2, #4
 8001690:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	a902      	add	r1, sp, #8
 8001694:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	4812      	ldr	r0, [pc, #72]	; (80016e4 <HAL_ADC_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800169a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f002 fabb 	bl	8003c18 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80016a2:	4811      	ldr	r0, [pc, #68]	; (80016e8 <HAL_ADC_MspInit+0xa4>)
 80016a4:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016b2:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b4:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016b8:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016bc:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016c0:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c2:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016c4:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016c6:	f001 ffff 	bl	80036c8 <HAL_DMA_Init>
 80016ca:	b918      	cbnz	r0, 80016d4 <HAL_ADC_MspInit+0x90>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80016cc:	63ae      	str	r6, [r5, #56]	; 0x38
 80016ce:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80016d0:	b008      	add	sp, #32
 80016d2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80016d4:	f001 f910 	bl	80028f8 <Error_Handler>
 80016d8:	e7f8      	b.n	80016cc <HAL_ADC_MspInit+0x88>
 80016da:	bf00      	nop
 80016dc:	40012000 	.word	0x40012000
 80016e0:	20009948 	.word	0x20009948
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40026410 	.word	0x40026410

080016ec <APP_UserEvtRx>:
{
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;

  if(hci_pckt->type == HCI_EVENT_PKT)
 80016ec:	7803      	ldrb	r3, [r0, #0]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d000      	beq.n	80016f4 <APP_UserEvtRx+0x8>
 80016f2:	4770      	bx	lr
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;

    if(event_pckt->evt == EVT_LE_META_EVENT)
 80016f6:	7843      	ldrb	r3, [r0, #1]
 80016f8:	2b3e      	cmp	r3, #62	; 0x3e
{
 80016fa:	b083      	sub	sp, #12
 80016fc:	4605      	mov	r5, r0
    if(event_pckt->evt == EVT_LE_META_EVENT)
 80016fe:	d042      	beq.n	8001786 <APP_UserEvtRx+0x9a>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
        }
      }
    }
    else if(event_pckt->evt == EVT_VENDOR)
 8001700:	2bff      	cmp	r3, #255	; 0xff
 8001702:	d02f      	beq.n	8001764 <APP_UserEvtRx+0x78>
    }
    else
    {
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
      {
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001704:	4c48      	ldr	r4, [pc, #288]	; (8001828 <APP_UserEvtRx+0x13c>)
 8001706:	8822      	ldrh	r2, [r4, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d103      	bne.n	8001714 <APP_UserEvtRx+0x28>
        {
          hci_events_table[i].process((void *)event_pckt->data);
 800170c:	6863      	ldr	r3, [r4, #4]
 800170e:	3003      	adds	r0, #3
 8001710:	4798      	blx	r3
 8001712:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001714:	8922      	ldrh	r2, [r4, #8]
 8001716:	4293      	cmp	r3, r2
 8001718:	d103      	bne.n	8001722 <APP_UserEvtRx+0x36>
          hci_events_table[i].process((void *)event_pckt->data);
 800171a:	68e3      	ldr	r3, [r4, #12]
 800171c:	1ce8      	adds	r0, r5, #3
 800171e:	4798      	blx	r3
 8001720:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001722:	8a22      	ldrh	r2, [r4, #16]
 8001724:	4293      	cmp	r3, r2
 8001726:	d103      	bne.n	8001730 <APP_UserEvtRx+0x44>
          hci_events_table[i].process((void *)event_pckt->data);
 8001728:	6963      	ldr	r3, [r4, #20]
 800172a:	1ce8      	adds	r0, r5, #3
 800172c:	4798      	blx	r3
 800172e:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001730:	8b22      	ldrh	r2, [r4, #24]
 8001732:	4293      	cmp	r3, r2
 8001734:	d103      	bne.n	800173e <APP_UserEvtRx+0x52>
          hci_events_table[i].process((void *)event_pckt->data);
 8001736:	69e3      	ldr	r3, [r4, #28]
 8001738:	1ce8      	adds	r0, r5, #3
 800173a:	4798      	blx	r3
 800173c:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800173e:	8c22      	ldrh	r2, [r4, #32]
 8001740:	4293      	cmp	r3, r2
 8001742:	d103      	bne.n	800174c <APP_UserEvtRx+0x60>
          hci_events_table[i].process((void *)event_pckt->data);
 8001744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001746:	1ce8      	adds	r0, r5, #3
 8001748:	4798      	blx	r3
 800174a:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800174c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800174e:	4293      	cmp	r3, r2
 8001750:	d103      	bne.n	800175a <APP_UserEvtRx+0x6e>
          hci_events_table[i].process((void *)event_pckt->data);
 8001752:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001754:	1ce8      	adds	r0, r5, #3
 8001756:	4798      	blx	r3
 8001758:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800175a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 800175c:	4293      	cmp	r3, r2
 800175e:	d05c      	beq.n	800181a <APP_UserEvtRx+0x12e>
        }
      }
    }
  }
}
 8001760:	b003      	add	sp, #12
 8001762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001764:	4c31      	ldr	r4, [pc, #196]	; (800182c <APP_UserEvtRx+0x140>)
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001766:	1d47      	adds	r7, r0, #5
 8001768:	f504 76ac 	add.w	r6, r4, #344	; 0x158
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 800176c:	f8b5 2003 	ldrh.w	r2, [r5, #3]
 8001770:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d102      	bne.n	800177e <APP_UserEvtRx+0x92>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	4638      	mov	r0, r7
 800177c:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800177e:	3408      	adds	r4, #8
 8001780:	42b4      	cmp	r4, r6
 8001782:	d1f3      	bne.n	800176c <APP_UserEvtRx+0x80>
 8001784:	e7ec      	b.n	8001760 <APP_UserEvtRx+0x74>
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001786:	4c2a      	ldr	r4, [pc, #168]	; (8001830 <APP_UserEvtRx+0x144>)
 8001788:	78c3      	ldrb	r3, [r0, #3]
 800178a:	8822      	ldrh	r2, [r4, #0]
 800178c:	4293      	cmp	r3, r2
 800178e:	d103      	bne.n	8001798 <APP_UserEvtRx+0xac>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001790:	6863      	ldr	r3, [r4, #4]
 8001792:	3004      	adds	r0, #4
 8001794:	4798      	blx	r3
 8001796:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001798:	8922      	ldrh	r2, [r4, #8]
 800179a:	4293      	cmp	r3, r2
 800179c:	d103      	bne.n	80017a6 <APP_UserEvtRx+0xba>
          hci_le_meta_events_table[i].process((void *)evt->data);
 800179e:	68e3      	ldr	r3, [r4, #12]
 80017a0:	1d28      	adds	r0, r5, #4
 80017a2:	4798      	blx	r3
 80017a4:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80017a6:	8a22      	ldrh	r2, [r4, #16]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d103      	bne.n	80017b4 <APP_UserEvtRx+0xc8>
          hci_le_meta_events_table[i].process((void *)evt->data);
 80017ac:	6963      	ldr	r3, [r4, #20]
 80017ae:	1d28      	adds	r0, r5, #4
 80017b0:	4798      	blx	r3
 80017b2:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80017b4:	8b22      	ldrh	r2, [r4, #24]
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d103      	bne.n	80017c2 <APP_UserEvtRx+0xd6>
          hci_le_meta_events_table[i].process((void *)evt->data);
 80017ba:	69e3      	ldr	r3, [r4, #28]
 80017bc:	1d28      	adds	r0, r5, #4
 80017be:	4798      	blx	r3
 80017c0:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80017c2:	8c22      	ldrh	r2, [r4, #32]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d103      	bne.n	80017d0 <APP_UserEvtRx+0xe4>
          hci_le_meta_events_table[i].process((void *)evt->data);
 80017c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017ca:	1d28      	adds	r0, r5, #4
 80017cc:	4798      	blx	r3
 80017ce:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80017d0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d103      	bne.n	80017de <APP_UserEvtRx+0xf2>
          hci_le_meta_events_table[i].process((void *)evt->data);
 80017d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017d8:	1d28      	adds	r0, r5, #4
 80017da:	4798      	blx	r3
 80017dc:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80017de:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d103      	bne.n	80017ec <APP_UserEvtRx+0x100>
          hci_le_meta_events_table[i].process((void *)evt->data);
 80017e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017e6:	1d28      	adds	r0, r5, #4
 80017e8:	4798      	blx	r3
 80017ea:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80017ec:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d103      	bne.n	80017fa <APP_UserEvtRx+0x10e>
          hci_le_meta_events_table[i].process((void *)evt->data);
 80017f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017f4:	1d28      	adds	r0, r5, #4
 80017f6:	4798      	blx	r3
 80017f8:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80017fa:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80017fe:	4293      	cmp	r3, r2
 8001800:	d103      	bne.n	800180a <APP_UserEvtRx+0x11e>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001802:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001804:	1d28      	adds	r0, r5, #4
 8001806:	4798      	blx	r3
 8001808:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 800180a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800180e:	4293      	cmp	r3, r2
 8001810:	d1a6      	bne.n	8001760 <APP_UserEvtRx+0x74>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001812:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	1d28      	adds	r0, r5, #4
 8001818:	e002      	b.n	8001820 <APP_UserEvtRx+0x134>
          hci_events_table[i].process((void *)event_pckt->data);
 800181a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	1ce8      	adds	r0, r5, #3
}
 8001820:	b003      	add	sp, #12
 8001822:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hci_events_table[i].process((void *)event_pckt->data);
 8001826:	4718      	bx	r3
 8001828:	0800c950 	.word	0x0800c950
 800182c:	0800c9dc 	.word	0x0800c9dc
 8001830:	0800c988 	.word	0x0800c988

08001834 <BlueNRG_Init>:
{
 8001834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hci_init(APP_UserEvtRx, NULL);
 8001838:	2100      	movs	r1, #0
{
 800183a:	b0b7      	sub	sp, #220	; 0xdc
	hci_init(APP_UserEvtRx, NULL);
 800183c:	48d2      	ldr	r0, [pc, #840]	; (8001b88 <BlueNRG_Init+0x354>)
 800183e:	f007 f859 	bl	80088f4 <hci_init>
	hci_reset();
 8001842:	f006 fd81 	bl	8008348 <hci_reset>
	HAL_Delay(2000);
 8001846:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800184a:	f001 fc4f 	bl	80030ec <HAL_Delay>
	ret = aci_hal_set_tx_power_level(1, 4);
 800184e:	2104      	movs	r1, #4
 8001850:	2001      	movs	r0, #1
 8001852:	f007 f82d 	bl	80088b0 <aci_hal_set_tx_power_level>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8001856:	2800      	cmp	r0, #0
 8001858:	f040 81ec 	bne.w	8001c34 <BlueNRG_Init+0x400>
	uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800185c:	4bcb      	ldr	r3, [pc, #812]	; (8001b8c <BlueNRG_Init+0x358>)
 800185e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001862:	902e      	str	r0, [sp, #184]	; 0xb8
	ret = hci_le_rand(random_number);
 8001864:	a832      	add	r0, sp, #200	; 0xc8
	uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8001866:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
	ret = hci_le_rand(random_number);
 800186a:	f006 fdc1 	bl	80083f0 <hci_le_rand>
		discovery_time += (2*random_number[i]);
 800186e:	f89d 10c8 	ldrb.w	r1, [sp, #200]	; 0xc8
 8001872:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8001876:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 800187a:	f89d 00cb 	ldrb.w	r0, [sp, #203]	; 0xcb
	bdaddr[0] = (uint8_t) (random_number[0]);
 800187e:	f88d 10b8 	strb.w	r1, [sp, #184]	; 0xb8
		discovery_time += (2*random_number[i]);
 8001882:	440a      	add	r2, r1
 8001884:	4413      	add	r3, r2
 8001886:	f89d 10cc 	ldrb.w	r1, [sp, #204]	; 0xcc
 800188a:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
	bdaddr[1] = (uint8_t) (random_number[3]);
 800188e:	f88d 00b9 	strb.w	r0, [sp, #185]	; 0xb9
		discovery_time += (2*random_number[i]);
 8001892:	4403      	add	r3, r0
 8001894:	4419      	add	r1, r3
 8001896:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
 800189a:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
	bdaddr[2] = (uint8_t) (random_number[6]);
 800189e:	f88d 00ba 	strb.w	r0, [sp, #186]	; 0xba
		discovery_time += (2*random_number[i]);
 80018a2:	440a      	add	r2, r1
 80018a4:	4402      	add	r2, r0
 80018a6:	4413      	add	r3, r2
 80018a8:	48b9      	ldr	r0, [pc, #740]	; (8001b90 <BlueNRG_Init+0x35c>)
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 80018b0:	ac2e      	add	r4, sp, #184	; 0xb8
 80018b2:	8003      	strh	r3, [r0, #0]
 80018b4:	4622      	mov	r2, r4
 80018b6:	2106      	movs	r1, #6
 80018b8:	2000      	movs	r0, #0
 80018ba:	f006 ffcf 	bl	800885c <aci_hal_write_config_data>
	ret = aci_gatt_init();
 80018be:	f006 fe47 	bl	8008550 <aci_gatt_init>
	assert_param(ret == BLE_STATUS_SUCCESS);
 80018c2:	2800      	cmp	r0, #0
 80018c4:	f040 81bb 	bne.w	8001c3e <BlueNRG_Init+0x40a>
	aci_gap_init(GAP_PERIPHERAL_ROLE, GAP_PRIVACY_DISABLED, 0x17, &hGAPService, &hDevNameChar, &hAppearanceChar);
 80018c8:	4ab2      	ldr	r2, [pc, #712]	; (8001b94 <BlueNRG_Init+0x360>)
 80018ca:	4bb3      	ldr	r3, [pc, #716]	; (8001b98 <BlueNRG_Init+0x364>)
	const uint8_t char1_uuid[16] =
 80018cc:	4db3      	ldr	r5, [pc, #716]	; (8001b9c <BlueNRG_Init+0x368>)
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 80018ce:	4fb4      	ldr	r7, [pc, #720]	; (8001ba0 <BlueNRG_Init+0x36c>)
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 80018d0:	f8df b300 	ldr.w	fp, [pc, #768]	; 8001bd4 <BlueNRG_Init+0x3a0>
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 80018d4:	f8df a300 	ldr.w	sl, [pc, #768]	; 8001bd8 <BlueNRG_Init+0x3a4>
	BLUENRG_memcpy(&char_obj_4.Char_UUID_128, char4_uuid, 16);
 80018d8:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8001bdc <BlueNRG_Init+0x3a8>
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 80018dc:	f8df 8300 	ldr.w	r8, [pc, #768]	; 8001be0 <BlueNRG_Init+0x3ac>
	aci_gap_init(GAP_PERIPHERAL_ROLE, GAP_PRIVACY_DISABLED, 0x17, &hGAPService, &hDevNameChar, &hAppearanceChar);
 80018e0:	e9cd 3200 	strd	r3, r2, [sp]
 80018e4:	2100      	movs	r1, #0
 80018e6:	4baf      	ldr	r3, [pc, #700]	; (8001ba4 <BlueNRG_Init+0x370>)
 80018e8:	2217      	movs	r2, #23
 80018ea:	2001      	movs	r0, #1
 80018ec:	f006 fdfa 	bl	80084e4 <aci_gap_init>
	const uint8_t service_uuid[16] =
 80018f0:	4bad      	ldr	r3, [pc, #692]	; (8001ba8 <BlueNRG_Init+0x374>)
 80018f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f4:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80018f8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	const uint8_t char1_uuid[16] =
 80018fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
	const uint8_t char2_uuid[16] =
 8001900:	f105 0e10 	add.w	lr, r5, #16
	const uint8_t char1_uuid[16] =
 8001904:	ae1e      	add	r6, sp, #120	; 0x78
 8001906:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char2_uuid[16] =
 800190a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800190e:	ae22      	add	r6, sp, #136	; 0x88
	const uint8_t char3_uuid[16] =
 8001910:	f105 0e20 	add.w	lr, r5, #32
	const uint8_t char2_uuid[16] =
 8001914:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char3_uuid[16] =
 8001918:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800191c:	ae26      	add	r6, sp, #152	; 0x98
	const uint8_t char4_uuid[16] =
 800191e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
	const uint8_t char3_uuid[16] =
 8001922:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char4_uuid[16] =
 8001926:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
	const uint8_t char5_uuid[16] =
 800192a:	f105 0e40 	add.w	lr, r5, #64	; 0x40
	const uint8_t char4_uuid[16] =
 800192e:	ad2a      	add	r5, sp, #168	; 0xa8
 8001930:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	const uint8_t char5_uuid[16] =
 8001934:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(&suuid_object.Service_UUID_128, service_uuid, 16);
 800193c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001940:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8001be4 <BlueNRG_Init+0x3b0>
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8001944:	9700      	str	r7, [sp, #0]
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8001946:	ae1e      	add	r6, sp, #120	; 0x78
	BLUENRG_memcpy(&suuid_object.Service_UUID_128, service_uuid, 16);
 8001948:	f8cc 0000 	str.w	r0, [ip]
 800194c:	f8cc 1004 	str.w	r1, [ip, #4]
 8001950:	f8cc 2008 	str.w	r2, [ip, #8]
 8001954:	f8cc 300c 	str.w	r3, [ip, #12]
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8001958:	4661      	mov	r1, ip
 800195a:	2314      	movs	r3, #20
 800195c:	2201      	movs	r2, #1
 800195e:	2002      	movs	r0, #2
 8001960:	f006 fe12 	bl	8008588 <aci_gatt_add_service>
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8001964:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001966:	f8df c280 	ldr.w	ip, [pc, #640]	; 8001be8 <BlueNRG_Init+0x3b4>
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 800196a:	ae22      	add	r6, sp, #136	; 0x88
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 800196c:	f8cc 0000 	str.w	r0, [ip]
 8001970:	f8cc 1004 	str.w	r1, [ip, #4]
 8001974:	f8cc 2008 	str.w	r2, [ip, #8]
 8001978:	f8cc 300c 	str.w	r3, [ip, #12]
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 800197c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 800197e:	ae26      	add	r6, sp, #152	; 0x98
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8001980:	f8cb 0000 	str.w	r0, [fp]
 8001984:	f8cb 1004 	str.w	r1, [fp, #4]
 8001988:	f8cb 2008 	str.w	r2, [fp, #8]
 800198c:	f8cb 300c 	str.w	r3, [fp, #12]
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8001990:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001992:	f8ca 0000 	str.w	r0, [sl]
 8001996:	f8ca 1004 	str.w	r1, [sl, #4]
 800199a:	f8ca 2008 	str.w	r2, [sl, #8]
 800199e:	f8ca 300c 	str.w	r3, [sl, #12]
	BLUENRG_memcpy(&char_obj_4.Char_UUID_128, char4_uuid, 16);
 80019a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a4:	f8c9 0000 	str.w	r0, [r9]
 80019a8:	f8c9 1004 	str.w	r1, [r9, #4]
 80019ac:	f8c9 2008 	str.w	r2, [r9, #8]
 80019b0:	f8c9 300c 	str.w	r3, [r9, #12]
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 80019b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b6:	f8c8 300c 	str.w	r3, [r8, #12]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 80019ba:	4b7c      	ldr	r3, [pc, #496]	; (8001bac <BlueNRG_Init+0x378>)
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 80019bc:	f8c8 0000 	str.w	r0, [r8]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 80019c0:	2400      	movs	r4, #0
 80019c2:	2607      	movs	r6, #7
 80019c4:	2510      	movs	r5, #16
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 80019c6:	f8c8 1004 	str.w	r1, [r8, #4]
 80019ca:	f8c8 2008 	str.w	r2, [r8, #8]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 80019ce:	2102      	movs	r1, #2
 80019d0:	4662      	mov	r2, ip
 80019d2:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80019d6:	9500      	str	r5, [sp, #0]
 80019d8:	2304      	movs	r3, #4
 80019da:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80019de:	8838      	ldrh	r0, [r7, #0]
 80019e0:	9603      	str	r6, [sp, #12]
 80019e2:	f006 fe1f 	bl	8008624 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_2, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 80019e6:	9500      	str	r5, [sp, #0]
 80019e8:	4d71      	ldr	r5, [pc, #452]	; (8001bb0 <BlueNRG_Init+0x37c>)
 80019ea:	9505      	str	r5, [sp, #20]
 80019ec:	465a      	mov	r2, fp
 80019ee:	2102      	movs	r1, #2
 80019f0:	2304      	movs	r3, #4
 80019f2:	e9cd 6403 	strd	r6, r4, [sp, #12]
 80019f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80019fa:	8838      	ldrh	r0, [r7, #0]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_3, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_READ,
 80019fc:	468b      	mov	fp, r1
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_2, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 80019fe:	f006 fe11 	bl	8008624 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_3, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_READ,
 8001a02:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <BlueNRG_Init+0x380>)
 8001a04:	9305      	str	r3, [sp, #20]
 8001a06:	4652      	mov	r2, sl
 8001a08:	4659      	mov	r1, fp
 8001a0a:	f8cd b000 	str.w	fp, [sp]
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8001a14:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001a18:	8838      	ldrh	r0, [r7, #0]
 8001a1a:	f006 fe03 	bl	8008624 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_4, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP,
 8001a1e:	2501      	movs	r5, #1
 8001a20:	f04f 0c0c 	mov.w	ip, #12
 8001a24:	4b64      	ldr	r3, [pc, #400]	; (8001bb8 <BlueNRG_Init+0x384>)
 8001a26:	f8cd c000 	str.w	ip, [sp]
 8001a2a:	464a      	mov	r2, r9
 8001a2c:	4659      	mov	r1, fp
 8001a2e:	9305      	str	r3, [sp, #20]
 8001a30:	8838      	ldrh	r0, [r7, #0]
 8001a32:	9404      	str	r4, [sp, #16]
 8001a34:	2304      	movs	r3, #4
 8001a36:	9603      	str	r6, [sp, #12]
 8001a38:	9401      	str	r4, [sp, #4]
 8001a3a:	9502      	str	r5, [sp, #8]
 8001a3c:	f006 fdf2 	bl	8008624 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_5, BLE_DATA_BYTES(6), CHAR_PROP_READ,
 8001a40:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <BlueNRG_Init+0x388>)
 8001a42:	f8cd b000 	str.w	fp, [sp]
 8001a46:	4642      	mov	r2, r8
 8001a48:	4659      	mov	r1, fp
 8001a4a:	9305      	str	r3, [sp, #20]
 8001a4c:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8001a50:	2306      	movs	r3, #6
 8001a52:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001a56:	8838      	ldrh	r0, [r7, #0]
	const char char2name[] = {'W','R','N','_','C','R','A','S','H'};
 8001a58:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8001bec <BlueNRG_Init+0x3b8>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_5, BLE_DATA_BYTES(6), CHAR_PROP_READ,
 8001a5c:	f006 fde2 	bl	8008624 <aci_gatt_add_char>
	const char char1name[] = {'W','R','N','_','S','P','E','E','D'};
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <BlueNRG_Init+0x38c>)
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8001a62:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8001bf0 <BlueNRG_Init+0x3bc>
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8001a66:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8001bf4 <BlueNRG_Init+0x3c0>
	const char char1name[] = {'W','R','N','_','S','P','E','E','D'};
 8001a6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a6e:	ab0b      	add	r3, sp, #44	; 0x2c
 8001a70:	c303      	stmia	r3!, {r0, r1}
 8001a72:	701a      	strb	r2, [r3, #0]
	const char char2name[] = {'W','R','N','_','C','R','A','S','H'};
 8001a74:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8001a78:	ab0e      	add	r3, sp, #56	; 0x38
 8001a7a:	c303      	stmia	r3!, {r0, r1}
 8001a7c:	701a      	strb	r2, [r3, #0]
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8001a7e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001a82:	ab11      	add	r3, sp, #68	; 0x44
 8001a84:	c303      	stmia	r3!, {r0, r1}
 8001a86:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8001a8a:	f823 2b02 	strh.w	r2, [r3], #2
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8001a8e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8001a92:	f8df c164 	ldr.w	ip, [pc, #356]	; 8001bf8 <BlueNRG_Init+0x3c4>
	aci_gatt_add_char_desc(hService, hClientNotify_OverSpeed, UUID_TYPE_16, &DescriptorProperty,
 8001a96:	f8df e164 	ldr.w	lr, [pc, #356]	; 8001bfc <BlueNRG_Init+0x3c8>
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8001a9a:	f883 8000 	strb.w	r8, [r3]
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8001a9e:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8001aa2:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8001aa6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001aaa:	f10d 095c 	add.w	r9, sp, #92	; 0x5c
	DescriptorProperty.Char_UUID_16 = CHAR_USER_DESC_UUID;
 8001aae:	f642 1c01 	movw	ip, #10497	; 0x2901
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8001ab2:	e889 0007 	stmia.w	r9, {r0, r1, r2}
	DescriptorProperty.Char_UUID_16 = CHAR_USER_DESC_UUID;
 8001ab6:	f8ad c0c8 	strh.w	ip, [sp, #200]	; 0xc8
	aci_gatt_add_char_desc(hService, hClientNotify_OverSpeed, UUID_TYPE_16, &DescriptorProperty,
 8001aba:	e9cd 4e07 	strd	r4, lr, [sp, #28]
 8001abe:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8001ac2:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8001ac6:	4939      	ldr	r1, [pc, #228]	; (8001bac <BlueNRG_Init+0x378>)
 8001ac8:	8838      	ldrh	r0, [r7, #0]
 8001aca:	8809      	ldrh	r1, [r1, #0]
 8001acc:	f04f 081e 	mov.w	r8, #30
 8001ad0:	f04f 0b09 	mov.w	fp, #9
 8001ad4:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8001ad8:	ab0b      	add	r3, sp, #44	; 0x2c
 8001ada:	e9cd b301 	strd	fp, r3, [sp, #4]
 8001ade:	462a      	mov	r2, r5
 8001ae0:	4663      	mov	r3, ip
 8001ae2:	f8cd 8000 	str.w	r8, [sp]
 8001ae6:	f006 fe03 	bl	80086f0 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientNotify_Crash, UUID_TYPE_16, &DescriptorProperty,
 8001aea:	e9cd 8b00 	strd	r8, fp, [sp]
 8001aee:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8001af2:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8001af6:	492e      	ldr	r1, [pc, #184]	; (8001bb0 <BlueNRG_Init+0x37c>)
 8001af8:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <BlueNRG_Init+0x390>)
 8001afa:	9407      	str	r4, [sp, #28]
 8001afc:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8001b00:	ab0e      	add	r3, sp, #56	; 0x38
 8001b02:	8809      	ldrh	r1, [r1, #0]
 8001b04:	8838      	ldrh	r0, [r7, #0]
 8001b06:	9208      	str	r2, [sp, #32]
 8001b08:	9302      	str	r3, [sp, #8]
 8001b0a:	462a      	mov	r2, r5
 8001b0c:	4663      	mov	r3, ip
 8001b0e:	f006 fdef 	bl	80086f0 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientRead_Velocity, UUID_TYPE_16, &DescriptorProperty,
 8001b12:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8001b16:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8001b1a:	4926      	ldr	r1, [pc, #152]	; (8001bb4 <BlueNRG_Init+0x380>)
 8001b1c:	4a2a      	ldr	r2, [pc, #168]	; (8001bc8 <BlueNRG_Init+0x394>)
 8001b1e:	9407      	str	r4, [sp, #28]
 8001b20:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8001b24:	f04f 0b0b 	mov.w	fp, #11
 8001b28:	ab11      	add	r3, sp, #68	; 0x44
 8001b2a:	f8cd 8000 	str.w	r8, [sp]
 8001b2e:	8809      	ldrh	r1, [r1, #0]
 8001b30:	8838      	ldrh	r0, [r7, #0]
 8001b32:	9208      	str	r2, [sp, #32]
 8001b34:	e9cd b301 	strd	fp, r3, [sp, #4]
 8001b38:	462a      	mov	r2, r5
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	f006 fdd8 	bl	80086f0 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientWrite_Direction, UUID_TYPE_16, &DescriptorProperty,
 8001b40:	e9cd 6406 	strd	r6, r4, [sp, #24]
 8001b44:	491c      	ldr	r1, [pc, #112]	; (8001bb8 <BlueNRG_Init+0x384>)
 8001b46:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <BlueNRG_Init+0x398>)
 8001b48:	f8cd a008 	str.w	sl, [sp, #8]
 8001b4c:	f04f 0c03 	mov.w	ip, #3
 8001b50:	230a      	movs	r3, #10
 8001b52:	9405      	str	r4, [sp, #20]
 8001b54:	9403      	str	r4, [sp, #12]
 8001b56:	f8cd 8000 	str.w	r8, [sp]
 8001b5a:	8809      	ldrh	r1, [r1, #0]
 8001b5c:	8838      	ldrh	r0, [r7, #0]
 8001b5e:	9208      	str	r2, [sp, #32]
 8001b60:	f8cd c010 	str.w	ip, [sp, #16]
 8001b64:	462a      	mov	r2, r5
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	ab32      	add	r3, sp, #200	; 0xc8
 8001b6a:	f006 fdc1 	bl	80086f0 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientRead_VerifyDirection, UUID_TYPE_16, &DescriptorProperty,
 8001b6e:	e9cd 6406 	strd	r6, r4, [sp, #24]
 8001b72:	e9cd 5404 	strd	r5, r4, [sp, #16]
 8001b76:	e9cd 9402 	strd	r9, r4, [sp, #8]
 8001b7a:	e9cd 8b00 	strd	r8, fp, [sp]
 8001b7e:	490f      	ldr	r1, [pc, #60]	; (8001bbc <BlueNRG_Init+0x388>)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <BlueNRG_Init+0x39c>)
 8001b82:	8809      	ldrh	r1, [r1, #0]
 8001b84:	e03c      	b.n	8001c00 <BlueNRG_Init+0x3cc>
 8001b86:	bf00      	nop
 8001b88:	080016ed 	.word	0x080016ed
 8001b8c:	0800c374 	.word	0x0800c374
 8001b90:	200001c2 	.word	0x200001c2
 8001b94:	200001c4 	.word	0x200001c4
 8001b98:	200001d0 	.word	0x200001d0
 8001b9c:	0800c37c 	.word	0x0800c37c
 8001ba0:	200001dc 	.word	0x200001dc
 8001ba4:	200001d8 	.word	0x200001d8
 8001ba8:	0800c444 	.word	0x0800c444
 8001bac:	200001c8 	.word	0x200001c8
 8001bb0:	200001c6 	.word	0x200001c6
 8001bb4:	200001ca 	.word	0x200001ca
 8001bb8:	200001ce 	.word	0x200001ce
 8001bbc:	200001cc 	.word	0x200001cc
 8001bc0:	0800c458 	.word	0x0800c458
 8001bc4:	200001da 	.word	0x200001da
 8001bc8:	200001de 	.word	0x200001de
 8001bcc:	200001d6 	.word	0x200001d6
 8001bd0:	200001d2 	.word	0x200001d2
 8001bd4:	20009a0c 	.word	0x20009a0c
 8001bd8:	200099dc 	.word	0x200099dc
 8001bdc:	200099a8 	.word	0x200099a8
 8001be0:	200099fc 	.word	0x200099fc
 8001be4:	200099ec 	.word	0x200099ec
 8001be8:	200099cc 	.word	0x200099cc
 8001bec:	0800c464 	.word	0x0800c464
 8001bf0:	0800c470 	.word	0x0800c470
 8001bf4:	0800c47c 	.word	0x0800c47c
 8001bf8:	0800c48c 	.word	0x0800c48c
 8001bfc:	200001d4 	.word	0x200001d4
 8001c00:	8838      	ldrh	r0, [r7, #0]
 8001c02:	9308      	str	r3, [sp, #32]
 8001c04:	462a      	mov	r2, r5
 8001c06:	ab32      	add	r3, sp, #200	; 0xc8
 8001c08:	f006 fd72 	bl	80086f0 <aci_gatt_add_char_desc>
	if(FunctionAlreadyCalled == SET)
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <BlueNRG_Init+0x440>)
	Conn_Details.deviceRole = 0xFF;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <BlueNRG_Init+0x444>)
	if(FunctionAlreadyCalled == SET)
 8001c10:	7812      	ldrb	r2, [r2, #0]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 8001c12:	741c      	strb	r4, [r3, #16]
	Conn_Details.connectionhandle = 0xFFFF;
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
	Conn_Details.deviceRole = 0xFF;
 8001c18:	20ff      	movs	r0, #255	; 0xff
	if(FunctionAlreadyCalled == SET)
 8001c1a:	42aa      	cmp	r2, r5
	BLUENRG_memset(&Conn_Details.BLE_Client_Addr[0], 0, 6);
 8001c1c:	601c      	str	r4, [r3, #0]
 8001c1e:	809c      	strh	r4, [r3, #4]
	Conn_Details.deviceRole = 0xFF;
 8001c20:	7198      	strb	r0, [r3, #6]
	Conn_Details.connectionhandle = 0xFFFF;
 8001c22:	6099      	str	r1, [r3, #8]
 8001c24:	60d9      	str	r1, [r3, #12]
	if(FunctionAlreadyCalled == SET)
 8001c26:	d00f      	beq.n	8001c48 <BlueNRG_Init+0x414>
	FunctionAlreadyCalled = SET;
 8001c28:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <BlueNRG_Init+0x440>)
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	7013      	strb	r3, [r2, #0]
}
 8001c2e:	b037      	add	sp, #220	; 0xdc
 8001c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	assert_param(ret == BLE_STATUS_SUCCESS);
 8001c34:	4811      	ldr	r0, [pc, #68]	; (8001c7c <BlueNRG_Init+0x448>)
 8001c36:	216f      	movs	r1, #111	; 0x6f
 8001c38:	f000 fe60 	bl	80028fc <assert_failed>
 8001c3c:	e60e      	b.n	800185c <BlueNRG_Init+0x28>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8001c3e:	480f      	ldr	r0, [pc, #60]	; (8001c7c <BlueNRG_Init+0x448>)
 8001c40:	2176      	movs	r1, #118	; 0x76
 8001c42:	f000 fe5b 	bl	80028fc <assert_failed>
 8001c46:	e63f      	b.n	80018c8 <BlueNRG_Init+0x94>
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001c48:	490d      	ldr	r1, [pc, #52]	; (8001c80 <BlueNRG_Init+0x44c>)
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001c4a:	9432      	str	r4, [sp, #200]	; 0xc8
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001c4c:	ab32      	add	r3, sp, #200	; 0xc8
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	6808      	ldr	r0, [r1, #0]
 8001c52:	4623      	mov	r3, r4
 8001c54:	4611      	mov	r1, r2
 8001c56:	f008 fd5d 	bl	800a714 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001c5a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0e3      	beq.n	8001c28 <BlueNRG_Init+0x3f4>
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <BlueNRG_Init+0x450>)
 8001c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	f3bf 8f6f 	isb	sy
 8001c70:	e7da      	b.n	8001c28 <BlueNRG_Init+0x3f4>
 8001c72:	bf00      	nop
 8001c74:	200001bf 	.word	0x200001bf
 8001c78:	200099b8 	.word	0x200099b8
 8001c7c:	0800c428 	.word	0x0800c428
 8001c80:	20009a3c 	.word	0x20009a3c
 8001c84:	e000ed04 	.word	0xe000ed04

08001c88 <BlueNRG_MakeDeviceDiscoverable>:
{
 8001c88:	b570      	push	{r4, r5, r6, lr}
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <BlueNRG_MakeDeviceDiscoverable+0x6c>)
	uint8_t uuidscanresponse[18] =
 8001c8c:	4d1a      	ldr	r5, [pc, #104]	; (8001cf8 <BlueNRG_MakeDeviceDiscoverable+0x70>)
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 8001c8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
{
 8001c92:	b090      	sub	sp, #64	; 0x40
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 8001c94:	ae08      	add	r6, sp, #32
 8001c96:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	hci_le_set_scan_response_data(0, NULL);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4608      	mov	r0, r1
 8001c9e:	f006 fb6d 	bl	800837c <hci_le_set_scan_response_data>
	uint8_t uuidscanresponse[18] =
 8001ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca4:	ac0b      	add	r4, sp, #44	; 0x2c
 8001ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	8023      	strh	r3, [r4, #0]
	hci_le_set_scan_response_data(18, uuidscanresponse);
 8001cac:	a90b      	add	r1, sp, #44	; 0x2c
 8001cae:	2012      	movs	r0, #18
 8001cb0:	f006 fb64 	bl	800837c <hci_le_set_scan_response_data>
	ret = aci_gap_set_discoverable(ADV_IND, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	9201      	str	r2, [sp, #4]
 8001cba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001cbe:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001cc2:	9602      	str	r6, [sp, #8]
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ccc:	21a0      	movs	r1, #160	; 0xa0
 8001cce:	f006 fbb5 	bl	800843c <aci_gap_set_discoverable>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8001cd2:	b920      	cbnz	r0, 8001cde <BlueNRG_MakeDeviceDiscoverable+0x56>
	Conn_Details.ConnectionStatus = STATE_AWAITING_CONNECTION;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <BlueNRG_MakeDeviceDiscoverable+0x74>)
 8001cd6:	2211      	movs	r2, #17
 8001cd8:	741a      	strb	r2, [r3, #16]
}
 8001cda:	b010      	add	sp, #64	; 0x40
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(ret == BLE_STATUS_SUCCESS);
 8001cde:	4808      	ldr	r0, [pc, #32]	; (8001d00 <BlueNRG_MakeDeviceDiscoverable+0x78>)
 8001ce0:	f240 11dd 	movw	r1, #477	; 0x1dd
 8001ce4:	f000 fe0a 	bl	80028fc <assert_failed>
	Conn_Details.ConnectionStatus = STATE_AWAITING_CONNECTION;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <BlueNRG_MakeDeviceDiscoverable+0x74>)
 8001cea:	2211      	movs	r2, #17
 8001cec:	741a      	strb	r2, [r3, #16]
}
 8001cee:	b010      	add	sp, #64	; 0x40
 8001cf0:	bd70      	pop	{r4, r5, r6, pc}
 8001cf2:	bf00      	nop
 8001cf4:	0800c49c 	.word	0x0800c49c
 8001cf8:	0800c4ac 	.word	0x0800c4ac
 8001cfc:	200099b8 	.word	0x200099b8
 8001d00:	0800c428 	.word	0x0800c428

08001d04 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 8001d04:	b570      	push	{r4, r5, r6, lr}
 8001d06:	b084      	sub	sp, #16
	static FlagStatus FunctionAlreadyCalled = RESET;

	/* This callback function/event only saves connection handle */
	Conn_Details.connectionhandle = Connection_Handle;
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <hci_le_connection_complete_event+0x6c>)
{
 8001d0a:	9808      	ldr	r0, [sp, #32]
	Conn_Details.connectionhandle = Connection_Handle;
 8001d0c:	8119      	strh	r1, [r3, #8]

	/* Role should be slave: 0x01 (if 0x00, it is master and incorrect in this example project) */
	Conn_Details.deviceRole = Role;
 8001d0e:	719a      	strb	r2, [r3, #6]
	Conn_Details.BLE_SupervisionTimeout = Supervision_Timeout;

	/* Update connection status to connected */
	Conn_Details.ConnectionStatus = STATE_CONNECTED;

	if(FunctionAlreadyCalled == SET)
 8001d10:	4c18      	ldr	r4, [pc, #96]	; (8001d74 <hci_le_connection_complete_event+0x70>)
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 8001d12:	6802      	ldr	r2, [r0, #0]
 8001d14:	601a      	str	r2, [r3, #0]
	if(FunctionAlreadyCalled == SET)
 8001d16:	7822      	ldrb	r2, [r4, #0]
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 8001d18:	8881      	ldrh	r1, [r0, #4]
{
 8001d1a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8001d1e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8001d22:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 8001d26:	8099      	strh	r1, [r3, #4]
	if(FunctionAlreadyCalled == SET)
 8001d28:	2a01      	cmp	r2, #1
	Conn_Details.ConnectionStatus = STATE_CONNECTED;
 8001d2a:	f04f 0199 	mov.w	r1, #153	; 0x99
	Conn_Details.BLE_ConnInterval = Conn_Interval;
 8001d2e:	815e      	strh	r6, [r3, #10]
	Conn_Details.BLE_ConnLatency = Conn_Latency;
 8001d30:	819d      	strh	r5, [r3, #12]
	Conn_Details.BLE_SupervisionTimeout = Supervision_Timeout;
 8001d32:	81d8      	strh	r0, [r3, #14]
	Conn_Details.ConnectionStatus = STATE_CONNECTED;
 8001d34:	7419      	strb	r1, [r3, #16]
	if(FunctionAlreadyCalled == SET)
 8001d36:	d003      	beq.n	8001d40 <hci_le_connection_complete_event+0x3c>
		   is pdFALSE */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

	/* Indication that function is called already, and can send notifications to FreeRTOS tasks next time it is executed */
	FunctionAlreadyCalled = SET;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	7023      	strb	r3, [r4, #0]
} /* end hci_le_connection_complete_event() */
 8001d3c:	b004      	add	sp, #16
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001d40:	480d      	ldr	r0, [pc, #52]	; (8001d78 <hci_le_connection_complete_event+0x74>)
 8001d42:	a903      	add	r1, sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001d44:	2300      	movs	r3, #0
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001d46:	6800      	ldr	r0, [r0, #0]
 8001d48:	9100      	str	r1, [sp, #0]
 8001d4a:	2102      	movs	r1, #2
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001d4c:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001d4e:	f008 fce1 	bl	800a714 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001d52:	9b03      	ldr	r3, [sp, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ef      	beq.n	8001d38 <hci_le_connection_complete_event+0x34>
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <hci_le_connection_complete_event+0x78>)
 8001d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	f3bf 8f6f 	isb	sy
	FunctionAlreadyCalled = SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	7023      	strb	r3, [r4, #0]
} /* end hci_le_connection_complete_event() */
 8001d6c:	b004      	add	sp, #16
 8001d6e:	bd70      	pop	{r4, r5, r6, pc}
 8001d70:	200099b8 	.word	0x200099b8
 8001d74:	200001c0 	.word	0x200001c0
 8001d78:	20009a3c 	.word	0x20009a3c
 8001d7c:	e000ed04 	.word	0xe000ed04

08001d80 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8001d80:	b530      	push	{r4, r5, lr}
	if(FunctionAlreadyCalled == SET)
 8001d82:	4c15      	ldr	r4, [pc, #84]	; (8001dd8 <hci_disconnection_complete_event+0x58>)
	Conn_Details.deviceRole = 0xFF;
 8001d84:	4915      	ldr	r1, [pc, #84]	; (8001ddc <hci_disconnection_complete_event+0x5c>)
	if(FunctionAlreadyCalled == SET)
 8001d86:	7822      	ldrb	r2, [r4, #0]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 8001d88:	2300      	movs	r3, #0
	Conn_Details.connectionhandle = 0xFFFF;
 8001d8a:	f04f 30ff 	mov.w	r0, #4294967295
	Conn_Details.deviceRole = 0xFF;
 8001d8e:	25ff      	movs	r5, #255	; 0xff
	if(FunctionAlreadyCalled == SET)
 8001d90:	2a01      	cmp	r2, #1
{
 8001d92:	b085      	sub	sp, #20
	Conn_Details.deviceRole = 0xFF;
 8001d94:	718d      	strb	r5, [r1, #6]
	Conn_Details.connectionhandle = 0xFFFF;
 8001d96:	6088      	str	r0, [r1, #8]
 8001d98:	60c8      	str	r0, [r1, #12]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 8001d9a:	740b      	strb	r3, [r1, #16]
	BLUENRG_memset(&Conn_Details.BLE_Client_Addr[0], 0, 6);
 8001d9c:	600b      	str	r3, [r1, #0]
 8001d9e:	808b      	strh	r3, [r1, #4]
	if(FunctionAlreadyCalled == SET)
 8001da0:	d003      	beq.n	8001daa <hci_disconnection_complete_event+0x2a>
	FunctionAlreadyCalled = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	7023      	strb	r3, [r4, #0]
	/* Resets all connectivity status details */
	Server_ResetConnectionStatus();

} /* end hci_disconnection_complete_event() */
 8001da6:	b005      	add	sp, #20
 8001da8:	bd30      	pop	{r4, r5, pc}
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <hci_disconnection_complete_event+0x60>)
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001dac:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001dae:	a903      	add	r1, sp, #12
 8001db0:	6800      	ldr	r0, [r0, #0]
 8001db2:	9100      	str	r1, [sp, #0]
 8001db4:	4611      	mov	r1, r2
 8001db6:	f008 fcad 	bl	800a714 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001dba:	9b03      	ldr	r3, [sp, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <hci_disconnection_complete_event+0x22>
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <hci_disconnection_complete_event+0x64>)
 8001dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	f3bf 8f4f 	dsb	sy
 8001dcc:	f3bf 8f6f 	isb	sy
	FunctionAlreadyCalled = SET;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	7023      	strb	r3, [r4, #0]
} /* end hci_disconnection_complete_event() */
 8001dd4:	b005      	add	sp, #20
 8001dd6:	bd30      	pop	{r4, r5, pc}
 8001dd8:	200001bf 	.word	0x200001bf
 8001ddc:	200099b8 	.word	0x200099b8
 8001de0:	20009a3c 	.word	0x20009a3c
 8001de4:	e000ed04 	.word	0xe000ed04

08001de8 <aci_gatt_notification_event>:
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{


} /* end aci_gatt_notification_event() */
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop

08001dec <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 8001dec:	b500      	push	{lr}

	/* Determine which characteristic was modified by Client (Indicate and Notify characteristics
	   are modified by Client only if Client acknowledges these features on Server) */
	if(Attr_Handle == hClientWrite_Direction+1)
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <aci_gatt_attribute_modified_event+0x110>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
{
 8001df2:	b083      	sub	sp, #12
	if(Attr_Handle == hClientWrite_Direction+1)
 8001df4:	3301      	adds	r3, #1
 8001df6:	4299      	cmp	r1, r3
{
 8001df8:	9a04      	ldr	r2, [sp, #16]
	if(Attr_Handle == hClientWrite_Direction+1)
 8001dfa:	d002      	beq.n	8001e02 <aci_gatt_attribute_modified_event+0x16>
			}
		}

	}

} /* end aci_gatt_attribute_modified_event() */
 8001dfc:	b003      	add	sp, #12
 8001dfe:	f85d fb04 	ldr.w	pc, [sp], #4
		switch(Attr_Data[0])
 8001e02:	7813      	ldrb	r3, [r2, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxIncorrectMsgCharBuffer);
 8001e04:	493e      	ldr	r1, [pc, #248]	; (8001f00 <aci_gatt_attribute_modified_event+0x114>)
 8001e06:	3b45      	subs	r3, #69	; 0x45
 8001e08:	2b33      	cmp	r3, #51	; 0x33
 8001e0a:	d81b      	bhi.n	8001e44 <aci_gatt_attribute_modified_event+0x58>
 8001e0c:	e8df f003 	tbb	[pc, r3]
 8001e10:	1a1a1a67 	.word	0x1a1a1a67
 8001e14:	1a1a1a1a 	.word	0x1a1a1a1a
 8001e18:	1a1a581a 	.word	0x1a1a581a
 8001e1c:	1a491a1a 	.word	0x1a491a1a
 8001e20:	263a1a1a 	.word	0x263a1a1a
 8001e24:	1a1a1a1a 	.word	0x1a1a1a1a
 8001e28:	1a1a1a1a 	.word	0x1a1a1a1a
 8001e2c:	1a1a1a1a 	.word	0x1a1a1a1a
 8001e30:	1a1a1a67 	.word	0x1a1a1a67
 8001e34:	1a1a1a1a 	.word	0x1a1a1a1a
 8001e38:	1a1a581a 	.word	0x1a1a581a
 8001e3c:	1a491a1a 	.word	0x1a491a1a
 8001e40:	263a1a1a 	.word	0x263a1a1a
 8001e44:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <aci_gatt_attribute_modified_event+0x118>)
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <aci_gatt_attribute_modified_event+0x11c>)
 8001e48:	8810      	ldrh	r0, [r2, #0]
 8001e4a:	8809      	ldrh	r1, [r1, #0]
 8001e4c:	9304      	str	r3, [sp, #16]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2306      	movs	r3, #6
} /* end aci_gatt_attribute_modified_event() */
 8001e52:	b003      	add	sp, #12
 8001e54:	f85d eb04 	ldr.w	lr, [sp], #4
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxIncorrectMsgCharBuffer);
 8001e58:	f006 bcd0 	b.w	80087fc <aci_gatt_update_char_value>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxForceStopMovingCharBuffer);
 8001e5c:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <aci_gatt_attribute_modified_event+0x118>)
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <aci_gatt_attribute_modified_event+0x120>)
 8001e60:	8809      	ldrh	r1, [r1, #0]
 8001e62:	8810      	ldrh	r0, [r2, #0]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	2306      	movs	r3, #6
 8001e6a:	f006 fcc7 	bl	80087fc <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_FORCESTOP, eSetBits);
 8001e6e:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <aci_gatt_attribute_modified_event+0x124>)
 8001e70:	2300      	movs	r3, #0
 8001e72:	6810      	ldr	r0, [r2, #0]
 8001e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e78:	2201      	movs	r2, #1
} /* end aci_gatt_attribute_modified_event() */
 8001e7a:	b003      	add	sp, #12
 8001e7c:	f85d eb04 	ldr.w	lr, [sp], #4
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_EAST, eSetBits);
 8001e80:	f008 bbd0 	b.w	800a624 <xTaskGenericNotify>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxWestDirCharBuffer);
 8001e84:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <aci_gatt_attribute_modified_event+0x118>)
 8001e86:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <aci_gatt_attribute_modified_event+0x128>)
 8001e88:	8809      	ldrh	r1, [r1, #0]
 8001e8a:	8810      	ldrh	r0, [r2, #0]
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2306      	movs	r3, #6
 8001e92:	f006 fcb3 	bl	80087fc <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_WEST, eSetBits);
 8001e96:	4a1e      	ldr	r2, [pc, #120]	; (8001f10 <aci_gatt_attribute_modified_event+0x124>)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	6810      	ldr	r0, [r2, #0]
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	e7eb      	b.n	8001e7a <aci_gatt_attribute_modified_event+0x8e>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxSouthDirCharBuffer);
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <aci_gatt_attribute_modified_event+0x118>)
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <aci_gatt_attribute_modified_event+0x12c>)
 8001ea6:	8809      	ldrh	r1, [r1, #0]
 8001ea8:	8810      	ldrh	r0, [r2, #0]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2200      	movs	r2, #0
 8001eae:	2306      	movs	r3, #6
 8001eb0:	f006 fca4 	bl	80087fc <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_SOUTH, eSetBits);
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <aci_gatt_attribute_modified_event+0x124>)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	6810      	ldr	r0, [r2, #0]
 8001eba:	2104      	movs	r1, #4
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	e7dc      	b.n	8001e7a <aci_gatt_attribute_modified_event+0x8e>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxNorthDirCharBuffer);
 8001ec0:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <aci_gatt_attribute_modified_event+0x118>)
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <aci_gatt_attribute_modified_event+0x130>)
 8001ec4:	8809      	ldrh	r1, [r1, #0]
 8001ec6:	8810      	ldrh	r0, [r2, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2306      	movs	r3, #6
 8001ece:	f006 fc95 	bl	80087fc <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_NORTH, eSetBits);
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <aci_gatt_attribute_modified_event+0x124>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	2300      	movs	r3, #0
 8001edc:	e7cd      	b.n	8001e7a <aci_gatt_attribute_modified_event+0x8e>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxEastDirCharBuffer);
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <aci_gatt_attribute_modified_event+0x118>)
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <aci_gatt_attribute_modified_event+0x134>)
 8001ee2:	8809      	ldrh	r1, [r1, #0]
 8001ee4:	8810      	ldrh	r0, [r2, #0]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2306      	movs	r3, #6
 8001eec:	f006 fc86 	bl	80087fc <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_EAST, eSetBits);
 8001ef0:	4a07      	ldr	r2, [pc, #28]	; (8001f10 <aci_gatt_attribute_modified_event+0x124>)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	6810      	ldr	r0, [r2, #0]
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	2201      	movs	r2, #1
 8001efa:	e7be      	b.n	8001e7a <aci_gatt_attribute_modified_event+0x8e>
 8001efc:	200001ce 	.word	0x200001ce
 8001f00:	200001cc 	.word	0x200001cc
 8001f04:	200001dc 	.word	0x200001dc
 8001f08:	20000010 	.word	0x20000010
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20009a20 	.word	0x20009a20
 8001f14:	20000028 	.word	0x20000028
 8001f18:	20000020 	.word	0x20000020
 8001f1c:	20000018 	.word	0x20000018
 8001f20:	20000000 	.word	0x20000000

08001f24 <vTimUpdateOledScreenCallback>:
 * @note
 */
static void vTimUpdateOledScreenCallback(TimerHandle_t xTimer)
{
	/* Fill value in <customqueue> Queue to notify <customtask> of pending actions */
}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop

08001f28 <vTimMotorTimeoutCallback>:
	Car_ConfigDirection(DIR_CAR_BRAKES);
 8001f28:	2004      	movs	r0, #4
 8001f2a:	f7fe bfa1 	b.w	8000e70 <Car_ConfigDirection>
 8001f2e:	bf00      	nop

08001f30 <Task_CarMovementCalculations>:
{
 8001f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f34:	ed2d 8b02 	vpush	{d8}
 8001f38:	b083      	sub	sp, #12
	ADXL343_Init();
 8001f3a:	f7fe fe07 	bl	8000b4c <ADXL343_Init>
	ADXL_ConfigureOffsets();
 8001f3e:	4c24      	ldr	r4, [pc, #144]	; (8001fd0 <Task_CarMovementCalculations+0xa0>)
 8001f40:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8001fe8 <Task_CarMovementCalculations+0xb8>
 8001f44:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8001fec <Task_CarMovementCalculations+0xbc>
 8001f48:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001ff4 <Task_CarMovementCalculations+0xc4>
 8001f4c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001ff8 <Task_CarMovementCalculations+0xc8>
 8001f50:	4f20      	ldr	r7, [pc, #128]	; (8001fd4 <Task_CarMovementCalculations+0xa4>)
 8001f52:	4e21      	ldr	r6, [pc, #132]	; (8001fd8 <Task_CarMovementCalculations+0xa8>)
 8001f54:	4d21      	ldr	r5, [pc, #132]	; (8001fdc <Task_CarMovementCalculations+0xac>)
		s_CarVelocityX = s_CarOldVelocityX + (s_CarAccelerationX * FREQUENCY_S_CALCULATION);
 8001f56:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8001fe0 <Task_CarMovementCalculations+0xb0>
	ADXL_ConfigureOffsets();
 8001f5a:	f7fe fd45 	bl	80009e8 <ADXL_ConfigureOffsets>
		g_Task5_RSS = uxTaskGetStackHighWaterMark(NULL);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f008 fa8e 	bl	800a480 <uxTaskGetStackHighWaterMark>
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <Task_CarMovementCalculations+0xb4>)
 8001f66:	6018      	str	r0, [r3, #0]
		LastActiveTime = xTaskGetTickCount();
 8001f68:	f008 f876 	bl	800a058 <xTaskGetTickCount>
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8001f6c:	2119      	movs	r1, #25
		LastActiveTime = xTaskGetTickCount();
 8001f6e:	4603      	mov	r3, r0
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8001f70:	a801      	add	r0, sp, #4
		LastActiveTime = xTaskGetTickCount();
 8001f72:	9301      	str	r3, [sp, #4]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8001f74:	f007 feea 	bl	8009d4c <vTaskDelayUntil>
		taskENTER_CRITICAL();
 8001f78:	f008 ff5c 	bl	800ae34 <vPortEnterCritical>
		ADXL_ReadAcceleration(&s_CarAccelerationX, &s_CarAccelerationY, &s_CarAccelerationZ);
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <Task_CarMovementCalculations+0xa0>)
 8001f7e:	491a      	ldr	r1, [pc, #104]	; (8001fe8 <Task_CarMovementCalculations+0xb8>)
 8001f80:	481a      	ldr	r0, [pc, #104]	; (8001fec <Task_CarMovementCalculations+0xbc>)
 8001f82:	f7fe fcdd 	bl	8000940 <ADXL_ReadAcceleration>
		taskEXIT_CRITICAL();
 8001f86:	f008 ff77 	bl	800ae78 <vPortExitCritical>
		s_CarVelocityX = s_CarOldVelocityX + (s_CarAccelerationX * FREQUENCY_S_CALCULATION);
 8001f8a:	edd9 7a00 	vldr	s15, [r9]
 8001f8e:	ed9b 6a00 	vldr	s12, [fp]
		s_CarVelocityY = s_CarOldVelocityY + (s_CarAccelerationY * FREQUENCY_S_CALCULATION);
 8001f92:	edda 6a00 	vldr	s13, [sl]
		s_CarVelocityZ = s_CarOldVelocityZ + (s_CarAccelerationZ * FREQUENCY_S_CALCULATION);
 8001f96:	ed94 7a00 	vldr	s14, [r4]
 8001f9a:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <Task_CarMovementCalculations+0xc0>)
		s_CarVelocityX = s_CarOldVelocityX + (s_CarAccelerationX * FREQUENCY_S_CALCULATION);
 8001f9c:	eee6 7a08 	vfma.f32	s15, s12, s16
 8001fa0:	edc8 7a00 	vstr	s15, [r8]
		s_CarVelocityY = s_CarOldVelocityY + (s_CarAccelerationY * FREQUENCY_S_CALCULATION);
 8001fa4:	edd7 7a00 	vldr	s15, [r7]
 8001fa8:	eee6 7a88 	vfma.f32	s15, s13, s16
 8001fac:	edc6 7a00 	vstr	s15, [r6]
		s_CarVelocityZ = s_CarOldVelocityZ + (s_CarAccelerationZ * FREQUENCY_S_CALCULATION);
 8001fb0:	edd5 7a00 	vldr	s15, [r5]
 8001fb4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8001fb8:	edc2 7a00 	vstr	s15, [r2]
		s_CarOldVelocityX = s_CarVelocityX;
 8001fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8001fc0:	f8c9 3000 	str.w	r3, [r9]
		s_CarOldVelocityY = s_CarVelocityY;
 8001fc4:	6833      	ldr	r3, [r6, #0]
 8001fc6:	603b      	str	r3, [r7, #0]
		s_CarOldVelocityZ = s_CarVelocityZ;
 8001fc8:	6813      	ldr	r3, [r2, #0]
 8001fca:	602b      	str	r3, [r5, #0]
	while(1)
 8001fcc:	e7c7      	b.n	8001f5e <Task_CarMovementCalculations+0x2e>
 8001fce:	bf00      	nop
 8001fd0:	200001fc 	.word	0x200001fc
 8001fd4:	20000204 	.word	0x20000204
 8001fd8:	20000210 	.word	0x20000210
 8001fdc:	20000208 	.word	0x20000208
 8001fe0:	3ccccccd 	.word	0x3ccccccd
 8001fe4:	20009a28 	.word	0x20009a28
 8001fe8:	200001f8 	.word	0x200001f8
 8001fec:	200001f4 	.word	0x200001f4
 8001ff0:	20000214 	.word	0x20000214
 8001ff4:	20000200 	.word	0x20000200
 8001ff8:	2000020c 	.word	0x2000020c

08001ffc <Task_ManageBLEEvents>:
{
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	4c08      	ldr	r4, [pc, #32]	; (8002020 <Task_ManageBLEEvents+0x24>)
 8002000:	b082      	sub	sp, #8
		g_Task3_RSS = uxTaskGetStackHighWaterMark(NULL);
 8002002:	2000      	movs	r0, #0
 8002004:	f008 fa3c 	bl	800a480 <uxTaskGetStackHighWaterMark>
 8002008:	6020      	str	r0, [r4, #0]
		LastActiveTime = xTaskGetTickCount();
 800200a:	f008 f825 	bl	800a058 <xTaskGetTickCount>
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 800200e:	210f      	movs	r1, #15
		LastActiveTime = xTaskGetTickCount();
 8002010:	4603      	mov	r3, r0
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8002012:	a801      	add	r0, sp, #4
		LastActiveTime = xTaskGetTickCount();
 8002014:	9301      	str	r3, [sp, #4]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8002016:	f007 fe99 	bl	8009d4c <vTaskDelayUntil>
		hci_user_evt_proc();
 800201a:	f006 fd8d 	bl	8008b38 <hci_user_evt_proc>
	while(1)
 800201e:	e7f0      	b.n	8002002 <Task_ManageBLEEvents+0x6>
 8002020:	20009a38 	.word	0x20009a38

08002024 <Task_BlinkLEDIndicator>:
{
 8002024:	b530      	push	{r4, r5, lr}
 8002026:	4d0a      	ldr	r5, [pc, #40]	; (8002050 <Task_BlinkLEDIndicator+0x2c>)
		HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8002028:	4c0a      	ldr	r4, [pc, #40]	; (8002054 <Task_BlinkLEDIndicator+0x30>)
{
 800202a:	b083      	sub	sp, #12
		g_Task2_RSS = uxTaskGetStackHighWaterMark(NULL);
 800202c:	2000      	movs	r0, #0
 800202e:	f008 fa27 	bl	800a480 <uxTaskGetStackHighWaterMark>
 8002032:	6028      	str	r0, [r5, #0]
		LastActiveTime = xTaskGetTickCount();
 8002034:	f008 f810 	bl	800a058 <xTaskGetTickCount>
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8002038:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		LastActiveTime = xTaskGetTickCount();
 800203c:	4603      	mov	r3, r0
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 800203e:	a801      	add	r0, sp, #4
		LastActiveTime = xTaskGetTickCount();
 8002040:	9301      	str	r3, [sp, #4]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8002042:	f007 fe83 	bl	8009d4c <vTaskDelayUntil>
		HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8002046:	2120      	movs	r1, #32
 8002048:	4620      	mov	r0, r4
 800204a:	f002 f817 	bl	800407c <HAL_GPIO_TogglePin>
	while(1)
 800204e:	e7ed      	b.n	800202c <Task_BlinkLEDIndicator+0x8>
 8002050:	20009a34 	.word	0x20009a34
 8002054:	40020000 	.word	0x40020000

08002058 <Task_ProcessPushButtonIRQ>:
{
 8002058:	b530      	push	{r4, r5, lr}
 800205a:	b083      	sub	sp, #12
	__IO uint32_t PBCounter = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	4d0a      	ldr	r5, [pc, #40]	; (8002088 <Task_ProcessPushButtonIRQ+0x30>)
 8002060:	9301      	str	r3, [sp, #4]
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002062:	f04f 31ff 	mov.w	r1, #4294967295
 8002066:	2001      	movs	r0, #1
 8002068:	f008 fa7a 	bl	800a560 <ulTaskNotifyTake>
 800206c:	4604      	mov	r4, r0
		g_Task4_RSS = uxTaskGetStackHighWaterMark(NULL);
 800206e:	2000      	movs	r0, #0
 8002070:	f008 fa06 	bl	800a480 <uxTaskGetStackHighWaterMark>
		if(NotificationValue & FRTOS_TASK_NOTIF_PB_PRESSED)
 8002074:	07e3      	lsls	r3, r4, #31
		g_Task4_RSS = uxTaskGetStackHighWaterMark(NULL);
 8002076:	6028      	str	r0, [r5, #0]
		if(NotificationValue & FRTOS_TASK_NOTIF_PB_PRESSED)
 8002078:	d5f3      	bpl.n	8002062 <Task_ProcessPushButtonIRQ+0xa>
			__TEST_MOTOR_AlternateWheel(PBCounter);
 800207a:	9801      	ldr	r0, [sp, #4]
 800207c:	f7fe ff8e 	bl	8000f9c <__TEST_MOTOR_AlternateWheel>
			PBCounter++;
 8002080:	9b01      	ldr	r3, [sp, #4]
 8002082:	3301      	adds	r3, #1
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	e7ec      	b.n	8002062 <Task_ProcessPushButtonIRQ+0xa>
 8002088:	20009a48 	.word	0x20009a48

0800208c <Task_ParseBLEMessage>:
{
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002090:	b085      	sub	sp, #20
	Motor_Init();
 8002092:	f7fe feeb 	bl	8000e6c <Motor_Init>
 8002096:	4e3c      	ldr	r6, [pc, #240]	; (8002188 <Task_ParseBLEMessage+0xfc>)
 8002098:	4d3c      	ldr	r5, [pc, #240]	; (800218c <Task_ParseBLEMessage+0x100>)
 800209a:	4f3d      	ldr	r7, [pc, #244]	; (8002190 <Task_ParseBLEMessage+0x104>)
 800209c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800219c <Task_ParseBLEMessage+0x110>
 80020a0:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80021a0 <Task_ParseBLEMessage+0x114>
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295
 80020a8:	2001      	movs	r0, #1
 80020aa:	f008 fa59 	bl	800a560 <ulTaskNotifyTake>
 80020ae:	4604      	mov	r4, r0
		g_Task1_RSS = uxTaskGetStackHighWaterMark(NULL);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f008 f9e5 	bl	800a480 <uxTaskGetStackHighWaterMark>
		if(NotificationValue & FRTOS_TASK_NOTIF_DIR_FORCESTOP)
 80020b6:	f414 4b00 	ands.w	fp, r4, #32768	; 0x8000
		g_Task1_RSS = uxTaskGetStackHighWaterMark(NULL);
 80020ba:	4603      	mov	r3, r0
 80020bc:	6033      	str	r3, [r6, #0]
			Car_ConfigDirection(DIR_CAR_BRAKES);
 80020be:	f04f 0004 	mov.w	r0, #4
		if(NotificationValue & FRTOS_TASK_NOTIF_DIR_FORCESTOP)
 80020c2:	d005      	beq.n	80020d0 <Task_ParseBLEMessage+0x44>
			Car_ConfigDirection(DIR_CAR_BRAKES);
 80020c4:	f7fe fed4 	bl	8000e70 <Car_ConfigDirection>
			g_CountDirForceStop++;
 80020c8:	682b      	ldr	r3, [r5, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	602b      	str	r3, [r5, #0]
 80020ce:	e7e9      	b.n	80020a4 <Task_ParseBLEMessage+0x18>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_NORTH)
 80020d0:	f014 0a01 	ands.w	sl, r4, #1
 80020d4:	d11b      	bne.n	800210e <Task_ParseBLEMessage+0x82>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_EAST)
 80020d6:	f014 0b02 	ands.w	fp, r4, #2
 80020da:	d12d      	bne.n	8002138 <Task_ParseBLEMessage+0xac>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_SOUTH)
 80020dc:	f014 0104 	ands.w	r1, r4, #4
 80020e0:	d13e      	bne.n	8002160 <Task_ParseBLEMessage+0xd4>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_WEST)
 80020e2:	0723      	lsls	r3, r4, #28
 80020e4:	d5de      	bpl.n	80020a4 <Task_ParseBLEMessage+0x18>
			Car_ConfigDirection(DIR_CAR_LEFT);
 80020e6:	4608      	mov	r0, r1
 80020e8:	9103      	str	r1, [sp, #12]
 80020ea:	f7fe fec1 	bl	8000e70 <Car_ConfigDirection>
			xTimerStart(h_TimMotorTimeout, 0);
 80020ee:	683c      	ldr	r4, [r7, #0]
 80020f0:	f007 ffb2 	bl	800a058 <xTaskGetTickCount>
 80020f4:	9903      	ldr	r1, [sp, #12]
 80020f6:	9100      	str	r1, [sp, #0]
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	2101      	movs	r1, #1
 8002100:	f008 fdfa 	bl	800acf8 <xTimerGenericCommand>
			g_CountDirLeft++;
 8002104:	4a23      	ldr	r2, [pc, #140]	; (8002194 <Task_ParseBLEMessage+0x108>)
 8002106:	6813      	ldr	r3, [r2, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e7ca      	b.n	80020a4 <Task_ParseBLEMessage+0x18>
			Car_ConfigDirection(DIR_CAR_FRONT);
 800210e:	2002      	movs	r0, #2
 8002110:	f7fe feae 	bl	8000e70 <Car_ConfigDirection>
			xTimerStart(h_TimMotorTimeout, 500/portTICK_PERIOD_MS);
 8002114:	683c      	ldr	r4, [r7, #0]
 8002116:	f007 ff9f 	bl	800a058 <xTaskGetTickCount>
 800211a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800211e:	4602      	mov	r2, r0
 8002120:	465b      	mov	r3, fp
 8002122:	9100      	str	r1, [sp, #0]
 8002124:	4620      	mov	r0, r4
 8002126:	2101      	movs	r1, #1
 8002128:	f008 fde6 	bl	800acf8 <xTimerGenericCommand>
			g_CountDirForward++;
 800212c:	f8d8 3000 	ldr.w	r3, [r8]
 8002130:	3301      	adds	r3, #1
 8002132:	f8c8 3000 	str.w	r3, [r8]
 8002136:	e7b5      	b.n	80020a4 <Task_ParseBLEMessage+0x18>
			Car_ConfigDirection(DIR_CAR_RIGHT);
 8002138:	2001      	movs	r0, #1
 800213a:	f7fe fe99 	bl	8000e70 <Car_ConfigDirection>
			xTimerStart(h_TimMotorTimeout, 0);
 800213e:	683c      	ldr	r4, [r7, #0]
 8002140:	f007 ff8a 	bl	800a058 <xTaskGetTickCount>
 8002144:	4653      	mov	r3, sl
 8002146:	4602      	mov	r2, r0
 8002148:	f8cd a000 	str.w	sl, [sp]
 800214c:	4620      	mov	r0, r4
 800214e:	2101      	movs	r1, #1
 8002150:	f008 fdd2 	bl	800acf8 <xTimerGenericCommand>
			g_CountDirRight++;
 8002154:	f8d9 3000 	ldr.w	r3, [r9]
 8002158:	3301      	adds	r3, #1
 800215a:	f8c9 3000 	str.w	r3, [r9]
 800215e:	e7a1      	b.n	80020a4 <Task_ParseBLEMessage+0x18>
			Car_ConfigDirection(DIR_CAR_BACK);
 8002160:	2003      	movs	r0, #3
 8002162:	f7fe fe85 	bl	8000e70 <Car_ConfigDirection>
			xTimerStart(h_TimMotorTimeout, 500/portTICK_PERIOD_MS);
 8002166:	683c      	ldr	r4, [r7, #0]
 8002168:	f007 ff76 	bl	800a058 <xTaskGetTickCount>
 800216c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002170:	4602      	mov	r2, r0
 8002172:	465b      	mov	r3, fp
 8002174:	9100      	str	r1, [sp, #0]
 8002176:	4620      	mov	r0, r4
 8002178:	2101      	movs	r1, #1
 800217a:	f008 fdbd 	bl	800acf8 <xTimerGenericCommand>
			g_CountDirBack++;
 800217e:	4a06      	ldr	r2, [pc, #24]	; (8002198 <Task_ParseBLEMessage+0x10c>)
 8002180:	6813      	ldr	r3, [r2, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e78d      	b.n	80020a4 <Task_ParseBLEMessage+0x18>
 8002188:	20009a30 	.word	0x20009a30
 800218c:	200001e4 	.word	0x200001e4
 8002190:	20009a44 	.word	0x20009a44
 8002194:	200001ec 	.word	0x200001ec
 8002198:	200001e0 	.word	0x200001e0
 800219c:	200001e8 	.word	0x200001e8
 80021a0:	200001f0 	.word	0x200001f0

080021a4 <Task_ManageBLEConnections>:
{
 80021a4:	b570      	push	{r4, r5, r6, lr}
	BlueNRG_Init();
 80021a6:	f7ff fb45 	bl	8001834 <BlueNRG_Init>
	BlueNRG_MakeDeviceDiscoverable();
 80021aa:	f7ff fd6d 	bl	8001c88 <BlueNRG_MakeDeviceDiscoverable>
 80021ae:	4d0d      	ldr	r5, [pc, #52]	; (80021e4 <Task_ManageBLEConnections+0x40>)
 80021b0:	4e0d      	ldr	r6, [pc, #52]	; (80021e8 <Task_ManageBLEConnections+0x44>)
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80021b2:	f04f 31ff 	mov.w	r1, #4294967295
 80021b6:	2001      	movs	r0, #1
 80021b8:	f008 f9d2 	bl	800a560 <ulTaskNotifyTake>
 80021bc:	4604      	mov	r4, r0
		g_Task0_RSS = uxTaskGetStackHighWaterMark(NULL);
 80021be:	2000      	movs	r0, #0
 80021c0:	f008 f95e 	bl	800a480 <uxTaskGetStackHighWaterMark>
		if(NotificationValue & FRTOS_TASK_NOTIF_BLE_CONNECTED)
 80021c4:	07a2      	lsls	r2, r4, #30
		g_Task0_RSS = uxTaskGetStackHighWaterMark(NULL);
 80021c6:	6028      	str	r0, [r5, #0]
		if(NotificationValue & FRTOS_TASK_NOTIF_BLE_CONNECTED)
 80021c8:	d503      	bpl.n	80021d2 <Task_ManageBLEConnections+0x2e>
			vTaskResume(h_TaskBLEMsg);
 80021ca:	6830      	ldr	r0, [r6, #0]
 80021cc:	f007 fe3c 	bl	8009e48 <vTaskResume>
 80021d0:	e7ef      	b.n	80021b2 <Task_ManageBLEConnections+0xe>
		else if(NotificationValue & FRTOS_TASK_NOTIF_BLE_DISCONNECTED)
 80021d2:	07e3      	lsls	r3, r4, #31
 80021d4:	d5ed      	bpl.n	80021b2 <Task_ManageBLEConnections+0xe>
			vTaskSuspend(h_TaskBLEMsg);
 80021d6:	6830      	ldr	r0, [r6, #0]
 80021d8:	f007 ffa2 	bl	800a120 <vTaskSuspend>
			BlueNRG_MakeDeviceDiscoverable();
 80021dc:	f7ff fd54 	bl	8001c88 <BlueNRG_MakeDeviceDiscoverable>
 80021e0:	e7e7      	b.n	80021b2 <Task_ManageBLEConnections+0xe>
 80021e2:	bf00      	nop
 80021e4:	20009a24 	.word	0x20009a24
 80021e8:	20009a20 	.word	0x20009a20

080021ec <FRTOS_Init_SWTimers>:
{
 80021ec:	b500      	push	{lr}
 80021ee:	b083      	sub	sp, #12
	h_TimMotorTimeout = xTimerCreate("TIM_MotorTimeout",
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <FRTOS_Init_SWTimers+0x54>)
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2300      	movs	r3, #0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4812      	ldr	r0, [pc, #72]	; (8002244 <FRTOS_Init_SWTimers+0x58>)
 80021fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021fe:	f008 fd13 	bl	800ac28 <xTimerCreate>
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <FRTOS_Init_SWTimers+0x5c>)
 8002204:	6018      	str	r0, [r3, #0]
	assert_param(h_TimMotorTimeout != NULL);
 8002206:	b170      	cbz	r0, 8002226 <FRTOS_Init_SWTimers+0x3a>
	h_TimUpdateLED = xTimerCreate("TIM_UpdateOLEDScreen",
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <FRTOS_Init_SWTimers+0x60>)
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	4810      	ldr	r0, [pc, #64]	; (8002250 <FRTOS_Init_SWTimers+0x64>)
 800220e:	2300      	movs	r3, #0
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002216:	f008 fd07 	bl	800ac28 <xTimerCreate>
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <FRTOS_Init_SWTimers+0x68>)
 800221c:	6018      	str	r0, [r3, #0]
	assert_param(h_TimUpdateLED != NULL);
 800221e:	b138      	cbz	r0, 8002230 <FRTOS_Init_SWTimers+0x44>
}
 8002220:	b003      	add	sp, #12
 8002222:	f85d fb04 	ldr.w	pc, [sp], #4
	assert_param(h_TimMotorTimeout != NULL);
 8002226:	480c      	ldr	r0, [pc, #48]	; (8002258 <FRTOS_Init_SWTimers+0x6c>)
 8002228:	218f      	movs	r1, #143	; 0x8f
 800222a:	f000 fb67 	bl	80028fc <assert_failed>
 800222e:	e7eb      	b.n	8002208 <FRTOS_Init_SWTimers+0x1c>
	assert_param(h_TimUpdateLED != NULL);
 8002230:	4809      	ldr	r0, [pc, #36]	; (8002258 <FRTOS_Init_SWTimers+0x6c>)
 8002232:	2199      	movs	r1, #153	; 0x99
}
 8002234:	b003      	add	sp, #12
 8002236:	f85d eb04 	ldr.w	lr, [sp], #4
	assert_param(h_TimUpdateLED != NULL);
 800223a:	f000 bb5f 	b.w	80028fc <assert_failed>
 800223e:	bf00      	nop
 8002240:	08001f29 	.word	0x08001f29
 8002244:	0800c4c0 	.word	0x0800c4c0
 8002248:	20009a44 	.word	0x20009a44
 800224c:	08001f25 	.word	0x08001f25
 8002250:	0800c4f4 	.word	0x0800c4f4
 8002254:	20009a1c 	.word	0x20009a1c
 8002258:	0800c4d4 	.word	0x0800c4d4

0800225c <FRTOS_Init_Tasks>:
{
 800225c:	b500      	push	{lr}
 800225e:	b083      	sub	sp, #12
	TaskCreationStatus = xTaskCreate( Task_ManageBLEConnections,
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <FRTOS_Init_Tasks+0xdc>)
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	232e      	movs	r3, #46	; 0x2e
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4934      	ldr	r1, [pc, #208]	; (800233c <FRTOS_Init_Tasks+0xe0>)
 800226a:	4835      	ldr	r0, [pc, #212]	; (8002340 <FRTOS_Init_Tasks+0xe4>)
 800226c:	2300      	movs	r3, #0
 800226e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002272:	f007 fd37 	bl	8009ce4 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 8002276:	2801      	cmp	r0, #1
 8002278:	d003      	beq.n	8002282 <FRTOS_Init_Tasks+0x26>
 800227a:	4832      	ldr	r0, [pc, #200]	; (8002344 <FRTOS_Init_Tasks+0xe8>)
 800227c:	21b6      	movs	r1, #182	; 0xb6
 800227e:	f000 fb3d 	bl	80028fc <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_ParseBLEMessage,
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <FRTOS_Init_Tasks+0xec>)
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	232c      	movs	r3, #44	; 0x2c
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	4930      	ldr	r1, [pc, #192]	; (800234c <FRTOS_Init_Tasks+0xf0>)
 800228c:	4830      	ldr	r0, [pc, #192]	; (8002350 <FRTOS_Init_Tasks+0xf4>)
 800228e:	2300      	movs	r3, #0
 8002290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002294:	f007 fd26 	bl	8009ce4 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 8002298:	2801      	cmp	r0, #1
 800229a:	d003      	beq.n	80022a4 <FRTOS_Init_Tasks+0x48>
 800229c:	4829      	ldr	r0, [pc, #164]	; (8002344 <FRTOS_Init_Tasks+0xe8>)
 800229e:	21c1      	movs	r1, #193	; 0xc1
 80022a0:	f000 fb2c 	bl	80028fc <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_ProcessPushButtonIRQ,
 80022a4:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <FRTOS_Init_Tasks+0xf8>)
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	2327      	movs	r3, #39	; 0x27
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	492a      	ldr	r1, [pc, #168]	; (8002358 <FRTOS_Init_Tasks+0xfc>)
 80022ae:	482b      	ldr	r0, [pc, #172]	; (800235c <FRTOS_Init_Tasks+0x100>)
 80022b0:	2300      	movs	r3, #0
 80022b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b6:	f007 fd15 	bl	8009ce4 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 80022ba:	2801      	cmp	r0, #1
 80022bc:	d003      	beq.n	80022c6 <FRTOS_Init_Tasks+0x6a>
 80022be:	4821      	ldr	r0, [pc, #132]	; (8002344 <FRTOS_Init_Tasks+0xe8>)
 80022c0:	21cc      	movs	r1, #204	; 0xcc
 80022c2:	f000 fb1b 	bl	80028fc <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_BlinkLEDIndicator,
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <FRTOS_Init_Tasks+0x104>)
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2324      	movs	r3, #36	; 0x24
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	4925      	ldr	r1, [pc, #148]	; (8002364 <FRTOS_Init_Tasks+0x108>)
 80022d0:	4825      	ldr	r0, [pc, #148]	; (8002368 <FRTOS_Init_Tasks+0x10c>)
 80022d2:	2300      	movs	r3, #0
 80022d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d8:	f007 fd04 	bl	8009ce4 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 80022dc:	2801      	cmp	r0, #1
 80022de:	d003      	beq.n	80022e8 <FRTOS_Init_Tasks+0x8c>
 80022e0:	4818      	ldr	r0, [pc, #96]	; (8002344 <FRTOS_Init_Tasks+0xe8>)
 80022e2:	21d7      	movs	r1, #215	; 0xd7
 80022e4:	f000 fb0a 	bl	80028fc <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_ManageBLEEvents,
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <FRTOS_Init_Tasks+0x110>)
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	2319      	movs	r3, #25
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	491f      	ldr	r1, [pc, #124]	; (8002370 <FRTOS_Init_Tasks+0x114>)
 80022f2:	4820      	ldr	r0, [pc, #128]	; (8002374 <FRTOS_Init_Tasks+0x118>)
 80022f4:	2300      	movs	r3, #0
 80022f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022fa:	f007 fcf3 	bl	8009ce4 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 80022fe:	2801      	cmp	r0, #1
 8002300:	d003      	beq.n	800230a <FRTOS_Init_Tasks+0xae>
 8002302:	4810      	ldr	r0, [pc, #64]	; (8002344 <FRTOS_Init_Tasks+0xe8>)
 8002304:	21e2      	movs	r1, #226	; 0xe2
 8002306:	f000 faf9 	bl	80028fc <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_CarMovementCalculations,
 800230a:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <FRTOS_Init_Tasks+0x11c>)
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	2329      	movs	r3, #41	; 0x29
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	491a      	ldr	r1, [pc, #104]	; (800237c <FRTOS_Init_Tasks+0x120>)
 8002314:	481a      	ldr	r0, [pc, #104]	; (8002380 <FRTOS_Init_Tasks+0x124>)
 8002316:	2300      	movs	r3, #0
 8002318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800231c:	f007 fce2 	bl	8009ce4 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 8002320:	2801      	cmp	r0, #1
 8002322:	d102      	bne.n	800232a <FRTOS_Init_Tasks+0xce>
}
 8002324:	b003      	add	sp, #12
 8002326:	f85d fb04 	ldr.w	pc, [sp], #4
	assert_param(TaskCreationStatus == pdPASS);
 800232a:	4806      	ldr	r0, [pc, #24]	; (8002344 <FRTOS_Init_Tasks+0xe8>)
 800232c:	21ed      	movs	r1, #237	; 0xed
}
 800232e:	b003      	add	sp, #12
 8002330:	f85d eb04 	ldr.w	lr, [sp], #4
	assert_param(TaskCreationStatus == pdPASS);
 8002334:	f000 bae2 	b.w	80028fc <assert_failed>
 8002338:	20009a3c 	.word	0x20009a3c
 800233c:	0800c50c 	.word	0x0800c50c
 8002340:	080021a5 	.word	0x080021a5
 8002344:	0800c4d4 	.word	0x0800c4d4
 8002348:	20009a20 	.word	0x20009a20
 800234c:	0800c524 	.word	0x0800c524
 8002350:	0800208d 	.word	0x0800208d
 8002354:	20009a2c 	.word	0x20009a2c
 8002358:	0800c538 	.word	0x0800c538
 800235c:	08002059 	.word	0x08002059
 8002360:	2000021c 	.word	0x2000021c
 8002364:	0800c544 	.word	0x0800c544
 8002368:	08002025 	.word	0x08002025
 800236c:	20000218 	.word	0x20000218
 8002370:	0800c554 	.word	0x0800c554
 8002374:	08001ffd 	.word	0x08001ffd
 8002378:	20009a40 	.word	0x20009a40
 800237c:	0800c568 	.word	0x0800c568
 8002380:	08001f31 	.word	0x08001f31

08002384 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8002384:	b530      	push	{r4, r5, lr}
 8002386:	b083      	sub	sp, #12
 8002388:	460d      	mov	r5, r1
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800238a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 800238e:	4613      	mov	r3, r2
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8002390:	4601      	mov	r1, r0
 8002392:	462a      	mov	r2, r5
 8002394:	9400      	str	r4, [sp, #0]
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <BSP_SPI1_SendRecv+0x28>)
 8002398:	f004 f992 	bl	80066c0 <HAL_SPI_TransmitReceive>
 800239c:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 800239e:	bf14      	ite	ne
 80023a0:	f06f 0005 	mvnne.w	r0, #5
 80023a4:	2000      	moveq	r0, #0
 80023a6:	b003      	add	sp, #12
 80023a8:	bd30      	pop	{r4, r5, pc}
 80023aa:	bf00      	nop
 80023ac:	20009a4c 	.word	0x20009a4c

080023b0 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 80023b0:	f000 be96 	b.w	80030e0 <HAL_GetTick>

080023b4 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <MX_SPI1_Init+0x38>)
{
 80023b6:	b538      	push	{r3, r4, r5, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 80023b8:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi->Instance = SPI1;
 80023bc:	6002      	str	r2, [r0, #0]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80023be:	2201      	movs	r2, #1
  hspi->Init.NSS = SPI_NSS_SOFT;
 80023c0:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80023c4:	2430      	movs	r4, #48	; 0x30
  hspi->Init.Mode = SPI_MODE_MASTER;
 80023c6:	6041      	str	r1, [r0, #4]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80023c8:	6142      	str	r2, [r0, #20]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 10;
 80023ca:	210a      	movs	r1, #10
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80023cc:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80023ce:	e9c0 5406 	strd	r5, r4, [r0, #24]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80023d2:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80023d6:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi->Init.CRCPolynomial = 10;
 80023da:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023dc:	6102      	str	r2, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023de:	6282      	str	r2, [r0, #40]	; 0x28
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80023e0:	f004 f86a 	bl	80064b8 <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 80023e4:	3800      	subs	r0, #0
 80023e6:	bf18      	it	ne
 80023e8:	2001      	movne	r0, #1
 80023ea:	bd38      	pop	{r3, r4, r5, pc}
 80023ec:	40013000 	.word	0x40013000

080023f0 <BSP_SPI1_Init>:
{
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(SPI1InitCounter++ == 0)
 80023f2:	4a2f      	ldr	r2, [pc, #188]	; (80024b0 <BSP_SPI1_Init+0xc0>)
  hspi1.Instance  = SPI1;
 80023f4:	4c2f      	ldr	r4, [pc, #188]	; (80024b4 <BSP_SPI1_Init+0xc4>)
  if(SPI1InitCounter++ == 0)
 80023f6:	6813      	ldr	r3, [r2, #0]
  hspi1.Instance  = SPI1;
 80023f8:	492f      	ldr	r1, [pc, #188]	; (80024b8 <BSP_SPI1_Init+0xc8>)
 80023fa:	6021      	str	r1, [r4, #0]
  if(SPI1InitCounter++ == 0)
 80023fc:	1c59      	adds	r1, r3, #1
{
 80023fe:	b08b      	sub	sp, #44	; 0x2c
  if(SPI1InitCounter++ == 0)
 8002400:	6011      	str	r1, [r2, #0]
 8002402:	b113      	cbz	r3, 800240a <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8002404:	2000      	movs	r0, #0
}
 8002406:	b00b      	add	sp, #44	; 0x2c
 8002408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800240a:	4620      	mov	r0, r4
 800240c:	f004 faf0 	bl	80069f0 <HAL_SPI_GetState>
 8002410:	4603      	mov	r3, r0
 8002412:	2800      	cmp	r0, #0
 8002414:	d1f6      	bne.n	8002404 <BSP_SPI1_Init+0x14>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002416:	4a29      	ldr	r2, [pc, #164]	; (80024bc <BSP_SPI1_Init+0xcc>)
 8002418:	9001      	str	r0, [sp, #4]
 800241a:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800241c:	4828      	ldr	r0, [pc, #160]	; (80024c0 <BSP_SPI1_Init+0xd0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800241e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8002422:	6451      	str	r1, [r2, #68]	; 0x44
 8002424:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002426:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 800242a:	9101      	str	r1, [sp, #4]
 800242c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002432:	f041 0101 	orr.w	r1, r1, #1
 8002436:	6311      	str	r1, [r2, #48]	; 0x30
 8002438:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800243a:	f001 0101 	and.w	r1, r1, #1
 800243e:	9102      	str	r1, [sp, #8]
 8002440:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	9303      	str	r3, [sp, #12]
 8002444:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	6313      	str	r3, [r2, #48]	; 0x30
 800244c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002454:	2240      	movs	r2, #64	; 0x40
 8002456:	2302      	movs	r3, #2
 8002458:	2600      	movs	r6, #0
 800245a:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800245c:	2505      	movs	r5, #5
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800245e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002460:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	f8dd c00c 	ldr.w	ip, [sp, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002468:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800246a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800246e:	f001 fbd3 	bl	8003c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002476:	4812      	ldr	r0, [pc, #72]	; (80024c0 <BSP_SPI1_Init+0xd0>)
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002478:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800247a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800247c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002480:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002484:	f001 fbc8 	bl	8003c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002488:	480e      	ldr	r0, [pc, #56]	; (80024c4 <BSP_SPI1_Init+0xd4>)
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800248a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800248c:	2208      	movs	r2, #8
 800248e:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002490:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002492:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002496:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800249a:	f001 fbbd 	bl	8003c18 <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800249e:	4620      	mov	r0, r4
 80024a0:	f7ff ff88 	bl	80023b4 <MX_SPI1_Init>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d0ad      	beq.n	8002404 <BSP_SPI1_Init+0x14>
				ret = BSP_ERROR_BUS_FAILURE;
 80024a8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80024ac:	e7ab      	b.n	8002406 <BSP_SPI1_Init+0x16>
 80024ae:	bf00      	nop
 80024b0:	20000220 	.word	0x20000220
 80024b4:	20009a4c 	.word	0x20009a4c
 80024b8:	40013000 	.word	0x40013000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400

080024c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024c8:	b500      	push	{lr}
 80024ca:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <MX_DMA_Init+0x30>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	9201      	str	r2, [sp, #4]
 80024d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024d4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80024d8:	6319      	str	r1, [r3, #48]	; 0x30
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e0:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80024e2:	2105      	movs	r1, #5
 80024e4:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024e6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80024e8:	f001 f876 	bl	80035d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024ec:	2038      	movs	r0, #56	; 0x38

}
 80024ee:	b003      	add	sp, #12
 80024f0:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024f4:	f001 b8ba 	b.w	800366c <HAL_NVIC_EnableIRQ>
 80024f8:	40023800 	.word	0x40023800

080024fc <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop

08002500 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8002500:	2000      	movs	r0, #0
 8002502:	4770      	bx	lr

08002504 <vApplicationIdleHook>:
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop

08002508 <vApplicationMallocFailedHook>:
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop

0800250c <MX_FREERTOS_Init>:

  /* USER CODE BEGIN RTOS_EVENTS */

  /* USER CODE END RTOS_EVENTS */

}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	2400      	movs	r4, #0
{
 8002516:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800251c:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002520:	4b6c      	ldr	r3, [pc, #432]	; (80026d4 <MX_GPIO_Init+0x1c4>)
 8002522:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 8002528:	4f6b      	ldr	r7, [pc, #428]	; (80026d8 <MX_GPIO_Init+0x1c8>)
  HAL_GPIO_WritePin(GPIOB, DIR_LATCH_Pin|DIR_SER_Pin, GPIO_PIN_RESET);
 800252a:	4e6c      	ldr	r6, [pc, #432]	; (80026dc <MX_GPIO_Init+0x1cc>)
  HAL_GPIO_WritePin(GPIOB, DIR_EN_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 800252c:	4d6c      	ldr	r5, [pc, #432]	; (80026e0 <MX_GPIO_Init+0x1d0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252e:	f042 0204 	orr.w	r2, r2, #4
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
 8002534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002536:	f002 0204 	and.w	r2, r2, #4
 800253a:	9201      	str	r2, [sp, #4]
 800253c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800253e:	9402      	str	r4, [sp, #8]
 8002540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
 8002548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800254a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800254e:	9202      	str	r2, [sp, #8]
 8002550:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	9403      	str	r4, [sp, #12]
 8002554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
 800255c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255e:	f002 0201 	and.w	r2, r2, #1
 8002562:	9203      	str	r2, [sp, #12]
 8002564:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002566:	9404      	str	r4, [sp, #16]
 8002568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800256a:	f042 0202 	orr.w	r2, r2, #2
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
 8002570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002572:	f002 0202 	and.w	r2, r2, #2
 8002576:	9204      	str	r2, [sp, #16]
 8002578:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800257a:	9405      	str	r4, [sp, #20]
 800257c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257e:	f042 0208 	orr.w	r2, r2, #8
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 800258c:	4622      	mov	r2, r4
 800258e:	4638      	mov	r0, r7
 8002590:	f44f 7191 	mov.w	r1, #290	; 0x122
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002594:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 8002596:	f001 fd57 	bl	8004048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIR_LATCH_Pin|DIR_SER_Pin, GPIO_PIN_RESET);
 800259a:	4622      	mov	r2, r4
 800259c:	4630      	mov	r0, r6
 800259e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80025a2:	f001 fd51 	bl	8004048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIR_EN_Pin, GPIO_PIN_SET);
 80025a6:	4630      	mov	r0, r6
 80025a8:	2201      	movs	r2, #1
 80025aa:	2120      	movs	r1, #32
 80025ac:	f001 fd4c 	bl	8004048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 80025b0:	4622      	mov	r2, r4
 80025b2:	4628      	mov	r0, r5
 80025b4:	2101      	movs	r1, #1
 80025b6:	f001 fd47 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <MX_GPIO_Init+0x1d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 80025be:	a906      	add	r1, sp, #24
 80025c0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
 80025c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 80025ca:	f001 fb25 	bl	8003c18 <HAL_GPIO_Init>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ce:	a906      	add	r1, sp, #24
 80025d0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80025d2:	f64d 726e 	movw	r2, #57198	; 0xdf6e
 80025d6:	2303      	movs	r3, #3
 80025d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025de:	f001 fb1b 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025e2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025e4:	2203      	movs	r2, #3
 80025e6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025e8:	483f      	ldr	r0, [pc, #252]	; (80026e8 <MX_GPIO_Init+0x1d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025f0:	f001 fb12 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_Pin;
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <MX_GPIO_Init+0x1d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_GPIO_Port, &GPIO_InitStruct);
 80025f8:	a906      	add	r1, sp, #24
 80025fa:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_Pin;
 80025fc:	2201      	movs	r2, #1
 80025fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002602:	f001 fb09 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 - Accelerometer INT1 pin */
  GPIO_InitStruct.Pin = ACCELEROMETER_INT1_Pin;
 8002606:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <MX_GPIO_Init+0x1d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ACCELEROMETER_INT1_GPIO_Port, &GPIO_InitStruct);
 800260a:	a906      	add	r1, sp, #24
 800260c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = ACCELEROMETER_INT1_Pin;
 800260e:	2210      	movs	r2, #16
 8002610:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(ACCELEROMETER_INT1_GPIO_Port, &GPIO_InitStruct);
 8002614:	f001 fb00 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE Pins and Nucleo LED Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 8002618:	f44f 7291 	mov.w	r2, #290	; 0x122
 800261c:	2301      	movs	r3, #1
 800261e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	a906      	add	r1, sp, #24
 8002624:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 8002626:	2200      	movs	r2, #0
 8002628:	2300      	movs	r3, #0
 800262a:	e9cd 2308 	strd	r2, r3, [sp, #32]

  /* Configure GPIO pins : Shift Register Pins */
  GPIO_InitStruct.Pin = DIR_LATCH_Pin|DIR_SER_Pin|DIR_EN_Pin;
 800262e:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f001 faf1 	bl	8003c18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIR_LATCH_Pin|DIR_SER_Pin|DIR_EN_Pin;
 8002636:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	a906      	add	r1, sp, #24
 800263c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = DIR_LATCH_Pin|DIR_SER_Pin|DIR_EN_Pin;
 800263e:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8002642:	2301      	movs	r3, #1
 8002644:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002648:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264c:	f001 fae4 	bl	8003c18 <HAL_GPIO_Init>
  /* Configure GPIO pins : Shift Register Pins */
  GPIO_InitStruct.Pin = DIR_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(DIR_CLK_GPIO_Port, &GPIO_InitStruct);
 8002650:	4628      	mov	r0, r5
 8002652:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = DIR_CLK_Pin;
 8002654:	2201      	movs	r2, #1
 8002656:	2301      	movs	r3, #1
 8002658:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800265c:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(DIR_CLK_GPIO_Port, &GPIO_InitStruct);
 8002660:	f001 fada 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002664:	4638      	mov	r0, r7
 8002666:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8002668:	f649 0218 	movw	r2, #38936	; 0x9818
 800266c:	2303      	movs	r3, #3
 800266e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f001 fad0 	bl	8003c18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002678:	4630      	mov	r0, r6
 800267a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800267c:	f24f 0287 	movw	r2, #61575	; 0xf087
 8002680:	2303      	movs	r3, #3
 8002682:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002688:	f001 fac6 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800268c:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800268e:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002690:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002692:	4816      	ldr	r0, [pc, #88]	; (80026ec <MX_GPIO_Init+0x1dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002696:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800269a:	f001 fabd 	bl	8003c18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 1);
 800269e:	2201      	movs	r2, #1
 80026a0:	2105      	movs	r1, #5
 80026a2:	2006      	movs	r0, #6
 80026a4:	f000 ff98 	bl	80035d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80026a8:	2006      	movs	r0, #6
 80026aa:	f000 ffdf 	bl	800366c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 2);
 80026ae:	2202      	movs	r2, #2
 80026b0:	2106      	movs	r1, #6
 80026b2:	2028      	movs	r0, #40	; 0x28
 80026b4:	f000 ff90 	bl	80035d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026b8:	2028      	movs	r0, #40	; 0x28
 80026ba:	f000 ffd7 	bl	800366c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 3);
 80026be:	2203      	movs	r2, #3
 80026c0:	2106      	movs	r1, #6
 80026c2:	200a      	movs	r0, #10
 80026c4:	f000 ff88 	bl	80035d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80026c8:	200a      	movs	r0, #10
 80026ca:	f000 ffcf 	bl	800366c <HAL_NVIC_EnableIRQ>
}
 80026ce:	b00d      	add	sp, #52	; 0x34
 80026d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	10110000 	.word	0x10110000
 80026e8:	40021c00 	.word	0x40021c00
 80026ec:	40020c00 	.word	0x40020c00

080026f0 <MX_I2C1_Init>:
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026f0:	480b      	ldr	r0, [pc, #44]	; (8002720 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 80026f2:	490c      	ldr	r1, [pc, #48]	; (8002724 <MX_I2C1_Init+0x34>)
{
 80026f4:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_I2C1_Init+0x38>)
 80026f8:	6003      	str	r3, [r0, #0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026fe:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
 8002700:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8002704:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002708:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.ClockSpeed = 100000;
 800270c:	6041      	str	r1, [r0, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800270e:	6102      	str	r2, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002710:	f001 ff00 	bl	8004514 <HAL_I2C_Init>
 8002714:	b900      	cbnz	r0, 8002718 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002716:	bd08      	pop	{r3, pc}
 8002718:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800271c:	f000 b8ec 	b.w	80028f8 <Error_Handler>
 8002720:	20009aa4 	.word	0x20009aa4
 8002724:	000186a0 	.word	0x000186a0
 8002728:	40005400 	.word	0x40005400

0800272c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800272c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 800272e:	6802      	ldr	r2, [r0, #0]
 8002730:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_I2C_MspInit+0x78>)
{
 8002732:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 8002736:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800273c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002740:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 8002742:	d001      	beq.n	8002748 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002744:	b008      	add	sp, #32
 8002746:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002748:	4d17      	ldr	r5, [pc, #92]	; (80027a8 <HAL_I2C_MspInit+0x7c>)
 800274a:	9400      	str	r4, [sp, #0]
 800274c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	4817      	ldr	r0, [pc, #92]	; (80027ac <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	632b      	str	r3, [r5, #48]	; 0x30
 8002756:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800275e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002762:	2312      	movs	r3, #18
 8002764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002768:	2201      	movs	r2, #1
 800276a:	2303      	movs	r3, #3
 800276c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002770:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002772:	2304      	movs	r3, #4
 8002774:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002778:	f001 fa4e 	bl	8003c18 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800277c:	9401      	str	r4, [sp, #4]
 800277e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002784:	642b      	str	r3, [r5, #64]	; 0x40
 8002786:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 1);
 800278e:	2201      	movs	r2, #1
 8002790:	2106      	movs	r1, #6
 8002792:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002794:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 1);
 8002796:	f000 ff1f 	bl	80035d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800279a:	201f      	movs	r0, #31
 800279c:	f000 ff66 	bl	800366c <HAL_NVIC_EnableIRQ>
}
 80027a0:	b008      	add	sp, #32
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	40005400 	.word	0x40005400
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020400 	.word	0x40020400

080027b0 <_write>:
  * @retval length of string/characters
  */
int _write(int file, char *ptr, int len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	for(uint16_t i=0 ; i<len ; i++)
 80027b0:	1e10      	subs	r0, r2, #0
 80027b2:	dd1c      	ble.n	80027ee <_write+0x3e>
{
 80027b4:	b430      	push	{r4, r5}
	for(uint16_t i=0 ; i<len ; i++)
 80027b6:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80027b8:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80027bc:	f8d4 5e80 	ldr.w	r5, [r4, #3712]	; 0xe80
 80027c0:	07ed      	lsls	r5, r5, #31
		ITM_SendChar((*ptr++));
 80027c2:	f101 0101 	add.w	r1, r1, #1
 80027c6:	d50c      	bpl.n	80027e2 <_write+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80027c8:	f8d4 2e00 	ldr.w	r2, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80027cc:	07d2      	lsls	r2, r2, #31
 80027ce:	d508      	bpl.n	80027e2 <_write+0x32>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80027d0:	6825      	ldr	r5, [r4, #0]
 80027d2:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80027d6:	b91d      	cbnz	r5, 80027e0 <_write+0x30>
    {
      __NOP();
 80027d8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80027da:	6825      	ldr	r5, [r4, #0]
 80027dc:	2d00      	cmp	r5, #0
 80027de:	d0fb      	beq.n	80027d8 <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80027e0:	7022      	strb	r2, [r4, #0]
	for(uint16_t i=0 ; i<len ; i++)
 80027e2:	3301      	adds	r3, #1
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4283      	cmp	r3, r0
 80027e8:	dbe8      	blt.n	80027bc <_write+0xc>

	return len;
}
 80027ea:	bc30      	pop	{r4, r5}
 80027ec:	4770      	bx	lr
 80027ee:	4770      	bx	lr

080027f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f2:	2300      	movs	r3, #0
{
 80027f4:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f6:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80027fa:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027fe:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002802:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	4922      	ldr	r1, [pc, #136]	; (8002890 <SystemClock_Config+0xa0>)
 8002808:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800280a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800280c:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002810:	4a20      	ldr	r2, [pc, #128]	; (8002894 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002816:	6408      	str	r0, [r1, #64]	; 0x40
 8002818:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800281a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800281e:	9100      	str	r1, [sp, #0]
 8002820:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	6813      	ldr	r3, [r2, #0]
 8002826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	6813      	ldr	r3, [r2, #0]
 800282e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002832:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002834:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002836:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002838:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800283a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800283c:	2202      	movs	r2, #2
 800283e:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002840:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002842:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002846:	e9cd 410b 	strd	r4, r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800284a:	25c8      	movs	r5, #200	; 0xc8
 800284c:	2410      	movs	r4, #16
 800284e:	2202      	movs	r2, #2
 8002850:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 200;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002852:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002854:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8002858:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285c:	f003 f9e0 	bl	8005c20 <HAL_RCC_OscConfig>
 8002860:	b108      	cbz	r0, 8002866 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002862:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002864:	e7fe      	b.n	8002864 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002866:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002868:	240f      	movs	r4, #15
 800286a:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800286c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800286e:	2200      	movs	r2, #0
 8002870:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002874:	a802      	add	r0, sp, #8
 8002876:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002878:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800287c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002880:	f003 fc84 	bl	800618c <HAL_RCC_ClockConfig>
 8002884:	b108      	cbz	r0, 800288a <SystemClock_Config+0x9a>
 8002886:	b672      	cpsid	i
  while (1)
 8002888:	e7fe      	b.n	8002888 <SystemClock_Config+0x98>
}
 800288a:	b015      	add	sp, #84	; 0x54
 800288c:	bd30      	pop	{r4, r5, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800
 8002894:	40007000 	.word	0x40007000

08002898 <main>:
{
 8002898:	b508      	push	{r3, lr}
  HAL_Init();
 800289a:	f000 fbfb 	bl	8003094 <HAL_Init>
  SystemClock_Config();
 800289e:	f7ff ffa7 	bl	80027f0 <SystemClock_Config>
  MX_GPIO_Init();
 80028a2:	f7ff fe35 	bl	8002510 <MX_GPIO_Init>
  MX_DMA_Init();
 80028a6:	f7ff fe0f 	bl	80024c8 <MX_DMA_Init>
  MX_ADC1_Init();
 80028aa:	f7fe fe93 	bl	80015d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80028ae:	f7ff ff1f 	bl	80026f0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80028b2:	f000 fad5 	bl	8002e60 <MX_TIM1_Init>
  MX_TIM3_Init();
 80028b6:	f000 fb5d 	bl	8002f74 <MX_TIM3_Init>
  printf("\tSTM32F411RE Nucleo-64 Board\n");
 80028ba:	480c      	ldr	r0, [pc, #48]	; (80028ec <main+0x54>)
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 80028bc:	4c0c      	ldr	r4, [pc, #48]	; (80028f0 <main+0x58>)
  printf("\tSTM32F411RE Nucleo-64 Board\n");
 80028be:	f008 fdff 	bl	800b4c0 <puts>
  printf("\tFreeRTOS-BLE-Car\n\n");
 80028c2:	480c      	ldr	r0, [pc, #48]	; (80028f4 <main+0x5c>)
 80028c4:	f008 fdfc 	bl	800b4c0 <puts>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80028c8:	f006 fa0e 	bl	8008ce8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80028cc:	f7ff fe1e 	bl	800250c <MX_FREERTOS_Init>
  FRTOS_Init_SWTimers();
 80028d0:	f7ff fc8c 	bl	80021ec <FRTOS_Init_SWTimers>
  FRTOS_Init_Tasks();
 80028d4:	f7ff fcc2 	bl	800225c <FRTOS_Init_Tasks>
  osKernelStart();
 80028d8:	f006 fa18 	bl	8008d0c <osKernelStart>
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 80028dc:	4620      	mov	r0, r4
 80028de:	2120      	movs	r1, #32
 80028e0:	f001 fbcc 	bl	800407c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80028e4:	2064      	movs	r0, #100	; 0x64
 80028e6:	f000 fc01 	bl	80030ec <HAL_Delay>
  while (1)
 80028ea:	e7f7      	b.n	80028dc <main+0x44>
 80028ec:	0800c588 	.word	0x0800c588
 80028f0:	40020000 	.word	0x40020000
 80028f4:	0800c5a8 	.word	0x0800c5a8

080028f8 <Error_Handler>:
 80028f8:	b672      	cpsid	i
  while (1)
 80028fa:	e7fe      	b.n	80028fa <Error_Handler+0x2>

080028fc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80028fc:	460a      	mov	r2, r1
 80028fe:	b508      	push	{r3, lr}
	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8002900:	4601      	mov	r1, r0
 8002902:	4802      	ldr	r0, [pc, #8]	; (800290c <assert_failed+0x10>)
 8002904:	f008 fd56 	bl	800b3b4 <iprintf>
	for(;;);
 8002908:	e7fe      	b.n	8002908 <assert_failed+0xc>
 800290a:	bf00      	nop
 800290c:	0800c5bc 	.word	0x0800c5bc

08002910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002910:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_MspInit+0x3c>)
 8002914:	2200      	movs	r2, #0
 8002916:	9200      	str	r2, [sp, #0]
 8002918:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800291a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800291e:	6459      	str	r1, [r3, #68]	; 0x44
 8002920:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002922:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002926:	9100      	str	r1, [sp, #0]
 8002928:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	9201      	str	r2, [sp, #4]
 800292c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800292e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002932:	6419      	str	r1, [r3, #64]	; 0x40
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293a:	9301      	str	r3, [sp, #4]
 800293c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800293e:	210f      	movs	r1, #15
 8002940:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002944:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002946:	f000 be47 	b.w	80035d8 <HAL_NVIC_SetPriority>
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800

08002950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002950:	b530      	push	{r4, r5, lr}
 8002952:	4601      	mov	r1, r0
 8002954:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8002956:	2200      	movs	r2, #0
 8002958:	201c      	movs	r0, #28
 800295a:	f000 fe3d 	bl	80035d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800295e:	201c      	movs	r0, #28
 8002960:	f000 fe84 	bl	800366c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002964:	2500      	movs	r5, #0
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_InitTick+0x70>)
 8002968:	9502      	str	r5, [sp, #8]
 800296a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800296c:	4c15      	ldr	r4, [pc, #84]	; (80029c4 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800297a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 800297c:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800297e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002980:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002982:	f003 fd15 	bl	80063b0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002986:	f003 fd03 	bl	8006390 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800298a:	4a0f      	ldr	r2, [pc, #60]	; (80029c8 <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 800298c:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800298e:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	0c9b      	lsrs	r3, r3, #18
 8002996:	3b01      	subs	r3, #1
  htim2.Instance = TIM2;
 8002998:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800299c:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80029a0:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a2:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim2.Instance = TIM2;
 80029a6:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80029a8:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80029aa:	f004 f8cb 	bl	8006b44 <HAL_TIM_Base_Init>
 80029ae:	b110      	cbz	r0, 80029b6 <HAL_InitTick+0x66>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
 80029b0:	2001      	movs	r0, #1
}
 80029b2:	b009      	add	sp, #36	; 0x24
 80029b4:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 80029b6:	4620      	mov	r0, r4
 80029b8:	f004 f99a 	bl	8006cf0 <HAL_TIM_Base_Start_IT>
}
 80029bc:	b009      	add	sp, #36	; 0x24
 80029be:	bd30      	pop	{r4, r5, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	20009af8 	.word	0x20009af8
 80029c8:	431bde83 	.word	0x431bde83

080029cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <NMI_Handler>
 80029ce:	bf00      	nop

080029d0 <HardFault_Handler>:
 * It extracts the location of stack frame and passes it to the handler written
 * in C as a pointer. We also extract the LR value as second parameter.
 */
void HardFault_Handler(void)
{
	asm(
 80029d0:	f01e 0f04 	tst.w	lr, #4
 80029d4:	bf0c      	ite	eq
 80029d6:	f3ef 8008 	mrseq	r0, MSP
 80029da:	f3ef 8009 	mrsne	r0, PSP
 80029de:	4671      	mov	r1, lr
 80029e0:	f000 b802 	b.w	80029e8 <HardFault_Handler_C>
		"MRSEQ  R0, MSP\n\t"
		"MRSNE  R0, PSP\n\t"
		"MOV    R1, LR\n\t"
		"B      (HardFault_Handler_C)\n\t"
	);
}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop

080029e8 <HardFault_Handler_C>:
 * from the assembly wrapper as input parameters
 */
void HardFault_Handler_C(unsigned long * hardfault_args, unsigned int lr_value)
{
	/* Relevant registers that display code/memory address that caused hardfault */
	bus_fault_address       = SCB->BFAR;
 80029e8:	4c43      	ldr	r4, [pc, #268]	; (8002af8 <HardFault_Handler_C+0x110>)
 80029ea:	4a44      	ldr	r2, [pc, #272]	; (8002afc <HardFault_Handler_C+0x114>)
	memmanage_fault_address = SCB->MMFAR;
	cfsr                    = SCB->CFSR;
 80029ec:	4d44      	ldr	r5, [pc, #272]	; (8002b00 <HardFault_Handler_C+0x118>)

	/* Relevant ARM registers */
	stacked_r0  = ((unsigned long) hardfault_args[0]);
	stacked_r1  = ((unsigned long) hardfault_args[1]);
	stacked_r2  = ((unsigned long) hardfault_args[2]);
	stacked_r3  = ((unsigned long) hardfault_args[3]);
 80029ee:	f8df a174 	ldr.w	sl, [pc, #372]	; 8002b64 <HardFault_Handler_C+0x17c>
	stacked_r12 = ((unsigned long) hardfault_args[4]);
 80029f2:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8002b68 <HardFault_Handler_C+0x180>
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 80029f6:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002b6c <HardFault_Handler_C+0x184>
{
 80029fa:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	bus_fault_address       = SCB->BFAR;
 80029fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a00:	6013      	str	r3, [r2, #0]
	memmanage_fault_address = SCB->MMFAR;
 8002a02:	4a40      	ldr	r2, [pc, #256]	; (8002b04 <HardFault_Handler_C+0x11c>)
 8002a04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a06:	6013      	str	r3, [r2, #0]
	cfsr                    = SCB->CFSR;
 8002a08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a0a:	602b      	str	r3, [r5, #0]
	stacked_r0  = ((unsigned long) hardfault_args[0]);
 8002a0c:	4a3e      	ldr	r2, [pc, #248]	; (8002b08 <HardFault_Handler_C+0x120>)
 8002a0e:	6806      	ldr	r6, [r0, #0]
	stacked_r1  = ((unsigned long) hardfault_args[1]);
 8002a10:	4b3e      	ldr	r3, [pc, #248]	; (8002b0c <HardFault_Handler_C+0x124>)
	stacked_r0  = ((unsigned long) hardfault_args[0]);
 8002a12:	6016      	str	r6, [r2, #0]
	stacked_r2  = ((unsigned long) hardfault_args[2]);
 8002a14:	f8df b158 	ldr.w	fp, [pc, #344]	; 8002b70 <HardFault_Handler_C+0x188>
	stacked_r1  = ((unsigned long) hardfault_args[1]);
 8002a18:	6842      	ldr	r2, [r0, #4]
 8002a1a:	601a      	str	r2, [r3, #0]
	stacked_r2  = ((unsigned long) hardfault_args[2]);
 8002a1c:	6883      	ldr	r3, [r0, #8]
 8002a1e:	f8cb 3000 	str.w	r3, [fp]
	stacked_r3  = ((unsigned long) hardfault_args[3]);
 8002a22:	68c3      	ldr	r3, [r0, #12]
 8002a24:	f8ca 3000 	str.w	r3, [sl]
	stacked_r12 = ((unsigned long) hardfault_args[4]);
 8002a28:	6903      	ldr	r3, [r0, #16]
 8002a2a:	f8c9 3000 	str.w	r3, [r9]
	stacked_pc  = ((unsigned long) hardfault_args[6]);
	stacked_psr = ((unsigned long) hardfault_args[7]);
 8002a2e:	e9d0 c206 	ldrd	ip, r2, [r0, #24]
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 8002a32:	6943      	ldr	r3, [r0, #20]
	stacked_pc  = ((unsigned long) hardfault_args[6]);
 8002a34:	4f36      	ldr	r7, [pc, #216]	; (8002b10 <HardFault_Handler_C+0x128>)
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 8002a36:	f8c8 3000 	str.w	r3, [r8]
	stacked_psr = ((unsigned long) hardfault_args[7]);
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <HardFault_Handler_C+0x12c>)

	/* Need to enable ITM/SWD on CubeIDE and MDK-ARM to observer printf() statements */
	printf ("[HardFault]\n");
 8002a3c:	4836      	ldr	r0, [pc, #216]	; (8002b18 <HardFault_Handler_C+0x130>)
	stacked_pc  = ((unsigned long) hardfault_args[6]);
 8002a3e:	f8c7 c000 	str.w	ip, [r7]
	stacked_psr = ((unsigned long) hardfault_args[7]);
 8002a42:	601a      	str	r2, [r3, #0]
{
 8002a44:	460e      	mov	r6, r1
	printf ("[HardFault]\n");
 8002a46:	f008 fd3b 	bl	800b4c0 <puts>
	printf ("- Stack frame:\n");
 8002a4a:	4834      	ldr	r0, [pc, #208]	; (8002b1c <HardFault_Handler_C+0x134>)
 8002a4c:	f008 fd38 	bl	800b4c0 <puts>
	printf (" R0  = %lx\n", stacked_r0);
 8002a50:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <HardFault_Handler_C+0x120>)
 8002a52:	4833      	ldr	r0, [pc, #204]	; (8002b20 <HardFault_Handler_C+0x138>)
 8002a54:	6811      	ldr	r1, [r2, #0]
 8002a56:	f008 fcad 	bl	800b3b4 <iprintf>
	printf (" R1  = %lx\n", stacked_r1);
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <HardFault_Handler_C+0x124>)
 8002a5c:	4831      	ldr	r0, [pc, #196]	; (8002b24 <HardFault_Handler_C+0x13c>)
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	f008 fca8 	bl	800b3b4 <iprintf>
	printf (" R2  = %lx\n", stacked_r2);
 8002a64:	f8db 1000 	ldr.w	r1, [fp]
 8002a68:	482f      	ldr	r0, [pc, #188]	; (8002b28 <HardFault_Handler_C+0x140>)
 8002a6a:	f008 fca3 	bl	800b3b4 <iprintf>
	printf (" R3  = %lx\n", stacked_r3);
 8002a6e:	f8da 1000 	ldr.w	r1, [sl]
 8002a72:	482e      	ldr	r0, [pc, #184]	; (8002b2c <HardFault_Handler_C+0x144>)
 8002a74:	f008 fc9e 	bl	800b3b4 <iprintf>
	printf (" R12 = %lx\n", stacked_r12);
 8002a78:	f8d9 1000 	ldr.w	r1, [r9]
 8002a7c:	482c      	ldr	r0, [pc, #176]	; (8002b30 <HardFault_Handler_C+0x148>)
 8002a7e:	f008 fc99 	bl	800b3b4 <iprintf>
	printf (" LR  = %lx\n", stacked_lr);
 8002a82:	f8d8 1000 	ldr.w	r1, [r8]
 8002a86:	482b      	ldr	r0, [pc, #172]	; (8002b34 <HardFault_Handler_C+0x14c>)
 8002a88:	f008 fc94 	bl	800b3b4 <iprintf>
	printf (" PC  = %lx\n", stacked_pc);
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	482a      	ldr	r0, [pc, #168]	; (8002b38 <HardFault_Handler_C+0x150>)
 8002a90:	f008 fc90 	bl	800b3b4 <iprintf>
	printf (" PSR = %lx\n", stacked_psr);
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <HardFault_Handler_C+0x12c>)
 8002a96:	4829      	ldr	r0, [pc, #164]	; (8002b3c <HardFault_Handler_C+0x154>)
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	f008 fc8b 	bl	800b3b4 <iprintf>
	printf ("- FSR/FAR:\n");
 8002a9e:	4828      	ldr	r0, [pc, #160]	; (8002b40 <HardFault_Handler_C+0x158>)
 8002aa0:	f008 fd0e 	bl	800b4c0 <puts>
	printf (" CFSR = %lx\n", cfsr);
 8002aa4:	6829      	ldr	r1, [r5, #0]
 8002aa6:	4827      	ldr	r0, [pc, #156]	; (8002b44 <HardFault_Handler_C+0x15c>)
 8002aa8:	f008 fc84 	bl	800b3b4 <iprintf>
	printf (" HFSR = 0x%08X\n", (unsigned int)(SCB->HFSR));
 8002aac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002aae:	4826      	ldr	r0, [pc, #152]	; (8002b48 <HardFault_Handler_C+0x160>)
 8002ab0:	f008 fc80 	bl	800b3b4 <iprintf>
	printf (" DFSR = 0x%08X\n", (unsigned int)(SCB->DFSR));
 8002ab4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002ab6:	4825      	ldr	r0, [pc, #148]	; (8002b4c <HardFault_Handler_C+0x164>)
 8002ab8:	f008 fc7c 	bl	800b3b4 <iprintf>
	printf (" AFSR = 0x%08X\n", (unsigned int)(SCB->AFSR));
 8002abc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002abe:	4824      	ldr	r0, [pc, #144]	; (8002b50 <HardFault_Handler_C+0x168>)
 8002ac0:	f008 fc78 	bl	800b3b4 <iprintf>
	if (cfsr & 0x0080) printf (" MMFAR = %lx\n", memmanage_fault_address);
 8002ac4:	682b      	ldr	r3, [r5, #0]
 8002ac6:	061a      	lsls	r2, r3, #24
 8002ac8:	d409      	bmi.n	8002ade <HardFault_Handler_C+0xf6>
	if (cfsr & 0x8000) printf (" BFAR = %lx\n", bus_fault_address);
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	d40e      	bmi.n	8002aec <HardFault_Handler_C+0x104>
	printf ("- Misc\n");
 8002ace:	4821      	ldr	r0, [pc, #132]	; (8002b54 <HardFault_Handler_C+0x16c>)
 8002ad0:	f008 fcf6 	bl	800b4c0 <puts>
	printf (" LR/EXC_RETURN= %x\n", lr_value);
 8002ad4:	4820      	ldr	r0, [pc, #128]	; (8002b58 <HardFault_Handler_C+0x170>)
 8002ad6:	4631      	mov	r1, r6
 8002ad8:	f008 fc6c 	bl	800b3b4 <iprintf>

	/* Infinite loop - halt program/software */
	while(1);
 8002adc:	e7fe      	b.n	8002adc <HardFault_Handler_C+0xf4>
	if (cfsr & 0x0080) printf (" MMFAR = %lx\n", memmanage_fault_address);
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HardFault_Handler_C+0x11c>)
 8002ae0:	481e      	ldr	r0, [pc, #120]	; (8002b5c <HardFault_Handler_C+0x174>)
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	f008 fc66 	bl	800b3b4 <iprintf>
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	e7ee      	b.n	8002aca <HardFault_Handler_C+0xe2>
	if (cfsr & 0x8000) printf (" BFAR = %lx\n", bus_fault_address);
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HardFault_Handler_C+0x114>)
 8002aee:	481c      	ldr	r0, [pc, #112]	; (8002b60 <HardFault_Handler_C+0x178>)
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	f008 fc5f 	bl	800b3b4 <iprintf>
 8002af6:	e7ea      	b.n	8002ace <HardFault_Handler_C+0xe6>
 8002af8:	e000ed00 	.word	0xe000ed00
 8002afc:	20009b44 	.word	0x20009b44
 8002b00:	20009b68 	.word	0x20009b68
 8002b04:	20009b40 	.word	0x20009b40
 8002b08:	20009b58 	.word	0x20009b58
 8002b0c:	20009b48 	.word	0x20009b48
 8002b10:	20009b54 	.word	0x20009b54
 8002b14:	20009b60 	.word	0x20009b60
 8002b18:	0800c5ec 	.word	0x0800c5ec
 8002b1c:	0800c5f8 	.word	0x0800c5f8
 8002b20:	0800c608 	.word	0x0800c608
 8002b24:	0800c614 	.word	0x0800c614
 8002b28:	0800c620 	.word	0x0800c620
 8002b2c:	0800c62c 	.word	0x0800c62c
 8002b30:	0800c638 	.word	0x0800c638
 8002b34:	0800c644 	.word	0x0800c644
 8002b38:	0800c650 	.word	0x0800c650
 8002b3c:	0800c65c 	.word	0x0800c65c
 8002b40:	0800c668 	.word	0x0800c668
 8002b44:	0800c674 	.word	0x0800c674
 8002b48:	0800c684 	.word	0x0800c684
 8002b4c:	0800c694 	.word	0x0800c694
 8002b50:	0800c6a4 	.word	0x0800c6a4
 8002b54:	0800c6d4 	.word	0x0800c6d4
 8002b58:	0800c6dc 	.word	0x0800c6dc
 8002b5c:	0800c6b4 	.word	0x0800c6b4
 8002b60:	0800c6c4 	.word	0x0800c6c4
 8002b64:	20009b4c 	.word	0x20009b4c
 8002b68:	20009b5c 	.word	0x20009b5c
 8002b6c:	20009b50 	.word	0x20009b50
 8002b70:	20009b64 	.word	0x20009b64

08002b74 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <MemManage_Handler>
 8002b76:	bf00      	nop

08002b78 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <BusFault_Handler>
 8002b7a:	bf00      	nop

08002b7c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b7c:	e7fe      	b.n	8002b7c <UsageFault_Handler>
 8002b7e:	bf00      	nop

08002b80 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop

08002b84 <EXTI0_IRQHandler>:
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002b84:	4801      	ldr	r0, [pc, #4]	; (8002b8c <EXTI0_IRQHandler+0x8>)
 8002b86:	f001 b831 	b.w	8003bec <HAL_EXTI_IRQHandler>
 8002b8a:	bf00      	nop
 8002b8c:	200098f8 	.word	0x200098f8

08002b90 <EXTI4_IRQHandler>:
/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
  HAL_EXTI_IRQHandler(GPIO_PIN_4);
 8002b90:	2010      	movs	r0, #16
 8002b92:	f001 b82b 	b.w	8003bec <HAL_EXTI_IRQHandler>
 8002b96:	bf00      	nop

08002b98 <TIM1_BRK_TIM9_IRQHandler>:
/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim9);
 8002b98:	4801      	ldr	r0, [pc, #4]	; (8002ba0 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 8002b9a:	f004 bd17 	b.w	80075cc <HAL_TIM_IRQHandler>
 8002b9e:	bf00      	nop
 8002ba0:	20009c44 	.word	0x20009c44

08002ba4 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim2);
 8002ba4:	4801      	ldr	r0, [pc, #4]	; (8002bac <TIM2_IRQHandler+0x8>)
 8002ba6:	f004 bd11 	b.w	80075cc <HAL_TIM_IRQHandler>
 8002baa:	bf00      	nop
 8002bac:	20009af8 	.word	0x20009af8

08002bb0 <I2C1_EV_IRQHandler>:
/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002bb0:	4801      	ldr	r0, [pc, #4]	; (8002bb8 <I2C1_EV_IRQHandler+0x8>)
 8002bb2:	f002 bb6f 	b.w	8005294 <HAL_I2C_EV_IRQHandler>
 8002bb6:	bf00      	nop
 8002bb8:	20009aa4 	.word	0x20009aa4

08002bbc <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002bbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002bc0:	f001 ba72 	b.w	80040a8 <HAL_GPIO_EXTI_IRQHandler>

08002bc4 <TIM5_IRQHandler>:
/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim5);
 8002bc4:	4801      	ldr	r0, [pc, #4]	; (8002bcc <TIM5_IRQHandler+0x8>)
 8002bc6:	f004 bd01 	b.w	80075cc <HAL_TIM_IRQHandler>
 8002bca:	bf00      	nop
 8002bcc:	20009b6c 	.word	0x20009b6c

08002bd0 <DMA2_Stream0_IRQHandler>:
/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bd0:	4801      	ldr	r0, [pc, #4]	; (8002bd8 <DMA2_Stream0_IRQHandler+0x8>)
 8002bd2:	f000 beef 	b.w	80039b4 <HAL_DMA_IRQHandler>
 8002bd6:	bf00      	nop
 8002bd8:	20009948 	.word	0x20009948

08002bdc <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)
 8002bdc:	6803      	ldr	r3, [r0, #0]
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d000      	beq.n	8002be6 <HAL_TIM_PeriodElapsedCallback+0xa>
	}
	else if(htim->Instance == TIM9)
	{

	}
}
 8002be4:	4770      	bx	lr
		HAL_IncTick();
 8002be6:	f000 ba6f 	b.w	80030c8 <HAL_IncTick>
 8002bea:	bf00      	nop

08002bec <HAL_GPIO_EXTI_Callback>:
 * @note   This function is called after end of interrupt execution/processing
 * @param  GPIO_Pin: GPIO pin that registered the rising edge/falling edge signal
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == NUCLEO_PB_Pin)
 8002bec:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002bf0:	d000      	beq.n	8002bf4 <HAL_GPIO_EXTI_Callback+0x8>
 8002bf2:	4770      	bx	lr
{
 8002bf4:	b500      	push	{lr}
	{
		/* 10ms debounce button */
		HAL_Delay(10);
 8002bf6:	200a      	movs	r0, #10
{
 8002bf8:	b085      	sub	sp, #20
		HAL_Delay(10);
 8002bfa:	f000 fa77 	bl	80030ec <HAL_Delay>
		/* This value becomes pdTRUE if giving the notification caused a task to unblock, and the unblocked task has a
		   higher priority than the currently running task, in which a context switch should occur */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;

		/* Notifies task that the push button was pressed on the microcontroller */
		xTaskNotifyFromISR(h_TaskPBProcessing, FRTOS_TASK_NOTIF_PB_PRESSED, eSetBits, &xHigherPriorityTaskWoken);
 8002bfe:	480b      	ldr	r0, [pc, #44]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x40>)
 8002c00:	a903      	add	r1, sp, #12
 8002c02:	2201      	movs	r2, #1
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002c04:	2300      	movs	r3, #0
		xTaskNotifyFromISR(h_TaskPBProcessing, FRTOS_TASK_NOTIF_PB_PRESSED, eSetBits, &xHigherPriorityTaskWoken);
 8002c06:	6800      	ldr	r0, [r0, #0]
 8002c08:	9100      	str	r1, [sp, #0]
 8002c0a:	4611      	mov	r1, r2
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002c0c:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskPBProcessing, FRTOS_TASK_NOTIF_PB_PRESSED, eSetBits, &xHigherPriorityTaskWoken);
 8002c0e:	f007 fd81 	bl	800a714 <xTaskGenericNotifyFromISR>

		/* Force context switch if xHigherPriorityTaskWoken == pdTRUE. This does nothing if xHigherPriorityTaskWoken
		   is pdFALSE */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002c12:	9b03      	ldr	r3, [sp, #12]
 8002c14:	b13b      	cbz	r3, 8002c26 <HAL_GPIO_EXTI_Callback+0x3a>
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_GPIO_EXTI_Callback+0x44>)
 8002c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	f3bf 8f6f 	isb	sy

		/* Force context switch if xHigherPriorityTaskWoken == pdTRUE. This does nothing if xHigherPriorityTaskWoken
		   is pdFALSE */
		// portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 8002c26:	b005      	add	sp, #20
 8002c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c2c:	20009a2c 	.word	0x20009a2c
 8002c30:	e000ed04 	.word	0xe000ed04

08002c34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c34:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c36:	1e16      	subs	r6, r2, #0
 8002c38:	dd07      	ble.n	8002c4a <_read+0x16>
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8002c3e:	f3af 8000 	nop.w
 8002c42:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c46:	42a5      	cmp	r5, r4
 8002c48:	d1f9      	bne.n	8002c3e <_read+0xa>
	}

return len;
}
 8002c4a:	4630      	mov	r0, r6
 8002c4c:	bd70      	pop	{r4, r5, r6, pc}
 8002c4e:	bf00      	nop

08002c50 <_close>:
}

int _close(int file)
{
	return -1;
}
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop

08002c58 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c5c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002c5e:	2000      	movs	r0, #0
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002c64:	2001      	movs	r0, #1
 8002c66:	4770      	bx	lr

08002c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002c68:	2000      	movs	r0, #0
 8002c6a:	4770      	bx	lr

08002c6c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002c70:	680b      	ldr	r3, [r1, #0]
{
 8002c72:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c74:	4c0c      	ldr	r4, [pc, #48]	; (8002ca8 <_sbrk+0x3c>)
 8002c76:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002c78:	b12b      	cbz	r3, 8002c86 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7a:	4418      	add	r0, r3
 8002c7c:	4290      	cmp	r0, r2
 8002c7e:	d807      	bhi.n	8002c90 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002c80:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <_sbrk+0x40>)
 8002c88:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002c8a:	4418      	add	r0, r3
 8002c8c:	4290      	cmp	r0, r2
 8002c8e:	d9f7      	bls.n	8002c80 <_sbrk+0x14>
    errno = ENOMEM;
 8002c90:	f008 fb50 	bl	800b334 <__errno>
 8002c94:	230c      	movs	r3, #12
 8002c96:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	bd10      	pop	{r4, pc}
 8002ca0:	20000224 	.word	0x20000224
 8002ca4:	20020000 	.word	0x20020000
 8002ca8:	00001f00 	.word	0x00001f00
 8002cac:	20009d10 	.word	0x20009d10

08002cb0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb0:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <SystemInit+0x10>)
 8002cb2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM9_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cc4:	b500      	push	{lr}
	if(tim_baseHandle->Instance==TIM1)
 8002cc6:	4a2c      	ldr	r2, [pc, #176]	; (8002d78 <HAL_TIM_Base_MspInit+0xb4>)
 8002cc8:	6803      	ldr	r3, [r0, #0]
 8002cca:	4293      	cmp	r3, r2
{
 8002ccc:	b085      	sub	sp, #20
	if(tim_baseHandle->Instance==TIM1)
 8002cce:	d01a      	beq.n	8002d06 <HAL_TIM_Base_MspInit+0x42>
		__HAL_RCC_TIM1_CLK_ENABLE();
		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}
	else if(tim_baseHandle->Instance==TIM3)
 8002cd0:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <HAL_TIM_Base_MspInit+0xb8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d008      	beq.n	8002ce8 <HAL_TIM_Base_MspInit+0x24>
		__HAL_RCC_TIM3_CLK_ENABLE();
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
	else if(tim_baseHandle->Instance==TIM5)
 8002cd6:	4a2a      	ldr	r2, [pc, #168]	; (8002d80 <HAL_TIM_Base_MspInit+0xbc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d023      	beq.n	8002d24 <HAL_TIM_Base_MspInit+0x60>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
		/* USER CODE BEGIN TIM5_MspInit 1 */

		/* USER CODE END TIM5_MspInit 1 */
	}
	else if(tim_baseHandle->Instance==TIM9)
 8002cdc:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_TIM_Base_MspInit+0xc0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d037      	beq.n	8002d52 <HAL_TIM_Base_MspInit+0x8e>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
		/* USER CODE BEGIN TIM9_MspInit 1 */

		/* USER CODE END TIM9_MspInit 1 */
	}
}
 8002ce2:	b005      	add	sp, #20
 8002ce4:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002ce8:	4b27      	ldr	r3, [pc, #156]	; (8002d88 <HAL_TIM_Base_MspInit+0xc4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	9201      	str	r2, [sp, #4]
 8002cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf0:	f042 0202 	orr.w	r2, r2, #2
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	9b01      	ldr	r3, [sp, #4]
}
 8002d00:	b005      	add	sp, #20
 8002d02:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM1_CLK_ENABLE();
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_TIM_Base_MspInit+0xc4>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	9200      	str	r2, [sp, #0]
 8002d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	645a      	str	r2, [r3, #68]	; 0x44
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	9b00      	ldr	r3, [sp, #0]
}
 8002d1e:	b005      	add	sp, #20
 8002d20:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM5_CLK_ENABLE();
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <HAL_TIM_Base_MspInit+0xc4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	9202      	str	r2, [sp, #8]
 8002d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2c:	f042 0208 	orr.w	r2, r2, #8
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	9302      	str	r3, [sp, #8]
		HAL_NVIC_SetPriority(TIM5_IRQn, 7, 1);
 8002d3a:	2032      	movs	r0, #50	; 0x32
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	2107      	movs	r1, #7
		__HAL_RCC_TIM5_CLK_ENABLE();
 8002d40:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(TIM5_IRQn, 7, 1);
 8002d42:	f000 fc49 	bl	80035d8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d46:	2032      	movs	r0, #50	; 0x32
}
 8002d48:	b005      	add	sp, #20
 8002d4a:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002d4e:	f000 bc8d 	b.w	800366c <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM9_CLK_ENABLE();
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <HAL_TIM_Base_MspInit+0xc4>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	9203      	str	r2, [sp, #12]
 8002d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	9303      	str	r3, [sp, #12]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 2);
 8002d68:	2018      	movs	r0, #24
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	2107      	movs	r1, #7
		__HAL_RCC_TIM9_CLK_ENABLE();
 8002d6e:	9b03      	ldr	r3, [sp, #12]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 2);
 8002d70:	f000 fc32 	bl	80035d8 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002d74:	2018      	movs	r0, #24
 8002d76:	e7e7      	b.n	8002d48 <HAL_TIM_Base_MspInit+0x84>
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40014000 	.word	0x40014000
 8002d88:	40023800 	.word	0x40023800

08002d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d8c:	b570      	push	{r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
	if(timHandle->Instance==TIM1)
 8002d8e:	6802      	ldr	r2, [r0, #0]
 8002d90:	492d      	ldr	r1, [pc, #180]	; (8002e48 <HAL_TIM_MspPostInit+0xbc>)
{
 8002d92:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	2300      	movs	r3, #0
	if(timHandle->Instance==TIM1)
 8002d96:	428a      	cmp	r2, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002d9c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002da0:	9308      	str	r3, [sp, #32]
	if(timHandle->Instance==TIM1)
 8002da2:	d004      	beq.n	8002dae <HAL_TIM_MspPostInit+0x22>

		/* USER CODE BEGIN TIM1_MspPostInit 1 */

		/* USER CODE END TIM1_MspPostInit 1 */
	}
	else if(timHandle->Instance==TIM3)
 8002da4:	4929      	ldr	r1, [pc, #164]	; (8002e4c <HAL_TIM_MspPostInit+0xc0>)
 8002da6:	428a      	cmp	r2, r1
 8002da8:	d01d      	beq.n	8002de6 <HAL_TIM_MspPostInit+0x5a>
		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}

}
 8002daa:	b00a      	add	sp, #40	; 0x28
 8002dac:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	4a28      	ldr	r2, [pc, #160]	; (8002e50 <HAL_TIM_MspPostInit+0xc4>)
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	6b13      	ldr	r3, [r2, #48]	; 0x30
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	4827      	ldr	r0, [pc, #156]	; (8002e54 <HAL_TIM_MspPostInit+0xc8>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dc4:	2301      	movs	r3, #1
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	9a01      	ldr	r2, [sp, #4]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dc8:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	a904      	add	r1, sp, #16
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002dd0:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8002dd4:	2502      	movs	r5, #2
 8002dd6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002dda:	e9cd 2306 	strd	r2, r3, [sp, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	f000 ff1b 	bl	8003c18 <HAL_GPIO_Init>
}
 8002de2:	b00a      	add	sp, #40	; 0x28
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002de6:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <HAL_TIM_MspPostInit+0xc4>)
 8002de8:	9302      	str	r3, [sp, #8]
 8002dea:	6b11      	ldr	r1, [r2, #48]	; 0x30
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dec:	481a      	ldr	r0, [pc, #104]	; (8002e58 <HAL_TIM_MspPostInit+0xcc>)
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002dee:	f041 0104 	orr.w	r1, r1, #4
 8002df2:	6311      	str	r1, [r2, #48]	; 0x30
 8002df4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002df6:	f001 0104 	and.w	r1, r1, #4
 8002dfa:	9102      	str	r1, [sp, #8]
 8002dfc:	9902      	ldr	r1, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	9303      	str	r3, [sp, #12]
 8002e00:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002e02:	f043 0302 	orr.w	r3, r3, #2
 8002e06:	6313      	str	r3, [r2, #48]	; 0x30
 8002e08:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	9303      	str	r3, [sp, #12]
 8002e10:	9903      	ldr	r1, [sp, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	2302      	movs	r3, #2
 8002e16:	2400      	movs	r4, #0
 8002e18:	2500      	movs	r5, #0
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e1a:	2602      	movs	r6, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e1c:	a904      	add	r1, sp, #16
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e22:	e9cd 4506 	strd	r4, r5, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e26:	9608      	str	r6, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e28:	f000 fef6 	bl	8003c18 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e30:	480a      	ldr	r0, [pc, #40]	; (8002e5c <HAL_TIM_MspPostInit+0xd0>)
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e32:	9608      	str	r6, [sp, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e34:	a904      	add	r1, sp, #16
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002e3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3e:	f000 feeb 	bl	8003c18 <HAL_GPIO_Init>
}
 8002e42:	b00a      	add	sp, #40	; 0x28
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
 8002e46:	bf00      	nop
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40020000 	.word	0x40020000
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020400 	.word	0x40020400

08002e60 <MX_TIM1_Init>:
{
 8002e60:	b570      	push	{r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e62:	2400      	movs	r4, #0
{
 8002e64:	b096      	sub	sp, #88	; 0x58
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e66:	4621      	mov	r1, r4
 8002e68:	2220      	movs	r2, #32
 8002e6a:	a80e      	add	r0, sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e6c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002e70:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e74:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002e78:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002e7c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e80:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e82:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e84:	9401      	str	r4, [sp, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e86:	f008 fa8d 	bl	800b3a4 <memset>
  htim1.Instance = TIM1;
 8002e8a:	4838      	ldr	r0, [pc, #224]	; (8002f6c <MX_TIM1_Init+0x10c>)
 8002e8c:	4938      	ldr	r1, [pc, #224]	; (8002f70 <MX_TIM1_Init+0x110>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8e:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 9;
 8002e90:	2209      	movs	r2, #9
  htim1.Init.Period = 999;
 8002e92:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Init.RepetitionCounter = 0;
 8002e96:	e9c0 4404 	strd	r4, r4, [r0, #16]
  htim1.Init.Prescaler = 9;
 8002e9a:	e9c0 1200 	strd	r1, r2, [r0]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e9e:	6184      	str	r4, [r0, #24]
  htim1.Init.Period = 999;
 8002ea0:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ea2:	f003 fe4f 	bl	8006b44 <HAL_TIM_Base_Init>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d146      	bne.n	8002f38 <MX_TIM1_Init+0xd8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002eae:	482f      	ldr	r0, [pc, #188]	; (8002f6c <MX_TIM1_Init+0x10c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eb0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002eb2:	a902      	add	r1, sp, #8
 8002eb4:	f004 f950 	bl	8007158 <HAL_TIM_ConfigClockSource>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	d153      	bne.n	8002f64 <MX_TIM1_Init+0x104>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ebc:	482b      	ldr	r0, [pc, #172]	; (8002f6c <MX_TIM1_Init+0x10c>)
 8002ebe:	f003 ff75 	bl	8006dac <HAL_TIM_PWM_Init>
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d14b      	bne.n	8002f5e <MX_TIM1_Init+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002eca:	4828      	ldr	r0, [pc, #160]	; (8002f6c <MX_TIM1_Init+0x10c>)
 8002ecc:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ece:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ed2:	f004 fdd7 	bl	8007a84 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d13e      	bne.n	8002f58 <MX_TIM1_Init+0xf8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eda:	2060      	movs	r0, #96	; 0x60
 8002edc:	2100      	movs	r1, #0
 8002ede:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002eea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002eee:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ef0:	481e      	ldr	r0, [pc, #120]	; (8002f6c <MX_TIM1_Init+0x10c>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ef2:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	a906      	add	r1, sp, #24
 8002ef8:	f004 fc66 	bl	80077c8 <HAL_TIM_PWM_ConfigChannel>
 8002efc:	bb48      	cbnz	r0, 8002f52 <MX_TIM1_Init+0xf2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002efe:	481b      	ldr	r0, [pc, #108]	; (8002f6c <MX_TIM1_Init+0x10c>)
 8002f00:	a906      	add	r1, sp, #24
 8002f02:	2208      	movs	r2, #8
 8002f04:	f004 fc60 	bl	80077c8 <HAL_TIM_PWM_ConfigChannel>
 8002f08:	bb00      	cbnz	r0, 8002f4c <MX_TIM1_Init+0xec>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2400      	movs	r4, #0
 8002f10:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f14:	2600      	movs	r6, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f16:	4815      	ldr	r0, [pc, #84]	; (8002f6c <MX_TIM1_Init+0x10c>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f18:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f1a:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002f20:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002f24:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f28:	f004 fe18 	bl	8007b5c <HAL_TIMEx_ConfigBreakDeadTime>
 8002f2c:	b938      	cbnz	r0, 8002f3e <MX_TIM1_Init+0xde>
  HAL_TIM_MspPostInit(&htim1);
 8002f2e:	480f      	ldr	r0, [pc, #60]	; (8002f6c <MX_TIM1_Init+0x10c>)
 8002f30:	f7ff ff2c 	bl	8002d8c <HAL_TIM_MspPostInit>
}
 8002f34:	b016      	add	sp, #88	; 0x58
 8002f36:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002f38:	f7ff fcde 	bl	80028f8 <Error_Handler>
 8002f3c:	e7b5      	b.n	8002eaa <MX_TIM1_Init+0x4a>
    Error_Handler();
 8002f3e:	f7ff fcdb 	bl	80028f8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002f42:	480a      	ldr	r0, [pc, #40]	; (8002f6c <MX_TIM1_Init+0x10c>)
 8002f44:	f7ff ff22 	bl	8002d8c <HAL_TIM_MspPostInit>
}
 8002f48:	b016      	add	sp, #88	; 0x58
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002f4c:	f7ff fcd4 	bl	80028f8 <Error_Handler>
 8002f50:	e7db      	b.n	8002f0a <MX_TIM1_Init+0xaa>
    Error_Handler();
 8002f52:	f7ff fcd1 	bl	80028f8 <Error_Handler>
 8002f56:	e7d2      	b.n	8002efe <MX_TIM1_Init+0x9e>
    Error_Handler();
 8002f58:	f7ff fcce 	bl	80028f8 <Error_Handler>
 8002f5c:	e7bd      	b.n	8002eda <MX_TIM1_Init+0x7a>
    Error_Handler();
 8002f5e:	f7ff fccb 	bl	80028f8 <Error_Handler>
 8002f62:	e7b0      	b.n	8002ec6 <MX_TIM1_Init+0x66>
    Error_Handler();
 8002f64:	f7ff fcc8 	bl	80028f8 <Error_Handler>
 8002f68:	e7a8      	b.n	8002ebc <MX_TIM1_Init+0x5c>
 8002f6a:	bf00      	nop
 8002f6c:	20009bfc 	.word	0x20009bfc
 8002f70:	40010000 	.word	0x40010000

08002f74 <MX_TIM3_Init>:
{
 8002f74:	b530      	push	{r4, r5, lr}
  htim3.Instance = TIM3;
 8002f76:	4830      	ldr	r0, [pc, #192]	; (8003038 <MX_TIM3_Init+0xc4>)
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <MX_TIM3_Init+0xc8>)
 8002f7a:	6003      	str	r3, [r0, #0]
{
 8002f7c:	b08f      	sub	sp, #60	; 0x3c
  htim3.Init.Period = 999;
 8002f7e:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim3.Init.Prescaler = 9;
 8002f82:	2209      	movs	r2, #9
  htim3.Init.Period = 999;
 8002f84:	60c3      	str	r3, [r0, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f86:	2300      	movs	r3, #0
 8002f88:	e9cd 3303 	strd	r3, r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002f90:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8002f94:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  htim3.Init.Prescaler = 9;
 8002f98:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9a:	6083      	str	r3, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f9c:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9e:	9300      	str	r3, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fa0:	9306      	str	r3, [sp, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa2:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa4:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa6:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa8:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002faa:	f003 fdcb 	bl	8006b44 <HAL_TIM_Base_Init>
 8002fae:	bb60      	cbnz	r0, 800300a <MX_TIM3_Init+0x96>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fb4:	4820      	ldr	r0, [pc, #128]	; (8003038 <MX_TIM3_Init+0xc4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fb8:	a902      	add	r1, sp, #8
 8002fba:	f004 f8cd 	bl	8007158 <HAL_TIM_ConfigClockSource>
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	d136      	bne.n	8003030 <MX_TIM3_Init+0xbc>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fc2:	481d      	ldr	r0, [pc, #116]	; (8003038 <MX_TIM3_Init+0xc4>)
 8002fc4:	f003 fef2 	bl	8006dac <HAL_TIM_PWM_Init>
 8002fc8:	bb78      	cbnz	r0, 800302a <MX_TIM3_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fce:	481a      	ldr	r0, [pc, #104]	; (8003038 <MX_TIM3_Init+0xc4>)
 8002fd0:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd2:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fd6:	f004 fd55 	bl	8007a84 <HAL_TIMEx_MasterConfigSynchronization>
 8002fda:	bb18      	cbnz	r0, 8003024 <MX_TIM3_Init+0xb0>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fdc:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fde:	2460      	movs	r4, #96	; 0x60
 8002fe0:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fe2:	4815      	ldr	r0, [pc, #84]	; (8003038 <MX_TIM3_Init+0xc4>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fe4:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fe6:	a906      	add	r1, sp, #24
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fe8:	e9cd 4506 	strd	r4, r5, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fec:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fee:	f004 fbeb 	bl	80077c8 <HAL_TIM_PWM_ConfigChannel>
 8002ff2:	b9a0      	cbnz	r0, 800301e <MX_TIM3_Init+0xaa>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ff4:	4810      	ldr	r0, [pc, #64]	; (8003038 <MX_TIM3_Init+0xc4>)
 8002ff6:	a906      	add	r1, sp, #24
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	f004 fbe5 	bl	80077c8 <HAL_TIM_PWM_ConfigChannel>
 8002ffe:	b938      	cbnz	r0, 8003010 <MX_TIM3_Init+0x9c>
  HAL_TIM_MspPostInit(&htim3);
 8003000:	480d      	ldr	r0, [pc, #52]	; (8003038 <MX_TIM3_Init+0xc4>)
 8003002:	f7ff fec3 	bl	8002d8c <HAL_TIM_MspPostInit>
}
 8003006:	b00f      	add	sp, #60	; 0x3c
 8003008:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800300a:	f7ff fc75 	bl	80028f8 <Error_Handler>
 800300e:	e7cf      	b.n	8002fb0 <MX_TIM3_Init+0x3c>
    Error_Handler();
 8003010:	f7ff fc72 	bl	80028f8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8003014:	4808      	ldr	r0, [pc, #32]	; (8003038 <MX_TIM3_Init+0xc4>)
 8003016:	f7ff feb9 	bl	8002d8c <HAL_TIM_MspPostInit>
}
 800301a:	b00f      	add	sp, #60	; 0x3c
 800301c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800301e:	f7ff fc6b 	bl	80028f8 <Error_Handler>
 8003022:	e7e7      	b.n	8002ff4 <MX_TIM3_Init+0x80>
    Error_Handler();
 8003024:	f7ff fc68 	bl	80028f8 <Error_Handler>
 8003028:	e7d8      	b.n	8002fdc <MX_TIM3_Init+0x68>
    Error_Handler();
 800302a:	f7ff fc65 	bl	80028f8 <Error_Handler>
 800302e:	e7cc      	b.n	8002fca <MX_TIM3_Init+0x56>
    Error_Handler();
 8003030:	f7ff fc62 	bl	80028f8 <Error_Handler>
 8003034:	e7c5      	b.n	8002fc2 <MX_TIM3_Init+0x4e>
 8003036:	bf00      	nop
 8003038:	20009bb4 	.word	0x20009bb4
 800303c:	40000400 	.word	0x40000400

08003040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8003040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003078 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003044:	480d      	ldr	r0, [pc, #52]	; (800307c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003046:	490e      	ldr	r1, [pc, #56]	; (8003080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003048:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800304c:	e002      	b.n	8003054 <LoopCopyDataInit>

0800304e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003052:	3304      	adds	r3, #4

08003054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003058:	d3f9      	bcc.n	800304e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305a:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800305c:	4c0b      	ldr	r4, [pc, #44]	; (800308c <LoopFillZerobss+0x26>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003060:	e001      	b.n	8003066 <LoopFillZerobss>

08003062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003064:	3204      	adds	r2, #4

08003066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003068:	d3fb      	bcc.n	8003062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800306a:	f7ff fe21 	bl	8002cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800306e:	f008 f967 	bl	800b340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003072:	f7ff fc11 	bl	8002898 <main>
  bx  lr    
 8003076:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8003078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800307c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003080:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003084:	0800cbf0 	.word	0x0800cbf0
  ldr r2, =_sbss
 8003088:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800308c:	20009d10 	.word	0x20009d10

08003090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003090:	e7fe      	b.n	8003090 <ADC_IRQHandler>
	...

08003094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003094:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_Init+0x30>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b0:	2003      	movs	r0, #3
 80030b2:	f000 fa73 	bl	800359c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7ff fc4a 	bl	8002950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030bc:	f7ff fc28 	bl	8002910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80030c0:	2000      	movs	r0, #0
 80030c2:	bd08      	pop	{r3, pc}
 80030c4:	40023c00 	.word	0x40023c00

080030c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030c8:	4a03      	ldr	r2, [pc, #12]	; (80030d8 <HAL_IncTick+0x10>)
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <HAL_IncTick+0x14>)
 80030cc:	6811      	ldr	r1, [r2, #0]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	440b      	add	r3, r1
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20009c8c 	.word	0x20009c8c
 80030dc:	20000034 	.word	0x20000034

080030e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80030e0:	4b01      	ldr	r3, [pc, #4]	; (80030e8 <HAL_GetTick+0x8>)
 80030e2:	6818      	ldr	r0, [r3, #0]
}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20009c8c 	.word	0x20009c8c

080030ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030ec:	b538      	push	{r3, r4, r5, lr}
 80030ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80030f0:	f7ff fff6 	bl	80030e0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80030f6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80030f8:	d002      	beq.n	8003100 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <HAL_Delay+0x20>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003100:	f7ff ffee 	bl	80030e0 <HAL_GetTick>
 8003104:	1b43      	subs	r3, r0, r5
 8003106:	42a3      	cmp	r3, r4
 8003108:	d3fa      	bcc.n	8003100 <HAL_Delay+0x14>
  {
  }
}
 800310a:	bd38      	pop	{r3, r4, r5, pc}
 800310c:	20000034 	.word	0x20000034

08003110 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003110:	2800      	cmp	r0, #0
 8003112:	f000 8140 	beq.w	8003396 <HAL_ADC_Init+0x286>
{
 8003116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003118:	6802      	ldr	r2, [r0, #0]
 800311a:	4ba7      	ldr	r3, [pc, #668]	; (80033b8 <HAL_ADC_Init+0x2a8>)
 800311c:	429a      	cmp	r2, r3
 800311e:	4604      	mov	r4, r0
 8003120:	d004      	beq.n	800312c <HAL_ADC_Init+0x1c>
 8003122:	48a6      	ldr	r0, [pc, #664]	; (80033bc <HAL_ADC_Init+0x2ac>)
 8003124:	f240 1143 	movw	r1, #323	; 0x143
 8003128:	f7ff fbe8 	bl	80028fc <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800312c:	6863      	ldr	r3, [r4, #4]
 800312e:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8003132:	d004      	beq.n	800313e <HAL_ADC_Init+0x2e>
 8003134:	48a1      	ldr	r0, [pc, #644]	; (80033bc <HAL_ADC_Init+0x2ac>)
 8003136:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800313a:	f7ff fbdf 	bl	80028fc <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800313e:	68a3      	ldr	r3, [r4, #8]
 8003140:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8003144:	d004      	beq.n	8003150 <HAL_ADC_Init+0x40>
 8003146:	489d      	ldr	r0, [pc, #628]	; (80033bc <HAL_ADC_Init+0x2ac>)
 8003148:	f240 1145 	movw	r1, #325	; 0x145
 800314c:	f7ff fbd6 	bl	80028fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8003150:	6923      	ldr	r3, [r4, #16]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d879      	bhi.n	800324a <HAL_ADC_Init+0x13a>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003156:	7e23      	ldrb	r3, [r4, #24]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d86a      	bhi.n	8003232 <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800315c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800315e:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 8003162:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003166:	d014      	beq.n	8003192 <HAL_ADC_Init+0x82>
 8003168:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800316c:	d011      	beq.n	8003192 <HAL_ADC_Init+0x82>
 800316e:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8003172:	d00e      	beq.n	8003192 <HAL_ADC_Init+0x82>
 8003174:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
 8003178:	d00b      	beq.n	8003192 <HAL_ADC_Init+0x82>
 800317a:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800317e:	d008      	beq.n	8003192 <HAL_ADC_Init+0x82>
 8003180:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 8003184:	2b01      	cmp	r3, #1
 8003186:	d904      	bls.n	8003192 <HAL_ADC_Init+0x82>
 8003188:	488c      	ldr	r0, [pc, #560]	; (80033bc <HAL_ADC_Init+0x2ac>)
 800318a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800318e:	f7ff fbb5 	bl	80028fc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003192:	68e3      	ldr	r3, [r4, #12]
 8003194:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8003198:	d122      	bne.n	80031e0 <HAL_ADC_Init+0xd0>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800319a:	69e3      	ldr	r3, [r4, #28]
 800319c:	3b01      	subs	r3, #1
 800319e:	2b0f      	cmp	r3, #15
 80031a0:	d827      	bhi.n	80031f2 <HAL_ADC_Init+0xe2>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80031a2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d82c      	bhi.n	8003204 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80031aa:	6963      	ldr	r3, [r4, #20]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d831      	bhi.n	8003214 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80031b0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d836      	bhi.n	8003226 <HAL_ADC_Init+0x116>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b8:	4b81      	ldr	r3, [pc, #516]	; (80033c0 <HAL_ADC_Init+0x2b0>)
 80031ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80031bc:	429a      	cmp	r2, r3
 80031be:	d004      	beq.n	80031ca <HAL_ADC_Init+0xba>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80031c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031c2:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80031c6:	f040 80d7 	bne.w	8003378 <HAL_ADC_Init+0x268>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031ca:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80031cc:	2d00      	cmp	r5, #0
 80031ce:	d045      	beq.n	800325c <HAL_ADC_Init+0x14c>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031d2:	06db      	lsls	r3, r3, #27
 80031d4:	d54b      	bpl.n	800326e <HAL_ADC_Init+0x15e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031d6:	2300      	movs	r3, #0
 80031d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 80031dc:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 80031de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80031e0:	4876      	ldr	r0, [pc, #472]	; (80033bc <HAL_ADC_Init+0x2ac>)
 80031e2:	f240 1149 	movw	r1, #329	; 0x149
 80031e6:	f7ff fb89 	bl	80028fc <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80031ea:	69e3      	ldr	r3, [r4, #28]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	d9d7      	bls.n	80031a2 <HAL_ADC_Init+0x92>
 80031f2:	4872      	ldr	r0, [pc, #456]	; (80033bc <HAL_ADC_Init+0x2ac>)
 80031f4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80031f8:	f7ff fb80 	bl	80028fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80031fc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003200:	2b01      	cmp	r3, #1
 8003202:	d9d2      	bls.n	80031aa <HAL_ADC_Init+0x9a>
 8003204:	486d      	ldr	r0, [pc, #436]	; (80033bc <HAL_ADC_Init+0x2ac>)
 8003206:	f240 114b 	movw	r1, #331	; 0x14b
 800320a:	f7ff fb77 	bl	80028fc <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800320e:	6963      	ldr	r3, [r4, #20]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d9cd      	bls.n	80031b0 <HAL_ADC_Init+0xa0>
 8003214:	4869      	ldr	r0, [pc, #420]	; (80033bc <HAL_ADC_Init+0x2ac>)
 8003216:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800321a:	f7ff fb6f 	bl	80028fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800321e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d9c8      	bls.n	80031b8 <HAL_ADC_Init+0xa8>
 8003226:	4865      	ldr	r0, [pc, #404]	; (80033bc <HAL_ADC_Init+0x2ac>)
 8003228:	f240 114d 	movw	r1, #333	; 0x14d
 800322c:	f7ff fb66 	bl	80028fc <assert_failed>
 8003230:	e7c2      	b.n	80031b8 <HAL_ADC_Init+0xa8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003232:	f240 1147 	movw	r1, #327	; 0x147
 8003236:	4861      	ldr	r0, [pc, #388]	; (80033bc <HAL_ADC_Init+0x2ac>)
 8003238:	f7ff fb60 	bl	80028fc <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800323c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800323e:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 8003242:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003246:	d0a4      	beq.n	8003192 <HAL_ADC_Init+0x82>
 8003248:	e78e      	b.n	8003168 <HAL_ADC_Init+0x58>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800324a:	485c      	ldr	r0, [pc, #368]	; (80033bc <HAL_ADC_Init+0x2ac>)
 800324c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003250:	f7ff fb54 	bl	80028fc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003254:	7e23      	ldrb	r3, [r4, #24]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d980      	bls.n	800315c <HAL_ADC_Init+0x4c>
 800325a:	e7ea      	b.n	8003232 <HAL_ADC_Init+0x122>
    HAL_ADC_MspInit(hadc);
 800325c:	4620      	mov	r0, r4
 800325e:	f7fe f9f1 	bl	8001644 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003262:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003264:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003266:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800326a:	06db      	lsls	r3, r3, #27
 800326c:	d4b3      	bmi.n	80031d6 <HAL_ADC_Init+0xc6>
    ADC_STATE_CLR_SET(hadc->State,
 800326e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003270:	4954      	ldr	r1, [pc, #336]	; (80033c4 <HAL_ADC_Init+0x2b4>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003272:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003274:	4d52      	ldr	r5, [pc, #328]	; (80033c0 <HAL_ADC_Init+0x2b0>)
    ADC_STATE_CLR_SET(hadc->State,
 8003276:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800327a:	f022 0202 	bic.w	r2, r2, #2
 800327e:	f042 0202 	orr.w	r2, r2, #2
 8003282:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003284:	684a      	ldr	r2, [r1, #4]
 8003286:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800328a:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800328c:	684a      	ldr	r2, [r1, #4]
 800328e:	6860      	ldr	r0, [r4, #4]
 8003290:	4302      	orrs	r2, r0
 8003292:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003294:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003296:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003298:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800329a:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800329c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80032a0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032aa:	6858      	ldr	r0, [r3, #4]
 80032ac:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80032b0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032b2:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032b6:	4339      	orrs	r1, r7
 80032b8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032ba:	6899      	ldr	r1, [r3, #8]
 80032bc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80032c0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032c2:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032c4:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032c6:	ea42 0206 	orr.w	r2, r2, r6
 80032ca:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032cc:	d05a      	beq.n	8003384 <HAL_ADC_Init+0x274>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032ce:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032d0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032d2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80032d6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	4310      	orrs	r0, r2
 80032dc:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032de:	6899      	ldr	r1, [r3, #8]
 80032e0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80032e4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	432a      	orrs	r2, r5
 80032ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	f022 0202 	bic.w	r2, r2, #2
 80032f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	7e21      	ldrb	r1, [r4, #24]
 80032f8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80032fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032fe:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003302:	2a00      	cmp	r2, #0
 8003304:	d049      	beq.n	800339a <HAL_ADC_Init+0x28a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003306:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003308:	3a01      	subs	r2, #1
 800330a:	2a07      	cmp	r2, #7
 800330c:	d84a      	bhi.n	80033a4 <HAL_ADC_Init+0x294>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003314:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800331c:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8003324:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003328:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800332a:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800332c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003330:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003332:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003334:	3801      	subs	r0, #1
 8003336:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 800333a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800333c:	6899      	ldr	r1, [r3, #8]
 800333e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003342:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003344:	6899      	ldr	r1, [r3, #8]
 8003346:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800334a:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 800334e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003350:	6899      	ldr	r1, [r3, #8]
 8003352:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003356:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003358:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800335a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800335c:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003360:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003362:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003364:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003366:	f023 0303 	bic.w	r3, r3, #3
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003370:	2300      	movs	r3, #0
 8003372:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003378:	4810      	ldr	r0, [pc, #64]	; (80033bc <HAL_ADC_Init+0x2ac>)
 800337a:	f240 1151 	movw	r1, #337	; 0x151
 800337e:	f7ff fabd 	bl	80028fc <assert_failed>
 8003382:	e722      	b.n	80031ca <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800338a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	e7aa      	b.n	80032ec <HAL_ADC_Init+0x1dc>
    return HAL_ERROR;
 8003396:	2001      	movs	r0, #1
}
 8003398:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	e7c0      	b.n	8003326 <HAL_ADC_Init+0x216>
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80033a4:	4805      	ldr	r0, [pc, #20]	; (80033bc <HAL_ADC_Init+0x2ac>)
 80033a6:	f240 71a6 	movw	r1, #1958	; 0x7a6
 80033aa:	f7ff faa7 	bl	80028fc <assert_failed>
 80033ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	3a01      	subs	r2, #1
 80033b4:	e7ab      	b.n	800330e <HAL_ADC_Init+0x1fe>
 80033b6:	bf00      	nop
 80033b8:	40012000 	.word	0x40012000
 80033bc:	0800c708 	.word	0x0800c708
 80033c0:	0f000001 	.word	0x0f000001
 80033c4:	40012300 	.word	0x40012300

080033c8 <HAL_ADC_ConfigChannel>:
{
 80033c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80033ca:	680b      	ldr	r3, [r1, #0]
{
 80033cc:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80033ce:	2200      	movs	r2, #0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80033d0:	2b12      	cmp	r3, #18
{
 80033d2:	460e      	mov	r6, r1
 80033d4:	4604      	mov	r4, r0
  __IO uint32_t counter = 0U;
 80033d6:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80033d8:	d903      	bls.n	80033e2 <HAL_ADC_ConfigChannel+0x1a>
 80033da:	4a6a      	ldr	r2, [pc, #424]	; (8003584 <HAL_ADC_ConfigChannel+0x1bc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	f040 8087 	bne.w	80034f0 <HAL_ADC_ConfigChannel+0x128>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80033e2:	6873      	ldr	r3, [r6, #4]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	f200 808c 	bhi.w	8003504 <HAL_ADC_ConfigChannel+0x13c>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80033ec:	68b3      	ldr	r3, [r6, #8]
 80033ee:	2b07      	cmp	r3, #7
 80033f0:	f200 8091 	bhi.w	8003516 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 80033f4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	f000 8096 	beq.w	800352a <HAL_ADC_ConfigChannel+0x162>
 80033fe:	2301      	movs	r3, #1
 8003400:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003404:	6835      	ldr	r5, [r6, #0]
 8003406:	2d09      	cmp	r5, #9
 8003408:	d827      	bhi.n	800345a <HAL_ADC_ConfigChannel+0x92>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800340a:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800340c:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800340e:	6902      	ldr	r2, [r0, #16]
 8003410:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8003414:	2107      	movs	r1, #7
 8003416:	40b9      	lsls	r1, r7
 8003418:	ea22 0201 	bic.w	r2, r2, r1
 800341c:	6102      	str	r2, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800341e:	6902      	ldr	r2, [r0, #16]
 8003420:	40bb      	lsls	r3, r7
 8003422:	4313      	orrs	r3, r2
 8003424:	6103      	str	r3, [r0, #16]
  if (sConfig->Rank < 7U)
 8003426:	6873      	ldr	r3, [r6, #4]
 8003428:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800342a:	462f      	mov	r7, r5
  if (sConfig->Rank < 7U)
 800342c:	d82a      	bhi.n	8003484 <HAL_ADC_ConfigChannel+0xbc>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800342e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003432:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003434:	3b05      	subs	r3, #5
 8003436:	211f      	movs	r1, #31
 8003438:	4099      	lsls	r1, r3
 800343a:	ea22 0201 	bic.w	r2, r2, r1
 800343e:	6342      	str	r2, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003440:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003442:	fa07 f303 	lsl.w	r3, r7, r3
 8003446:	4313      	orrs	r3, r2
 8003448:	6343      	str	r3, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800344a:	4b4f      	ldr	r3, [pc, #316]	; (8003588 <HAL_ADC_ConfigChannel+0x1c0>)
 800344c:	4298      	cmp	r0, r3
 800344e:	d02d      	beq.n	80034ac <HAL_ADC_ConfigChannel+0xe4>
  __HAL_UNLOCK(hadc);
 8003450:	2000      	movs	r0, #0
 8003452:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003456:	b003      	add	sp, #12
 8003458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800345a:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800345c:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800345e:	68c1      	ldr	r1, [r0, #12]
 8003460:	b2af      	uxth	r7, r5
 8003462:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8003466:	3a1e      	subs	r2, #30
 8003468:	f04f 0c07 	mov.w	ip, #7
 800346c:	fa0c fc02 	lsl.w	ip, ip, r2
 8003470:	ea21 010c 	bic.w	r1, r1, ip
 8003474:	60c1      	str	r1, [r0, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003476:	68c1      	ldr	r1, [r0, #12]
 8003478:	4093      	lsls	r3, r2
 800347a:	430b      	orrs	r3, r1
 800347c:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7U)
 800347e:	6873      	ldr	r3, [r6, #4]
 8003480:	2b06      	cmp	r3, #6
 8003482:	d9d4      	bls.n	800342e <HAL_ADC_ConfigChannel+0x66>
  else if (sConfig->Rank < 13U)
 8003484:	2b0c      	cmp	r3, #12
 8003486:	d853      	bhi.n	8003530 <HAL_ADC_ConfigChannel+0x168>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003488:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800348c:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8003490:	221f      	movs	r2, #31
 8003492:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003494:	408a      	lsls	r2, r1
 8003496:	ea23 0302 	bic.w	r3, r3, r2
 800349a:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800349c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800349e:	fa07 f101 	lsl.w	r1, r7, r1
 80034a2:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034a4:	4b38      	ldr	r3, [pc, #224]	; (8003588 <HAL_ADC_ConfigChannel+0x1c0>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034a6:	6301      	str	r1, [r0, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034a8:	4298      	cmp	r0, r3
 80034aa:	d1d1      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x88>
 80034ac:	2d12      	cmp	r5, #18
 80034ae:	d04e      	beq.n	800354e <HAL_ADC_ConfigChannel+0x186>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034b0:	4b34      	ldr	r3, [pc, #208]	; (8003584 <HAL_ADC_ConfigChannel+0x1bc>)
 80034b2:	429d      	cmp	r5, r3
 80034b4:	d158      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x1a0>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034b6:	4a35      	ldr	r2, [pc, #212]	; (800358c <HAL_ADC_ConfigChannel+0x1c4>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034b8:	4b35      	ldr	r3, [pc, #212]	; (8003590 <HAL_ADC_ConfigChannel+0x1c8>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034ba:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034bc:	4835      	ldr	r0, [pc, #212]	; (8003594 <HAL_ADC_ConfigChannel+0x1cc>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034be:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80034c2:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034c4:	6851      	ldr	r1, [r2, #4]
 80034c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80034ca:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	fba0 2303 	umull	r2, r3, r0, r3
 80034d2:	0c9b      	lsrs	r3, r3, #18
 80034d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80034dc:	9b01      	ldr	r3, [sp, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0b6      	beq.n	8003450 <HAL_ADC_ConfigChannel+0x88>
        counter--;
 80034e2:	9b01      	ldr	r3, [sp, #4]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80034e8:	9b01      	ldr	r3, [sp, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f9      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x11a>
 80034ee:	e7af      	b.n	8003450 <HAL_ADC_ConfigChannel+0x88>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80034f0:	4829      	ldr	r0, [pc, #164]	; (8003598 <HAL_ADC_ConfigChannel+0x1d0>)
 80034f2:	f240 6189 	movw	r1, #1673	; 0x689
 80034f6:	f7ff fa01 	bl	80028fc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80034fa:	6873      	ldr	r3, [r6, #4]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	f67f af74 	bls.w	80033ec <HAL_ADC_ConfigChannel+0x24>
 8003504:	4824      	ldr	r0, [pc, #144]	; (8003598 <HAL_ADC_ConfigChannel+0x1d0>)
 8003506:	f240 618a 	movw	r1, #1674	; 0x68a
 800350a:	f7ff f9f7 	bl	80028fc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800350e:	68b3      	ldr	r3, [r6, #8]
 8003510:	2b07      	cmp	r3, #7
 8003512:	f67f af6f 	bls.w	80033f4 <HAL_ADC_ConfigChannel+0x2c>
 8003516:	4820      	ldr	r0, [pc, #128]	; (8003598 <HAL_ADC_ConfigChannel+0x1d0>)
 8003518:	f240 618b 	movw	r1, #1675	; 0x68b
 800351c:	f7ff f9ee 	bl	80028fc <assert_failed>
  __HAL_LOCK(hadc);
 8003520:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003524:	2b01      	cmp	r3, #1
 8003526:	f47f af6a 	bne.w	80033fe <HAL_ADC_ConfigChannel+0x36>
 800352a:	2002      	movs	r0, #2
}
 800352c:	b003      	add	sp, #12
 800352e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003530:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003534:	3a41      	subs	r2, #65	; 0x41
 8003536:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003538:	211f      	movs	r1, #31
 800353a:	4091      	lsls	r1, r2
 800353c:	ea23 0301 	bic.w	r3, r3, r1
 8003540:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003542:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003544:	fa07 f102 	lsl.w	r1, r7, r2
 8003548:	4319      	orrs	r1, r3
 800354a:	62c1      	str	r1, [r0, #44]	; 0x2c
 800354c:	e77d      	b.n	800344a <HAL_ADC_ConfigChannel+0x82>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800354e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8003552:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003556:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800355a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 800355e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003562:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003566:	e773      	b.n	8003450 <HAL_ADC_ConfigChannel+0x88>
 8003568:	2d11      	cmp	r5, #17
 800356a:	f47f af71 	bne.w	8003450 <HAL_ADC_ConfigChannel+0x88>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <HAL_ADC_ConfigChannel+0x1c4>)
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003576:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800357e:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003580:	e766      	b.n	8003450 <HAL_ADC_ConfigChannel+0x88>
 8003582:	bf00      	nop
 8003584:	10000012 	.word	0x10000012
 8003588:	40012000 	.word	0x40012000
 800358c:	40012300 	.word	0x40012300
 8003590:	20000030 	.word	0x20000030
 8003594:	431bde83 	.word	0x431bde83
 8003598:	0800c708 	.word	0x0800c708

0800359c <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800359c:	1ec3      	subs	r3, r0, #3
 800359e:	2b04      	cmp	r3, #4
{
 80035a0:	b510      	push	{r4, lr}
 80035a2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80035a4:	d80e      	bhi.n	80035c4 <HAL_NVIC_SetPriorityGrouping+0x28>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a6:	490a      	ldr	r1, [pc, #40]	; (80035d0 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80035a8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035aa:	0223      	lsls	r3, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ac:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b4:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b6:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 80035b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80035c0:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035c2:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80035c4:	4803      	ldr	r0, [pc, #12]	; (80035d4 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80035c6:	2192      	movs	r1, #146	; 0x92
 80035c8:	f7ff f998 	bl	80028fc <assert_failed>
 80035cc:	e7eb      	b.n	80035a6 <HAL_NVIC_SetPriorityGrouping+0xa>
 80035ce:	bf00      	nop
 80035d0:	e000ed00 	.word	0xe000ed00
 80035d4:	0800c740 	.word	0x0800c740

080035d8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80035d8:	2a0f      	cmp	r2, #15
{ 
 80035da:	b570      	push	{r4, r5, r6, lr}
 80035dc:	4616      	mov	r6, r2
 80035de:	4605      	mov	r5, r0
 80035e0:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80035e2:	d837      	bhi.n	8003654 <HAL_NVIC_SetPriority+0x7c>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80035e4:	2c0f      	cmp	r4, #15
 80035e6:	d830      	bhi.n	800364a <HAL_NVIC_SetPriority+0x72>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <HAL_NVIC_SetPriority+0x88>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f0:	f1c3 0007 	rsb	r0, r3, #7
 80035f4:	2804      	cmp	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f6:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035fa:	bf28      	it	cs
 80035fc:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fe:	2a06      	cmp	r2, #6
 8003600:	d918      	bls.n	8003634 <HAL_NVIC_SetPriority+0x5c>
 8003602:	3b03      	subs	r3, #3
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	409a      	lsls	r2, r3
 800360a:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360e:	f04f 31ff 	mov.w	r1, #4294967295
 8003612:	4081      	lsls	r1, r0
 8003614:	ea24 0401 	bic.w	r4, r4, r1
 8003618:	409c      	lsls	r4, r3
  if ((int32_t)(IRQn) >= 0)
 800361a:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8003620:	db0b      	blt.n	800363a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8003626:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 800362a:	0124      	lsls	r4, r4, #4
 800362c:	b2e4      	uxtb	r4, r4
 800362e:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003632:	bd70      	pop	{r4, r5, r6, pc}
 8003634:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003636:	4633      	mov	r3, r6
 8003638:	e7e9      	b.n	800360e <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_NVIC_SetPriority+0x8c>)
 800363c:	f005 050f 	and.w	r5, r5, #15
 8003640:	0124      	lsls	r4, r4, #4
 8003642:	442b      	add	r3, r5
 8003644:	b2e4      	uxtb	r4, r4
 8003646:	761c      	strb	r4, [r3, #24]
 8003648:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800364a:	4807      	ldr	r0, [pc, #28]	; (8003668 <HAL_NVIC_SetPriority+0x90>)
 800364c:	21ab      	movs	r1, #171	; 0xab
 800364e:	f7ff f955 	bl	80028fc <assert_failed>
 8003652:	e7c9      	b.n	80035e8 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003654:	4804      	ldr	r0, [pc, #16]	; (8003668 <HAL_NVIC_SetPriority+0x90>)
 8003656:	21aa      	movs	r1, #170	; 0xaa
 8003658:	f7ff f950 	bl	80028fc <assert_failed>
 800365c:	e7c2      	b.n	80035e4 <HAL_NVIC_SetPriority+0xc>
 800365e:	bf00      	nop
 8003660:	e000ed00 	.word	0xe000ed00
 8003664:	e000ecfc 	.word	0xe000ecfc
 8003668:	0800c740 	.word	0x0800c740

0800366c <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800366c:	2800      	cmp	r0, #0
 800366e:	db08      	blt.n	8003682 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003670:	f000 011f 	and.w	r1, r0, #31
 8003674:	4a05      	ldr	r2, [pc, #20]	; (800368c <HAL_NVIC_EnableIRQ+0x20>)
 8003676:	0940      	lsrs	r0, r0, #5
 8003678:	2301      	movs	r3, #1
 800367a:	408b      	lsls	r3, r1
 800367c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003680:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003682:	4803      	ldr	r0, [pc, #12]	; (8003690 <HAL_NVIC_EnableIRQ+0x24>)
 8003684:	21be      	movs	r1, #190	; 0xbe
 8003686:	f7ff b939 	b.w	80028fc <assert_failed>
 800368a:	bf00      	nop
 800368c:	e000e100 	.word	0xe000e100
 8003690:	0800c740 	.word	0x0800c740

08003694 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003694:	2800      	cmp	r0, #0
 8003696:	db0e      	blt.n	80036b6 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003698:	0943      	lsrs	r3, r0, #5
 800369a:	4909      	ldr	r1, [pc, #36]	; (80036c0 <HAL_NVIC_DisableIRQ+0x2c>)
 800369c:	3320      	adds	r3, #32
 800369e:	2201      	movs	r2, #1
 80036a0:	f000 001f 	and.w	r0, r0, #31
 80036a4:	fa02 f000 	lsl.w	r0, r2, r0
 80036a8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036b0:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80036b4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80036b6:	4803      	ldr	r0, [pc, #12]	; (80036c4 <HAL_NVIC_DisableIRQ+0x30>)
 80036b8:	21ce      	movs	r1, #206	; 0xce
 80036ba:	f7ff b91f 	b.w	80028fc <assert_failed>
 80036be:	bf00      	nop
 80036c0:	e000e100 	.word	0xe000e100
 80036c4:	0800c740 	.word	0x0800c740

080036c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80036cc:	f7ff fd08 	bl	80030e0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036d0:	2c00      	cmp	r4, #0
 80036d2:	f000 8114 	beq.w	80038fe <HAL_DMA_Init+0x236>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	4aa8      	ldr	r2, [pc, #672]	; (800397c <HAL_DMA_Init+0x2b4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	4605      	mov	r5, r0
 80036de:	d031      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 80036e0:	3218      	adds	r2, #24
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d02e      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 80036e6:	3218      	adds	r2, #24
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d02b      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 80036ec:	3218      	adds	r2, #24
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d028      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 80036f2:	3218      	adds	r2, #24
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d025      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 80036f8:	3218      	adds	r2, #24
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d022      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 80036fe:	3218      	adds	r2, #24
 8003700:	4293      	cmp	r3, r2
 8003702:	d01f      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 8003704:	3218      	adds	r2, #24
 8003706:	4293      	cmp	r3, r2
 8003708:	d01c      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 800370a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800370e:	4293      	cmp	r3, r2
 8003710:	d018      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 8003712:	3218      	adds	r2, #24
 8003714:	4293      	cmp	r3, r2
 8003716:	d015      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 8003718:	3218      	adds	r2, #24
 800371a:	4293      	cmp	r3, r2
 800371c:	d012      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 800371e:	3218      	adds	r2, #24
 8003720:	4293      	cmp	r3, r2
 8003722:	d00f      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 8003724:	3218      	adds	r2, #24
 8003726:	4293      	cmp	r3, r2
 8003728:	d00c      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 800372a:	3218      	adds	r2, #24
 800372c:	4293      	cmp	r3, r2
 800372e:	d009      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 8003730:	3218      	adds	r2, #24
 8003732:	4293      	cmp	r3, r2
 8003734:	d006      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 8003736:	3218      	adds	r2, #24
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <HAL_DMA_Init+0x7c>
 800373c:	4890      	ldr	r0, [pc, #576]	; (8003980 <HAL_DMA_Init+0x2b8>)
 800373e:	21b8      	movs	r1, #184	; 0xb8
 8003740:	f7ff f8dc 	bl	80028fc <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003744:	6863      	ldr	r3, [r4, #4]
 8003746:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 800374a:	d006      	beq.n	800375a <HAL_DMA_Init+0x92>
 800374c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003750:	d003      	beq.n	800375a <HAL_DMA_Init+0x92>
 8003752:	488b      	ldr	r0, [pc, #556]	; (8003980 <HAL_DMA_Init+0x2b8>)
 8003754:	21b9      	movs	r1, #185	; 0xb9
 8003756:	f7ff f8d1 	bl	80028fc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800375a:	68a3      	ldr	r3, [r4, #8]
 800375c:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8003760:	f040 8098 	bne.w	8003894 <HAL_DMA_Init+0x1cc>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003764:	68e3      	ldr	r3, [r4, #12]
 8003766:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800376a:	f040 809f 	bne.w	80038ac <HAL_DMA_Init+0x1e4>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800376e:	6923      	ldr	r3, [r4, #16]
 8003770:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8003774:	f040 80a3 	bne.w	80038be <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003778:	6963      	ldr	r3, [r4, #20]
 800377a:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800377e:	d003      	beq.n	8003788 <HAL_DMA_Init+0xc0>
 8003780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003784:	f040 80a7 	bne.w	80038d6 <HAL_DMA_Init+0x20e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003788:	69a3      	ldr	r3, [r4, #24]
 800378a:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800378e:	d003      	beq.n	8003798 <HAL_DMA_Init+0xd0>
 8003790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003794:	f040 80a9 	bne.w	80038ea <HAL_DMA_Init+0x222>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003798:	69e3      	ldr	r3, [r4, #28]
 800379a:	f033 0220 	bics.w	r2, r3, #32
 800379e:	d006      	beq.n	80037ae <HAL_DMA_Init+0xe6>
 80037a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a4:	d003      	beq.n	80037ae <HAL_DMA_Init+0xe6>
 80037a6:	4876      	ldr	r0, [pc, #472]	; (8003980 <HAL_DMA_Init+0x2b8>)
 80037a8:	21bf      	movs	r1, #191	; 0xbf
 80037aa:	f7ff f8a7 	bl	80028fc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80037ae:	6a23      	ldr	r3, [r4, #32]
 80037b0:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80037b4:	d003      	beq.n	80037be <HAL_DMA_Init+0xf6>
 80037b6:	4872      	ldr	r0, [pc, #456]	; (8003980 <HAL_DMA_Init+0x2b8>)
 80037b8:	21c0      	movs	r1, #192	; 0xc0
 80037ba:	f7ff f89f 	bl	80028fc <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80037be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037c0:	b1db      	cbz	r3, 80037fa <HAL_DMA_Init+0x132>
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d005      	beq.n	80037d2 <HAL_DMA_Init+0x10a>
 80037c6:	486e      	ldr	r0, [pc, #440]	; (8003980 <HAL_DMA_Init+0x2b8>)
 80037c8:	21c1      	movs	r1, #193	; 0xc1
 80037ca:	f7ff f897 	bl	80028fc <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80037ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037d0:	b19b      	cbz	r3, 80037fa <HAL_DMA_Init+0x132>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80037d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	f200 80b3 	bhi.w	8003940 <HAL_DMA_Init+0x278>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80037da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037dc:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 80037e0:	d003      	beq.n	80037ea <HAL_DMA_Init+0x122>
 80037e2:	4867      	ldr	r0, [pc, #412]	; (8003980 <HAL_DMA_Init+0x2b8>)
 80037e4:	21c7      	movs	r1, #199	; 0xc7
 80037e6:	f7ff f889 	bl	80028fc <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80037ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037ec:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 80037f0:	d003      	beq.n	80037fa <HAL_DMA_Init+0x132>
 80037f2:	4863      	ldr	r0, [pc, #396]	; (8003980 <HAL_DMA_Init+0x2b8>)
 80037f4:	21c8      	movs	r1, #200	; 0xc8
 80037f6:	f7ff f881 	bl	80028fc <assert_failed>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037fa:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80037fc:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 80037fe:	2100      	movs	r1, #0
 8003800:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003804:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003810:	e005      	b.n	800381e <HAL_DMA_Init+0x156>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003812:	f7ff fc65 	bl	80030e0 <HAL_GetTick>
 8003816:	1b40      	subs	r0, r0, r5
 8003818:	2805      	cmp	r0, #5
 800381a:	d855      	bhi.n	80038c8 <HAL_DMA_Init+0x200>
 800381c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	07d1      	lsls	r1, r2, #31
 8003822:	d4f6      	bmi.n	8003812 <HAL_DMA_Init+0x14a>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003824:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003828:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382c:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800382e:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 8003830:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003832:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003834:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003838:	4302      	orrs	r2, r0
 800383a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800383c:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800383e:	4951      	ldr	r1, [pc, #324]	; (8003984 <HAL_DMA_Init+0x2bc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003840:	4332      	orrs	r2, r6
 8003842:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003844:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003846:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003848:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800384a:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800384c:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003850:	d057      	beq.n	8003902 <HAL_DMA_Init+0x23a>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003852:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003854:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003856:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800385a:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800385c:	b2da      	uxtb	r2, r3
 800385e:	494a      	ldr	r1, [pc, #296]	; (8003988 <HAL_DMA_Init+0x2c0>)
  hdma->Instance->FCR = tmp;
 8003860:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003862:	3a10      	subs	r2, #16
 8003864:	fba1 0102 	umull	r0, r1, r1, r2
 8003868:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800386a:	4848      	ldr	r0, [pc, #288]	; (800398c <HAL_DMA_Init+0x2c4>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800386c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003870:	5c41      	ldrb	r1, [r0, r1]
 8003872:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003874:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8003878:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800387a:	bf88      	it	hi
 800387c:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387e:	223f      	movs	r2, #63	; 0x3f
 8003880:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8003882:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003884:	2100      	movs	r1, #0
 8003886:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003888:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800388a:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800388c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8003890:	4608      	mov	r0, r1
}
 8003892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003894:	2b80      	cmp	r3, #128	; 0x80
 8003896:	f43f af65 	beq.w	8003764 <HAL_DMA_Init+0x9c>
 800389a:	4839      	ldr	r0, [pc, #228]	; (8003980 <HAL_DMA_Init+0x2b8>)
 800389c:	21ba      	movs	r1, #186	; 0xba
 800389e:	f7ff f82d 	bl	80028fc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80038a2:	68e3      	ldr	r3, [r4, #12]
 80038a4:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80038a8:	f43f af61 	beq.w	800376e <HAL_DMA_Init+0xa6>
 80038ac:	4834      	ldr	r0, [pc, #208]	; (8003980 <HAL_DMA_Init+0x2b8>)
 80038ae:	21bb      	movs	r1, #187	; 0xbb
 80038b0:	f7ff f824 	bl	80028fc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80038b4:	6923      	ldr	r3, [r4, #16]
 80038b6:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80038ba:	f43f af5d 	beq.w	8003778 <HAL_DMA_Init+0xb0>
 80038be:	4830      	ldr	r0, [pc, #192]	; (8003980 <HAL_DMA_Init+0x2b8>)
 80038c0:	21bc      	movs	r1, #188	; 0xbc
 80038c2:	f7ff f81b 	bl	80028fc <assert_failed>
 80038c6:	e757      	b.n	8003778 <HAL_DMA_Init+0xb0>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ca:	2220      	movs	r2, #32
 80038cc:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038ce:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80038d2:	4618      	mov	r0, r3
}
 80038d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80038d6:	482a      	ldr	r0, [pc, #168]	; (8003980 <HAL_DMA_Init+0x2b8>)
 80038d8:	21bd      	movs	r1, #189	; 0xbd
 80038da:	f7ff f80f 	bl	80028fc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80038de:	69a3      	ldr	r3, [r4, #24]
 80038e0:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 80038e4:	f43f af58 	beq.w	8003798 <HAL_DMA_Init+0xd0>
 80038e8:	e752      	b.n	8003790 <HAL_DMA_Init+0xc8>
 80038ea:	4825      	ldr	r0, [pc, #148]	; (8003980 <HAL_DMA_Init+0x2b8>)
 80038ec:	21be      	movs	r1, #190	; 0xbe
 80038ee:	f7ff f805 	bl	80028fc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80038f2:	69e3      	ldr	r3, [r4, #28]
 80038f4:	f033 0220 	bics.w	r2, r3, #32
 80038f8:	f43f af59 	beq.w	80037ae <HAL_DMA_Init+0xe6>
 80038fc:	e750      	b.n	80037a0 <HAL_DMA_Init+0xd8>
    return HAL_ERROR;
 80038fe:	2001      	movs	r0, #1
}
 8003900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003902:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 8003906:	4328      	orrs	r0, r5
 8003908:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 800390a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800390c:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 800390e:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003910:	f020 0007 	bic.w	r0, r0, #7
 8003914:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 8003916:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800391a:	2d00      	cmp	r5, #0
 800391c:	d09e      	beq.n	800385c <HAL_DMA_Init+0x194>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800391e:	b1a6      	cbz	r6, 800394a <HAL_DMA_Init+0x282>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003920:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8003924:	d017      	beq.n	8003956 <HAL_DMA_Init+0x28e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003926:	2a02      	cmp	r2, #2
 8003928:	d903      	bls.n	8003932 <HAL_DMA_Init+0x26a>
 800392a:	2a03      	cmp	r2, #3
 800392c:	d196      	bne.n	800385c <HAL_DMA_Init+0x194>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800392e:	01ea      	lsls	r2, r5, #7
 8003930:	d594      	bpl.n	800385c <HAL_DMA_Init+0x194>
        hdma->State = HAL_DMA_STATE_READY;
 8003932:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003934:	2240      	movs	r2, #64	; 0x40
 8003936:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003938:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800393c:	4618      	mov	r0, r3
}
 800393e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003940:	480f      	ldr	r0, [pc, #60]	; (8003980 <HAL_DMA_Init+0x2b8>)
 8003942:	21c6      	movs	r1, #198	; 0xc6
 8003944:	f7fe ffda 	bl	80028fc <assert_failed>
 8003948:	e747      	b.n	80037da <HAL_DMA_Init+0x112>
    switch (tmp)
 800394a:	2a01      	cmp	r2, #1
 800394c:	d010      	beq.n	8003970 <HAL_DMA_Init+0x2a8>
 800394e:	f032 0202 	bics.w	r2, r2, #2
 8003952:	d183      	bne.n	800385c <HAL_DMA_Init+0x194>
 8003954:	e7eb      	b.n	800392e <HAL_DMA_Init+0x266>
    switch (tmp)
 8003956:	2a03      	cmp	r2, #3
 8003958:	d880      	bhi.n	800385c <HAL_DMA_Init+0x194>
 800395a:	a101      	add	r1, pc, #4	; (adr r1, 8003960 <HAL_DMA_Init+0x298>)
 800395c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003960:	08003933 	.word	0x08003933
 8003964:	0800392f 	.word	0x0800392f
 8003968:	08003933 	.word	0x08003933
 800396c:	08003971 	.word	0x08003971
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003970:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003974:	f47f af72 	bne.w	800385c <HAL_DMA_Init+0x194>
 8003978:	e7db      	b.n	8003932 <HAL_DMA_Init+0x26a>
 800397a:	bf00      	nop
 800397c:	40026010 	.word	0x40026010
 8003980:	0800c77c 	.word	0x0800c77c
 8003984:	f010803f 	.word	0xf010803f
 8003988:	aaaaaaab 	.word	0xaaaaaaab
 800398c:	0800c7b4 	.word	0x0800c7b4

08003990 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003990:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003994:	2b02      	cmp	r3, #2
 8003996:	d003      	beq.n	80039a0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800399c:	2001      	movs	r0, #1
 800399e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80039a0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80039a2:	2305      	movs	r3, #5
 80039a4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80039a8:	6813      	ldr	r3, [r2, #0]
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80039b0:	2000      	movs	r0, #0
}
 80039b2:	4770      	bx	lr

080039b4 <HAL_DMA_IRQHandler>:
{
 80039b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80039ba:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039bc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 80039be:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80039c2:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039c4:	4971      	ldr	r1, [pc, #452]	; (8003b8c <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c6:	2208      	movs	r2, #8
 80039c8:	409a      	lsls	r2, r3
 80039ca:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 80039cc:	680d      	ldr	r5, [r1, #0]
{
 80039ce:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d0:	d004      	beq.n	80039dc <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039d2:	6801      	ldr	r1, [r0, #0]
 80039d4:	680f      	ldr	r7, [r1, #0]
 80039d6:	0778      	lsls	r0, r7, #29
 80039d8:	f100 808a 	bmi.w	8003af0 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039dc:	2201      	movs	r2, #1
 80039de:	409a      	lsls	r2, r3
 80039e0:	4222      	tst	r2, r4
 80039e2:	d004      	beq.n	80039ee <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039e4:	f8d8 1000 	ldr.w	r1, [r8]
 80039e8:	6949      	ldr	r1, [r1, #20]
 80039ea:	0609      	lsls	r1, r1, #24
 80039ec:	d478      	bmi.n	8003ae0 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ee:	2204      	movs	r2, #4
 80039f0:	409a      	lsls	r2, r3
 80039f2:	4222      	tst	r2, r4
 80039f4:	d004      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039f6:	f8d8 1000 	ldr.w	r1, [r8]
 80039fa:	6809      	ldr	r1, [r1, #0]
 80039fc:	078f      	lsls	r7, r1, #30
 80039fe:	d467      	bmi.n	8003ad0 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a00:	2210      	movs	r2, #16
 8003a02:	409a      	lsls	r2, r3
 8003a04:	4222      	tst	r2, r4
 8003a06:	d004      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a08:	f8d8 1000 	ldr.w	r1, [r8]
 8003a0c:	680f      	ldr	r7, [r1, #0]
 8003a0e:	0738      	lsls	r0, r7, #28
 8003a10:	d449      	bmi.n	8003aa6 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a12:	2220      	movs	r2, #32
 8003a14:	409a      	lsls	r2, r3
 8003a16:	4222      	tst	r2, r4
 8003a18:	d017      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a1a:	f8d8 1000 	ldr.w	r1, [r8]
 8003a1e:	680c      	ldr	r4, [r1, #0]
 8003a20:	06e0      	lsls	r0, r4, #27
 8003a22:	d512      	bpl.n	8003a4a <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a24:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a26:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8003a2a:	2a05      	cmp	r2, #5
 8003a2c:	d073      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a2e:	680b      	ldr	r3, [r1, #0]
 8003a30:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a34:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a36:	f000 8090 	beq.w	8003b5a <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a3a:	0319      	lsls	r1, r3, #12
 8003a3c:	f140 809b 	bpl.w	8003b76 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8003a40:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8003a44:	b10b      	cbz	r3, 8003a4a <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8003a46:	4640      	mov	r0, r8
 8003a48:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a4a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003a4e:	b33b      	cbz	r3, 8003aa0 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a50:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8003a54:	07da      	lsls	r2, r3, #31
 8003a56:	d51b      	bpl.n	8003a90 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8003a58:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a5c:	494c      	ldr	r1, [pc, #304]	; (8003b90 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a5e:	2305      	movs	r3, #5
 8003a60:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003a64:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a66:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a70:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8003a72:	e002      	b.n	8003a7a <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a74:	6813      	ldr	r3, [r2, #0]
 8003a76:	07db      	lsls	r3, r3, #31
 8003a78:	d504      	bpl.n	8003a84 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8003a7a:	9b01      	ldr	r3, [sp, #4]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	42ab      	cmp	r3, r5
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	d9f7      	bls.n	8003a74 <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 8003a84:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003a86:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8003a88:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003a8c:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003a90:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8003a94:	b123      	cbz	r3, 8003aa0 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8003a96:	4640      	mov	r0, r8
}
 8003a98:	b002      	add	sp, #8
 8003a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8003a9e:	4718      	bx	r3
}
 8003aa0:	b002      	add	sp, #8
 8003aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003aa6:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aa8:	680a      	ldr	r2, [r1, #0]
 8003aaa:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aae:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ab0:	d12a      	bne.n	8003b08 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab2:	05d7      	lsls	r7, r2, #23
 8003ab4:	d403      	bmi.n	8003abe <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab6:	680a      	ldr	r2, [r1, #0]
 8003ab8:	f022 0208 	bic.w	r2, r2, #8
 8003abc:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003abe:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	d0a5      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8003ac6:	4640      	mov	r0, r8
 8003ac8:	4790      	blx	r2
 8003aca:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8003ace:	e7a0      	b.n	8003a12 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ad0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ad2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8003ad6:	f042 0204 	orr.w	r2, r2, #4
 8003ada:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8003ade:	e78f      	b.n	8003a00 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ae0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ae2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8003ae6:	f042 0202 	orr.w	r2, r2, #2
 8003aea:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8003aee:	e77e      	b.n	80039ee <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003af0:	680f      	ldr	r7, [r1, #0]
 8003af2:	f027 0704 	bic.w	r7, r7, #4
 8003af6:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003af8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003afa:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8003b06:	e769      	b.n	80039dc <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b08:	0312      	lsls	r2, r2, #12
 8003b0a:	d5d8      	bpl.n	8003abe <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b0c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8003b10:	2a00      	cmp	r2, #0
 8003b12:	d1d8      	bne.n	8003ac6 <HAL_DMA_IRQHandler+0x112>
 8003b14:	e77d      	b.n	8003a12 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b16:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b18:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b1c:	f022 0216 	bic.w	r2, r2, #22
 8003b20:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b22:	694a      	ldr	r2, [r1, #20]
 8003b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b28:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b2a:	b354      	cbz	r4, 8003b82 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b2c:	680a      	ldr	r2, [r1, #0]
 8003b2e:	f022 0208 	bic.w	r2, r2, #8
 8003b32:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b34:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8003b36:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8003b3e:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 8003b40:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b42:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 8003b44:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003b48:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8003b4c:	2900      	cmp	r1, #0
 8003b4e:	d0a7      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8003b50:	4640      	mov	r0, r8
}
 8003b52:	b002      	add	sp, #8
 8003b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8003b58:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b5a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003b5e:	f47f af6f 	bne.w	8003a40 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b62:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003b64:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b66:	f022 0210 	bic.w	r2, r2, #16
 8003b6a:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8003b6c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003b70:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 8003b74:	e764      	b.n	8003a40 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8003b76:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f47f af63 	bne.w	8003a46 <HAL_DMA_IRQHandler+0x92>
 8003b80:	e763      	b.n	8003a4a <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b82:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8003b86:	2a00      	cmp	r2, #0
 8003b88:	d1d0      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x178>
 8003b8a:	e7d3      	b.n	8003b34 <HAL_DMA_IRQHandler+0x180>
 8003b8c:	20000030 	.word	0x20000030
 8003b90:	1b4e81b5 	.word	0x1b4e81b5

08003b94 <HAL_DMA_GetState>:
  return hdma->State;
 8003b94:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop

08003b9c <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8003b9c:	b911      	cbnz	r1, 8003ba4 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003b9e:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	4608      	mov	r0, r1
      break;
 8003ba2:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8003ba4:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003ba8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
 8003baa:	f021 63c0 	bic.w	r3, r1, #100663296	; 0x6000000
 8003bae:	f023 031f 	bic.w	r3, r3, #31
{
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	4605      	mov	r5, r0
  assert_param(IS_EXTI_LINE(ExtiLine));
 8003bb6:	b90b      	cbnz	r3, 8003bbc <HAL_EXTI_GetHandle+0x14>
 8003bb8:	018b      	lsls	r3, r1, #6
 8003bba:	d408      	bmi.n	8003bce <HAL_EXTI_GetHandle+0x26>
 8003bbc:	480a      	ldr	r0, [pc, #40]	; (8003be8 <HAL_EXTI_GetHandle+0x40>)
 8003bbe:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003bc2:	f7fe fe9b 	bl	80028fc <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
 8003bc6:	b165      	cbz	r5, 8003be2 <HAL_EXTI_GetHandle+0x3a>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003bc8:	602c      	str	r4, [r5, #0]

    return HAL_OK;
 8003bca:	2000      	movs	r0, #0
  }
}
 8003bcc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_EXTI_LINE(ExtiLine));
 8003bce:	f001 031f 	and.w	r3, r1, #31
 8003bd2:	2b16      	cmp	r3, #22
 8003bd4:	d9f7      	bls.n	8003bc6 <HAL_EXTI_GetHandle+0x1e>
 8003bd6:	4804      	ldr	r0, [pc, #16]	; (8003be8 <HAL_EXTI_GetHandle+0x40>)
 8003bd8:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003bdc:	f7fe fe8e 	bl	80028fc <assert_failed>
 8003be0:	e7f1      	b.n	8003bc6 <HAL_EXTI_GetHandle+0x1e>
    return HAL_ERROR;
 8003be2:	2001      	movs	r0, #1
}
 8003be4:	bd38      	pop	{r3, r4, r5, pc}
 8003be6:	bf00      	nop
 8003be8:	0800c7bc 	.word	0x0800c7bc

08003bec <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003bec:	6803      	ldr	r3, [r0, #0]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003bee:	4909      	ldr	r1, [pc, #36]	; (8003c14 <HAL_EXTI_IRQHandler+0x28>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003bf0:	f003 021f 	and.w	r2, r3, #31
{
 8003bf4:	b410      	push	{r4}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003bf6:	2301      	movs	r3, #1
  regval = (EXTI->PR & maskline);
 8003bf8:	694c      	ldr	r4, [r1, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003bfa:	4093      	lsls	r3, r2
  if (regval != 0x00u)
 8003bfc:	421c      	tst	r4, r3
 8003bfe:	d005      	beq.n	8003c0c <HAL_EXTI_IRQHandler+0x20>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003c00:	6842      	ldr	r2, [r0, #4]
    EXTI->PR = maskline;
 8003c02:	614b      	str	r3, [r1, #20]
    if (hexti->PendingCallback != NULL)
 8003c04:	b112      	cbz	r2, 8003c0c <HAL_EXTI_IRQHandler+0x20>
    {
      hexti->PendingCallback();
    }
  }
}
 8003c06:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 8003c0a:	4710      	bx	r2
}
 8003c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40013c00 	.word	0x40013c00

08003c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003c1c:	4b9c      	ldr	r3, [pc, #624]	; (8003e90 <HAL_GPIO_Init+0x278>)
 8003c1e:	4298      	cmp	r0, r3
{
 8003c20:	b083      	sub	sp, #12
 8003c22:	4605      	mov	r5, r0
 8003c24:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003c26:	d017      	beq.n	8003c58 <HAL_GPIO_Init+0x40>
 8003c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c2c:	4298      	cmp	r0, r3
 8003c2e:	d013      	beq.n	8003c58 <HAL_GPIO_Init+0x40>
 8003c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c34:	4298      	cmp	r0, r3
 8003c36:	d00f      	beq.n	8003c58 <HAL_GPIO_Init+0x40>
 8003c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c3c:	4298      	cmp	r0, r3
 8003c3e:	d00b      	beq.n	8003c58 <HAL_GPIO_Init+0x40>
 8003c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c44:	4298      	cmp	r0, r3
 8003c46:	d007      	beq.n	8003c58 <HAL_GPIO_Init+0x40>
 8003c48:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003c4c:	4298      	cmp	r0, r3
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x40>
 8003c50:	4890      	ldr	r0, [pc, #576]	; (8003e94 <HAL_GPIO_Init+0x27c>)
 8003c52:	21ac      	movs	r1, #172	; 0xac
 8003c54:	f7fe fe52 	bl	80028fc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	2a00      	cmp	r2, #0
 8003c5e:	f000 80d2 	beq.w	8003e06 <HAL_GPIO_Init+0x1ee>
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f040 80cd 	bne.w	8003e06 <HAL_GPIO_Init+0x1ee>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d917      	bls.n	8003ca2 <HAL_GPIO_Init+0x8a>
 8003c72:	f1a3 0211 	sub.w	r2, r3, #17
 8003c76:	2a01      	cmp	r2, #1
 8003c78:	d913      	bls.n	8003ca2 <HAL_GPIO_Init+0x8a>
 8003c7a:	4987      	ldr	r1, [pc, #540]	; (8003e98 <HAL_GPIO_Init+0x280>)
 8003c7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c80:	428a      	cmp	r2, r1
 8003c82:	d00e      	beq.n	8003ca2 <HAL_GPIO_Init+0x8a>
 8003c84:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8003c88:	428b      	cmp	r3, r1
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_GPIO_Init+0x8a>
 8003c8c:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8003c90:	428a      	cmp	r2, r1
 8003c92:	d006      	beq.n	8003ca2 <HAL_GPIO_Init+0x8a>
 8003c94:	4a81      	ldr	r2, [pc, #516]	; (8003e9c <HAL_GPIO_Init+0x284>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_Init+0x8a>
 8003c9a:	487e      	ldr	r0, [pc, #504]	; (8003e94 <HAL_GPIO_Init+0x27c>)
 8003c9c:	21ae      	movs	r1, #174	; 0xae
 8003c9e:	f7fe fe2d 	bl	80028fc <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	f200 80e9 	bhi.w	8003e7c <HAL_GPIO_Init+0x264>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003caa:	f8df a208 	ldr.w	sl, [pc, #520]	; 8003eb4 <HAL_GPIO_Init+0x29c>
{
 8003cae:	2400      	movs	r4, #0
 8003cb0:	e003      	b.n	8003cba <HAL_GPIO_Init+0xa2>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb2:	3401      	adds	r4, #1
 8003cb4:	2c10      	cmp	r4, #16
 8003cb6:	f000 80a3 	beq.w	8003e00 <HAL_GPIO_Init+0x1e8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cba:	683b      	ldr	r3, [r7, #0]
    ioposition = 0x01U << position;
 8003cbc:	2601      	movs	r6, #1
 8003cbe:	40a6      	lsls	r6, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc0:	ea06 0803 	and.w	r8, r6, r3
    if(iocurrent == ioposition)
 8003cc4:	ea36 0303 	bics.w	r3, r6, r3
 8003cc8:	d1f3      	bne.n	8003cb2 <HAL_GPIO_Init+0x9a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	f001 0303 	and.w	r3, r1, #3
 8003cd0:	1e5a      	subs	r2, r3, #1
 8003cd2:	2a01      	cmp	r2, #1
 8003cd4:	f240 809c 	bls.w	8003e10 <HAL_GPIO_Init+0x1f8>
 8003cd8:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8003cdc:	f04f 0903 	mov.w	r9, #3
 8003ce0:	fa09 f90b 	lsl.w	r9, r9, fp
 8003ce4:	ea6f 0909 	mvn.w	r9, r9
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d028      	beq.n	8003d3e <HAL_GPIO_Init+0x126>
        temp = GPIOx->PUPDR;
 8003cec:	68e8      	ldr	r0, [r5, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cee:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cf0:	ea00 0009 	and.w	r0, r0, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf4:	fa02 f20b 	lsl.w	r2, r2, fp
 8003cf8:	4302      	orrs	r2, r0
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cfa:	2b02      	cmp	r3, #2
        GPIOx->PUPDR = temp;
 8003cfc:	60ea      	str	r2, [r5, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cfe:	d11e      	bne.n	8003d3e <HAL_GPIO_Init+0x126>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	2a0f      	cmp	r2, #15
 8003d04:	f240 80a0 	bls.w	8003e48 <HAL_GPIO_Init+0x230>
 8003d08:	21dc      	movs	r1, #220	; 0xdc
 8003d0a:	4862      	ldr	r0, [pc, #392]	; (8003e94 <HAL_GPIO_Init+0x27c>)
 8003d0c:	f7fe fdf6 	bl	80028fc <assert_failed>
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	f001 0303 	and.w	r3, r1, #3
        temp = GPIOx->AFR[position >> 3U];
 8003d18:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8003d1c:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d20:	f004 0607 	and.w	r6, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8003d24:	f8dc 0020 	ldr.w	r0, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d28:	00b6      	lsls	r6, r6, #2
 8003d2a:	f04f 0e0f 	mov.w	lr, #15
 8003d2e:	fa0e fe06 	lsl.w	lr, lr, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d32:	40b2      	lsls	r2, r6
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d34:	ea20 000e 	bic.w	r0, r0, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d38:	4302      	orrs	r2, r0
        GPIOx->AFR[position >> 3U] = temp;
 8003d3a:	f8cc 2020 	str.w	r2, [ip, #32]
      temp = GPIOx->MODER;
 8003d3e:	682a      	ldr	r2, [r5, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d40:	fa03 f30b 	lsl.w	r3, r3, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d44:	ea02 0909 	and.w	r9, r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d48:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->MODER = temp;
 8003d4c:	602b      	str	r3, [r5, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d4e:	00cb      	lsls	r3, r1, #3
 8003d50:	d5af      	bpl.n	8003cb2 <HAL_GPIO_Init+0x9a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <HAL_GPIO_Init+0x288>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d54:	4e4e      	ldr	r6, [pc, #312]	; (8003e90 <HAL_GPIO_Init+0x278>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d56:	2200      	movs	r2, #0
 8003d58:	9201      	str	r2, [sp, #4]
 8003d5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
 8003d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d64:	f024 0303 	bic.w	r3, r4, #3
 8003d68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d6c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003d70:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8003d74:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d76:	f004 0203 	and.w	r2, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7a:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003d7c:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d80:	0092      	lsls	r2, r2, #2
 8003d82:	200f      	movs	r0, #15
 8003d84:	4090      	lsls	r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d86:	42b5      	cmp	r5, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d88:	ea2c 0000 	bic.w	r0, ip, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d8c:	d00f      	beq.n	8003dae <HAL_GPIO_Init+0x196>
 8003d8e:	4555      	cmp	r5, sl
 8003d90:	d06a      	beq.n	8003e68 <HAL_GPIO_Init+0x250>
 8003d92:	4e44      	ldr	r6, [pc, #272]	; (8003ea4 <HAL_GPIO_Init+0x28c>)
 8003d94:	42b5      	cmp	r5, r6
 8003d96:	d06c      	beq.n	8003e72 <HAL_GPIO_Init+0x25a>
 8003d98:	4e43      	ldr	r6, [pc, #268]	; (8003ea8 <HAL_GPIO_Init+0x290>)
 8003d9a:	42b5      	cmp	r5, r6
 8003d9c:	d073      	beq.n	8003e86 <HAL_GPIO_Init+0x26e>
 8003d9e:	4e43      	ldr	r6, [pc, #268]	; (8003eac <HAL_GPIO_Init+0x294>)
 8003da0:	42b5      	cmp	r5, r6
 8003da2:	bf0c      	ite	eq
 8003da4:	2604      	moveq	r6, #4
 8003da6:	2607      	movne	r6, #7
 8003da8:	fa06 f202 	lsl.w	r2, r6, r2
 8003dac:	4310      	orrs	r0, r2
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dae:	4a40      	ldr	r2, [pc, #256]	; (8003eb0 <HAL_GPIO_Init+0x298>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003db0:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 8003db2:	6812      	ldr	r2, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003db4:	4b3e      	ldr	r3, [pc, #248]	; (8003eb0 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 8003db6:	ea6f 0008 	mvn.w	r0, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dba:	03ce      	lsls	r6, r1, #15
        temp &= ~((uint32_t)iocurrent);
 8003dbc:	bf54      	ite	pl
 8003dbe:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8003dc0:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 8003dc4:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003dc6:	685a      	ldr	r2, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dc8:	038b      	lsls	r3, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 8003dcc:	bf54      	ite	pl
 8003dce:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8003dd0:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8003dd4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dd6:	689a      	ldr	r2, [r3, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_GPIO_Init+0x298>)
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dda:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8003ddc:	bf54      	ite	pl
 8003dde:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8003de0:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8003de4:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003de6:	68db      	ldr	r3, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003de8:	028a      	lsls	r2, r1, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dea:	f104 0401 	add.w	r4, r4, #1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003dee:	4a30      	ldr	r2, [pc, #192]	; (8003eb0 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 8003df0:	bf54      	ite	pl
 8003df2:	4003      	andpl	r3, r0
          temp |= iocurrent;
 8003df4:	ea48 0303 	orrmi.w	r3, r8, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003df8:	2c10      	cmp	r4, #16
        EXTI->FTSR = temp;
 8003dfa:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfc:	f47f af5d 	bne.w	8003cba <HAL_GPIO_Init+0xa2>
      }
    }
  }
}
 8003e00:	b003      	add	sp, #12
 8003e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003e06:	4823      	ldr	r0, [pc, #140]	; (8003e94 <HAL_GPIO_Init+0x27c>)
 8003e08:	21ad      	movs	r1, #173	; 0xad
 8003e0a:	f7fe fd77 	bl	80028fc <assert_failed>
 8003e0e:	e72d      	b.n	8003c6c <HAL_GPIO_Init+0x54>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	2a03      	cmp	r2, #3
 8003e14:	d81f      	bhi.n	8003e56 <HAL_GPIO_Init+0x23e>
        temp = GPIOx->OSPEEDR; 
 8003e16:	68a8      	ldr	r0, [r5, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e18:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8003e1c:	f04f 0903 	mov.w	r9, #3
 8003e20:	fa09 f90b 	lsl.w	r9, r9, fp
 8003e24:	ea20 0009 	bic.w	r0, r0, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e28:	fa02 f20b 	lsl.w	r2, r2, fp
 8003e2c:	4302      	orrs	r2, r0
        GPIOx->OSPEEDR = temp;
 8003e2e:	60aa      	str	r2, [r5, #8]
        temp = GPIOx->OTYPER;
 8003e30:	6868      	ldr	r0, [r5, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e32:	f3c1 1200 	ubfx	r2, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e36:	ea20 0006 	bic.w	r0, r0, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e3a:	4616      	mov	r6, r2
 8003e3c:	40a6      	lsls	r6, r4
 8003e3e:	4306      	orrs	r6, r0
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e40:	ea6f 0909 	mvn.w	r9, r9
        GPIOx->OTYPER = temp;
 8003e44:	606e      	str	r6, [r5, #4]
 8003e46:	e74f      	b.n	8003ce8 <HAL_GPIO_Init+0xd0>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003e48:	f249 70f7 	movw	r0, #38903	; 0x97f7
 8003e4c:	40d0      	lsrs	r0, r2
 8003e4e:	07c0      	lsls	r0, r0, #31
 8003e50:	f53f af62 	bmi.w	8003d18 <HAL_GPIO_Init+0x100>
 8003e54:	e758      	b.n	8003d08 <HAL_GPIO_Init+0xf0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e56:	21c1      	movs	r1, #193	; 0xc1
 8003e58:	480e      	ldr	r0, [pc, #56]	; (8003e94 <HAL_GPIO_Init+0x27c>)
 8003e5a:	f7fe fd4f 	bl	80028fc <assert_failed>
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	f001 0303 	and.w	r3, r1, #3
 8003e66:	e7d6      	b.n	8003e16 <HAL_GPIO_Init+0x1fe>
 8003e68:	2601      	movs	r6, #1
 8003e6a:	fa06 f202 	lsl.w	r2, r6, r2
 8003e6e:	4310      	orrs	r0, r2
 8003e70:	e79d      	b.n	8003dae <HAL_GPIO_Init+0x196>
 8003e72:	2602      	movs	r6, #2
 8003e74:	fa06 f202 	lsl.w	r2, r6, r2
 8003e78:	4310      	orrs	r0, r2
 8003e7a:	e798      	b.n	8003dae <HAL_GPIO_Init+0x196>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003e7c:	4805      	ldr	r0, [pc, #20]	; (8003e94 <HAL_GPIO_Init+0x27c>)
 8003e7e:	21af      	movs	r1, #175	; 0xaf
 8003e80:	f7fe fd3c 	bl	80028fc <assert_failed>
 8003e84:	e711      	b.n	8003caa <HAL_GPIO_Init+0x92>
 8003e86:	2603      	movs	r6, #3
 8003e88:	fa06 f202 	lsl.w	r2, r6, r2
 8003e8c:	4310      	orrs	r0, r2
 8003e8e:	e78e      	b.n	8003dae <HAL_GPIO_Init+0x196>
 8003e90:	40020000 	.word	0x40020000
 8003e94:	0800c7f8 	.word	0x0800c7f8
 8003e98:	10110000 	.word	0x10110000
 8003e9c:	10220000 	.word	0x10220000
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40020800 	.word	0x40020800
 8003ea8:	40020c00 	.word	0x40020c00
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40013c00 	.word	0x40013c00
 8003eb4:	40020400 	.word	0x40020400

08003eb8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t tmp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003ebc:	4b52      	ldr	r3, [pc, #328]	; (8004008 <HAL_GPIO_DeInit+0x150>)
 8003ebe:	4298      	cmp	r0, r3
{
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003ec6:	d018      	beq.n	8003efa <HAL_GPIO_DeInit+0x42>
 8003ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ecc:	4298      	cmp	r0, r3
 8003ece:	d014      	beq.n	8003efa <HAL_GPIO_DeInit+0x42>
 8003ed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ed4:	4298      	cmp	r0, r3
 8003ed6:	d010      	beq.n	8003efa <HAL_GPIO_DeInit+0x42>
 8003ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003edc:	4298      	cmp	r0, r3
 8003ede:	d00c      	beq.n	8003efa <HAL_GPIO_DeInit+0x42>
 8003ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ee4:	4298      	cmp	r0, r3
 8003ee6:	d008      	beq.n	8003efa <HAL_GPIO_DeInit+0x42>
 8003ee8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003eec:	4298      	cmp	r0, r3
 8003eee:	d004      	beq.n	8003efa <HAL_GPIO_DeInit+0x42>
 8003ef0:	4846      	ldr	r0, [pc, #280]	; (800400c <HAL_GPIO_DeInit+0x154>)
 8003ef2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003ef6:	f7fe fd01 	bl	80028fc <assert_failed>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003efa:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8004008 <HAL_GPIO_DeInit+0x150>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003efe:	f8df e120 	ldr.w	lr, [pc, #288]	; 8004020 <HAL_GPIO_DeInit+0x168>
{
 8003f02:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8003f04:	f04f 0c01 	mov.w	ip, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f08:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f0c:	f04f 0a03 	mov.w	sl, #3
 8003f10:	e002      	b.n	8003f18 <HAL_GPIO_DeInit+0x60>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f12:	3301      	adds	r3, #1
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d068      	beq.n	8003fea <HAL_GPIO_DeInit+0x132>
    ioposition = 0x01U << position;
 8003f18:	fa0c f203 	lsl.w	r2, ip, r3
    if(iocurrent == ioposition)
 8003f1c:	ea32 0106 	bics.w	r1, r2, r6
    iocurrent = (GPIO_Pin) & ioposition;
 8003f20:	ea02 0506 	and.w	r5, r2, r6
    if(iocurrent == ioposition)
 8003f24:	d1f5      	bne.n	8003f12 <HAL_GPIO_DeInit+0x5a>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f26:	f023 0003 	bic.w	r0, r3, #3
 8003f2a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003f2e:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f32:	f003 0103 	and.w	r1, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f36:	6887      	ldr	r7, [r0, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f38:	0089      	lsls	r1, r1, #2
 8003f3a:	fa09 f801 	lsl.w	r8, r9, r1
 8003f3e:	ea08 0707 	and.w	r7, r8, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f42:	455c      	cmp	r4, fp
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f44:	9701      	str	r7, [sp, #4]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f46:	d053      	beq.n	8003ff0 <HAL_GPIO_DeInit+0x138>
 8003f48:	4f31      	ldr	r7, [pc, #196]	; (8004010 <HAL_GPIO_DeInit+0x158>)
 8003f4a:	42bc      	cmp	r4, r7
 8003f4c:	d052      	beq.n	8003ff4 <HAL_GPIO_DeInit+0x13c>
 8003f4e:	4f31      	ldr	r7, [pc, #196]	; (8004014 <HAL_GPIO_DeInit+0x15c>)
 8003f50:	42bc      	cmp	r4, r7
 8003f52:	d052      	beq.n	8003ffa <HAL_GPIO_DeInit+0x142>
 8003f54:	4f30      	ldr	r7, [pc, #192]	; (8004018 <HAL_GPIO_DeInit+0x160>)
 8003f56:	42bc      	cmp	r4, r7
 8003f58:	d053      	beq.n	8004002 <HAL_GPIO_DeInit+0x14a>
 8003f5a:	4f30      	ldr	r7, [pc, #192]	; (800401c <HAL_GPIO_DeInit+0x164>)
 8003f5c:	42bc      	cmp	r4, r7
 8003f5e:	bf14      	ite	ne
 8003f60:	2707      	movne	r7, #7
 8003f62:	2704      	moveq	r7, #4
 8003f64:	fa07 f101 	lsl.w	r1, r7, r1
 8003f68:	9f01      	ldr	r7, [sp, #4]
 8003f6a:	428f      	cmp	r7, r1
 8003f6c:	d11b      	bne.n	8003fa6 <HAL_GPIO_DeInit+0xee>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003f6e:	f8de 1000 	ldr.w	r1, [lr]
 8003f72:	ea21 0105 	bic.w	r1, r1, r5
 8003f76:	f8ce 1000 	str.w	r1, [lr]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f7a:	f8de 1004 	ldr.w	r1, [lr, #4]
 8003f7e:	ea21 0105 	bic.w	r1, r1, r5
 8003f82:	f8ce 1004 	str.w	r1, [lr, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003f86:	f8de 1008 	ldr.w	r1, [lr, #8]
 8003f8a:	ea21 0105 	bic.w	r1, r1, r5
 8003f8e:	f8ce 1008 	str.w	r1, [lr, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003f92:	f8de 100c 	ldr.w	r1, [lr, #12]
 8003f96:	ea21 0505 	bic.w	r5, r1, r5
 8003f9a:	f8ce 500c 	str.w	r5, [lr, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f9e:	6881      	ldr	r1, [r0, #8]
 8003fa0:	ea21 0108 	bic.w	r1, r1, r8
 8003fa4:	6081      	str	r1, [r0, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fa6:	6821      	ldr	r1, [r4, #0]
 8003fa8:	005d      	lsls	r5, r3, #1
 8003faa:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fae:	08d8      	lsrs	r0, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fb0:	ea21 0105 	bic.w	r1, r1, r5
 8003fb4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003fb8:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fba:	f003 0107 	and.w	r1, r3, #7
 8003fbe:	6a07      	ldr	r7, [r0, #32]
 8003fc0:	0089      	lsls	r1, r1, #2
 8003fc2:	fa09 f101 	lsl.w	r1, r9, r1
 8003fc6:	ea27 0101 	bic.w	r1, r7, r1
 8003fca:	6201      	str	r1, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fcc:	68e1      	ldr	r1, [r4, #12]
 8003fce:	ea21 0105 	bic.w	r1, r1, r5
 8003fd2:	60e1      	str	r1, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fd4:	6861      	ldr	r1, [r4, #4]
 8003fd6:	ea21 0202 	bic.w	r2, r1, r2
 8003fda:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fdc:	68a2      	ldr	r2, [r4, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fde:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe0:	ea22 0505 	bic.w	r5, r2, r5
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe4:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe6:	60a5      	str	r5, [r4, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe8:	d196      	bne.n	8003f18 <HAL_GPIO_DeInit+0x60>
    }
  }
}
 8003fea:	b003      	add	sp, #12
 8003fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	e7b9      	b.n	8003f68 <HAL_GPIO_DeInit+0xb0>
 8003ff4:	fa0c f101 	lsl.w	r1, ip, r1
 8003ff8:	e7b6      	b.n	8003f68 <HAL_GPIO_DeInit+0xb0>
 8003ffa:	2702      	movs	r7, #2
 8003ffc:	fa07 f101 	lsl.w	r1, r7, r1
 8004000:	e7b2      	b.n	8003f68 <HAL_GPIO_DeInit+0xb0>
 8004002:	fa0a f101 	lsl.w	r1, sl, r1
 8004006:	e7af      	b.n	8003f68 <HAL_GPIO_DeInit+0xb0>
 8004008:	40020000 	.word	0x40020000
 800400c:	0800c7f8 	.word	0x0800c7f8
 8004010:	40020400 	.word	0x40020400
 8004014:	40020800 	.word	0x40020800
 8004018:	40020c00 	.word	0x40020c00
 800401c:	40021000 	.word	0x40021000
 8004020:	40013c00 	.word	0x40013c00

08004024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004028:	460c      	mov	r4, r1
 800402a:	b129      	cbz	r1, 8004038 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800402c:	692b      	ldr	r3, [r5, #16]
 800402e:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004030:	bf14      	ite	ne
 8004032:	2001      	movne	r0, #1
 8004034:	2000      	moveq	r0, #0
 8004036:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <HAL_GPIO_ReadPin+0x20>)
 800403a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800403e:	f7fe fc5d 	bl	80028fc <assert_failed>
 8004042:	e7f3      	b.n	800402c <HAL_GPIO_ReadPin+0x8>
 8004044:	0800c7f8 	.word	0x0800c7f8

08004048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	4606      	mov	r6, r0
 800404c:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800404e:	460c      	mov	r4, r1
 8004050:	b161      	cbz	r1, 800406c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004052:	2d01      	cmp	r5, #1
 8004054:	d803      	bhi.n	800405e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8004056:	b905      	cbnz	r5, 800405a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004058:	0424      	lsls	r4, r4, #16
 800405a:	61b4      	str	r4, [r6, #24]
  }
}
 800405c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800405e:	4806      	ldr	r0, [pc, #24]	; (8004078 <HAL_GPIO_WritePin+0x30>)
 8004060:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8004064:	f7fe fc4a 	bl	80028fc <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004068:	61b4      	str	r4, [r6, #24]
}
 800406a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800406c:	4802      	ldr	r0, [pc, #8]	; (8004078 <HAL_GPIO_WritePin+0x30>)
 800406e:	f240 119b 	movw	r1, #411	; 0x19b
 8004072:	f7fe fc43 	bl	80028fc <assert_failed>
 8004076:	e7ec      	b.n	8004052 <HAL_GPIO_WritePin+0xa>
 8004078:	0800c7f8 	.word	0x0800c7f8

0800407c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004080:	460c      	mov	r4, r1
 8004082:	b141      	cbz	r1, 8004096 <HAL_GPIO_TogglePin+0x1a>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004084:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004086:	ea04 0301 	and.w	r3, r4, r1
 800408a:	ea24 0401 	bic.w	r4, r4, r1
 800408e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004092:	61ac      	str	r4, [r5, #24]
}
 8004094:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004096:	4803      	ldr	r0, [pc, #12]	; (80040a4 <HAL_GPIO_TogglePin+0x28>)
 8004098:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800409c:	f7fe fc2e 	bl	80028fc <assert_failed>
 80040a0:	e7f0      	b.n	8004084 <HAL_GPIO_TogglePin+0x8>
 80040a2:	bf00      	nop
 80040a4:	0800c7f8 	.word	0x0800c7f8

080040a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80040aa:	6951      	ldr	r1, [r2, #20]
 80040ac:	4201      	tst	r1, r0
 80040ae:	d100      	bne.n	80040b2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80040b0:	4770      	bx	lr
{
 80040b2:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040b4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040b6:	f7fe fd99 	bl	8002bec <HAL_GPIO_EXTI_Callback>
  }
}
 80040ba:	bd08      	pop	{r3, pc}
 80040bc:	40013c00 	.word	0x40013c00

080040c0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	4605      	mov	r5, r0
 80040c4:	460e      	mov	r6, r1
 80040c6:	4617      	mov	r7, r2
 80040c8:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040ca:	682c      	ldr	r4, [r5, #0]
 80040cc:	d003      	beq.n	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 80040ce:	e009      	b.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040d0:	6963      	ldr	r3, [r4, #20]
 80040d2:	055b      	lsls	r3, r3, #21
 80040d4:	d424      	bmi.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040d6:	6963      	ldr	r3, [r4, #20]
 80040d8:	43db      	mvns	r3, r3
 80040da:	f013 0308 	ands.w	r3, r3, #8
 80040de:	d1f7      	bne.n	80040d0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80040e0:	4618      	mov	r0, r3
}
 80040e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040e4:	6963      	ldr	r3, [r4, #20]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	f013 0308 	ands.w	r3, r3, #8
 80040ec:	d0f8      	beq.n	80040e0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ee:	6963      	ldr	r3, [r4, #20]
 80040f0:	0559      	lsls	r1, r3, #21
 80040f2:	d415      	bmi.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f4:	f7fe fff4 	bl	80030e0 <HAL_GetTick>
 80040f8:	1bc0      	subs	r0, r0, r7
 80040fa:	4286      	cmp	r6, r0
 80040fc:	d301      	bcc.n	8004102 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x42>
 80040fe:	2e00      	cmp	r6, #0
 8004100:	d1e2      	bne.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004102:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004104:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004106:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004108:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004110:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004112:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004116:	f043 0320 	orr.w	r3, r3, #32
 800411a:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 800411c:	2001      	movs	r0, #1
}
 800411e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004120:	6823      	ldr	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004122:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004124:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 800412c:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004130:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004132:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004134:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004138:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800413c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800413e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004148:	2001      	movs	r0, #1
}
 800414a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800414c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	4605      	mov	r5, r0
 8004150:	460e      	mov	r6, r1
 8004152:	4617      	mov	r7, r2
 8004154:	1c72      	adds	r2, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004156:	682c      	ldr	r4, [r5, #0]
 8004158:	d003      	beq.n	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 800415a:	e009      	b.n	8004170 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800415c:	6963      	ldr	r3, [r4, #20]
 800415e:	055b      	lsls	r3, r3, #21
 8004160:	d424      	bmi.n	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004162:	6963      	ldr	r3, [r4, #20]
 8004164:	43db      	mvns	r3, r3
 8004166:	f013 0302 	ands.w	r3, r3, #2
 800416a:	d1f7      	bne.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>
  return HAL_OK;
 800416c:	4618      	mov	r0, r3
}
 800416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004170:	6963      	ldr	r3, [r4, #20]
 8004172:	43db      	mvns	r3, r3
 8004174:	f013 0302 	ands.w	r3, r3, #2
 8004178:	d0f8      	beq.n	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800417a:	6963      	ldr	r3, [r4, #20]
 800417c:	0559      	lsls	r1, r3, #21
 800417e:	d415      	bmi.n	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004180:	f7fe ffae 	bl	80030e0 <HAL_GetTick>
 8004184:	1bc0      	subs	r0, r0, r7
 8004186:	4286      	cmp	r6, r0
 8004188:	d301      	bcc.n	800418e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 800418a:	2e00      	cmp	r6, #0
 800418c:	d1e2      	bne.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800418e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004190:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004192:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004194:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004198:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800419c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800419e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	f043 0320 	orr.w	r3, r3, #32
 80041a6:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80041a8:	2001      	movs	r0, #1
}
 80041aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ac:	6823      	ldr	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041ae:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b0:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 80041b8:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041bc:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041c0:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80041ca:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ce:	f043 0304 	orr.w	r3, r3, #4
 80041d2:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80041d4:	2001      	movs	r0, #1
}
 80041d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041d8 <I2C_RequestMemoryWrite>:
{
 80041d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041dc:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041de:	6800      	ldr	r0, [r0, #0]
{
 80041e0:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e2:	6807      	ldr	r7, [r0, #0]
{
 80041e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80041e6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ea:	f447 7780 	orr.w	r7, r7, #256	; 0x100
{
 80041ee:	460d      	mov	r5, r1
 80041f0:	4690      	mov	r8, r2
 80041f2:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041f4:	6007      	str	r7, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80041f6:	1c72      	adds	r2, r6, #1
 80041f8:	d111      	bne.n	800421e <I2C_RequestMemoryWrite+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041fa:	6943      	ldr	r3, [r0, #20]
 80041fc:	07db      	lsls	r3, r3, #31
 80041fe:	d5fc      	bpl.n	80041fa <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004200:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004204:	6105      	str	r5, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004206:	464a      	mov	r2, r9
 8004208:	4631      	mov	r1, r6
 800420a:	4620      	mov	r0, r4
 800420c:	f7ff ff9e 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8004210:	4605      	mov	r5, r0
 8004212:	b180      	cbz	r0, 8004236 <I2C_RequestMemoryWrite+0x5e>
      return HAL_ERROR;
 8004214:	2501      	movs	r5, #1
}
 8004216:	4628      	mov	r0, r5
 8004218:	b002      	add	sp, #8
 800421a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800421e:	6943      	ldr	r3, [r0, #20]
 8004220:	07df      	lsls	r7, r3, #31
 8004222:	d4ed      	bmi.n	8004200 <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004224:	f7fe ff5c 	bl	80030e0 <HAL_GetTick>
 8004228:	eba0 0009 	sub.w	r0, r0, r9
 800422c:	4286      	cmp	r6, r0
 800422e:	d32a      	bcc.n	8004286 <I2C_RequestMemoryWrite+0xae>
 8004230:	b34e      	cbz	r6, 8004286 <I2C_RequestMemoryWrite+0xae>
 8004232:	6820      	ldr	r0, [r4, #0]
 8004234:	e7df      	b.n	80041f6 <I2C_RequestMemoryWrite+0x1e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	9001      	str	r0, [sp, #4]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	9201      	str	r2, [sp, #4]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	9201      	str	r2, [sp, #4]
 8004242:	9a01      	ldr	r2, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004244:	1c72      	adds	r2, r6, #1
 8004246:	d14d      	bne.n	80042e4 <I2C_RequestMemoryWrite+0x10c>
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	0617      	lsls	r7, r2, #24
 800424c:	d434      	bmi.n	80042b8 <I2C_RequestMemoryWrite+0xe0>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	0550      	lsls	r0, r2, #21
 8004252:	d5f9      	bpl.n	8004248 <I2C_RequestMemoryWrite+0x70>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004254:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004256:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800425a:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425c:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800425e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004260:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004264:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004268:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004276:	2b04      	cmp	r3, #4
 8004278:	d1cc      	bne.n	8004214 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	6813      	ldr	r3, [r2, #0]
 800427e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	e7c6      	b.n	8004214 <I2C_RequestMemoryWrite+0x3c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004286:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004288:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800428a:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800428c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004290:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004294:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004296:	6821      	ldr	r1, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8004298:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800429c:	f043 0320 	orr.w	r3, r3, #32
 80042a0:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042a2:	680b      	ldr	r3, [r1, #0]
 80042a4:	05d9      	lsls	r1, r3, #23
 80042a6:	d502      	bpl.n	80042ae <I2C_RequestMemoryWrite+0xd6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ac:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80042ae:	2503      	movs	r5, #3
}
 80042b0:	4628      	mov	r0, r5
 80042b2:	b002      	add	sp, #8
 80042b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042b8:	f1ba 0f01 	cmp.w	sl, #1
 80042bc:	d106      	bne.n	80042cc <I2C_RequestMemoryWrite+0xf4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042be:	fa5f f288 	uxtb.w	r2, r8
}
 80042c2:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c4:	611a      	str	r2, [r3, #16]
}
 80042c6:	b002      	add	sp, #8
 80042c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042cc:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80042d0:	611a      	str	r2, [r3, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042d2:	1c77      	adds	r7, r6, #1
 80042d4:	d115      	bne.n	8004302 <I2C_RequestMemoryWrite+0x12a>
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	0610      	lsls	r0, r2, #24
 80042da:	d4f0      	bmi.n	80042be <I2C_RequestMemoryWrite+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	0551      	lsls	r1, r2, #21
 80042e0:	d5f9      	bpl.n	80042d6 <I2C_RequestMemoryWrite+0xfe>
 80042e2:	e7b7      	b.n	8004254 <I2C_RequestMemoryWrite+0x7c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	0611      	lsls	r1, r2, #24
 80042e8:	d4e6      	bmi.n	80042b8 <I2C_RequestMemoryWrite+0xe0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	0551      	lsls	r1, r2, #21
 80042ee:	d4b1      	bmi.n	8004254 <I2C_RequestMemoryWrite+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7fe fef6 	bl	80030e0 <HAL_GetTick>
 80042f4:	eba0 0009 	sub.w	r0, r0, r9
 80042f8:	4286      	cmp	r6, r0
 80042fa:	d311      	bcc.n	8004320 <I2C_RequestMemoryWrite+0x148>
 80042fc:	b186      	cbz	r6, 8004320 <I2C_RequestMemoryWrite+0x148>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	e7a0      	b.n	8004244 <I2C_RequestMemoryWrite+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	0612      	lsls	r2, r2, #24
 8004306:	d4da      	bmi.n	80042be <I2C_RequestMemoryWrite+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	0552      	lsls	r2, r2, #21
 800430c:	d4a2      	bmi.n	8004254 <I2C_RequestMemoryWrite+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	f7fe fee7 	bl	80030e0 <HAL_GetTick>
 8004312:	eba0 0009 	sub.w	r0, r0, r9
 8004316:	4286      	cmp	r6, r0
 8004318:	d302      	bcc.n	8004320 <I2C_RequestMemoryWrite+0x148>
 800431a:	b10e      	cbz	r6, 8004320 <I2C_RequestMemoryWrite+0x148>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	e7d8      	b.n	80042d2 <I2C_RequestMemoryWrite+0xfa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004320:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004322:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004324:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004326:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800432a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800432e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004330:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	f043 0320 	orr.w	r3, r3, #32
 8004338:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800433a:	e79b      	b.n	8004274 <I2C_RequestMemoryWrite+0x9c>

0800433c <I2C_RequestMemoryRead>:
{
 800433c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	6800      	ldr	r0, [r0, #0]
 8004344:	6807      	ldr	r7, [r0, #0]
 8004346:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 800434a:	6007      	str	r7, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434c:	6805      	ldr	r5, [r0, #0]
{
 800434e:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004350:	f445 7580 	orr.w	r5, r5, #256	; 0x100
{
 8004354:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004356:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800435a:	6005      	str	r5, [r0, #0]
{
 800435c:	468a      	mov	sl, r1
 800435e:	4617      	mov	r7, r2
 8004360:	4698      	mov	r8, r3
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004362:	1c73      	adds	r3, r6, #1
 8004364:	d111      	bne.n	800438a <I2C_RequestMemoryRead+0x4e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004366:	6943      	ldr	r3, [r0, #20]
 8004368:	07dd      	lsls	r5, r3, #31
 800436a:	d5fc      	bpl.n	8004366 <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800436c:	f00a 03fe 	and.w	r3, sl, #254	; 0xfe
 8004370:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004372:	464a      	mov	r2, r9
 8004374:	4631      	mov	r1, r6
 8004376:	4620      	mov	r0, r4
 8004378:	f7ff fee8 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800437c:	fa5f fa8a 	uxtb.w	sl, sl
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004380:	b178      	cbz	r0, 80043a2 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8004382:	2001      	movs	r0, #1
}
 8004384:	b002      	add	sp, #8
 8004386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800438a:	6943      	ldr	r3, [r0, #20]
 800438c:	07d9      	lsls	r1, r3, #31
 800438e:	d4ed      	bmi.n	800436c <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004390:	f7fe fea6 	bl	80030e0 <HAL_GetTick>
 8004394:	eba0 0009 	sub.w	r0, r0, r9
 8004398:	4286      	cmp	r6, r0
 800439a:	d32a      	bcc.n	80043f2 <I2C_RequestMemoryRead+0xb6>
 800439c:	b34e      	cbz	r6, 80043f2 <I2C_RequestMemoryRead+0xb6>
 800439e:	6820      	ldr	r0, [r4, #0]
 80043a0:	e7df      	b.n	8004362 <I2C_RequestMemoryRead+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a2:	6825      	ldr	r5, [r4, #0]
 80043a4:	9001      	str	r0, [sp, #4]
 80043a6:	696b      	ldr	r3, [r5, #20]
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	69ab      	ldr	r3, [r5, #24]
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b0:	1c73      	adds	r3, r6, #1
 80043b2:	d171      	bne.n	8004498 <I2C_RequestMemoryRead+0x15c>
 80043b4:	696b      	ldr	r3, [r5, #20]
 80043b6:	0618      	lsls	r0, r3, #24
 80043b8:	d433      	bmi.n	8004422 <I2C_RequestMemoryRead+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ba:	696b      	ldr	r3, [r5, #20]
 80043bc:	0559      	lsls	r1, r3, #21
 80043be:	d5f9      	bpl.n	80043b4 <I2C_RequestMemoryRead+0x78>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80043c0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80043c2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80043c8:	6169      	str	r1, [r5, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80043ca:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80043d6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d1cd      	bne.n	8004382 <I2C_RequestMemoryRead+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	6822      	ldr	r2, [r4, #0]
 80043e8:	6813      	ldr	r3, [r2, #0]
 80043ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e7c7      	b.n	8004382 <I2C_RequestMemoryRead+0x46>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043f2:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80043f4:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043f6:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043fc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004400:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004402:	6821      	ldr	r1, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8004404:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	f043 0320 	orr.w	r3, r3, #32
 800440c:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800440e:	680b      	ldr	r3, [r1, #0]
 8004410:	05d8      	lsls	r0, r3, #23
 8004412:	d502      	bpl.n	800441a <I2C_RequestMemoryRead+0xde>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004418:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800441a:	2003      	movs	r0, #3
}
 800441c:	b002      	add	sp, #8
 800441e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004422:	f1b8 0f01 	cmp.w	r8, #1
 8004426:	d10a      	bne.n	800443e <I2C_RequestMemoryRead+0x102>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004428:	b2ff      	uxtb	r7, r7
 800442a:	612f      	str	r7, [r5, #16]
 800442c:	1c71      	adds	r1, r6, #1
 800442e:	d142      	bne.n	80044b6 <I2C_RequestMemoryRead+0x17a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004430:	696b      	ldr	r3, [r5, #20]
 8004432:	061a      	lsls	r2, r3, #24
 8004434:	d40e      	bmi.n	8004454 <I2C_RequestMemoryRead+0x118>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004436:	696b      	ldr	r3, [r5, #20]
 8004438:	055b      	lsls	r3, r3, #21
 800443a:	d5f9      	bpl.n	8004430 <I2C_RequestMemoryRead+0xf4>
 800443c:	e7c0      	b.n	80043c0 <I2C_RequestMemoryRead+0x84>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800443e:	0a3b      	lsrs	r3, r7, #8
 8004440:	612b      	str	r3, [r5, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004442:	1c70      	adds	r0, r6, #1
 8004444:	d147      	bne.n	80044d6 <I2C_RequestMemoryRead+0x19a>
 8004446:	696b      	ldr	r3, [r5, #20]
 8004448:	0619      	lsls	r1, r3, #24
 800444a:	d4ed      	bmi.n	8004428 <I2C_RequestMemoryRead+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800444c:	696b      	ldr	r3, [r5, #20]
 800444e:	055a      	lsls	r2, r3, #21
 8004450:	d5f9      	bpl.n	8004446 <I2C_RequestMemoryRead+0x10a>
 8004452:	e7b5      	b.n	80043c0 <I2C_RequestMemoryRead+0x84>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445a:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800445c:	1c71      	adds	r1, r6, #1
 800445e:	d10e      	bne.n	800447e <I2C_RequestMemoryRead+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004460:	696b      	ldr	r3, [r5, #20]
 8004462:	07da      	lsls	r2, r3, #31
 8004464:	d5fc      	bpl.n	8004460 <I2C_RequestMemoryRead+0x124>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004466:	f04a 0101 	orr.w	r1, sl, #1
 800446a:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800446c:	464a      	mov	r2, r9
 800446e:	4631      	mov	r1, r6
 8004470:	4620      	mov	r0, r4
 8004472:	f7ff fe6b 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
    return HAL_TIMEOUT;
 8004476:	3800      	subs	r0, #0
 8004478:	bf18      	it	ne
 800447a:	2001      	movne	r0, #1
 800447c:	e782      	b.n	8004384 <I2C_RequestMemoryRead+0x48>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800447e:	696b      	ldr	r3, [r5, #20]
 8004480:	07db      	lsls	r3, r3, #31
 8004482:	d4f0      	bmi.n	8004466 <I2C_RequestMemoryRead+0x12a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004484:	f7fe fe2c 	bl	80030e0 <HAL_GetTick>
 8004488:	eba0 0009 	sub.w	r0, r0, r9
 800448c:	4286      	cmp	r6, r0
 800448e:	d3b0      	bcc.n	80043f2 <I2C_RequestMemoryRead+0xb6>
 8004490:	2e00      	cmp	r6, #0
 8004492:	d0ae      	beq.n	80043f2 <I2C_RequestMemoryRead+0xb6>
 8004494:	6825      	ldr	r5, [r4, #0]
 8004496:	e7e1      	b.n	800445c <I2C_RequestMemoryRead+0x120>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004498:	696b      	ldr	r3, [r5, #20]
 800449a:	061a      	lsls	r2, r3, #24
 800449c:	d4c1      	bmi.n	8004422 <I2C_RequestMemoryRead+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800449e:	696b      	ldr	r3, [r5, #20]
 80044a0:	055a      	lsls	r2, r3, #21
 80044a2:	d48d      	bmi.n	80043c0 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a4:	f7fe fe1c 	bl	80030e0 <HAL_GetTick>
 80044a8:	eba0 0009 	sub.w	r0, r0, r9
 80044ac:	4286      	cmp	r6, r0
 80044ae:	d322      	bcc.n	80044f6 <I2C_RequestMemoryRead+0x1ba>
 80044b0:	b30e      	cbz	r6, 80044f6 <I2C_RequestMemoryRead+0x1ba>
 80044b2:	6825      	ldr	r5, [r4, #0]
 80044b4:	e77c      	b.n	80043b0 <I2C_RequestMemoryRead+0x74>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b6:	696b      	ldr	r3, [r5, #20]
 80044b8:	061f      	lsls	r7, r3, #24
 80044ba:	d4cb      	bmi.n	8004454 <I2C_RequestMemoryRead+0x118>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044bc:	696b      	ldr	r3, [r5, #20]
 80044be:	0558      	lsls	r0, r3, #21
 80044c0:	f53f af7e 	bmi.w	80043c0 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c4:	f7fe fe0c 	bl	80030e0 <HAL_GetTick>
 80044c8:	eba0 0009 	sub.w	r0, r0, r9
 80044cc:	4286      	cmp	r6, r0
 80044ce:	d312      	bcc.n	80044f6 <I2C_RequestMemoryRead+0x1ba>
 80044d0:	b18e      	cbz	r6, 80044f6 <I2C_RequestMemoryRead+0x1ba>
 80044d2:	6825      	ldr	r5, [r4, #0]
 80044d4:	e7aa      	b.n	800442c <I2C_RequestMemoryRead+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d6:	696b      	ldr	r3, [r5, #20]
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	d4a5      	bmi.n	8004428 <I2C_RequestMemoryRead+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044dc:	696b      	ldr	r3, [r5, #20]
 80044de:	055b      	lsls	r3, r3, #21
 80044e0:	f53f af6e 	bmi.w	80043c0 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e4:	f7fe fdfc 	bl	80030e0 <HAL_GetTick>
 80044e8:	eba0 0009 	sub.w	r0, r0, r9
 80044ec:	4286      	cmp	r6, r0
 80044ee:	d302      	bcc.n	80044f6 <I2C_RequestMemoryRead+0x1ba>
 80044f0:	b10e      	cbz	r6, 80044f6 <I2C_RequestMemoryRead+0x1ba>
 80044f2:	6825      	ldr	r5, [r4, #0]
 80044f4:	e7a5      	b.n	8004442 <I2C_RequestMemoryRead+0x106>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044f6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80044f8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044fa:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004500:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004504:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004506:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800450a:	f043 0320 	orr.w	r3, r3, #32
 800450e:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004510:	e766      	b.n	80043e0 <I2C_RequestMemoryRead+0xa4>
 8004512:	bf00      	nop

08004514 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004514:	2800      	cmp	r0, #0
 8004516:	f000 8135 	beq.w	8004784 <HAL_I2C_Init+0x270>
{
 800451a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800451c:	4a9a      	ldr	r2, [pc, #616]	; (8004788 <HAL_I2C_Init+0x274>)
 800451e:	6803      	ldr	r3, [r0, #0]
 8004520:	4293      	cmp	r3, r2
 8004522:	4604      	mov	r4, r0
 8004524:	d00c      	beq.n	8004540 <HAL_I2C_Init+0x2c>
 8004526:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800452a:	4293      	cmp	r3, r2
 800452c:	d008      	beq.n	8004540 <HAL_I2C_Init+0x2c>
 800452e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_I2C_Init+0x2c>
 8004536:	4895      	ldr	r0, [pc, #596]	; (800478c <HAL_I2C_Init+0x278>)
 8004538:	f240 11bf 	movw	r1, #447	; 0x1bf
 800453c:	f7fe f9de 	bl	80028fc <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004540:	6863      	ldr	r3, [r4, #4]
 8004542:	4a93      	ldr	r2, [pc, #588]	; (8004790 <HAL_I2C_Init+0x27c>)
 8004544:	3b01      	subs	r3, #1
 8004546:	4293      	cmp	r3, r2
 8004548:	f200 8103 	bhi.w	8004752 <HAL_I2C_Init+0x23e>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800454c:	68a3      	ldr	r3, [r4, #8]
 800454e:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8004552:	f040 80d9 	bne.w	8004708 <HAL_I2C_Init+0x1f4>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004556:	68e3      	ldr	r3, [r4, #12]
 8004558:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800455c:	f023 0303 	bic.w	r3, r3, #3
 8004560:	2b00      	cmp	r3, #0
 8004562:	f040 80de 	bne.w	8004722 <HAL_I2C_Init+0x20e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004566:	6923      	ldr	r3, [r4, #16]
 8004568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800456c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004570:	d004      	beq.n	800457c <HAL_I2C_Init+0x68>
 8004572:	4886      	ldr	r0, [pc, #536]	; (800478c <HAL_I2C_Init+0x278>)
 8004574:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004578:	f7fe f9c0 	bl	80028fc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800457c:	6963      	ldr	r3, [r4, #20]
 800457e:	2b01      	cmp	r3, #1
 8004580:	f200 80d5 	bhi.w	800472e <HAL_I2C_Init+0x21a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004584:	69a3      	ldr	r3, [r4, #24]
 8004586:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 800458a:	f040 80da 	bne.w	8004742 <HAL_I2C_Init+0x22e>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800458e:	69e3      	ldr	r3, [r4, #28]
 8004590:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8004594:	d004      	beq.n	80045a0 <HAL_I2C_Init+0x8c>
 8004596:	487d      	ldr	r0, [pc, #500]	; (800478c <HAL_I2C_Init+0x278>)
 8004598:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800459c:	f7fe f9ae 	bl	80028fc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80045a0:	6a23      	ldr	r3, [r4, #32]
 80045a2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80045a6:	f040 809d 	bne.w	80046e4 <HAL_I2C_Init+0x1d0>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045aa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80045ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80a2 	beq.w	80046fc <HAL_I2C_Init+0x1e8>
  __HAL_I2C_DISABLE(hi2c);
 80045b8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80045ba:	2224      	movs	r2, #36	; 0x24
 80045bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045d8:	f001 feda 	bl	8006390 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045dc:	6865      	ldr	r5, [r4, #4]
 80045de:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <HAL_I2C_Init+0x280>)
 80045e0:	429d      	cmp	r5, r3
 80045e2:	d84e      	bhi.n	8004682 <HAL_I2C_Init+0x16e>
 80045e4:	4b6c      	ldr	r3, [pc, #432]	; (8004798 <HAL_I2C_Init+0x284>)
 80045e6:	4298      	cmp	r0, r3
 80045e8:	f240 80b1 	bls.w	800474e <HAL_I2C_Init+0x23a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045ec:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80045ee:	4b6b      	ldr	r3, [pc, #428]	; (800479c <HAL_I2C_Init+0x288>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045f0:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80045f2:	fba3 6300 	umull	r6, r3, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045f6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80045fa:	ea41 4193 	orr.w	r1, r1, r3, lsr #18
 80045fe:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004600:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8004602:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004604:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004608:	3301      	adds	r3, #1
 800460a:	430b      	orrs	r3, r1
 800460c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800460e:	69d1      	ldr	r1, [r2, #28]
 8004610:	3801      	subs	r0, #1
 8004612:	006b      	lsls	r3, r5, #1
 8004614:	fbb0 f3f3 	udiv	r3, r0, r3
 8004618:	f640 70fc 	movw	r0, #4092	; 0xffc
 800461c:	3301      	adds	r3, #1
 800461e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004622:	4203      	tst	r3, r0
 8004624:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004628:	f040 8099 	bne.w	800475e <HAL_I2C_Init+0x24a>
 800462c:	2304      	movs	r3, #4
 800462e:	430b      	orrs	r3, r1
 8004630:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004632:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8004636:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004638:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800463a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 800463e:	432b      	orrs	r3, r5
 8004640:	4303      	orrs	r3, r0
 8004642:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004644:	6890      	ldr	r0, [r2, #8]
 8004646:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004648:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800464a:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 800464e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004652:	4329      	orrs	r1, r5
 8004654:	4301      	orrs	r1, r0
 8004656:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004658:	68d1      	ldr	r1, [r2, #12]
 800465a:	69a0      	ldr	r0, [r4, #24]
 800465c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004660:	4303      	orrs	r3, r0
 8004662:	430b      	orrs	r3, r1
 8004664:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004666:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004668:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 800466a:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800466e:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8004670:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004672:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004674:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004678:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800467a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 800467e:	4618      	mov	r0, r3
}
 8004680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_I2C_Init+0x28c>)
 8004684:	4298      	cmp	r0, r3
 8004686:	d962      	bls.n	800474e <HAL_I2C_Init+0x23a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004688:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800468a:	4944      	ldr	r1, [pc, #272]	; (800479c <HAL_I2C_Init+0x288>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800468c:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800468e:	4f45      	ldr	r7, [pc, #276]	; (80047a4 <HAL_I2C_Init+0x290>)
  freqrange = I2C_FREQRANGE(pclk1);
 8004690:	fba1 3100 	umull	r3, r1, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004694:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8004698:	ea46 4691 	orr.w	r6, r6, r1, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800469c:	f44f 7396 	mov.w	r3, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80046a0:	0c89      	lsrs	r1, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046a2:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046a4:	fb03 f301 	mul.w	r3, r3, r1
 80046a8:	fba7 1303 	umull	r1, r3, r7, r3
 80046ac:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046ae:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046b0:	099b      	lsrs	r3, r3, #6
 80046b2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80046b6:	3301      	adds	r3, #1
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046bc:	69d1      	ldr	r1, [r2, #28]
 80046be:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80046c2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80046c6:	2e00      	cmp	r6, #0
 80046c8:	d14c      	bne.n	8004764 <HAL_I2C_Init+0x250>
 80046ca:	3801      	subs	r0, #1
 80046cc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80046d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d050      	beq.n	8004780 <HAL_I2C_Init+0x26c>
 80046de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e2:	e7a4      	b.n	800462e <HAL_I2C_Init+0x11a>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80046e4:	4829      	ldr	r0, [pc, #164]	; (800478c <HAL_I2C_Init+0x278>)
 80046e6:	f240 11c7 	movw	r1, #455	; 0x1c7
 80046ea:	f7fe f907 	bl	80028fc <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80046f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f47f af5e 	bne.w	80045b8 <HAL_I2C_Init+0xa4>
    hi2c->Lock = HAL_UNLOCKED;
 80046fc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004700:	4620      	mov	r0, r4
 8004702:	f7fe f813 	bl	800272c <HAL_I2C_MspInit>
 8004706:	e757      	b.n	80045b8 <HAL_I2C_Init+0xa4>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004708:	4820      	ldr	r0, [pc, #128]	; (800478c <HAL_I2C_Init+0x278>)
 800470a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800470e:	f7fe f8f5 	bl	80028fc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004712:	68e3      	ldr	r3, [r4, #12]
 8004714:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004718:	f023 0303 	bic.w	r3, r3, #3
 800471c:	2b00      	cmp	r3, #0
 800471e:	f43f af22 	beq.w	8004566 <HAL_I2C_Init+0x52>
 8004722:	481a      	ldr	r0, [pc, #104]	; (800478c <HAL_I2C_Init+0x278>)
 8004724:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004728:	f7fe f8e8 	bl	80028fc <assert_failed>
 800472c:	e71b      	b.n	8004566 <HAL_I2C_Init+0x52>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800472e:	4817      	ldr	r0, [pc, #92]	; (800478c <HAL_I2C_Init+0x278>)
 8004730:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004734:	f7fe f8e2 	bl	80028fc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004738:	69a3      	ldr	r3, [r4, #24]
 800473a:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 800473e:	f43f af26 	beq.w	800458e <HAL_I2C_Init+0x7a>
 8004742:	4812      	ldr	r0, [pc, #72]	; (800478c <HAL_I2C_Init+0x278>)
 8004744:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004748:	f7fe f8d8 	bl	80028fc <assert_failed>
 800474c:	e71f      	b.n	800458e <HAL_I2C_Init+0x7a>
    return HAL_ERROR;
 800474e:	2001      	movs	r0, #1
}
 8004750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004752:	480e      	ldr	r0, [pc, #56]	; (800478c <HAL_I2C_Init+0x278>)
 8004754:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004758:	f7fe f8d0 	bl	80028fc <assert_failed>
 800475c:	e6f6      	b.n	800454c <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800475e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004762:	e764      	b.n	800462e <HAL_I2C_Init+0x11a>
 8004764:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8004768:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800476c:	3801      	subs	r0, #1
 800476e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004772:	3301      	adds	r3, #1
 8004774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004778:	b113      	cbz	r3, 8004780 <HAL_I2C_Init+0x26c>
 800477a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800477e:	e756      	b.n	800462e <HAL_I2C_Init+0x11a>
 8004780:	2301      	movs	r3, #1
 8004782:	e754      	b.n	800462e <HAL_I2C_Init+0x11a>
    return HAL_ERROR;
 8004784:	2001      	movs	r0, #1
}
 8004786:	4770      	bx	lr
 8004788:	40005400 	.word	0x40005400
 800478c:	0800c834 	.word	0x0800c834
 8004790:	00061a7f 	.word	0x00061a7f
 8004794:	000186a0 	.word	0x000186a0
 8004798:	001e847f 	.word	0x001e847f
 800479c:	431bde83 	.word	0x431bde83
 80047a0:	003d08ff 	.word	0x003d08ff
 80047a4:	10624dd3 	.word	0x10624dd3

080047a8 <HAL_I2C_Master_Transmit>:
{
 80047a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ac:	4604      	mov	r4, r0
 80047ae:	b082      	sub	sp, #8
 80047b0:	469a      	mov	sl, r3
 80047b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80047b4:	4688      	mov	r8, r1
 80047b6:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7fe fc92 	bl	80030e0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80047bc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d005      	beq.n	80047d0 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 80047c4:	f04f 0802 	mov.w	r8, #2
}
 80047c8:	4640      	mov	r0, r8
 80047ca:	b002      	add	sp, #8
 80047cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d0:	4607      	mov	r7, r0
 80047d2:	e005      	b.n	80047e0 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d4:	f7fe fc84 	bl	80030e0 <HAL_GetTick>
 80047d8:	1bc0      	subs	r0, r0, r7
 80047da:	2819      	cmp	r0, #25
 80047dc:	f200 80f7 	bhi.w	80049ce <HAL_I2C_Master_Transmit+0x226>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	699d      	ldr	r5, [r3, #24]
 80047e4:	43ed      	mvns	r5, r5
 80047e6:	f015 0502 	ands.w	r5, r5, #2
 80047ea:	d0f3      	beq.n	80047d4 <HAL_I2C_Master_Transmit+0x2c>
    __HAL_LOCK(hi2c);
 80047ec:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80047f0:	2a01      	cmp	r2, #1
 80047f2:	d0e7      	beq.n	80047c4 <HAL_I2C_Master_Transmit+0x1c>
 80047f4:	2201      	movs	r2, #1
 80047f6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	07d2      	lsls	r2, r2, #31
 80047fe:	d574      	bpl.n	80048ea <HAL_I2C_Master_Transmit+0x142>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004800:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004802:	488c      	ldr	r0, [pc, #560]	; (8004a34 <HAL_I2C_Master_Transmit+0x28c>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004808:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800480a:	2221      	movs	r2, #33	; 0x21
 800480c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004810:	2210      	movs	r2, #16
 8004812:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004816:	2200      	movs	r2, #0
 8004818:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800481a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800481e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004820:	62e0      	str	r0, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004822:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8004824:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004828:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 800482a:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800482c:	d006      	beq.n	800483c <HAL_I2C_Master_Transmit+0x94>
 800482e:	2a01      	cmp	r2, #1
 8004830:	d004      	beq.n	800483c <HAL_I2C_Master_Transmit+0x94>
 8004832:	4282      	cmp	r2, r0
 8004834:	d002      	beq.n	800483c <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004836:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004838:	2a12      	cmp	r2, #18
 800483a:	d103      	bne.n	8004844 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	1c75      	adds	r5, r6, #1
 8004846:	d142      	bne.n	80048ce <HAL_I2C_Master_Transmit+0x126>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	07d0      	lsls	r0, r2, #31
 800484c:	d5fc      	bpl.n	8004848 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800484e:	6922      	ldr	r2, [r4, #16]
 8004850:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004854:	d14e      	bne.n	80048f4 <HAL_I2C_Master_Transmit+0x14c>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004856:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 800485a:	6119      	str	r1, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800485c:	463a      	mov	r2, r7
 800485e:	4631      	mov	r1, r6
 8004860:	4620      	mov	r0, r4
 8004862:	f7ff fc73 	bl	800414c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8004866:	4680      	mov	r8, r0
 8004868:	2800      	cmp	r0, #0
 800486a:	d12a      	bne.n	80048c2 <HAL_I2C_Master_Transmit+0x11a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	9001      	str	r0, [sp, #4]
 8004870:	695a      	ldr	r2, [r3, #20]
 8004872:	9201      	str	r2, [sp, #4]
 8004874:	6999      	ldr	r1, [r3, #24]
    while (hi2c->XferSize > 0U)
 8004876:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004878:	9101      	str	r1, [sp, #4]
 800487a:	9901      	ldr	r1, [sp, #4]
    while (hi2c->XferSize > 0U)
 800487c:	2a00      	cmp	r2, #0
 800487e:	d07a      	beq.n	8004976 <HAL_I2C_Master_Transmit+0x1ce>
 8004880:	1c75      	adds	r5, r6, #1
 8004882:	f040 8085 	bne.w	8004990 <HAL_I2C_Master_Transmit+0x1e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	0610      	lsls	r0, r2, #24
 800488a:	d446      	bmi.n	800491a <HAL_I2C_Master_Transmit+0x172>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	0551      	lsls	r1, r2, #21
 8004890:	d5f9      	bpl.n	8004886 <HAL_I2C_Master_Transmit+0xde>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004892:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004894:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004898:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489a:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800489c:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800489e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80048a8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ac:	f043 0304 	orr.w	r3, r3, #4
 80048b0:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d104      	bne.n	80048c2 <HAL_I2C_Master_Transmit+0x11a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b8:	6822      	ldr	r2, [r4, #0]
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048c0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80048c2:	f04f 0801 	mov.w	r8, #1
}
 80048c6:	4640      	mov	r0, r8
 80048c8:	b002      	add	sp, #8
 80048ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	07d1      	lsls	r1, r2, #31
 80048d2:	d4bc      	bmi.n	800484e <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d4:	f7fe fc04 	bl	80030e0 <HAL_GetTick>
 80048d8:	1bc0      	subs	r0, r0, r7
 80048da:	4286      	cmp	r6, r0
 80048dc:	f0c0 8084 	bcc.w	80049e8 <HAL_I2C_Master_Transmit+0x240>
 80048e0:	2e00      	cmp	r6, #0
 80048e2:	f000 8081 	beq.w	80049e8 <HAL_I2C_Master_Transmit+0x240>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	e7ac      	b.n	8004844 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e785      	b.n	8004800 <HAL_I2C_Master_Transmit+0x58>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048f4:	ea4f 12e8 	mov.w	r2, r8, asr #7
 80048f8:	f002 0206 	and.w	r2, r2, #6
 80048fc:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004900:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004902:	4631      	mov	r1, r6
 8004904:	463a      	mov	r2, r7
 8004906:	4620      	mov	r0, r4
 8004908:	f7ff fbda 	bl	80040c0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 800490c:	2800      	cmp	r0, #0
 800490e:	d1d8      	bne.n	80048c2 <HAL_I2C_Master_Transmit+0x11a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	fa5f f188 	uxtb.w	r1, r8
 8004916:	6119      	str	r1, [r3, #16]
 8004918:	e7a0      	b.n	800485c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800491a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800491c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004920:	4605      	mov	r5, r0
      hi2c->XferSize--;
 8004922:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004926:	f815 2b01 	ldrb.w	r2, [r5], #1
 800492a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 800492c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800492e:	6265      	str	r5, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004930:	3a01      	subs	r2, #1
 8004932:	b292      	uxth	r2, r2
 8004934:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004936:	695d      	ldr	r5, [r3, #20]
      hi2c->XferSize--;
 8004938:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800493a:	076d      	lsls	r5, r5, #29
      hi2c->XferSize--;
 800493c:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800493e:	d50c      	bpl.n	800495a <HAL_I2C_Master_Transmit+0x1b2>
 8004940:	b159      	cbz	r1, 800495a <HAL_I2C_Master_Transmit+0x1b2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004942:	7842      	ldrb	r2, [r0, #1]
 8004944:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004946:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004948:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 800494a:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 800494e:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8004950:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8004952:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004956:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004958:	8562      	strh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800495a:	1c75      	adds	r5, r6, #1
 800495c:	d128      	bne.n	80049b0 <HAL_I2C_Master_Transmit+0x208>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	0750      	lsls	r0, r2, #29
 8004962:	d405      	bmi.n	8004970 <HAL_I2C_Master_Transmit+0x1c8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	0551      	lsls	r1, r2, #21
 8004968:	d493      	bmi.n	8004892 <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800496a:	695a      	ldr	r2, [r3, #20]
 800496c:	0750      	lsls	r0, r2, #29
 800496e:	d5f9      	bpl.n	8004964 <HAL_I2C_Master_Transmit+0x1bc>
    while (hi2c->XferSize > 0U)
 8004970:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004972:	2a00      	cmp	r2, #0
 8004974:	d184      	bne.n	8004880 <HAL_I2C_Master_Transmit+0xd8>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004976:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004978:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800497a:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004980:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004982:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004986:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800498a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 800498e:	e71b      	b.n	80047c8 <HAL_I2C_Master_Transmit+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	0612      	lsls	r2, r2, #24
 8004994:	d4c1      	bmi.n	800491a <HAL_I2C_Master_Transmit+0x172>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	0552      	lsls	r2, r2, #21
 800499a:	f53f af7a 	bmi.w	8004892 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fe fb9f 	bl	80030e0 <HAL_GetTick>
 80049a2:	1bc0      	subs	r0, r0, r7
 80049a4:	4286      	cmp	r6, r0
 80049a6:	d337      	bcc.n	8004a18 <HAL_I2C_Master_Transmit+0x270>
 80049a8:	2e00      	cmp	r6, #0
 80049aa:	d035      	beq.n	8004a18 <HAL_I2C_Master_Transmit+0x270>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	e767      	b.n	8004880 <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	0752      	lsls	r2, r2, #29
 80049b4:	d4dc      	bmi.n	8004970 <HAL_I2C_Master_Transmit+0x1c8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	0552      	lsls	r2, r2, #21
 80049ba:	f53f af6a 	bmi.w	8004892 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fe fb8f 	bl	80030e0 <HAL_GetTick>
 80049c2:	1bc0      	subs	r0, r0, r7
 80049c4:	4286      	cmp	r6, r0
 80049c6:	d327      	bcc.n	8004a18 <HAL_I2C_Master_Transmit+0x270>
 80049c8:	b336      	cbz	r6, 8004a18 <HAL_I2C_Master_Transmit+0x270>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	e7c5      	b.n	800495a <HAL_I2C_Master_Transmit+0x1b2>
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ce:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049d0:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049d6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049da:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80049dc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049e0:	f043 0320 	orr.w	r3, r3, #32
 80049e4:	6423      	str	r3, [r4, #64]	; 0x40
 80049e6:	e6ed      	b.n	80047c4 <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049e8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ea:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049ec:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049f2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049f8:	6821      	ldr	r1, [r4, #0]
        __HAL_UNLOCK(hi2c);
 80049fa:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049fe:	f043 0320 	orr.w	r3, r3, #32
 8004a02:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a04:	680b      	ldr	r3, [r1, #0]
 8004a06:	05de      	lsls	r6, r3, #23
 8004a08:	f57f af5b 	bpl.w	80048c2 <HAL_I2C_Master_Transmit+0x11a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a10:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004a12:	f04f 0801 	mov.w	r8, #1
 8004a16:	e6d7      	b.n	80047c8 <HAL_I2C_Master_Transmit+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a18:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a1a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a1c:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a22:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004a28:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a2c:	f043 0320 	orr.w	r3, r3, #32
 8004a30:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004a32:	e73e      	b.n	80048b2 <HAL_I2C_Master_Transmit+0x10a>
 8004a34:	ffff0000 	.word	0xffff0000

08004a38 <HAL_I2C_Mem_Write>:
{
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	461f      	mov	r7, r3
 8004a40:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004a44:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004a46:	4604      	mov	r4, r0
 8004a48:	4688      	mov	r8, r1
 8004a4a:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8004a4c:	f7fe fb48 	bl	80030e0 <HAL_GetTick>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004a50:	2f01      	cmp	r7, #1
  uint32_t tickstart = HAL_GetTick();
 8004a52:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004a54:	d001      	beq.n	8004a5a <HAL_I2C_Mem_Write+0x22>
 8004a56:	2f10      	cmp	r7, #16
 8004a58:	d165      	bne.n	8004b26 <HAL_I2C_Mem_Write+0xee>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d00b      	beq.n	8004a7a <HAL_I2C_Mem_Write+0x42>
      return HAL_BUSY;
 8004a62:	f04f 0802 	mov.w	r8, #2
}
 8004a66:	4640      	mov	r0, r8
 8004a68:	b003      	add	sp, #12
 8004a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6e:	f7fe fb37 	bl	80030e0 <HAL_GetTick>
 8004a72:	1b40      	subs	r0, r0, r5
 8004a74:	2819      	cmp	r0, #25
 8004a76:	f200 80ae 	bhi.w	8004bd6 <HAL_I2C_Mem_Write+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	6998      	ldr	r0, [r3, #24]
 8004a7e:	43c0      	mvns	r0, r0
 8004a80:	f010 0b02 	ands.w	fp, r0, #2
 8004a84:	d0f3      	beq.n	8004a6e <HAL_I2C_Mem_Write+0x36>
    __HAL_LOCK(hi2c);
 8004a86:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8004a8a:	2a01      	cmp	r2, #1
 8004a8c:	d0e9      	beq.n	8004a62 <HAL_I2C_Mem_Write+0x2a>
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	07d2      	lsls	r2, r2, #31
 8004a98:	d577      	bpl.n	8004b8a <HAL_I2C_Mem_Write+0x152>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a9a:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a9c:	4863      	ldr	r0, [pc, #396]	; (8004c2c <HAL_I2C_Mem_Write+0x1f4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004aa4:	2321      	movs	r3, #33	; 0x21
 8004aa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aaa:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aac:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aae:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004ab4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ab8:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8004abc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004abe:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	e9cd 6500 	strd	r6, r5, [sp]
 8004ac6:	463b      	mov	r3, r7
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ac8:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aca:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8004acc:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f7ff fb81 	bl	80041d8 <I2C_RequestMemoryWrite>
 8004ad6:	4680      	mov	r8, r0
 8004ad8:	b9f8      	cbnz	r0, 8004b1a <HAL_I2C_Mem_Write+0xe2>
    while (hi2c->XferSize > 0U)
 8004ada:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80a3 	beq.w	8004c28 <HAL_I2C_Mem_Write+0x1f0>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	1c71      	adds	r1, r6, #1
 8004ae6:	d15b      	bne.n	8004ba0 <HAL_I2C_Mem_Write+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	0612      	lsls	r2, r2, #24
 8004aec:	d421      	bmi.n	8004b32 <HAL_I2C_Mem_Write+0xfa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	0557      	lsls	r7, r2, #21
 8004af2:	d5f9      	bpl.n	8004ae8 <HAL_I2C_Mem_Write+0xb0>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004af4:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af6:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004afa:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afc:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004afe:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b00:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b04:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004b0a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b0e:	f043 0304 	orr.w	r3, r3, #4
 8004b12:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d03c      	beq.n	8004b94 <HAL_I2C_Mem_Write+0x15c>
      return HAL_ERROR;
 8004b1a:	f04f 0801 	mov.w	r8, #1
}
 8004b1e:	4640      	mov	r0, r8
 8004b20:	b003      	add	sp, #12
 8004b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004b26:	4842      	ldr	r0, [pc, #264]	; (8004c30 <HAL_I2C_Mem_Write+0x1f8>)
 8004b28:	f640 11b9 	movw	r1, #2489	; 0x9b9
 8004b2c:	f7fd fee6 	bl	80028fc <assert_failed>
 8004b30:	e793      	b.n	8004a5a <HAL_I2C_Mem_Write+0x22>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b32:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004b34:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b38:	4607      	mov	r7, r0
      hi2c->XferSize--;
 8004b3a:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b3e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8004b42:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8004b44:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004b46:	6267      	str	r7, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004b48:	3a01      	subs	r2, #1
 8004b4a:	b292      	uxth	r2, r2
 8004b4c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b4e:	695f      	ldr	r7, [r3, #20]
      hi2c->XferSize--;
 8004b50:	b28a      	uxth	r2, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b52:	0779      	lsls	r1, r7, #29
      hi2c->XferSize--;
 8004b54:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b56:	d515      	bpl.n	8004b84 <HAL_I2C_Mem_Write+0x14c>
 8004b58:	b942      	cbnz	r2, 8004b6c <HAL_I2C_Mem_Write+0x134>
 8004b5a:	1c77      	adds	r7, r6, #1
 8004b5c:	d156      	bne.n	8004c0c <HAL_I2C_Mem_Write+0x1d4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b5e:	695a      	ldr	r2, [r3, #20]
 8004b60:	0750      	lsls	r0, r2, #29
 8004b62:	d446      	bmi.n	8004bf2 <HAL_I2C_Mem_Write+0x1ba>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	0551      	lsls	r1, r2, #21
 8004b68:	d5f9      	bpl.n	8004b5e <HAL_I2C_Mem_Write+0x126>
 8004b6a:	e7c3      	b.n	8004af4 <HAL_I2C_Mem_Write+0xbc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6c:	7842      	ldrb	r2, [r0, #1]
 8004b6e:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004b70:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004b72:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->XferCount--;
 8004b76:	3901      	subs	r1, #1
        hi2c->XferSize--;
 8004b78:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004b7a:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8004b7c:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8004b7e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004b80:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004b82:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b84:	2a00      	cmp	r2, #0
 8004b86:	d1ad      	bne.n	8004ae4 <HAL_I2C_Mem_Write+0xac>
 8004b88:	e7e7      	b.n	8004b5a <HAL_I2C_Mem_Write+0x122>
      __HAL_I2C_ENABLE(hi2c);
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e782      	b.n	8004a9a <HAL_I2C_Mem_Write+0x62>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b94:	6822      	ldr	r2, [r4, #0]
 8004b96:	6813      	ldr	r3, [r2, #0]
 8004b98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e7bc      	b.n	8004b1a <HAL_I2C_Mem_Write+0xe2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ba0:	695a      	ldr	r2, [r3, #20]
 8004ba2:	0610      	lsls	r0, r2, #24
 8004ba4:	d4c5      	bmi.n	8004b32 <HAL_I2C_Mem_Write+0xfa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba6:	695a      	ldr	r2, [r3, #20]
 8004ba8:	0550      	lsls	r0, r2, #21
 8004baa:	d4a3      	bmi.n	8004af4 <HAL_I2C_Mem_Write+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7fe fa98 	bl	80030e0 <HAL_GetTick>
 8004bb0:	1b40      	subs	r0, r0, r5
 8004bb2:	4286      	cmp	r6, r0
 8004bb4:	d301      	bcc.n	8004bba <HAL_I2C_Mem_Write+0x182>
 8004bb6:	2e00      	cmp	r6, #0
 8004bb8:	d193      	bne.n	8004ae2 <HAL_I2C_Mem_Write+0xaa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bba:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bbc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bbe:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bc4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004bca:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bce:	f043 0320 	orr.w	r3, r3, #32
 8004bd2:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004bd4:	e79e      	b.n	8004b14 <HAL_I2C_Mem_Write+0xdc>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bd6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bd8:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bdc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004be0:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004be6:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bea:	f043 0320 	orr.w	r3, r3, #32
 8004bee:	6423      	str	r3, [r4, #64]	; 0x40
 8004bf0:	e737      	b.n	8004a62 <HAL_I2C_Mem_Write+0x2a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf2:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfc:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004c02:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c06:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8004c0a:	e72c      	b.n	8004a66 <HAL_I2C_Mem_Write+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c0c:	695a      	ldr	r2, [r3, #20]
 8004c0e:	0752      	lsls	r2, r2, #29
 8004c10:	d4ef      	bmi.n	8004bf2 <HAL_I2C_Mem_Write+0x1ba>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c12:	695a      	ldr	r2, [r3, #20]
 8004c14:	0552      	lsls	r2, r2, #21
 8004c16:	f53f af6d 	bmi.w	8004af4 <HAL_I2C_Mem_Write+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1a:	f7fe fa61 	bl	80030e0 <HAL_GetTick>
 8004c1e:	1b40      	subs	r0, r0, r5
 8004c20:	4286      	cmp	r6, r0
 8004c22:	d3ca      	bcc.n	8004bba <HAL_I2C_Mem_Write+0x182>
 8004c24:	2e00      	cmp	r6, #0
 8004c26:	d0c8      	beq.n	8004bba <HAL_I2C_Mem_Write+0x182>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	e796      	b.n	8004b5a <HAL_I2C_Mem_Write+0x122>
 8004c2c:	ffff0000 	.word	0xffff0000
 8004c30:	0800c834 	.word	0x0800c834

08004c34 <HAL_I2C_Mem_Read>:
{
 8004c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c38:	b087      	sub	sp, #28
 8004c3a:	4698      	mov	r8, r3
 8004c3c:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
 8004c40:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8004c42:	4604      	mov	r4, r0
 8004c44:	4689      	mov	r9, r1
 8004c46:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8004c48:	f7fe fa4a 	bl	80030e0 <HAL_GetTick>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004c4c:	f1b8 0f01 	cmp.w	r8, #1
  uint32_t tickstart = HAL_GetTick();
 8004c50:	4607      	mov	r7, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004c52:	d002      	beq.n	8004c5a <HAL_I2C_Mem_Read+0x26>
 8004c54:	f1b8 0f10 	cmp.w	r8, #16
 8004c58:	d154      	bne.n	8004d04 <HAL_I2C_Mem_Read+0xd0>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c5a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d00a      	beq.n	8004c78 <HAL_I2C_Mem_Read+0x44>
      return HAL_BUSY;
 8004c62:	2502      	movs	r5, #2
}
 8004c64:	4628      	mov	r0, r5
 8004c66:	b007      	add	sp, #28
 8004c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6c:	f7fe fa38 	bl	80030e0 <HAL_GetTick>
 8004c70:	1bc0      	subs	r0, r0, r7
 8004c72:	2819      	cmp	r0, #25
 8004c74:	f200 80cf 	bhi.w	8004e16 <HAL_I2C_Mem_Read+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	699d      	ldr	r5, [r3, #24]
 8004c7c:	43ed      	mvns	r5, r5
 8004c7e:	f015 0502 	ands.w	r5, r5, #2
 8004c82:	d0f3      	beq.n	8004c6c <HAL_I2C_Mem_Read+0x38>
    __HAL_LOCK(hi2c);
 8004c84:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8004c88:	2a01      	cmp	r2, #1
 8004c8a:	d0ea      	beq.n	8004c62 <HAL_I2C_Mem_Read+0x2e>
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	07d1      	lsls	r1, r2, #31
 8004c96:	d53b      	bpl.n	8004d10 <HAL_I2C_Mem_Read+0xdc>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c98:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c9a:	48a3      	ldr	r0, [pc, #652]	; (8004f28 <HAL_I2C_Mem_Read+0x2f4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca0:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ca2:	2322      	movs	r3, #34	; 0x22
 8004ca4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ca8:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004caa:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004cb2:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cb6:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8004cb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cba:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cbc:	4652      	mov	r2, sl
 8004cbe:	e9cd 6700 	strd	r6, r7, [sp]
 8004cc2:	4643      	mov	r3, r8
    hi2c->XferSize    = hi2c->XferCount;
 8004cc4:	8525      	strh	r5, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc6:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cc8:	4649      	mov	r1, r9
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f7ff fb36 	bl	800433c <I2C_RequestMemoryRead>
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	f040 80ac 	bne.w	8004e30 <HAL_I2C_Mem_Read+0x1fc>
    if (hi2c->XferSize == 0U)
 8004cd8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cda:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8004cdc:	b9ea      	cbnz	r2, 8004d1a <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	9002      	str	r0, [sp, #8]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	9202      	str	r2, [sp, #8]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	9202      	str	r2, [sp, #8]
 8004ce8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf0:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004cfa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8004d02:	e7af      	b.n	8004c64 <HAL_I2C_Mem_Read+0x30>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004d04:	4889      	ldr	r0, [pc, #548]	; (8004f2c <HAL_I2C_Mem_Read+0x2f8>)
 8004d06:	f640 2134 	movw	r1, #2612	; 0xa34
 8004d0a:	f7fd fdf7 	bl	80028fc <assert_failed>
 8004d0e:	e7a4      	b.n	8004c5a <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	e7be      	b.n	8004c98 <HAL_I2C_Mem_Read+0x64>
    else if (hi2c->XferSize == 1U)
 8004d1a:	2a01      	cmp	r2, #1
 8004d1c:	f000 810c 	beq.w	8004f38 <HAL_I2C_Mem_Read+0x304>
    else if (hi2c->XferSize == 2U)
 8004d20:	2a02      	cmp	r2, #2
 8004d22:	f000 809b 	beq.w	8004e5c <HAL_I2C_Mem_Read+0x228>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d26:	9005      	str	r0, [sp, #20]
 8004d28:	6959      	ldr	r1, [r3, #20]
 8004d2a:	9105      	str	r1, [sp, #20]
 8004d2c:	6999      	ldr	r1, [r3, #24]
 8004d2e:	9105      	str	r1, [sp, #20]
 8004d30:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8004d32:	2a03      	cmp	r2, #3
 8004d34:	d849      	bhi.n	8004dca <HAL_I2C_Mem_Read+0x196>
        if (hi2c->XferSize == 1U)
 8004d36:	2a01      	cmp	r2, #1
 8004d38:	f000 80c9 	beq.w	8004ece <HAL_I2C_Mem_Read+0x29a>
        else if (hi2c->XferSize == 2U)
 8004d3c:	2a02      	cmp	r2, #2
 8004d3e:	f000 8087 	beq.w	8004e50 <HAL_I2C_Mem_Read+0x21c>
 8004d42:	1c71      	adds	r1, r6, #1
 8004d44:	f040 8099 	bne.w	8004e7a <HAL_I2C_Mem_Read+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	0752      	lsls	r2, r2, #29
 8004d4c:	d5fc      	bpl.n	8004d48 <HAL_I2C_Mem_Read+0x114>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d50:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d56:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004d5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004d5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004d60:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004d66:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8004d68:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8004d6a:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004d6c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004d6e:	8522      	strh	r2, [r4, #40]	; 0x28
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004d70:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	f040 808d 	bne.w	8004e92 <HAL_I2C_Mem_Read+0x25e>
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	0752      	lsls	r2, r2, #29
 8004d7c:	d5fc      	bpl.n	8004d78 <HAL_I2C_Mem_Read+0x144>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7e:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d80:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d86:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004d8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004d8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004d90:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d92:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9a:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 8004d9c:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8004da0:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 8004da2:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004da6:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da8:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 8004daa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004dac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004dae:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004db0:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8004db2:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8004db4:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8004db6:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004db8:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8004dba:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004dbc:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004dbe:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8004dc0:	2a00      	cmp	r2, #0
 8004dc2:	d096      	beq.n	8004cf2 <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8004dc4:	2a03      	cmp	r2, #3
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	d9b5      	bls.n	8004d36 <HAL_I2C_Mem_Read+0x102>
 8004dca:	b956      	cbnz	r6, 8004de2 <HAL_I2C_Mem_Read+0x1ae>
 8004dcc:	e0a1      	b.n	8004f12 <HAL_I2C_Mem_Read+0x2de>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	06d0      	lsls	r0, r2, #27
 8004dd2:	f100 808e 	bmi.w	8004ef2 <HAL_I2C_Mem_Read+0x2be>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd6:	f7fe f983 	bl	80030e0 <HAL_GetTick>
 8004dda:	1bc0      	subs	r0, r0, r7
 8004ddc:	4286      	cmp	r6, r0
 8004dde:	d364      	bcc.n	8004eaa <HAL_I2C_Mem_Read+0x276>
 8004de0:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	0652      	lsls	r2, r2, #25
 8004de6:	d5f2      	bpl.n	8004dce <HAL_I2C_Mem_Read+0x19a>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8004dee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004df0:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8004df2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004df4:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dfc:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8004dfe:	3a01      	subs	r2, #1
 8004e00:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004e02:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e06:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8004e08:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004e0a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e0e:	d5d7      	bpl.n	8004dc0 <HAL_I2C_Mem_Read+0x18c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e10:	6903      	ldr	r3, [r0, #16]
 8004e12:	704b      	strb	r3, [r1, #1]
 8004e14:	e7c9      	b.n	8004daa <HAL_I2C_Mem_Read+0x176>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e16:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e18:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e1e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004e24:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e28:	f043 0320 	orr.w	r3, r3, #32
 8004e2c:	6423      	str	r3, [r4, #64]	; 0x40
 8004e2e:	e718      	b.n	8004c62 <HAL_I2C_Mem_Read+0x2e>
      return HAL_ERROR;
 8004e30:	2501      	movs	r5, #1
}
 8004e32:	4628      	mov	r0, r5
 8004e34:	b007      	add	sp, #28
 8004e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e3a:	695a      	ldr	r2, [r3, #20]
 8004e3c:	0750      	lsls	r0, r2, #29
 8004e3e:	d49e      	bmi.n	8004d7e <HAL_I2C_Mem_Read+0x14a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e40:	f7fe f94e 	bl	80030e0 <HAL_GetTick>
 8004e44:	1bc0      	subs	r0, r0, r7
 8004e46:	4286      	cmp	r6, r0
 8004e48:	d32f      	bcc.n	8004eaa <HAL_I2C_Mem_Read+0x276>
 8004e4a:	2e00      	cmp	r6, #0
 8004e4c:	d02d      	beq.n	8004eaa <HAL_I2C_Mem_Read+0x276>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	1c71      	adds	r1, r6, #1
 8004e52:	d1f2      	bne.n	8004e3a <HAL_I2C_Mem_Read+0x206>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	0752      	lsls	r2, r2, #29
 8004e58:	d5fc      	bpl.n	8004e54 <HAL_I2C_Mem_Read+0x220>
 8004e5a:	e790      	b.n	8004d7e <HAL_I2C_Mem_Read+0x14a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004e62:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e64:	6819      	ldr	r1, [r3, #0]
 8004e66:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004e6a:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6c:	9004      	str	r0, [sp, #16]
 8004e6e:	6959      	ldr	r1, [r3, #20]
 8004e70:	9104      	str	r1, [sp, #16]
 8004e72:	6999      	ldr	r1, [r3, #24]
 8004e74:	9104      	str	r1, [sp, #16]
 8004e76:	9904      	ldr	r1, [sp, #16]
 8004e78:	e75b      	b.n	8004d32 <HAL_I2C_Mem_Read+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	0750      	lsls	r0, r2, #29
 8004e7e:	f53f af66 	bmi.w	8004d4e <HAL_I2C_Mem_Read+0x11a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fe f92d 	bl	80030e0 <HAL_GetTick>
 8004e86:	1bc0      	subs	r0, r0, r7
 8004e88:	4286      	cmp	r6, r0
 8004e8a:	d30e      	bcc.n	8004eaa <HAL_I2C_Mem_Read+0x276>
 8004e8c:	b16e      	cbz	r6, 8004eaa <HAL_I2C_Mem_Read+0x276>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	e757      	b.n	8004d42 <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	0750      	lsls	r0, r2, #29
 8004e96:	f53f af72 	bmi.w	8004d7e <HAL_I2C_Mem_Read+0x14a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fe f921 	bl	80030e0 <HAL_GetTick>
 8004e9e:	1bc0      	subs	r0, r0, r7
 8004ea0:	4286      	cmp	r6, r0
 8004ea2:	d302      	bcc.n	8004eaa <HAL_I2C_Mem_Read+0x276>
 8004ea4:	2e00      	cmp	r6, #0
 8004ea6:	f47f af63 	bne.w	8004d70 <HAL_I2C_Mem_Read+0x13c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004eaa:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eac:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004eae:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004eb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004eb4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004eb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004eba:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8004ebe:	2501      	movs	r5, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ec0:	f043 0320 	orr.w	r3, r3, #32
}
 8004ec4:	4628      	mov	r0, r5
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ec6:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004ec8:	b007      	add	sp, #28
 8004eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ece:	b94e      	cbnz	r6, 8004ee4 <HAL_I2C_Mem_Read+0x2b0>
 8004ed0:	e02e      	b.n	8004f30 <HAL_I2C_Mem_Read+0x2fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	06d2      	lsls	r2, r2, #27
 8004ed6:	d40c      	bmi.n	8004ef2 <HAL_I2C_Mem_Read+0x2be>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed8:	f7fe f902 	bl	80030e0 <HAL_GetTick>
 8004edc:	1bc0      	subs	r0, r0, r7
 8004ede:	4286      	cmp	r6, r0
 8004ee0:	d3e3      	bcc.n	8004eaa <HAL_I2C_Mem_Read+0x276>
 8004ee2:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	0651      	lsls	r1, r2, #25
 8004ee8:	d5f3      	bpl.n	8004ed2 <HAL_I2C_Mem_Read+0x29e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8004ef0:	e75b      	b.n	8004daa <HAL_I2C_Mem_Read+0x176>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef2:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ef4:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ef8:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004efa:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004efc:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004efe:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f02:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004f08:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f0c:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8004f0e:	2501      	movs	r5, #1
 8004f10:	e6a8      	b.n	8004c64 <HAL_I2C_Mem_Read+0x30>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	0652      	lsls	r2, r2, #25
 8004f16:	f53f af67 	bmi.w	8004de8 <HAL_I2C_Mem_Read+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f1a:	695a      	ldr	r2, [r3, #20]
 8004f1c:	06d1      	lsls	r1, r2, #27
 8004f1e:	d4e8      	bmi.n	8004ef2 <HAL_I2C_Mem_Read+0x2be>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f20:	f7fe f8de 	bl	80030e0 <HAL_GetTick>
 8004f24:	e7c1      	b.n	8004eaa <HAL_I2C_Mem_Read+0x276>
 8004f26:	bf00      	nop
 8004f28:	ffff0000 	.word	0xffff0000
 8004f2c:	0800c834 	.word	0x0800c834
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	0650      	lsls	r0, r2, #25
 8004f34:	d5f1      	bpl.n	8004f1a <HAL_I2C_Mem_Read+0x2e6>
 8004f36:	e7d8      	b.n	8004eea <HAL_I2C_Mem_Read+0x2b6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f38:	6819      	ldr	r1, [r3, #0]
 8004f3a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004f3e:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f40:	9003      	str	r0, [sp, #12]
 8004f42:	6959      	ldr	r1, [r3, #20]
 8004f44:	9103      	str	r1, [sp, #12]
 8004f46:	6999      	ldr	r1, [r3, #24]
 8004f48:	9103      	str	r1, [sp, #12]
 8004f4a:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	6819      	ldr	r1, [r3, #0]
 8004f4e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004f52:	6019      	str	r1, [r3, #0]
 8004f54:	e6ed      	b.n	8004d32 <HAL_I2C_Mem_Read+0xfe>
 8004f56:	bf00      	nop

08004f58 <HAL_I2C_MasterTxCpltCallback>:
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop

08004f5c <HAL_I2C_MasterRxCpltCallback>:
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop

08004f60 <HAL_I2C_SlaveTxCpltCallback>:
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop

08004f64 <HAL_I2C_SlaveRxCpltCallback>:
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop

08004f68 <HAL_I2C_AddrCallback>:
}
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <HAL_I2C_ListenCpltCallback>:
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop

08004f70 <HAL_I2C_MemTxCpltCallback>:
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop

08004f74 <I2C_MemoryTransmit_TXE_BTF>:
{
 8004f74:	b538      	push	{r3, r4, r5, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f76:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8004f7a:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8004f7c:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8004f7e:	b959      	cbnz	r1, 8004f98 <I2C_MemoryTransmit_TXE_BTF+0x24>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004f80:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f82:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004f84:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f86:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004f88:	d032      	beq.n	8004ff0 <I2C_MemoryTransmit_TXE_BTF+0x7c>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004f8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004f8e:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8004f90:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004f92:	3201      	adds	r2, #1
 8004f94:	6502      	str	r2, [r0, #80]	; 0x50
}
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 8004f98:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004f9a:	2901      	cmp	r1, #1
 8004f9c:	d020      	beq.n	8004fe0 <I2C_MemoryTransmit_TXE_BTF+0x6c>
  else if (hi2c->EventCount == 2U)
 8004f9e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004fa0:	2902      	cmp	r1, #2
 8004fa2:	d1f8      	bne.n	8004f96 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8004fa4:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004fa6:	2a22      	cmp	r2, #34	; 0x22
 8004fa8:	d02c      	beq.n	8005004 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004faa:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8004fac:	b289      	uxth	r1, r1
 8004fae:	bb29      	cbnz	r1, 8004ffc <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004fb0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8004fb2:	b289      	uxth	r1, r1
 8004fb4:	2900      	cmp	r1, #0
 8004fb6:	d1ee      	bne.n	8004f96 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8004fb8:	2a21      	cmp	r2, #33	; 0x21
 8004fba:	d1ec      	bne.n	8004f96 <I2C_MemoryTransmit_TXE_BTF+0x22>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fbc:	6802      	ldr	r2, [r0, #0]
 8004fbe:	6854      	ldr	r4, [r2, #4]
 8004fc0:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8004fc4:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc6:	6814      	ldr	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8004fc8:	2520      	movs	r5, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fca:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8004fce:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fd0:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004fda:	f7ff ffc9 	bl	8004f70 <HAL_I2C_MemTxCpltCallback>
}
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004fe0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004fe2:	6801      	ldr	r1, [r0, #0]
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8004fe8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004fea:	3201      	adds	r2, #1
 8004fec:	6502      	str	r2, [r0, #80]	; 0x50
}
 8004fee:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8004ff4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004ff6:	3202      	adds	r2, #2
 8004ff8:	6502      	str	r2, [r0, #80]	; 0x50
}
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ffc:	2a21      	cmp	r2, #33	; 0x21
 8004ffe:	d007      	beq.n	8005010 <I2C_MemoryTransmit_TXE_BTF+0x9c>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 8005002:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005004:	6802      	ldr	r2, [r0, #0]
 8005006:	6813      	ldr	r3, [r2, #0]
 8005008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500c:	6013      	str	r3, [r2, #0]
}
 800500e:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005010:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005012:	6802      	ldr	r2, [r0, #0]
 8005014:	f811 0b01 	ldrb.w	r0, [r1], #1
 8005018:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 800501a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800501c:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800501e:	3a01      	subs	r2, #1
 8005020:	b292      	uxth	r2, r2
 8005022:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005024:	bd38      	pop	{r3, r4, r5, pc}
 8005026:	bf00      	nop

08005028 <HAL_I2C_MemRxCpltCallback>:
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop

0800502c <HAL_I2C_ErrorCallback>:
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop

08005030 <HAL_I2C_AbortCpltCallback>:
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop

08005034 <I2C_DMAAbort>:
{
 8005034:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005036:	4b3a      	ldr	r3, [pc, #232]	; (8005120 <I2C_DMAAbort+0xec>)
 8005038:	4a3a      	ldr	r2, [pc, #232]	; (8005124 <I2C_DMAAbort+0xf0>)
 800503a:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800503c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800503e:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
  __IO uint32_t count = 0U;
 8005046:	2200      	movs	r2, #0
 8005048:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800504a:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800504c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8005050:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005052:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005056:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800505a:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800505c:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800505e:	e005      	b.n	800506c <I2C_DMAAbort+0x38>
    count--;
 8005060:	9b01      	ldr	r3, [sp, #4]
 8005062:	3b01      	subs	r3, #1
 8005064:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005066:	6813      	ldr	r3, [r2, #0]
 8005068:	059b      	lsls	r3, r3, #22
 800506a:	d506      	bpl.n	800507a <I2C_DMAAbort+0x46>
    if (count == 0U)
 800506c:	9b01      	ldr	r3, [sp, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f6      	bne.n	8005060 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005072:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005074:	f043 0320 	orr.w	r3, r3, #32
 8005078:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmarx != NULL)
 800507a:	e9d0 430d 	ldrd	r4, r3, [r0, #52]	; 0x34
  if (hi2c->hdmatx != NULL)
 800507e:	b344      	cbz	r4, 80050d2 <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005080:	2500      	movs	r5, #0
 8005082:	63e5      	str	r5, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8005084:	b1f3      	cbz	r3, 80050c4 <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005086:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005088:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508a:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 800508e:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 8005090:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005092:	6525      	str	r5, [r4, #80]	; 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005094:	2400      	movs	r4, #0
 8005096:	651c      	str	r4, [r3, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8005098:	6813      	ldr	r3, [r2, #0]
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050a0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80050a4:	2b60      	cmp	r3, #96	; 0x60
 80050a6:	d029      	beq.n	80050fc <I2C_DMAAbort+0xc8>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050a8:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80050ac:	2928      	cmp	r1, #40	; 0x28
 80050ae:	d018      	beq.n	80050e2 <I2C_DMAAbort+0xae>
      hi2c->State = HAL_I2C_STATE_READY;
 80050b0:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b2:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80050bc:	f7ff ffb6 	bl	800502c <HAL_I2C_ErrorCallback>
}
 80050c0:	b002      	add	sp, #8
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c4:	6815      	ldr	r5, [r2, #0]
 80050c6:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80050ca:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80050cc:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050ce:	6523      	str	r3, [r4, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 80050d0:	e7e2      	b.n	8005098 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 80050d2:	b1f3      	cbz	r3, 8005112 <I2C_DMAAbort+0xde>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d4:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80050d6:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d8:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80050dc:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80050de:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 80050e0:	e7d8      	b.n	8005094 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80050e2:	6813      	ldr	r3, [r2, #0]
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ea:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050ec:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050f2:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050f4:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050f6:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 80050fa:	e7df      	b.n	80050bc <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050fc:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80050fe:	2220      	movs	r2, #32
 8005100:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005104:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005108:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800510a:	f7ff ff91 	bl	8005030 <HAL_I2C_AbortCpltCallback>
}
 800510e:	b002      	add	sp, #8
 8005110:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005112:	6814      	ldr	r4, [r2, #0]
 8005114:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005118:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 800511a:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800511c:	e7bc      	b.n	8005098 <I2C_DMAAbort+0x64>
 800511e:	bf00      	nop
 8005120:	20000030 	.word	0x20000030
 8005124:	14f8b589 	.word	0x14f8b589

08005128 <I2C_ITError>:
{
 8005128:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800512a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800512e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005132:	2b10      	cmp	r3, #16
{
 8005134:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005136:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005138:	d039      	beq.n	80051ae <I2C_ITError+0x86>
 800513a:	b2d9      	uxtb	r1, r3
 800513c:	2940      	cmp	r1, #64	; 0x40
 800513e:	d036      	beq.n	80051ae <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005140:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8005144:	2928      	cmp	r1, #40	; 0x28
 8005146:	d03d      	beq.n	80051c4 <I2C_ITError+0x9c>
 8005148:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800514a:	6859      	ldr	r1, [r3, #4]
 800514c:	0508      	lsls	r0, r1, #20
 800514e:	d407      	bmi.n	8005160 <I2C_ITError+0x38>
 8005150:	2a60      	cmp	r2, #96	; 0x60
 8005152:	d005      	beq.n	8005160 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8005154:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005156:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8005158:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800515c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8005160:	2200      	movs	r2, #0
 8005162:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800516a:	d134      	bne.n	80051d6 <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800516c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8005170:	2960      	cmp	r1, #96	; 0x60
 8005172:	d075      	beq.n	8005260 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	0650      	lsls	r0, r2, #25
 8005178:	d505      	bpl.n	8005186 <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8005180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005182:	3301      	adds	r3, #1
 8005184:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8005186:	4620      	mov	r0, r4
 8005188:	f7ff ff50 	bl	800502c <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 800518c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800518e:	0719      	lsls	r1, r3, #28
 8005190:	d004      	beq.n	800519c <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005192:	6822      	ldr	r2, [r4, #0]
 8005194:	6853      	ldr	r3, [r2, #4]
 8005196:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800519a:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 800519c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80051a2:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 80051a4:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051a6:	d501      	bpl.n	80051ac <I2C_ITError+0x84>
 80051a8:	2b28      	cmp	r3, #40	; 0x28
 80051aa:	d02f      	beq.n	800520c <I2C_ITError+0xe4>
}
 80051ac:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051ae:	2a22      	cmp	r2, #34	; 0x22
 80051b0:	d1c6      	bne.n	8005140 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ba:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	0512      	lsls	r2, r2, #20
 80051c0:	d5c8      	bpl.n	8005154 <I2C_ITError+0x2c>
 80051c2:	e7cd      	b.n	8005160 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 80051c4:	2300      	movs	r3, #0
 80051c6:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051c8:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051ca:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80051d4:	d0ca      	beq.n	800516c <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80051d6:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80051d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80051da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051de:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80051e0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d01e      	beq.n	8005226 <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051e8:	4b28      	ldr	r3, [pc, #160]	; (800528c <I2C_ITError+0x164>)
 80051ea:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051ec:	f7fe fbd0 	bl	8003990 <HAL_DMA_Abort_IT>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d0cb      	beq.n	800518c <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 80051f4:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051f6:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80051f8:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80051fa:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8005202:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005206:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005208:	4798      	blx	r3
 800520a:	e7bf      	b.n	800518c <I2C_ITError+0x64>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800520c:	4b20      	ldr	r3, [pc, #128]	; (8005290 <I2C_ITError+0x168>)
 800520e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8005210:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8005212:	2300      	movs	r3, #0
 8005214:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8005216:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8005218:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800521c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8005220:	f7ff fea4 	bl	8004f6c <HAL_I2C_ListenCpltCallback>
}
 8005224:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005226:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005228:	4b18      	ldr	r3, [pc, #96]	; (800528c <I2C_ITError+0x164>)
 800522a:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800522c:	f7fe fbb0 	bl	8003990 <HAL_DMA_Abort_IT>
 8005230:	2800      	cmp	r0, #0
 8005232:	d0ab      	beq.n	800518c <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	695a      	ldr	r2, [r3, #20]
 8005238:	0651      	lsls	r1, r2, #25
 800523a:	d506      	bpl.n	800524a <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8005242:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	3201      	adds	r2, #1
 8005248:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800524a:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800524c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800524e:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8005252:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8005254:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8005256:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800525a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800525c:	4798      	blx	r3
 800525e:	e795      	b.n	800518c <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8005260:	2120      	movs	r1, #32
 8005262:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005266:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	0652      	lsls	r2, r2, #25
 800526c:	d506      	bpl.n	800527c <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8005274:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	3201      	adds	r2, #1
 800527a:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8005284:	4620      	mov	r0, r4
 8005286:	f7ff fed3 	bl	8005030 <HAL_I2C_AbortCpltCallback>
 800528a:	e77f      	b.n	800518c <I2C_ITError+0x64>
 800528c:	08005035 	.word	0x08005035
 8005290:	ffff0000 	.word	0xffff0000

08005294 <HAL_I2C_EV_IRQHandler>:
{
 8005294:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005296:	6803      	ldr	r3, [r0, #0]
{
 8005298:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800529a:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800529c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800529e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052a2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80052a6:	2910      	cmp	r1, #16
{
 80052a8:	b08c      	sub	sp, #48	; 0x30
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80052aa:	b2cd      	uxtb	r5, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80052ac:	d021      	beq.n	80052f2 <HAL_I2C_EV_IRQHandler+0x5e>
 80052ae:	2d40      	cmp	r5, #64	; 0x40
 80052b0:	d01f      	beq.n	80052f2 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	2900      	cmp	r1, #0
 80052b8:	f000 8093 	beq.w	80053e2 <HAL_I2C_EV_IRQHandler+0x14e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052bc:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 80052be:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052c0:	f011 0f02 	tst.w	r1, #2
 80052c4:	f3c1 0640 	ubfx	r6, r1, #1, #1
 80052c8:	d056      	beq.n	8005378 <HAL_I2C_EV_IRQHandler+0xe4>
 80052ca:	0586      	lsls	r6, r0, #22
 80052cc:	d556      	bpl.n	800537c <HAL_I2C_EV_IRQHandler+0xe8>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80052d0:	b102      	cbz	r2, 80052d4 <HAL_I2C_EV_IRQHandler+0x40>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052d2:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052d4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80052d8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80052dc:	2a28      	cmp	r2, #40	; 0x28
 80052de:	f000 8217 	beq.w	8005710 <HAL_I2C_EV_IRQHandler+0x47c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80052e2:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 80052e6:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80052e8:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80052ea:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80052ee:	b00c      	add	sp, #48	; 0x30
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052f2:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052f4:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80052f6:	f012 0f01 	tst.w	r2, #1
 80052fa:	d11a      	bne.n	8005332 <HAL_I2C_EV_IRQHandler+0x9e>
 80052fc:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8005300:	d0f5      	beq.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 8005302:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8005306:	d0f2      	beq.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005308:	0716      	lsls	r6, r2, #28
 800530a:	d56d      	bpl.n	80053e8 <HAL_I2C_EV_IRQHandler+0x154>
 800530c:	0586      	lsls	r6, r0, #22
 800530e:	f140 8083 	bpl.w	8005418 <HAL_I2C_EV_IRQHandler+0x184>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005312:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005316:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005318:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800531a:	2900      	cmp	r1, #0
 800531c:	f000 81df 	beq.w	80056de <HAL_I2C_EV_IRQHandler+0x44a>
 8005320:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8005322:	2a00      	cmp	r2, #0
 8005324:	f000 81db 	beq.w	80056de <HAL_I2C_EV_IRQHandler+0x44a>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800532e:	605a      	str	r2, [r3, #4]
 8005330:	e7dd      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005332:	0586      	lsls	r6, r0, #22
 8005334:	d56e      	bpl.n	8005414 <HAL_I2C_EV_IRQHandler+0x180>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005338:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 800533c:	f000 81e5 	beq.w	800570a <HAL_I2C_EV_IRQHandler+0x476>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005340:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005342:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005346:	bf04      	itt	eq
 8005348:	2208      	moveq	r2, #8
 800534a:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800534c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005350:	2a40      	cmp	r2, #64	; 0x40
 8005352:	f000 81d3 	beq.w	80056fc <HAL_I2C_EV_IRQHandler+0x468>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005356:	6922      	ldr	r2, [r4, #16]
 8005358:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800535c:	f000 81ae 	beq.w	80056bc <HAL_I2C_EV_IRQHandler+0x428>
      if (hi2c->EventCount == 0U)
 8005360:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005362:	2a00      	cmp	r2, #0
 8005364:	f040 81e8 	bne.w	8005738 <HAL_I2C_EV_IRQHandler+0x4a4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005368:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800536a:	11d2      	asrs	r2, r2, #7
 800536c:	f002 0206 	and.w	r2, r2, #6
 8005370:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8005374:	611a      	str	r2, [r3, #16]
 8005376:	e7ba      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005378:	06cd      	lsls	r5, r1, #27
 800537a:	d47c      	bmi.n	8005476 <HAL_I2C_EV_IRQHandler+0x1e2>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800537c:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8005380:	2a21      	cmp	r2, #33	; 0x21
 8005382:	f000 80f5 	beq.w	8005570 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005386:	064a      	lsls	r2, r1, #25
 8005388:	f140 8132 	bpl.w	80055f0 <HAL_I2C_EV_IRQHandler+0x35c>
 800538c:	0546      	lsls	r6, r0, #21
 800538e:	f140 812f 	bpl.w	80055f0 <HAL_I2C_EV_IRQHandler+0x35c>
 8005392:	074d      	lsls	r5, r1, #29
 8005394:	f100 812f 	bmi.w	80055f6 <HAL_I2C_EV_IRQHandler+0x362>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005398:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800539c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800539e:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053a0:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	d0a3      	beq.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80053ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80053ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80053b8:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053ba:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80053bc:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d195      	bne.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 80053c2:	292a      	cmp	r1, #42	; 0x2a
 80053c4:	d193      	bne.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053c6:	6822      	ldr	r2, [r4, #0]
 80053c8:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053ca:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053d0:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053d2:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053d4:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053d6:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053d8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053dc:	f7ff fdc2 	bl	8004f64 <HAL_I2C_SlaveRxCpltCallback>
 80053e0:	e785      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053e2:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053e4:	6959      	ldr	r1, [r3, #20]
 80053e6:	e76b      	b.n	80052c0 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053e8:	0796      	lsls	r6, r2, #30
 80053ea:	d515      	bpl.n	8005418 <HAL_I2C_EV_IRQHandler+0x184>
 80053ec:	0586      	lsls	r6, r0, #22
 80053ee:	d513      	bpl.n	8005418 <HAL_I2C_EV_IRQHandler+0x184>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80053f0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80053f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80053f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053f8:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80053fc:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80053fe:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005400:	f000 81ae 	beq.w	8005760 <HAL_I2C_EV_IRQHandler+0x4cc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005404:	2200      	movs	r2, #0
 8005406:	9209      	str	r2, [sp, #36]	; 0x24
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	9209      	str	r2, [sp, #36]	; 0x24
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	9309      	str	r3, [sp, #36]	; 0x24
 8005410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005412:	e76c      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005414:	0716      	lsls	r6, r2, #28
 8005416:	d5e7      	bpl.n	80053e8 <HAL_I2C_EV_IRQHandler+0x154>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005418:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800541c:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800541e:	f000 80f3 	beq.w	8005608 <HAL_I2C_EV_IRQHandler+0x374>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005422:	050e      	lsls	r6, r1, #20
 8005424:	f53f af63 	bmi.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005428:	0611      	lsls	r1, r2, #24
 800542a:	f140 8113 	bpl.w	8005654 <HAL_I2C_EV_IRQHandler+0x3c0>
 800542e:	0546      	lsls	r6, r0, #21
 8005430:	f140 8110 	bpl.w	8005654 <HAL_I2C_EV_IRQHandler+0x3c0>
 8005434:	0751      	lsls	r1, r2, #29
 8005436:	f100 8110 	bmi.w	800565a <HAL_I2C_EV_IRQHandler+0x3c6>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800543a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800543e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005440:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005444:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005446:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005448:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800544a:	2800      	cmp	r0, #0
 800544c:	f040 8235 	bne.w	80058ba <HAL_I2C_EV_IRQHandler+0x626>
 8005450:	2a21      	cmp	r2, #33	; 0x21
 8005452:	f000 8325 	beq.w	8005aa0 <HAL_I2C_EV_IRQHandler+0x80c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005456:	2940      	cmp	r1, #64	; 0x40
 8005458:	f47f af49 	bne.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800545c:	2a22      	cmp	r2, #34	; 0x22
 800545e:	f47f af46 	bne.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    if (hi2c->XferCount == 0U)
 8005462:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005464:	b292      	uxth	r2, r2
 8005466:	2a00      	cmp	r2, #0
 8005468:	f040 82a4 	bne.w	80059b4 <HAL_I2C_EV_IRQHandler+0x720>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005472:	605a      	str	r2, [r3, #4]
 8005474:	e73b      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005476:	0585      	lsls	r5, r0, #22
 8005478:	d580      	bpl.n	800537c <HAL_I2C_EV_IRQHandler+0xe8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800547a:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005484:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005486:	960b      	str	r6, [sp, #44]	; 0x2c
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	920b      	str	r2, [sp, #44]	; 0x2c
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549c:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	0510      	lsls	r0, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054a2:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054a4:	d521      	bpl.n	80054ea <HAL_I2C_EV_IRQHandler+0x256>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054a6:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80054aa:	2a22      	cmp	r2, #34	; 0x22
 80054ac:	f000 8175 	beq.w	800579a <HAL_I2C_EV_IRQHandler+0x506>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80054b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80054b2:	6802      	ldr	r2, [r0, #0]
 80054b4:	6852      	ldr	r2, [r2, #4]
 80054b6:	b292      	uxth	r2, r2
 80054b8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80054ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80054bc:	b292      	uxth	r2, r2
 80054be:	b11a      	cbz	r2, 80054c8 <HAL_I2C_EV_IRQHandler+0x234>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054c2:	f042 0204 	orr.w	r2, r2, #4
 80054c6:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ce:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054d0:	f7fe fb60 	bl	8003b94 <HAL_DMA_GetState>
 80054d4:	2801      	cmp	r0, #1
 80054d6:	d008      	beq.n	80054ea <HAL_I2C_EV_IRQHandler+0x256>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80054da:	4ba0      	ldr	r3, [pc, #640]	; (800575c <HAL_I2C_EV_IRQHandler+0x4c8>)
 80054dc:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054de:	f7fe fa57 	bl	8003990 <HAL_DMA_Abort_IT>
 80054e2:	b110      	cbz	r0, 80054ea <HAL_I2C_EV_IRQHandler+0x256>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80054e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80054e8:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80054ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	b313      	cbz	r3, 8005536 <HAL_I2C_EV_IRQHandler+0x2a2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054f0:	6823      	ldr	r3, [r4, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	0751      	lsls	r1, r2, #29
 80054f6:	d50a      	bpl.n	800550e <HAL_I2C_EV_IRQHandler+0x27a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80054fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005500:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005502:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 8005504:	3a01      	subs	r2, #1
 8005506:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8005508:	3101      	adds	r1, #1
      hi2c->XferCount--;
 800550a:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800550c:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	0652      	lsls	r2, r2, #25
 8005512:	d509      	bpl.n	8005528 <HAL_I2C_EV_IRQHandler+0x294>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005514:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 800551a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800551c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800551e:	3b01      	subs	r3, #1
 8005520:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8005522:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8005524:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005526:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8005528:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	b11b      	cbz	r3, 8005536 <HAL_I2C_EV_IRQHandler+0x2a2>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800552e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	f040 80d9 	bne.w	80056f0 <HAL_I2C_EV_IRQHandler+0x45c>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800553e:	2d2a      	cmp	r5, #42	; 0x2a
 8005540:	f000 814c 	beq.w	80057dc <HAL_I2C_EV_IRQHandler+0x548>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005544:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005548:	2b28      	cmp	r3, #40	; 0x28
 800554a:	f000 814f 	beq.w	80057ec <HAL_I2C_EV_IRQHandler+0x558>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800554e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005550:	2b22      	cmp	r3, #34	; 0x22
 8005552:	d002      	beq.n	800555a <HAL_I2C_EV_IRQHandler+0x2c6>
 8005554:	2d22      	cmp	r5, #34	; 0x22
 8005556:	f47f aeca 	bne.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
        hi2c->PreviousState = I2C_STATE_NONE;
 800555a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800555c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800555e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005560:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8005562:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005566:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800556a:	f7ff fcfb 	bl	8004f64 <HAL_I2C_SlaveRxCpltCallback>
 800556e:	e6be      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005570:	060e      	lsls	r6, r1, #24
 8005572:	d528      	bpl.n	80055c6 <HAL_I2C_EV_IRQHandler+0x332>
 8005574:	0545      	lsls	r5, r0, #21
 8005576:	d526      	bpl.n	80055c6 <HAL_I2C_EV_IRQHandler+0x332>
 8005578:	074e      	lsls	r6, r1, #29
 800557a:	d427      	bmi.n	80055cc <HAL_I2C_EV_IRQHandler+0x338>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800557c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8005580:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8005582:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005584:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8005586:	2900      	cmp	r1, #0
 8005588:	f43f aeb1 	beq.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800558c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800558e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005592:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8005594:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005596:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005598:	3901      	subs	r1, #1
 800559a:	b289      	uxth	r1, r1
 800559c:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800559e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80055a0:	b289      	uxth	r1, r1
 80055a2:	2900      	cmp	r1, #0
 80055a4:	f47f aea3 	bne.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 80055a8:	2829      	cmp	r0, #41	; 0x29
 80055aa:	f47f aea0 	bne.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055ae:	6859      	ldr	r1, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b0:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055b2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80055b6:	6059      	str	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055b8:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055ba:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055bc:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055c0:	f7ff fcce 	bl	8004f60 <HAL_I2C_SlaveTxCpltCallback>
 80055c4:	e693      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055c6:	074d      	lsls	r5, r1, #29
 80055c8:	f57f ae91 	bpl.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 80055cc:	0581      	lsls	r1, r0, #22
 80055ce:	f57f ae8e 	bpl.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
  if (hi2c->XferCount != 0U)
 80055d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80055d4:	b292      	uxth	r2, r2
 80055d6:	2a00      	cmp	r2, #0
 80055d8:	f43f ae89 	beq.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055de:	f812 1b01 	ldrb.w	r1, [r2], #1
 80055e2:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 80055e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80055e6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	8563      	strh	r3, [r4, #42]	; 0x2a
 80055ee:	e67e      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055f0:	0749      	lsls	r1, r1, #29
 80055f2:	f57f ae7c 	bpl.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 80055f6:	0582      	lsls	r2, r0, #22
 80055f8:	f57f ae79 	bpl.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
  if (hi2c->XferCount != 0U)
 80055fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80055fe:	b292      	uxth	r2, r2
 8005600:	2a00      	cmp	r2, #0
 8005602:	f43f ae74 	beq.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 8005606:	e01a      	b.n	800563e <HAL_I2C_EV_IRQHandler+0x3aa>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005608:	050d      	lsls	r5, r1, #20
 800560a:	f53f ae70 	bmi.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800560e:	0651      	lsls	r1, r2, #25
 8005610:	d42f      	bmi.n	8005672 <HAL_I2C_EV_IRQHandler+0x3de>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005612:	0751      	lsls	r1, r2, #29
 8005614:	f57f ae6b 	bpl.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 8005618:	0582      	lsls	r2, r0, #22
 800561a:	f57f ae68 	bpl.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800561e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8005620:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005622:	b292      	uxth	r2, r2
 8005624:	2a04      	cmp	r2, #4
 8005626:	f000 8139 	beq.w	800589c <HAL_I2C_EV_IRQHandler+0x608>
  else if (hi2c->XferCount == 3U)
 800562a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800562c:	b292      	uxth	r2, r2
 800562e:	2a03      	cmp	r2, #3
 8005630:	f000 8155 	beq.w	80058de <HAL_I2C_EV_IRQHandler+0x64a>
  else if (hi2c->XferCount == 2U)
 8005634:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005636:	b292      	uxth	r2, r2
 8005638:	2a02      	cmp	r2, #2
 800563a:	f000 8181 	beq.w	8005940 <HAL_I2C_EV_IRQHandler+0x6ac>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800563e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8005644:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005646:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005648:	3b01      	subs	r3, #1
 800564a:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 800564c:	3201      	adds	r2, #1
    hi2c->XferCount--;
 800564e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005650:	6262      	str	r2, [r4, #36]	; 0x24
      }
 8005652:	e64c      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005654:	0752      	lsls	r2, r2, #29
 8005656:	f57f ae4a 	bpl.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 800565a:	0586      	lsls	r6, r0, #22
 800565c:	f57f ae47 	bpl.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005660:	2d10      	cmp	r5, #16
 8005662:	f000 80f7 	beq.w	8005854 <HAL_I2C_EV_IRQHandler+0x5c0>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005666:	4620      	mov	r0, r4
}
 8005668:	b00c      	add	sp, #48	; 0x30
 800566a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800566e:	f7ff bc81 	b.w	8004f74 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005672:	0546      	lsls	r6, r0, #21
 8005674:	d5cd      	bpl.n	8005612 <HAL_I2C_EV_IRQHandler+0x37e>
 8005676:	0755      	lsls	r5, r2, #29
 8005678:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800567c:	d4cc      	bmi.n	8005618 <HAL_I2C_EV_IRQHandler+0x384>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800567e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005682:	2a22      	cmp	r2, #34	; 0x22
 8005684:	f47f ae33 	bne.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    tmp = hi2c->XferCount;
 8005688:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800568a:	b292      	uxth	r2, r2
    if (tmp > 3U)
 800568c:	2a03      	cmp	r2, #3
 800568e:	f240 8197 	bls.w	80059c0 <HAL_I2C_EV_IRQHandler+0x72c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005692:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005698:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800569a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800569c:	3b01      	subs	r3, #1
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80056a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056a4:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80056a6:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 80056a8:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 80056aa:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 80056ac:	f47f ae1f 	bne.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056b0:	6822      	ldr	r2, [r4, #0]
 80056b2:	6853      	ldr	r3, [r2, #4]
 80056b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056b8:	6053      	str	r3, [r2, #4]
 80056ba:	e618      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80056bc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80056c0:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80056c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80056c4:	bf16      	itet	ne
 80056c6:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80056ca:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80056ce:	b2d2      	uxtbne	r2, r2
 80056d0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80056d4:	b11a      	cbz	r2, 80056de <HAL_I2C_EV_IRQHandler+0x44a>
 80056d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056d8:	2a00      	cmp	r2, #0
 80056da:	f47f ae25 	bne.w	8005328 <HAL_I2C_EV_IRQHandler+0x94>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80056e0:	2a00      	cmp	r2, #0
 80056e2:	f43f ae04 	beq.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 80056e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056e8:	2a00      	cmp	r2, #0
 80056ea:	f47f ae1d 	bne.w	8005328 <HAL_I2C_EV_IRQHandler+0x94>
 80056ee:	e5fe      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    I2C_ITError(hi2c);
 80056f0:	4620      	mov	r0, r4
}
 80056f2:	b00c      	add	sp, #48	; 0x30
 80056f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 80056f8:	f7ff bd16 	b.w	8005128 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 80056fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80056fe:	bb3a      	cbnz	r2, 8005750 <HAL_I2C_EV_IRQHandler+0x4bc>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005700:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005702:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005706:	611a      	str	r2, [r3, #16]
 8005708:	e5f1      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800570a:	2201      	movs	r2, #1
 800570c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800570e:	e61d      	b.n	800534c <HAL_I2C_EV_IRQHandler+0xb8>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005716:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005718:	062e      	lsls	r6, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800571a:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_UNLOCK(hi2c);
 800571e:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005722:	bf54      	ite	pl
 8005724:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005726:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8005728:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800572c:	f001 0101 	and.w	r1, r1, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005730:	4620      	mov	r0, r4
 8005732:	f7ff fc19 	bl	8004f68 <HAL_I2C_AddrCallback>
 8005736:	e5da      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      else if (hi2c->EventCount == 1U)
 8005738:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800573a:	2a01      	cmp	r2, #1
 800573c:	f47f add7 	bne.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005740:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005742:	11d2      	asrs	r2, r2, #7
 8005744:	f002 0206 	and.w	r2, r2, #6
 8005748:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 800574c:	611a      	str	r2, [r3, #16]
 800574e:	e5ce      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005750:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	611a      	str	r2, [r3, #16]
 800575a:	e5c8      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 800575c:	08005035 	.word	0x08005035
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005760:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005762:	b911      	cbnz	r1, 800576a <HAL_I2C_EV_IRQHandler+0x4d6>
 8005764:	2a40      	cmp	r2, #64	; 0x40
 8005766:	f000 80a1 	beq.w	80058ac <HAL_I2C_EV_IRQHandler+0x618>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800576a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800576c:	b922      	cbnz	r2, 8005778 <HAL_I2C_EV_IRQHandler+0x4e4>
 800576e:	6921      	ldr	r1, [r4, #16]
 8005770:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8005774:	f000 80a5 	beq.w	80058c2 <HAL_I2C_EV_IRQHandler+0x62e>
      if (hi2c->XferCount == 0U)
 8005778:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800577a:	b292      	uxth	r2, r2
 800577c:	2a00      	cmp	r2, #0
 800577e:	d142      	bne.n	8005806 <HAL_I2C_EV_IRQHandler+0x572>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005780:	9202      	str	r2, [sp, #8]
 8005782:	695a      	ldr	r2, [r3, #20]
 8005784:	9202      	str	r2, [sp, #8]
 8005786:	699a      	ldr	r2, [r3, #24]
 8005788:	9202      	str	r2, [sp, #8]
 800578a:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005792:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	6523      	str	r3, [r4, #80]	; 0x50
 8005798:	e5a9      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800579a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800579c:	6802      	ldr	r2, [r0, #0]
 800579e:	6852      	ldr	r2, [r2, #4]
 80057a0:	b292      	uxth	r2, r2
 80057a2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80057a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057a6:	b292      	uxth	r2, r2
 80057a8:	b11a      	cbz	r2, 80057b2 <HAL_I2C_EV_IRQHandler+0x51e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80057ac:	f042 0204 	orr.w	r2, r2, #4
 80057b0:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057b8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057ba:	f7fe f9eb 	bl	8003b94 <HAL_DMA_GetState>
 80057be:	2801      	cmp	r0, #1
 80057c0:	f43f ae93 	beq.w	80054ea <HAL_I2C_EV_IRQHandler+0x256>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80057c6:	4ba9      	ldr	r3, [pc, #676]	; (8005a6c <HAL_I2C_EV_IRQHandler+0x7d8>)
 80057c8:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057ca:	f7fe f8e1 	bl	8003990 <HAL_DMA_Abort_IT>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	f43f ae8b 	beq.w	80054ea <HAL_I2C_EV_IRQHandler+0x256>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80057d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80057d8:	4798      	blx	r3
 80057da:	e686      	b.n	80054ea <HAL_I2C_EV_IRQHandler+0x256>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057dc:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 80057de:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057e0:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057e6:	f7ff fbbd 	bl	8004f64 <HAL_I2C_SlaveRxCpltCallback>
 80057ea:	e6ab      	b.n	8005544 <HAL_I2C_EV_IRQHandler+0x2b0>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ec:	4ba0      	ldr	r3, [pc, #640]	; (8005a70 <HAL_I2C_EV_IRQHandler+0x7dc>)
 80057ee:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80057f0:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 80057f6:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 80057f8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005800:	f7ff fbb4 	bl	8004f6c <HAL_I2C_ListenCpltCallback>
 8005804:	e573      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      else if (hi2c->XferCount == 1U)
 8005806:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005808:	b292      	uxth	r2, r2
 800580a:	2a01      	cmp	r2, #1
 800580c:	d076      	beq.n	80058fc <HAL_I2C_EV_IRQHandler+0x668>
      else if (hi2c->XferCount == 2U)
 800580e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005810:	b292      	uxth	r2, r2
 8005812:	2a02      	cmp	r2, #2
 8005814:	f000 810c 	beq.w	8005a30 <HAL_I2C_EV_IRQHandler+0x79c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800581e:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	0511      	lsls	r1, r2, #20
 8005824:	d50e      	bpl.n	8005844 <HAL_I2C_EV_IRQHandler+0x5b0>
 8005826:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800582a:	d007      	beq.n	800583c <HAL_I2C_EV_IRQHandler+0x5a8>
 800582c:	3801      	subs	r0, #1
 800582e:	281f      	cmp	r0, #31
 8005830:	d808      	bhi.n	8005844 <HAL_I2C_EV_IRQHandler+0x5b0>
 8005832:	4a90      	ldr	r2, [pc, #576]	; (8005a74 <HAL_I2C_EV_IRQHandler+0x7e0>)
 8005834:	fa22 f000 	lsr.w	r0, r2, r0
 8005838:	07c2      	lsls	r2, r0, #31
 800583a:	d503      	bpl.n	8005844 <HAL_I2C_EV_IRQHandler+0x5b0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005842:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005844:	2200      	movs	r2, #0
 8005846:	9208      	str	r2, [sp, #32]
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	9208      	str	r2, [sp, #32]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	9308      	str	r3, [sp, #32]
 8005850:	9b08      	ldr	r3, [sp, #32]
 8005852:	e79f      	b.n	8005794 <HAL_I2C_EV_IRQHandler+0x500>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005854:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005856:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800585a:	2a21      	cmp	r2, #33	; 0x21
 800585c:	f47f ad47 	bne.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    if (hi2c->XferCount != 0U)
 8005860:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005862:	b292      	uxth	r2, r2
 8005864:	2a00      	cmp	r2, #0
 8005866:	f47f aeb9 	bne.w	80055dc <HAL_I2C_EV_IRQHandler+0x348>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800586a:	2908      	cmp	r1, #8
 800586c:	f000 8160 	beq.w	8005b30 <HAL_I2C_EV_IRQHandler+0x89c>
 8005870:	2920      	cmp	r1, #32
 8005872:	f000 815d 	beq.w	8005b30 <HAL_I2C_EV_IRQHandler+0x89c>
 8005876:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800587a:	f000 8159 	beq.w	8005b30 <HAL_I2C_EV_IRQHandler+0x89c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800587e:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005880:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005882:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 8005886:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005888:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800588a:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800588c:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800588e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005892:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005896:	f7ff fb5f 	bl	8004f58 <HAL_I2C_MasterTxCpltCallback>
 800589a:	e528      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800589c:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a4:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80058aa:	e6cb      	b.n	8005644 <HAL_I2C_EV_IRQHandler+0x3b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ac:	9100      	str	r1, [sp, #0]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	9200      	str	r2, [sp, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	9b00      	ldr	r3, [sp, #0]
 80058b8:	e519      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80058ba:	2a21      	cmp	r2, #33	; 0x21
 80058bc:	f43f add1 	beq.w	8005462 <HAL_I2C_EV_IRQHandler+0x1ce>
 80058c0:	e5c9      	b.n	8005456 <HAL_I2C_EV_IRQHandler+0x1c2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c2:	9201      	str	r2, [sp, #4]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	9201      	str	r2, [sp, #4]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	9201      	str	r2, [sp, #4]
 80058cc:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80058d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80058d8:	3301      	adds	r3, #1
 80058da:	6523      	str	r3, [r4, #80]	; 0x50
 80058dc:	e507      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058de:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80058e0:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80058e8:	f43f aea9 	beq.w	800563e <HAL_I2C_EV_IRQHandler+0x3aa>
 80058ec:	2902      	cmp	r1, #2
 80058ee:	f43f aea6 	beq.w	800563e <HAL_I2C_EV_IRQHandler+0x3aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e6a0      	b.n	800563e <HAL_I2C_EV_IRQHandler+0x3aa>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80058fc:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8005900:	f000 8102 	beq.w	8005b08 <HAL_I2C_EV_IRQHandler+0x874>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005904:	2808      	cmp	r0, #8
 8005906:	f000 80bb 	beq.w	8005a80 <HAL_I2C_EV_IRQHandler+0x7ec>
 800590a:	2820      	cmp	r0, #32
 800590c:	f000 80b8 	beq.w	8005a80 <HAL_I2C_EV_IRQHandler+0x7ec>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005910:	2d12      	cmp	r5, #18
 8005912:	f000 8150 	beq.w	8005bb6 <HAL_I2C_EV_IRQHandler+0x922>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005916:	2810      	cmp	r0, #16
 8005918:	f200 8150 	bhi.w	8005bbc <HAL_I2C_EV_IRQHandler+0x928>
 800591c:	4a56      	ldr	r2, [pc, #344]	; (8005a78 <HAL_I2C_EV_IRQHandler+0x7e4>)
 800591e:	fa22 f000 	lsr.w	r0, r2, r0
 8005922:	07c1      	lsls	r1, r0, #31
 8005924:	f140 814a 	bpl.w	8005bbc <HAL_I2C_EV_IRQHandler+0x928>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800592e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005930:	2200      	movs	r2, #0
 8005932:	9205      	str	r2, [sp, #20]
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	9205      	str	r2, [sp, #20]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	9305      	str	r3, [sp, #20]
 800593c:	9b05      	ldr	r3, [sp, #20]
 800593e:	e729      	b.n	8005794 <HAL_I2C_EV_IRQHandler+0x500>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005940:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005942:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005944:	f000 80c3 	beq.w	8005ace <HAL_I2C_EV_IRQHandler+0x83a>
 8005948:	2910      	cmp	r1, #16
 800594a:	f000 80c0 	beq.w	8005ace <HAL_I2C_EV_IRQHandler+0x83a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800594e:	2904      	cmp	r1, #4
 8005950:	f000 8122 	beq.w	8005b98 <HAL_I2C_EV_IRQHandler+0x904>
 8005954:	2902      	cmp	r1, #2
 8005956:	f000 811f 	beq.w	8005b98 <HAL_I2C_EV_IRQHandler+0x904>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800595a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005960:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8005966:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005968:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596a:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 800596c:	3b01      	subs	r3, #1
 800596e:	b29b      	uxth	r3, r3
 8005970:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005972:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8005974:	1c51      	adds	r1, r2, #1
 8005976:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005978:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 800597a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800597c:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 800597e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005980:	3b01      	subs	r3, #1
 8005982:	b29b      	uxth	r3, r3
 8005984:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005986:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8005988:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800598a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 800598e:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 8005990:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005992:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005994:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005998:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	f000 80db 	beq.w	8005b58 <HAL_I2C_EV_IRQHandler+0x8c4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a2:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059a4:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80059aa:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059ac:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80059ae:	f7ff fad5 	bl	8004f5c <HAL_I2C_MasterRxCpltCallback>
 80059b2:	e49c      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059b4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80059b8:	2a40      	cmp	r2, #64	; 0x40
 80059ba:	f47f ae0f 	bne.w	80055dc <HAL_I2C_EV_IRQHandler+0x348>
 80059be:	e652      	b.n	8005666 <HAL_I2C_EV_IRQHandler+0x3d2>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80059c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80059c2:	2802      	cmp	r0, #2
 80059c4:	f43f ac93 	beq.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 80059c8:	2a01      	cmp	r2, #1
 80059ca:	f63f ac90 	bhi.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80059ce:	4a2b      	ldr	r2, [pc, #172]	; (8005a7c <HAL_I2C_EV_IRQHandler+0x7e8>)
  __IO uint32_t count = 0U;
 80059d0:	910a      	str	r1, [sp, #40]	; 0x28
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80059d8:	fbb2 f2f1 	udiv	r2, r2, r1
 80059dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80059e0:	920a      	str	r2, [sp, #40]	; 0x28
 80059e2:	e004      	b.n	80059ee <HAL_I2C_EV_IRQHandler+0x75a>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80059ea:	f000 80ec 	beq.w	8005bc6 <HAL_I2C_EV_IRQHandler+0x932>
    count--;
 80059ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059f0:	3a01      	subs	r2, #1
 80059f2:	920a      	str	r2, [sp, #40]	; 0x28
    if (count == 0U)
 80059f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059f6:	2900      	cmp	r1, #0
 80059f8:	d1f4      	bne.n	80059e4 <HAL_I2C_EV_IRQHandler+0x750>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fe:	f042 0220 	orr.w	r2, r2, #32
 8005a02:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a0a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8005a10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8005a12:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8005a18:	3201      	adds	r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8005a1c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8005a1e:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8005a20:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8005a24:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a26:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005a2a:	f7ff faff 	bl	800502c <HAL_I2C_ErrorCallback>
 8005a2e:	e45e      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a30:	2810      	cmp	r0, #16
 8005a32:	f240 809a 	bls.w	8005b6a <HAL_I2C_EV_IRQHandler+0x8d6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3c:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a44:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	0516      	lsls	r6, r2, #20
 8005a4a:	d507      	bpl.n	8005a5c <HAL_I2C_EV_IRQHandler+0x7c8>
 8005a4c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8005a50:	f040 8098 	bne.w	8005b84 <HAL_I2C_EV_IRQHandler+0x8f0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a5a:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	9207      	str	r2, [sp, #28]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	9207      	str	r2, [sp, #28]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	9307      	str	r3, [sp, #28]
 8005a68:	9b07      	ldr	r3, [sp, #28]
 8005a6a:	e693      	b.n	8005794 <HAL_I2C_EV_IRQHandler+0x500>
 8005a6c:	08005035 	.word	0x08005035
 8005a70:	ffff0000 	.word	0xffff0000
 8005a74:	80008081 	.word	0x80008081
 8005a78:	00010014 	.word	0x00010014
 8005a7c:	20000030 	.word	0x20000030
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a80:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a82:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a88:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a8a:	9106      	str	r1, [sp, #24]
 8005a8c:	695a      	ldr	r2, [r3, #20]
 8005a8e:	9206      	str	r2, [sp, #24]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	9206      	str	r2, [sp, #24]
 8005a94:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	e679      	b.n	8005794 <HAL_I2C_EV_IRQHandler+0x500>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005aa0:	2d08      	cmp	r5, #8
 8005aa2:	d018      	beq.n	8005ad6 <HAL_I2C_EV_IRQHandler+0x842>
 8005aa4:	2d20      	cmp	r5, #32
 8005aa6:	d016      	beq.n	8005ad6 <HAL_I2C_EV_IRQHandler+0x842>
 8005aa8:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8005aac:	d013      	beq.n	8005ad6 <HAL_I2C_EV_IRQHandler+0x842>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005aae:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ab0:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ab2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab6:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8005ab8:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005aba:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005abc:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005abe:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac0:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005ac4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ac8:	f7ff fa46 	bl	8004f58 <HAL_I2C_MasterTxCpltCallback>
 8005acc:	e40f      	b.n	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e744      	b.n	8005960 <HAL_I2C_EV_IRQHandler+0x6cc>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005adc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ade:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ae0:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8005ae2:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005ae8:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005aea:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005aec:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005af0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005af8:	2b40      	cmp	r3, #64	; 0x40
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005afa:	4620      	mov	r0, r4
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005afc:	f47f aecb 	bne.w	8005896 <HAL_I2C_EV_IRQHandler+0x602>
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005b00:	f7ff fa36 	bl	8004f70 <HAL_I2C_MemTxCpltCallback>
 8005b04:	f7ff bbf3 	b.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0e:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8005b16:	d043      	beq.n	8005ba0 <HAL_I2C_EV_IRQHandler+0x90c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b18:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1a:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b20:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b22:	9103      	str	r1, [sp, #12]
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	9203      	str	r2, [sp, #12]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	9303      	str	r3, [sp, #12]
 8005b2c:	9b03      	ldr	r3, [sp, #12]
 8005b2e:	e631      	b.n	8005794 <HAL_I2C_EV_IRQHandler+0x500>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b36:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b38:	681a      	ldr	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b3a:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        hi2c->State = HAL_I2C_STATE_READY;
 8005b40:	2520      	movs	r5, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b42:	601a      	str	r2, [r3, #0]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b44:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b46:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b48:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b50:	f7ff fa02 	bl	8004f58 <HAL_I2C_MasterTxCpltCallback>
 8005b54:	f7ff bbcb 	b.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005b5e:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b60:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005b62:	f7ff fa61 	bl	8005028 <HAL_I2C_MemRxCpltCallback>
 8005b66:	f7ff bbc2 	b.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b6a:	4a28      	ldr	r2, [pc, #160]	; (8005c0c <HAL_I2C_EV_IRQHandler+0x978>)
 8005b6c:	40c2      	lsrs	r2, r0
 8005b6e:	07d2      	lsls	r2, r2, #31
 8005b70:	f57f af61 	bpl.w	8005a36 <HAL_I2C_EV_IRQHandler+0x7a2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b7a:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	0515      	lsls	r5, r2, #20
 8005b80:	f57f af6c 	bpl.w	8005a5c <HAL_I2C_EV_IRQHandler+0x7c8>
 8005b84:	3801      	subs	r0, #1
 8005b86:	281f      	cmp	r0, #31
 8005b88:	f63f af68 	bhi.w	8005a5c <HAL_I2C_EV_IRQHandler+0x7c8>
 8005b8c:	4a20      	ldr	r2, [pc, #128]	; (8005c10 <HAL_I2C_EV_IRQHandler+0x97c>)
 8005b8e:	40c2      	lsrs	r2, r0
 8005b90:	07d0      	lsls	r0, r2, #31
 8005b92:	f57f af63 	bpl.w	8005a5c <HAL_I2C_EV_IRQHandler+0x7c8>
 8005b96:	e75d      	b.n	8005a54 <HAL_I2C_EV_IRQHandler+0x7c0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	e6df      	b.n	8005960 <HAL_I2C_EV_IRQHandler+0x6cc>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba0:	9204      	str	r2, [sp, #16]
 8005ba2:	695a      	ldr	r2, [r3, #20]
 8005ba4:	9204      	str	r2, [sp, #16]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	9204      	str	r2, [sp, #16]
 8005baa:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	e5ee      	b.n	8005794 <HAL_I2C_EV_IRQHandler+0x500>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005bb6:	2801      	cmp	r0, #1
 8005bb8:	f47f af62 	bne.w	8005a80 <HAL_I2C_EV_IRQHandler+0x7ec>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e6b4      	b.n	8005930 <HAL_I2C_EV_IRQHandler+0x69c>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc6:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc8:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bca:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005bce:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bd0:	6859      	ldr	r1, [r3, #4]
 8005bd2:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8005bd6:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8005bdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8005bde:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8005be4:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8005be6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bec:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8005bf0:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8005bf4:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bf6:	f47f aed5 	bne.w	80059a4 <HAL_I2C_EV_IRQHandler+0x710>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005bfe:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8005c00:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005c02:	f7ff fa11 	bl	8005028 <HAL_I2C_MemRxCpltCallback>
 8005c06:	f7ff bb72 	b.w	80052ee <HAL_I2C_EV_IRQHandler+0x5a>
 8005c0a:	bf00      	nop
 8005c0c:	00010014 	.word	0x00010014
 8005c10:	80008081 	.word	0x80008081

08005c14 <HAL_I2C_GetState>:
  return hi2c->State;
 8005c14:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop

08005c1c <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005c1c:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8005c1e:	4770      	bx	lr

08005c20 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c20:	2800      	cmp	r0, #0
 8005c22:	f000 8263 	beq.w	80060ec <HAL_RCC_OscConfig+0x4cc>
{
 8005c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005c2a:	6803      	ldr	r3, [r0, #0]
 8005c2c:	2b0f      	cmp	r3, #15
{
 8005c2e:	b082      	sub	sp, #8
 8005c30:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005c32:	f200 8137 	bhi.w	8005ea4 <HAL_RCC_OscConfig+0x284>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c36:	07dd      	lsls	r5, r3, #31
 8005c38:	d537      	bpl.n	8005caa <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005c3a:	6863      	ldr	r3, [r4, #4]
 8005c3c:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8005c40:	d003      	beq.n	8005c4a <HAL_RCC_OscConfig+0x2a>
 8005c42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c46:	f040 81a4 	bne.w	8005f92 <HAL_RCC_OscConfig+0x372>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c4a:	4ab6      	ldr	r2, [pc, #728]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
 8005c4c:	6893      	ldr	r3, [r2, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	f000 8180 	beq.w	8005f58 <HAL_RCC_OscConfig+0x338>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c58:	6893      	ldr	r3, [r2, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	f000 8176 	beq.w	8005f50 <HAL_RCC_OscConfig+0x330>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c64:	6863      	ldr	r3, [r4, #4]
 8005c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6a:	f000 817f 	beq.w	8005f6c <HAL_RCC_OscConfig+0x34c>
 8005c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c72:	f000 8207 	beq.w	8006084 <HAL_RCC_OscConfig+0x464>
 8005c76:	4dab      	ldr	r5, [pc, #684]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
 8005c78:	682a      	ldr	r2, [r5, #0]
 8005c7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c7e:	602a      	str	r2, [r5, #0]
 8005c80:	682a      	ldr	r2, [r5, #0]
 8005c82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c86:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f040 8174 	bne.w	8005f76 <HAL_RCC_OscConfig+0x356>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8e:	f7fd fa27 	bl	80030e0 <HAL_GetTick>
 8005c92:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c94:	e005      	b.n	8005ca2 <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c96:	f7fd fa23 	bl	80030e0 <HAL_GetTick>
 8005c9a:	1b80      	subs	r0, r0, r6
 8005c9c:	2864      	cmp	r0, #100	; 0x64
 8005c9e:	f200 819a 	bhi.w	8005fd6 <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca2:	682b      	ldr	r3, [r5, #0]
 8005ca4:	039b      	lsls	r3, r3, #14
 8005ca6:	d4f6      	bmi.n	8005c96 <HAL_RCC_OscConfig+0x76>
 8005ca8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005caa:	079f      	lsls	r7, r3, #30
 8005cac:	d530      	bpl.n	8005d10 <HAL_RCC_OscConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005cae:	68e3      	ldr	r3, [r4, #12]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	f200 810c 	bhi.w	8005ece <HAL_RCC_OscConfig+0x2ae>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	2b1f      	cmp	r3, #31
 8005cba:	f200 8111 	bhi.w	8005ee0 <HAL_RCC_OscConfig+0x2c0>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cbe:	4b99      	ldr	r3, [pc, #612]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	f012 0f0c 	tst.w	r2, #12
 8005cc6:	f000 80f7 	beq.w	8005eb8 <HAL_RCC_OscConfig+0x298>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cd0:	2a08      	cmp	r2, #8
 8005cd2:	f000 80ed 	beq.w	8005eb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8198 	beq.w	800600e <HAL_RCC_OscConfig+0x3ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cde:	4b92      	ldr	r3, [pc, #584]	; (8005f28 <HAL_RCC_OscConfig+0x308>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce0:	4e90      	ldr	r6, [pc, #576]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_HSI_ENABLE();
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ce6:	f7fd f9fb 	bl	80030e0 <HAL_GetTick>
 8005cea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cec:	e005      	b.n	8005cfa <HAL_RCC_OscConfig+0xda>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cee:	f7fd f9f7 	bl	80030e0 <HAL_GetTick>
 8005cf2:	1b40      	subs	r0, r0, r5
 8005cf4:	2802      	cmp	r0, #2
 8005cf6:	f200 816e 	bhi.w	8005fd6 <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cfa:	6833      	ldr	r3, [r6, #0]
 8005cfc:	0798      	lsls	r0, r3, #30
 8005cfe:	d5f6      	bpl.n	8005cee <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d00:	6833      	ldr	r3, [r6, #0]
 8005d02:	6922      	ldr	r2, [r4, #16]
 8005d04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d08:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005d0c:	6033      	str	r3, [r6, #0]
 8005d0e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d10:	071a      	lsls	r2, r3, #28
 8005d12:	f100 80af 	bmi.w	8005e74 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d16:	075d      	lsls	r5, r3, #29
 8005d18:	d544      	bpl.n	8005da4 <HAL_RCC_OscConfig+0x184>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005d1a:	68a3      	ldr	r3, [r4, #8]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d906      	bls.n	8005d2e <HAL_RCC_OscConfig+0x10e>
 8005d20:	2b05      	cmp	r3, #5
 8005d22:	d004      	beq.n	8005d2e <HAL_RCC_OscConfig+0x10e>
 8005d24:	4881      	ldr	r0, [pc, #516]	; (8005f2c <HAL_RCC_OscConfig+0x30c>)
 8005d26:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005d2a:	f7fc fde7 	bl	80028fc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d2e:	4a7d      	ldr	r2, [pc, #500]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
 8005d30:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d32:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8005d36:	f040 80f2 	bne.w	8005f1e <HAL_RCC_OscConfig+0x2fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d42:	6413      	str	r3, [r2, #64]	; 0x40
 8005d44:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005d4e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d50:	4e77      	ldr	r6, [pc, #476]	; (8005f30 <HAL_RCC_OscConfig+0x310>)
 8005d52:	6833      	ldr	r3, [r6, #0]
 8005d54:	05d8      	lsls	r0, r3, #23
 8005d56:	f140 812e 	bpl.w	8005fb6 <HAL_RCC_OscConfig+0x396>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d5a:	68a3      	ldr	r3, [r4, #8]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	f000 813e 	beq.w	8005fde <HAL_RCC_OscConfig+0x3be>
 8005d62:	2b05      	cmp	r3, #5
 8005d64:	f000 81c4 	beq.w	80060f0 <HAL_RCC_OscConfig+0x4d0>
 8005d68:	4e6e      	ldr	r6, [pc, #440]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
 8005d6a:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005d6c:	f022 0201 	bic.w	r2, r2, #1
 8005d70:	6732      	str	r2, [r6, #112]	; 0x70
 8005d72:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005d74:	f022 0204 	bic.w	r2, r2, #4
 8005d78:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f040 8134 	bne.w	8005fe8 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d80:	f7fd f9ae 	bl	80030e0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d84:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005d88:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d8a:	e005      	b.n	8005d98 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d8c:	f7fd f9a8 	bl	80030e0 <HAL_GetTick>
 8005d90:	1bc0      	subs	r0, r0, r7
 8005d92:	4540      	cmp	r0, r8
 8005d94:	f200 811f 	bhi.w	8005fd6 <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d98:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005d9a:	079b      	lsls	r3, r3, #30
 8005d9c:	d4f6      	bmi.n	8005d8c <HAL_RCC_OscConfig+0x16c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	f040 817a 	bne.w	8006098 <HAL_RCC_OscConfig+0x478>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005da4:	69a0      	ldr	r0, [r4, #24]
 8005da6:	2802      	cmp	r0, #2
 8005da8:	f200 80c8 	bhi.w	8005f3c <HAL_RCC_OscConfig+0x31c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d05d      	beq.n	8005e6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005db0:	4d5c      	ldr	r5, [pc, #368]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
 8005db2:	68ab      	ldr	r3, [r5, #8]
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	f000 8139 	beq.w	8006030 <HAL_RCC_OscConfig+0x410>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dbe:	2802      	cmp	r0, #2
 8005dc0:	f040 8182 	bne.w	80060c8 <HAL_RCC_OscConfig+0x4a8>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005dc4:	69e3      	ldr	r3, [r4, #28]
 8005dc6:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8005dca:	d004      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x1b6>
 8005dcc:	4857      	ldr	r0, [pc, #348]	; (8005f2c <HAL_RCC_OscConfig+0x30c>)
 8005dce:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005dd2:	f7fc fd93 	bl	80028fc <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005dd6:	6a23      	ldr	r3, [r4, #32]
 8005dd8:	2b3f      	cmp	r3, #63	; 0x3f
 8005dda:	f200 816f 	bhi.w	80060bc <HAL_RCC_OscConfig+0x49c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005de0:	3b32      	subs	r3, #50	; 0x32
 8005de2:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8005de6:	f200 8163 	bhi.w	80060b0 <HAL_RCC_OscConfig+0x490>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005dea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	f200 8159 	bhi.w	80060a4 <HAL_RCC_OscConfig+0x484>
 8005df2:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8005df6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfa:	07d8      	lsls	r0, r3, #31
 8005dfc:	f140 8152 	bpl.w	80060a4 <HAL_RCC_OscConfig+0x484>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005e00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e02:	3b02      	subs	r3, #2
 8005e04:	2b0d      	cmp	r3, #13
 8005e06:	f200 817d 	bhi.w	8006104 <HAL_RCC_OscConfig+0x4e4>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0a:	4b4a      	ldr	r3, [pc, #296]	; (8005f34 <HAL_RCC_OscConfig+0x314>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0c:	4e45      	ldr	r6, [pc, #276]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_PLL_DISABLE();
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005e12:	f7fd f965 	bl	80030e0 <HAL_GetTick>
 8005e16:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e18:	e005      	b.n	8005e26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e1a:	f7fd f961 	bl	80030e0 <HAL_GetTick>
 8005e1e:	1b40      	subs	r0, r0, r5
 8005e20:	2802      	cmp	r0, #2
 8005e22:	f200 80d8 	bhi.w	8005fd6 <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e26:	6833      	ldr	r3, [r6, #0]
 8005e28:	0199      	lsls	r1, r3, #6
 8005e2a:	d4f6      	bmi.n	8005e1a <HAL_RCC_OscConfig+0x1fa>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e2c:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8005e30:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8005e34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005e36:	432b      	orrs	r3, r5
 8005e38:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005e3c:	0852      	lsrs	r2, r2, #1
 8005e3e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005e42:	3a01      	subs	r2, #1
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e44:	493b      	ldr	r1, [pc, #236]	; (8005f34 <HAL_RCC_OscConfig+0x314>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e46:	4d37      	ldr	r5, [pc, #220]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005e4c:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e4e:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8005e50:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8005e52:	f7fd f945 	bl	80030e0 <HAL_GetTick>
 8005e56:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e58:	e005      	b.n	8005e66 <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e5a:	f7fd f941 	bl	80030e0 <HAL_GetTick>
 8005e5e:	1b00      	subs	r0, r0, r4
 8005e60:	2802      	cmp	r0, #2
 8005e62:	f200 80b8 	bhi.w	8005fd6 <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	019a      	lsls	r2, r3, #6
 8005e6a:	d5f6      	bpl.n	8005e5a <HAL_RCC_OscConfig+0x23a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005e6c:	2000      	movs	r0, #0
}
 8005e6e:	b002      	add	sp, #8
 8005e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005e74:	6963      	ldr	r3, [r4, #20]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d848      	bhi.n	8005f0c <HAL_RCC_OscConfig+0x2ec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d036      	beq.n	8005eec <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_LSI_ENABLE();
 8005e7e:	4b2e      	ldr	r3, [pc, #184]	; (8005f38 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e80:	4e28      	ldr	r6, [pc, #160]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
      __HAL_RCC_LSI_ENABLE();
 8005e82:	2201      	movs	r2, #1
 8005e84:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005e86:	f7fd f92b 	bl	80030e0 <HAL_GetTick>
 8005e8a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8c:	e005      	b.n	8005e9a <HAL_RCC_OscConfig+0x27a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e8e:	f7fd f927 	bl	80030e0 <HAL_GetTick>
 8005e92:	1b40      	subs	r0, r0, r5
 8005e94:	2802      	cmp	r0, #2
 8005e96:	f200 809e 	bhi.w	8005fd6 <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e9a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005e9c:	079b      	lsls	r3, r3, #30
 8005e9e:	d5f6      	bpl.n	8005e8e <HAL_RCC_OscConfig+0x26e>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	e738      	b.n	8005d16 <HAL_RCC_OscConfig+0xf6>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005ea4:	4821      	ldr	r0, [pc, #132]	; (8005f2c <HAL_RCC_OscConfig+0x30c>)
 8005ea6:	21e8      	movs	r1, #232	; 0xe8
 8005ea8:	f7fc fd28 	bl	80028fc <assert_failed>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	e6c2      	b.n	8005c36 <HAL_RCC_OscConfig+0x16>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	025e      	lsls	r6, r3, #9
 8005eb4:	f53f af0f 	bmi.w	8005cd6 <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	079d      	lsls	r5, r3, #30
 8005ebe:	d56d      	bpl.n	8005f9c <HAL_RCC_OscConfig+0x37c>
 8005ec0:	68e3      	ldr	r3, [r4, #12]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d06a      	beq.n	8005f9c <HAL_RCC_OscConfig+0x37c>
        return HAL_ERROR;
 8005ec6:	2001      	movs	r0, #1
}
 8005ec8:	b002      	add	sp, #8
 8005eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005ece:	4817      	ldr	r0, [pc, #92]	; (8005f2c <HAL_RCC_OscConfig+0x30c>)
 8005ed0:	f240 111f 	movw	r1, #287	; 0x11f
 8005ed4:	f7fc fd12 	bl	80028fc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005ed8:	6923      	ldr	r3, [r4, #16]
 8005eda:	2b1f      	cmp	r3, #31
 8005edc:	f67f aeef 	bls.w	8005cbe <HAL_RCC_OscConfig+0x9e>
 8005ee0:	4812      	ldr	r0, [pc, #72]	; (8005f2c <HAL_RCC_OscConfig+0x30c>)
 8005ee2:	f44f 7190 	mov.w	r1, #288	; 0x120
 8005ee6:	f7fc fd09 	bl	80028fc <assert_failed>
 8005eea:	e6e8      	b.n	8005cbe <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_LSI_DISABLE();
 8005eec:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eee:	4e0d      	ldr	r6, [pc, #52]	; (8005f24 <HAL_RCC_OscConfig+0x304>)
      __HAL_RCC_LSI_DISABLE();
 8005ef0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005ef2:	f7fd f8f5 	bl	80030e0 <HAL_GetTick>
 8005ef6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef8:	e004      	b.n	8005f04 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005efa:	f7fd f8f1 	bl	80030e0 <HAL_GetTick>
 8005efe:	1b40      	subs	r0, r0, r5
 8005f00:	2802      	cmp	r0, #2
 8005f02:	d868      	bhi.n	8005fd6 <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f04:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005f06:	079f      	lsls	r7, r3, #30
 8005f08:	d4f7      	bmi.n	8005efa <HAL_RCC_OscConfig+0x2da>
 8005f0a:	e7c9      	b.n	8005ea0 <HAL_RCC_OscConfig+0x280>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005f0c:	4807      	ldr	r0, [pc, #28]	; (8005f2c <HAL_RCC_OscConfig+0x30c>)
 8005f0e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8005f12:	f7fc fcf3 	bl	80028fc <assert_failed>
 8005f16:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0e7      	beq.n	8005eec <HAL_RCC_OscConfig+0x2cc>
 8005f1c:	e7af      	b.n	8005e7e <HAL_RCC_OscConfig+0x25e>
    FlagStatus       pwrclkchanged = RESET;
 8005f1e:	2500      	movs	r5, #0
 8005f20:	e716      	b.n	8005d50 <HAL_RCC_OscConfig+0x130>
 8005f22:	bf00      	nop
 8005f24:	40023800 	.word	0x40023800
 8005f28:	42470000 	.word	0x42470000
 8005f2c:	0800c86c 	.word	0x0800c86c
 8005f30:	40007000 	.word	0x40007000
 8005f34:	42470060 	.word	0x42470060
 8005f38:	42470e80 	.word	0x42470e80
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005f3c:	4874      	ldr	r0, [pc, #464]	; (8006110 <HAL_RCC_OscConfig+0x4f0>)
 8005f3e:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005f42:	f7fc fcdb 	bl	80028fc <assert_failed>
 8005f46:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f47f af31 	bne.w	8005db0 <HAL_RCC_OscConfig+0x190>
 8005f4e:	e78d      	b.n	8005e6c <HAL_RCC_OscConfig+0x24c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f50:	6853      	ldr	r3, [r2, #4]
 8005f52:	0258      	lsls	r0, r3, #9
 8005f54:	f57f ae86 	bpl.w	8005c64 <HAL_RCC_OscConfig+0x44>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f58:	4b6e      	ldr	r3, [pc, #440]	; (8006114 <HAL_RCC_OscConfig+0x4f4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	0399      	lsls	r1, r3, #14
 8005f5e:	f57f aea3 	bpl.w	8005ca8 <HAL_RCC_OscConfig+0x88>
 8005f62:	6863      	ldr	r3, [r4, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f47f ae9f 	bne.w	8005ca8 <HAL_RCC_OscConfig+0x88>
 8005f6a:	e7ac      	b.n	8005ec6 <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f6c:	4a69      	ldr	r2, [pc, #420]	; (8006114 <HAL_RCC_OscConfig+0x4f4>)
 8005f6e:	6813      	ldr	r3, [r2, #0]
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005f76:	f7fd f8b3 	bl	80030e0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f7a:	4e66      	ldr	r6, [pc, #408]	; (8006114 <HAL_RCC_OscConfig+0x4f4>)
        tickstart = HAL_GetTick();
 8005f7c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f7e:	e004      	b.n	8005f8a <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f80:	f7fd f8ae 	bl	80030e0 <HAL_GetTick>
 8005f84:	1b40      	subs	r0, r0, r5
 8005f86:	2864      	cmp	r0, #100	; 0x64
 8005f88:	d825      	bhi.n	8005fd6 <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f8a:	6833      	ldr	r3, [r6, #0]
 8005f8c:	039a      	lsls	r2, r3, #14
 8005f8e:	d5f7      	bpl.n	8005f80 <HAL_RCC_OscConfig+0x360>
 8005f90:	e68a      	b.n	8005ca8 <HAL_RCC_OscConfig+0x88>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005f92:	485f      	ldr	r0, [pc, #380]	; (8006110 <HAL_RCC_OscConfig+0x4f0>)
 8005f94:	21ed      	movs	r1, #237	; 0xed
 8005f96:	f7fc fcb1 	bl	80028fc <assert_failed>
 8005f9a:	e656      	b.n	8005c4a <HAL_RCC_OscConfig+0x2a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f9c:	4a5d      	ldr	r2, [pc, #372]	; (8006114 <HAL_RCC_OscConfig+0x4f4>)
 8005f9e:	6921      	ldr	r1, [r4, #16]
 8005fa0:	6813      	ldr	r3, [r2, #0]
 8005fa2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005fa6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fae:	071a      	lsls	r2, r3, #28
 8005fb0:	f57f aeb1 	bpl.w	8005d16 <HAL_RCC_OscConfig+0xf6>
 8005fb4:	e75e      	b.n	8005e74 <HAL_RCC_OscConfig+0x254>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fb6:	6833      	ldr	r3, [r6, #0]
 8005fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fbc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005fbe:	f7fd f88f 	bl	80030e0 <HAL_GetTick>
 8005fc2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc4:	6833      	ldr	r3, [r6, #0]
 8005fc6:	05d9      	lsls	r1, r3, #23
 8005fc8:	f53f aec7 	bmi.w	8005d5a <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fcc:	f7fd f888 	bl	80030e0 <HAL_GetTick>
 8005fd0:	1bc0      	subs	r0, r0, r7
 8005fd2:	2802      	cmp	r0, #2
 8005fd4:	d9f6      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x3a4>
            return HAL_TIMEOUT;
 8005fd6:	2003      	movs	r0, #3
}
 8005fd8:	b002      	add	sp, #8
 8005fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fde:	4a4d      	ldr	r2, [pc, #308]	; (8006114 <HAL_RCC_OscConfig+0x4f4>)
 8005fe0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005fe8:	f7fd f87a 	bl	80030e0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fec:	4f49      	ldr	r7, [pc, #292]	; (8006114 <HAL_RCC_OscConfig+0x4f4>)
      tickstart = HAL_GetTick();
 8005fee:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff4:	e004      	b.n	8006000 <HAL_RCC_OscConfig+0x3e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff6:	f7fd f873 	bl	80030e0 <HAL_GetTick>
 8005ffa:	1b80      	subs	r0, r0, r6
 8005ffc:	4540      	cmp	r0, r8
 8005ffe:	d8ea      	bhi.n	8005fd6 <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006000:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006002:	079a      	lsls	r2, r3, #30
 8006004:	d5f7      	bpl.n	8005ff6 <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 8006006:	2d00      	cmp	r5, #0
 8006008:	f43f aecc 	beq.w	8005da4 <HAL_RCC_OscConfig+0x184>
 800600c:	e044      	b.n	8006098 <HAL_RCC_OscConfig+0x478>
        __HAL_RCC_HSI_DISABLE();
 800600e:	4a42      	ldr	r2, [pc, #264]	; (8006118 <HAL_RCC_OscConfig+0x4f8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006010:	4e40      	ldr	r6, [pc, #256]	; (8006114 <HAL_RCC_OscConfig+0x4f4>)
        __HAL_RCC_HSI_DISABLE();
 8006012:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006014:	f7fd f864 	bl	80030e0 <HAL_GetTick>
 8006018:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800601a:	e004      	b.n	8006026 <HAL_RCC_OscConfig+0x406>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800601c:	f7fd f860 	bl	80030e0 <HAL_GetTick>
 8006020:	1b40      	subs	r0, r0, r5
 8006022:	2802      	cmp	r0, #2
 8006024:	d8d7      	bhi.n	8005fd6 <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006026:	6833      	ldr	r3, [r6, #0]
 8006028:	0799      	lsls	r1, r3, #30
 800602a:	d4f7      	bmi.n	800601c <HAL_RCC_OscConfig+0x3fc>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	e66f      	b.n	8005d10 <HAL_RCC_OscConfig+0xf0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006030:	2801      	cmp	r0, #1
 8006032:	f43f af1c 	beq.w	8005e6e <HAL_RCC_OscConfig+0x24e>
        pll_config = RCC->PLLCFGR;
 8006036:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006038:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800603a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800603e:	4291      	cmp	r1, r2
 8006040:	f47f af41 	bne.w	8005ec6 <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006044:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006046:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604a:	4291      	cmp	r1, r2
 800604c:	f47f af3b 	bne.w	8005ec6 <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006050:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006052:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8006056:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006058:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800605c:	f47f af33 	bne.w	8005ec6 <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006060:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006062:	0852      	lsrs	r2, r2, #1
 8006064:	3a01      	subs	r2, #1
 8006066:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800606a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800606e:	f47f af2a 	bne.w	8005ec6 <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006072:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006074:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006078:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 800607c:	bf14      	ite	ne
 800607e:	2001      	movne	r0, #1
 8006080:	2000      	moveq	r0, #0
 8006082:	e6f4      	b.n	8005e6e <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006084:	4b23      	ldr	r3, [pc, #140]	; (8006114 <HAL_RCC_OscConfig+0x4f4>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006094:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006096:	e76e      	b.n	8005f76 <HAL_RCC_OscConfig+0x356>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006098:	4a1e      	ldr	r2, [pc, #120]	; (8006114 <HAL_RCC_OscConfig+0x4f4>)
 800609a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800609c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6413      	str	r3, [r2, #64]	; 0x40
 80060a2:	e67f      	b.n	8005da4 <HAL_RCC_OscConfig+0x184>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80060a4:	481a      	ldr	r0, [pc, #104]	; (8006110 <HAL_RCC_OscConfig+0x4f0>)
 80060a6:	f240 11db 	movw	r1, #475	; 0x1db
 80060aa:	f7fc fc27 	bl	80028fc <assert_failed>
 80060ae:	e6a7      	b.n	8005e00 <HAL_RCC_OscConfig+0x1e0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80060b0:	4817      	ldr	r0, [pc, #92]	; (8006110 <HAL_RCC_OscConfig+0x4f0>)
 80060b2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80060b6:	f7fc fc21 	bl	80028fc <assert_failed>
 80060ba:	e696      	b.n	8005dea <HAL_RCC_OscConfig+0x1ca>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80060bc:	4814      	ldr	r0, [pc, #80]	; (8006110 <HAL_RCC_OscConfig+0x4f0>)
 80060be:	f240 11d9 	movw	r1, #473	; 0x1d9
 80060c2:	f7fc fc1b 	bl	80028fc <assert_failed>
 80060c6:	e68a      	b.n	8005dde <HAL_RCC_OscConfig+0x1be>
        __HAL_RCC_PLL_DISABLE();
 80060c8:	4b14      	ldr	r3, [pc, #80]	; (800611c <HAL_RCC_OscConfig+0x4fc>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80060ce:	f7fd f807 	bl	80030e0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80060d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	e005      	b.n	80060e4 <HAL_RCC_OscConfig+0x4c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fd f802 	bl	80030e0 <HAL_GetTick>
 80060dc:	1b40      	subs	r0, r0, r5
 80060de:	2802      	cmp	r0, #2
 80060e0:	f63f af79 	bhi.w	8005fd6 <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	019b      	lsls	r3, r3, #6
 80060e8:	d4f6      	bmi.n	80060d8 <HAL_RCC_OscConfig+0x4b8>
 80060ea:	e6bf      	b.n	8005e6c <HAL_RCC_OscConfig+0x24c>
    return HAL_ERROR;
 80060ec:	2001      	movs	r0, #1
}
 80060ee:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f0:	4b08      	ldr	r3, [pc, #32]	; (8006114 <HAL_RCC_OscConfig+0x4f4>)
 80060f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060f4:	f042 0204 	orr.w	r2, r2, #4
 80060f8:	671a      	str	r2, [r3, #112]	; 0x70
 80060fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060fc:	f042 0201 	orr.w	r2, r2, #1
 8006100:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006102:	e771      	b.n	8005fe8 <HAL_RCC_OscConfig+0x3c8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006104:	4802      	ldr	r0, [pc, #8]	; (8006110 <HAL_RCC_OscConfig+0x4f0>)
 8006106:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800610a:	f7fc fbf7 	bl	80028fc <assert_failed>
 800610e:	e67c      	b.n	8005e0a <HAL_RCC_OscConfig+0x1ea>
 8006110:	0800c86c 	.word	0x0800c86c
 8006114:	40023800 	.word	0x40023800
 8006118:	42470000 	.word	0x42470000
 800611c:	42470060 	.word	0x42470060

08006120 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006120:	4917      	ldr	r1, [pc, #92]	; (8006180 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8006122:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006124:	688b      	ldr	r3, [r1, #8]
 8006126:	f003 030c 	and.w	r3, r3, #12
 800612a:	2b04      	cmp	r3, #4
 800612c:	d01b      	beq.n	8006166 <HAL_RCC_GetSysClockFreq+0x46>
 800612e:	2b08      	cmp	r3, #8
 8006130:	d117      	bne.n	8006162 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006132:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006134:	684b      	ldr	r3, [r1, #4]
 8006136:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800613a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800613e:	d114      	bne.n	800616a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006140:	6849      	ldr	r1, [r1, #4]
 8006142:	4810      	ldr	r0, [pc, #64]	; (8006184 <HAL_RCC_GetSysClockFreq+0x64>)
 8006144:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006148:	fba1 0100 	umull	r0, r1, r1, r0
 800614c:	f7fa fa7c 	bl	8000648 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <HAL_RCC_GetSysClockFreq+0x60>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006158:	3301      	adds	r3, #1
 800615a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800615c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006160:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8006162:	4808      	ldr	r0, [pc, #32]	; (8006184 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8006164:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006166:	4808      	ldr	r0, [pc, #32]	; (8006188 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8006168:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800616a:	684b      	ldr	r3, [r1, #4]
 800616c:	4806      	ldr	r0, [pc, #24]	; (8006188 <HAL_RCC_GetSysClockFreq+0x68>)
 800616e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006172:	fba3 0100 	umull	r0, r1, r3, r0
 8006176:	2300      	movs	r3, #0
 8006178:	f7fa fa66 	bl	8000648 <__aeabi_uldivmod>
 800617c:	e7e8      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0x30>
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800
 8006184:	00f42400 	.word	0x00f42400
 8006188:	017d7840 	.word	0x017d7840

0800618c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800618c:	2800      	cmp	r0, #0
 800618e:	f000 80f2 	beq.w	8006376 <HAL_RCC_ClockConfig+0x1ea>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006192:	6803      	ldr	r3, [r0, #0]
 8006194:	3b01      	subs	r3, #1
 8006196:	2b0e      	cmp	r3, #14
{
 8006198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800619c:	460d      	mov	r5, r1
 800619e:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80061a0:	f200 80d0 	bhi.w	8006344 <HAL_RCC_ClockConfig+0x1b8>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80061a4:	2d07      	cmp	r5, #7
 80061a6:	f200 80c2 	bhi.w	800632e <HAL_RCC_ClockConfig+0x1a2>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061aa:	4a74      	ldr	r2, [pc, #464]	; (800637c <HAL_RCC_ClockConfig+0x1f0>)
 80061ac:	6813      	ldr	r3, [r2, #0]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	42ab      	cmp	r3, r5
 80061b4:	d36a      	bcc.n	800628c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	0798      	lsls	r0, r3, #30
 80061ba:	d52c      	bpl.n	8006216 <HAL_RCC_ClockConfig+0x8a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061bc:	0759      	lsls	r1, r3, #29
 80061be:	d504      	bpl.n	80061ca <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061c0:	496f      	ldr	r1, [pc, #444]	; (8006380 <HAL_RCC_ClockConfig+0x1f4>)
 80061c2:	688a      	ldr	r2, [r1, #8]
 80061c4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80061c8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ca:	071a      	lsls	r2, r3, #28
 80061cc:	d504      	bpl.n	80061d8 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061ce:	496c      	ldr	r1, [pc, #432]	; (8006380 <HAL_RCC_ClockConfig+0x1f4>)
 80061d0:	688a      	ldr	r2, [r1, #8]
 80061d2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80061d6:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80061d8:	68a1      	ldr	r1, [r4, #8]
 80061da:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 80061de:	d014      	beq.n	800620a <HAL_RCC_ClockConfig+0x7e>
 80061e0:	f021 0220 	bic.w	r2, r1, #32
 80061e4:	2a90      	cmp	r2, #144	; 0x90
 80061e6:	d010      	beq.n	800620a <HAL_RCC_ClockConfig+0x7e>
 80061e8:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 80061ec:	2aa0      	cmp	r2, #160	; 0xa0
 80061ee:	d00c      	beq.n	800620a <HAL_RCC_ClockConfig+0x7e>
 80061f0:	f021 0210 	bic.w	r2, r1, #16
 80061f4:	2ac0      	cmp	r2, #192	; 0xc0
 80061f6:	d008      	beq.n	800620a <HAL_RCC_ClockConfig+0x7e>
 80061f8:	29f0      	cmp	r1, #240	; 0xf0
 80061fa:	d006      	beq.n	800620a <HAL_RCC_ClockConfig+0x7e>
 80061fc:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006200:	4860      	ldr	r0, [pc, #384]	; (8006384 <HAL_RCC_ClockConfig+0x1f8>)
 8006202:	f7fc fb7b 	bl	80028fc <assert_failed>
 8006206:	68a1      	ldr	r1, [r4, #8]
 8006208:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800620a:	485d      	ldr	r0, [pc, #372]	; (8006380 <HAL_RCC_ClockConfig+0x1f4>)
 800620c:	6882      	ldr	r2, [r0, #8]
 800620e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006212:	430a      	orrs	r2, r1
 8006214:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006216:	07df      	lsls	r7, r3, #31
 8006218:	d527      	bpl.n	800626a <HAL_RCC_ClockConfig+0xde>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800621a:	6863      	ldr	r3, [r4, #4]
 800621c:	2b03      	cmp	r3, #3
 800621e:	f200 80a1 	bhi.w	8006364 <HAL_RCC_ClockConfig+0x1d8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006222:	2b01      	cmp	r3, #1
 8006224:	f000 8098 	beq.w	8006358 <HAL_RCC_ClockConfig+0x1cc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006228:	1e9a      	subs	r2, r3, #2
 800622a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800622c:	4a54      	ldr	r2, [pc, #336]	; (8006380 <HAL_RCC_ClockConfig+0x1f4>)
 800622e:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006230:	f240 808e 	bls.w	8006350 <HAL_RCC_ClockConfig+0x1c4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006234:	0791      	lsls	r1, r2, #30
 8006236:	d525      	bpl.n	8006284 <HAL_RCC_ClockConfig+0xf8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006238:	4e51      	ldr	r6, [pc, #324]	; (8006380 <HAL_RCC_ClockConfig+0x1f4>)
 800623a:	68b2      	ldr	r2, [r6, #8]
 800623c:	f022 0203 	bic.w	r2, r2, #3
 8006240:	4313      	orrs	r3, r2
 8006242:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006244:	f7fc ff4c 	bl	80030e0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006248:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800624c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624e:	e005      	b.n	800625c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006250:	f7fc ff46 	bl	80030e0 <HAL_GetTick>
 8006254:	1bc0      	subs	r0, r0, r7
 8006256:	4540      	cmp	r0, r8
 8006258:	f200 808b 	bhi.w	8006372 <HAL_RCC_ClockConfig+0x1e6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625c:	68b3      	ldr	r3, [r6, #8]
 800625e:	6862      	ldr	r2, [r4, #4]
 8006260:	f003 030c 	and.w	r3, r3, #12
 8006264:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006268:	d1f2      	bne.n	8006250 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800626a:	4a44      	ldr	r2, [pc, #272]	; (800637c <HAL_RCC_ClockConfig+0x1f0>)
 800626c:	6813      	ldr	r3, [r2, #0]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	42ab      	cmp	r3, r5
 8006274:	d915      	bls.n	80062a2 <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006276:	b2eb      	uxtb	r3, r5
 8006278:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	42ab      	cmp	r3, r5
 8006282:	d00e      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
}
 8006286:	4618      	mov	r0, r3
 8006288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628c:	b2eb      	uxtb	r3, r5
 800628e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006290:	6813      	ldr	r3, [r2, #0]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	42ab      	cmp	r3, r5
 8006298:	d1f4      	bne.n	8006284 <HAL_RCC_ClockConfig+0xf8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	0798      	lsls	r0, r3, #30
 800629e:	d48d      	bmi.n	80061bc <HAL_RCC_ClockConfig+0x30>
 80062a0:	e7b9      	b.n	8006216 <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	075a      	lsls	r2, r3, #29
 80062a6:	d518      	bpl.n	80062da <HAL_RCC_ClockConfig+0x14e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80062a8:	68e1      	ldr	r1, [r4, #12]
 80062aa:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 80062ae:	d00e      	beq.n	80062ce <HAL_RCC_ClockConfig+0x142>
 80062b0:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 80062b4:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80062b8:	d009      	beq.n	80062ce <HAL_RCC_ClockConfig+0x142>
 80062ba:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 80062be:	d006      	beq.n	80062ce <HAL_RCC_ClockConfig+0x142>
 80062c0:	f240 21c5 	movw	r1, #709	; 0x2c5
 80062c4:	482f      	ldr	r0, [pc, #188]	; (8006384 <HAL_RCC_ClockConfig+0x1f8>)
 80062c6:	f7fc fb19 	bl	80028fc <assert_failed>
 80062ca:	68e1      	ldr	r1, [r4, #12]
 80062cc:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062ce:	482c      	ldr	r0, [pc, #176]	; (8006380 <HAL_RCC_ClockConfig+0x1f4>)
 80062d0:	6882      	ldr	r2, [r0, #8]
 80062d2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80062d6:	430a      	orrs	r2, r1
 80062d8:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062da:	071b      	lsls	r3, r3, #28
 80062dc:	d518      	bpl.n	8006310 <HAL_RCC_ClockConfig+0x184>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80062de:	6922      	ldr	r2, [r4, #16]
 80062e0:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 80062e4:	d00d      	beq.n	8006302 <HAL_RCC_ClockConfig+0x176>
 80062e6:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 80062ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062ee:	d008      	beq.n	8006302 <HAL_RCC_ClockConfig+0x176>
 80062f0:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80062f4:	d005      	beq.n	8006302 <HAL_RCC_ClockConfig+0x176>
 80062f6:	4823      	ldr	r0, [pc, #140]	; (8006384 <HAL_RCC_ClockConfig+0x1f8>)
 80062f8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80062fc:	f7fc fafe 	bl	80028fc <assert_failed>
 8006300:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006302:	491f      	ldr	r1, [pc, #124]	; (8006380 <HAL_RCC_ClockConfig+0x1f4>)
 8006304:	688b      	ldr	r3, [r1, #8]
 8006306:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800630a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800630e:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006310:	f7ff ff06 	bl	8006120 <HAL_RCC_GetSysClockFreq>
 8006314:	4b1a      	ldr	r3, [pc, #104]	; (8006380 <HAL_RCC_ClockConfig+0x1f4>)
 8006316:	4c1c      	ldr	r4, [pc, #112]	; (8006388 <HAL_RCC_ClockConfig+0x1fc>)
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	491c      	ldr	r1, [pc, #112]	; (800638c <HAL_RCC_ClockConfig+0x200>)
 800631c:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return HAL_OK;
 8006320:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006322:	5ca2      	ldrb	r2, [r4, r2]
 8006324:	40d0      	lsrs	r0, r2
 8006326:	6008      	str	r0, [r1, #0]
}
 8006328:	4618      	mov	r0, r3
 800632a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800632e:	4815      	ldr	r0, [pc, #84]	; (8006384 <HAL_RCC_ClockConfig+0x1f8>)
 8006330:	f240 215d 	movw	r1, #605	; 0x25d
 8006334:	f7fc fae2 	bl	80028fc <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006338:	4b10      	ldr	r3, [pc, #64]	; (800637c <HAL_RCC_ClockConfig+0x1f0>)
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	b2ed      	uxtb	r5, r5
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800633c:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633e:	701d      	strb	r5, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	e79f      	b.n	8006284 <HAL_RCC_ClockConfig+0xf8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006344:	480f      	ldr	r0, [pc, #60]	; (8006384 <HAL_RCC_ClockConfig+0x1f8>)
 8006346:	f44f 7117 	mov.w	r1, #604	; 0x25c
 800634a:	f7fc fad7 	bl	80028fc <assert_failed>
 800634e:	e729      	b.n	80061a4 <HAL_RCC_ClockConfig+0x18>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006350:	0190      	lsls	r0, r2, #6
 8006352:	f53f af71 	bmi.w	8006238 <HAL_RCC_ClockConfig+0xac>
 8006356:	e795      	b.n	8006284 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006358:	4a09      	ldr	r2, [pc, #36]	; (8006380 <HAL_RCC_ClockConfig+0x1f4>)
 800635a:	6812      	ldr	r2, [r2, #0]
 800635c:	0396      	lsls	r6, r2, #14
 800635e:	f53f af6b 	bmi.w	8006238 <HAL_RCC_ClockConfig+0xac>
 8006362:	e78f      	b.n	8006284 <HAL_RCC_ClockConfig+0xf8>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006364:	4807      	ldr	r0, [pc, #28]	; (8006384 <HAL_RCC_ClockConfig+0x1f8>)
 8006366:	f240 2187 	movw	r1, #647	; 0x287
 800636a:	f7fc fac7 	bl	80028fc <assert_failed>
 800636e:	6863      	ldr	r3, [r4, #4]
 8006370:	e757      	b.n	8006222 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e787      	b.n	8006286 <HAL_RCC_ClockConfig+0xfa>
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
}
 8006378:	4618      	mov	r0, r3
 800637a:	4770      	bx	lr
 800637c:	40023c00 	.word	0x40023c00
 8006380:	40023800 	.word	0x40023800
 8006384:	0800c86c 	.word	0x0800c86c
 8006388:	0800c6f0 	.word	0x0800c6f0
 800638c:	20000030 	.word	0x20000030

08006390 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006392:	4a05      	ldr	r2, [pc, #20]	; (80063a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006394:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006396:	4905      	ldr	r1, [pc, #20]	; (80063ac <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006398:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800639c:	6808      	ldr	r0, [r1, #0]
 800639e:	5cd3      	ldrb	r3, [r2, r3]
}
 80063a0:	40d8      	lsrs	r0, r3
 80063a2:	4770      	bx	lr
 80063a4:	40023800 	.word	0x40023800
 80063a8:	0800c700 	.word	0x0800c700
 80063ac:	20000030 	.word	0x20000030

080063b0 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063b0:	4b0e      	ldr	r3, [pc, #56]	; (80063ec <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063b2:	220f      	movs	r2, #15
 80063b4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	f002 0203 	and.w	r2, r2, #3
 80063bc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80063c4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80063cc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	08db      	lsrs	r3, r3, #3
{
 80063d2:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80063d4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063d8:	4c05      	ldr	r4, [pc, #20]	; (80063f0 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80063da:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063dc:	6823      	ldr	r3, [r4, #0]
}
 80063de:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	600b      	str	r3, [r1, #0]
}
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40023800 	.word	0x40023800
 80063f0:	40023c00 	.word	0x40023c00

080063f4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80063f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	4698      	mov	r8, r3
 80063fc:	4616      	mov	r6, r2
 80063fe:	460c      	mov	r4, r1
 8006400:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006402:	f7fc fe6d 	bl	80030e0 <HAL_GetTick>
 8006406:	44b0      	add	r8, r6
 8006408:	eba8 0500 	sub.w	r5, r8, r0
  tmp_tickstart = HAL_GetTick();
 800640c:	f7fc fe68 	bl	80030e0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006410:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006418:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 800641c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800641e:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006420:	1c73      	adds	r3, r6, #1
 8006422:	6839      	ldr	r1, [r7, #0]
 8006424:	d107      	bne.n	8006436 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 8006426:	688b      	ldr	r3, [r1, #8]
 8006428:	ea34 0303 	bics.w	r3, r4, r3
 800642c:	d0fb      	beq.n	8006426 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 800642e:	2000      	movs	r0, #0
}
 8006430:	b002      	add	sp, #8
 8006432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006436:	688b      	ldr	r3, [r1, #8]
 8006438:	ea34 0303 	bics.w	r3, r4, r3
 800643c:	d1f7      	bne.n	800642e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800643e:	f7fc fe4f 	bl	80030e0 <HAL_GetTick>
 8006442:	eba0 0308 	sub.w	r3, r0, r8
 8006446:	42ab      	cmp	r3, r5
 8006448:	d208      	bcs.n	800645c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if(count == 0U)
 800644a:	9a01      	ldr	r2, [sp, #4]
      count--;
 800644c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800644e:	2a00      	cmp	r2, #0
      count--;
 8006450:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006454:	bf08      	it	eq
 8006456:	2500      	moveq	r5, #0
      count--;
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	e7e1      	b.n	8006420 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645c:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006460:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006462:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006466:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800646a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800646c:	d014      	beq.n	8006498 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800646e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006470:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006474:	d007      	beq.n	8006486 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8006476:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8006478:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800647a:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800647e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8006482:	2003      	movs	r0, #3
 8006484:	e7d4      	b.n	8006430 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	e7ee      	b.n	8006476 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800649e:	d002      	beq.n	80064a6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064a0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80064a4:	d1e3      	bne.n	800646e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	e7de      	b.n	800646e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
 80064b0:	20000030 	.word	0x20000030

080064b4 <HAL_SPI_MspInit>:
}
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop

080064b8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80064b8:	2800      	cmp	r0, #0
 80064ba:	f000 80ec 	beq.w	8006696 <HAL_SPI_Init+0x1de>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80064be:	6803      	ldr	r3, [r0, #0]
 80064c0:	4a7d      	ldr	r2, [pc, #500]	; (80066b8 <HAL_SPI_Init+0x200>)
 80064c2:	4293      	cmp	r3, r2
{
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80064c8:	d014      	beq.n	80064f4 <HAL_SPI_Init+0x3c>
 80064ca:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d010      	beq.n	80064f4 <HAL_SPI_Init+0x3c>
 80064d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00c      	beq.n	80064f4 <HAL_SPI_Init+0x3c>
 80064da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80064de:	4293      	cmp	r3, r2
 80064e0:	d008      	beq.n	80064f4 <HAL_SPI_Init+0x3c>
 80064e2:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_SPI_Init+0x3c>
 80064ea:	4874      	ldr	r0, [pc, #464]	; (80066bc <HAL_SPI_Init+0x204>)
 80064ec:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80064f0:	f7fc fa04 	bl	80028fc <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80064f4:	6863      	ldr	r3, [r4, #4]
 80064f6:	b13b      	cbz	r3, 8006508 <HAL_SPI_Init+0x50>
 80064f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064fc:	d004      	beq.n	8006508 <HAL_SPI_Init+0x50>
 80064fe:	486f      	ldr	r0, [pc, #444]	; (80066bc <HAL_SPI_Init+0x204>)
 8006500:	f240 1143 	movw	r1, #323	; 0x143
 8006504:	f7fc f9fa 	bl	80028fc <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006508:	68a3      	ldr	r3, [r4, #8]
 800650a:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800650e:	f040 809a 	bne.w	8006646 <HAL_SPI_Init+0x18e>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8006518:	f040 80a3 	bne.w	8006662 <HAL_SPI_Init+0x1aa>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800651c:	69a3      	ldr	r3, [r4, #24]
 800651e:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8006522:	d003      	beq.n	800652c <HAL_SPI_Init+0x74>
 8006524:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006528:	f040 80aa 	bne.w	8006680 <HAL_SPI_Init+0x1c8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800652c:	69e3      	ldr	r3, [r4, #28]
 800652e:	f033 0318 	bics.w	r3, r3, #24
 8006532:	d006      	beq.n	8006542 <HAL_SPI_Init+0x8a>
 8006534:	2b20      	cmp	r3, #32
 8006536:	d004      	beq.n	8006542 <HAL_SPI_Init+0x8a>
 8006538:	4860      	ldr	r0, [pc, #384]	; (80066bc <HAL_SPI_Init+0x204>)
 800653a:	f240 1147 	movw	r1, #327	; 0x147
 800653e:	f7fc f9dd 	bl	80028fc <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006542:	6a23      	ldr	r3, [r4, #32]
 8006544:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8006548:	d004      	beq.n	8006554 <HAL_SPI_Init+0x9c>
 800654a:	485c      	ldr	r0, [pc, #368]	; (80066bc <HAL_SPI_Init+0x204>)
 800654c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006550:	f7fc f9d4 	bl	80028fc <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006556:	2b00      	cmp	r3, #0
 8006558:	d15c      	bne.n	8006614 <HAL_SPI_Init+0x15c>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800655a:	6923      	ldr	r3, [r4, #16]
 800655c:	f033 0302 	bics.w	r3, r3, #2
 8006560:	d004      	beq.n	800656c <HAL_SPI_Init+0xb4>
 8006562:	4856      	ldr	r0, [pc, #344]	; (80066bc <HAL_SPI_Init+0x204>)
 8006564:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006568:	f7fc f9c8 	bl	80028fc <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800656c:	6963      	ldr	r3, [r4, #20]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d904      	bls.n	800657c <HAL_SPI_Init+0xc4>
 8006572:	4852      	ldr	r0, [pc, #328]	; (80066bc <HAL_SPI_Init+0x204>)
 8006574:	f240 114d 	movw	r1, #333	; 0x14d
 8006578:	f7fc f9c0 	bl	80028fc <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800657c:	6863      	ldr	r3, [r4, #4]
 800657e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006582:	f000 808a 	beq.w	800669a <HAL_SPI_Init+0x1e2>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006586:	2300      	movs	r3, #0
 8006588:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800658a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800658e:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006590:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006594:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006596:	2a00      	cmp	r2, #0
 8006598:	d069      	beq.n	800666e <HAL_SPI_Init+0x1b6>
 800659a:	4619      	mov	r1, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800659c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80065a0:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 80065a4:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 80065a8:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80065ac:	432b      	orrs	r3, r5
 80065ae:	f400 6500 	and.w	r5, r0, #2048	; 0x800
 80065b2:	6960      	ldr	r0, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 80065b4:	6826      	ldr	r6, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065b6:	432b      	orrs	r3, r5
 80065b8:	f002 0502 	and.w	r5, r2, #2
 80065bc:	69a2      	ldr	r2, [r4, #24]
 80065be:	432b      	orrs	r3, r5
 80065c0:	f000 0001 	and.w	r0, r0, #1
 80065c4:	69e5      	ldr	r5, [r4, #28]
 80065c6:	4303      	orrs	r3, r0
 80065c8:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80065cc:	4303      	orrs	r3, r0
 80065ce:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80065d2:	6a20      	ldr	r0, [r4, #32]
 80065d4:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 80065d6:	2502      	movs	r5, #2
 80065d8:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065dc:	f000 0080 	and.w	r0, r0, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065e2:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065e4:	0c12      	lsrs	r2, r2, #16
  __HAL_SPI_DISABLE(hspi);
 80065e6:	6830      	ldr	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065e8:	f005 0510 	and.w	r5, r5, #16
 80065ec:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065f0:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065f2:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 80065f4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80065f8:	6030      	str	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065fa:	6033      	str	r3, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065fc:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065fe:	69f3      	ldr	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006600:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8006606:	2101      	movs	r1, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006608:	61f3      	str	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800660a:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800660c:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  return HAL_OK;
 8006610:	4610      	mov	r0, r2
}
 8006612:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006614:	2b10      	cmp	r3, #16
 8006616:	d007      	beq.n	8006628 <HAL_SPI_Init+0x170>
 8006618:	4828      	ldr	r0, [pc, #160]	; (80066bc <HAL_SPI_Init+0x204>)
 800661a:	f240 1149 	movw	r1, #329	; 0x149
 800661e:	f7fc f96d 	bl	80028fc <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	d098      	beq.n	800655a <HAL_SPI_Init+0xa2>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006628:	69e3      	ldr	r3, [r4, #28]
 800662a:	f033 0318 	bics.w	r3, r3, #24
 800662e:	d006      	beq.n	800663e <HAL_SPI_Init+0x186>
 8006630:	2b20      	cmp	r3, #32
 8006632:	d004      	beq.n	800663e <HAL_SPI_Init+0x186>
 8006634:	4821      	ldr	r0, [pc, #132]	; (80066bc <HAL_SPI_Init+0x204>)
 8006636:	f240 115b 	movw	r1, #347	; 0x15b
 800663a:	f7fc f95f 	bl	80028fc <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800663e:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006640:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8006644:	e7a1      	b.n	800658a <HAL_SPI_Init+0xd2>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664a:	f43f af62 	beq.w	8006512 <HAL_SPI_Init+0x5a>
 800664e:	481b      	ldr	r0, [pc, #108]	; (80066bc <HAL_SPI_Init+0x204>)
 8006650:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006654:	f7fc f952 	bl	80028fc <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006658:	68e3      	ldr	r3, [r4, #12]
 800665a:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800665e:	f43f af5d 	beq.w	800651c <HAL_SPI_Init+0x64>
 8006662:	4816      	ldr	r0, [pc, #88]	; (80066bc <HAL_SPI_Init+0x204>)
 8006664:	f240 1145 	movw	r1, #325	; 0x145
 8006668:	f7fc f948 	bl	80028fc <assert_failed>
 800666c:	e756      	b.n	800651c <HAL_SPI_Init+0x64>
    hspi->Lock = HAL_UNLOCKED;
 800666e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8006672:	4620      	mov	r0, r4
 8006674:	f7ff ff1e 	bl	80064b4 <HAL_SPI_MspInit>
 8006678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800667a:	f403 5100 	and.w	r1, r3, #8192	; 0x2000
 800667e:	e78d      	b.n	800659c <HAL_SPI_Init+0xe4>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006680:	480e      	ldr	r0, [pc, #56]	; (80066bc <HAL_SPI_Init+0x204>)
 8006682:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006686:	f7fc f939 	bl	80028fc <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800668a:	69e3      	ldr	r3, [r4, #28]
 800668c:	f033 0318 	bics.w	r3, r3, #24
 8006690:	f43f af57 	beq.w	8006542 <HAL_SPI_Init+0x8a>
 8006694:	e74e      	b.n	8006534 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8006696:	2001      	movs	r0, #1
}
 8006698:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800669a:	69e3      	ldr	r3, [r4, #28]
 800669c:	f033 0318 	bics.w	r3, r3, #24
 80066a0:	f43f af73 	beq.w	800658a <HAL_SPI_Init+0xd2>
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	f43f af70 	beq.w	800658a <HAL_SPI_Init+0xd2>
 80066aa:	4804      	ldr	r0, [pc, #16]	; (80066bc <HAL_SPI_Init+0x204>)
 80066ac:	f240 1151 	movw	r1, #337	; 0x151
 80066b0:	f7fc f924 	bl	80028fc <assert_failed>
 80066b4:	e769      	b.n	800658a <HAL_SPI_Init+0xd2>
 80066b6:	bf00      	nop
 80066b8:	40013000 	.word	0x40013000
 80066bc:	0800c8a4 	.word	0x0800c8a4

080066c0 <HAL_SPI_TransmitReceive>:
{
 80066c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066c4:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80066c6:	6880      	ldr	r0, [r0, #8]
{
 80066c8:	b083      	sub	sp, #12
 80066ca:	4688      	mov	r8, r1
 80066cc:	4691      	mov	r9, r2
 80066ce:	461f      	mov	r7, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f040 80a8 	bne.w	8006826 <HAL_SPI_TransmitReceive+0x166>
  __HAL_LOCK(hspi);
 80066d6:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 80066da:	2801      	cmp	r0, #1
 80066dc:	f000 80ad 	beq.w	800683a <HAL_SPI_TransmitReceive+0x17a>
 80066e0:	2301      	movs	r3, #1
 80066e2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80066e6:	f7fc fcfb 	bl	80030e0 <HAL_GetTick>
  tmp_state           = hspi->State;
 80066ea:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80066ee:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066f0:	2e01      	cmp	r6, #1
  tickstart = HAL_GetTick();
 80066f2:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 80066f4:	b2f2      	uxtb	r2, r6
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066f6:	d011      	beq.n	800671c <HAL_SPI_TransmitReceive+0x5c>
 80066f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066fc:	d009      	beq.n	8006712 <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 80066fe:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006700:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8006702:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8006704:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006708:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800670c:	b003      	add	sp, #12
 800670e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006712:	68a1      	ldr	r1, [r4, #8]
 8006714:	2900      	cmp	r1, #0
 8006716:	d1f2      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x3e>
 8006718:	2a04      	cmp	r2, #4
 800671a:	d1f0      	bne.n	80066fe <HAL_SPI_TransmitReceive+0x3e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800671c:	f1b8 0f00 	cmp.w	r8, #0
 8006720:	f000 808f 	beq.w	8006842 <HAL_SPI_TransmitReceive+0x182>
 8006724:	f1b9 0f00 	cmp.w	r9, #0
 8006728:	f000 808b 	beq.w	8006842 <HAL_SPI_TransmitReceive+0x182>
 800672c:	2f00      	cmp	r7, #0
 800672e:	f000 8088 	beq.w	8006842 <HAL_SPI_TransmitReceive+0x182>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006732:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006736:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006738:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800673c:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800673e:	bf1c      	itt	ne
 8006740:	2205      	movne	r2, #5
 8006742:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006746:	2200      	movs	r2, #0
 8006748:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 800674a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800674c:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800674e:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 8006750:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8006752:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006756:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006758:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800675c:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800675e:	d403      	bmi.n	8006768 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8006760:	6802      	ldr	r2, [r0, #0]
 8006762:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006766:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006768:	68e2      	ldr	r2, [r4, #12]
 800676a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800676e:	f000 80b6 	beq.w	80068de <HAL_SPI_TransmitReceive+0x21e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 80a8 	beq.w	80068c8 <HAL_SPI_TransmitReceive+0x208>
 8006778:	2f01      	cmp	r7, #1
 800677a:	f000 80a5 	beq.w	80068c8 <HAL_SPI_TransmitReceive+0x208>
 800677e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006780:	3301      	adds	r3, #1
        txallowed = 1U;
 8006782:	f04f 0601 	mov.w	r6, #1
 8006786:	d028      	beq.n	80067da <HAL_SPI_TransmitReceive+0x11a>
 8006788:	e05d      	b.n	8006846 <HAL_SPI_TransmitReceive+0x186>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	6893      	ldr	r3, [r2, #8]
 800678e:	0798      	lsls	r0, r3, #30
 8006790:	d50f      	bpl.n	80067b2 <HAL_SPI_TransmitReceive+0xf2>
 8006792:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006794:	b29b      	uxth	r3, r3
 8006796:	b163      	cbz	r3, 80067b2 <HAL_SPI_TransmitReceive+0xf2>
 8006798:	b15e      	cbz	r6, 80067b2 <HAL_SPI_TransmitReceive+0xf2>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800679a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80067a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80067a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80067a4:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80067aa:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 80067ac:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80067ae:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 80067b0:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067b2:	6893      	ldr	r3, [r2, #8]
 80067b4:	f013 0301 	ands.w	r3, r3, #1
 80067b8:	d00d      	beq.n	80067d6 <HAL_SPI_TransmitReceive+0x116>
 80067ba:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80067bc:	b289      	uxth	r1, r1
 80067be:	b151      	cbz	r1, 80067d6 <HAL_SPI_TransmitReceive+0x116>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80067c2:	68d2      	ldr	r2, [r2, #12]
 80067c4:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 80067c6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80067c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80067ca:	3a01      	subs	r2, #1
 80067cc:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 80067ce:	3101      	adds	r1, #1
        txallowed = 1U;
 80067d0:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80067d2:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80067d4:	63a1      	str	r1, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80067d6:	f7fc fc83 	bl	80030e0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1d3      	bne.n	800678a <HAL_SPI_TransmitReceive+0xca>
 80067e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1cf      	bne.n	800678a <HAL_SPI_TransmitReceive+0xca>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067ea:	4b7e      	ldr	r3, [pc, #504]	; (80069e4 <HAL_SPI_TransmitReceive+0x324>)
 80067ec:	4a7e      	ldr	r2, [pc, #504]	; (80069e8 <HAL_SPI_TransmitReceive+0x328>)
 80067ee:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067f0:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067f2:	fba2 2303 	umull	r2, r3, r2, r3
 80067f6:	0d5b      	lsrs	r3, r3, #21
 80067f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006800:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006804:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006806:	d150      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x1ea>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800680a:	462b      	mov	r3, r5
 800680c:	2180      	movs	r1, #128	; 0x80
 800680e:	4620      	mov	r0, r4
 8006810:	f7ff fdf0 	bl	80063f4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006814:	2800      	cmp	r0, #0
 8006816:	d04b      	beq.n	80068b0 <HAL_SPI_TransmitReceive+0x1f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006818:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800681a:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800681c:	4313      	orrs	r3, r2
 800681e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006820:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006822:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8006824:	e76c      	b.n	8006700 <HAL_SPI_TransmitReceive+0x40>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006826:	4871      	ldr	r0, [pc, #452]	; (80069ec <HAL_SPI_TransmitReceive+0x32c>)
 8006828:	f240 417e 	movw	r1, #1150	; 0x47e
 800682c:	f7fc f866 	bl	80028fc <assert_failed>
  __HAL_LOCK(hspi);
 8006830:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8006834:	2801      	cmp	r0, #1
 8006836:	f47f af53 	bne.w	80066e0 <HAL_SPI_TransmitReceive+0x20>
 800683a:	2002      	movs	r0, #2
}
 800683c:	b003      	add	sp, #12
 800683e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8006842:	2001      	movs	r0, #1
 8006844:	e75c      	b.n	8006700 <HAL_SPI_TransmitReceive+0x40>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006846:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006848:	b29b      	uxth	r3, r3
 800684a:	b91b      	cbnz	r3, 8006854 <HAL_SPI_TransmitReceive+0x194>
 800684c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0ca      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x12a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006854:	6822      	ldr	r2, [r4, #0]
 8006856:	6893      	ldr	r3, [r2, #8]
 8006858:	0799      	lsls	r1, r3, #30
 800685a:	d50f      	bpl.n	800687c <HAL_SPI_TransmitReceive+0x1bc>
 800685c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800685e:	b29b      	uxth	r3, r3
 8006860:	b163      	cbz	r3, 800687c <HAL_SPI_TransmitReceive+0x1bc>
 8006862:	b15e      	cbz	r6, 800687c <HAL_SPI_TransmitReceive+0x1bc>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006864:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800686a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800686c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800686e:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8006870:	3b01      	subs	r3, #1
 8006872:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8006874:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8006876:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8006878:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800687a:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800687c:	6893      	ldr	r3, [r2, #8]
 800687e:	f013 0301 	ands.w	r3, r3, #1
 8006882:	d003      	beq.n	800688c <HAL_SPI_TransmitReceive+0x1cc>
 8006884:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006886:	b289      	uxth	r1, r1
 8006888:	2900      	cmp	r1, #0
 800688a:	d167      	bne.n	800695c <HAL_SPI_TransmitReceive+0x29c>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800688c:	f7fc fc28 	bl	80030e0 <HAL_GetTick>
 8006890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006892:	1b40      	subs	r0, r0, r5
 8006894:	4298      	cmp	r0, r3
 8006896:	d3d6      	bcc.n	8006846 <HAL_SPI_TransmitReceive+0x186>
        errorcode = HAL_TIMEOUT;
 8006898:	2003      	movs	r0, #3
 800689a:	e731      	b.n	8006700 <HAL_SPI_TransmitReceive+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800689c:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800689e:	6822      	ldr	r2, [r4, #0]
      count--;
 80068a0:	3b01      	subs	r3, #1
 80068a2:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068a4:	6893      	ldr	r3, [r2, #8]
 80068a6:	061b      	lsls	r3, r3, #24
 80068a8:	d502      	bpl.n	80068b0 <HAL_SPI_TransmitReceive+0x1f0>
      if (count == 0U)
 80068aa:	9b01      	ldr	r3, [sp, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1f5      	bne.n	800689c <HAL_SPI_TransmitReceive+0x1dc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068b0:	68a0      	ldr	r0, [r4, #8]
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f040 8093 	bne.w	80069de <HAL_SPI_TransmitReceive+0x31e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	9000      	str	r0, [sp, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	9200      	str	r2, [sp, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	9b00      	ldr	r3, [sp, #0]
 80068c6:	e71b      	b.n	8006700 <HAL_SPI_TransmitReceive+0x40>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068c8:	f898 3000 	ldrb.w	r3, [r8]
 80068cc:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80068ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068d6:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80068d8:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068da:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80068dc:	e74f      	b.n	800677e <HAL_SPI_TransmitReceive+0xbe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d148      	bne.n	8006974 <HAL_SPI_TransmitReceive+0x2b4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068e2:	4641      	mov	r1, r8
 80068e4:	f831 3b02 	ldrh.w	r3, [r1], #2
 80068e8:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80068ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ec:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80068ee:	3b01      	subs	r3, #1
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80068f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f6:	3301      	adds	r3, #1
{
 80068f8:	f04f 0601 	mov.w	r6, #1
 80068fc:	d025      	beq.n	800694a <HAL_SPI_TransmitReceive+0x28a>
 80068fe:	e03c      	b.n	800697a <HAL_SPI_TransmitReceive+0x2ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006900:	6822      	ldr	r2, [r4, #0]
 8006902:	6893      	ldr	r3, [r2, #8]
 8006904:	079b      	lsls	r3, r3, #30
 8006906:	d50d      	bpl.n	8006924 <HAL_SPI_TransmitReceive+0x264>
 8006908:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800690a:	b29b      	uxth	r3, r3
 800690c:	b153      	cbz	r3, 8006924 <HAL_SPI_TransmitReceive+0x264>
 800690e:	b14e      	cbz	r6, 8006924 <HAL_SPI_TransmitReceive+0x264>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006910:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006912:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006916:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8006918:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800691a:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800691c:	3b01      	subs	r3, #1
 800691e:	b29b      	uxth	r3, r3
 8006920:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006922:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006924:	6893      	ldr	r3, [r2, #8]
 8006926:	f013 0301 	ands.w	r3, r3, #1
 800692a:	d00c      	beq.n	8006946 <HAL_SPI_TransmitReceive+0x286>
 800692c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800692e:	b289      	uxth	r1, r1
 8006930:	b149      	cbz	r1, 8006946 <HAL_SPI_TransmitReceive+0x286>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006932:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006934:	68d2      	ldr	r2, [r2, #12]
 8006936:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800693a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800693c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800693e:	3a01      	subs	r2, #1
 8006940:	b292      	uxth	r2, r2
        txallowed = 1U;
 8006942:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8006944:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006946:	f7fc fbcb 	bl	80030e0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800694a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1d6      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x240>
 8006952:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1d2      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x240>
 800695a:	e746      	b.n	80067ea <HAL_SPI_TransmitReceive+0x12a>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800695c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800695e:	68d2      	ldr	r2, [r2, #12]
 8006960:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 8006962:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8006964:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006966:	3a01      	subs	r2, #1
 8006968:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 800696a:	3101      	adds	r1, #1
        txallowed = 1U;
 800696c:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 800696e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8006970:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 1U;
 8006972:	e78b      	b.n	800688c <HAL_SPI_TransmitReceive+0x1cc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006974:	2f01      	cmp	r7, #1
 8006976:	d1bd      	bne.n	80068f4 <HAL_SPI_TransmitReceive+0x234>
 8006978:	e7b3      	b.n	80068e2 <HAL_SPI_TransmitReceive+0x222>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800697a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800697c:	b29b      	uxth	r3, r3
 800697e:	b923      	cbnz	r3, 800698a <HAL_SPI_TransmitReceive+0x2ca>
 8006980:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006982:	b29b      	uxth	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	f43f af30 	beq.w	80067ea <HAL_SPI_TransmitReceive+0x12a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800698a:	6822      	ldr	r2, [r4, #0]
 800698c:	6893      	ldr	r3, [r2, #8]
 800698e:	079f      	lsls	r7, r3, #30
 8006990:	d50d      	bpl.n	80069ae <HAL_SPI_TransmitReceive+0x2ee>
 8006992:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006994:	b29b      	uxth	r3, r3
 8006996:	b153      	cbz	r3, 80069ae <HAL_SPI_TransmitReceive+0x2ee>
 8006998:	b14e      	cbz	r6, 80069ae <HAL_SPI_TransmitReceive+0x2ee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800699a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800699c:	f831 3b02 	ldrh.w	r3, [r1], #2
 80069a0:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80069a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a4:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80069ac:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069ae:	6893      	ldr	r3, [r2, #8]
 80069b0:	f013 0301 	ands.w	r3, r3, #1
 80069b4:	d00c      	beq.n	80069d0 <HAL_SPI_TransmitReceive+0x310>
 80069b6:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80069b8:	b289      	uxth	r1, r1
 80069ba:	b149      	cbz	r1, 80069d0 <HAL_SPI_TransmitReceive+0x310>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069be:	68d2      	ldr	r2, [r2, #12]
 80069c0:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80069c4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069c6:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80069c8:	3a01      	subs	r2, #1
 80069ca:	b292      	uxth	r2, r2
        txallowed = 1U;
 80069cc:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80069ce:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069d0:	f7fc fb86 	bl	80030e0 <HAL_GetTick>
 80069d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d6:	1b40      	subs	r0, r0, r5
 80069d8:	4298      	cmp	r0, r3
 80069da:	d3ce      	bcc.n	800697a <HAL_SPI_TransmitReceive+0x2ba>
 80069dc:	e75c      	b.n	8006898 <HAL_SPI_TransmitReceive+0x1d8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069de:	2000      	movs	r0, #0
 80069e0:	e68e      	b.n	8006700 <HAL_SPI_TransmitReceive+0x40>
 80069e2:	bf00      	nop
 80069e4:	20000030 	.word	0x20000030
 80069e8:	165e9f81 	.word	0x165e9f81
 80069ec:	0800c8a4 	.word	0x0800c8a4

080069f0 <HAL_SPI_GetState>:
  return hspi->State;
 80069f0:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop

080069f8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f8:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069fa:	688a      	ldr	r2, [r1, #8]
{
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a02:	f023 0301 	bic.w	r3, r3, #1
 8006a06:	6223      	str	r3, [r4, #32]
  tmpccer = TIMx->CCER;
 8006a08:	6a25      	ldr	r5, [r4, #32]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a0a:	4822      	ldr	r0, [pc, #136]	; (8006a94 <TIM_OC1_SetConfig+0x9c>)
  tmpcr2 =  TIMx->CR2;
 8006a0c:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 8006a10:	69a6      	ldr	r6, [r4, #24]
  tmpccmrx |= OC_Config->OCMode;
 8006a12:	680b      	ldr	r3, [r1, #0]
  tmpccer &= ~TIM_CCER_CC1P;
 8006a14:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a18:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a1c:	4284      	cmp	r4, r0
{
 8006a1e:	460f      	mov	r7, r1
  tmpccer |= OC_Config->OCPolarity;
 8006a20:	ea45 0502 	orr.w	r5, r5, r2
  tmpccmrx |= OC_Config->OCMode;
 8006a24:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a28:	d007      	beq.n	8006a3a <TIM_OC1_SetConfig+0x42>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a2a:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8006a2c:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006a30:	61a6      	str	r6, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8006a32:	6363      	str	r3, [r4, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a34:	6225      	str	r5, [r4, #32]
}
 8006a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006a3a:	68ca      	ldr	r2, [r1, #12]
 8006a3c:	f032 0308 	bics.w	r3, r2, #8
 8006a40:	d114      	bne.n	8006a6c <TIM_OC1_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006a42:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a44:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006a48:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006a4a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a4e:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006a52:	d119      	bne.n	8006a88 <TIM_OC1_SetConfig+0x90>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8006a5a:	d10e      	bne.n	8006a7a <TIM_OC1_SetConfig+0x82>
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a5c:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a5e:	f428 7840 	bic.w	r8, r8, #768	; 0x300
 8006a62:	ea48 0802 	orr.w	r8, r8, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a66:	ea48 0803 	orr.w	r8, r8, r3
 8006a6a:	e7de      	b.n	8006a2a <TIM_OC1_SetConfig+0x32>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006a6c:	480a      	ldr	r0, [pc, #40]	; (8006a98 <TIM_OC1_SetConfig+0xa0>)
 8006a6e:	f641 2108 	movw	r1, #6664	; 0x1a08
 8006a72:	f7fb ff43 	bl	80028fc <assert_failed>
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	e7e3      	b.n	8006a42 <TIM_OC1_SetConfig+0x4a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006a7a:	4807      	ldr	r0, [pc, #28]	; (8006a98 <TIM_OC1_SetConfig+0xa0>)
 8006a7c:	f641 2116 	movw	r1, #6678	; 0x1a16
 8006a80:	f7fb ff3c 	bl	80028fc <assert_failed>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	e7e9      	b.n	8006a5c <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006a88:	4803      	ldr	r0, [pc, #12]	; (8006a98 <TIM_OC1_SetConfig+0xa0>)
 8006a8a:	f641 2115 	movw	r1, #6677	; 0x1a15
 8006a8e:	f7fb ff35 	bl	80028fc <assert_failed>
 8006a92:	e7df      	b.n	8006a54 <TIM_OC1_SetConfig+0x5c>
 8006a94:	40010000 	.word	0x40010000
 8006a98:	0800c8dc 	.word	0x0800c8dc

08006a9c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a9c:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a9e:	688a      	ldr	r2, [r1, #8]
{
 8006aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aaa:	6223      	str	r3, [r4, #32]
  tmpccer = TIMx->CCER;
 8006aac:	6a25      	ldr	r5, [r4, #32]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aae:	4823      	ldr	r0, [pc, #140]	; (8006b3c <TIM_OC3_SetConfig+0xa0>)
  tmpcr2 =  TIMx->CR2;
 8006ab0:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 8006ab4:	69e6      	ldr	r6, [r4, #28]
  tmpccmrx |= OC_Config->OCMode;
 8006ab6:	680b      	ldr	r3, [r1, #0]
  tmpccer &= ~TIM_CCER_CC3P;
 8006ab8:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006abc:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ac0:	4284      	cmp	r4, r0
{
 8006ac2:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ac4:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8006ac8:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006acc:	d007      	beq.n	8006ade <TIM_OC3_SetConfig+0x42>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ace:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8006ad0:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006ad4:	61e6      	str	r6, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006ad6:	63e3      	str	r3, [r4, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad8:	6225      	str	r5, [r4, #32]
}
 8006ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006ade:	68ca      	ldr	r2, [r1, #12]
 8006ae0:	f032 0308 	bics.w	r3, r2, #8
 8006ae4:	d115      	bne.n	8006b12 <TIM_OC3_SetConfig+0x76>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006ae6:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ae8:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aec:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006af0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 8006af4:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006af8:	d119      	bne.n	8006b2e <TIM_OC3_SetConfig+0x92>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8006b00:	d10e      	bne.n	8006b20 <TIM_OC3_SetConfig+0x84>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b02:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b04:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
 8006b08:	ea48 1802 	orr.w	r8, r8, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b0c:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
 8006b10:	e7dd      	b.n	8006ace <TIM_OC3_SetConfig+0x32>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006b12:	480b      	ldr	r0, [pc, #44]	; (8006b40 <TIM_OC3_SetConfig+0xa4>)
 8006b14:	f641 219e 	movw	r1, #6814	; 0x1a9e
 8006b18:	f7fb fef0 	bl	80028fc <assert_failed>
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	e7e2      	b.n	8006ae6 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006b20:	4807      	ldr	r0, [pc, #28]	; (8006b40 <TIM_OC3_SetConfig+0xa4>)
 8006b22:	f641 21ac 	movw	r1, #6828	; 0x1aac
 8006b26:	f7fb fee9 	bl	80028fc <assert_failed>
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	e7e9      	b.n	8006b02 <TIM_OC3_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006b2e:	4804      	ldr	r0, [pc, #16]	; (8006b40 <TIM_OC3_SetConfig+0xa4>)
 8006b30:	f641 21ab 	movw	r1, #6827	; 0x1aab
 8006b34:	f7fb fee2 	bl	80028fc <assert_failed>
 8006b38:	e7df      	b.n	8006afa <TIM_OC3_SetConfig+0x5e>
 8006b3a:	bf00      	nop
 8006b3c:	40010000 	.word	0x40010000
 8006b40:	0800c8dc 	.word	0x0800c8dc

08006b44 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f000 80cd 	beq.w	8006ce4 <HAL_TIM_Base_Init+0x1a0>
{
 8006b4a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006b4c:	4a66      	ldr	r2, [pc, #408]	; (8006ce8 <HAL_TIM_Base_Init+0x1a4>)
 8006b4e:	6803      	ldr	r3, [r0, #0]
 8006b50:	4293      	cmp	r3, r2
 8006b52:	4604      	mov	r4, r0
 8006b54:	d01f      	beq.n	8006b96 <HAL_TIM_Base_Init+0x52>
 8006b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5a:	d01c      	beq.n	8006b96 <HAL_TIM_Base_Init+0x52>
 8006b5c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d018      	beq.n	8006b96 <HAL_TIM_Base_Init+0x52>
 8006b64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d014      	beq.n	8006b96 <HAL_TIM_Base_Init+0x52>
 8006b6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d010      	beq.n	8006b96 <HAL_TIM_Base_Init+0x52>
 8006b74:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00c      	beq.n	8006b96 <HAL_TIM_Base_Init+0x52>
 8006b7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d008      	beq.n	8006b96 <HAL_TIM_Base_Init+0x52>
 8006b84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_TIM_Base_Init+0x52>
 8006b8c:	4857      	ldr	r0, [pc, #348]	; (8006cec <HAL_TIM_Base_Init+0x1a8>)
 8006b8e:	f240 1113 	movw	r1, #275	; 0x113
 8006b92:	f7fb feb3 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006b96:	68a3      	ldr	r3, [r4, #8]
 8006b98:	f033 0210 	bics.w	r2, r3, #16
 8006b9c:	d00a      	beq.n	8006bb4 <HAL_TIM_Base_Init+0x70>
 8006b9e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006ba2:	2a20      	cmp	r2, #32
 8006ba4:	d006      	beq.n	8006bb4 <HAL_TIM_Base_Init+0x70>
 8006ba6:	2b40      	cmp	r3, #64	; 0x40
 8006ba8:	d004      	beq.n	8006bb4 <HAL_TIM_Base_Init+0x70>
 8006baa:	4850      	ldr	r0, [pc, #320]	; (8006cec <HAL_TIM_Base_Init+0x1a8>)
 8006bac:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006bb0:	f7fb fea4 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006bb4:	6923      	ldr	r3, [r4, #16]
 8006bb6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8006bba:	d003      	beq.n	8006bc4 <HAL_TIM_Base_Init+0x80>
 8006bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bc0:	f040 8085 	bne.w	8006cce <HAL_TIM_Base_Init+0x18a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006bc4:	69a3      	ldr	r3, [r4, #24]
 8006bc6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8006bca:	d132      	bne.n	8006c32 <HAL_TIM_Base_Init+0xee>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006bcc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006bd0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d037      	beq.n	8006c48 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bd8:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bda:	4943      	ldr	r1, [pc, #268]	; (8006ce8 <HAL_TIM_Base_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006be4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be6:	d05e      	beq.n	8006ca6 <HAL_TIM_Base_Init+0x162>
 8006be8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006bec:	d032      	beq.n	8006c54 <HAL_TIM_Base_Init+0x110>
 8006bee:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8006bf2:	428a      	cmp	r2, r1
 8006bf4:	d02e      	beq.n	8006c54 <HAL_TIM_Base_Init+0x110>
 8006bf6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006bfa:	428a      	cmp	r2, r1
 8006bfc:	d02a      	beq.n	8006c54 <HAL_TIM_Base_Init+0x110>
 8006bfe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c02:	428a      	cmp	r2, r1
 8006c04:	d026      	beq.n	8006c54 <HAL_TIM_Base_Init+0x110>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c06:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8006c0a:	428a      	cmp	r2, r1
 8006c0c:	d026      	beq.n	8006c5c <HAL_TIM_Base_Init+0x118>
 8006c0e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c12:	428a      	cmp	r2, r1
 8006c14:	d022      	beq.n	8006c5c <HAL_TIM_Base_Init+0x118>
 8006c16:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c1a:	428a      	cmp	r2, r1
 8006c1c:	d01e      	beq.n	8006c5c <HAL_TIM_Base_Init+0x118>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c1e:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c20:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8006c22:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c28:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006c2a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c2c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c2e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c30:	e021      	b.n	8006c76 <HAL_TIM_Base_Init+0x132>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006c32:	482e      	ldr	r0, [pc, #184]	; (8006cec <HAL_TIM_Base_Init+0x1a8>)
 8006c34:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006c38:	f7fb fe60 	bl	80028fc <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006c3c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006c40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1c7      	bne.n	8006bd8 <HAL_TIM_Base_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 8006c48:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f7fc f839 	bl	8002cc4 <HAL_TIM_Base_MspInit>
 8006c52:	e7c1      	b.n	8006bd8 <HAL_TIM_Base_Init+0x94>
    tmpcr1 |= Structure->CounterMode;
 8006c54:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006c5a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c5c:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c5e:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c60:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c66:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c6c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006c6e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006c70:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c72:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006c74:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006c76:	2301      	movs	r3, #1
 8006c78:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006c82:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006c86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006c8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006c9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006c9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006ca2:	2000      	movs	r0, #0
}
 8006ca4:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006ca6:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ca8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006caa:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006cb0:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cb6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cbc:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006cbe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cc0:	68e3      	ldr	r3, [r4, #12]
 8006cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006cc4:	6863      	ldr	r3, [r4, #4]
 8006cc6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc8:	6963      	ldr	r3, [r4, #20]
 8006cca:	6313      	str	r3, [r2, #48]	; 0x30
 8006ccc:	e7d3      	b.n	8006c76 <HAL_TIM_Base_Init+0x132>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006cce:	4807      	ldr	r0, [pc, #28]	; (8006cec <HAL_TIM_Base_Init+0x1a8>)
 8006cd0:	f240 1115 	movw	r1, #277	; 0x115
 8006cd4:	f7fb fe12 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006cd8:	69a3      	ldr	r3, [r4, #24]
 8006cda:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8006cde:	f43f af75 	beq.w	8006bcc <HAL_TIM_Base_Init+0x88>
 8006ce2:	e7a6      	b.n	8006c32 <HAL_TIM_Base_Init+0xee>
    return HAL_ERROR;
 8006ce4:	2001      	movs	r0, #1
}
 8006ce6:	4770      	bx	lr
 8006ce8:	40010000 	.word	0x40010000
 8006cec:	0800c8dc 	.word	0x0800c8dc

08006cf0 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006cf0:	4a2a      	ldr	r2, [pc, #168]	; (8006d9c <HAL_TIM_Base_Start_IT+0xac>)
 8006cf2:	6803      	ldr	r3, [r0, #0]
 8006cf4:	4293      	cmp	r3, r2
{
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006cfa:	d01f      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x4c>
 8006cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d00:	d01c      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x4c>
 8006d02:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d018      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x4c>
 8006d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d014      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x4c>
 8006d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d010      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x4c>
 8006d1a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00c      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x4c>
 8006d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d008      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x4c>
 8006d2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <HAL_TIM_Base_Start_IT+0x4c>
 8006d32:	481b      	ldr	r0, [pc, #108]	; (8006da0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006d34:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006d38:	f7fb fde0 	bl	80028fc <assert_failed>
  if (htim->State != HAL_TIM_STATE_READY)
 8006d3c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d127      	bne.n	8006d94 <HAL_TIM_Base_Start_IT+0xa4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d44:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d46:	4915      	ldr	r1, [pc, #84]	; (8006d9c <HAL_TIM_Base_Start_IT+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d4e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d50:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d58:	d011      	beq.n	8006d7e <HAL_TIM_Base_Start_IT+0x8e>
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5e:	d00e      	beq.n	8006d7e <HAL_TIM_Base_Start_IT+0x8e>
 8006d60:	4a10      	ldr	r2, [pc, #64]	; (8006da4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00b      	beq.n	8006d7e <HAL_TIM_Base_Start_IT+0x8e>
 8006d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d007      	beq.n	8006d7e <HAL_TIM_Base_Start_IT+0x8e>
 8006d6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d003      	beq.n	8006d7e <HAL_TIM_Base_Start_IT+0x8e>
 8006d76:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d104      	bne.n	8006d88 <HAL_TIM_Base_Start_IT+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d84:	2a06      	cmp	r2, #6
 8006d86:	d007      	beq.n	8006d98 <HAL_TIM_Base_Start_IT+0xa8>
    __HAL_TIM_ENABLE(htim);
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006d90:	2000      	movs	r0, #0
}
 8006d92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006d94:	2001      	movs	r0, #1
}
 8006d96:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8006d98:	2000      	movs	r0, #0
}
 8006d9a:	bd10      	pop	{r4, pc}
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	0800c8dc 	.word	0x0800c8dc
 8006da4:	40000400 	.word	0x40000400

08006da8 <HAL_TIM_PWM_MspInit>:
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop

08006dac <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006dac:	2800      	cmp	r0, #0
 8006dae:	f000 80cd 	beq.w	8006f4c <HAL_TIM_PWM_Init+0x1a0>
{
 8006db2:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006db4:	4a66      	ldr	r2, [pc, #408]	; (8006f50 <HAL_TIM_PWM_Init+0x1a4>)
 8006db6:	6803      	ldr	r3, [r0, #0]
 8006db8:	4293      	cmp	r3, r2
 8006dba:	4604      	mov	r4, r0
 8006dbc:	d01f      	beq.n	8006dfe <HAL_TIM_PWM_Init+0x52>
 8006dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc2:	d01c      	beq.n	8006dfe <HAL_TIM_PWM_Init+0x52>
 8006dc4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d018      	beq.n	8006dfe <HAL_TIM_PWM_Init+0x52>
 8006dcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d014      	beq.n	8006dfe <HAL_TIM_PWM_Init+0x52>
 8006dd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d010      	beq.n	8006dfe <HAL_TIM_PWM_Init+0x52>
 8006ddc:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00c      	beq.n	8006dfe <HAL_TIM_PWM_Init+0x52>
 8006de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d008      	beq.n	8006dfe <HAL_TIM_PWM_Init+0x52>
 8006dec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <HAL_TIM_PWM_Init+0x52>
 8006df4:	4857      	ldr	r0, [pc, #348]	; (8006f54 <HAL_TIM_PWM_Init+0x1a8>)
 8006df6:	f240 510e 	movw	r1, #1294	; 0x50e
 8006dfa:	f7fb fd7f 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006dfe:	68a3      	ldr	r3, [r4, #8]
 8006e00:	f033 0210 	bics.w	r2, r3, #16
 8006e04:	d00a      	beq.n	8006e1c <HAL_TIM_PWM_Init+0x70>
 8006e06:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006e0a:	2a20      	cmp	r2, #32
 8006e0c:	d006      	beq.n	8006e1c <HAL_TIM_PWM_Init+0x70>
 8006e0e:	2b40      	cmp	r3, #64	; 0x40
 8006e10:	d004      	beq.n	8006e1c <HAL_TIM_PWM_Init+0x70>
 8006e12:	4850      	ldr	r0, [pc, #320]	; (8006f54 <HAL_TIM_PWM_Init+0x1a8>)
 8006e14:	f240 510f 	movw	r1, #1295	; 0x50f
 8006e18:	f7fb fd70 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8006e22:	d003      	beq.n	8006e2c <HAL_TIM_PWM_Init+0x80>
 8006e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e28:	f040 8085 	bne.w	8006f36 <HAL_TIM_PWM_Init+0x18a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006e2c:	69a3      	ldr	r3, [r4, #24]
 8006e2e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8006e32:	d132      	bne.n	8006e9a <HAL_TIM_PWM_Init+0xee>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006e34:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006e38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d037      	beq.n	8006eb0 <HAL_TIM_PWM_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e40:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e42:	4943      	ldr	r1, [pc, #268]	; (8006f50 <HAL_TIM_PWM_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006e44:	2302      	movs	r3, #2
 8006e46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e4a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006e4c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e4e:	d05e      	beq.n	8006f0e <HAL_TIM_PWM_Init+0x162>
 8006e50:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006e54:	d032      	beq.n	8006ebc <HAL_TIM_PWM_Init+0x110>
 8006e56:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8006e5a:	428a      	cmp	r2, r1
 8006e5c:	d02e      	beq.n	8006ebc <HAL_TIM_PWM_Init+0x110>
 8006e5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e62:	428a      	cmp	r2, r1
 8006e64:	d02a      	beq.n	8006ebc <HAL_TIM_PWM_Init+0x110>
 8006e66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e6a:	428a      	cmp	r2, r1
 8006e6c:	d026      	beq.n	8006ebc <HAL_TIM_PWM_Init+0x110>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e6e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8006e72:	428a      	cmp	r2, r1
 8006e74:	d026      	beq.n	8006ec4 <HAL_TIM_PWM_Init+0x118>
 8006e76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e7a:	428a      	cmp	r2, r1
 8006e7c:	d022      	beq.n	8006ec4 <HAL_TIM_PWM_Init+0x118>
 8006e7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e82:	428a      	cmp	r2, r1
 8006e84:	d01e      	beq.n	8006ec4 <HAL_TIM_PWM_Init+0x118>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e86:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e88:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8006e8a:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e90:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006e92:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e94:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e96:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e98:	e021      	b.n	8006ede <HAL_TIM_PWM_Init+0x132>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006e9a:	482e      	ldr	r0, [pc, #184]	; (8006f54 <HAL_TIM_PWM_Init+0x1a8>)
 8006e9c:	f240 5111 	movw	r1, #1297	; 0x511
 8006ea0:	f7fb fd2c 	bl	80028fc <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8006ea8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1c7      	bne.n	8006e40 <HAL_TIM_PWM_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 8006eb0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f7ff ff77 	bl	8006da8 <HAL_TIM_PWM_MspInit>
 8006eba:	e7c1      	b.n	8006e40 <HAL_TIM_PWM_Init+0x94>
    tmpcr1 |= Structure->CounterMode;
 8006ebc:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006ec2:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ec4:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec6:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ec8:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ece:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ed4:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006ed6:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006ed8:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eda:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006edc:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006eea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006eee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006ef2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006efe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006f06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006f0a:	2000      	movs	r0, #0
}
 8006f0c:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006f0e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f10:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f12:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006f18:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f1e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f24:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006f26:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f28:	68e3      	ldr	r3, [r4, #12]
 8006f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006f2c:	6863      	ldr	r3, [r4, #4]
 8006f2e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006f30:	6963      	ldr	r3, [r4, #20]
 8006f32:	6313      	str	r3, [r2, #48]	; 0x30
 8006f34:	e7d3      	b.n	8006ede <HAL_TIM_PWM_Init+0x132>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006f36:	4807      	ldr	r0, [pc, #28]	; (8006f54 <HAL_TIM_PWM_Init+0x1a8>)
 8006f38:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8006f3c:	f7fb fcde 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006f40:	69a3      	ldr	r3, [r4, #24]
 8006f42:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8006f46:	f43f af75 	beq.w	8006e34 <HAL_TIM_PWM_Init+0x88>
 8006f4a:	e7a6      	b.n	8006e9a <HAL_TIM_PWM_Init+0xee>
    return HAL_ERROR;
 8006f4c:	2001      	movs	r0, #1
}
 8006f4e:	4770      	bx	lr
 8006f50:	40010000 	.word	0x40010000
 8006f54:	0800c8dc 	.word	0x0800c8dc

08006f58 <HAL_TIM_PWM_Start>:
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006f58:	4a79      	ldr	r2, [pc, #484]	; (8007140 <HAL_TIM_PWM_Start+0x1e8>)
 8006f5a:	6803      	ldr	r3, [r0, #0]
 8006f5c:	4293      	cmp	r3, r2
{
 8006f5e:	b570      	push	{r4, r5, r6, lr}
 8006f60:	4605      	mov	r5, r0
 8006f62:	460c      	mov	r4, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006f64:	d067      	beq.n	8007036 <HAL_TIM_PWM_Start+0xde>
 8006f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6a:	d064      	beq.n	8007036 <HAL_TIM_PWM_Start+0xde>
 8006f6c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d060      	beq.n	8007036 <HAL_TIM_PWM_Start+0xde>
 8006f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d05c      	beq.n	8007036 <HAL_TIM_PWM_Start+0xde>
 8006f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d058      	beq.n	8007036 <HAL_TIM_PWM_Start+0xde>
 8006f84:	4a6f      	ldr	r2, [pc, #444]	; (8007144 <HAL_TIM_PWM_Start+0x1ec>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d066      	beq.n	8007058 <HAL_TIM_PWM_Start+0x100>
 8006f8a:	4a6f      	ldr	r2, [pc, #444]	; (8007148 <HAL_TIM_PWM_Start+0x1f0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <HAL_TIM_PWM_Start+0x40>
 8006f90:	4a6e      	ldr	r2, [pc, #440]	; (800714c <HAL_TIM_PWM_Start+0x1f4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	f040 80b5 	bne.w	8007102 <HAL_TIM_PWM_Start+0x1aa>
 8006f98:	2c00      	cmp	r4, #0
 8006f9a:	d05f      	beq.n	800705c <HAL_TIM_PWM_Start+0x104>
 8006f9c:	486c      	ldr	r0, [pc, #432]	; (8007150 <HAL_TIM_PWM_Start+0x1f8>)
 8006f9e:	f240 5194 	movw	r1, #1428	; 0x594
 8006fa2:	f7fb fcab 	bl	80028fc <assert_failed>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fa6:	2c04      	cmp	r4, #4
 8006fa8:	f000 80b7 	beq.w	800711a <HAL_TIM_PWM_Start+0x1c2>
 8006fac:	2c08      	cmp	r4, #8
 8006fae:	f000 8083 	beq.w	80070b8 <HAL_TIM_PWM_Start+0x160>
 8006fb2:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d17c      	bne.n	80070b4 <HAL_TIM_PWM_Start+0x15c>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fba:	682b      	ldr	r3, [r5, #0]
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006fbc:	4a60      	ldr	r2, [pc, #384]	; (8007140 <HAL_TIM_PWM_Start+0x1e8>)
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fbe:	2102      	movs	r1, #2
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006fc0:	4293      	cmp	r3, r2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fc2:	461e      	mov	r6, r3
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006fc8:	d154      	bne.n	8007074 <HAL_TIM_PWM_Start+0x11c>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006fca:	f034 0304 	bics.w	r3, r4, #4
 8006fce:	d004      	beq.n	8006fda <HAL_TIM_PWM_Start+0x82>
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d002      	beq.n	8006fda <HAL_TIM_PWM_Start+0x82>
 8006fd4:	2c3c      	cmp	r4, #60	; 0x3c
 8006fd6:	f040 80ad 	bne.w	8007134 <HAL_TIM_PWM_Start+0x1dc>
 8006fda:	682b      	ldr	r3, [r5, #0]

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fdc:	6a30      	ldr	r0, [r6, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fde:	4d58      	ldr	r5, [pc, #352]	; (8007140 <HAL_TIM_PWM_Start+0x1e8>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f004 041f 	and.w	r4, r4, #31
 8006fe6:	fa02 f404 	lsl.w	r4, r2, r4
  TIMx->CCER &= ~tmp;
 8006fea:	ea20 0004 	bic.w	r0, r0, r4
 8006fee:	6230      	str	r0, [r6, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ff0:	6a32      	ldr	r2, [r6, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ff2:	42ab      	cmp	r3, r5
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ff4:	ea44 0402 	orr.w	r4, r4, r2
 8006ff8:	6234      	str	r4, [r6, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ffa:	d076      	beq.n	80070ea <HAL_TIM_PWM_Start+0x192>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007000:	d00e      	beq.n	8007020 <HAL_TIM_PWM_Start+0xc8>
 8007002:	4a54      	ldr	r2, [pc, #336]	; (8007154 <HAL_TIM_PWM_Start+0x1fc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00b      	beq.n	8007020 <HAL_TIM_PWM_Start+0xc8>
 8007008:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <HAL_TIM_PWM_Start+0xc8>
 8007010:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <HAL_TIM_PWM_Start+0xc8>
 8007018:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800701c:	4293      	cmp	r3, r2
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Start+0xd2>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007020:	689a      	ldr	r2, [r3, #8]
 8007022:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007026:	2a06      	cmp	r2, #6
 8007028:	d069      	beq.n	80070fe <HAL_TIM_PWM_Start+0x1a6>
    __HAL_TIM_ENABLE(htim);
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	f042 0201 	orr.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007032:	2000      	movs	r0, #0
}
 8007034:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007036:	b18c      	cbz	r4, 800705c <HAL_TIM_PWM_Start+0x104>
 8007038:	2c04      	cmp	r4, #4
 800703a:	d06e      	beq.n	800711a <HAL_TIM_PWM_Start+0x1c2>
 800703c:	2c08      	cmp	r4, #8
 800703e:	d03b      	beq.n	80070b8 <HAL_TIM_PWM_Start+0x160>
 8007040:	2c0c      	cmp	r4, #12
 8007042:	d0b6      	beq.n	8006fb2 <HAL_TIM_PWM_Start+0x5a>
 8007044:	4a3f      	ldr	r2, [pc, #252]	; (8007144 <HAL_TIM_PWM_Start+0x1ec>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d0a8      	beq.n	8006f9c <HAL_TIM_PWM_Start+0x44>
 800704a:	4a3f      	ldr	r2, [pc, #252]	; (8007148 <HAL_TIM_PWM_Start+0x1f0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d0a5      	beq.n	8006f9c <HAL_TIM_PWM_Start+0x44>
 8007050:	4a3e      	ldr	r2, [pc, #248]	; (800714c <HAL_TIM_PWM_Start+0x1f4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d0a0      	beq.n	8006f98 <HAL_TIM_PWM_Start+0x40>
 8007056:	e7a1      	b.n	8006f9c <HAL_TIM_PWM_Start+0x44>
 8007058:	2900      	cmp	r1, #0
 800705a:	d15b      	bne.n	8007114 <HAL_TIM_PWM_Start+0x1bc>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800705c:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 8007060:	2b01      	cmp	r3, #1
 8007062:	d127      	bne.n	80070b4 <HAL_TIM_PWM_Start+0x15c>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007064:	682b      	ldr	r3, [r5, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007066:	4a36      	ldr	r2, [pc, #216]	; (8007140 <HAL_TIM_PWM_Start+0x1e8>)
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007068:	2102      	movs	r1, #2
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800706a:	4293      	cmp	r3, r2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800706c:	461e      	mov	r6, r3
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800706e:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007072:	d0b3      	beq.n	8006fdc <HAL_TIM_PWM_Start+0x84>
 8007074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007078:	d0a7      	beq.n	8006fca <HAL_TIM_PWM_Start+0x72>
 800707a:	4a36      	ldr	r2, [pc, #216]	; (8007154 <HAL_TIM_PWM_Start+0x1fc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d0a4      	beq.n	8006fca <HAL_TIM_PWM_Start+0x72>
 8007080:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007084:	4293      	cmp	r3, r2
 8007086:	d0a0      	beq.n	8006fca <HAL_TIM_PWM_Start+0x72>
 8007088:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800708c:	4293      	cmp	r3, r2
 800708e:	d09c      	beq.n	8006fca <HAL_TIM_PWM_Start+0x72>
 8007090:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007094:	4293      	cmp	r3, r2
 8007096:	d098      	beq.n	8006fca <HAL_TIM_PWM_Start+0x72>
 8007098:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800709c:	4293      	cmp	r3, r2
 800709e:	d094      	beq.n	8006fca <HAL_TIM_PWM_Start+0x72>
 80070a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d090      	beq.n	8006fca <HAL_TIM_PWM_Start+0x72>
 80070a8:	4829      	ldr	r0, [pc, #164]	; (8007150 <HAL_TIM_PWM_Start+0x1f8>)
 80070aa:	f641 41d2 	movw	r1, #7378	; 0x1cd2
 80070ae:	f7fb fc25 	bl	80028fc <assert_failed>
 80070b2:	e78a      	b.n	8006fca <HAL_TIM_PWM_Start+0x72>
    return HAL_ERROR;
 80070b4:	2001      	movs	r0, #1
}
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070b8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d1f9      	bne.n	80070b4 <HAL_TIM_PWM_Start+0x15c>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070c0:	682b      	ldr	r3, [r5, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80070c2:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <HAL_TIM_PWM_Start+0x1e8>)
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c4:	2102      	movs	r1, #2
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80070c6:	4293      	cmp	r3, r2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070c8:	461e      	mov	r6, r3
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ca:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80070ce:	d1d1      	bne.n	8007074 <HAL_TIM_PWM_Start+0x11c>
  TIMx->CCER &= ~tmp;
 80070d0:	4a1b      	ldr	r2, [pc, #108]	; (8007140 <HAL_TIM_PWM_Start+0x1e8>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070d2:	2301      	movs	r3, #1
  TIMx->CCER &= ~tmp;
 80070d4:	6a10      	ldr	r0, [r2, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070d6:	f004 041f 	and.w	r4, r4, #31
 80070da:	fa03 f404 	lsl.w	r4, r3, r4
  TIMx->CCER &= ~tmp;
 80070de:	ea20 0004 	bic.w	r0, r0, r4
 80070e2:	6210      	str	r0, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070e4:	6a13      	ldr	r3, [r2, #32]
 80070e6:	431c      	orrs	r4, r3
 80070e8:	6214      	str	r4, [r2, #32]
    __HAL_TIM_MOE_ENABLE(htim);
 80070ea:	4b15      	ldr	r3, [pc, #84]	; (8007140 <HAL_TIM_PWM_Start+0x1e8>)
 80070ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070f2:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070fa:	2a06      	cmp	r2, #6
 80070fc:	d195      	bne.n	800702a <HAL_TIM_PWM_Start+0xd2>
  return HAL_OK;
 80070fe:	2000      	movs	r0, #0
}
 8007100:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007102:	4813      	ldr	r0, [pc, #76]	; (8007150 <HAL_TIM_PWM_Start+0x1f8>)
 8007104:	f240 5194 	movw	r1, #1428	; 0x594
 8007108:	f7fb fbf8 	bl	80028fc <assert_failed>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800710c:	2c00      	cmp	r4, #0
 800710e:	f47f af4a 	bne.w	8006fa6 <HAL_TIM_PWM_Start+0x4e>
 8007112:	e7a3      	b.n	800705c <HAL_TIM_PWM_Start+0x104>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007114:	2904      	cmp	r1, #4
 8007116:	f47f af41 	bne.w	8006f9c <HAL_TIM_PWM_Start+0x44>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800711a:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 800711e:	2b01      	cmp	r3, #1
 8007120:	d1c8      	bne.n	80070b4 <HAL_TIM_PWM_Start+0x15c>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007122:	682b      	ldr	r3, [r5, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007124:	4a06      	ldr	r2, [pc, #24]	; (8007140 <HAL_TIM_PWM_Start+0x1e8>)
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007126:	2102      	movs	r1, #2
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007128:	4293      	cmp	r3, r2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800712a:	461e      	mov	r6, r3
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800712c:	f885 103f 	strb.w	r1, [r5, #63]	; 0x3f
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007130:	d1a0      	bne.n	8007074 <HAL_TIM_PWM_Start+0x11c>
 8007132:	e7cd      	b.n	80070d0 <HAL_TIM_PWM_Start+0x178>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007134:	4806      	ldr	r0, [pc, #24]	; (8007150 <HAL_TIM_PWM_Start+0x1f8>)
 8007136:	f641 41d3 	movw	r1, #7379	; 0x1cd3
 800713a:	f7fb fbdf 	bl	80028fc <assert_failed>
 800713e:	e74c      	b.n	8006fda <HAL_TIM_PWM_Start+0x82>
 8007140:	40010000 	.word	0x40010000
 8007144:	40014000 	.word	0x40014000
 8007148:	40014400 	.word	0x40014400
 800714c:	40014800 	.word	0x40014800
 8007150:	0800c8dc 	.word	0x0800c8dc
 8007154:	40000400 	.word	0x40000400

08007158 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007158:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800715c:	2b01      	cmp	r3, #1
 800715e:	f000 8177 	beq.w	8007450 <HAL_TIM_ConfigClockSource+0x2f8>
  htim->State = HAL_TIM_STATE_BUSY;
 8007162:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8007164:	2201      	movs	r2, #1
{
 8007166:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8007168:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007170:	680b      	ldr	r3, [r1, #0]
 8007172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007176:	4604      	mov	r4, r0
 8007178:	460d      	mov	r5, r1
 800717a:	f000 8124 	beq.w	80073c6 <HAL_TIM_ConfigClockSource+0x26e>
 800717e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007182:	f000 8153 	beq.w	800742c <HAL_TIM_ConfigClockSource+0x2d4>
 8007186:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 800718a:	f040 8157 	bne.w	800743c <HAL_TIM_ConfigClockSource+0x2e4>
  tmpsmcr = htim->Instance->SMCR;
 800718e:	6822      	ldr	r2, [r4, #0]
 8007190:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007192:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8007196:	f021 0177 	bic.w	r1, r1, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800719a:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800719c:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800719e:	f000 81a1 	beq.w	80074e4 <HAL_TIM_ConfigClockSource+0x38c>
 80071a2:	d87e      	bhi.n	80072a2 <HAL_TIM_ConfigClockSource+0x14a>
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	f000 8159 	beq.w	800745c <HAL_TIM_ConfigClockSource+0x304>
 80071aa:	d94c      	bls.n	8007246 <HAL_TIM_ConfigClockSource+0xee>
 80071ac:	2b50      	cmp	r3, #80	; 0x50
 80071ae:	d143      	bne.n	8007238 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80071b0:	4ba8      	ldr	r3, [pc, #672]	; (8007454 <HAL_TIM_ConfigClockSource+0x2fc>)
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d017      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x8e>
 80071b6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80071ba:	d014      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x8e>
 80071bc:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d010      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x8e>
 80071c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d00c      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x8e>
 80071cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d008      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x8e>
 80071d4:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 80071d8:	429a      	cmp	r2, r3
 80071da:	d004      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x8e>
 80071dc:	489e      	ldr	r0, [pc, #632]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 80071de:	f241 4161 	movw	r1, #5217	; 0x1461
 80071e2:	f7fb fb8b 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80071e6:	686b      	ldr	r3, [r5, #4]
 80071e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ec:	d009      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0xaa>
 80071ee:	f033 0202 	bics.w	r2, r3, #2
 80071f2:	d006      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0xaa>
 80071f4:	2b0a      	cmp	r3, #10
 80071f6:	d004      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0xaa>
 80071f8:	4897      	ldr	r0, [pc, #604]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 80071fa:	f241 4164 	movw	r1, #5220	; 0x1464
 80071fe:	f7fb fb7d 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007202:	68ee      	ldr	r6, [r5, #12]
 8007204:	2e0f      	cmp	r6, #15
 8007206:	f200 81ce 	bhi.w	80075a6 <HAL_TIM_ConfigClockSource+0x44e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800720e:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007210:	6a1d      	ldr	r5, [r3, #32]
 8007212:	f025 0501 	bic.w	r5, r5, #1
 8007216:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007218:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800721a:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800721e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007222:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007226:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800722a:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800722c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800722e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007232:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8007236:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007238:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800723a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800723c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007240:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007244:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8007246:	2b20      	cmp	r3, #32
 8007248:	d002      	beq.n	8007250 <HAL_TIM_ConfigClockSource+0xf8>
 800724a:	d926      	bls.n	800729a <HAL_TIM_ConfigClockSource+0x142>
 800724c:	2b30      	cmp	r3, #48	; 0x30
 800724e:	d1f3      	bne.n	8007238 <HAL_TIM_ConfigClockSource+0xe0>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007250:	4980      	ldr	r1, [pc, #512]	; (8007454 <HAL_TIM_ConfigClockSource+0x2fc>)
 8007252:	428a      	cmp	r2, r1
 8007254:	d019      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x132>
 8007256:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800725a:	d016      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x132>
 800725c:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8007260:	428a      	cmp	r2, r1
 8007262:	d012      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x132>
 8007264:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007268:	428a      	cmp	r2, r1
 800726a:	d00e      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x132>
 800726c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007270:	428a      	cmp	r2, r1
 8007272:	d00a      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x132>
 8007274:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8007278:	428a      	cmp	r2, r1
 800727a:	d006      	beq.n	800728a <HAL_TIM_ConfigClockSource+0x132>
 800727c:	4876      	ldr	r0, [pc, #472]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 800727e:	f241 4194 	movw	r1, #5268	; 0x1494
 8007282:	f7fb fb3b 	bl	80028fc <assert_failed>
 8007286:	682b      	ldr	r3, [r5, #0]
 8007288:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800728a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800728c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007290:	430b      	orrs	r3, r1
 8007292:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8007296:	6093      	str	r3, [r2, #8]
}
 8007298:	e7ce      	b.n	8007238 <HAL_TIM_ConfigClockSource+0xe0>
  switch (sClockSourceConfig->ClockSource)
 800729a:	f033 0110 	bics.w	r1, r3, #16
 800729e:	d1cb      	bne.n	8007238 <HAL_TIM_ConfigClockSource+0xe0>
 80072a0:	e7d6      	b.n	8007250 <HAL_TIM_ConfigClockSource+0xf8>
 80072a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a6:	f000 8095 	beq.w	80073d4 <HAL_TIM_ConfigClockSource+0x27c>
 80072aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ae:	d141      	bne.n	8007334 <HAL_TIM_ConfigClockSource+0x1dc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80072b0:	4b68      	ldr	r3, [pc, #416]	; (8007454 <HAL_TIM_ConfigClockSource+0x2fc>)
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d013      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x186>
 80072b6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80072ba:	d010      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x186>
 80072bc:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d00c      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x186>
 80072c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d008      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x186>
 80072cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d004      	beq.n	80072de <HAL_TIM_ConfigClockSource+0x186>
 80072d4:	4860      	ldr	r0, [pc, #384]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 80072d6:	f241 414d 	movw	r1, #5197	; 0x144d
 80072da:	f7fb fb0f 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80072de:	68ab      	ldr	r3, [r5, #8]
 80072e0:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80072e4:	d004      	beq.n	80072f0 <HAL_TIM_ConfigClockSource+0x198>
 80072e6:	485c      	ldr	r0, [pc, #368]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 80072e8:	f241 4150 	movw	r1, #5200	; 0x1450
 80072ec:	f7fb fb06 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80072f0:	686b      	ldr	r3, [r5, #4]
 80072f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072f6:	d009      	beq.n	800730c <HAL_TIM_ConfigClockSource+0x1b4>
 80072f8:	f033 0202 	bics.w	r2, r3, #2
 80072fc:	d006      	beq.n	800730c <HAL_TIM_ConfigClockSource+0x1b4>
 80072fe:	2b0a      	cmp	r3, #10
 8007300:	d004      	beq.n	800730c <HAL_TIM_ConfigClockSource+0x1b4>
 8007302:	4855      	ldr	r0, [pc, #340]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 8007304:	f241 4151 	movw	r1, #5201	; 0x1451
 8007308:	f7fb faf8 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800730c:	68e8      	ldr	r0, [r5, #12]
 800730e:	280f      	cmp	r0, #15
 8007310:	f200 813b 	bhi.w	800758a <HAL_TIM_ConfigClockSource+0x432>
      TIM_ETR_SetConfig(htim->Instance,
 8007314:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8007316:	68ab      	ldr	r3, [r5, #8]
 8007318:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800731a:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800731c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8007320:	432b      	orrs	r3, r5
 8007322:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007324:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 8007328:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800732a:	6893      	ldr	r3, [r2, #8]
 800732c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007330:	6093      	str	r3, [r2, #8]
      break;
 8007332:	e781      	b.n	8007238 <HAL_TIM_ConfigClockSource+0xe0>
  switch (sClockSourceConfig->ClockSource)
 8007334:	2b70      	cmp	r3, #112	; 0x70
 8007336:	f47f af7f 	bne.w	8007238 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800733a:	4b46      	ldr	r3, [pc, #280]	; (8007454 <HAL_TIM_ConfigClockSource+0x2fc>)
 800733c:	429a      	cmp	r2, r3
 800733e:	d017      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x218>
 8007340:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007344:	d014      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x218>
 8007346:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800734a:	429a      	cmp	r2, r3
 800734c:	d010      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x218>
 800734e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007352:	429a      	cmp	r2, r3
 8007354:	d00c      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x218>
 8007356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800735a:	429a      	cmp	r2, r3
 800735c:	d008      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x218>
 800735e:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8007362:	429a      	cmp	r2, r3
 8007364:	d004      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x218>
 8007366:	483c      	ldr	r0, [pc, #240]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 8007368:	f241 4135 	movw	r1, #5173	; 0x1435
 800736c:	f7fb fac6 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007370:	68ab      	ldr	r3, [r5, #8]
 8007372:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8007376:	d004      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0x22a>
 8007378:	4837      	ldr	r0, [pc, #220]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 800737a:	f241 4138 	movw	r1, #5176	; 0x1438
 800737e:	f7fb fabd 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007382:	686b      	ldr	r3, [r5, #4]
 8007384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007388:	d009      	beq.n	800739e <HAL_TIM_ConfigClockSource+0x246>
 800738a:	f033 0202 	bics.w	r2, r3, #2
 800738e:	d006      	beq.n	800739e <HAL_TIM_ConfigClockSource+0x246>
 8007390:	2b0a      	cmp	r3, #10
 8007392:	d004      	beq.n	800739e <HAL_TIM_ConfigClockSource+0x246>
 8007394:	4830      	ldr	r0, [pc, #192]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 8007396:	f241 4139 	movw	r1, #5177	; 0x1439
 800739a:	f7fb faaf 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800739e:	68e8      	ldr	r0, [r5, #12]
 80073a0:	280f      	cmp	r0, #15
 80073a2:	f200 80eb 	bhi.w	800757c <HAL_TIM_ConfigClockSource+0x424>
      TIM_ETR_SetConfig(htim->Instance,
 80073a6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80073a8:	68ab      	ldr	r3, [r5, #8]
 80073aa:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073ac:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ae:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 80073b2:	432b      	orrs	r3, r5
 80073b4:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 80073ba:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80073bc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80073c2:	6093      	str	r3, [r2, #8]
      break;
 80073c4:	e738      	b.n	8007238 <HAL_TIM_ConfigClockSource+0xe0>
  tmpsmcr = htim->Instance->SMCR;
 80073c6:	6802      	ldr	r2, [r0, #0]
 80073c8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80073d2:	6093      	str	r3, [r2, #8]
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80073d4:	4b1f      	ldr	r3, [pc, #124]	; (8007454 <HAL_TIM_ConfigClockSource+0x2fc>)
 80073d6:	429a      	cmp	r2, r3
 80073d8:	f43f af2e 	beq.w	8007238 <HAL_TIM_ConfigClockSource+0xe0>
 80073dc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80073e0:	f43f af2a 	beq.w	8007238 <HAL_TIM_ConfigClockSource+0xe0>
 80073e4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80073e8:	429a      	cmp	r2, r3
 80073ea:	f43f af25 	beq.w	8007238 <HAL_TIM_ConfigClockSource+0xe0>
 80073ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073f2:	429a      	cmp	r2, r3
 80073f4:	f43f af20 	beq.w	8007238 <HAL_TIM_ConfigClockSource+0xe0>
 80073f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073fc:	429a      	cmp	r2, r3
 80073fe:	f43f af1b 	beq.w	8007238 <HAL_TIM_ConfigClockSource+0xe0>
 8007402:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8007406:	429a      	cmp	r2, r3
 8007408:	f43f af16 	beq.w	8007238 <HAL_TIM_ConfigClockSource+0xe0>
 800740c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007410:	429a      	cmp	r2, r3
 8007412:	f43f af11 	beq.w	8007238 <HAL_TIM_ConfigClockSource+0xe0>
 8007416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800741a:	429a      	cmp	r2, r3
 800741c:	f43f af0c 	beq.w	8007238 <HAL_TIM_ConfigClockSource+0xe0>
 8007420:	480d      	ldr	r0, [pc, #52]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 8007422:	f241 412e 	movw	r1, #5166	; 0x142e
 8007426:	f7fb fa69 	bl	80028fc <assert_failed>
 800742a:	e705      	b.n	8007238 <HAL_TIM_ConfigClockSource+0xe0>
  tmpsmcr = htim->Instance->SMCR;
 800742c:	6802      	ldr	r2, [r0, #0]
 800742e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007430:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007434:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007438:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800743a:	e739      	b.n	80072b0 <HAL_TIM_ConfigClockSource+0x158>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800743c:	2a40      	cmp	r2, #64	; 0x40
 800743e:	f43f aea6 	beq.w	800718e <HAL_TIM_ConfigClockSource+0x36>
 8007442:	4805      	ldr	r0, [pc, #20]	; (8007458 <HAL_TIM_ConfigClockSource+0x300>)
 8007444:	f241 4122 	movw	r1, #5154	; 0x1422
 8007448:	f7fb fa58 	bl	80028fc <assert_failed>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	e69e      	b.n	800718e <HAL_TIM_ConfigClockSource+0x36>
  __HAL_LOCK(htim);
 8007450:	2002      	movs	r0, #2
}
 8007452:	4770      	bx	lr
 8007454:	40010000 	.word	0x40010000
 8007458:	0800c8dc 	.word	0x0800c8dc
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800745c:	4b55      	ldr	r3, [pc, #340]	; (80075b4 <HAL_TIM_ConfigClockSource+0x45c>)
 800745e:	429a      	cmp	r2, r3
 8007460:	d017      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x33a>
 8007462:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007466:	d014      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x33a>
 8007468:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800746c:	429a      	cmp	r2, r3
 800746e:	d010      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x33a>
 8007470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007474:	429a      	cmp	r2, r3
 8007476:	d00c      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x33a>
 8007478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800747c:	429a      	cmp	r2, r3
 800747e:	d008      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x33a>
 8007480:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8007484:	429a      	cmp	r2, r3
 8007486:	d004      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x33a>
 8007488:	484b      	ldr	r0, [pc, #300]	; (80075b8 <HAL_TIM_ConfigClockSource+0x460>)
 800748a:	f241 4181 	movw	r1, #5249	; 0x1481
 800748e:	f7fb fa35 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007492:	686b      	ldr	r3, [r5, #4]
 8007494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007498:	d009      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x356>
 800749a:	f033 0202 	bics.w	r2, r3, #2
 800749e:	d006      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x356>
 80074a0:	2b0a      	cmp	r3, #10
 80074a2:	d004      	beq.n	80074ae <HAL_TIM_ConfigClockSource+0x356>
 80074a4:	4844      	ldr	r0, [pc, #272]	; (80075b8 <HAL_TIM_ConfigClockSource+0x460>)
 80074a6:	f241 4184 	movw	r1, #5252	; 0x1484
 80074aa:	f7fb fa27 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80074ae:	68ee      	ldr	r6, [r5, #12]
 80074b0:	2e0f      	cmp	r6, #15
 80074b2:	d871      	bhi.n	8007598 <HAL_TIM_ConfigClockSource+0x440>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 80074b8:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ba:	6a1d      	ldr	r5, [r3, #32]
 80074bc:	f025 0501 	bic.w	r5, r5, #1
 80074c0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074c4:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074c8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074cc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80074d0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80074d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d4:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80074d6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80074d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074dc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80074e0:	609a      	str	r2, [r3, #8]
}
 80074e2:	e6a9      	b.n	8007238 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80074e4:	4b33      	ldr	r3, [pc, #204]	; (80075b4 <HAL_TIM_ConfigClockSource+0x45c>)
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d017      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x3c2>
 80074ea:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80074ee:	d014      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x3c2>
 80074f0:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d010      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x3c2>
 80074f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d00c      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x3c2>
 8007500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007504:	429a      	cmp	r2, r3
 8007506:	d008      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x3c2>
 8007508:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800750c:	429a      	cmp	r2, r3
 800750e:	d004      	beq.n	800751a <HAL_TIM_ConfigClockSource+0x3c2>
 8007510:	4829      	ldr	r0, [pc, #164]	; (80075b8 <HAL_TIM_ConfigClockSource+0x460>)
 8007512:	f241 4171 	movw	r1, #5233	; 0x1471
 8007516:	f7fb f9f1 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800751a:	686b      	ldr	r3, [r5, #4]
 800751c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007520:	d009      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x3de>
 8007522:	f033 0202 	bics.w	r2, r3, #2
 8007526:	d006      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x3de>
 8007528:	2b0a      	cmp	r3, #10
 800752a:	d004      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x3de>
 800752c:	4822      	ldr	r0, [pc, #136]	; (80075b8 <HAL_TIM_ConfigClockSource+0x460>)
 800752e:	f241 4174 	movw	r1, #5236	; 0x1474
 8007532:	f7fb f9e3 	bl	80028fc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007536:	68ee      	ldr	r6, [r5, #12]
 8007538:	2e0f      	cmp	r6, #15
 800753a:	d818      	bhi.n	800756e <HAL_TIM_ConfigClockSource+0x416>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007540:	6a18      	ldr	r0, [r3, #32]
 8007542:	f020 0010 	bic.w	r0, r0, #16
 8007546:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007548:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800754a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800754c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007550:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007554:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007558:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800755c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800755e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007560:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007562:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007566:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800756a:	609a      	str	r2, [r3, #8]
}
 800756c:	e664      	b.n	8007238 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800756e:	4812      	ldr	r0, [pc, #72]	; (80075b8 <HAL_TIM_ConfigClockSource+0x460>)
 8007570:	f241 4175 	movw	r1, #5237	; 0x1475
 8007574:	f7fb f9c2 	bl	80028fc <assert_failed>
 8007578:	68ee      	ldr	r6, [r5, #12]
 800757a:	e7df      	b.n	800753c <HAL_TIM_ConfigClockSource+0x3e4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800757c:	480e      	ldr	r0, [pc, #56]	; (80075b8 <HAL_TIM_ConfigClockSource+0x460>)
 800757e:	f241 413a 	movw	r1, #5178	; 0x143a
 8007582:	f7fb f9bb 	bl	80028fc <assert_failed>
 8007586:	68e8      	ldr	r0, [r5, #12]
 8007588:	e70d      	b.n	80073a6 <HAL_TIM_ConfigClockSource+0x24e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800758a:	480b      	ldr	r0, [pc, #44]	; (80075b8 <HAL_TIM_ConfigClockSource+0x460>)
 800758c:	f241 4152 	movw	r1, #5202	; 0x1452
 8007590:	f7fb f9b4 	bl	80028fc <assert_failed>
 8007594:	68e8      	ldr	r0, [r5, #12]
 8007596:	e6bd      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007598:	4807      	ldr	r0, [pc, #28]	; (80075b8 <HAL_TIM_ConfigClockSource+0x460>)
 800759a:	f241 4185 	movw	r1, #5253	; 0x1485
 800759e:	f7fb f9ad 	bl	80028fc <assert_failed>
 80075a2:	68ee      	ldr	r6, [r5, #12]
 80075a4:	e786      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x35c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80075a6:	4804      	ldr	r0, [pc, #16]	; (80075b8 <HAL_TIM_ConfigClockSource+0x460>)
 80075a8:	f241 4165 	movw	r1, #5221	; 0x1465
 80075ac:	f7fb f9a6 	bl	80028fc <assert_failed>
 80075b0:	68ee      	ldr	r6, [r5, #12]
 80075b2:	e62a      	b.n	800720a <HAL_TIM_ConfigClockSource+0xb2>
 80075b4:	40010000 	.word	0x40010000
 80075b8:	0800c8dc 	.word	0x0800c8dc

080075bc <HAL_TIM_OC_DelayElapsedCallback>:
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop

080075c0 <HAL_TIM_IC_CaptureCallback>:
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop

080075c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop

080075c8 <HAL_TIM_TriggerCallback>:
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop

080075cc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075cc:	6803      	ldr	r3, [r0, #0]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	0791      	lsls	r1, r2, #30
{
 80075d2:	b510      	push	{r4, lr}
 80075d4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075d6:	d502      	bpl.n	80075de <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	0792      	lsls	r2, r2, #30
 80075dc:	d45f      	bmi.n	800769e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	0750      	lsls	r0, r2, #29
 80075e2:	d502      	bpl.n	80075ea <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	0751      	lsls	r1, r2, #29
 80075e8:	d446      	bmi.n	8007678 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075ea:	691a      	ldr	r2, [r3, #16]
 80075ec:	0712      	lsls	r2, r2, #28
 80075ee:	d502      	bpl.n	80075f6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	0710      	lsls	r0, r2, #28
 80075f4:	d42e      	bmi.n	8007654 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	06d2      	lsls	r2, r2, #27
 80075fa:	d502      	bpl.n	8007602 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	06d0      	lsls	r0, r2, #27
 8007600:	d418      	bmi.n	8007634 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007602:	691a      	ldr	r2, [r3, #16]
 8007604:	07d1      	lsls	r1, r2, #31
 8007606:	d502      	bpl.n	800760e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	07d2      	lsls	r2, r2, #31
 800760c:	d45d      	bmi.n	80076ca <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	0610      	lsls	r0, r2, #24
 8007612:	d502      	bpl.n	800761a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	0611      	lsls	r1, r2, #24
 8007618:	d45f      	bmi.n	80076da <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	0652      	lsls	r2, r2, #25
 800761e:	d502      	bpl.n	8007626 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	0650      	lsls	r0, r2, #25
 8007624:	d461      	bmi.n	80076ea <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	0691      	lsls	r1, r2, #26
 800762a:	d502      	bpl.n	8007632 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	0692      	lsls	r2, r2, #26
 8007630:	d443      	bmi.n	80076ba <HAL_TIM_IRQHandler+0xee>
}
 8007632:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007634:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007638:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800763a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800763c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007644:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007646:	d064      	beq.n	8007712 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007648:	f7ff ffba 	bl	80075c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764c:	2200      	movs	r2, #0
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	7722      	strb	r2, [r4, #28]
 8007652:	e7d6      	b.n	8007602 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007654:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007658:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800765a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800765c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007662:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007664:	d152      	bne.n	800770c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007666:	f7ff ffa9 	bl	80075bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766a:	4620      	mov	r0, r4
 800766c:	f7ff ffaa 	bl	80075c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007670:	2200      	movs	r2, #0
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	7722      	strb	r2, [r4, #28]
 8007676:	e7be      	b.n	80075f6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007678:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800767c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800767e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007680:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007688:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800768a:	d13c      	bne.n	8007706 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800768c:	f7ff ff96 	bl	80075bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007690:	4620      	mov	r0, r4
 8007692:	f7ff ff97 	bl	80075c4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007696:	2200      	movs	r2, #0
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	7722      	strb	r2, [r4, #28]
 800769c:	e7a5      	b.n	80075ea <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800769e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076a2:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076a4:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076a6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	079b      	lsls	r3, r3, #30
 80076ac:	d025      	beq.n	80076fa <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80076ae:	f7ff ff87 	bl	80075c0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b2:	2200      	movs	r2, #0
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	7722      	strb	r2, [r4, #28]
 80076b8:	e791      	b.n	80075de <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076ba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80076be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076c0:	611a      	str	r2, [r3, #16]
}
 80076c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80076c6:	f000 bac9 	b.w	8007c5c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076ca:	f06f 0201 	mvn.w	r2, #1
 80076ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80076d0:	4620      	mov	r0, r4
 80076d2:	f7fb fa83 	bl	8002bdc <HAL_TIM_PeriodElapsedCallback>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	e799      	b.n	800760e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fabd 	bl	8007c60 <HAL_TIMEx_BreakCallback>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	e797      	b.n	800761a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80076f0:	4620      	mov	r0, r4
 80076f2:	f7ff ff69 	bl	80075c8 <HAL_TIM_TriggerCallback>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	e795      	b.n	8007626 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fa:	f7ff ff5f 	bl	80075bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076fe:	4620      	mov	r0, r4
 8007700:	f7ff ff60 	bl	80075c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8007704:	e7d5      	b.n	80076b2 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007706:	f7ff ff5b 	bl	80075c0 <HAL_TIM_IC_CaptureCallback>
 800770a:	e7c4      	b.n	8007696 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800770c:	f7ff ff58 	bl	80075c0 <HAL_TIM_IC_CaptureCallback>
 8007710:	e7ae      	b.n	8007670 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007712:	f7ff ff53 	bl	80075bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007716:	4620      	mov	r0, r4
 8007718:	f7ff ff54 	bl	80075c4 <HAL_TIM_PWM_PulseFinishedCallback>
 800771c:	e796      	b.n	800764c <HAL_TIM_IRQHandler+0x80>
 800771e:	bf00      	nop

08007720 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007720:	6a03      	ldr	r3, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007722:	688a      	ldr	r2, [r1, #8]
{
 8007724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007728:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800772a:	f023 0310 	bic.w	r3, r3, #16
 800772e:	6223      	str	r3, [r4, #32]
  tmpccer = TIMx->CCER;
 8007730:	6a25      	ldr	r5, [r4, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007732:	4823      	ldr	r0, [pc, #140]	; (80077c0 <TIM_OC2_SetConfig+0xa0>)
  tmpcr2 =  TIMx->CR2;
 8007734:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 8007738:	69a6      	ldr	r6, [r4, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800773a:	680b      	ldr	r3, [r1, #0]
  tmpccer &= ~TIM_CCER_CC2P;
 800773c:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007740:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007744:	4284      	cmp	r4, r0
{
 8007746:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007748:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800774c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007750:	d007      	beq.n	8007762 <TIM_OC2_SetConfig+0x42>
  TIMx->CCR2 = OC_Config->Pulse;
 8007752:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8007754:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007758:	61a6      	str	r6, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800775a:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800775c:	6225      	str	r5, [r4, #32]
}
 800775e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007762:	68ca      	ldr	r2, [r1, #12]
 8007764:	f032 0308 	bics.w	r3, r2, #8
 8007768:	d115      	bne.n	8007796 <TIM_OC2_SetConfig+0x76>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800776a:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800776c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007770:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007774:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 8007778:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800777c:	d119      	bne.n	80077b2 <TIM_OC2_SetConfig+0x92>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8007784:	d10e      	bne.n	80077a4 <TIM_OC2_SetConfig+0x84>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007786:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007788:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
 800778c:	ea48 0882 	orr.w	r8, r8, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007790:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
 8007794:	e7dd      	b.n	8007752 <TIM_OC2_SetConfig+0x32>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007796:	480b      	ldr	r0, [pc, #44]	; (80077c4 <TIM_OC2_SetConfig+0xa4>)
 8007798:	f641 2153 	movw	r1, #6739	; 0x1a53
 800779c:	f7fb f8ae 	bl	80028fc <assert_failed>
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	e7e2      	b.n	800776a <TIM_OC2_SetConfig+0x4a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80077a4:	4807      	ldr	r0, [pc, #28]	; (80077c4 <TIM_OC2_SetConfig+0xa4>)
 80077a6:	f641 2162 	movw	r1, #6754	; 0x1a62
 80077aa:	f7fb f8a7 	bl	80028fc <assert_failed>
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	e7e9      	b.n	8007786 <TIM_OC2_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80077b2:	4804      	ldr	r0, [pc, #16]	; (80077c4 <TIM_OC2_SetConfig+0xa4>)
 80077b4:	f641 2161 	movw	r1, #6753	; 0x1a61
 80077b8:	f7fb f8a0 	bl	80028fc <assert_failed>
 80077bc:	e7df      	b.n	800777e <TIM_OC2_SetConfig+0x5e>
 80077be:	bf00      	nop
 80077c0:	40010000 	.word	0x40010000
 80077c4:	0800c8dc 	.word	0x0800c8dc

080077c8 <HAL_TIM_PWM_ConfigChannel>:
{
 80077c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_CHANNELS(Channel));
 80077cc:	f032 030c 	bics.w	r3, r2, #12
{
 80077d0:	4616      	mov	r6, r2
 80077d2:	4605      	mov	r5, r0
 80077d4:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 80077d6:	d002      	beq.n	80077de <HAL_TIM_PWM_ConfigChannel+0x16>
 80077d8:	2a3c      	cmp	r2, #60	; 0x3c
 80077da:	f040 80fb 	bne.w	80079d4 <HAL_TIM_PWM_ConfigChannel+0x20c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	f023 0310 	bic.w	r3, r3, #16
 80077e4:	2b60      	cmp	r3, #96	; 0x60
 80077e6:	d004      	beq.n	80077f2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80077e8:	48a3      	ldr	r0, [pc, #652]	; (8007a78 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80077ea:	f241 0118 	movw	r1, #4120	; 0x1018
 80077ee:	f7fb f885 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80077f2:	68a3      	ldr	r3, [r4, #8]
 80077f4:	f033 0302 	bics.w	r3, r3, #2
 80077f8:	d004      	beq.n	8007804 <HAL_TIM_PWM_ConfigChannel+0x3c>
 80077fa:	489f      	ldr	r0, [pc, #636]	; (8007a78 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80077fc:	f241 0119 	movw	r1, #4121	; 0x1019
 8007800:	f7fb f87c 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	f033 0304 	bics.w	r3, r3, #4
 800780a:	d004      	beq.n	8007816 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800780c:	489a      	ldr	r0, [pc, #616]	; (8007a78 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800780e:	f241 011a 	movw	r1, #4122	; 0x101a
 8007812:	f7fb f873 	bl	80028fc <assert_failed>
  __HAL_LOCK(htim);
 8007816:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800781a:	2b01      	cmp	r3, #1
 800781c:	f000 80e0 	beq.w	80079e0 <HAL_TIM_PWM_ConfigChannel+0x218>
 8007820:	2301      	movs	r3, #1
 8007822:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8007826:	2e0c      	cmp	r6, #12
 8007828:	d83f      	bhi.n	80078aa <HAL_TIM_PWM_ConfigChannel+0xe2>
 800782a:	e8df f006 	tbb	[pc, r6]
 800782e:	3e44      	.short	0x3e44
 8007830:	3e7a3e3e 	.word	0x3e7a3e3e
 8007834:	3ea93e3e 	.word	0x3ea93e3e
 8007838:	3e3e      	.short	0x3e3e
 800783a:	07          	.byte	0x07
 800783b:	00          	.byte	0x00
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8007a80 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 8007842:	454b      	cmp	r3, r9
 8007844:	f000 80cf 	beq.w	80079e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784c:	d007      	beq.n	800785e <HAL_TIM_PWM_ConfigChannel+0x96>
 800784e:	4a8b      	ldr	r2, [pc, #556]	; (8007a7c <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d004      	beq.n	800785e <HAL_TIM_PWM_ConfigChannel+0x96>
 8007854:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007858:	4293      	cmp	r3, r2
 800785a:	f040 80e1 	bne.w	8007a20 <HAL_TIM_PWM_ConfigChannel+0x258>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800785e:	6a1a      	ldr	r2, [r3, #32]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007860:	68a0      	ldr	r0, [r4, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007862:	6821      	ldr	r1, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007864:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007868:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800786a:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800786c:	f8d3 8004 	ldr.w	r8, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8007870:	69de      	ldr	r6, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8007872:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007876:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800787a:	ea47 3700 	orr.w	r7, r7, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800787e:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007882:	461a      	mov	r2, r3
  TIMx->CCR4 = OC_Config->Pulse;
 8007884:	6861      	ldr	r1, [r4, #4]
  TIMx->CR2 = tmpcr2;
 8007886:	f8c3 8004 	str.w	r8, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800788a:	61de      	str	r6, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800788c:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800788e:	621f      	str	r7, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007890:	69d1      	ldr	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007892:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007894:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007898:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800789a:	69d1      	ldr	r1, [r2, #28]
 800789c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80078a0:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078a2:	69d3      	ldr	r3, [r2, #28]
 80078a4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80078a8:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(htim);
 80078aa:	2300      	movs	r3, #0
 80078ac:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return HAL_OK;
 80078b0:	4618      	mov	r0, r3
}
 80078b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80078b6:	6828      	ldr	r0, [r5, #0]
 80078b8:	4b71      	ldr	r3, [pc, #452]	; (8007a80 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80078ba:	4298      	cmp	r0, r3
 80078bc:	d020      	beq.n	8007900 <HAL_TIM_PWM_ConfigChannel+0x138>
 80078be:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80078c2:	d01d      	beq.n	8007900 <HAL_TIM_PWM_ConfigChannel+0x138>
 80078c4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80078c8:	4298      	cmp	r0, r3
 80078ca:	d019      	beq.n	8007900 <HAL_TIM_PWM_ConfigChannel+0x138>
 80078cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078d0:	4298      	cmp	r0, r3
 80078d2:	d015      	beq.n	8007900 <HAL_TIM_PWM_ConfigChannel+0x138>
 80078d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078d8:	4298      	cmp	r0, r3
 80078da:	d011      	beq.n	8007900 <HAL_TIM_PWM_ConfigChannel+0x138>
 80078dc:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 80078e0:	4298      	cmp	r0, r3
 80078e2:	d00d      	beq.n	8007900 <HAL_TIM_PWM_ConfigChannel+0x138>
 80078e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078e8:	4298      	cmp	r0, r3
 80078ea:	d009      	beq.n	8007900 <HAL_TIM_PWM_ConfigChannel+0x138>
 80078ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f0:	4298      	cmp	r0, r3
 80078f2:	d005      	beq.n	8007900 <HAL_TIM_PWM_ConfigChannel+0x138>
 80078f4:	4860      	ldr	r0, [pc, #384]	; (8007a78 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80078f6:	f241 0124 	movw	r1, #4132	; 0x1024
 80078fa:	f7fa ffff 	bl	80028fc <assert_failed>
 80078fe:	6828      	ldr	r0, [r5, #0]
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007900:	4621      	mov	r1, r4
 8007902:	f7ff f879 	bl	80069f8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007906:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007908:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800790a:	6999      	ldr	r1, [r3, #24]
 800790c:	f041 0108 	orr.w	r1, r1, #8
 8007910:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007912:	6999      	ldr	r1, [r3, #24]
 8007914:	f021 0104 	bic.w	r1, r1, #4
 8007918:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800791a:	699a      	ldr	r2, [r3, #24]
 800791c:	4302      	orrs	r2, r0
 800791e:	619a      	str	r2, [r3, #24]
      break;
 8007920:	e7c3      	b.n	80078aa <HAL_TIM_PWM_ConfigChannel+0xe2>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007922:	6828      	ldr	r0, [r5, #0]
 8007924:	4b56      	ldr	r3, [pc, #344]	; (8007a80 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007926:	4298      	cmp	r0, r3
 8007928:	d018      	beq.n	800795c <HAL_TIM_PWM_ConfigChannel+0x194>
 800792a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800792e:	d015      	beq.n	800795c <HAL_TIM_PWM_ConfigChannel+0x194>
 8007930:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007934:	4298      	cmp	r0, r3
 8007936:	d011      	beq.n	800795c <HAL_TIM_PWM_ConfigChannel+0x194>
 8007938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800793c:	4298      	cmp	r0, r3
 800793e:	d00d      	beq.n	800795c <HAL_TIM_PWM_ConfigChannel+0x194>
 8007940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007944:	4298      	cmp	r0, r3
 8007946:	d009      	beq.n	800795c <HAL_TIM_PWM_ConfigChannel+0x194>
 8007948:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800794c:	4298      	cmp	r0, r3
 800794e:	d005      	beq.n	800795c <HAL_TIM_PWM_ConfigChannel+0x194>
 8007950:	4849      	ldr	r0, [pc, #292]	; (8007a78 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007952:	f241 0135 	movw	r1, #4149	; 0x1035
 8007956:	f7fa ffd1 	bl	80028fc <assert_failed>
 800795a:	6828      	ldr	r0, [r5, #0]
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800795c:	4621      	mov	r1, r4
 800795e:	f7ff fedf 	bl	8007720 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007962:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007964:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007966:	6999      	ldr	r1, [r3, #24]
 8007968:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800796c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800796e:	6999      	ldr	r1, [r3, #24]
 8007970:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007974:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007976:	699a      	ldr	r2, [r3, #24]
 8007978:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800797c:	619a      	str	r2, [r3, #24]
      break;
 800797e:	e794      	b.n	80078aa <HAL_TIM_PWM_ConfigChannel+0xe2>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007980:	6828      	ldr	r0, [r5, #0]
 8007982:	4b3f      	ldr	r3, [pc, #252]	; (8007a80 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007984:	4298      	cmp	r0, r3
 8007986:	d014      	beq.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8007988:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800798c:	d011      	beq.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 800798e:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007992:	4298      	cmp	r0, r3
 8007994:	d00d      	beq.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8007996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800799a:	4298      	cmp	r0, r3
 800799c:	d009      	beq.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 800799e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079a2:	4298      	cmp	r0, r3
 80079a4:	d005      	beq.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 80079a6:	4834      	ldr	r0, [pc, #208]	; (8007a78 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80079a8:	f241 0146 	movw	r1, #4166	; 0x1046
 80079ac:	f7fa ffa6 	bl	80028fc <assert_failed>
 80079b0:	6828      	ldr	r0, [r5, #0]
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079b2:	4621      	mov	r1, r4
 80079b4:	f7ff f872 	bl	8006a9c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079b8:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079ba:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079bc:	69d9      	ldr	r1, [r3, #28]
 80079be:	f041 0108 	orr.w	r1, r1, #8
 80079c2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079c4:	69d9      	ldr	r1, [r3, #28]
 80079c6:	f021 0104 	bic.w	r1, r1, #4
 80079ca:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079cc:	69da      	ldr	r2, [r3, #28]
 80079ce:	4302      	orrs	r2, r0
 80079d0:	61da      	str	r2, [r3, #28]
      break;
 80079d2:	e76a      	b.n	80078aa <HAL_TIM_PWM_ConfigChannel+0xe2>
  assert_param(IS_TIM_CHANNELS(Channel));
 80079d4:	4828      	ldr	r0, [pc, #160]	; (8007a78 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80079d6:	f241 0117 	movw	r1, #4119	; 0x1017
 80079da:	f7fa ff8f 	bl	80028fc <assert_failed>
 80079de:	e6fe      	b.n	80077de <HAL_TIM_PWM_ConfigChannel+0x16>
  __HAL_LOCK(htim);
 80079e0:	2002      	movs	r0, #2
}
 80079e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079e6:	6a1a      	ldr	r2, [r3, #32]
 80079e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079ec:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80079ee:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80079f0:	f8d3 8004 	ldr.w	r8, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80079f4:	69de      	ldr	r6, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079f6:	68a2      	ldr	r2, [r4, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079f8:	6823      	ldr	r3, [r4, #0]
  tmpccer &= ~TIM_CCER_CC4P;
 80079fa:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079fe:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a02:	ea47 3702 	orr.w	r7, r7, r2, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a06:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007a0a:	6961      	ldr	r1, [r4, #20]
 8007a0c:	f431 7380 	bics.w	r3, r1, #256	; 0x100
 8007a10:	d129      	bne.n	8007a66 <HAL_TIM_PWM_ConfigChannel+0x29e>
 8007a12:	4a1b      	ldr	r2, [pc, #108]	; (8007a80 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a14:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a16:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a1a:	ea48 1881 	orr.w	r8, r8, r1, lsl #6
 8007a1e:	e731      	b.n	8007884 <HAL_TIM_PWM_ConfigChannel+0xbc>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a24:	4293      	cmp	r3, r2
 8007a26:	f43f af1a 	beq.w	800785e <HAL_TIM_PWM_ConfigChannel+0x96>
 8007a2a:	4813      	ldr	r0, [pc, #76]	; (8007a78 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007a2c:	f241 0157 	movw	r1, #4183	; 0x1057
 8007a30:	f7fa ff64 	bl	80028fc <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a34:	682b      	ldr	r3, [r5, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a36:	68a0      	ldr	r0, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a38:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a3a:	6821      	ldr	r1, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a40:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8007a42:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007a44:	f8d3 8004 	ldr.w	r8, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8007a48:	69de      	ldr	r6, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8007a4a:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a4e:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a52:	454b      	cmp	r3, r9
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a54:	ea47 3700 	orr.w	r7, r7, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a58:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5c:	bf18      	it	ne
 8007a5e:	461a      	movne	r2, r3
 8007a60:	f47f af10 	bne.w	8007884 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8007a64:	e7d1      	b.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x242>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007a66:	f641 21ea 	movw	r1, #6890	; 0x1aea
 8007a6a:	4803      	ldr	r0, [pc, #12]	; (8007a78 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007a6c:	f7fa ff46 	bl	80028fc <assert_failed>
 8007a70:	6961      	ldr	r1, [r4, #20]
 8007a72:	682a      	ldr	r2, [r5, #0]
 8007a74:	e7ce      	b.n	8007a14 <HAL_TIM_PWM_ConfigChannel+0x24c>
 8007a76:	bf00      	nop
 8007a78:	0800c8dc 	.word	0x0800c8dc
 8007a7c:	40000400 	.word	0x40000400
 8007a80:	40010000 	.word	0x40010000

08007a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a84:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007a86:	4a32      	ldr	r2, [pc, #200]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007a88:	6803      	ldr	r3, [r0, #0]
 8007a8a:	4293      	cmp	r3, r2
{
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007a90:	d013      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8007a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a96:	d010      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8007a98:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00c      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8007aa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d008      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8007aa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d004      	beq.n	8007aba <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8007ab0:	4828      	ldr	r0, [pc, #160]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ab2:	f240 7177 	movw	r1, #1911	; 0x777
 8007ab6:	f7fa ff21 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8007ac0:	d006      	beq.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d004      	beq.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ac6:	4823      	ldr	r0, [pc, #140]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007ac8:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 8007acc:	f7fa ff16 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007ad0:	686b      	ldr	r3, [r5, #4]
 8007ad2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007ad6:	d12f      	bne.n	8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>

  /* Check input state */
  __HAL_LOCK(htim);
 8007ad8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d034      	beq.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0xc6>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae0:	6823      	ldr	r3, [r4, #0]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ae2:	481b      	ldr	r0, [pc, #108]	; (8007b50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae4:	2202      	movs	r2, #2
 8007ae6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007aea:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aec:	6829      	ldr	r1, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007af2:	430a      	orrs	r2, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af4:	4283      	cmp	r3, r0
  tmpsmcr = htim->Instance->SMCR;
 8007af6:	6899      	ldr	r1, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8007af8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007afa:	d011      	beq.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b00:	d00e      	beq.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007b02:	4a15      	ldr	r2, [pc, #84]	; (8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00b      	beq.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007b08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d007      	beq.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007b10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007b18:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d104      	bne.n	8007b2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b20:	686a      	ldr	r2, [r5, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b22:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b26:	4311      	orrs	r1, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b28:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b2a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8007b2c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007b2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007b32:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007b38:	4806      	ldr	r0, [pc, #24]	; (8007b54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b3a:	f240 7179 	movw	r1, #1913	; 0x779
 8007b3e:	f7fa fedd 	bl	80028fc <assert_failed>
  __HAL_LOCK(htim);
 8007b42:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d1ca      	bne.n	8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8007b4a:	2002      	movs	r0, #2
}
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	40010000 	.word	0x40010000
 8007b54:	0800c914 	.word	0x0800c914
 8007b58:	40000400 	.word	0x40000400

08007b5c <HAL_TIMEx_ConfigBreakDeadTime>:
{
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007b5c:	4b3d      	ldr	r3, [pc, #244]	; (8007c54 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007b5e:	6802      	ldr	r2, [r0, #0]
 8007b60:	429a      	cmp	r2, r3
{
 8007b62:	b570      	push	{r4, r5, r6, lr}
 8007b64:	4604      	mov	r4, r0
 8007b66:	460d      	mov	r5, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007b68:	d004      	beq.n	8007b74 <HAL_TIMEx_ConfigBreakDeadTime+0x18>
 8007b6a:	483b      	ldr	r0, [pc, #236]	; (8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8007b6c:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8007b70:	f7fa fec4 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8007b7a:	d159      	bne.n	8007c30 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007b7c:	686b      	ldr	r3, [r5, #4]
 8007b7e:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8007b82:	d14f      	bne.n	8007c24 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007b84:	68ab      	ldr	r3, [r5, #8]
 8007b86:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8007b8a:	d004      	beq.n	8007b96 <HAL_TIMEx_ConfigBreakDeadTime+0x3a>
 8007b8c:	4832      	ldr	r0, [pc, #200]	; (8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8007b8e:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8007b92:	f7fa feb3 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007b96:	68eb      	ldr	r3, [r5, #12]
 8007b98:	2bff      	cmp	r3, #255	; 0xff
 8007b9a:	d834      	bhi.n	8007c06 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007b9c:	692b      	ldr	r3, [r5, #16]
 8007b9e:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8007ba2:	d139      	bne.n	8007c18 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007ba4:	696b      	ldr	r3, [r5, #20]
 8007ba6:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8007baa:	d004      	beq.n	8007bb6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8007bac:	482a      	ldr	r0, [pc, #168]	; (8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8007bae:	f240 71ba 	movw	r1, #1978	; 0x7ba
 8007bb2:	f7fa fea3 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8007bb6:	69eb      	ldr	r3, [r5, #28]
 8007bb8:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8007bbc:	d13e      	bne.n	8007c3c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>

  /* Check input state */
  __HAL_LOCK(htim);
 8007bbe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d043      	beq.n	8007c4e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bc6:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bca:	e9d5 2100 	ldrd	r2, r1, [r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bd8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bda:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007be2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bee:	69e9      	ldr	r1, [r5, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bf0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bf2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bf8:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8007bfa:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007bfc:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007bfe:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 8007c02:	4608      	mov	r0, r1
}
 8007c04:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007c06:	4814      	ldr	r0, [pc, #80]	; (8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8007c08:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8007c0c:	f7fa fe76 	bl	80028fc <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007c10:	692b      	ldr	r3, [r5, #16]
 8007c12:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8007c16:	d0c5      	beq.n	8007ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007c18:	480f      	ldr	r0, [pc, #60]	; (8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8007c1a:	f240 71b9 	movw	r1, #1977	; 0x7b9
 8007c1e:	f7fa fe6d 	bl	80028fc <assert_failed>
 8007c22:	e7bf      	b.n	8007ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007c24:	480c      	ldr	r0, [pc, #48]	; (8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8007c26:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8007c2a:	f7fa fe67 	bl	80028fc <assert_failed>
 8007c2e:	e7a9      	b.n	8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0x28>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007c30:	4809      	ldr	r0, [pc, #36]	; (8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8007c32:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8007c36:	f7fa fe61 	bl	80028fc <assert_failed>
 8007c3a:	e79f      	b.n	8007b7c <HAL_TIMEx_ConfigBreakDeadTime+0x20>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8007c3c:	4806      	ldr	r0, [pc, #24]	; (8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8007c3e:	f240 71bb 	movw	r1, #1979	; 0x7bb
 8007c42:	f7fa fe5b 	bl	80028fc <assert_failed>
  __HAL_LOCK(htim);
 8007c46:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d1bb      	bne.n	8007bc6 <HAL_TIMEx_ConfigBreakDeadTime+0x6a>
 8007c4e:	2002      	movs	r0, #2
}
 8007c50:	bd70      	pop	{r4, r5, r6, pc}
 8007c52:	bf00      	nop
 8007c54:	40010000 	.word	0x40010000
 8007c58:	0800c914 	.word	0x0800c914

08007c5c <HAL_TIMEx_CommutCallback>:
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop

08007c60 <HAL_TIMEx_BreakCallback>:
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop

08007c64 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8007c64:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
  hci_disconnection_complete_event(rp0->Status,
 8007c66:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8007c6a:	78c2      	ldrb	r2, [r0, #3]
 8007c6c:	7800      	ldrb	r0, [r0, #0]
 8007c6e:	f7fa f887 	bl	8001d80 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
}
 8007c72:	2000      	movs	r0, #0
 8007c74:	bd08      	pop	{r3, pc}
 8007c76:	bf00      	nop

08007c78 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8007c78:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
  hci_encryption_change_event(rp0->Status,
 8007c7a:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8007c7e:	78c2      	ldrb	r2, [r0, #3]
 8007c80:	7800      	ldrb	r0, [r0, #0]
 8007c82:	f000 faf1 	bl	8008268 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
}
 8007c86:	2000      	movs	r0, #0
 8007c88:	bd08      	pop	{r3, pc}
 8007c8a:	bf00      	nop

08007c8c <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8007c8c:	b500      	push	{lr}
 8007c8e:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
  hci_read_remote_version_information_complete_event(rp0->Status,
 8007c90:	88c3      	ldrh	r3, [r0, #6]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	8883      	ldrh	r3, [r0, #4]
 8007c96:	78c2      	ldrb	r2, [r0, #3]
 8007c98:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8007c9c:	7800      	ldrb	r0, [r0, #0]
 8007c9e:	f000 fae5 	bl	800826c <hci_read_remote_version_information_complete_event>
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
}
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	b003      	add	sp, #12
 8007ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007caa:	bf00      	nop

08007cac <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8007cac:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
  hci_hardware_error_event(rp0->Hardware_Code);
 8007cae:	7800      	ldrb	r0, [r0, #0]
 8007cb0:	f000 fade 	bl	8008270 <hci_hardware_error_event>

  return status;
}
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	bd08      	pop	{r3, pc}

08007cb8 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8007cb8:	b530      	push	{r4, r5, lr}
 8007cba:	4602      	mov	r2, r0
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007cbc:	7800      	ldrb	r0, [r0, #0]
{
 8007cbe:	b0a1      	sub	sp, #132	; 0x84
 8007cc0:	4669      	mov	r1, sp
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007cc2:	b148      	cbz	r0, 8007cd8 <hci_number_of_completed_packets_event_process+0x20>
 8007cc4:	3201      	adds	r2, #1
 8007cc6:	eb01 0580 	add.w	r5, r1, r0, lsl #2
 8007cca:	460b      	mov	r3, r1
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8007ccc:	f852 4b04 	ldr.w	r4, [r2], #4
 8007cd0:	f843 4b04 	str.w	r4, [r3], #4
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007cd4:	429d      	cmp	r5, r3
 8007cd6:	d1f9      	bne.n	8007ccc <hci_number_of_completed_packets_event_process+0x14>
    size += 2;
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
    size += 2;
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8007cd8:	f000 facc 	bl	8008274 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
}
 8007cdc:	2000      	movs	r0, #0
 8007cde:	b021      	add	sp, #132	; 0x84
 8007ce0:	bd30      	pop	{r4, r5, pc}
 8007ce2:	bf00      	nop

08007ce4 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8007ce4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8007ce6:	7800      	ldrb	r0, [r0, #0]
 8007ce8:	f000 fac6 	bl	8008278 <hci_data_buffer_overflow_event>

  return status;
}
 8007cec:	2000      	movs	r0, #0
 8007cee:	bd08      	pop	{r3, pc}

08007cf0 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8007cf0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8007cf2:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8007cf6:	7800      	ldrb	r0, [r0, #0]
 8007cf8:	f000 fac0 	bl	800827c <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
}
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	bd08      	pop	{r3, pc}

08007d00 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8007d00:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
  aci_blue_initialized_event(rp0->Reason_Code);
 8007d02:	7800      	ldrb	r0, [r0, #0]
 8007d04:	f000 fb14 	bl	8008330 <aci_blue_initialized_event>

  return status;
}
 8007d08:	2000      	movs	r0, #0
 8007d0a:	bd08      	pop	{r3, pc}

08007d0c <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8007d0c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
  aci_blue_events_lost_event(rp0->Lost_Events);
 8007d0e:	f000 fb11 	bl	8008334 <aci_blue_events_lost_event>

  return status;
}
 8007d12:	2000      	movs	r0, #0
 8007d14:	bd08      	pop	{r3, pc}
 8007d16:	bf00      	nop

08007d18 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8007d18:	b570      	push	{r4, r5, r6, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
  aci_blue_crash_info_event(rp0->Crash_Type,
 8007d1a:	4603      	mov	r3, r0
{
 8007d1c:	b088      	sub	sp, #32
 8007d1e:	4601      	mov	r1, r0
  aci_blue_crash_info_event(rp0->Crash_Type,
 8007d20:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8007d24:	f813 0b26 	ldrb.w	r0, [r3], #38
 8007d28:	f8d1 2021 	ldr.w	r2, [r1, #33]	; 0x21
 8007d2c:	f8d1 601d 	ldr.w	r6, [r1, #29]
 8007d30:	9307      	str	r3, [sp, #28]
 8007d32:	f8d1 5019 	ldr.w	r5, [r1, #25]
 8007d36:	9406      	str	r4, [sp, #24]
 8007d38:	f8d1 4015 	ldr.w	r4, [r1, #21]
 8007d3c:	9205      	str	r2, [sp, #20]
 8007d3e:	f8d1 2011 	ldr.w	r2, [r1, #17]
 8007d42:	9604      	str	r6, [sp, #16]
 8007d44:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8007d48:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007d4c:	e9cd 3200 	strd	r3, r2, [sp]
 8007d50:	f8d1 3009 	ldr.w	r3, [r1, #9]
 8007d54:	f8d1 2005 	ldr.w	r2, [r1, #5]
 8007d58:	f8d1 1001 	ldr.w	r1, [r1, #1]
 8007d5c:	f000 faec 	bl	8008338 <aci_blue_crash_info_event>
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);

  return status;
}
 8007d60:	2000      	movs	r0, #0
 8007d62:	b008      	add	sp, #32
 8007d64:	bd70      	pop	{r4, r5, r6, pc}
 8007d66:	bf00      	nop

08007d68 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8007d68:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8007d6a:	f8d0 2002 	ldr.w	r2, [r0, #2]
 8007d6e:	7841      	ldrb	r1, [r0, #1]
 8007d70:	7800      	ldrb	r0, [r0, #0]
 8007d72:	f000 fae3 	bl	800833c <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
}
 8007d76:	2000      	movs	r0, #0
 8007d78:	bd08      	pop	{r3, pc}
 8007d7a:	bf00      	nop

08007d7c <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8007d7c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
  aci_hal_scan_req_report_event(rp0->RSSI,
 8007d7e:	1c82      	adds	r2, r0, #2
 8007d80:	7841      	ldrb	r1, [r0, #1]
 8007d82:	f990 0000 	ldrsb.w	r0, [r0]
 8007d86:	f000 fadb 	bl	8008340 <aci_hal_scan_req_report_event>
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);

  return status;
}
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	bd08      	pop	{r3, pc}
 8007d8e:	bf00      	nop

08007d90 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8007d90:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8007d92:	1c82      	adds	r2, r0, #2
 8007d94:	7841      	ldrb	r1, [r0, #1]
 8007d96:	7800      	ldrb	r0, [r0, #0]
 8007d98:	f000 fad4 	bl	8008344 <aci_hal_fw_error_event>
                         rp0->Data_Length,
                         rp0->Data);

  return status;
}
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	bd08      	pop	{r3, pc}

08007da0 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8007da0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_limited_discoverable_event();
 8007da2:	f000 fa7f 	bl	80082a4 <aci_gap_limited_discoverable_event>

  return status;
}
 8007da6:	2000      	movs	r0, #0
 8007da8:	bd08      	pop	{r3, pc}
 8007daa:	bf00      	nop

08007dac <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8007dac:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8007dae:	78c2      	ldrb	r2, [r0, #3]
 8007db0:	7881      	ldrb	r1, [r0, #2]
 8007db2:	8800      	ldrh	r0, [r0, #0]
 8007db4:	f000 fa78 	bl	80082a8 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
}
 8007db8:	2000      	movs	r0, #0
 8007dba:	bd08      	pop	{r3, pc}

08007dbc <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8007dbc:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8007dbe:	8800      	ldrh	r0, [r0, #0]
 8007dc0:	f000 fa74 	bl	80082ac <aci_gap_pass_key_req_event>

  return status;
}
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	bd08      	pop	{r3, pc}

08007dc8 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8007dc8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8007dca:	8800      	ldrh	r0, [r0, #0]
 8007dcc:	f000 fa70 	bl	80082b0 <aci_gap_authorization_req_event>

  return status;
}
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	bd08      	pop	{r3, pc}

08007dd4 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8007dd4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_slave_security_initiated_event();
 8007dd6:	f000 fa6d 	bl	80082b4 <aci_gap_slave_security_initiated_event>

  return status;
}
 8007dda:	2000      	movs	r0, #0
 8007ddc:	bd08      	pop	{r3, pc}
 8007dde:	bf00      	nop

08007de0 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8007de0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_bond_lost_event();
 8007de2:	f000 fa69 	bl	80082b8 <aci_gap_bond_lost_event>

  return status;
}
 8007de6:	2000      	movs	r0, #0
 8007de8:	bd08      	pop	{r3, pc}
 8007dea:	bf00      	nop

08007dec <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8007dec:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8007dee:	1cc3      	adds	r3, r0, #3
 8007df0:	7882      	ldrb	r2, [r0, #2]
 8007df2:	7841      	ldrb	r1, [r0, #1]
 8007df4:	7800      	ldrb	r0, [r0, #0]
 8007df6:	f000 fa61 	bl	80082bc <aci_gap_proc_complete_event>
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);

  return status;
}
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	bd08      	pop	{r3, pc}
 8007dfe:	bf00      	nop

08007e00 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8007e00:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8007e02:	8800      	ldrh	r0, [r0, #0]
 8007e04:	f000 fa5c 	bl	80082c0 <aci_gap_addr_not_resolved_event>

  return status;
}
 8007e08:	2000      	movs	r0, #0
 8007e0a:	bd08      	pop	{r3, pc}

08007e0c <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8007e0c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8007e0e:	f8d0 1002 	ldr.w	r1, [r0, #2]
 8007e12:	8800      	ldrh	r0, [r0, #0]
 8007e14:	f000 fa56 	bl	80082c4 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
}
 8007e18:	2000      	movs	r0, #0
 8007e1a:	bd08      	pop	{r3, pc}

08007e1c <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8007e1c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8007e1e:	7881      	ldrb	r1, [r0, #2]
 8007e20:	8800      	ldrh	r0, [r0, #0]
 8007e22:	f000 fa51 	bl	80082c8 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
}
 8007e26:	2000      	movs	r0, #0
 8007e28:	bd08      	pop	{r3, pc}
 8007e2a:	bf00      	nop

08007e2c <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8007e2c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8007e2e:	8841      	ldrh	r1, [r0, #2]
 8007e30:	8800      	ldrh	r0, [r0, #0]
 8007e32:	f000 fa75 	bl	8008320 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
}
 8007e36:	2000      	movs	r0, #0
 8007e38:	bd08      	pop	{r3, pc}
 8007e3a:	bf00      	nop

08007e3c <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8007e3c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8007e3e:	1cc2      	adds	r2, r0, #3
 8007e40:	7881      	ldrb	r1, [r0, #2]
 8007e42:	8800      	ldrh	r0, [r0, #0]
 8007e44:	f000 fa6e 	bl	8008324 <aci_l2cap_proc_timeout_event>
                               rp0->Data_Length,
                               rp0->Data);

  return status;
}
 8007e48:	2000      	movs	r0, #0
 8007e4a:	bd08      	pop	{r3, pc}

08007e4c <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8007e4c:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8007e4e:	f8b0 100b 	ldrh.w	r1, [r0, #11]
 8007e52:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 8007e56:	f8b0 3007 	ldrh.w	r3, [r0, #7]
{
 8007e5a:	b085      	sub	sp, #20
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8007e5c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 8007e66:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8007e6a:	7881      	ldrb	r1, [r0, #2]
 8007e6c:	8800      	ldrh	r0, [r0, #0]
 8007e6e:	f000 fa5b 	bl	8008328 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
}
 8007e72:	2000      	movs	r0, #0
 8007e74:	b005      	add	sp, #20
 8007e76:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e7a:	bf00      	nop

08007e7c <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8007e7c:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8007e7e:	4602      	mov	r2, r0
{
 8007e80:	b083      	sub	sp, #12
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8007e82:	7943      	ldrb	r3, [r0, #5]
{
 8007e84:	4601      	mov	r1, r0
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8007e86:	f832 0b06 	ldrh.w	r0, [r2], #6
 8007e8a:	9200      	str	r2, [sp, #0]
 8007e8c:	f8b1 2003 	ldrh.w	r2, [r1, #3]
 8007e90:	7889      	ldrb	r1, [r1, #2]
 8007e92:	f000 fa4b 	bl	800832c <aci_l2cap_command_reject_event>
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);

  return status;
}
 8007e96:	2000      	movs	r0, #0
 8007e98:	b003      	add	sp, #12
 8007e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e9e:	bf00      	nop

08007ea0 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8007ea0:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8007ea2:	4602      	mov	r2, r0
{
 8007ea4:	b083      	sub	sp, #12
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8007ea6:	88c3      	ldrh	r3, [r0, #6]
{
 8007ea8:	4601      	mov	r1, r0
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8007eaa:	f832 0b08 	ldrh.w	r0, [r2], #8
 8007eae:	9200      	str	r2, [sp, #0]
 8007eb0:	888a      	ldrh	r2, [r1, #4]
 8007eb2:	8849      	ldrh	r1, [r1, #2]
 8007eb4:	f7f9 ff9a 	bl	8001dec <aci_gatt_attribute_modified_event>
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);

  return status;
}
 8007eb8:	2000      	movs	r0, #0
 8007eba:	b003      	add	sp, #12
 8007ebc:	f85d fb04 	ldr.w	pc, [sp], #4

08007ec0 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8007ec0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8007ec2:	8800      	ldrh	r0, [r0, #0]
 8007ec4:	f000 fa02 	bl	80082cc <aci_gatt_proc_timeout_event>

  return status;
}
 8007ec8:	2000      	movs	r0, #0
 8007eca:	bd08      	pop	{r3, pc}

08007ecc <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8007ecc:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8007ece:	8841      	ldrh	r1, [r0, #2]
 8007ed0:	8800      	ldrh	r0, [r0, #0]
 8007ed2:	f000 f9fd 	bl	80082d0 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
}
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	bd08      	pop	{r3, pc}
 8007eda:	bf00      	nop

08007edc <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8007edc:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8007ede:	1d03      	adds	r3, r0, #4
 8007ee0:	78c2      	ldrb	r2, [r0, #3]
 8007ee2:	7881      	ldrb	r1, [r0, #2]
 8007ee4:	8800      	ldrh	r0, [r0, #0]
 8007ee6:	f000 f9f5 	bl	80082d4 <aci_att_find_info_resp_event>
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);

  return status;
}
 8007eea:	2000      	movs	r0, #0
 8007eec:	bd08      	pop	{r3, pc}
 8007eee:	bf00      	nop

08007ef0 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8007ef0:	b570      	push	{r4, r5, r6, lr}
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8007ef2:	7881      	ldrb	r1, [r0, #2]
{
 8007ef4:	b0a0      	sub	sp, #128	; 0x80
 8007ef6:	466a      	mov	r2, sp
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8007ef8:	b149      	cbz	r1, 8007f0e <aci_att_find_by_type_value_resp_event_process+0x1e>
 8007efa:	eb02 0681 	add.w	r6, r2, r1, lsl #2
 8007efe:	4613      	mov	r3, r2
 8007f00:	1cc4      	adds	r4, r0, #3
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8007f02:	f854 5b04 	ldr.w	r5, [r4], #4
 8007f06:	f843 5b04 	str.w	r5, [r3], #4
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8007f0a:	429e      	cmp	r6, r3
 8007f0c:	d1f9      	bne.n	8007f02 <aci_att_find_by_type_value_resp_event_process+0x12>
    size += 2;
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
    size += 2;
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8007f0e:	8800      	ldrh	r0, [r0, #0]
 8007f10:	f000 f9e2 	bl	80082d8 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
}
 8007f14:	2000      	movs	r0, #0
 8007f16:	b020      	add	sp, #128	; 0x80
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	bf00      	nop

08007f1c <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8007f1c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8007f1e:	1d03      	adds	r3, r0, #4
 8007f20:	78c2      	ldrb	r2, [r0, #3]
 8007f22:	7881      	ldrb	r1, [r0, #2]
 8007f24:	8800      	ldrh	r0, [r0, #0]
 8007f26:	f000 f9d9 	bl	80082dc <aci_att_read_by_type_resp_event>
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);

  return status;
}
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	bd08      	pop	{r3, pc}
 8007f2e:	bf00      	nop

08007f30 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8007f30:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
  aci_att_read_resp_event(rp0->Connection_Handle,
 8007f32:	1cc2      	adds	r2, r0, #3
 8007f34:	7881      	ldrb	r1, [r0, #2]
 8007f36:	8800      	ldrh	r0, [r0, #0]
 8007f38:	f000 f9d2 	bl	80082e0 <aci_att_read_resp_event>
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);

  return status;
}
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	bd08      	pop	{r3, pc}

08007f40 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8007f40:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8007f42:	1cc2      	adds	r2, r0, #3
 8007f44:	7881      	ldrb	r1, [r0, #2]
 8007f46:	8800      	ldrh	r0, [r0, #0]
 8007f48:	f000 f9cc 	bl	80082e4 <aci_att_read_blob_resp_event>
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);

  return status;
}
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	bd08      	pop	{r3, pc}

08007f50 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8007f50:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8007f52:	1cc2      	adds	r2, r0, #3
 8007f54:	7881      	ldrb	r1, [r0, #2]
 8007f56:	8800      	ldrh	r0, [r0, #0]
 8007f58:	f000 f9c6 	bl	80082e8 <aci_att_read_multiple_resp_event>
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);

  return status;
}
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	bd08      	pop	{r3, pc}

08007f60 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8007f60:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8007f62:	1d03      	adds	r3, r0, #4
 8007f64:	78c2      	ldrb	r2, [r0, #3]
 8007f66:	7881      	ldrb	r1, [r0, #2]
 8007f68:	8800      	ldrh	r0, [r0, #0]
 8007f6a:	f000 f9bf 	bl	80082ec <aci_att_read_by_group_type_resp_event>
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);

  return status;
}
 8007f6e:	2000      	movs	r0, #0
 8007f70:	bd08      	pop	{r3, pc}
 8007f72:	bf00      	nop

08007f74 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8007f74:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8007f76:	4602      	mov	r2, r0
{
 8007f78:	b083      	sub	sp, #12
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8007f7a:	7983      	ldrb	r3, [r0, #6]
{
 8007f7c:	4601      	mov	r1, r0
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8007f7e:	f832 0b07 	ldrh.w	r0, [r2], #7
 8007f82:	9200      	str	r2, [sp, #0]
 8007f84:	888a      	ldrh	r2, [r1, #4]
 8007f86:	8849      	ldrh	r1, [r1, #2]
 8007f88:	f000 f9b2 	bl	80082f0 <aci_att_prepare_write_resp_event>
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);

  return status;
}
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	b003      	add	sp, #12
 8007f90:	f85d fb04 	ldr.w	pc, [sp], #4

08007f94 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8007f94:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8007f96:	8800      	ldrh	r0, [r0, #0]
 8007f98:	f000 f9ac 	bl	80082f4 <aci_att_exec_write_resp_event>

  return status;
}
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	bd08      	pop	{r3, pc}

08007fa0 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8007fa0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
  aci_gatt_indication_event(rp0->Connection_Handle,
 8007fa2:	1d43      	adds	r3, r0, #5
 8007fa4:	7902      	ldrb	r2, [r0, #4]
 8007fa6:	8841      	ldrh	r1, [r0, #2]
 8007fa8:	8800      	ldrh	r0, [r0, #0]
 8007faa:	f000 f9a5 	bl	80082f8 <aci_gatt_indication_event>
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);

  return status;
}
 8007fae:	2000      	movs	r0, #0
 8007fb0:	bd08      	pop	{r3, pc}
 8007fb2:	bf00      	nop

08007fb4 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8007fb4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
  aci_gatt_notification_event(rp0->Connection_Handle,
 8007fb6:	1d43      	adds	r3, r0, #5
 8007fb8:	7902      	ldrb	r2, [r0, #4]
 8007fba:	8841      	ldrh	r1, [r0, #2]
 8007fbc:	8800      	ldrh	r0, [r0, #0]
 8007fbe:	f7f9 ff13 	bl	8001de8 <aci_gatt_notification_event>
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);

  return status;
}
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	bd08      	pop	{r3, pc}
 8007fc6:	bf00      	nop

08007fc8 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8007fc8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8007fca:	7881      	ldrb	r1, [r0, #2]
 8007fcc:	8800      	ldrh	r0, [r0, #0]
 8007fce:	f000 f995 	bl	80082fc <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
}
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	bd08      	pop	{r3, pc}
 8007fd6:	bf00      	nop

08007fd8 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8007fd8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8007fda:	7943      	ldrb	r3, [r0, #5]
 8007fdc:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8007fe0:	7881      	ldrb	r1, [r0, #2]
 8007fe2:	8800      	ldrh	r0, [r0, #0]
 8007fe4:	f000 f98c 	bl	8008300 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
}
 8007fe8:	2000      	movs	r0, #0
 8007fea:	bd08      	pop	{r3, pc}

08007fec <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8007fec:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8007fee:	1d43      	adds	r3, r0, #5
 8007ff0:	7902      	ldrb	r2, [r0, #4]
 8007ff2:	8841      	ldrh	r1, [r0, #2]
 8007ff4:	8800      	ldrh	r0, [r0, #0]
 8007ff6:	f000 f985 	bl	8008304 <aci_gatt_disc_read_char_by_uuid_resp_event>
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);

  return status;
}
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	bd08      	pop	{r3, pc}
 8007ffe:	bf00      	nop

08008000 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8008000:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8008002:	1d43      	adds	r3, r0, #5
 8008004:	7902      	ldrb	r2, [r0, #4]
 8008006:	8841      	ldrh	r1, [r0, #2]
 8008008:	8800      	ldrh	r0, [r0, #0]
 800800a:	f000 f97d 	bl	8008308 <aci_gatt_write_permit_req_event>
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);

  return status;
}
 800800e:	2000      	movs	r0, #0
 8008010:	bd08      	pop	{r3, pc}
 8008012:	bf00      	nop

08008014 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8008014:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8008016:	8882      	ldrh	r2, [r0, #4]
 8008018:	8841      	ldrh	r1, [r0, #2]
 800801a:	8800      	ldrh	r0, [r0, #0]
 800801c:	f000 f976 	bl	800830c <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
}
 8008020:	2000      	movs	r0, #0
 8008022:	bd08      	pop	{r3, pc}

08008024 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8008024:	b530      	push	{r4, r5, lr}
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8008026:	7885      	ldrb	r5, [r0, #2]
{
 8008028:	b0a1      	sub	sp, #132	; 0x84
 800802a:	4604      	mov	r4, r0
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800802c:	466b      	mov	r3, sp
 800802e:	b12d      	cbz	r5, 800803c <aci_gatt_read_multi_permit_req_event_process+0x18>
 8008030:	4618      	mov	r0, r3
 8008032:	006a      	lsls	r2, r5, #1
 8008034:	1ce1      	adds	r1, r4, #3
 8008036:	f003 f9a7 	bl	800b388 <memcpy>
 800803a:	4603      	mov	r3, r0
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
    size += 2;
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800803c:	8820      	ldrh	r0, [r4, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	4629      	mov	r1, r5
 8008042:	f000 f965 	bl	8008310 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
}
 8008046:	2000      	movs	r0, #0
 8008048:	b021      	add	sp, #132	; 0x84
 800804a:	bd30      	pop	{r4, r5, pc}

0800804c <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800804c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800804e:	8841      	ldrh	r1, [r0, #2]
 8008050:	8800      	ldrh	r0, [r0, #0]
 8008052:	f000 f95f 	bl	8008314 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
}
 8008056:	2000      	movs	r0, #0
 8008058:	bd08      	pop	{r3, pc}
 800805a:	bf00      	nop

0800805c <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800805c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800805e:	8800      	ldrh	r0, [r0, #0]
 8008060:	f000 f95a 	bl	8008318 <aci_gatt_server_confirmation_event>

  return status;
}
 8008064:	2000      	movs	r0, #0
 8008066:	bd08      	pop	{r3, pc}

08008068 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8008068:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800806a:	4602      	mov	r2, r0
{
 800806c:	b083      	sub	sp, #12
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800806e:	7983      	ldrb	r3, [r0, #6]
{
 8008070:	4601      	mov	r1, r0
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8008072:	f832 0b07 	ldrh.w	r0, [r2], #7
 8008076:	9200      	str	r2, [sp, #0]
 8008078:	888a      	ldrh	r2, [r1, #4]
 800807a:	8849      	ldrh	r1, [r1, #2]
 800807c:	f000 f94e 	bl	800831c <aci_gatt_prepare_write_permit_req_event>
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);

  return status;
}
 8008080:	2000      	movs	r0, #0
 8008082:	b003      	add	sp, #12
 8008084:	f85d fb04 	ldr.w	pc, [sp], #4

08008088 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8008088:	b530      	push	{r4, r5, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
  hci_le_connection_complete_event(rp0->Status,
 800808a:	7c45      	ldrb	r5, [r0, #17]
 800808c:	f8b0 400f 	ldrh.w	r4, [r0, #15]
 8008090:	f8b0 100d 	ldrh.w	r1, [r0, #13]
 8008094:	f8b0 200b 	ldrh.w	r2, [r0, #11]
{
 8008098:	b087      	sub	sp, #28
  hci_le_connection_complete_event(rp0->Status,
 800809a:	e9cd 4503 	strd	r4, r5, [sp, #12]
 800809e:	e9cd 2101 	strd	r2, r1, [sp, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 80080a2:	1d43      	adds	r3, r0, #5
  hci_le_connection_complete_event(rp0->Status,
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	7903      	ldrb	r3, [r0, #4]
 80080a8:	78c2      	ldrb	r2, [r0, #3]
 80080aa:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 80080ae:	7800      	ldrb	r0, [r0, #0]
 80080b0:	f7f9 fe28 	bl	8001d04 <hci_le_connection_complete_event>
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
}
 80080b4:	2000      	movs	r0, #0
 80080b6:	b007      	add	sp, #28
 80080b8:	bd30      	pop	{r4, r5, pc}
 80080ba:	bf00      	nop

080080bc <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 80080bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80080c0:	f890 e000 	ldrb.w	lr, [r0]
{
 80080c4:	b09f      	sub	sp, #124	; 0x7c
  for (i = 0; i < rp0->Num_Reports; i++) {
 80080c6:	f1be 0f00 	cmp.w	lr, #0
 80080ca:	d02c      	beq.n	8008126 <hci_le_advertising_report_event_process+0x6a>
 80080cc:	f100 010a 	add.w	r1, r0, #10
 80080d0:	f04f 0c0b 	mov.w	ip, #11
 80080d4:	fb1c 1c0e 	smlabb	ip, ip, lr, r1
 80080d8:	f10d 0302 	add.w	r3, sp, #2
  uint8_t size = 1;
 80080dc:	2201      	movs	r2, #1
    size += 1;
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
    size += 1;
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
    size += 6;
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 80080de:	f811 5c01 	ldrb.w	r5, [r1, #-1]
    size += 1;
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 80080e2:	f8c3 100a 	str.w	r1, [r3, #10]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80080e6:	460c      	mov	r4, r1
    size += rp0->Advertising_Report[i].Length_Data;
 80080e8:	f105 0609 	add.w	r6, r5, #9
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80080ec:	f854 7d07 	ldr.w	r7, [r4, #-7]!
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 80080f0:	719d      	strb	r5, [r3, #6]
    size += rp0->Advertising_Report[i].Length_Data;
 80080f2:	4432      	add	r2, r6
 80080f4:	b2d2      	uxtb	r2, r2
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 80080f6:	f811 6c09 	ldrb.w	r6, [r1, #-9]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80080fa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 80080fe:	f811 4c08 	ldrb.w	r4, [r1, #-8]
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8008102:	f810 9002 	ldrb.w	r9, [r0, r2]
 8008106:	f883 900e 	strb.w	r9, [r3, #14]
 800810a:	310b      	adds	r1, #11
    size += 1;
 800810c:	3201      	adds	r2, #1
  for (i = 0; i < rp0->Num_Reports; i++) {
 800810e:	4561      	cmp	r1, ip
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8008110:	f8a3 8004 	strh.w	r8, [r3, #4]
 8008114:	601f      	str	r7, [r3, #0]
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8008116:	f803 6c02 	strb.w	r6, [r3, #-2]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800811a:	f803 4c01 	strb.w	r4, [r3, #-1]
    size += 1;
 800811e:	b2d2      	uxtb	r2, r2
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008120:	f103 0314 	add.w	r3, r3, #20
 8008124:	d1db      	bne.n	80080de <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8008126:	4670      	mov	r0, lr
 8008128:	4669      	mov	r1, sp
 800812a:	f000 f8a9 	bl	8008280 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
}
 800812e:	2000      	movs	r0, #0
 8008130:	b01f      	add	sp, #124	; 0x7c
 8008132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008136:	bf00      	nop

08008138 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8008138:	b500      	push	{lr}
 800813a:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
  hci_le_connection_update_complete_event(rp0->Status,
 800813c:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 8008146:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800814a:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800814e:	7800      	ldrb	r0, [r0, #0]
 8008150:	f000 f898 	bl	8008284 <hci_le_connection_update_complete_event>
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
}
 8008154:	2000      	movs	r0, #0
 8008156:	b003      	add	sp, #12
 8008158:	f85d fb04 	ldr.w	pc, [sp], #4

0800815c <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800815c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800815e:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8008162:	1cc2      	adds	r2, r0, #3
 8008164:	7800      	ldrb	r0, [r0, #0]
 8008166:	f000 f88f 	bl	8008288 <hci_le_read_remote_used_features_complete_event>
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);

  return status;
}
 800816a:	2000      	movs	r0, #0
 800816c:	bd08      	pop	{r3, pc}
 800816e:	bf00      	nop

08008170 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8008170:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
                                     rp0->Random_Number,
 8008172:	4601      	mov	r1, r0
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8008174:	8942      	ldrh	r2, [r0, #10]
 8008176:	f831 0b02 	ldrh.w	r0, [r1], #2
 800817a:	f000 f887 	bl	800828c <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
}
 800817e:	2000      	movs	r0, #0
 8008180:	bd08      	pop	{r3, pc}
 8008182:	bf00      	nop

08008184 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 8008184:	b500      	push	{lr}
 8008186:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
  hci_le_data_length_change_event(rp0->Connection_Handle,
 8008188:	8903      	ldrh	r3, [r0, #8]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	88c3      	ldrh	r3, [r0, #6]
 800818e:	8882      	ldrh	r2, [r0, #4]
 8008190:	8841      	ldrh	r1, [r0, #2]
 8008192:	8800      	ldrh	r0, [r0, #0]
 8008194:	f000 f87c 	bl	8008290 <hci_le_data_length_change_event>
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
}
 8008198:	2000      	movs	r0, #0
 800819a:	b003      	add	sp, #12
 800819c:	f85d fb04 	ldr.w	pc, [sp], #4

080081a0 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 80081a0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
                                                   rp0->Local_P256_Public_Key);
 80081a2:	4601      	mov	r1, r0
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80081a4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80081a8:	f000 f874 	bl	8008294 <hci_le_read_local_p256_public_key_complete_event>

  return status;
}
 80081ac:	2000      	movs	r0, #0
 80081ae:	bd08      	pop	{r3, pc}

080081b0 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 80081b0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
  hci_le_generate_dhkey_complete_event(rp0->Status,
                                       rp0->DHKey);
 80081b2:	4601      	mov	r1, r0
  hci_le_generate_dhkey_complete_event(rp0->Status,
 80081b4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80081b8:	f000 f86e 	bl	8008298 <hci_le_generate_dhkey_complete_event>

  return status;
}
 80081bc:	2000      	movs	r0, #0
 80081be:	bd08      	pop	{r3, pc}

080081c0 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 80081c0:	b530      	push	{r4, r5, lr}
 80081c2:	b089      	sub	sp, #36	; 0x24
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
  hci_le_enhanced_connection_complete_event(rp0->Status,
 80081c4:	7f42      	ldrb	r2, [r0, #29]
 80081c6:	f8b0 5019 	ldrh.w	r5, [r0, #25]
 80081ca:	f8b0 4017 	ldrh.w	r4, [r0, #23]
 80081ce:	f8b0 301b 	ldrh.w	r3, [r0, #27]
 80081d2:	9206      	str	r2, [sp, #24]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
                                            rp0->Local_Resolvable_Private_Address,
                                            rp0->Peer_Resolvable_Private_Address,
 80081d4:	f100 0111 	add.w	r1, r0, #17
                                            rp0->Local_Resolvable_Private_Address,
 80081d8:	f100 020b 	add.w	r2, r0, #11
  hci_le_enhanced_connection_complete_event(rp0->Status,
 80081dc:	e9cd 4503 	strd	r4, r5, [sp, #12]
 80081e0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80081e4:	9305      	str	r3, [sp, #20]
                                            rp0->Peer_Address,
 80081e6:	1d43      	adds	r3, r0, #5
  hci_le_enhanced_connection_complete_event(rp0->Status,
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	7903      	ldrb	r3, [r0, #4]
 80081ec:	78c2      	ldrb	r2, [r0, #3]
 80081ee:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 80081f2:	7800      	ldrb	r0, [r0, #0]
 80081f4:	f000 f852 	bl	800829c <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
}
 80081f8:	2000      	movs	r0, #0
 80081fa:	b009      	add	sp, #36	; 0x24
 80081fc:	bd30      	pop	{r4, r5, pc}
 80081fe:	bf00      	nop

08008200 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 8008200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008204:	4603      	mov	r3, r0
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008206:	7800      	ldrb	r0, [r0, #0]
{
 8008208:	b0a1      	sub	sp, #132	; 0x84
  for (i = 0; i < rp0->Num_Reports; i++) {
 800820a:	b328      	cbz	r0, 8008258 <hci_le_direct_advertising_report_event_process+0x58>
 800820c:	3303      	adds	r3, #3
 800820e:	eb03 1900 	add.w	r9, r3, r0, lsl #4
 8008212:	f10d 0209 	add.w	r2, sp, #9
    size += 1;
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
    size += 6;
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
    size += 1;
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8008216:	4619      	mov	r1, r3
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 8008218:	f813 cc02 	ldrb.w	ip, [r3, #-2]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800821c:	f851 ef07 	ldr.w	lr, [r1, #7]!
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8008220:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8008224:	681e      	ldr	r6, [r3, #0]
 8008226:	889d      	ldrh	r5, [r3, #4]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8008228:	799c      	ldrb	r4, [r3, #6]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800822a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    size += 6;
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800822e:	7b59      	ldrb	r1, [r3, #13]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8008230:	f8a2 8004 	strh.w	r8, [r2, #4]
 8008234:	3310      	adds	r3, #16
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008236:	454b      	cmp	r3, r9
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8008238:	f8c2 e000 	str.w	lr, [r2]
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800823c:	f802 cc09 	strb.w	ip, [r2, #-9]
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8008240:	f802 7c08 	strb.w	r7, [r2, #-8]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8008244:	f842 6c07 	str.w	r6, [r2, #-7]
 8008248:	f822 5c03 	strh.w	r5, [r2, #-3]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800824c:	f802 4c01 	strb.w	r4, [r2, #-1]
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8008250:	7191      	strb	r1, [r2, #6]
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008252:	f102 0210 	add.w	r2, r2, #16
 8008256:	d1de      	bne.n	8008216 <hci_le_direct_advertising_report_event_process+0x16>
    size += 1;
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8008258:	4669      	mov	r1, sp
 800825a:	f000 f821 	bl	80082a0 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
}
 800825e:	2000      	movs	r0, #0
 8008260:	b021      	add	sp, #132	; 0x84
 8008262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008266:	bf00      	nop

08008268 <hci_encryption_change_event>:
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop

0800826c <hci_read_remote_version_information_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <hci_hardware_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop

08008274 <hci_number_of_completed_packets_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop

08008278 <hci_data_buffer_overflow_event>:
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop

0800827c <hci_encryption_key_refresh_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop

08008280 <hci_le_advertising_report_event>:
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop

08008284 <hci_le_connection_update_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop

08008288 <hci_le_read_remote_used_features_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop

0800828c <hci_le_long_term_key_request_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <hci_le_data_length_change_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop

08008294 <hci_le_read_local_p256_public_key_complete_event>:
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop

08008298 <hci_le_generate_dhkey_complete_event>:
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop

0800829c <hci_le_enhanced_connection_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <hci_le_direct_advertising_report_event>:
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop

080082a4 <aci_gap_limited_discoverable_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop

080082a8 <aci_gap_pairing_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop

080082ac <aci_gap_pass_key_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop

080082b0 <aci_gap_authorization_req_event>:
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop

080082b4 <aci_gap_slave_security_initiated_event>:
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop

080082b8 <aci_gap_bond_lost_event>:
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop

080082bc <aci_gap_proc_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop

080082c0 <aci_gap_addr_not_resolved_event>:
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop

080082c4 <aci_gap_numeric_comparison_value_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop

080082c8 <aci_gap_keypress_notification_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop

080082cc <aci_gatt_proc_timeout_event>:
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop

080082d0 <aci_att_exchange_mtu_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop

080082d4 <aci_att_find_info_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop

080082d8 <aci_att_find_by_type_value_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop

080082dc <aci_att_read_by_type_resp_event>:
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop

080082e0 <aci_att_read_resp_event>:
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop

080082e4 <aci_att_read_blob_resp_event>:
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop

080082e8 <aci_att_read_multiple_resp_event>:
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop

080082ec <aci_att_read_by_group_type_resp_event>:
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop

080082f0 <aci_att_prepare_write_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop

080082f4 <aci_att_exec_write_resp_event>:
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop

080082f8 <aci_gatt_indication_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop

080082fc <aci_gatt_proc_complete_event>:
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop

08008300 <aci_gatt_error_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop

08008304 <aci_gatt_disc_read_char_by_uuid_resp_event>:
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <aci_gatt_write_permit_req_event>:
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop

0800830c <aci_gatt_read_permit_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop

08008310 <aci_gatt_read_multi_permit_req_event>:
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop

08008314 <aci_gatt_tx_pool_available_event>:
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop

08008318 <aci_gatt_server_confirmation_event>:
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop

0800831c <aci_gatt_prepare_write_permit_req_event>:
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop

08008320 <aci_l2cap_connection_update_resp_event>:
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop

08008324 <aci_l2cap_proc_timeout_event>:
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop

08008328 <aci_l2cap_connection_update_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop

0800832c <aci_l2cap_command_reject_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop

08008330 <aci_blue_initialized_event>:
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop

08008334 <aci_blue_events_lost_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop

08008338 <aci_blue_crash_info_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop

0800833c <aci_hal_end_of_radio_activity_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop

08008340 <aci_hal_scan_req_report_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop

08008344 <aci_hal_fw_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop

08008348 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8008348:	b510      	push	{r4, lr}
 800834a:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 800834c:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x03;
  rq.ocf = 0x003;
  rq.rparam = &status;
 800834e:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 8008352:	2301      	movs	r3, #1
  rq.ogf = 0x03;
 8008354:	f04f 1403 	mov.w	r4, #196611	; 0x30003
  if (hci_send_req(&rq, FALSE) < 0)
 8008358:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800835a:	e9cd 1103 	strd	r1, r1, [sp, #12]
  rq.rlen = 1;
 800835e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tBleStatus status = 0;
 8008362:	f88d 1007 	strb.w	r1, [sp, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008366:	9105      	str	r1, [sp, #20]
  rq.ogf = 0x03;
 8008368:	9402      	str	r4, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 800836a:	f000 faff 	bl	800896c <hci_send_req>
 800836e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8008370:	bfac      	ite	ge
 8008372:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8008376:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8008378:	b008      	add	sp, #32
 800837a:	bd10      	pop	{r4, pc}

0800837c <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800837c:	b510      	push	{r4, lr}
 800837e:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8008380:	f10d 0403 	add.w	r4, sp, #3
 8008384:	2200      	movs	r2, #0
  uint8_t index_input = 0;
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 8008386:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 8008388:	7022      	strb	r2, [r4, #0]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800838a:	7018      	strb	r0, [r3, #0]
  index_input += 1;
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800838c:	b1d1      	cbz	r1, 80083c4 <hci_le_set_scan_response_data+0x48>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800838e:	680a      	ldr	r2, [r1, #0]
 8008390:	6848      	ldr	r0, [r1, #4]
 8008392:	f8cd 201d 	str.w	r2, [sp, #29]
 8008396:	f8cd 0021 	str.w	r0, [sp, #33]	; 0x21
 800839a:	688a      	ldr	r2, [r1, #8]
 800839c:	68c8      	ldr	r0, [r1, #12]
 800839e:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
 80083a2:	f8cd 0029 	str.w	r0, [sp, #41]	; 0x29
 80083a6:	690a      	ldr	r2, [r1, #16]
 80083a8:	6948      	ldr	r0, [r1, #20]
 80083aa:	f8cd 202d 	str.w	r2, [sp, #45]	; 0x2d
 80083ae:	f8cd 0031 	str.w	r0, [sp, #49]	; 0x31
 80083b2:	698a      	ldr	r2, [r1, #24]
 80083b4:	8b88      	ldrh	r0, [r1, #28]
 80083b6:	7f89      	ldrb	r1, [r1, #30]
 80083b8:	f8cd 2035 	str.w	r2, [sp, #53]	; 0x35
 80083bc:	f8ad 0039 	strh.w	r0, [sp, #57]	; 0x39
 80083c0:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
  }
  index_input += 31;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 80083c4:	4809      	ldr	r0, [pc, #36]	; (80083ec <hci_le_set_scan_response_data+0x70>)
  rq.ocf = 0x009;
  rq.cparam = cmd_buffer;
 80083c6:	9303      	str	r3, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80083c8:	2100      	movs	r1, #0
  rq.clen = index_input;
 80083ca:	2220      	movs	r2, #32
  rq.ogf = 0x08;
 80083cc:	9001      	str	r0, [sp, #4]
  rq.rparam = &status;
  rq.rlen = 1;
 80083ce:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80083d0:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 80083d2:	9405      	str	r4, [sp, #20]
  rq.clen = index_input;
 80083d4:	9204      	str	r2, [sp, #16]
  rq.rlen = 1;
 80083d6:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80083d8:	9102      	str	r1, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 80083da:	f000 fac7 	bl	800896c <hci_send_req>
 80083de:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 80083e0:	bfac      	ite	ge
 80083e2:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80083e4:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80083e6:	b048      	add	sp, #288	; 0x120
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	bf00      	nop
 80083ec:	00090008 	.word	0x00090008

080083f0 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 80083f0:	b510      	push	{r4, lr}
 80083f2:	b08a      	sub	sp, #40	; 0x28
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80083f4:	ab01      	add	r3, sp, #4
 80083f6:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 80083f8:	4a0f      	ldr	r2, [pc, #60]	; (8008438 <hci_le_rand+0x48>)
  rq.ocf = 0x018;
  rq.rparam = &resp;
 80083fa:	9308      	str	r3, [sp, #32]
{
 80083fc:	4604      	mov	r4, r0
  rq.rlen = sizeof(resp);
 80083fe:	2309      	movs	r3, #9
  if (hci_send_req(&rq, FALSE) < 0)
 8008400:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008402:	e9cd 1101 	strd	r1, r1, [sp, #4]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008406:	e9cd 1105 	strd	r1, r1, [sp, #20]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800840a:	f88d 100c 	strb.w	r1, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800840e:	9107      	str	r1, [sp, #28]
  rq.ogf = 0x08;
 8008410:	9204      	str	r2, [sp, #16]
  rq.rlen = sizeof(resp);
 8008412:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8008414:	f000 faaa 	bl	800896c <hci_send_req>
 8008418:	2800      	cmp	r0, #0
 800841a:	db0a      	blt.n	8008432 <hci_le_rand+0x42>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800841c:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8008420:	b928      	cbnz	r0, 800842e <hci_le_rand+0x3e>
    return resp.Status;
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 8008422:	f8dd 2005 	ldr.w	r2, [sp, #5]
 8008426:	f8dd 3009 	ldr.w	r3, [sp, #9]
 800842a:	6022      	str	r2, [r4, #0]
 800842c:	6063      	str	r3, [r4, #4]
  return BLE_STATUS_SUCCESS;
}
 800842e:	b00a      	add	sp, #40	; 0x28
 8008430:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 8008432:	20ff      	movs	r0, #255	; 0xff
}
 8008434:	b00a      	add	sp, #40	; 0x28
 8008436:	bd10      	pop	{r4, pc}
 8008438:	00180008 	.word	0x00180008

0800843c <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	b0cb      	sub	sp, #300	; 0x12c
 8008442:	4696      	mov	lr, r2
 8008444:	f89d 5154 	ldrb.w	r5, [sp, #340]	; 0x154
 8008448:	f89d 615c 	ldrb.w	r6, [sp, #348]	; 0x15c
 800844c:	f8bd 4168 	ldrh.w	r4, [sp, #360]	; 0x168
 8008450:	f89d c150 	ldrb.w	ip, [sp, #336]	; 0x150
 8008454:	9401      	str	r4, [sp, #4]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 8008456:	f04f 0800 	mov.w	r8, #0
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800845a:	ac09      	add	r4, sp, #36	; 0x24
 800845c:	f105 0a08 	add.w	sl, r5, #8
  uint8_t index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8008460:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8008464:	f8ad 1025 	strh.w	r1, [sp, #37]	; 0x25
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8008468:	462a      	mov	r2, r5
 800846a:	9956      	ldr	r1, [sp, #344]	; 0x158
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800846c:	f8ad e027 	strh.w	lr, [sp, #39]	; 0x27
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8008470:	a80b      	add	r0, sp, #44	; 0x2c
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8008472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008476:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
{
 800847a:	f8bd b164 	ldrh.w	fp, [sp, #356]	; 0x164
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800847e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008482:	f106 0709 	add.w	r7, r6, #9
  tBleStatus status = 0;
 8008486:	f88d 800b 	strb.w	r8, [sp, #11]
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800848a:	f002 ff7d 	bl	800b388 <memcpy>
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800848e:	eb04 000a 	add.w	r0, r4, sl
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008492:	442f      	add	r7, r5
    index_input += Local_Name_Length*sizeof(uint8_t);
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
    }
    index_input += 1;
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8008494:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8008496:	f804 600a 	strb.w	r6, [r4, sl]
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800849a:	4632      	mov	r2, r6
 800849c:	3001      	adds	r0, #1
 800849e:	f002 ff73 	bl	800b388 <memcpy>
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
    }
    index_input += 2;
 80084a2:	360d      	adds	r6, #13
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80084a4:	19e2      	adds	r2, r4, r7
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 80084a6:	f824 b007 	strh.w	fp, [r4, r7]
    index_input += 2;
 80084aa:	4435      	add	r5, r6
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80084ac:	9f01      	ldr	r7, [sp, #4]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 80084ae:	4e0c      	ldr	r6, [pc, #48]	; (80084e0 <aci_gap_set_discoverable+0xa4>)
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80084b0:	8057      	strh	r7, [r2, #2]
  tBleStatus status = 0;
 80084b2:	f10d 090b 	add.w	r9, sp, #11
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 80084b6:	2301      	movs	r3, #1
  rq.clen = index_input;
 80084b8:	b2ed      	uxtb	r5, r5
  if (hci_send_req(&rq, FALSE) < 0)
 80084ba:	4641      	mov	r1, r8
 80084bc:	a803      	add	r0, sp, #12
  rq.cparam = cmd_buffer;
 80084be:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.ogf = 0x3f;
 80084c2:	e9cd 6803 	strd	r6, r8, [sp, #12]
  rq.rparam = &status;
 80084c6:	f8cd 901c 	str.w	r9, [sp, #28]
  rq.rlen = 1;
 80084ca:	9308      	str	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 80084cc:	f000 fa4e 	bl	800896c <hci_send_req>
 80084d0:	4540      	cmp	r0, r8
    return BLE_STATUS_TIMEOUT;
  if (status) {
 80084d2:	bfac      	ite	ge
 80084d4:	f899 0000 	ldrbge.w	r0, [r9]
    return BLE_STATUS_TIMEOUT;
 80084d8:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80084da:	b04b      	add	sp, #300	; 0x12c
 80084dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e0:	0083003f 	.word	0x0083003f

080084e4 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	b0ca      	sub	sp, #296	; 0x128
 80084e8:	461e      	mov	r6, r3
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 80084ea:	4b18      	ldr	r3, [pc, #96]	; (800854c <aci_gap_init+0x68>)
 80084ec:	9303      	str	r3, [sp, #12]
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80084ee:	2303      	movs	r3, #3
  cp0->Role = htob(Role, 1);
 80084f0:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 80084f4:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
  rq.clen = index_input;
 80084f8:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80084fa:	2100      	movs	r1, #0
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 80084fc:	2307      	movs	r3, #7
  cp0->Role = htob(Role, 1);
 80084fe:	ad09      	add	r5, sp, #36	; 0x24
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008500:	ac01      	add	r4, sp, #4
  if (hci_send_req(&rq, FALSE) < 0)
 8008502:	a803      	add	r0, sp, #12
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008504:	9101      	str	r1, [sp, #4]
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8008506:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  rq.cparam = cmd_buffer;
 800850a:	9505      	str	r5, [sp, #20]
  rq.rlen = sizeof(resp);
 800850c:	9308      	str	r3, [sp, #32]
  rq.rparam = &resp;
 800850e:	9407      	str	r4, [sp, #28]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008510:	9104      	str	r1, [sp, #16]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008512:	f8cd 1007 	str.w	r1, [sp, #7]
  if (hci_send_req(&rq, FALSE) < 0)
 8008516:	f000 fa29 	bl	800896c <hci_send_req>
 800851a:	2800      	cmp	r0, #0
 800851c:	db12      	blt.n	8008544 <aci_gap_init+0x60>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 800851e:	7820      	ldrb	r0, [r4, #0]
 8008520:	b970      	cbnz	r0, 8008540 <aci_gap_init+0x5c>
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008522:	6821      	ldr	r1, [r4, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008524:	78e2      	ldrb	r2, [r4, #3]
 8008526:	7925      	ldrb	r5, [r4, #4]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008528:	6863      	ldr	r3, [r4, #4]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800852a:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800852e:	8031      	strh	r1, [r6, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008530:	994e      	ldr	r1, [sp, #312]	; 0x138
 8008532:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8008536:	800a      	strh	r2, [r1, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008538:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 800853a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800853e:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8008540:	b04a      	add	sp, #296	; 0x128
 8008542:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8008544:	20ff      	movs	r0, #255	; 0xff
}
 8008546:	b04a      	add	sp, #296	; 0x128
 8008548:	bd70      	pop	{r4, r5, r6, pc}
 800854a:	bf00      	nop
 800854c:	008a003f 	.word	0x008a003f

08008550 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8008550:	b510      	push	{r4, lr}
 8008552:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8008554:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x101;
  rq.rparam = &status;
 8008556:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800855a:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 800855c:	4c09      	ldr	r4, [pc, #36]	; (8008584 <aci_gatt_init+0x34>)
  tBleStatus status = 0;
 800855e:	f88d 1007 	strb.w	r1, [sp, #7]
  if (hci_send_req(&rq, FALSE) < 0)
 8008562:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008564:	e9cd 1103 	strd	r1, r1, [sp, #12]
  rq.rlen = 1;
 8008568:	e9cd 2306 	strd	r2, r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800856c:	9105      	str	r1, [sp, #20]
  rq.ogf = 0x3f;
 800856e:	9402      	str	r4, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8008570:	f000 f9fc 	bl	800896c <hci_send_req>
 8008574:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8008576:	bfac      	ite	ge
 8008578:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800857c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800857e:	b008      	add	sp, #32
 8008580:	bd10      	pop	{r4, pc}
 8008582:	bf00      	nop
 8008584:	0101003f 	.word	0x0101003f

08008588 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8008588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800858c:	2801      	cmp	r0, #1
{
 800858e:	b0c9      	sub	sp, #292	; 0x124
 8008590:	4616      	mov	r6, r2
 8008592:	461c      	mov	r4, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008594:	d031      	beq.n	80085fa <aci_gatt_add_service+0x72>
 8008596:	2802      	cmp	r0, #2
 8008598:	d003      	beq.n	80085a2 <aci_gatt_add_service+0x1a>
 800859a:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 800859c:	b049      	add	sp, #292	; 0x124
 800859e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80085a2:	466d      	mov	r5, sp
 80085a4:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80085a6:	f10d 081c 	add.w	r8, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80085aa:	802b      	strh	r3, [r5, #0]
 80085ac:	70ab      	strb	r3, [r5, #2]
      case 2: size = 16; break;
 80085ae:	f04f 0913 	mov.w	r9, #19
 80085b2:	2210      	movs	r2, #16
 80085b4:	f10d 072d 	add.w	r7, sp, #45	; 0x2d
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80085b8:	f888 0000 	strb.w	r0, [r8]
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 80085bc:	f10d 001d 	add.w	r0, sp, #29
 80085c0:	f002 fee2 	bl	800b388 <memcpy>
  rq.ogf = 0x3f;
 80085c4:	4a16      	ldr	r2, [pc, #88]	; (8008620 <aci_gatt_add_service+0x98>)
      cp1->Service_Type = htob(Service_Type, 1);
 80085c6:	703e      	strb	r6, [r7, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80085c8:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 80085ca:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 80085cc:	a801      	add	r0, sp, #4
  rq.clen = index_input;
 80085ce:	e9cd 8903 	strd	r8, r9, [sp, #12]
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 80085d2:	707c      	strb	r4, [r7, #1]
  rq.rparam = &resp;
 80085d4:	9505      	str	r5, [sp, #20]
  rq.ogf = 0x3f;
 80085d6:	9201      	str	r2, [sp, #4]
  rq.rlen = sizeof(resp);
 80085d8:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80085da:	9102      	str	r1, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 80085dc:	f000 f9c6 	bl	800896c <hci_send_req>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	db18      	blt.n	8008616 <aci_gatt_add_service+0x8e>
  if (resp.Status) {
 80085e4:	7828      	ldrb	r0, [r5, #0]
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d1d8      	bne.n	800859c <aci_gatt_add_service+0x14>
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80085ea:	682b      	ldr	r3, [r5, #0]
 80085ec:	9a50      	ldr	r2, [sp, #320]	; 0x140
 80085ee:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80085f2:	8013      	strh	r3, [r2, #0]
}
 80085f4:	b049      	add	sp, #292	; 0x124
 80085f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80085fa:	466d      	mov	r5, sp
 80085fc:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80085fe:	f10d 081c 	add.w	r8, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008602:	802b      	strh	r3, [r5, #0]
 8008604:	70ab      	strb	r3, [r5, #2]
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008606:	f04f 0905 	mov.w	r9, #5
 800860a:	2202      	movs	r2, #2
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800860c:	f10d 071f 	add.w	r7, sp, #31
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008610:	f888 0000 	strb.w	r0, [r8]
    switch (Service_UUID_Type) {
 8008614:	e7d2      	b.n	80085bc <aci_gatt_add_service+0x34>
    return BLE_STATUS_TIMEOUT;
 8008616:	20ff      	movs	r0, #255	; 0xff
}
 8008618:	b049      	add	sp, #292	; 0x124
 800861a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800861e:	bf00      	nop
 8008620:	0102003f 	.word	0x0102003f

08008624 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800862a:	2901      	cmp	r1, #1
{
 800862c:	461c      	mov	r4, r3
 800862e:	f89d 8150 	ldrb.w	r8, [sp, #336]	; 0x150
 8008632:	f89d 9154 	ldrb.w	r9, [sp, #340]	; 0x154
 8008636:	f89d a158 	ldrb.w	sl, [sp, #344]	; 0x158
 800863a:	f89d b15c 	ldrb.w	fp, [sp, #348]	; 0x15c
 800863e:	f89d 3160 	ldrb.w	r3, [sp, #352]	; 0x160
 8008642:	4694      	mov	ip, r2
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008644:	d041      	beq.n	80086ca <aci_gatt_add_char+0xa6>
 8008646:	2902      	cmp	r1, #2
 8008648:	d003      	beq.n	8008652 <aci_gatt_add_char+0x2e>
 800864a:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 800864c:	b04b      	add	sp, #300	; 0x12c
 800864e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008652:	ad02      	add	r5, sp, #8
 8008654:	2200      	movs	r2, #0
 8008656:	802a      	strh	r2, [r5, #0]
 8008658:	70aa      	strb	r2, [r5, #2]
      case 2: size = 16; break;
 800865a:	221a      	movs	r2, #26
  cp0->Service_Handle = htob(Service_Handle, 2);
 800865c:	af09      	add	r7, sp, #36	; 0x24
      case 2: size = 16; break;
 800865e:	9200      	str	r2, [sp, #0]
 8008660:	f10d 0637 	add.w	r6, sp, #55	; 0x37
 8008664:	2210      	movs	r2, #16
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008666:	8038      	strh	r0, [r7, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8008668:	70b9      	strb	r1, [r7, #2]
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800866a:	4661      	mov	r1, ip
 800866c:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	f002 fe89 	bl	800b388 <memcpy>
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008676:	2200      	movs	r2, #0
 8008678:	f368 0207 	bfi	r2, r8, #0, #8
      cp1->Is_Variable = htob(Is_Variable, 1);
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	71b3      	strb	r3, [r6, #6]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008680:	f369 220f 	bfi	r2, r9, #8, #8
  rq.clen = index_input;
 8008684:	9b00      	ldr	r3, [sp, #0]
  rq.ogf = 0x3f;
 8008686:	f8df c064 	ldr.w	ip, [pc, #100]	; 80086ec <aci_gatt_add_char+0xc8>
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800868a:	8034      	strh	r4, [r6, #0]
      cp1->Char_Properties = htob(Char_Properties, 1);
 800868c:	f36a 4217 	bfi	r2, sl, #16, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008690:	2100      	movs	r1, #0
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008692:	f36b 621f 	bfi	r2, fp, #24, #8
  rq.rlen = sizeof(resp);
 8008696:	2403      	movs	r4, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8008698:	a803      	add	r0, sp, #12
  rq.rparam = &resp;
 800869a:	e9cd 3506 	strd	r3, r5, [sp, #24]
      cp1->Char_Properties = htob(Char_Properties, 1);
 800869e:	f8c6 2002 	str.w	r2, [r6, #2]
  rq.cparam = cmd_buffer;
 80086a2:	9705      	str	r7, [sp, #20]
  rq.ogf = 0x3f;
 80086a4:	f8cd c00c 	str.w	ip, [sp, #12]
  rq.rlen = sizeof(resp);
 80086a8:	9408      	str	r4, [sp, #32]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80086aa:	9104      	str	r1, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 80086ac:	f000 f95e 	bl	800896c <hci_send_req>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	db17      	blt.n	80086e4 <aci_gatt_add_char+0xc0>
  if (resp.Status) {
 80086b4:	7828      	ldrb	r0, [r5, #0]
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d1c8      	bne.n	800864c <aci_gatt_add_char+0x28>
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80086ba:	682b      	ldr	r3, [r5, #0]
 80086bc:	9a59      	ldr	r2, [sp, #356]	; 0x164
 80086be:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80086c2:	8013      	strh	r3, [r2, #0]
}
 80086c4:	b04b      	add	sp, #300	; 0x12c
 80086c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80086ca:	ad02      	add	r5, sp, #8
 80086cc:	2200      	movs	r2, #0
 80086ce:	802a      	strh	r2, [r5, #0]
 80086d0:	70aa      	strb	r2, [r5, #2]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80086d2:	220c      	movs	r2, #12
  cp0->Service_Handle = htob(Service_Handle, 2);
 80086d4:	af09      	add	r7, sp, #36	; 0x24
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80086d6:	9200      	str	r2, [sp, #0]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80086d8:	f10d 0629 	add.w	r6, sp, #41	; 0x29
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80086dc:	2202      	movs	r2, #2
  cp0->Service_Handle = htob(Service_Handle, 2);
 80086de:	8038      	strh	r0, [r7, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80086e0:	70b9      	strb	r1, [r7, #2]
    switch (Char_UUID_Type) {
 80086e2:	e7c2      	b.n	800866a <aci_gatt_add_char+0x46>
    return BLE_STATUS_TIMEOUT;
 80086e4:	20ff      	movs	r0, #255	; 0xff
}
 80086e6:	b04b      	add	sp, #300	; 0x12c
 80086e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ec:	0104003f 	.word	0x0104003f

080086f0 <aci_gatt_add_char_desc>:
                                  uint8_t Access_Permissions,
                                  uint8_t GATT_Evt_Mask,
                                  uint8_t Enc_Key_Size,
                                  uint8_t Is_Variable,
                                  uint16_t *Char_Desc_Handle)
{
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	b0cd      	sub	sp, #308	; 0x134
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_desc_cp0 *cp0 = (aci_gatt_add_char_desc_cp0*)(cmd_buffer);
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 80086f6:	2a01      	cmp	r2, #1
{
 80086f8:	f89d 5164 	ldrb.w	r5, [sp, #356]	; 0x164
 80086fc:	9500      	str	r5, [sp, #0]
 80086fe:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8008702:	9501      	str	r5, [sp, #4]
 8008704:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8008708:	f89d 9158 	ldrb.w	r9, [sp, #344]	; 0x158
 800870c:	f89d 415c 	ldrb.w	r4, [sp, #348]	; 0x15c
 8008710:	f89d a170 	ldrb.w	sl, [sp, #368]	; 0x170
 8008714:	f89d b174 	ldrb.w	fp, [sp, #372]	; 0x174
 8008718:	9502      	str	r5, [sp, #8]
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 800871a:	d056      	beq.n	80087ca <aci_gatt_add_char_desc+0xda>
 800871c:	2a02      	cmp	r2, #2
 800871e:	d003      	beq.n	8008728 <aci_gatt_add_char_desc+0x38>
 8008720:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 8008722:	b04d      	add	sp, #308	; 0x134
 8008724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008728:	af04      	add	r7, sp, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 800872a:	ae0b      	add	r6, sp, #44	; 0x2c
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800872c:	f04f 0c00 	mov.w	ip, #0
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8008730:	f104 0517 	add.w	r5, r4, #23
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008734:	8030      	strh	r0, [r6, #0]
      case 2: size = 16; break;
 8008736:	2010      	movs	r0, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8008738:	4435      	add	r5, r6
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800873a:	f8a7 c000 	strh.w	ip, [r7]
 800873e:	f887 c002 	strb.w	ip, [r7, #2]
      case 2: size = 16; break;
 8008742:	9003      	str	r0, [sp, #12]
 8008744:	f10d 0841 	add.w	r8, sp, #65	; 0x41
  cp0->Char_Handle = htob(Char_Handle, 2);
 8008748:	8071      	strh	r1, [r6, #2]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 800874a:	7132      	strb	r2, [r6, #4]
    BLUENRG_memcpy((void *) &cp0->Char_Desc_Uuid, (const void *) Char_Desc_Uuid, size);
 800874c:	4619      	mov	r1, r3
 800874e:	4602      	mov	r2, r0
 8008750:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 8008754:	f002 fe18 	bl	800b388 <memcpy>
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8008758:	4622      	mov	r2, r4
 800875a:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Char_Desc_Value_Length = htob(Char_Desc_Value_Length, 1);
 800875c:	f888 4001 	strb.w	r4, [r8, #1]
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8008760:	f108 0002 	add.w	r0, r8, #2
      cp1->Char_Desc_Value_Max_Len = htob(Char_Desc_Value_Max_Len, 1);
 8008764:	f888 9000 	strb.w	r9, [r8]
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8008768:	f002 fe0e 	bl	800b388 <memcpy>
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 800876c:	9a00      	ldr	r2, [sp, #0]
  rq.ogf = 0x3f;
 800876e:	f8df c088 	ldr.w	ip, [pc, #136]	; 80087f8 <aci_gatt_add_char_desc+0x108>
      cp2->Is_Variable = htob(Is_Variable, 1);
 8008772:	f885 b004 	strb.w	fp, [r5, #4]
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8008776:	2300      	movs	r3, #0
 8008778:	f362 0307 	bfi	r3, r2, #0, #8
 800877c:	9a01      	ldr	r2, [sp, #4]
  rq.rparam = &resp;
 800877e:	9709      	str	r7, [sp, #36]	; 0x24
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8008780:	f362 230f 	bfi	r3, r2, #8, #8
    index_input += 1;
 8008784:	9a03      	ldr	r2, [sp, #12]
  rq.ogf = 0x3f;
 8008786:	f8cd c014 	str.w	ip, [sp, #20]
    index_input += 1;
 800878a:	340c      	adds	r4, #12
 800878c:	4422      	add	r2, r4
 800878e:	4614      	mov	r4, r2
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8008790:	9a02      	ldr	r2, [sp, #8]
 8008792:	f362 4317 	bfi	r3, r2, #16, #8
 8008796:	f36a 631f 	bfi	r3, sl, #24, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800879a:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 800879c:	2203      	movs	r2, #3
  rq.clen = index_input;
 800879e:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 80087a0:	a805      	add	r0, sp, #20
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 80087a2:	602b      	str	r3, [r5, #0]
  rq.cparam = cmd_buffer;
 80087a4:	e9cd 6407 	strd	r6, r4, [sp, #28]
  rq.rlen = sizeof(resp);
 80087a8:	920a      	str	r2, [sp, #40]	; 0x28
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80087aa:	9106      	str	r1, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 80087ac:	f000 f8de 	bl	800896c <hci_send_req>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	db1d      	blt.n	80087f0 <aci_gatt_add_char_desc+0x100>
  if (resp.Status) {
 80087b4:	7838      	ldrb	r0, [r7, #0]
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d1b3      	bne.n	8008722 <aci_gatt_add_char_desc+0x32>
  *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	9a5e      	ldr	r2, [sp, #376]	; 0x178
 80087be:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80087c2:	8013      	strh	r3, [r2, #0]
}
 80087c4:	b04d      	add	sp, #308	; 0x134
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80087ca:	af04      	add	r7, sp, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 80087cc:	ae0b      	add	r6, sp, #44	; 0x2c
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80087ce:	f04f 0c00 	mov.w	ip, #0
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 80087d2:	f104 0509 	add.w	r5, r4, #9
  cp0->Service_Handle = htob(Service_Handle, 2);
 80087d6:	8030      	strh	r0, [r6, #0]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 80087d8:	2002      	movs	r0, #2
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 80087da:	4435      	add	r5, r6
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80087dc:	f8a7 c000 	strh.w	ip, [r7]
 80087e0:	f887 c002 	strb.w	ip, [r7, #2]
      case 1: size = 2; break;
 80087e4:	9003      	str	r0, [sp, #12]
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 80087e6:	f10d 0833 	add.w	r8, sp, #51	; 0x33
  cp0->Char_Handle = htob(Char_Handle, 2);
 80087ea:	8071      	strh	r1, [r6, #2]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 80087ec:	7132      	strb	r2, [r6, #4]
 80087ee:	e7ad      	b.n	800874c <aci_gatt_add_char_desc+0x5c>
    return BLE_STATUS_TIMEOUT;
 80087f0:	20ff      	movs	r0, #255	; 0xff
}
 80087f2:	b04d      	add	sp, #308	; 0x134
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	0105003f 	.word	0x0105003f

080087fc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80087fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fe:	b0c9      	sub	sp, #292	; 0x124
 8008800:	461c      	mov	r4, r3
 8008802:	468c      	mov	ip, r1
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8008804:	2600      	movs	r6, #0
{
 8008806:	4613      	mov	r3, r2
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8008808:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Service_Handle = htob(Service_Handle, 2);
 800880a:	f8ad 001c 	strh.w	r0, [sp, #28]
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800880e:	4622      	mov	r2, r4
 8008810:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8008814:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  cp0->Char_Handle = htob(Char_Handle, 2);
 8008818:	f8ad c01e 	strh.w	ip, [sp, #30]
  cp0->Val_Offset = htob(Val_Offset, 1);
 800881c:	f88d 3020 	strb.w	r3, [sp, #32]
  tBleStatus status = 0;
 8008820:	f88d 6003 	strb.w	r6, [sp, #3]
    index_input += Char_Value_Length*sizeof(uint8_t);
 8008824:	3406      	adds	r4, #6
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8008826:	f002 fdaf 	bl	800b388 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 800882a:	4a0b      	ldr	r2, [pc, #44]	; (8008858 <aci_gatt_update_char_value+0x5c>)
  tBleStatus status = 0;
 800882c:	f10d 0703 	add.w	r7, sp, #3
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8008830:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008832:	ad07      	add	r5, sp, #28
  rq.clen = index_input;
 8008834:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 8008836:	4631      	mov	r1, r6
 8008838:	a801      	add	r0, sp, #4
  rq.ogf = 0x3f;
 800883a:	e9cd 2601 	strd	r2, r6, [sp, #4]
  rq.cparam = cmd_buffer;
 800883e:	9503      	str	r5, [sp, #12]
  rq.clen = index_input;
 8008840:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 8008842:	9705      	str	r7, [sp, #20]
  rq.rlen = 1;
 8008844:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8008846:	f000 f891 	bl	800896c <hci_send_req>
 800884a:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800884c:	bfac      	ite	ge
 800884e:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 8008850:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8008852:	b049      	add	sp, #292	; 0x124
 8008854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008856:	bf00      	nop
 8008858:	0106003f 	.word	0x0106003f

0800885c <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800885c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800885e:	460c      	mov	r4, r1
 8008860:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8008862:	2500      	movs	r5, #0
{
 8008864:	4603      	mov	r3, r0
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8008866:	4611      	mov	r1, r2
 8008868:	f10d 001e 	add.w	r0, sp, #30
 800886c:	4622      	mov	r2, r4
  cp0->Offset = htob(Offset, 1);
 800886e:	f88d 301c 	strb.w	r3, [sp, #28]
  cp0->Length = htob(Length, 1);
 8008872:	f88d 401d 	strb.w	r4, [sp, #29]
  tBleStatus status = 0;
 8008876:	f88d 5003 	strb.w	r5, [sp, #3]
    index_input += Length*sizeof(uint8_t);
 800887a:	3402      	adds	r4, #2
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800887c:	f002 fd84 	bl	800b388 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8008880:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <aci_hal_write_config_data+0x50>)
  tBleStatus status = 0;
 8008882:	f10d 0703 	add.w	r7, sp, #3
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8008886:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 8008888:	ae07      	add	r6, sp, #28
  rq.clen = index_input;
 800888a:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 800888c:	4629      	mov	r1, r5
 800888e:	a801      	add	r0, sp, #4
  rq.ogf = 0x3f;
 8008890:	e9cd 2501 	strd	r2, r5, [sp, #4]
  rq.clen = index_input;
 8008894:	9404      	str	r4, [sp, #16]
  rq.cparam = cmd_buffer;
 8008896:	9603      	str	r6, [sp, #12]
  rq.rparam = &status;
 8008898:	9705      	str	r7, [sp, #20]
  rq.rlen = 1;
 800889a:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800889c:	f000 f866 	bl	800896c <hci_send_req>
 80088a0:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) {
 80088a2:	bfac      	ite	ge
 80088a4:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 80088a6:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80088a8:	b049      	add	sp, #292	; 0x124
 80088aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ac:	000c003f 	.word	0x000c003f

080088b0 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 80088b0:	b510      	push	{r4, lr}
 80088b2:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80088b4:	2300      	movs	r3, #0
  uint8_t index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 80088b6:	aa07      	add	r2, sp, #28
 80088b8:	f88d 001c 	strb.w	r0, [sp, #28]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 80088bc:	f88d 101d 	strb.w	r1, [sp, #29]
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 80088c0:	480b      	ldr	r0, [pc, #44]	; (80088f0 <aci_hal_set_tx_power_level+0x40>)
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
 80088c2:	9203      	str	r2, [sp, #12]
  rq.clen = index_input;
 80088c4:	2102      	movs	r1, #2
  tBleStatus status = 0;
 80088c6:	f10d 0403 	add.w	r4, sp, #3
  rq.ogf = 0x3f;
 80088ca:	9001      	str	r0, [sp, #4]
  rq.rparam = &status;
  rq.rlen = 1;
 80088cc:	2201      	movs	r2, #1
  rq.clen = index_input;
 80088ce:	9104      	str	r1, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 80088d0:	a801      	add	r0, sp, #4
 80088d2:	4619      	mov	r1, r3
  rq.rlen = 1;
 80088d4:	9206      	str	r2, [sp, #24]
  rq.rparam = &status;
 80088d6:	9405      	str	r4, [sp, #20]
  tBleStatus status = 0;
 80088d8:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80088dc:	9302      	str	r3, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 80088de:	f000 f845 	bl	800896c <hci_send_req>
 80088e2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 80088e4:	bfac      	ite	ge
 80088e6:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80088e8:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80088ea:	b048      	add	sp, #288	; 0x120
 80088ec:	bd10      	pop	{r4, pc}
 80088ee:	bf00      	nop
 80088f0:	000f003f 	.word	0x000f003f

080088f4 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80088f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
  {
    hciContext.UserEvtRx = UserEvtRx;
 80088f8:	4f10      	ldr	r7, [pc, #64]	; (800893c <hci_init+0x48>)
  if(UserEvtRx != NULL)
 80088fa:	b100      	cbz	r0, 80088fe <hci_init+0xa>
    hciContext.UserEvtRx = UserEvtRx;
 80088fc:	61f8      	str	r0, [r7, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 80088fe:	4810      	ldr	r0, [pc, #64]	; (8008940 <hci_init+0x4c>)
 8008900:	4c10      	ldr	r4, [pc, #64]	; (8008944 <hci_init+0x50>)
  hci_tl_lowlevel_init();

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008902:	4606      	mov	r6, r0
  list_init_head(&hciReadPktPool);
 8008904:	f000 f974 	bl	8008bf0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008908:	480f      	ldr	r0, [pc, #60]	; (8008948 <hci_init+0x54>)
 800890a:	f000 f971 	bl	8008bf0 <list_init_head>
  hci_tl_lowlevel_init();
 800890e:	f7f8 fe2b 	bl	8001568 <hci_tl_lowlevel_init>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008912:	f504 65af 	add.w	r5, r4, #1400	; 0x578
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008916:	4621      	mov	r1, r4
 8008918:	4630      	mov	r0, r6
 800891a:	348c      	adds	r4, #140	; 0x8c
 800891c:	f000 f984 	bl	8008c28 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008920:	42a5      	cmp	r5, r4
 8008922:	d1f8      	bne.n	8008916 <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	b10b      	cbz	r3, 800892c <hci_init+0x38>
 8008928:	2000      	movs	r0, #0
 800892a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	b113      	cbz	r3, 8008936 <hci_init+0x42>
}
 8008930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008934:	4718      	bx	r3
}
 8008936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800893a:	bf00      	nop
 800893c:	20000228 	.word	0x20000228
 8008940:	20009c90 	.word	0x20009c90
 8008944:	20000248 	.word	0x20000248
 8008948:	20009c98 	.word	0x20009c98

0800894c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800894c:	4b06      	ldr	r3, [pc, #24]	; (8008968 <hci_register_io_bus+0x1c>)
  hciContext.io.Receive = fops->Receive;  
  hciContext.io.Send    = fops->Send;
  hciContext.io.GetTick = fops->GetTick;
 800894e:	6982      	ldr	r2, [r0, #24]
{
 8008950:	b430      	push	{r4, r5}
  hciContext.io.Init    = fops->Init; 
 8008952:	6805      	ldr	r5, [r0, #0]
  hciContext.io.GetTick = fops->GetTick;
 8008954:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8008956:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 800895a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800895e:	6902      	ldr	r2, [r0, #16]
 8008960:	611a      	str	r2, [r3, #16]
  hciContext.io.Init    = fops->Init; 
 8008962:	601d      	str	r5, [r3, #0]
}
 8008964:	bc30      	pop	{r4, r5}
 8008966:	4770      	bx	lr
 8008968:	20000228 	.word	0x20000228

0800896c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800896c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008970:	4606      	mov	r6, r0
 8008972:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8008974:	2300      	movs	r3, #0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008976:	a802      	add	r0, sp, #8
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008978:	8877      	ldrh	r7, [r6, #2]
 800897a:	f8b6 9000 	ldrh.w	r9, [r6]
  tHciDataPacket * hciReadPacket = NULL;
 800897e:	9301      	str	r3, [sp, #4]
{
 8008980:	4688      	mov	r8, r1
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008982:	4c6a      	ldr	r4, [pc, #424]	; (8008b2c <hci_send_req+0x1c0>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008984:	4d6a      	ldr	r5, [pc, #424]	; (8008b30 <hci_send_req+0x1c4>)
  list_init_head(&hciTempQueue);
 8008986:	f000 f933 	bl	8008bf0 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800898a:	e005      	b.n	8008998 <hci_send_req+0x2c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800898c:	f000 f958 	bl	8008c40 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008990:	9904      	ldr	r1, [sp, #16]
 8008992:	4620      	mov	r0, r4
 8008994:	f000 f948 	bl	8008c28 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008998:	4620      	mov	r0, r4
 800899a:	f000 f985 	bl	8008ca8 <list_get_size>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b04      	cmp	r3, #4
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80089a2:	a904      	add	r1, sp, #16
 80089a4:	4628      	mov	r0, r5
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80089a6:	ddf1      	ble.n	800898c <hci_send_req+0x20>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80089a8:	8873      	ldrh	r3, [r6, #2]
 80089aa:	8832      	ldrh	r2, [r6, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80089ac:	7b34      	ldrb	r4, [r6, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80089ae:	68b1      	ldr	r1, [r6, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80089b0:	f88d 4013 	strb.w	r4, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80089b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089b8:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 80089bc:	2501      	movs	r5, #1
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80089be:	4622      	mov	r2, r4
 80089c0:	a805      	add	r0, sp, #20
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80089c2:	f8ad 3011 	strh.w	r3, [sp, #17]
  payload[0] = HCI_COMMAND_PKT;
 80089c6:	f88d 5010 	strb.w	r5, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80089ca:	f002 fcdd 	bl	800b388 <memcpy>
  if (hciContext.io.Send)
 80089ce:	4b59      	ldr	r3, [pc, #356]	; (8008b34 <hci_send_req+0x1c8>)
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	b113      	cbz	r3, 80089da <hci_send_req+0x6e>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80089d4:	1d21      	adds	r1, r4, #4
 80089d6:	a804      	add	r0, sp, #16
 80089d8:	4798      	blx	r3
  
  if (async)
 80089da:	f1b8 0f00 	cmp.w	r8, #0
 80089de:	f040 808f 	bne.w	8008b00 <hci_send_req+0x194>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80089e2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80089e6:	ea47 2789 	orr.w	r7, r7, r9, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80089ea:	4d51      	ldr	r5, [pc, #324]	; (8008b30 <hci_send_req+0x1c4>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80089ec:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8008b2c <hci_send_req+0x1c0>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80089f0:	b2bf      	uxth	r7, r7
    uint32_t tickstart = HAL_GetTick();
 80089f2:	f7fa fb75 	bl	80030e0 <HAL_GetTick>
 80089f6:	4604      	mov	r4, r0
 80089f8:	e002      	b.n	8008a00 <hci_send_req+0x94>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 80089fa:	f000 f8fd 	bl	8008bf8 <list_is_empty>
 80089fe:	b1f0      	cbz	r0, 8008a3e <hci_send_req+0xd2>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008a00:	f7fa fb6e 	bl	80030e0 <HAL_GetTick>
 8008a04:	1b03      	subs	r3, r0, r4
 8008a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008a0a:	4628      	mov	r0, r5
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008a0c:	d9f5      	bls.n	80089fa <hci_send_req+0x8e>
 8008a0e:	9901      	ldr	r1, [sp, #4]
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8008a10:	2900      	cmp	r1, #0
 8008a12:	d142      	bne.n	8008a9a <hci_send_req+0x12e>
    list_insert_head(dest_list, tmp_node);
 8008a14:	4c46      	ldr	r4, [pc, #280]	; (8008b30 <hci_send_req+0x1c4>)
 8008a16:	e005      	b.n	8008a24 <hci_send_req+0xb8>
    list_remove_tail(src_list, &tmp_node);
 8008a18:	f000 f92c 	bl	8008c74 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008a1c:	9904      	ldr	r1, [sp, #16]
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f000 f8f6 	bl	8008c10 <list_insert_head>
  while (!list_is_empty(src_list))
 8008a24:	a802      	add	r0, sp, #8
 8008a26:	f000 f8e7 	bl	8008bf8 <list_is_empty>
 8008a2a:	4603      	mov	r3, r0
    list_remove_tail(src_list, &tmp_node);
 8008a2c:	a904      	add	r1, sp, #16
 8008a2e:	a802      	add	r0, sp, #8
  while (!list_is_empty(src_list))
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0f1      	beq.n	8008a18 <hci_send_req+0xac>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return -1;
 8008a34:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 8008a38:	b025      	add	sp, #148	; 0x94
 8008a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008a3e:	a901      	add	r1, sp, #4
 8008a40:	4628      	mov	r0, r5
 8008a42:	f000 f8fd 	bl	8008c40 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008a46:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 8008a48:	7a0b      	ldrb	r3, [r1, #8]
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d112      	bne.n	8008a74 <hci_send_req+0x108>
      switch (event_pckt->evt) 
 8008a4e:	7a4b      	ldrb	r3, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008a50:	f891 4088 	ldrb.w	r4, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8008a54:	2b10      	cmp	r3, #16
 8008a56:	d020      	beq.n	8008a9a <hci_send_req+0x12e>
 8008a58:	d823      	bhi.n	8008aa2 <hci_send_req+0x136>
 8008a5a:	2b0e      	cmp	r3, #14
 8008a5c:	d01a      	beq.n	8008a94 <hci_send_req+0x128>
 8008a5e:	2b0f      	cmp	r3, #15
 8008a60:	d108      	bne.n	8008a74 <hci_send_req+0x108>
        if (cs->opcode != opcode)
 8008a62:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8008a66:	42bb      	cmp	r3, r7
 8008a68:	d117      	bne.n	8008a9a <hci_send_req+0x12e>
        if (r->event != EVT_CMD_STATUS) {
 8008a6a:	6873      	ldr	r3, [r6, #4]
 8008a6c:	2b0f      	cmp	r3, #15
 8008a6e:	d052      	beq.n	8008b16 <hci_send_req+0x1aa>
          if (cs->status) {
 8008a70:	7acb      	ldrb	r3, [r1, #11]
 8008a72:	b993      	cbnz	r3, 8008a9a <hci_send_req+0x12e>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8008a74:	4640      	mov	r0, r8
 8008a76:	f000 f8bf 	bl	8008bf8 <list_is_empty>
 8008a7a:	b120      	cbz	r0, 8008a86 <hci_send_req+0x11a>
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f000 f8bb 	bl	8008bf8 <list_is_empty>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d140      	bne.n	8008b08 <hci_send_req+0x19c>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8008a86:	9901      	ldr	r1, [sp, #4]
 8008a88:	a802      	add	r0, sp, #8
 8008a8a:	f000 f8cd 	bl	8008c28 <list_insert_tail>
      hciReadPacket=NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	e7ae      	b.n	80089f2 <hci_send_req+0x86>
        if (cc->opcode != opcode)
 8008a94:	898b      	ldrh	r3, [r1, #12]
 8008a96:	42bb      	cmp	r3, r7
 8008a98:	d014      	beq.n	8008ac4 <hci_send_req+0x158>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008a9a:	4824      	ldr	r0, [pc, #144]	; (8008b2c <hci_send_req+0x1c0>)
 8008a9c:	f000 f8b8 	bl	8008c10 <list_insert_head>
 8008aa0:	e7b8      	b.n	8008a14 <hci_send_req+0xa8>
      switch (event_pckt->evt) 
 8008aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8008aa4:	d1e6      	bne.n	8008a74 <hci_send_req+0x108>
        if (me->subevent != r->event)
 8008aa6:	7aca      	ldrb	r2, [r1, #11]
 8008aa8:	6873      	ldr	r3, [r6, #4]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d1e2      	bne.n	8008a74 <hci_send_req+0x108>
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008aae:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
        len -= 1;
 8008ab2:	1f22      	subs	r2, r4, #4
        r->rlen = MIN(len, r->rlen);
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	bf28      	it	cs
 8008ab8:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008aba:	310c      	adds	r1, #12
        r->rlen = MIN(len, r->rlen);
 8008abc:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008abe:	f002 fc63 	bl	800b388 <memcpy>
        goto done;
 8008ac2:	e009      	b.n	8008ad8 <hci_send_req+0x16c>
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008ac4:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
        len -= EVT_CMD_COMPLETE_SIZE;
 8008ac8:	1fa2      	subs	r2, r4, #6
        r->rlen = MIN(len, r->rlen);
 8008aca:	429a      	cmp	r2, r3
 8008acc:	bf28      	it	cs
 8008ace:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008ad0:	310e      	adds	r1, #14
        r->rlen = MIN(len, r->rlen);
 8008ad2:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008ad4:	f002 fc58 	bl	800b388 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8008ad8:	9901      	ldr	r1, [sp, #4]
 8008ada:	4814      	ldr	r0, [pc, #80]	; (8008b2c <hci_send_req+0x1c0>)
    list_insert_head(dest_list, tmp_node);
 8008adc:	4c14      	ldr	r4, [pc, #80]	; (8008b30 <hci_send_req+0x1c4>)
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8008ade:	f000 f897 	bl	8008c10 <list_insert_head>
static void move_list(tListNode * dest_list, tListNode * src_list)
 8008ae2:	e005      	b.n	8008af0 <hci_send_req+0x184>
    list_remove_tail(src_list, &tmp_node);
 8008ae4:	f000 f8c6 	bl	8008c74 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008ae8:	9904      	ldr	r1, [sp, #16]
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 f890 	bl	8008c10 <list_insert_head>
  while (!list_is_empty(src_list))
 8008af0:	a802      	add	r0, sp, #8
 8008af2:	f000 f881 	bl	8008bf8 <list_is_empty>
 8008af6:	4603      	mov	r3, r0
    list_remove_tail(src_list, &tmp_node);
 8008af8:	a904      	add	r1, sp, #16
 8008afa:	a802      	add	r0, sp, #8
  while (!list_is_empty(src_list))
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0f1      	beq.n	8008ae4 <hci_send_req+0x178>
    return 0;
 8008b00:	2000      	movs	r0, #0
}
 8008b02:	b025      	add	sp, #148	; 0x94
 8008b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008b08:	9901      	ldr	r1, [sp, #4]
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	f000 f88c 	bl	8008c28 <list_insert_tail>
      hciReadPacket=NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	e76d      	b.n	80089f2 <hci_send_req+0x86>
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008b16:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008b1a:	1ee2      	subs	r2, r4, #3
        r->rlen = MIN(len, r->rlen);
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	bf28      	it	cs
 8008b20:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008b22:	310b      	adds	r1, #11
        r->rlen = MIN(len, r->rlen);
 8008b24:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008b26:	f002 fc2f 	bl	800b388 <memcpy>
        goto done;
 8008b2a:	e7d5      	b.n	8008ad8 <hci_send_req+0x16c>
 8008b2c:	20009c90 	.word	0x20009c90
 8008b30:	20009c98 	.word	0x20009c98
 8008b34:	20000228 	.word	0x20000228

08008b38 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008b38:	b570      	push	{r4, r5, r6, lr}
 8008b3a:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 8008b3c:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008b3e:	4c0d      	ldr	r4, [pc, #52]	; (8008b74 <hci_user_evt_proc+0x3c>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
 8008b40:	4e0d      	ldr	r6, [pc, #52]	; (8008b78 <hci_user_evt_proc+0x40>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008b42:	4d0e      	ldr	r5, [pc, #56]	; (8008b7c <hci_user_evt_proc+0x44>)
  tHciDataPacket * hciReadPacket = NULL;
 8008b44:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008b46:	e00a      	b.n	8008b5e <hci_user_evt_proc+0x26>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008b48:	f000 f87a 	bl	8008c40 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8008b4c:	69f3      	ldr	r3, [r6, #28]
 8008b4e:	b113      	cbz	r3, 8008b56 <hci_user_evt_proc+0x1e>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8008b50:	9801      	ldr	r0, [sp, #4]
 8008b52:	3008      	adds	r0, #8
 8008b54:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8008b56:	9901      	ldr	r1, [sp, #4]
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f000 f865 	bl	8008c28 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 f84a 	bl	8008bf8 <list_is_empty>
 8008b64:	4603      	mov	r3, r0
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8008b66:	a901      	add	r1, sp, #4
 8008b68:	4620      	mov	r0, r4
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0ec      	beq.n	8008b48 <hci_user_evt_proc+0x10>
  }
}
 8008b6e:	b002      	add	sp, #8
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	bf00      	nop
 8008b74:	20009c98 	.word	0x20009c98
 8008b78:	20000228 	.word	0x20000228
 8008b7c:	20009c90 	.word	0x20009c90

08008b80 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8008b80:	b530      	push	{r4, r5, lr}
 8008b82:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 8008b84:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008b86:	4817      	ldr	r0, [pc, #92]	; (8008be4 <hci_notify_asynch_evt+0x64>)
  tHciDataPacket * hciReadPacket = NULL;
 8008b88:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8008b8a:	f000 f835 	bl	8008bf8 <list_is_empty>
 8008b8e:	b110      	cbz	r0, 8008b96 <hci_notify_asynch_evt+0x16>
      }
    }
  }
  else 
  {
    ret = 1;
 8008b90:	2001      	movs	r0, #1
  }
  return ret;
  
}
 8008b92:	b003      	add	sp, #12
 8008b94:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8008b96:	4605      	mov	r5, r0
 8008b98:	a901      	add	r1, sp, #4
 8008b9a:	4812      	ldr	r0, [pc, #72]	; (8008be4 <hci_notify_asynch_evt+0x64>)
 8008b9c:	f000 f850 	bl	8008c40 <list_remove_head>
    if (hciContext.io.Receive)
 8008ba0:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <hci_notify_asynch_evt+0x68>)
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	b1db      	cbz	r3, 8008bde <hci_notify_asynch_evt+0x5e>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8008ba6:	9801      	ldr	r0, [sp, #4]
 8008ba8:	2180      	movs	r1, #128	; 0x80
 8008baa:	3008      	adds	r0, #8
 8008bac:	4798      	blx	r3
      if (data_len > 0)
 8008bae:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
        hciReadPacket->data_len = data_len;
 8008bb2:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 8008bb4:	d00d      	beq.n	8008bd2 <hci_notify_asynch_evt+0x52>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008bb6:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 8008bb8:	f881 4088 	strb.w	r4, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d108      	bne.n	8008bd2 <hci_notify_asynch_evt+0x52>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008bc0:	7a8b      	ldrb	r3, [r1, #10]
 8008bc2:	3c03      	subs	r4, #3
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d104      	bne.n	8008bd2 <hci_notify_asynch_evt+0x52>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8008bc8:	4808      	ldr	r0, [pc, #32]	; (8008bec <hci_notify_asynch_evt+0x6c>)
 8008bca:	f000 f82d 	bl	8008c28 <list_insert_tail>
  int32_t ret = 0;
 8008bce:	4628      	mov	r0, r5
 8008bd0:	e7df      	b.n	8008b92 <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8008bd2:	4804      	ldr	r0, [pc, #16]	; (8008be4 <hci_notify_asynch_evt+0x64>)
 8008bd4:	f000 f81c 	bl	8008c10 <list_insert_head>
  int32_t ret = 0;
 8008bd8:	2000      	movs	r0, #0
}
 8008bda:	b003      	add	sp, #12
 8008bdc:	bd30      	pop	{r4, r5, pc}
  int32_t ret = 0;
 8008bde:	4618      	mov	r0, r3
  return ret;
 8008be0:	e7d7      	b.n	8008b92 <hci_notify_asynch_evt+0x12>
 8008be2:	bf00      	nop
 8008be4:	20009c90 	.word	0x20009c90
 8008be8:	20000228 	.word	0x20000228
 8008bec:	20009c98 	.word	0x20009c98

08008bf0 <list_init_head>:
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;	
 8008bf0:	e9c0 0000 	strd	r0, r0, [r0]
}
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop

08008bf8 <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bf8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008bfc:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8008bfe:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 8008c00:	1a18      	subs	r0, r3, r0
 8008c02:	fab0 f080 	clz	r0, r0
 8008c06:	0940      	lsrs	r0, r0, #5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c08:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop

08008c10 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c10:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008c14:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8008c16:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 8008c18:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 8008c1c:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8008c1e:	680a      	ldr	r2, [r1, #0]
 8008c20:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c22:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008c26:	4770      	bx	lr

08008c28 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c28:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008c2c:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 8008c2e:	6842      	ldr	r2, [r0, #4]
 8008c30:	e9c1 0200 	strd	r0, r2, [r1]
  listHead->prev = node;
 8008c34:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8008c36:	684a      	ldr	r2, [r1, #4]
 8008c38:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c3a:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008c3e:	4770      	bx	lr

08008c40 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8008c40:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c42:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008c46:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8008c48:	6803      	ldr	r3, [r0, #0]
 8008c4a:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c4c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008c50:	b672      	cpsid	i
  (node->prev)->next = node->next;
 8008c52:	e9d3 3200 	ldrd	r3, r2, [r3]
 8008c56:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 8008c58:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c5a:	f380 8810 	msr	PRIMASK, r0
  list_remove_node (listHead->next);
  (*node)->next = NULL;
 8008c5e:	680a      	ldr	r2, [r1, #0]
 8008c60:	2300      	movs	r3, #0
 8008c62:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8008c64:	680a      	ldr	r2, [r1, #0]
 8008c66:	6053      	str	r3, [r2, #4]
 8008c68:	f384 8810 	msr	PRIMASK, r4
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop

08008c74 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8008c74:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c76:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008c7a:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8008c7c:	6843      	ldr	r3, [r0, #4]
 8008c7e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c80:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008c84:	b672      	cpsid	i
  (node->prev)->next = node->next;
 8008c86:	e9d3 3200 	ldrd	r3, r2, [r3]
 8008c8a:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 8008c8c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c8e:	f380 8810 	msr	PRIMASK, r0
  list_remove_node (listHead->prev);
  (*node)->next = NULL;
 8008c92:	680a      	ldr	r2, [r1, #0]
 8008c94:	2300      	movs	r3, #0
 8008c96:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8008c98:	680a      	ldr	r2, [r1, #0]
 8008c9a:	6053      	str	r3, [r2, #4]
 8008c9c:	f384 8810 	msr	PRIMASK, r4
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8008ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop

08008ca8 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8008ca8:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008caa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008cae:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8008cb0:	6803      	ldr	r3, [r0, #0]
  while (temp != listHead)
 8008cb2:	429a      	cmp	r2, r3
  int size = 0;
 8008cb4:	f04f 0000 	mov.w	r0, #0
  while (temp != listHead)
 8008cb8:	d004      	beq.n	8008cc4 <list_get_size+0x1c>
  {
    size++;
    temp = temp->next;		
 8008cba:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 8008cbc:	429a      	cmp	r2, r3
    size++;
 8008cbe:	f100 0001 	add.w	r0, r0, #1
  while (temp != listHead)
 8008cc2:	d1fa      	bne.n	8008cba <list_get_size+0x12>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc4:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop

08008ccc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008ccc:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <SysTick_Handler+0x18>)
 8008cd0:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008cd2:	f001 fbef 	bl	800a4b4 <xTaskGetSchedulerState>
 8008cd6:	2801      	cmp	r0, #1
 8008cd8:	d100      	bne.n	8008cdc <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8008cda:	bd08      	pop	{r3, pc}
 8008cdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8008ce0:	f002 b910 	b.w	800af04 <xPortSysTickHandler>
 8008ce4:	e000e010 	.word	0xe000e010

08008ce8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ce8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cec:	b92b      	cbnz	r3, 8008cfa <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008cee:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <osKernelInitialize+0x20>)
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	b928      	cbnz	r0, 8008d00 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008cf8:	4770      	bx	lr
    stat = osErrorISR;
 8008cfa:	f06f 0005 	mvn.w	r0, #5
 8008cfe:	4770      	bx	lr
    } else {
      stat = osError;
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	20000a2c 	.word	0x20000a2c

08008d0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d12:	b974      	cbnz	r4, 8008d32 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008d14:	4b08      	ldr	r3, [pc, #32]	; (8008d38 <osKernelStart+0x2c>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	2a01      	cmp	r2, #1
 8008d1a:	d107      	bne.n	8008d2c <osKernelStart+0x20>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d1c:	4907      	ldr	r1, [pc, #28]	; (8008d3c <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d1e:	2202      	movs	r2, #2
 8008d20:	77cc      	strb	r4, [r1, #31]
 8008d22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d24:	f001 f8e2 	bl	8009eec <vTaskStartScheduler>
      stat = osOK;
 8008d28:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8008d2a:	bd10      	pop	{r4, pc}
      stat = osError;
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d30:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008d32:	f06f 0005 	mvn.w	r0, #5
}
 8008d36:	bd10      	pop	{r4, pc}
 8008d38:	20000a2c 	.word	0x20000a2c
 8008d3c:	e000ed00 	.word	0xe000ed00

08008d40 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008d40:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <vApplicationGetIdleTaskMemory+0x14>)
 8008d42:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008d44:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d46:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008d48:	4c03      	ldr	r4, [pc, #12]	; (8008d58 <vApplicationGetIdleTaskMemory+0x18>)
 8008d4a:	600c      	str	r4, [r1, #0]
}
 8008d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008d50:	6013      	str	r3, [r2, #0]
}
 8008d52:	4770      	bx	lr
 8008d54:	200009c0 	.word	0x200009c0
 8008d58:	200007c0 	.word	0x200007c0

08008d5c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <vApplicationGetTimerTaskMemory+0x18>)
 8008d5e:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008d60:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d62:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d66:	4c04      	ldr	r4, [pc, #16]	; (8008d78 <vApplicationGetTimerTaskMemory+0x1c>)
 8008d68:	600c      	str	r4, [r1, #0]
}
 8008d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d6e:	6013      	str	r3, [r2, #0]
}
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20001230 	.word	0x20001230
 8008d78:	20000a30 	.word	0x20000a30

08008d7c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d7c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d80:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d84:	2200      	movs	r2, #0
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d86:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d8a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d8c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d8e:	6043      	str	r3, [r0, #4]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop

08008d94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d94:	2300      	movs	r3, #0
 8008d96:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop

08008d9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d9c:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008d9e:	6802      	ldr	r2, [r0, #0]
{
 8008da0:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008da2:	689c      	ldr	r4, [r3, #8]
 8008da4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008da6:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8008da8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8008daa:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008dac:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008dae:	6099      	str	r1, [r3, #8]
}
 8008db0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8008db4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008db6:	6002      	str	r2, [r0, #0]
}
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop

08008dbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dbc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008dbe:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008dc0:	1c6b      	adds	r3, r5, #1
 8008dc2:	d010      	beq.n	8008de6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008dc4:	f100 0308 	add.w	r3, r0, #8
 8008dc8:	461c      	mov	r4, r3
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	42aa      	cmp	r2, r5
 8008dd0:	d9fa      	bls.n	8008dc8 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008dd2:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8008dd4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8008dd6:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008dd8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008dda:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ddc:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8008dde:	6108      	str	r0, [r1, #16]
}
 8008de0:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8008de2:	6002      	str	r2, [r0, #0]
}
 8008de4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008de6:	6904      	ldr	r4, [r0, #16]
 8008de8:	6863      	ldr	r3, [r4, #4]
 8008dea:	e7f2      	b.n	8008dd2 <vListInsert+0x16>

08008dec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008dec:	6903      	ldr	r3, [r0, #16]
{
 8008dee:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008df0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008df4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008df6:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8008df8:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008dfa:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008dfc:	bf08      	it	eq
 8008dfe:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8008e00:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8008e02:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8008e06:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8008e08:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8008e0a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008e0c:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8008e0e:	6818      	ldr	r0, [r3, #0]
}
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop

08008e14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e18:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e1c:	b920      	cbnz	r0, 8008e28 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e1e:	6825      	ldr	r5, [r4, #0]
 8008e20:	b35d      	cbz	r5, 8008e7a <prvCopyDataToQueue+0x66>
 8008e22:	3601      	adds	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e24:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8008e26:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008e28:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e2a:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 8008e2c:	b985      	cbnz	r5, 8008e50 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e2e:	6860      	ldr	r0, [r4, #4]
 8008e30:	f002 faaa 	bl	800b388 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e38:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e3a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e3c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e3e:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e40:	f106 0601 	add.w	r6, r6, #1
 8008e44:	bf24      	itt	cs
 8008e46:	6823      	ldrcs	r3, [r4, #0]
 8008e48:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8008e4a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e4c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e50:	68e0      	ldr	r0, [r4, #12]
 8008e52:	f002 fa99 	bl	800b388 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e56:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008e58:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e5a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e5c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e5e:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e60:	60e3      	str	r3, [r4, #12]
 8008e62:	f1c2 0200 	rsb	r2, r2, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e66:	d202      	bcs.n	8008e6e <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e68:	68a3      	ldr	r3, [r4, #8]
 8008e6a:	441a      	add	r2, r3
 8008e6c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008e6e:	2d02      	cmp	r5, #2
 8008e70:	d008      	beq.n	8008e84 <prvCopyDataToQueue+0x70>
 8008e72:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8008e74:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e76:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008e78:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e7a:	68a0      	ldr	r0, [r4, #8]
 8008e7c:	f001 fb2a 	bl	800a4d4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e80:	60a5      	str	r5, [r4, #8]
 8008e82:	e7ce      	b.n	8008e22 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e84:	2e01      	cmp	r6, #1
 8008e86:	bf38      	it	cc
 8008e88:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	e7ca      	b.n	8008e24 <prvCopyDataToQueue+0x10>
 8008e8e:	bf00      	nop

08008e90 <xQueueGenericCreateStatic>:
	{
 8008e90:	b530      	push	{r4, r5, lr}
 8008e92:	b083      	sub	sp, #12
 8008e94:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e98:	b940      	cbnz	r0, 8008eac <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	e7fe      	b.n	8008eaa <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8008eac:	461c      	mov	r4, r3
 8008eae:	b1e3      	cbz	r3, 8008eea <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008eb0:	b172      	cbz	r2, 8008ed0 <xQueueGenericCreateStatic+0x40>
 8008eb2:	b319      	cbz	r1, 8008efc <xQueueGenericCreateStatic+0x6c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008eb4:	2350      	movs	r3, #80	; 0x50
 8008eb6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008eb8:	9b01      	ldr	r3, [sp, #4]
 8008eba:	2b50      	cmp	r3, #80	; 0x50
 8008ebc:	d027      	beq.n	8008f0e <xQueueGenericCreateStatic+0x7e>
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	e7fe      	b.n	8008ece <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ed0:	2900      	cmp	r1, #0
 8008ed2:	d146      	bne.n	8008f62 <xQueueGenericCreateStatic+0xd2>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ed4:	2350      	movs	r3, #80	; 0x50
 8008ed6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ed8:	9b01      	ldr	r3, [sp, #4]
 8008eda:	2b50      	cmp	r3, #80	; 0x50
 8008edc:	d1ef      	bne.n	8008ebe <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ede:	2301      	movs	r3, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008ee0:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ee2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8008ee6:	4622      	mov	r2, r4
 8008ee8:	e015      	b.n	8008f16 <xQueueGenericCreateStatic+0x86>
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8008efa:	e7fe      	b.n	8008efa <xQueueGenericCreateStatic+0x6a>
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008f0c:	e7fe      	b.n	8008f0c <xQueueGenericCreateStatic+0x7c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f0e:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f10:	2301      	movs	r3, #1
 8008f12:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8008f16:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 8008f1a:	6022      	str	r2, [r4, #0]
	taskENTER_CRITICAL();
 8008f1c:	f001 ff8a 	bl	800ae34 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f20:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 8008f24:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f26:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f28:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f2c:	1acb      	subs	r3, r1, r3
 8008f2e:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f30:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f32:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8008f34:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f36:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f38:	e9c4 2302 	strd	r2, r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f3c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f40:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8008f44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f48:	f7ff ff18 	bl	8008d7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f50:	f7ff ff14 	bl	8008d7c <vListInitialise>
	taskEXIT_CRITICAL();
 8008f54:	f001 ff90 	bl	800ae78 <vPortExitCritical>
	}
 8008f58:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8008f5a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	}
 8008f5e:	b003      	add	sp, #12
 8008f60:	bd30      	pop	{r4, r5, pc}
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f72:	e7fe      	b.n	8008f72 <xQueueGenericCreateStatic+0xe2>

08008f74 <xQueueGenericSend>:
{
 8008f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f000 80ac 	beq.w	80090da <xQueueGenericSend+0x166>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f82:	4688      	mov	r8, r1
 8008f84:	461f      	mov	r7, r3
 8008f86:	4604      	mov	r4, r0
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	f000 8099 	beq.w	80090c0 <xQueueGenericSend+0x14c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f8e:	2f02      	cmp	r7, #2
 8008f90:	d10b      	bne.n	8008faa <xQueueGenericSend+0x36>
 8008f92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d008      	beq.n	8008faa <xQueueGenericSend+0x36>
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	e7fe      	b.n	8008fa8 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008faa:	f001 fa83 	bl	800a4b4 <xTaskGetSchedulerState>
 8008fae:	4682      	mov	sl, r0
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	f000 809b 	beq.w	80090ec <xQueueGenericSend+0x178>
 8008fb6:	f04f 0a00 	mov.w	sl, #0
					portYIELD_WITHIN_API();
 8008fba:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 800927c <xQueueGenericSend+0x308>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fbe:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8008fc2:	f001 ff37 	bl	800ae34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008fc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	f0c0 80f4 	bcc.w	80091b8 <xQueueGenericSend+0x244>
 8008fd0:	2f02      	cmp	r7, #2
 8008fd2:	f000 80f1 	beq.w	80091b8 <xQueueGenericSend+0x244>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fd6:	9d01      	ldr	r5, [sp, #4]
 8008fd8:	2d00      	cmp	r5, #0
 8008fda:	f000 814a 	beq.w	8009272 <xQueueGenericSend+0x2fe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fde:	ad02      	add	r5, sp, #8
				else if( xEntryTimeSet == pdFALSE )
 8008fe0:	f1ba 0f00 	cmp.w	sl, #0
 8008fe4:	f000 80e4 	beq.w	80091b0 <xQueueGenericSend+0x23c>
		taskEXIT_CRITICAL();
 8008fe8:	f001 ff46 	bl	800ae78 <vPortExitCritical>
		vTaskSuspendAll();
 8008fec:	f001 f81c 	bl	800a028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ff0:	f001 ff20 	bl	800ae34 <vPortEnterCritical>
 8008ff4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008ff8:	2bff      	cmp	r3, #255	; 0xff
 8008ffa:	bf04      	itt	eq
 8008ffc:	2300      	moveq	r3, #0
 8008ffe:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8009002:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009006:	2bff      	cmp	r3, #255	; 0xff
 8009008:	bf04      	itt	eq
 800900a:	2300      	moveq	r3, #0
 800900c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8009010:	f001 ff32 	bl	800ae78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009014:	4628      	mov	r0, r5
 8009016:	a901      	add	r1, sp, #4
 8009018:	f001 f9dc 	bl	800a3d4 <xTaskCheckForTimeOut>
 800901c:	2800      	cmp	r0, #0
 800901e:	f040 80e8 	bne.w	80091f2 <xQueueGenericSend+0x27e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009022:	f001 ff07 	bl	800ae34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009026:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800902a:	429a      	cmp	r2, r3
 800902c:	d06b      	beq.n	8009106 <xQueueGenericSend+0x192>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800902e:	f001 ff23 	bl	800ae78 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009032:	f001 feff 	bl	800ae34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009036:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800903a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800903c:	2d00      	cmp	r5, #0
 800903e:	dc05      	bgt.n	800904c <xQueueGenericSend+0xd8>
 8009040:	e012      	b.n	8009068 <xQueueGenericSend+0xf4>
			--cTxLock;
 8009042:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009044:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009048:	b25d      	sxtb	r5, r3
 800904a:	d00d      	beq.n	8009068 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800904c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800904e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009050:	b153      	cbz	r3, 8009068 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009052:	f001 f96b 	bl	800a32c <xTaskRemoveFromEventList>
 8009056:	2800      	cmp	r0, #0
 8009058:	d0f3      	beq.n	8009042 <xQueueGenericSend+0xce>
						vTaskMissedYield();
 800905a:	f001 fa0b 	bl	800a474 <vTaskMissedYield>
			--cTxLock;
 800905e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009060:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009064:	b25d      	sxtb	r5, r3
 8009066:	d1f1      	bne.n	800904c <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 8009068:	23ff      	movs	r3, #255	; 0xff
 800906a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800906e:	f001 ff03 	bl	800ae78 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009072:	f001 fedf 	bl	800ae34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009076:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800907a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800907c:	2d00      	cmp	r5, #0
 800907e:	dd15      	ble.n	80090ac <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009080:	f104 0a10 	add.w	sl, r4, #16
 8009084:	e004      	b.n	8009090 <xQueueGenericSend+0x11c>
				--cRxLock;
 8009086:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009088:	f013 0fff 	tst.w	r3, #255	; 0xff
 800908c:	b25d      	sxtb	r5, r3
 800908e:	d00d      	beq.n	80090ac <xQueueGenericSend+0x138>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009090:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009092:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009094:	b153      	cbz	r3, 80090ac <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009096:	f001 f949 	bl	800a32c <xTaskRemoveFromEventList>
 800909a:	2800      	cmp	r0, #0
 800909c:	d0f3      	beq.n	8009086 <xQueueGenericSend+0x112>
					vTaskMissedYield();
 800909e:	f001 f9e9 	bl	800a474 <vTaskMissedYield>
				--cRxLock;
 80090a2:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090a8:	b25d      	sxtb	r5, r3
 80090aa:	d1f1      	bne.n	8009090 <xQueueGenericSend+0x11c>
		pxQueue->cRxLock = queueUNLOCKED;
 80090ac:	23ff      	movs	r3, #255	; 0xff
 80090ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80090b2:	f001 fee1 	bl	800ae78 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80090b6:	f000 ffbf 	bl	800a038 <xTaskResumeAll>
 80090ba:	f04f 0a01 	mov.w	sl, #1
 80090be:	e780      	b.n	8008fc2 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f43f af63 	beq.w	8008f8e <xQueueGenericSend+0x1a>
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	e7fe      	b.n	80090d8 <xQueueGenericSend+0x164>
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80090ea:	e7fe      	b.n	80090ea <xQueueGenericSend+0x176>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f43f af63 	beq.w	8008fba <xQueueGenericSend+0x46>
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	e7fe      	b.n	8009104 <xQueueGenericSend+0x190>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009106:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800910a:	f001 feb5 	bl	800ae78 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800910e:	9901      	ldr	r1, [sp, #4]
 8009110:	4650      	mov	r0, sl
 8009112:	f001 f873 	bl	800a1fc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8009116:	f001 fe8d 	bl	800ae34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800911a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800911e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009120:	2d00      	cmp	r5, #0
 8009122:	dc05      	bgt.n	8009130 <xQueueGenericSend+0x1bc>
 8009124:	e012      	b.n	800914c <xQueueGenericSend+0x1d8>
			--cTxLock;
 8009126:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009128:	f013 0fff 	tst.w	r3, #255	; 0xff
 800912c:	b25d      	sxtb	r5, r3
 800912e:	d00d      	beq.n	800914c <xQueueGenericSend+0x1d8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009130:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009132:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009134:	b153      	cbz	r3, 800914c <xQueueGenericSend+0x1d8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009136:	f001 f8f9 	bl	800a32c <xTaskRemoveFromEventList>
 800913a:	2800      	cmp	r0, #0
 800913c:	d0f3      	beq.n	8009126 <xQueueGenericSend+0x1b2>
						vTaskMissedYield();
 800913e:	f001 f999 	bl	800a474 <vTaskMissedYield>
			--cTxLock;
 8009142:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009144:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009148:	b25d      	sxtb	r5, r3
 800914a:	d1f1      	bne.n	8009130 <xQueueGenericSend+0x1bc>
		pxQueue->cTxLock = queueUNLOCKED;
 800914c:	23ff      	movs	r3, #255	; 0xff
 800914e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009152:	f001 fe91 	bl	800ae78 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009156:	f001 fe6d 	bl	800ae34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800915a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800915e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009160:	2d00      	cmp	r5, #0
 8009162:	dc05      	bgt.n	8009170 <xQueueGenericSend+0x1fc>
 8009164:	e012      	b.n	800918c <xQueueGenericSend+0x218>
				--cRxLock;
 8009166:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009168:	f013 0fff 	tst.w	r3, #255	; 0xff
 800916c:	b25d      	sxtb	r5, r3
 800916e:	d00d      	beq.n	800918c <xQueueGenericSend+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009170:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009172:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009174:	b153      	cbz	r3, 800918c <xQueueGenericSend+0x218>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009176:	f001 f8d9 	bl	800a32c <xTaskRemoveFromEventList>
 800917a:	2800      	cmp	r0, #0
 800917c:	d0f3      	beq.n	8009166 <xQueueGenericSend+0x1f2>
					vTaskMissedYield();
 800917e:	f001 f979 	bl	800a474 <vTaskMissedYield>
				--cRxLock;
 8009182:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009184:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009188:	b25d      	sxtb	r5, r3
 800918a:	d1f1      	bne.n	8009170 <xQueueGenericSend+0x1fc>
		pxQueue->cRxLock = queueUNLOCKED;
 800918c:	23ff      	movs	r3, #255	; 0xff
 800918e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009192:	f001 fe71 	bl	800ae78 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8009196:	f000 ff4f 	bl	800a038 <xTaskResumeAll>
 800919a:	2800      	cmp	r0, #0
 800919c:	d18d      	bne.n	80090ba <xQueueGenericSend+0x146>
					portYIELD_WITHIN_API();
 800919e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091a2:	f8c9 3000 	str.w	r3, [r9]
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	e784      	b.n	80090ba <xQueueGenericSend+0x146>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091b0:	4628      	mov	r0, r5
 80091b2:	f001 f903 	bl	800a3bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091b6:	e717      	b.n	8008fe8 <xQueueGenericSend+0x74>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091b8:	463a      	mov	r2, r7
 80091ba:	4641      	mov	r1, r8
 80091bc:	4620      	mov	r0, r4
 80091be:	f7ff fe29 	bl	8008e14 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091c4:	b973      	cbnz	r3, 80091e4 <xQueueGenericSend+0x270>
					else if( xYieldRequired != pdFALSE )
 80091c6:	b138      	cbz	r0, 80091d8 <xQueueGenericSend+0x264>
						queueYIELD_IF_USING_PREEMPTION();
 80091c8:	4b2c      	ldr	r3, [pc, #176]	; (800927c <xQueueGenericSend+0x308>)
 80091ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80091d8:	f001 fe4e 	bl	800ae78 <vPortExitCritical>
				return pdPASS;
 80091dc:	2001      	movs	r0, #1
}
 80091de:	b004      	add	sp, #16
 80091e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80091e8:	f001 f8a0 	bl	800a32c <xTaskRemoveFromEventList>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d0f3      	beq.n	80091d8 <xQueueGenericSend+0x264>
 80091f0:	e7ea      	b.n	80091c8 <xQueueGenericSend+0x254>
	taskENTER_CRITICAL();
 80091f2:	f001 fe1f 	bl	800ae34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80091f6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80091fa:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	dd11      	ble.n	8009224 <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009200:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8009204:	e004      	b.n	8009210 <xQueueGenericSend+0x29c>
			--cTxLock;
 8009206:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009208:	f013 0fff 	tst.w	r3, #255	; 0xff
 800920c:	b25d      	sxtb	r5, r3
 800920e:	d009      	beq.n	8009224 <xQueueGenericSend+0x2b0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009210:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009212:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009214:	b133      	cbz	r3, 8009224 <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009216:	f001 f889 	bl	800a32c <xTaskRemoveFromEventList>
 800921a:	2800      	cmp	r0, #0
 800921c:	d0f3      	beq.n	8009206 <xQueueGenericSend+0x292>
						vTaskMissedYield();
 800921e:	f001 f929 	bl	800a474 <vTaskMissedYield>
 8009222:	e7f0      	b.n	8009206 <xQueueGenericSend+0x292>
		pxQueue->cTxLock = queueUNLOCKED;
 8009224:	23ff      	movs	r3, #255	; 0xff
 8009226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800922a:	f001 fe25 	bl	800ae78 <vPortExitCritical>
	taskENTER_CRITICAL();
 800922e:	f001 fe01 	bl	800ae34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009232:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009236:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009238:	2d00      	cmp	r5, #0
 800923a:	dd11      	ble.n	8009260 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800923c:	f104 0610 	add.w	r6, r4, #16
 8009240:	e004      	b.n	800924c <xQueueGenericSend+0x2d8>
				--cRxLock;
 8009242:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009244:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009248:	b25d      	sxtb	r5, r3
 800924a:	d009      	beq.n	8009260 <xQueueGenericSend+0x2ec>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800924c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800924e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009250:	b133      	cbz	r3, 8009260 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009252:	f001 f86b 	bl	800a32c <xTaskRemoveFromEventList>
 8009256:	2800      	cmp	r0, #0
 8009258:	d0f3      	beq.n	8009242 <xQueueGenericSend+0x2ce>
					vTaskMissedYield();
 800925a:	f001 f90b 	bl	800a474 <vTaskMissedYield>
 800925e:	e7f0      	b.n	8009242 <xQueueGenericSend+0x2ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8009260:	23ff      	movs	r3, #255	; 0xff
 8009262:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009266:	f001 fe07 	bl	800ae78 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800926a:	f000 fee5 	bl	800a038 <xTaskResumeAll>
			return errQUEUE_FULL;
 800926e:	2000      	movs	r0, #0
 8009270:	e7b5      	b.n	80091de <xQueueGenericSend+0x26a>
					taskEXIT_CRITICAL();
 8009272:	f001 fe01 	bl	800ae78 <vPortExitCritical>
					return errQUEUE_FULL;
 8009276:	4628      	mov	r0, r5
 8009278:	e7b1      	b.n	80091de <xQueueGenericSend+0x26a>
 800927a:	bf00      	nop
 800927c:	e000ed04 	.word	0xe000ed04

08009280 <xQueueGenericSendFromISR>:
{
 8009280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009284:	2800      	cmp	r0, #0
 8009286:	d035      	beq.n	80092f4 <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009288:	4689      	mov	r9, r1
 800928a:	4690      	mov	r8, r2
 800928c:	461f      	mov	r7, r3
 800928e:	4604      	mov	r4, r0
 8009290:	b321      	cbz	r1, 80092dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009292:	2f02      	cmp	r7, #2
 8009294:	d10b      	bne.n	80092ae <xQueueGenericSendFromISR+0x2e>
 8009296:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009298:	2b01      	cmp	r3, #1
 800929a:	d008      	beq.n	80092ae <xQueueGenericSendFromISR+0x2e>
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	e7fe      	b.n	80092ac <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092ae:	f001 fef9 	bl	800b0a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80092b2:	f3ef 8611 	mrs	r6, BASEPRI
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80092c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d31b      	bcc.n	8009306 <xQueueGenericSendFromISR+0x86>
 80092ce:	2f02      	cmp	r7, #2
 80092d0:	d019      	beq.n	8009306 <xQueueGenericSendFromISR+0x86>
			xReturn = errQUEUE_FULL;
 80092d2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092d4:	f386 8811 	msr	BASEPRI, r6
}
 80092d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0d7      	beq.n	8009292 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	e7fe      	b.n	80092f2 <xQueueGenericSendFromISR+0x72>
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009304:	e7fe      	b.n	8009304 <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 8009306:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800930a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800930c:	463a      	mov	r2, r7
 800930e:	4649      	mov	r1, r9
			const int8_t cTxLock = pxQueue->cTxLock;
 8009310:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009312:	4620      	mov	r0, r4
 8009314:	f7ff fd7e 	bl	8008e14 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009318:	1c6b      	adds	r3, r5, #1
 800931a:	d008      	beq.n	800932e <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800931c:	1c6b      	adds	r3, r5, #1
 800931e:	b25b      	sxtb	r3, r3
 8009320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8009324:	2001      	movs	r0, #1
	__asm volatile
 8009326:	f386 8811 	msr	BASEPRI, r6
}
 800932a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800932e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0f7      	beq.n	8009324 <xQueueGenericSendFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009334:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009338:	f000 fff8 	bl	800a32c <xTaskRemoveFromEventList>
 800933c:	2800      	cmp	r0, #0
 800933e:	d0f1      	beq.n	8009324 <xQueueGenericSendFromISR+0xa4>
							if( pxHigherPriorityTaskWoken != NULL )
 8009340:	f1b8 0f00 	cmp.w	r8, #0
 8009344:	d0ee      	beq.n	8009324 <xQueueGenericSendFromISR+0xa4>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009346:	2001      	movs	r0, #1
 8009348:	f8c8 0000 	str.w	r0, [r8]
 800934c:	e7c2      	b.n	80092d4 <xQueueGenericSendFromISR+0x54>
 800934e:	bf00      	nop

08009350 <xQueueReceive>:
{
 8009350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009354:	b085      	sub	sp, #20
 8009356:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009358:	2800      	cmp	r0, #0
 800935a:	f000 80f5 	beq.w	8009548 <xQueueReceive+0x1f8>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800935e:	460e      	mov	r6, r1
 8009360:	4604      	mov	r4, r0
 8009362:	2900      	cmp	r1, #0
 8009364:	f000 808a 	beq.w	800947c <xQueueReceive+0x12c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009368:	f001 f8a4 	bl	800a4b4 <xTaskGetSchedulerState>
 800936c:	2800      	cmp	r0, #0
 800936e:	d079      	beq.n	8009464 <xQueueReceive+0x114>
		taskENTER_CRITICAL();
 8009370:	f001 fd60 	bl	800ae34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009374:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009376:	2d00      	cmp	r5, #0
 8009378:	f040 8148 	bne.w	800960c <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800937c:	9b01      	ldr	r3, [sp, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 80dc 	beq.w	800953c <xQueueReceive+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009384:	a802      	add	r0, sp, #8
 8009386:	f001 f819 	bl	800a3bc <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 800938a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8009654 <xQueueReceive+0x304>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800938e:	f104 0724 	add.w	r7, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8009392:	f001 fd71 	bl	800ae78 <vPortExitCritical>
		vTaskSuspendAll();
 8009396:	f000 fe47 	bl	800a028 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800939a:	f001 fd4b 	bl	800ae34 <vPortEnterCritical>
 800939e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80093a2:	2bff      	cmp	r3, #255	; 0xff
 80093a4:	bf04      	itt	eq
 80093a6:	2300      	moveq	r3, #0
 80093a8:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80093ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80093b0:	2bff      	cmp	r3, #255	; 0xff
 80093b2:	bf04      	itt	eq
 80093b4:	2300      	moveq	r3, #0
 80093b6:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80093ba:	f001 fd5d 	bl	800ae78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093be:	a901      	add	r1, sp, #4
 80093c0:	a802      	add	r0, sp, #8
 80093c2:	f001 f807 	bl	800a3d4 <xTaskCheckForTimeOut>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d165      	bne.n	8009496 <xQueueReceive+0x146>
	taskENTER_CRITICAL();
 80093ca:	f001 fd33 	bl	800ae34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80093ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80c2 	beq.w	800955a <xQueueReceive+0x20a>
	taskEXIT_CRITICAL();
 80093d6:	f001 fd4f 	bl	800ae78 <vPortExitCritical>
	taskENTER_CRITICAL();
 80093da:	f001 fd2b 	bl	800ae34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80093de:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80093e2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	dc05      	bgt.n	80093f4 <xQueueReceive+0xa4>
 80093e8:	e012      	b.n	8009410 <xQueueReceive+0xc0>
			--cTxLock;
 80093ea:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80093f0:	b25d      	sxtb	r5, r3
 80093f2:	d00d      	beq.n	8009410 <xQueueReceive+0xc0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093f6:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093f8:	b153      	cbz	r3, 8009410 <xQueueReceive+0xc0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093fa:	f000 ff97 	bl	800a32c <xTaskRemoveFromEventList>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d0f3      	beq.n	80093ea <xQueueReceive+0x9a>
						vTaskMissedYield();
 8009402:	f001 f837 	bl	800a474 <vTaskMissedYield>
			--cTxLock;
 8009406:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009408:	f013 0fff 	tst.w	r3, #255	; 0xff
 800940c:	b25d      	sxtb	r5, r3
 800940e:	d1f1      	bne.n	80093f4 <xQueueReceive+0xa4>
		pxQueue->cTxLock = queueUNLOCKED;
 8009410:	23ff      	movs	r3, #255	; 0xff
 8009412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009416:	f001 fd2f 	bl	800ae78 <vPortExitCritical>
	taskENTER_CRITICAL();
 800941a:	f001 fd0b 	bl	800ae34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800941e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009422:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009424:	2d00      	cmp	r5, #0
 8009426:	dd15      	ble.n	8009454 <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009428:	f104 0910 	add.w	r9, r4, #16
 800942c:	e004      	b.n	8009438 <xQueueReceive+0xe8>
				--cRxLock;
 800942e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009430:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009434:	b25d      	sxtb	r5, r3
 8009436:	d00d      	beq.n	8009454 <xQueueReceive+0x104>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009438:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800943a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800943c:	b153      	cbz	r3, 8009454 <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800943e:	f000 ff75 	bl	800a32c <xTaskRemoveFromEventList>
 8009442:	2800      	cmp	r0, #0
 8009444:	d0f3      	beq.n	800942e <xQueueReceive+0xde>
					vTaskMissedYield();
 8009446:	f001 f815 	bl	800a474 <vTaskMissedYield>
				--cRxLock;
 800944a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800944c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009450:	b25d      	sxtb	r5, r3
 8009452:	d1f1      	bne.n	8009438 <xQueueReceive+0xe8>
		pxQueue->cRxLock = queueUNLOCKED;
 8009454:	23ff      	movs	r3, #255	; 0xff
 8009456:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800945a:	f001 fd0d 	bl	800ae78 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800945e:	f000 fdeb 	bl	800a038 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009462:	e062      	b.n	800952a <xQueueReceive+0x1da>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009464:	9b01      	ldr	r3, [sp, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d082      	beq.n	8009370 <xQueueReceive+0x20>
	__asm volatile
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	e7fe      	b.n	800947a <xQueueReceive+0x12a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800947c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800947e:	2b00      	cmp	r3, #0
 8009480:	f43f af72 	beq.w	8009368 <xQueueReceive+0x18>
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	e7fe      	b.n	8009494 <xQueueReceive+0x144>
	taskENTER_CRITICAL();
 8009496:	f001 fccd 	bl	800ae34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800949a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800949e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	dc05      	bgt.n	80094b0 <xQueueReceive+0x160>
 80094a4:	e012      	b.n	80094cc <xQueueReceive+0x17c>
			--cTxLock;
 80094a6:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094ac:	b25d      	sxtb	r5, r3
 80094ae:	d00d      	beq.n	80094cc <xQueueReceive+0x17c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094b2:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b4:	b153      	cbz	r3, 80094cc <xQueueReceive+0x17c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094b6:	f000 ff39 	bl	800a32c <xTaskRemoveFromEventList>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d0f3      	beq.n	80094a6 <xQueueReceive+0x156>
						vTaskMissedYield();
 80094be:	f000 ffd9 	bl	800a474 <vTaskMissedYield>
			--cTxLock;
 80094c2:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094c8:	b25d      	sxtb	r5, r3
 80094ca:	d1f1      	bne.n	80094b0 <xQueueReceive+0x160>
		pxQueue->cTxLock = queueUNLOCKED;
 80094cc:	23ff      	movs	r3, #255	; 0xff
 80094ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80094d2:	f001 fcd1 	bl	800ae78 <vPortExitCritical>
	taskENTER_CRITICAL();
 80094d6:	f001 fcad 	bl	800ae34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80094da:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80094de:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094e0:	2d00      	cmp	r5, #0
 80094e2:	dd15      	ble.n	8009510 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094e4:	f104 0910 	add.w	r9, r4, #16
 80094e8:	e004      	b.n	80094f4 <xQueueReceive+0x1a4>
				--cRxLock;
 80094ea:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094ec:	f013 0fff 	tst.w	r3, #255	; 0xff
 80094f0:	b25d      	sxtb	r5, r3
 80094f2:	d00d      	beq.n	8009510 <xQueueReceive+0x1c0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094f4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094f6:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094f8:	b153      	cbz	r3, 8009510 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094fa:	f000 ff17 	bl	800a32c <xTaskRemoveFromEventList>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d0f3      	beq.n	80094ea <xQueueReceive+0x19a>
					vTaskMissedYield();
 8009502:	f000 ffb7 	bl	800a474 <vTaskMissedYield>
				--cRxLock;
 8009506:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009508:	f013 0fff 	tst.w	r3, #255	; 0xff
 800950c:	b25d      	sxtb	r5, r3
 800950e:	d1f1      	bne.n	80094f4 <xQueueReceive+0x1a4>
		pxQueue->cRxLock = queueUNLOCKED;
 8009510:	23ff      	movs	r3, #255	; 0xff
 8009512:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009516:	f001 fcaf 	bl	800ae78 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800951a:	f000 fd8d 	bl	800a038 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800951e:	f001 fc89 	bl	800ae34 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009522:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009524:	b153      	cbz	r3, 800953c <xQueueReceive+0x1ec>
	taskEXIT_CRITICAL();
 8009526:	f001 fca7 	bl	800ae78 <vPortExitCritical>
		taskENTER_CRITICAL();
 800952a:	f001 fc83 	bl	800ae34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800952e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009530:	2d00      	cmp	r5, #0
 8009532:	d16b      	bne.n	800960c <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009534:	9b01      	ldr	r3, [sp, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	f47f af2b 	bne.w	8009392 <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 800953c:	f001 fc9c 	bl	800ae78 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009540:	2000      	movs	r0, #0
}
 8009542:	b005      	add	sp, #20
 8009544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009558:	e7fe      	b.n	8009558 <xQueueReceive+0x208>
	taskEXIT_CRITICAL();
 800955a:	f001 fc8d 	bl	800ae78 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800955e:	9901      	ldr	r1, [sp, #4]
 8009560:	4638      	mov	r0, r7
 8009562:	f000 fe4b 	bl	800a1fc <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8009566:	f001 fc65 	bl	800ae34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800956a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800956e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009570:	2d00      	cmp	r5, #0
 8009572:	dc05      	bgt.n	8009580 <xQueueReceive+0x230>
 8009574:	e012      	b.n	800959c <xQueueReceive+0x24c>
			--cTxLock;
 8009576:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009578:	f013 0fff 	tst.w	r3, #255	; 0xff
 800957c:	b25d      	sxtb	r5, r3
 800957e:	d00d      	beq.n	800959c <xQueueReceive+0x24c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009580:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009582:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009584:	b153      	cbz	r3, 800959c <xQueueReceive+0x24c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009586:	f000 fed1 	bl	800a32c <xTaskRemoveFromEventList>
 800958a:	2800      	cmp	r0, #0
 800958c:	d0f3      	beq.n	8009576 <xQueueReceive+0x226>
						vTaskMissedYield();
 800958e:	f000 ff71 	bl	800a474 <vTaskMissedYield>
			--cTxLock;
 8009592:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009594:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009598:	b25d      	sxtb	r5, r3
 800959a:	d1f1      	bne.n	8009580 <xQueueReceive+0x230>
		pxQueue->cTxLock = queueUNLOCKED;
 800959c:	23ff      	movs	r3, #255	; 0xff
 800959e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80095a2:	f001 fc69 	bl	800ae78 <vPortExitCritical>
	taskENTER_CRITICAL();
 80095a6:	f001 fc45 	bl	800ae34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80095aa:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80095ae:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095b0:	2d00      	cmp	r5, #0
 80095b2:	dd15      	ble.n	80095e0 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095b4:	f104 0910 	add.w	r9, r4, #16
 80095b8:	e004      	b.n	80095c4 <xQueueReceive+0x274>
				--cRxLock;
 80095ba:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095c0:	b25d      	sxtb	r5, r3
 80095c2:	d00d      	beq.n	80095e0 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095c4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095c6:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095c8:	b153      	cbz	r3, 80095e0 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ca:	f000 feaf 	bl	800a32c <xTaskRemoveFromEventList>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d0f3      	beq.n	80095ba <xQueueReceive+0x26a>
					vTaskMissedYield();
 80095d2:	f000 ff4f 	bl	800a474 <vTaskMissedYield>
				--cRxLock;
 80095d6:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095d8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095dc:	b25d      	sxtb	r5, r3
 80095de:	d1f1      	bne.n	80095c4 <xQueueReceive+0x274>
		pxQueue->cRxLock = queueUNLOCKED;
 80095e0:	23ff      	movs	r3, #255	; 0xff
 80095e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80095e6:	f001 fc47 	bl	800ae78 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80095ea:	f000 fd25 	bl	800a038 <xTaskResumeAll>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d19b      	bne.n	800952a <xQueueReceive+0x1da>
					portYIELD_WITHIN_API();
 80095f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095f6:	f8c8 3000 	str.w	r3, [r8]
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8009602:	f001 fc17 	bl	800ae34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009606:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009608:	2d00      	cmp	r5, #0
 800960a:	d093      	beq.n	8009534 <xQueueReceive+0x1e4>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800960c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800960e:	b152      	cbz	r2, 8009626 <xQueueReceive+0x2d6>
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009610:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009614:	1899      	adds	r1, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009616:	4281      	cmp	r1, r0
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009618:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800961a:	bf24      	itt	cs
 800961c:	6821      	ldrcs	r1, [r4, #0]
 800961e:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009620:	4630      	mov	r0, r6
 8009622:	f001 feb1 	bl	800b388 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009626:	3d01      	subs	r5, #1
 8009628:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800962a:	6923      	ldr	r3, [r4, #16]
 800962c:	b91b      	cbnz	r3, 8009636 <xQueueReceive+0x2e6>
				taskEXIT_CRITICAL();
 800962e:	f001 fc23 	bl	800ae78 <vPortExitCritical>
				return pdPASS;
 8009632:	2001      	movs	r0, #1
 8009634:	e785      	b.n	8009542 <xQueueReceive+0x1f2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009636:	f104 0010 	add.w	r0, r4, #16
 800963a:	f000 fe77 	bl	800a32c <xTaskRemoveFromEventList>
 800963e:	2800      	cmp	r0, #0
 8009640:	d0f5      	beq.n	800962e <xQueueReceive+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
 8009642:	4b04      	ldr	r3, [pc, #16]	; (8009654 <xQueueReceive+0x304>)
 8009644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	e7ec      	b.n	800962e <xQueueReceive+0x2de>
 8009654:	e000ed04 	.word	0xe000ed04

08009658 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009658:	4b1b      	ldr	r3, [pc, #108]	; (80096c8 <vQueueAddToRegistry+0x70>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	b1ba      	cbz	r2, 800968e <vQueueAddToRegistry+0x36>
 800965e:	689a      	ldr	r2, [r3, #8]
 8009660:	b1f2      	cbz	r2, 80096a0 <vQueueAddToRegistry+0x48>
 8009662:	691a      	ldr	r2, [r3, #16]
 8009664:	b1f2      	cbz	r2, 80096a4 <vQueueAddToRegistry+0x4c>
 8009666:	699a      	ldr	r2, [r3, #24]
 8009668:	b1f2      	cbz	r2, 80096a8 <vQueueAddToRegistry+0x50>
 800966a:	6a1a      	ldr	r2, [r3, #32]
 800966c:	b1f2      	cbz	r2, 80096ac <vQueueAddToRegistry+0x54>
 800966e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009670:	b1f2      	cbz	r2, 80096b0 <vQueueAddToRegistry+0x58>
 8009672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009674:	b1f2      	cbz	r2, 80096b4 <vQueueAddToRegistry+0x5c>
 8009676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009678:	b1f2      	cbz	r2, 80096b8 <vQueueAddToRegistry+0x60>
 800967a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800967c:	b1f2      	cbz	r2, 80096bc <vQueueAddToRegistry+0x64>
 800967e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009680:	b1f2      	cbz	r2, 80096c0 <vQueueAddToRegistry+0x68>
 8009682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009684:	b112      	cbz	r2, 800968c <vQueueAddToRegistry+0x34>
 8009686:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009688:	b1e2      	cbz	r2, 80096c4 <vQueueAddToRegistry+0x6c>
 800968a:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800968c:	220a      	movs	r2, #10
	{
 800968e:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009690:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009694:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009698:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800969a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800969e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096a0:	2201      	movs	r2, #1
 80096a2:	e7f4      	b.n	800968e <vQueueAddToRegistry+0x36>
 80096a4:	2202      	movs	r2, #2
 80096a6:	e7f2      	b.n	800968e <vQueueAddToRegistry+0x36>
 80096a8:	2203      	movs	r2, #3
 80096aa:	e7f0      	b.n	800968e <vQueueAddToRegistry+0x36>
 80096ac:	2204      	movs	r2, #4
 80096ae:	e7ee      	b.n	800968e <vQueueAddToRegistry+0x36>
 80096b0:	2205      	movs	r2, #5
 80096b2:	e7ec      	b.n	800968e <vQueueAddToRegistry+0x36>
 80096b4:	2206      	movs	r2, #6
 80096b6:	e7ea      	b.n	800968e <vQueueAddToRegistry+0x36>
 80096b8:	2207      	movs	r2, #7
 80096ba:	e7e8      	b.n	800968e <vQueueAddToRegistry+0x36>
 80096bc:	2208      	movs	r2, #8
 80096be:	e7e6      	b.n	800968e <vQueueAddToRegistry+0x36>
 80096c0:	2209      	movs	r2, #9
 80096c2:	e7e4      	b.n	800968e <vQueueAddToRegistry+0x36>
 80096c4:	220b      	movs	r2, #11
 80096c6:	e7e2      	b.n	800968e <vQueueAddToRegistry+0x36>
 80096c8:	20009ca0 	.word	0x20009ca0

080096cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	4604      	mov	r4, r0
 80096d0:	460e      	mov	r6, r1
 80096d2:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096d4:	f001 fbae 	bl	800ae34 <vPortEnterCritical>
 80096d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80096dc:	2bff      	cmp	r3, #255	; 0xff
 80096de:	bf04      	itt	eq
 80096e0:	2300      	moveq	r3, #0
 80096e2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80096e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80096ea:	2bff      	cmp	r3, #255	; 0xff
 80096ec:	bf04      	itt	eq
 80096ee:	2300      	moveq	r3, #0
 80096f0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80096f4:	f001 fbc0 	bl	800ae78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d045      	beq.n	800978a <vQueueWaitForMessageRestricted+0xbe>
	taskENTER_CRITICAL();
 80096fe:	f001 fb99 	bl	800ae34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009702:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009706:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009708:	2d00      	cmp	r5, #0
 800970a:	dd15      	ble.n	8009738 <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800970c:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8009710:	e004      	b.n	800971c <vQueueWaitForMessageRestricted+0x50>
			--cTxLock;
 8009712:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009714:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009718:	b25d      	sxtb	r5, r3
 800971a:	d00d      	beq.n	8009738 <vQueueWaitForMessageRestricted+0x6c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800971c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800971e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009720:	b153      	cbz	r3, 8009738 <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009722:	f000 fe03 	bl	800a32c <xTaskRemoveFromEventList>
 8009726:	2800      	cmp	r0, #0
 8009728:	d0f3      	beq.n	8009712 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 800972a:	f000 fea3 	bl	800a474 <vTaskMissedYield>
			--cTxLock;
 800972e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009730:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009734:	b25d      	sxtb	r5, r3
 8009736:	d1f1      	bne.n	800971c <vQueueWaitForMessageRestricted+0x50>
		pxQueue->cTxLock = queueUNLOCKED;
 8009738:	23ff      	movs	r3, #255	; 0xff
 800973a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800973e:	f001 fb9b 	bl	800ae78 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009742:	f001 fb77 	bl	800ae34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009746:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800974a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800974c:	2d00      	cmp	r5, #0
 800974e:	dd15      	ble.n	800977c <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009750:	f104 0610 	add.w	r6, r4, #16
 8009754:	e004      	b.n	8009760 <vQueueWaitForMessageRestricted+0x94>
				--cRxLock;
 8009756:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009758:	f013 0fff 	tst.w	r3, #255	; 0xff
 800975c:	b25d      	sxtb	r5, r3
 800975e:	d00d      	beq.n	800977c <vQueueWaitForMessageRestricted+0xb0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009760:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009762:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009764:	b153      	cbz	r3, 800977c <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009766:	f000 fde1 	bl	800a32c <xTaskRemoveFromEventList>
 800976a:	2800      	cmp	r0, #0
 800976c:	d0f3      	beq.n	8009756 <vQueueWaitForMessageRestricted+0x8a>
					vTaskMissedYield();
 800976e:	f000 fe81 	bl	800a474 <vTaskMissedYield>
				--cRxLock;
 8009772:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009774:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009778:	b25d      	sxtb	r5, r3
 800977a:	d1f1      	bne.n	8009760 <vQueueWaitForMessageRestricted+0x94>
		pxQueue->cRxLock = queueUNLOCKED;
 800977c:	23ff      	movs	r3, #255	; 0xff
 800977e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8009782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8009786:	f001 bb77 	b.w	800ae78 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800978a:	462a      	mov	r2, r5
 800978c:	4631      	mov	r1, r6
 800978e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009792:	f000 fd7b 	bl	800a28c <vTaskPlaceOnEventListRestricted>
 8009796:	e7b2      	b.n	80096fe <vQueueWaitForMessageRestricted+0x32>

08009798 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800979c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800979e:	f001 fb49 	bl	800ae34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097a2:	4a34      	ldr	r2, [pc, #208]	; (8009874 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80097a4:	4e34      	ldr	r6, [pc, #208]	; (8009878 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80097a6:	6813      	ldr	r3, [r2, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80097ac:	6833      	ldr	r3, [r6, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d032      	beq.n	8009818 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097b2:	4d32      	ldr	r5, [pc, #200]	; (800987c <prvAddNewTaskToReadyList+0xe4>)
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b33b      	cbz	r3, 8009808 <prvAddNewTaskToReadyList+0x70>
 80097b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80097ba:	4f31      	ldr	r7, [pc, #196]	; (8009880 <prvAddNewTaskToReadyList+0xe8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097bc:	4931      	ldr	r1, [pc, #196]	; (8009884 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 80097be:	4a32      	ldr	r2, [pc, #200]	; (8009888 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 80097c0:	f8d1 c000 	ldr.w	ip, [r1]
		uxTaskNumber++;
 80097c4:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80097c6:	4584      	cmp	ip, r0
		uxTaskNumber++;
 80097c8:	f103 0301 	add.w	r3, r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 80097cc:	bf38      	it	cc
 80097ce:	6008      	strcc	r0, [r1, #0]
 80097d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097d4:	64e3      	str	r3, [r4, #76]	; 0x4c
		prvAddTaskToReadyList( pxNewTCB );
 80097d6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80097da:	1d21      	adds	r1, r4, #4
		uxTaskNumber++;
 80097dc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80097de:	f7ff fadd 	bl	8008d9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097e2:	f001 fb49 	bl	800ae78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097e6:	682b      	ldr	r3, [r5, #0]
 80097e8:	b163      	cbz	r3, 8009804 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097ea:	6832      	ldr	r2, [r6, #0]
 80097ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80097ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d207      	bcs.n	8009804 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097f4:	4b25      	ldr	r3, [pc, #148]	; (800988c <prvAddNewTaskToReadyList+0xf4>)
 80097f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009808:	6833      	ldr	r3, [r6, #0]
 800980a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800980c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980e:	4f1c      	ldr	r7, [pc, #112]	; (8009880 <prvAddNewTaskToReadyList+0xe8>)
 8009810:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8009812:	bf98      	it	ls
 8009814:	6034      	strls	r4, [r6, #0]
 8009816:	e7d1      	b.n	80097bc <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8009818:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800981a:	6813      	ldr	r3, [r2, #0]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d003      	beq.n	8009828 <prvAddNewTaskToReadyList+0x90>
 8009820:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009822:	4f17      	ldr	r7, [pc, #92]	; (8009880 <prvAddNewTaskToReadyList+0xe8>)
 8009824:	4d15      	ldr	r5, [pc, #84]	; (800987c <prvAddNewTaskToReadyList+0xe4>)
 8009826:	e7c9      	b.n	80097bc <prvAddNewTaskToReadyList+0x24>
 8009828:	4f15      	ldr	r7, [pc, #84]	; (8009880 <prvAddNewTaskToReadyList+0xe8>)
 800982a:	463d      	mov	r5, r7
 800982c:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009830:	4628      	mov	r0, r5
 8009832:	3514      	adds	r5, #20
 8009834:	f7ff faa2 	bl	8008d7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009838:	45a8      	cmp	r8, r5
 800983a:	d1f9      	bne.n	8009830 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 800983c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80098a4 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 8009840:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80098a8 <prvAddNewTaskToReadyList+0x110>
 8009844:	4d0d      	ldr	r5, [pc, #52]	; (800987c <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8009846:	4648      	mov	r0, r9
 8009848:	f7ff fa98 	bl	8008d7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800984c:	4640      	mov	r0, r8
 800984e:	f7ff fa95 	bl	8008d7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009852:	480f      	ldr	r0, [pc, #60]	; (8009890 <prvAddNewTaskToReadyList+0xf8>)
 8009854:	f7ff fa92 	bl	8008d7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009858:	480e      	ldr	r0, [pc, #56]	; (8009894 <prvAddNewTaskToReadyList+0xfc>)
 800985a:	f7ff fa8f 	bl	8008d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800985e:	480e      	ldr	r0, [pc, #56]	; (8009898 <prvAddNewTaskToReadyList+0x100>)
 8009860:	f7ff fa8c 	bl	8008d7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009864:	4a0d      	ldr	r2, [pc, #52]	; (800989c <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009866:	4b0e      	ldr	r3, [pc, #56]	; (80098a0 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8009868:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800986c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800986e:	f8c3 8000 	str.w	r8, [r3]
}
 8009872:	e7a3      	b.n	80097bc <prvAddNewTaskToReadyList+0x24>
 8009874:	2000170c 	.word	0x2000170c
 8009878:	2000129c 	.word	0x2000129c
 800987c:	20001768 	.word	0x20001768
 8009880:	200012a8 	.word	0x200012a8
 8009884:	2000171c 	.word	0x2000171c
 8009888:	20001718 	.word	0x20001718
 800988c:	e000ed04 	.word	0xe000ed04
 8009890:	20001754 	.word	0x20001754
 8009894:	20001780 	.word	0x20001780
 8009898:	2000176c 	.word	0x2000176c
 800989c:	200012a0 	.word	0x200012a0
 80098a0:	200012a4 	.word	0x200012a4
 80098a4:	20001720 	.word	0x20001720
 80098a8:	20001734 	.word	0x20001734

080098ac <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80098ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098b2:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80098b6:	465a      	mov	r2, fp
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80098b8:	4680      	mov	r8, r0
 80098ba:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80098be:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80098c0:	4699      	mov	r9, r3
 80098c2:	e9dd 6a0a 	ldrd	r6, sl, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098c6:	f001 fd6d 	bl	800b3a4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80098cc:	f1ab 0b04 	sub.w	fp, fp, #4
 80098d0:	449b      	add	fp, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098d2:	f02b 0b07 	bic.w	fp, fp, #7
	if( pcName != NULL )
 80098d6:	2d00      	cmp	r5, #0
 80098d8:	d038      	beq.n	800994c <prvInitialiseNewTask.isra.0+0xa0>
 80098da:	1e6a      	subs	r2, r5, #1
 80098dc:	f105 0117 	add.w	r1, r5, #23
 80098e0:	f104 0533 	add.w	r5, r4, #51	; 0x33
 80098e4:	e001      	b.n	80098ea <prvInitialiseNewTask.isra.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098e6:	428a      	cmp	r2, r1
 80098e8:	d006      	beq.n	80098f8 <prvInitialiseNewTask.isra.0+0x4c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098ea:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80098ee:	f805 3f01 	strb.w	r3, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80098f2:	7817      	ldrb	r7, [r2, #0]
 80098f4:	2f00      	cmp	r7, #0
 80098f6:	d1f6      	bne.n	80098e6 <prvInitialiseNewTask.isra.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80098f8:	2300      	movs	r3, #0
 80098fa:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80098fe:	2e37      	cmp	r6, #55	; 0x37
 8009900:	bf28      	it	cs
 8009902:	2637      	movcs	r6, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8009904:	2500      	movs	r5, #0
 8009906:	e9c4 6515 	strd	r6, r5, [r4, #84]	; 0x54
	pxNewTCB->uxPriority = uxPriority;
 800990a:	62e6      	str	r6, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800990c:	1d20      	adds	r0, r4, #4
 800990e:	f7ff fa41 	bl	8008d94 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009912:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009916:	f104 0018 	add.w	r0, r4, #24
 800991a:	f7ff fa3b 	bl	8008d94 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800991e:	6665      	str	r5, [r4, #100]	; 0x64
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009920:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009924:	61a6      	str	r6, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009926:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 800992a:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800992e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009930:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009932:	464a      	mov	r2, r9
 8009934:	4641      	mov	r1, r8
 8009936:	4658      	mov	r0, fp
 8009938:	f001 fa4e 	bl	800add8 <pxPortInitialiseStack>
 800993c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800993e:	f1ba 0f00 	cmp.w	sl, #0
 8009942:	d001      	beq.n	8009948 <prvInitialiseNewTask.isra.0+0x9c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009944:	f8ca 4000 	str.w	r4, [sl]
}
 8009948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800994c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8009950:	e7d5      	b.n	80098fe <prvInitialiseNewTask.isra.0+0x52>
 8009952:	bf00      	nop

08009954 <prvIdleTask>:
{
 8009954:	4d23      	ldr	r5, [pc, #140]	; (80099e4 <prvIdleTask+0x90>)
 8009956:	f8df a094 	ldr.w	sl, [pc, #148]	; 80099ec <prvIdleTask+0x98>
 800995a:	4e23      	ldr	r6, [pc, #140]	; (80099e8 <prvIdleTask+0x94>)
 800995c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80099f0 <prvIdleTask+0x9c>
				taskYIELD();
 8009960:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80099f4 <prvIdleTask+0xa0>
{
 8009964:	b580      	push	{r7, lr}
				taskYIELD();
 8009966:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	b343      	cbz	r3, 80099c0 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 800996e:	f001 fa61 	bl	800ae34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009972:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009976:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009978:	1d20      	adds	r0, r4, #4
 800997a:	f7ff fa37 	bl	8008dec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800997e:	6833      	ldr	r3, [r6, #0]
 8009980:	3b01      	subs	r3, #1
 8009982:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	3b01      	subs	r3, #1
 8009988:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 800998a:	f001 fa75 	bl	800ae78 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800998e:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8009992:	b163      	cbz	r3, 80099ae <prvIdleTask+0x5a>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009994:	2b01      	cmp	r3, #1
 8009996:	d020      	beq.n	80099da <prvIdleTask+0x86>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009998:	2b02      	cmp	r3, #2
 800999a:	d0e6      	beq.n	800996a <prvIdleTask+0x16>
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	e7fe      	b.n	80099ac <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 80099ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80099b0:	f001 fc62 	bl	800b278 <vPortFree>
				vPortFree( pxTCB );
 80099b4:	4620      	mov	r0, r4
 80099b6:	f001 fc5f 	bl	800b278 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1d6      	bne.n	800996e <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099c0:	f8d9 3000 	ldr.w	r3, [r9]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d905      	bls.n	80099d4 <prvIdleTask+0x80>
				taskYIELD();
 80099c8:	f8c8 7000 	str.w	r7, [r8]
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80099d4:	f7f8 fd96 	bl	8002504 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80099d8:	e7c7      	b.n	800996a <prvIdleTask+0x16>
				vPortFree( pxTCB );
 80099da:	4620      	mov	r0, r4
 80099dc:	f001 fc4c 	bl	800b278 <vPortFree>
 80099e0:	e7c3      	b.n	800996a <prvIdleTask+0x16>
 80099e2:	bf00      	nop
 80099e4:	20001710 	.word	0x20001710
 80099e8:	2000170c 	.word	0x2000170c
 80099ec:	20001780 	.word	0x20001780
 80099f0:	200012a8 	.word	0x200012a8
 80099f4:	e000ed04 	.word	0xe000ed04

080099f8 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099fc:	4b47      	ldr	r3, [pc, #284]	; (8009b1c <xTaskIncrementTick.part.0+0x124>)
 80099fe:	681e      	ldr	r6, [r3, #0]
 8009a00:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 8009a02:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8009a04:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	d041      	beq.n	8009a8e <xTaskIncrementTick.part.0+0x96>
 8009a0a:	4d45      	ldr	r5, [pc, #276]	; (8009b20 <xTaskIncrementTick.part.0+0x128>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	429e      	cmp	r6, r3
 8009a10:	d34a      	bcc.n	8009aa8 <xTaskIncrementTick.part.0+0xb0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a12:	f8df a110 	ldr.w	sl, [pc, #272]	; 8009b24 <xTaskIncrementTick.part.0+0x12c>
 8009a16:	f8da 3000 	ldr.w	r3, [sl]
 8009a1a:	681c      	ldr	r4, [r3, #0]
 8009a1c:	2c00      	cmp	r4, #0
 8009a1e:	d074      	beq.n	8009b0a <xTaskIncrementTick.part.0+0x112>
 8009a20:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8009b34 <xTaskIncrementTick.part.0+0x13c>
 8009a24:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8009b38 <xTaskIncrementTick.part.0+0x140>
					prvAddTaskToReadyList( pxTCB );
 8009a28:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009b3c <xTaskIncrementTick.part.0+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 8009a2c:	2400      	movs	r4, #0
 8009a2e:	e023      	b.n	8009a78 <xTaskIncrementTick.part.0+0x80>
 8009a30:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a32:	f7ff f9db 	bl	8008dec <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a38:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a3a:	f107 0018 	add.w	r0, r7, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a3e:	b113      	cbz	r3, 8009a46 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a40:	f7ff f9d4 	bl	8008dec <uxListRemove>
 8009a44:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	f8db 2000 	ldr.w	r2, [fp]
 8009a4c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009a50:	4293      	cmp	r3, r2
 8009a52:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8009a56:	bf88      	it	hi
 8009a58:	f8cb 3000 	strhi.w	r3, [fp]
 8009a5c:	f7ff f99e 	bl	8008d9c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a60:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a64:	f8da 3000 	ldr.w	r3, [sl]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a6c:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8009a6e:	4291      	cmp	r1, r2
 8009a70:	bf28      	it	cs
 8009a72:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d04c      	beq.n	8009b12 <xTaskIncrementTick.part.0+0x11a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a78:	f8da 3000 	ldr.w	r3, [sl]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a80:	687b      	ldr	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a82:	1d39      	adds	r1, r7, #4
					if( xConstTickCount < xItemValue )
 8009a84:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a86:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8009a88:	d2d2      	bcs.n	8009a30 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8009a8a:	602b      	str	r3, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a8c:	e011      	b.n	8009ab2 <xTaskIncrementTick.part.0+0xba>
			taskSWITCH_DELAYED_LISTS();
 8009a8e:	4b25      	ldr	r3, [pc, #148]	; (8009b24 <xTaskIncrementTick.part.0+0x12c>)
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	6812      	ldr	r2, [r2, #0]
 8009a94:	b30a      	cbz	r2, 8009ada <xTaskIncrementTick.part.0+0xe2>
 8009a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	e7fe      	b.n	8009aa6 <xTaskIncrementTick.part.0+0xae>
 8009aa8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8009b34 <xTaskIncrementTick.part.0+0x13c>
 8009aac:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8009b38 <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 8009ab0:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ab2:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 8009ab6:	491c      	ldr	r1, [pc, #112]	; (8009b28 <xTaskIncrementTick.part.0+0x130>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 8009ac4:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8009ac6:	2a02      	cmp	r2, #2
 8009ac8:	bf28      	it	cs
 8009aca:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8009acc:	2b00      	cmp	r3, #0
}
 8009ace:	bf0c      	ite	eq
 8009ad0:	4620      	moveq	r0, r4
 8009ad2:	2001      	movne	r0, #1
 8009ad4:	b003      	add	sp, #12
 8009ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8009ada:	4a14      	ldr	r2, [pc, #80]	; (8009b2c <xTaskIncrementTick.part.0+0x134>)
 8009adc:	6818      	ldr	r0, [r3, #0]
 8009ade:	4914      	ldr	r1, [pc, #80]	; (8009b30 <xTaskIncrementTick.part.0+0x138>)
 8009ae0:	6814      	ldr	r4, [r2, #0]
 8009ae2:	601c      	str	r4, [r3, #0]
 8009ae4:	6010      	str	r0, [r2, #0]
 8009ae6:	680a      	ldr	r2, [r1, #0]
 8009ae8:	3201      	adds	r2, #1
 8009aea:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	6812      	ldr	r2, [r2, #0]
 8009af0:	b922      	cbnz	r2, 8009afc <xTaskIncrementTick.part.0+0x104>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009af2:	4d0b      	ldr	r5, [pc, #44]	; (8009b20 <xTaskIncrementTick.part.0+0x128>)
 8009af4:	f04f 33ff 	mov.w	r3, #4294967295
 8009af8:	602b      	str	r3, [r5, #0]
 8009afa:	e787      	b.n	8009a0c <xTaskIncrementTick.part.0+0x14>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009afc:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009afe:	4d08      	ldr	r5, [pc, #32]	; (8009b20 <xTaskIncrementTick.part.0+0x128>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b00:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	602b      	str	r3, [r5, #0]
	}
}
 8009b08:	e780      	b.n	8009a0c <xTaskIncrementTick.part.0+0x14>
 8009b0a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8009b34 <xTaskIncrementTick.part.0+0x13c>
 8009b0e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8009b38 <xTaskIncrementTick.part.0+0x140>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b12:	f04f 33ff 	mov.w	r3, #4294967295
 8009b16:	602b      	str	r3, [r5, #0]
					break;
 8009b18:	e7cb      	b.n	8009ab2 <xTaskIncrementTick.part.0+0xba>
 8009b1a:	bf00      	nop
 8009b1c:	20001794 	.word	0x20001794
 8009b20:	20001748 	.word	0x20001748
 8009b24:	200012a0 	.word	0x200012a0
 8009b28:	20001798 	.word	0x20001798
 8009b2c:	200012a4 	.word	0x200012a4
 8009b30:	2000174c 	.word	0x2000174c
 8009b34:	200012a8 	.word	0x200012a8
 8009b38:	2000129c 	.word	0x2000129c
 8009b3c:	2000171c 	.word	0x2000171c

08009b40 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8009b44:	4d40      	ldr	r5, [pc, #256]	; (8009c48 <xTaskResumeAll.part.0+0x108>)
BaseType_t xTaskResumeAll( void )
 8009b46:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8009b48:	f001 f974 	bl	800ae34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b52:	682b      	ldr	r3, [r5, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d15f      	bne.n	8009c18 <xTaskResumeAll.part.0+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b58:	4b3c      	ldr	r3, [pc, #240]	; (8009c4c <xTaskResumeAll.part.0+0x10c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d05b      	beq.n	8009c18 <xTaskResumeAll.part.0+0xd8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b60:	4e3b      	ldr	r6, [pc, #236]	; (8009c50 <xTaskResumeAll.part.0+0x110>)
 8009b62:	6833      	ldr	r3, [r6, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d06c      	beq.n	8009c42 <xTaskResumeAll.part.0+0x102>
 8009b68:	4f3a      	ldr	r7, [pc, #232]	; (8009c54 <xTaskResumeAll.part.0+0x114>)
 8009b6a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8009c68 <xTaskResumeAll.part.0+0x128>
 8009b6e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8009c6c <xTaskResumeAll.part.0+0x12c>
 8009b72:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8009c70 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b76:	68f3      	ldr	r3, [r6, #12]
 8009b78:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b7a:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b7e:	f104 0018 	add.w	r0, r4, #24
 8009b82:	f7ff f933 	bl	8008dec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b86:	4658      	mov	r0, fp
 8009b88:	f7ff f930 	bl	8008dec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b8e:	683a      	ldr	r2, [r7, #0]
 8009b90:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009b94:	4293      	cmp	r3, r2
 8009b96:	4659      	mov	r1, fp
 8009b98:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8009b9c:	bf88      	it	hi
 8009b9e:	603b      	strhi	r3, [r7, #0]
 8009ba0:	f7ff f8fc 	bl	8008d9c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ba8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d33b      	bcc.n	8009c28 <xTaskResumeAll.part.0+0xe8>
						xYieldPending = pdTRUE;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bb6:	6833      	ldr	r3, [r6, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1dc      	bne.n	8009b76 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bbc:	4b26      	ldr	r3, [pc, #152]	; (8009c58 <xTaskResumeAll.part.0+0x118>)
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	6812      	ldr	r2, [r2, #0]
 8009bc2:	2a00      	cmp	r2, #0
 8009bc4:	d038      	beq.n	8009c38 <xTaskResumeAll.part.0+0xf8>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bc6:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bc8:	4b24      	ldr	r3, [pc, #144]	; (8009c5c <xTaskResumeAll.part.0+0x11c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bca:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bcc:	68d2      	ldr	r2, [r2, #12]
 8009bce:	6852      	ldr	r2, [r2, #4]
 8009bd0:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009bd2:	4e23      	ldr	r6, [pc, #140]	; (8009c60 <xTaskResumeAll.part.0+0x120>)
 8009bd4:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8009bd6:	b194      	cbz	r4, 8009bfe <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8009bd8:	2701      	movs	r7, #1
 8009bda:	e006      	b.n	8009bea <xTaskResumeAll.part.0+0xaa>
 8009bdc:	f7ff ff0c 	bl	80099f8 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8009be0:	b108      	cbz	r0, 8009be6 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8009be2:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009be6:	3c01      	subs	r4, #1
 8009be8:	d008      	beq.n	8009bfc <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bea:	682b      	ldr	r3, [r5, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0f5      	beq.n	8009bdc <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8009bf0:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009bf2:	3c01      	subs	r4, #1
		++xPendedTicks;
 8009bf4:	f103 0301 	add.w	r3, r3, #1
 8009bf8:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009bfa:	d1f6      	bne.n	8009bea <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8009bfc:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8009bfe:	f8da 3000 	ldr.w	r3, [sl]
 8009c02:	b14b      	cbz	r3, 8009c18 <xTaskResumeAll.part.0+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 8009c04:	4b17      	ldr	r3, [pc, #92]	; (8009c64 <xTaskResumeAll.part.0+0x124>)
 8009c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c0a:	601a      	str	r2, [r3, #0]
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009c14:	2001      	movs	r0, #1
 8009c16:	e000      	b.n	8009c1a <xTaskResumeAll.part.0+0xda>
BaseType_t xAlreadyYielded = pdFALSE;
 8009c18:	2000      	movs	r0, #0
 8009c1a:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8009c1c:	f001 f92c 	bl	800ae78 <vPortExitCritical>
}
 8009c20:	9801      	ldr	r0, [sp, #4]
 8009c22:	b003      	add	sp, #12
 8009c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c28:	6833      	ldr	r3, [r6, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1a3      	bne.n	8009b76 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c2e:	4b0a      	ldr	r3, [pc, #40]	; (8009c58 <xTaskResumeAll.part.0+0x118>)
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	6812      	ldr	r2, [r2, #0]
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	d1c6      	bne.n	8009bc6 <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c38:	4b08      	ldr	r3, [pc, #32]	; (8009c5c <xTaskResumeAll.part.0+0x11c>)
 8009c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	e7c7      	b.n	8009bd2 <xTaskResumeAll.part.0+0x92>
 8009c42:	f8df a02c 	ldr.w	sl, [pc, #44]	; 8009c70 <xTaskResumeAll.part.0+0x130>
 8009c46:	e7c4      	b.n	8009bd2 <xTaskResumeAll.part.0+0x92>
 8009c48:	20001714 	.word	0x20001714
 8009c4c:	2000170c 	.word	0x2000170c
 8009c50:	20001754 	.word	0x20001754
 8009c54:	2000171c 	.word	0x2000171c
 8009c58:	200012a0 	.word	0x200012a0
 8009c5c:	20001748 	.word	0x20001748
 8009c60:	20001750 	.word	0x20001750
 8009c64:	e000ed04 	.word	0xe000ed04
 8009c68:	200012a8 	.word	0x200012a8
 8009c6c:	2000129c 	.word	0x2000129c
 8009c70:	20001798 	.word	0x20001798

08009c74 <xTaskCreateStatic>:
	{
 8009c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c76:	b087      	sub	sp, #28
 8009c78:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8009c7c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 8009c7e:	b1bd      	cbz	r5, 8009cb0 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 8009c80:	b16c      	cbz	r4, 8009c9e <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c82:	276c      	movs	r7, #108	; 0x6c
 8009c84:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c86:	9f05      	ldr	r7, [sp, #20]
 8009c88:	2f6c      	cmp	r7, #108	; 0x6c
 8009c8a:	d01a      	beq.n	8009cc2 <xTaskCreateStatic+0x4e>
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	e7fe      	b.n	8009c9c <xTaskCreateStatic+0x28>
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009cae:	e7fe      	b.n	8009cae <xTaskCreateStatic+0x3a>
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8009cc0:	e7fe      	b.n	8009cc0 <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cc2:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cc4:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cc6:	ad04      	add	r5, sp, #16
 8009cc8:	9402      	str	r4, [sp, #8]
 8009cca:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ccc:	f884 7069 	strb.w	r7, [r4, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cd0:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cd2:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cd4:	f7ff fdea 	bl	80098ac <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7ff fd5d 	bl	8009798 <prvAddNewTaskToReadyList>
	}
 8009cde:	9804      	ldr	r0, [sp, #16]
 8009ce0:	b007      	add	sp, #28
 8009ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ce4 <xTaskCreate>:
	{
 8009ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ce8:	4607      	mov	r7, r0
 8009cea:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cec:	0090      	lsls	r0, r2, #2
	{
 8009cee:	4615      	mov	r5, r2
 8009cf0:	4688      	mov	r8, r1
 8009cf2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cf4:	f001 fa04 	bl	800b100 <pvPortMalloc>
			if( pxStack != NULL )
 8009cf8:	b1e0      	cbz	r0, 8009d34 <xTaskCreate+0x50>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	206c      	movs	r0, #108	; 0x6c
 8009cfe:	f001 f9ff 	bl	800b100 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009d02:	4606      	mov	r6, r0
 8009d04:	b1d8      	cbz	r0, 8009d3e <xTaskCreate+0x5a>
					pxNewTCB->pxStack = pxStack;
 8009d06:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d08:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d0c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d0e:	f886 c069 	strb.w	ip, [r6, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d12:	9401      	str	r4, [sp, #4]
 8009d14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009d16:	9602      	str	r6, [sp, #8]
 8009d18:	464b      	mov	r3, r9
 8009d1a:	462a      	mov	r2, r5
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	4638      	mov	r0, r7
 8009d20:	9400      	str	r4, [sp, #0]
 8009d22:	f7ff fdc3 	bl	80098ac <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d26:	4630      	mov	r0, r6
 8009d28:	f7ff fd36 	bl	8009798 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d2c:	2001      	movs	r0, #1
	}
 8009d2e:	b005      	add	sp, #20
 8009d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d34:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009d38:	b005      	add	sp, #20
 8009d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f001 fa9a 	bl	800b278 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295
 8009d48:	e7f1      	b.n	8009d2e <xTaskCreate+0x4a>
 8009d4a:	bf00      	nop

08009d4c <vTaskDelayUntil>:
		configASSERT( pxPreviousWakeTime );
 8009d4c:	b338      	cbz	r0, 8009d9e <vTaskDelayUntil+0x52>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009d4e:	b941      	cbnz	r1, 8009d62 <vTaskDelayUntil+0x16>
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	e7fe      	b.n	8009d60 <vTaskDelayUntil+0x14>
	{
 8009d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		configASSERT( uxSchedulerSuspended == 0 );
 8009d66:	4f31      	ldr	r7, [pc, #196]	; (8009e2c <vTaskDelayUntil+0xe0>)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	bb0b      	cbnz	r3, 8009db0 <vTaskDelayUntil+0x64>
	++uxSchedulerSuspended;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	603b      	str	r3, [r7, #0]
			const TickType_t xConstTickCount = xTickCount;
 8009d72:	4d2f      	ldr	r5, [pc, #188]	; (8009e30 <vTaskDelayUntil+0xe4>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009d74:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8009d76:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009d78:	1854      	adds	r4, r2, r1
 8009d7a:	bf2c      	ite	cs
 8009d7c:	2101      	movcs	r1, #1
 8009d7e:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8009d80:	429a      	cmp	r2, r3
			*pxPreviousWakeTime = xTimeToWake;
 8009d82:	6004      	str	r4, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8009d84:	d92a      	bls.n	8009ddc <vTaskDelayUntil+0x90>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009d86:	bb51      	cbnz	r1, 8009dde <vTaskDelayUntil+0x92>
	configASSERT( uxSchedulerSuspended );
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	b9d3      	cbnz	r3, 8009dc2 <vTaskDelayUntil+0x76>
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	e7fe      	b.n	8009d9c <vTaskDelayUntil+0x50>
 8009d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8009dae:	e7fe      	b.n	8009dae <vTaskDelayUntil+0x62>
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
		configASSERT( uxSchedulerSuspended == 0 );
 8009dc0:	e7fe      	b.n	8009dc0 <vTaskDelayUntil+0x74>
 8009dc2:	f7ff febd 	bl	8009b40 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8009dc6:	b938      	cbnz	r0, 8009dd8 <vTaskDelayUntil+0x8c>
			portYIELD_WITHIN_API();
 8009dc8:	4b1a      	ldr	r3, [pc, #104]	; (8009e34 <vTaskDelayUntil+0xe8>)
 8009dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	f3bf 8f6f 	isb	sy
	}
 8009dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009ddc:	b909      	cbnz	r1, 8009de2 <vTaskDelayUntil+0x96>
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	d2d2      	bcs.n	8009d88 <vTaskDelayUntil+0x3c>
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009de2:	4e15      	ldr	r6, [pc, #84]	; (8009e38 <vTaskDelayUntil+0xec>)
const TickType_t xConstTickCount = xTickCount;
 8009de4:	f8d5 8000 	ldr.w	r8, [r5]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009de8:	6832      	ldr	r2, [r6, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dea:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009dec:	2100      	movs	r1, #0
 8009dee:	eba8 0503 	sub.w	r5, r8, r3
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009df2:	3004      	adds	r0, #4
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009df4:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009df8:	f7fe fff8 	bl	8008dec <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dfc:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dfe:	6833      	ldr	r3, [r6, #0]

			if( xTimeToWake < xConstTickCount )
 8009e00:	45a0      	cmp	r8, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e02:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e04:	d906      	bls.n	8009e14 <vTaskDelayUntil+0xc8>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e06:	4b0d      	ldr	r3, [pc, #52]	; (8009e3c <vTaskDelayUntil+0xf0>)
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	6831      	ldr	r1, [r6, #0]
 8009e0c:	3104      	adds	r1, #4
 8009e0e:	f7fe ffd5 	bl	8008dbc <vListInsert>
 8009e12:	e7b9      	b.n	8009d88 <vTaskDelayUntil+0x3c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e14:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <vTaskDelayUntil+0xf4>)
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	6831      	ldr	r1, [r6, #0]
 8009e1a:	3104      	adds	r1, #4
 8009e1c:	f7fe ffce 	bl	8008dbc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e20:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <vTaskDelayUntil+0xf8>)
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8009e26:	bf38      	it	cc
 8009e28:	601c      	strcc	r4, [r3, #0]
 8009e2a:	e7ad      	b.n	8009d88 <vTaskDelayUntil+0x3c>
 8009e2c:	20001714 	.word	0x20001714
 8009e30:	20001794 	.word	0x20001794
 8009e34:	e000ed04 	.word	0xe000ed04
 8009e38:	2000129c 	.word	0x2000129c
 8009e3c:	200012a4 	.word	0x200012a4
 8009e40:	200012a0 	.word	0x200012a0
 8009e44:	20001748 	.word	0x20001748

08009e48 <vTaskResume>:
		configASSERT( xTaskToResume );
 8009e48:	b198      	cbz	r0, 8009e72 <vTaskResume+0x2a>
	{
 8009e4a:	b530      	push	{r4, r5, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009e4c:	4d21      	ldr	r5, [pc, #132]	; (8009ed4 <vTaskResume+0x8c>)
 8009e4e:	682b      	ldr	r3, [r5, #0]
 8009e50:	4283      	cmp	r3, r0
	{
 8009e52:	b083      	sub	sp, #12
 8009e54:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8009e56:	d00a      	beq.n	8009e6e <vTaskResume+0x26>
			taskENTER_CRITICAL();
 8009e58:	f000 ffec 	bl	800ae34 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009e5c:	4b1e      	ldr	r3, [pc, #120]	; (8009ed8 <vTaskResume+0x90>)
 8009e5e:	6962      	ldr	r2, [r4, #20]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d00f      	beq.n	8009e84 <vTaskResume+0x3c>
	}
 8009e64:	b003      	add	sp, #12
 8009e66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			taskEXIT_CRITICAL();
 8009e6a:	f001 b805 	b.w	800ae78 <vPortExitCritical>
	}
 8009e6e:	b003      	add	sp, #12
 8009e70:	bd30      	pop	{r4, r5, pc}
 8009e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8009e82:	e7fe      	b.n	8009e82 <vTaskResume+0x3a>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009e84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009e86:	4a15      	ldr	r2, [pc, #84]	; (8009edc <vTaskResume+0x94>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d0eb      	beq.n	8009e64 <vTaskResume+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e9      	bne.n	8009e64 <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009e90:	1d21      	adds	r1, r4, #4
 8009e92:	4608      	mov	r0, r1
 8009e94:	9101      	str	r1, [sp, #4]
 8009e96:	f7fe ffa9 	bl	8008dec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e9a:	4a11      	ldr	r2, [pc, #68]	; (8009ee0 <vTaskResume+0x98>)
 8009e9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009e9e:	6810      	ldr	r0, [r2, #0]
 8009ea0:	9901      	ldr	r1, [sp, #4]
 8009ea2:	4283      	cmp	r3, r0
 8009ea4:	480f      	ldr	r0, [pc, #60]	; (8009ee4 <vTaskResume+0x9c>)
 8009ea6:	bf88      	it	hi
 8009ea8:	6013      	strhi	r3, [r2, #0]
 8009eaa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009eae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009eb2:	f7fe ff73 	bl	8008d9c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb6:	682b      	ldr	r3, [r5, #0]
 8009eb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d3d1      	bcc.n	8009e64 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 8009ec0:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <vTaskResume+0xa0>)
 8009ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	e7c8      	b.n	8009e64 <vTaskResume+0x1c>
 8009ed2:	bf00      	nop
 8009ed4:	2000129c 	.word	0x2000129c
 8009ed8:	2000176c 	.word	0x2000176c
 8009edc:	20001754 	.word	0x20001754
 8009ee0:	2000171c 	.word	0x2000171c
 8009ee4:	200012a8 	.word	0x200012a8
 8009ee8:	e000ed04 	.word	0xe000ed04

08009eec <vTaskStartScheduler>:
{
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ef0:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ef2:	4668      	mov	r0, sp
 8009ef4:	aa02      	add	r2, sp, #8
 8009ef6:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ef8:	e9cd 3300 	strd	r3, r3, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009efc:	f7fe ff20 	bl	8008d40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f00:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 8009f02:	b1c8      	cbz	r0, 8009f38 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f04:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 8009f06:	b174      	cbz	r4, 8009f26 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f08:	236c      	movs	r3, #108	; 0x6c
 8009f0a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f0c:	9b03      	ldr	r3, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f0e:	9d02      	ldr	r5, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f10:	2b6c      	cmp	r3, #108	; 0x6c
 8009f12:	d01a      	beq.n	8009f4a <vTaskStartScheduler+0x5e>
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	e7fe      	b.n	8009f24 <vTaskStartScheduler+0x38>
 8009f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009f36:	e7fe      	b.n	8009f36 <vTaskStartScheduler+0x4a>
 8009f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8009f48:	e7fe      	b.n	8009f48 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f4a:	00ad      	lsls	r5, r5, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f4c:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f4e:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f50:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f54:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f56:	6320      	str	r0, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009f58:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f5a:	f001 fa23 	bl	800b3a4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f60:	4a2c      	ldr	r2, [pc, #176]	; (800a014 <vTaskStartScheduler+0x128>)
 8009f62:	3d04      	subs	r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f64:	4621      	mov	r1, r4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f66:	441d      	add	r5, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f68:	2349      	movs	r3, #73	; 0x49
 8009f6a:	f801 3f34 	strb.w	r3, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f6e:	f025 0607 	bic.w	r6, r5, #7
			if( pcName[ x ] == ( char ) 0x00 )
 8009f72:	f102 0017 	add.w	r0, r2, #23
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f76:	4290      	cmp	r0, r2
 8009f78:	d005      	beq.n	8009f86 <vTaskStartScheduler+0x9a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f7a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009f7e:	f801 3f01 	strb.w	r3, [r1, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1f7      	bne.n	8009f76 <vTaskStartScheduler+0x8a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f86:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f88:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8009f8a:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f8e:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
	pxNewTCB->uxPriority = uxPriority;
 8009f92:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f94:	f7fe fefe 	bl	8008d94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f98:	f104 0018 	add.w	r0, r4, #24
 8009f9c:	f7fe fefa 	bl	8008d94 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fa0:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009fa2:	491d      	ldr	r1, [pc, #116]	; (800a018 <vTaskStartScheduler+0x12c>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fa4:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009fa6:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 8009fa8:	6665      	str	r5, [r4, #100]	; 0x64
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009faa:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009fae:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8009fb2:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009fb6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009fb8:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f000 ff0c 	bl	800add8 <pxPortInitialiseStack>
 8009fc0:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f7ff fbe8 	bl	8009798 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 8009fc8:	f000 fdd0 	bl	800ab6c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009fcc:	2801      	cmp	r0, #1
 8009fce:	d003      	beq.n	8009fd8 <vTaskStartScheduler+0xec>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d016      	beq.n	800a002 <vTaskStartScheduler+0x116>
}
 8009fd4:	b004      	add	sp, #16
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fe8:	490c      	ldr	r1, [pc, #48]	; (800a01c <vTaskStartScheduler+0x130>)
		xSchedulerRunning = pdTRUE;
 8009fea:	4a0d      	ldr	r2, [pc, #52]	; (800a020 <vTaskStartScheduler+0x134>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fec:	4b0d      	ldr	r3, [pc, #52]	; (800a024 <vTaskStartScheduler+0x138>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fee:	f04f 34ff 	mov.w	r4, #4294967295
 8009ff2:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8009ff4:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ff6:	601d      	str	r5, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009ff8:	f7f8 fa80 	bl	80024fc <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8009ffc:	f000 ffb6 	bl	800af6c <xPortStartScheduler>
 800a000:	e7e8      	b.n	8009fd4 <vTaskStartScheduler+0xe8>
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a012:	e7fe      	b.n	800a012 <vTaskStartScheduler+0x126>
 800a014:	0800cb30 	.word	0x0800cb30
 800a018:	08009955 	.word	0x08009955
 800a01c:	20001748 	.word	0x20001748
 800a020:	20001768 	.word	0x20001768
 800a024:	20001794 	.word	0x20001794

0800a028 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a028:	4a02      	ldr	r2, [pc, #8]	; (800a034 <vTaskSuspendAll+0xc>)
 800a02a:	6813      	ldr	r3, [r2, #0]
 800a02c:	3301      	adds	r3, #1
 800a02e:	6013      	str	r3, [r2, #0]
}
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	20001714 	.word	0x20001714

0800a038 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800a038:	4b06      	ldr	r3, [pc, #24]	; (800a054 <xTaskResumeAll+0x1c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	b943      	cbnz	r3, 800a050 <xTaskResumeAll+0x18>
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	e7fe      	b.n	800a04e <xTaskResumeAll+0x16>
 800a050:	f7ff bd76 	b.w	8009b40 <xTaskResumeAll.part.0>
 800a054:	20001714 	.word	0x20001714

0800a058 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a058:	4b01      	ldr	r3, [pc, #4]	; (800a060 <xTaskGetTickCount+0x8>)
 800a05a:	6818      	ldr	r0, [r3, #0]
}
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	20001794 	.word	0x20001794

0800a064 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <xTaskIncrementTick+0x18>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	b90b      	cbnz	r3, 800a06e <xTaskIncrementTick+0xa>
 800a06a:	f7ff bcc5 	b.w	80099f8 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 800a06e:	4a04      	ldr	r2, [pc, #16]	; (800a080 <xTaskIncrementTick+0x1c>)
 800a070:	6813      	ldr	r3, [r2, #0]
 800a072:	3301      	adds	r3, #1
 800a074:	6013      	str	r3, [r2, #0]
}
 800a076:	2000      	movs	r0, #0
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	20001714 	.word	0x20001714
 800a080:	20001750 	.word	0x20001750

0800a084 <vTaskSwitchContext>:
{
 800a084:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a086:	4b20      	ldr	r3, [pc, #128]	; (800a108 <vTaskSwitchContext+0x84>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	b11b      	cbz	r3, 800a094 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800a08c:	4b1f      	ldr	r3, [pc, #124]	; (800a10c <vTaskSwitchContext+0x88>)
 800a08e:	2201      	movs	r2, #1
 800a090:	601a      	str	r2, [r3, #0]
}
 800a092:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 800a094:	4a1d      	ldr	r2, [pc, #116]	; (800a10c <vTaskSwitchContext+0x88>)
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a096:	4c1e      	ldr	r4, [pc, #120]	; (800a110 <vTaskSwitchContext+0x8c>)
		xYieldPending = pdFALSE;
 800a098:	6013      	str	r3, [r2, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a09a:	f7f8 fa31 	bl	8002500 <getRunTimeCounterValue>
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a09e:	491d      	ldr	r1, [pc, #116]	; (800a114 <vTaskSwitchContext+0x90>)
 800a0a0:	680d      	ldr	r5, [r1, #0]
 800a0a2:	42a8      	cmp	r0, r5
 800a0a4:	d904      	bls.n	800a0b0 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a0a6:	6822      	ldr	r2, [r4, #0]
 800a0a8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800a0aa:	1b5b      	subs	r3, r3, r5
 800a0ac:	4403      	add	r3, r0
 800a0ae:	6613      	str	r3, [r2, #96]	; 0x60
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b0:	4d19      	ldr	r5, [pc, #100]	; (800a118 <vTaskSwitchContext+0x94>)
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a0b2:	6008      	str	r0, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	4a19      	ldr	r2, [pc, #100]	; (800a11c <vTaskSwitchContext+0x98>)
 800a0b8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a0bc:	0080      	lsls	r0, r0, #2
 800a0be:	0099      	lsls	r1, r3, #2
 800a0c0:	5810      	ldr	r0, [r2, r0]
 800a0c2:	b940      	cbnz	r0, 800a0d6 <vTaskSwitchContext+0x52>
 800a0c4:	b1bb      	cbz	r3, 800a0f6 <vTaskSwitchContext+0x72>
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a0cc:	0099      	lsls	r1, r3, #2
 800a0ce:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d0f6      	beq.n	800a0c4 <vTaskSwitchContext+0x40>
 800a0d6:	4419      	add	r1, r3
 800a0d8:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6841      	ldr	r1, [r0, #4]
 800a0e0:	6849      	ldr	r1, [r1, #4]
 800a0e2:	6041      	str	r1, [r0, #4]
 800a0e4:	3208      	adds	r2, #8
 800a0e6:	4291      	cmp	r1, r2
 800a0e8:	bf04      	itt	eq
 800a0ea:	6849      	ldreq	r1, [r1, #4]
 800a0ec:	6041      	streq	r1, [r0, #4]
 800a0ee:	68ca      	ldr	r2, [r1, #12]
 800a0f0:	6022      	str	r2, [r4, #0]
 800a0f2:	602b      	str	r3, [r5, #0]
}
 800a0f4:	bd38      	pop	{r3, r4, r5, pc}
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a106:	e7fe      	b.n	800a106 <vTaskSwitchContext+0x82>
 800a108:	20001714 	.word	0x20001714
 800a10c:	20001798 	.word	0x20001798
 800a110:	2000129c 	.word	0x2000129c
 800a114:	20001708 	.word	0x20001708
 800a118:	2000171c 	.word	0x2000171c
 800a11c:	200012a8 	.word	0x200012a8

0800a120 <vTaskSuspend>:
	{
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a124:	4d2d      	ldr	r5, [pc, #180]	; (800a1dc <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 800a126:	f000 fe85 	bl	800ae34 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a12a:	2c00      	cmp	r4, #0
 800a12c:	d03a      	beq.n	800a1a4 <vTaskSuspend+0x84>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a12e:	1d26      	adds	r6, r4, #4
 800a130:	4630      	mov	r0, r6
 800a132:	f7fe fe5b 	bl	8008dec <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a136:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a138:	b11b      	cbz	r3, 800a142 <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a13a:	f104 0018 	add.w	r0, r4, #24
 800a13e:	f7fe fe55 	bl	8008dec <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a142:	4631      	mov	r1, r6
 800a144:	4826      	ldr	r0, [pc, #152]	; (800a1e0 <vTaskSuspend+0xc0>)
		if( xSchedulerRunning != pdFALSE )
 800a146:	4e27      	ldr	r6, [pc, #156]	; (800a1e4 <vTaskSuspend+0xc4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a148:	f7fe fe28 	bl	8008d9c <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a14c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 800a150:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a152:	bf04      	itt	eq
 800a154:	2300      	moveq	r3, #0
 800a156:	f884 3068 	strbeq.w	r3, [r4, #104]	; 0x68
		taskEXIT_CRITICAL();
 800a15a:	f000 fe8d 	bl	800ae78 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800a15e:	6833      	ldr	r3, [r6, #0]
 800a160:	b98b      	cbnz	r3, 800a186 <vTaskSuspend+0x66>
		if( pxTCB == pxCurrentTCB )
 800a162:	682b      	ldr	r3, [r5, #0]
 800a164:	42a3      	cmp	r3, r4
 800a166:	d000      	beq.n	800a16a <vTaskSuspend+0x4a>
	}
 800a168:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 800a16a:	6833      	ldr	r3, [r6, #0]
 800a16c:	b30b      	cbz	r3, 800a1b2 <vTaskSuspend+0x92>
				configASSERT( uxSchedulerSuspended == 0 );
 800a16e:	4b1e      	ldr	r3, [pc, #120]	; (800a1e8 <vTaskSuspend+0xc8>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	b333      	cbz	r3, 800a1c2 <vTaskSuspend+0xa2>
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	e7fe      	b.n	800a184 <vTaskSuspend+0x64>
			taskENTER_CRITICAL();
 800a186:	f000 fe55 	bl	800ae34 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a18a:	4b18      	ldr	r3, [pc, #96]	; (800a1ec <vTaskSuspend+0xcc>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	6812      	ldr	r2, [r2, #0]
 800a190:	b152      	cbz	r2, 800a1a8 <vTaskSuspend+0x88>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a192:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a194:	4b16      	ldr	r3, [pc, #88]	; (800a1f0 <vTaskSuspend+0xd0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a196:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a198:	68d2      	ldr	r2, [r2, #12]
 800a19a:	6852      	ldr	r2, [r2, #4]
 800a19c:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 800a19e:	f000 fe6b 	bl	800ae78 <vPortExitCritical>
 800a1a2:	e7de      	b.n	800a162 <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a1a4:	682c      	ldr	r4, [r5, #0]
 800a1a6:	e7c2      	b.n	800a12e <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1a8:	4b11      	ldr	r3, [pc, #68]	; (800a1f0 <vTaskSuspend+0xd0>)
 800a1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	e7f5      	b.n	800a19e <vTaskSuspend+0x7e>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a1b2:	490b      	ldr	r1, [pc, #44]	; (800a1e0 <vTaskSuspend+0xc0>)
 800a1b4:	4a0f      	ldr	r2, [pc, #60]	; (800a1f4 <vTaskSuspend+0xd4>)
 800a1b6:	6809      	ldr	r1, [r1, #0]
 800a1b8:	6812      	ldr	r2, [r2, #0]
 800a1ba:	4291      	cmp	r1, r2
 800a1bc:	d10a      	bne.n	800a1d4 <vTaskSuspend+0xb4>
					pxCurrentTCB = NULL;
 800a1be:	602b      	str	r3, [r5, #0]
	}
 800a1c0:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <vTaskSuspend+0xd8>)
 800a1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c8:	601a      	str	r2, [r3, #0]
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	f3bf 8f6f 	isb	sy
	}
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800a1d8:	f7ff bf54 	b.w	800a084 <vTaskSwitchContext>
 800a1dc:	2000129c 	.word	0x2000129c
 800a1e0:	2000176c 	.word	0x2000176c
 800a1e4:	20001768 	.word	0x20001768
 800a1e8:	20001714 	.word	0x20001714
 800a1ec:	200012a0 	.word	0x200012a0
 800a1f0:	20001748 	.word	0x20001748
 800a1f4:	2000170c 	.word	0x2000170c
 800a1f8:	e000ed04 	.word	0xe000ed04

0800a1fc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a1fc:	b1f0      	cbz	r0, 800a23c <vTaskPlaceOnEventList+0x40>
{
 800a1fe:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a200:	4d1c      	ldr	r5, [pc, #112]	; (800a274 <vTaskPlaceOnEventList+0x78>)
 800a202:	460c      	mov	r4, r1
 800a204:	6829      	ldr	r1, [r5, #0]
 800a206:	3118      	adds	r1, #24
 800a208:	f7fe fdd8 	bl	8008dbc <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800a20c:	4b1a      	ldr	r3, [pc, #104]	; (800a278 <vTaskPlaceOnEventList+0x7c>)
 800a20e:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a210:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a212:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a214:	2200      	movs	r2, #0
 800a216:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a21a:	3004      	adds	r0, #4
 800a21c:	f7fe fde6 	bl	8008dec <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a220:	1c63      	adds	r3, r4, #1
 800a222:	d014      	beq.n	800a24e <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	19a4      	adds	r4, r4, r6
 800a228:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a22a:	d317      	bcc.n	800a25c <vTaskPlaceOnEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a22c:	4b13      	ldr	r3, [pc, #76]	; (800a27c <vTaskPlaceOnEventList+0x80>)
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	6829      	ldr	r1, [r5, #0]
}
 800a232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a236:	3104      	adds	r1, #4
 800a238:	f7fe bdc0 	b.w	8008dbc <vListInsert>
 800a23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800a24c:	e7fe      	b.n	800a24c <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a24e:	6829      	ldr	r1, [r5, #0]
 800a250:	480b      	ldr	r0, [pc, #44]	; (800a280 <vTaskPlaceOnEventList+0x84>)
}
 800a252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a256:	3104      	adds	r1, #4
 800a258:	f7fe bda0 	b.w	8008d9c <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a25c:	4b09      	ldr	r3, [pc, #36]	; (800a284 <vTaskPlaceOnEventList+0x88>)
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	6829      	ldr	r1, [r5, #0]
 800a262:	3104      	adds	r1, #4
 800a264:	f7fe fdaa 	bl	8008dbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a268:	4b07      	ldr	r3, [pc, #28]	; (800a288 <vTaskPlaceOnEventList+0x8c>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800a26e:	bf38      	it	cc
 800a270:	601c      	strcc	r4, [r3, #0]
}
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	2000129c 	.word	0x2000129c
 800a278:	20001794 	.word	0x20001794
 800a27c:	200012a4 	.word	0x200012a4
 800a280:	2000176c 	.word	0x2000176c
 800a284:	200012a0 	.word	0x200012a0
 800a288:	20001748 	.word	0x20001748

0800a28c <vTaskPlaceOnEventListRestricted>:
	{
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800a28e:	b360      	cbz	r0, 800a2ea <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a290:	4d20      	ldr	r5, [pc, #128]	; (800a314 <vTaskPlaceOnEventListRestricted+0x88>)
 800a292:	460c      	mov	r4, r1
 800a294:	6829      	ldr	r1, [r5, #0]
 800a296:	4616      	mov	r6, r2
 800a298:	3118      	adds	r1, #24
 800a29a:	f7fe fd7f 	bl	8008d9c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800a29e:	4b1e      	ldr	r3, [pc, #120]	; (800a318 <vTaskPlaceOnEventListRestricted+0x8c>)
		if( xWaitIndefinitely != pdFALSE )
 800a2a0:	b99e      	cbnz	r6, 800a2ca <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 800a2a2:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a2a4:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2a6:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a2a8:	f883 606a 	strb.w	r6, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2ac:	3004      	adds	r0, #4
 800a2ae:	f7fe fd9d 	bl	8008dec <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2b2:	682b      	ldr	r3, [r5, #0]
 800a2b4:	19e4      	adds	r4, r4, r7
 800a2b6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2b8:	d320      	bcc.n	800a2fc <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2ba:	4b18      	ldr	r3, [pc, #96]	; (800a31c <vTaskPlaceOnEventListRestricted+0x90>)
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	6829      	ldr	r1, [r5, #0]
	}
 800a2c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2c4:	3104      	adds	r1, #4
 800a2c6:	f7fe bd79 	b.w	8008dbc <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800a2ca:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a2cc:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2ce:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2d6:	3004      	adds	r0, #4
 800a2d8:	f7fe fd88 	bl	8008dec <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2dc:	6829      	ldr	r1, [r5, #0]
 800a2de:	4810      	ldr	r0, [pc, #64]	; (800a320 <vTaskPlaceOnEventListRestricted+0x94>)
	}
 800a2e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2e4:	3104      	adds	r1, #4
 800a2e6:	f7fe bd59 	b.w	8008d9c <vListInsertEnd>
 800a2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800a2fa:	e7fe      	b.n	800a2fa <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2fc:	4b09      	ldr	r3, [pc, #36]	; (800a324 <vTaskPlaceOnEventListRestricted+0x98>)
 800a2fe:	6818      	ldr	r0, [r3, #0]
 800a300:	6829      	ldr	r1, [r5, #0]
 800a302:	3104      	adds	r1, #4
 800a304:	f7fe fd5a 	bl	8008dbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a308:	4b07      	ldr	r3, [pc, #28]	; (800a328 <vTaskPlaceOnEventListRestricted+0x9c>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800a30e:	bf38      	it	cc
 800a310:	601c      	strcc	r4, [r3, #0]
	}
 800a312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a314:	2000129c 	.word	0x2000129c
 800a318:	20001794 	.word	0x20001794
 800a31c:	200012a4 	.word	0x200012a4
 800a320:	2000176c 	.word	0x2000176c
 800a324:	200012a0 	.word	0x200012a0
 800a328:	20001748 	.word	0x20001748

0800a32c <xTaskRemoveFromEventList>:
{
 800a32c:	b510      	push	{r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a32e:	68c3      	ldr	r3, [r0, #12]
 800a330:	68dc      	ldr	r4, [r3, #12]
{
 800a332:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 800a334:	2c00      	cmp	r4, #0
 800a336:	d02c      	beq.n	800a392 <xTaskRemoveFromEventList+0x66>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a338:	f104 0118 	add.w	r1, r4, #24
 800a33c:	4608      	mov	r0, r1
 800a33e:	9101      	str	r1, [sp, #4]
 800a340:	f7fe fd54 	bl	8008dec <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a344:	4b17      	ldr	r3, [pc, #92]	; (800a3a4 <xTaskRemoveFromEventList+0x78>)
 800a346:	9901      	ldr	r1, [sp, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	b173      	cbz	r3, 800a36a <xTaskRemoveFromEventList+0x3e>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a34c:	4816      	ldr	r0, [pc, #88]	; (800a3a8 <xTaskRemoveFromEventList+0x7c>)
 800a34e:	f7fe fd25 	bl	8008d9c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a352:	4b16      	ldr	r3, [pc, #88]	; (800a3ac <xTaskRemoveFromEventList+0x80>)
 800a354:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800a35c:	bf85      	ittet	hi
 800a35e:	4b14      	ldrhi	r3, [pc, #80]	; (800a3b0 <xTaskRemoveFromEventList+0x84>)
 800a360:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 800a362:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800a364:	6018      	strhi	r0, [r3, #0]
}
 800a366:	b002      	add	sp, #8
 800a368:	bd10      	pop	{r4, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a36a:	1d21      	adds	r1, r4, #4
 800a36c:	4608      	mov	r0, r1
 800a36e:	9101      	str	r1, [sp, #4]
 800a370:	f7fe fd3c 	bl	8008dec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a374:	4a0f      	ldr	r2, [pc, #60]	; (800a3b4 <xTaskRemoveFromEventList+0x88>)
 800a376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a378:	6810      	ldr	r0, [r2, #0]
 800a37a:	9901      	ldr	r1, [sp, #4]
 800a37c:	4283      	cmp	r3, r0
 800a37e:	480e      	ldr	r0, [pc, #56]	; (800a3b8 <xTaskRemoveFromEventList+0x8c>)
 800a380:	bf88      	it	hi
 800a382:	6013      	strhi	r3, [r2, #0]
 800a384:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a388:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a38c:	f7fe fd06 	bl	8008d9c <vListInsertEnd>
 800a390:	e7df      	b.n	800a352 <xTaskRemoveFromEventList+0x26>
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800a3a2:	e7fe      	b.n	800a3a2 <xTaskRemoveFromEventList+0x76>
 800a3a4:	20001714 	.word	0x20001714
 800a3a8:	20001754 	.word	0x20001754
 800a3ac:	2000129c 	.word	0x2000129c
 800a3b0:	20001798 	.word	0x20001798
 800a3b4:	2000171c 	.word	0x2000171c
 800a3b8:	200012a8 	.word	0x200012a8

0800a3bc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3bc:	4a03      	ldr	r2, [pc, #12]	; (800a3cc <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3be:	4b04      	ldr	r3, [pc, #16]	; (800a3d0 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3c0:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	e9c0 2300 	strd	r2, r3, [r0]
}
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	2000174c 	.word	0x2000174c
 800a3d0:	20001794 	.word	0x20001794

0800a3d4 <xTaskCheckForTimeOut>:
{
 800a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800a3d6:	b318      	cbz	r0, 800a420 <xTaskCheckForTimeOut+0x4c>
	configASSERT( pxTicksToWait );
 800a3d8:	460e      	mov	r6, r1
 800a3da:	b1c1      	cbz	r1, 800a40e <xTaskCheckForTimeOut+0x3a>
	taskENTER_CRITICAL();
 800a3dc:	4605      	mov	r5, r0
 800a3de:	f000 fd29 	bl	800ae34 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a3e2:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800a470 <xTaskCheckForTimeOut+0x9c>
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800a3e6:	4b20      	ldr	r3, [pc, #128]	; (800a468 <xTaskCheckForTimeOut+0x94>)
		const TickType_t xConstTickCount = xTickCount;
 800a3e8:	f8dc 1000 	ldr.w	r1, [ip]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	f892 406a 	ldrb.w	r4, [r2, #106]	; 0x6a
 800a3f2:	b9f4      	cbnz	r4, 800a432 <xTaskCheckForTimeOut+0x5e>
			if( *pxTicksToWait == portMAX_DELAY )
 800a3f4:	6833      	ldr	r3, [r6, #0]
 800a3f6:	1c5a      	adds	r2, r3, #1
 800a3f8:	d020      	beq.n	800a43c <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a3fa:	4c1c      	ldr	r4, [pc, #112]	; (800a46c <xTaskCheckForTimeOut+0x98>)
 800a3fc:	e9d5 0200 	ldrd	r0, r2, [r5]
 800a400:	6827      	ldr	r7, [r4, #0]
 800a402:	42b8      	cmp	r0, r7
 800a404:	d01e      	beq.n	800a444 <xTaskCheckForTimeOut+0x70>
 800a406:	428a      	cmp	r2, r1
 800a408:	d81c      	bhi.n	800a444 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 800a40a:	2401      	movs	r4, #1
 800a40c:	e016      	b.n	800a43c <xTaskCheckForTimeOut+0x68>
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800a41e:	e7fe      	b.n	800a41e <xTaskCheckForTimeOut+0x4a>
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800a430:	e7fe      	b.n	800a430 <xTaskCheckForTimeOut+0x5c>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 800a43a:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800a43c:	f000 fd1c 	bl	800ae78 <vPortExitCritical>
}
 800a440:	4620      	mov	r0, r4
 800a442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a444:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a446:	42bb      	cmp	r3, r7
 800a448:	d909      	bls.n	800a45e <xTaskCheckForTimeOut+0x8a>
			*pxTicksToWait -= xElapsedTime;
 800a44a:	1a5b      	subs	r3, r3, r1
 800a44c:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a44e:	6821      	ldr	r1, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a450:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
 800a454:	6033      	str	r3, [r6, #0]
			xReturn = pdFALSE;
 800a456:	2400      	movs	r4, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a458:	e9c5 1200 	strd	r1, r2, [r5]
			xReturn = pdFALSE;
 800a45c:	e7ee      	b.n	800a43c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 800a45e:	2300      	movs	r3, #0
 800a460:	6033      	str	r3, [r6, #0]
			xReturn = pdTRUE;
 800a462:	2401      	movs	r4, #1
 800a464:	e7ea      	b.n	800a43c <xTaskCheckForTimeOut+0x68>
 800a466:	bf00      	nop
 800a468:	2000129c 	.word	0x2000129c
 800a46c:	2000174c 	.word	0x2000174c
 800a470:	20001794 	.word	0x20001794

0800a474 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a474:	4b01      	ldr	r3, [pc, #4]	; (800a47c <vTaskMissedYield+0x8>)
 800a476:	2201      	movs	r2, #1
 800a478:	601a      	str	r2, [r3, #0]
}
 800a47a:	4770      	bx	lr
 800a47c:	20001798 	.word	0x20001798

0800a480 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 800a480:	b168      	cbz	r0, 800a49e <uxTaskGetStackHighWaterMark+0x1e>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800a482:	6b03      	ldr	r3, [r0, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a484:	781a      	ldrb	r2, [r3, #0]
 800a486:	2aa5      	cmp	r2, #165	; 0xa5
 800a488:	d10f      	bne.n	800a4aa <uxTaskGetStackHighWaterMark+0x2a>
 800a48a:	f1c3 0101 	rsb	r1, r3, #1
			ulCount++;
 800a48e:	18c8      	adds	r0, r1, r3
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a490:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800a494:	2aa5      	cmp	r2, #165	; 0xa5
 800a496:	d0fa      	beq.n	800a48e <uxTaskGetStackHighWaterMark+0xe>
 800a498:	f3c0 008f 	ubfx	r0, r0, #2, #16
 800a49c:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
 800a49e:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <uxTaskGetStackHighWaterMark+0x30>)
 800a4a0:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800a4a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a4a4:	781a      	ldrb	r2, [r3, #0]
 800a4a6:	2aa5      	cmp	r2, #165	; 0xa5
 800a4a8:	d0ef      	beq.n	800a48a <uxTaskGetStackHighWaterMark+0xa>
 800a4aa:	2000      	movs	r0, #0
	}
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	2000129c 	.word	0x2000129c

0800a4b4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <xTaskGetSchedulerState+0x18>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	b133      	cbz	r3, 800a4c8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ba:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <xTaskGetSchedulerState+0x1c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4c0:	bf0c      	ite	eq
 800a4c2:	2002      	moveq	r0, #2
 800a4c4:	2000      	movne	r0, #0
 800a4c6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4c8:	2001      	movs	r0, #1
	}
 800a4ca:	4770      	bx	lr
 800a4cc:	20001768 	.word	0x20001768
 800a4d0:	20001714 	.word	0x20001714

0800a4d4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a4d4:	b1d0      	cbz	r0, 800a50c <xTaskPriorityDisinherit+0x38>
	{
 800a4d6:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800a4d8:	4b1e      	ldr	r3, [pc, #120]	; (800a554 <xTaskPriorityDisinherit+0x80>)
 800a4da:	681c      	ldr	r4, [r3, #0]
 800a4dc:	4284      	cmp	r4, r0
	{
 800a4de:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 800a4e0:	d008      	beq.n	800a4f4 <xTaskPriorityDisinherit+0x20>
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	e7fe      	b.n	800a4f2 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4f6:	b15b      	cbz	r3, 800a510 <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a4fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
			( pxTCB->uxMutexesHeld )--;
 800a4fc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4fe:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800a500:	65a3      	str	r3, [r4, #88]	; 0x58
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a502:	d000      	beq.n	800a506 <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a504:	b16b      	cbz	r3, 800a522 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 800a506:	2000      	movs	r0, #0
	}
 800a508:	b003      	add	sp, #12
 800a50a:	bd30      	pop	{r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800a50c:	2000      	movs	r0, #0
	}
 800a50e:	4770      	bx	lr
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800a520:	e7fe      	b.n	800a520 <xTaskPriorityDisinherit+0x4c>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a522:	1d21      	adds	r1, r4, #4
 800a524:	4608      	mov	r0, r1
 800a526:	9101      	str	r1, [sp, #4]
 800a528:	f7fe fc60 	bl	8008dec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a52c:	4a0a      	ldr	r2, [pc, #40]	; (800a558 <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a52e:	6d63      	ldr	r3, [r4, #84]	; 0x54
					prvAddTaskToReadyList( pxTCB );
 800a530:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a532:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800a534:	4283      	cmp	r3, r0
 800a536:	4809      	ldr	r0, [pc, #36]	; (800a55c <xTaskPriorityDisinherit+0x88>)
 800a538:	bf88      	it	hi
 800a53a:	6013      	strhi	r3, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a53c:	f1c3 0538 	rsb	r5, r3, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 800a540:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a544:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a548:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a54a:	61a5      	str	r5, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a54c:	f7fe fc26 	bl	8008d9c <vListInsertEnd>
					xReturn = pdTRUE;
 800a550:	2001      	movs	r0, #1
		return xReturn;
 800a552:	e7d9      	b.n	800a508 <xTaskPriorityDisinherit+0x34>
 800a554:	2000129c 	.word	0x2000129c
 800a558:	2000171c 	.word	0x2000171c
 800a55c:	200012a8 	.word	0x200012a8

0800a560 <ulTaskNotifyTake>:
	{
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a562:	4c29      	ldr	r4, [pc, #164]	; (800a608 <ulTaskNotifyTake+0xa8>)
	{
 800a564:	4606      	mov	r6, r0
 800a566:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 800a568:	f000 fc64 	bl	800ae34 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a570:	b923      	cbnz	r3, 800a57c <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a572:	6822      	ldr	r2, [r4, #0]
 800a574:	2101      	movs	r1, #1
 800a576:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
				if( xTicksToWait > ( TickType_t ) 0 )
 800a57a:	b9ad      	cbnz	r5, 800a5a8 <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 800a57c:	f000 fc7c 	bl	800ae78 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a580:	f000 fc58 	bl	800ae34 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	6e5d      	ldr	r5, [r3, #100]	; 0x64
			if( ulReturn != 0UL )
 800a588:	b11d      	cbz	r5, 800a592 <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a58a:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 800a58c:	b14e      	cbz	r6, 800a5a2 <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a58e:	2200      	movs	r2, #0
 800a590:	665a      	str	r2, [r3, #100]	; 0x64
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		taskEXIT_CRITICAL();
 800a59a:	f000 fc6d 	bl	800ae78 <vPortExitCritical>
	}
 800a59e:	4628      	mov	r0, r5
 800a5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a5a2:	1e6a      	subs	r2, r5, #1
 800a5a4:	665a      	str	r2, [r3, #100]	; 0x64
 800a5a6:	e7f4      	b.n	800a592 <ulTaskNotifyTake+0x32>
const TickType_t xConstTickCount = xTickCount;
 800a5a8:	4a18      	ldr	r2, [pc, #96]	; (800a60c <ulTaskNotifyTake+0xac>)
 800a5aa:	6817      	ldr	r7, [r2, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a5ac:	6822      	ldr	r2, [r4, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5ae:	6820      	ldr	r0, [r4, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a5b0:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5b4:	3004      	adds	r0, #4
 800a5b6:	f7fe fc19 	bl	8008dec <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5ba:	1c6b      	adds	r3, r5, #1
 800a5bc:	d012      	beq.n	800a5e4 <ulTaskNotifyTake+0x84>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	19ed      	adds	r5, r5, r7
 800a5c2:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5c4:	d314      	bcc.n	800a5f0 <ulTaskNotifyTake+0x90>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5c6:	4b12      	ldr	r3, [pc, #72]	; (800a610 <ulTaskNotifyTake+0xb0>)
 800a5c8:	6818      	ldr	r0, [r3, #0]
 800a5ca:	6821      	ldr	r1, [r4, #0]
 800a5cc:	3104      	adds	r1, #4
 800a5ce:	f7fe fbf5 	bl	8008dbc <vListInsert>
					portYIELD_WITHIN_API();
 800a5d2:	4b10      	ldr	r3, [pc, #64]	; (800a614 <ulTaskNotifyTake+0xb4>)
 800a5d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	e7cb      	b.n	800a57c <ulTaskNotifyTake+0x1c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5e4:	6821      	ldr	r1, [r4, #0]
 800a5e6:	480c      	ldr	r0, [pc, #48]	; (800a618 <ulTaskNotifyTake+0xb8>)
 800a5e8:	3104      	adds	r1, #4
 800a5ea:	f7fe fbd7 	bl	8008d9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5ee:	e7f0      	b.n	800a5d2 <ulTaskNotifyTake+0x72>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5f0:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <ulTaskNotifyTake+0xbc>)
 800a5f2:	6818      	ldr	r0, [r3, #0]
 800a5f4:	6821      	ldr	r1, [r4, #0]
 800a5f6:	3104      	adds	r1, #4
 800a5f8:	f7fe fbe0 	bl	8008dbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5fc:	4b08      	ldr	r3, [pc, #32]	; (800a620 <ulTaskNotifyTake+0xc0>)
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	4295      	cmp	r5, r2
					xNextTaskUnblockTime = xTimeToWake;
 800a602:	bf38      	it	cc
 800a604:	601d      	strcc	r5, [r3, #0]
 800a606:	e7e4      	b.n	800a5d2 <ulTaskNotifyTake+0x72>
 800a608:	2000129c 	.word	0x2000129c
 800a60c:	20001794 	.word	0x20001794
 800a610:	200012a4 	.word	0x200012a4
 800a614:	e000ed04 	.word	0xe000ed04
 800a618:	2000176c 	.word	0x2000176c
 800a61c:	200012a0 	.word	0x200012a0
 800a620:	20001748 	.word	0x20001748

0800a624 <xTaskGenericNotify>:
		configASSERT( xTaskToNotify );
 800a624:	b1b8      	cbz	r0, 800a656 <xTaskGenericNotify+0x32>
	{
 800a626:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a628:	461f      	mov	r7, r3
 800a62a:	b083      	sub	sp, #12
 800a62c:	460d      	mov	r5, r1
 800a62e:	4616      	mov	r6, r2
 800a630:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800a632:	f000 fbff 	bl	800ae34 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800a636:	b10f      	cbz	r7, 800a63c <xTaskGenericNotify+0x18>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a63a:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a63c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a640:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a642:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a644:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
			switch( eAction )
 800a648:	2e04      	cmp	r6, #4
 800a64a:	d84f      	bhi.n	800a6ec <xTaskGenericNotify+0xc8>
 800a64c:	e8df f006 	tbb	[pc, r6]
 800a650:	3b350c0f 	.word	0x3b350c0f
 800a654:	39          	.byte	0x39
 800a655:	00          	.byte	0x00
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800a666:	e7fe      	b.n	800a666 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue |= ulValue;
 800a668:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a66a:	4315      	orrs	r5, r2
 800a66c:	6665      	str	r5, [r4, #100]	; 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d005      	beq.n	800a67e <xTaskGenericNotify+0x5a>
					taskYIELD_IF_USING_PREEMPTION();
 800a672:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 800a674:	f000 fc00 	bl	800ae78 <vPortExitCritical>
	}
 800a678:	4620      	mov	r0, r4
 800a67a:	b003      	add	sp, #12
 800a67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a67e:	1d21      	adds	r1, r4, #4
 800a680:	4608      	mov	r0, r1
 800a682:	9101      	str	r1, [sp, #4]
 800a684:	f7fe fbb2 	bl	8008dec <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a688:	4a1e      	ldr	r2, [pc, #120]	; (800a704 <xTaskGenericNotify+0xe0>)
 800a68a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a68c:	6810      	ldr	r0, [r2, #0]
 800a68e:	9901      	ldr	r1, [sp, #4]
 800a690:	4283      	cmp	r3, r0
 800a692:	481d      	ldr	r0, [pc, #116]	; (800a708 <xTaskGenericNotify+0xe4>)
 800a694:	bf88      	it	hi
 800a696:	6013      	strhi	r3, [r2, #0]
 800a698:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a69c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a6a0:	f7fe fb7c 	bl	8008d9c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a6a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a6a6:	b183      	cbz	r3, 800a6ca <xTaskGenericNotify+0xa6>
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	e7fe      	b.n	800a6b8 <xTaskGenericNotify+0x94>
					( pxTCB->ulNotifiedValue )++;
 800a6ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6bc:	3201      	adds	r2, #1
 800a6be:	6662      	str	r2, [r4, #100]	; 0x64
					break;
 800a6c0:	e7d5      	b.n	800a66e <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d010      	beq.n	800a6e8 <xTaskGenericNotify+0xc4>
						pxTCB->ulNotifiedValue = ulValue;
 800a6c6:	6665      	str	r5, [r4, #100]	; 0x64
 800a6c8:	e7d1      	b.n	800a66e <xTaskGenericNotify+0x4a>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a6ca:	4b10      	ldr	r3, [pc, #64]	; (800a70c <xTaskGenericNotify+0xe8>)
 800a6cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d9cd      	bls.n	800a672 <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 800a6d6:	4b0e      	ldr	r3, [pc, #56]	; (800a710 <xTaskGenericNotify+0xec>)
 800a6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	e7c4      	b.n	800a672 <xTaskGenericNotify+0x4e>
						xReturn = pdFAIL;
 800a6e8:	2400      	movs	r4, #0
 800a6ea:	e7c3      	b.n	800a674 <xTaskGenericNotify+0x50>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a6ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6ee:	3201      	adds	r2, #1
 800a6f0:	d0bd      	beq.n	800a66e <xTaskGenericNotify+0x4a>
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	e7fe      	b.n	800a702 <xTaskGenericNotify+0xde>
 800a704:	2000171c 	.word	0x2000171c
 800a708:	200012a8 	.word	0x200012a8
 800a70c:	2000129c 	.word	0x2000129c
 800a710:	e000ed04 	.word	0xe000ed04

0800a714 <xTaskGenericNotifyFromISR>:
	{
 800a714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a718:	b083      	sub	sp, #12
 800a71a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		configASSERT( xTaskToNotify );
 800a71c:	b318      	cbz	r0, 800a766 <xTaskGenericNotifyFromISR+0x52>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a71e:	460d      	mov	r5, r1
 800a720:	4690      	mov	r8, r2
 800a722:	4699      	mov	r9, r3
 800a724:	4604      	mov	r4, r0
 800a726:	f000 fcbd 	bl	800b0a4 <vPortValidateInterruptPriority>
	__asm volatile
 800a72a:	f3ef 8611 	mrs	r6, BASEPRI
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800a73e:	f1b9 0f00 	cmp.w	r9, #0
 800a742:	d002      	beq.n	800a74a <xTaskGenericNotifyFromISR+0x36>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a746:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a74a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a74e:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a750:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a752:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
			switch( eAction )
 800a756:	f1b8 0f04 	cmp.w	r8, #4
 800a75a:	d856      	bhi.n	800a80a <xTaskGenericNotifyFromISR+0xf6>
 800a75c:	e8df f008 	tbb	[pc, r8]
 800a760:	28220c0f 	.word	0x28220c0f
 800a764:	26          	.byte	0x26
 800a765:	00          	.byte	0x00
	__asm volatile
 800a766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76a:	f383 8811 	msr	BASEPRI, r3
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800a776:	e7fe      	b.n	800a776 <xTaskGenericNotifyFromISR+0x62>
					pxTCB->ulNotifiedValue |= ulValue;
 800a778:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a77a:	4315      	orrs	r5, r2
 800a77c:	6665      	str	r5, [r4, #100]	; 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d005      	beq.n	800a78e <xTaskGenericNotifyFromISR+0x7a>
 800a782:	2001      	movs	r0, #1
	__asm volatile
 800a784:	f386 8811 	msr	BASEPRI, r6
	}
 800a788:	b003      	add	sp, #12
 800a78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a78e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a790:	b183      	cbz	r3, 800a7b4 <xTaskGenericNotifyFromISR+0xa0>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	e7fe      	b.n	800a7a2 <xTaskGenericNotifyFromISR+0x8e>
					( pxTCB->ulNotifiedValue )++;
 800a7a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7a6:	3201      	adds	r2, #1
 800a7a8:	6662      	str	r2, [r4, #100]	; 0x64
					break;
 800a7aa:	e7e8      	b.n	800a77e <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d02a      	beq.n	800a806 <xTaskGenericNotifyFromISR+0xf2>
						pxTCB->ulNotifiedValue = ulValue;
 800a7b0:	6665      	str	r5, [r4, #100]	; 0x64
 800a7b2:	e7e4      	b.n	800a77e <xTaskGenericNotifyFromISR+0x6a>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7b4:	4b1b      	ldr	r3, [pc, #108]	; (800a824 <xTaskGenericNotifyFromISR+0x110>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	b9fb      	cbnz	r3, 800a7fa <xTaskGenericNotifyFromISR+0xe6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7ba:	1d21      	adds	r1, r4, #4
 800a7bc:	4608      	mov	r0, r1
 800a7be:	9101      	str	r1, [sp, #4]
 800a7c0:	f7fe fb14 	bl	8008dec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7c4:	4a18      	ldr	r2, [pc, #96]	; (800a828 <xTaskGenericNotifyFromISR+0x114>)
 800a7c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a7c8:	6810      	ldr	r0, [r2, #0]
 800a7ca:	9901      	ldr	r1, [sp, #4]
 800a7cc:	4283      	cmp	r3, r0
 800a7ce:	4817      	ldr	r0, [pc, #92]	; (800a82c <xTaskGenericNotifyFromISR+0x118>)
 800a7d0:	bf88      	it	hi
 800a7d2:	6013      	strhi	r3, [r2, #0]
 800a7d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a7d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a7dc:	f7fe fade 	bl	8008d9c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7e0:	4b13      	ldr	r3, [pc, #76]	; (800a830 <xTaskGenericNotifyFromISR+0x11c>)
 800a7e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d9ca      	bls.n	800a782 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800a7ec:	b10f      	cbz	r7, 800a7f2 <xTaskGenericNotifyFromISR+0xde>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	603b      	str	r3, [r7, #0]
					xYieldPending = pdTRUE;
 800a7f2:	4b10      	ldr	r3, [pc, #64]	; (800a834 <xTaskGenericNotifyFromISR+0x120>)
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	6018      	str	r0, [r3, #0]
 800a7f8:	e7c4      	b.n	800a784 <xTaskGenericNotifyFromISR+0x70>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a7fa:	480f      	ldr	r0, [pc, #60]	; (800a838 <xTaskGenericNotifyFromISR+0x124>)
 800a7fc:	f104 0118 	add.w	r1, r4, #24
 800a800:	f7fe facc 	bl	8008d9c <vListInsertEnd>
 800a804:	e7ec      	b.n	800a7e0 <xTaskGenericNotifyFromISR+0xcc>
						xReturn = pdFAIL;
 800a806:	2000      	movs	r0, #0
 800a808:	e7bc      	b.n	800a784 <xTaskGenericNotifyFromISR+0x70>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a80a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a80c:	3201      	adds	r2, #1
 800a80e:	d0b6      	beq.n	800a77e <xTaskGenericNotifyFromISR+0x6a>
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	e7fe      	b.n	800a820 <xTaskGenericNotifyFromISR+0x10c>
 800a822:	bf00      	nop
 800a824:	20001714 	.word	0x20001714
 800a828:	2000171c 	.word	0x2000171c
 800a82c:	200012a8 	.word	0x200012a8
 800a830:	2000129c 	.word	0x2000129c
 800a834:	20001798 	.word	0x20001798
 800a838:	20001754 	.word	0x20001754

0800a83c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a83c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a840:	4e22      	ldr	r6, [pc, #136]	; (800a8cc <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 800a842:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a8d4 <prvSwitchTimerLists+0x98>
{
 800a846:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800a848:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a84c:	e00d      	b.n	800a86a <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a84e:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a850:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a852:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a854:	1d25      	adds	r5, r4, #4
 800a856:	4628      	mov	r0, r5
 800a858:	f7fe fac8 	bl	8008dec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a85c:	6a23      	ldr	r3, [r4, #32]
 800a85e:	4620      	mov	r0, r4
 800a860:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a862:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a866:	075b      	lsls	r3, r3, #29
 800a868:	d40a      	bmi.n	800a880 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a86a:	6833      	ldr	r3, [r6, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	2a00      	cmp	r2, #0
 800a870:	d1ed      	bne.n	800a84e <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800a872:	4a17      	ldr	r2, [pc, #92]	; (800a8d0 <prvSwitchTimerLists+0x94>)
 800a874:	6811      	ldr	r1, [r2, #0]
 800a876:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 800a878:	6013      	str	r3, [r2, #0]
}
 800a87a:	b005      	add	sp, #20
 800a87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a880:	69a3      	ldr	r3, [r4, #24]
 800a882:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800a884:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a886:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 800a888:	d205      	bcs.n	800a896 <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a88a:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a88c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a88e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a890:	f7fe fa94 	bl	8008dbc <vListInsert>
 800a894:	e7e9      	b.n	800a86a <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 800a896:	f8d9 3000 	ldr.w	r3, [r9]
 800a89a:	b16b      	cbz	r3, 800a8b8 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a89c:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a8a0:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a8a2:	f7ff fe07 	bl	800a4b4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f8d9 0000 	ldr.w	r0, [r9]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	4669      	mov	r1, sp
 800a8b0:	f7fe fb60 	bl	8008f74 <xQueueGenericSend>
				configASSERT( xResult );
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d1d8      	bne.n	800a86a <prvSwitchTimerLists+0x2e>
 800a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	e7fe      	b.n	800a8c8 <prvSwitchTimerLists+0x8c>
 800a8ca:	bf00      	nop
 800a8cc:	2000179c 	.word	0x2000179c
 800a8d0:	200017a0 	.word	0x200017a0
 800a8d4:	200018c0 	.word	0x200018c0

0800a8d8 <prvTimerTask>:
{
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	4e9e      	ldr	r6, [pc, #632]	; (800ab58 <prvTimerTask+0x280>)
 800a8de:	4d9f      	ldr	r5, [pc, #636]	; (800ab5c <prvTimerTask+0x284>)
 800a8e0:	4c9f      	ldr	r4, [pc, #636]	; (800ab60 <prvTimerTask+0x288>)
 800a8e2:	b08b      	sub	sp, #44	; 0x2c
 800a8e4:	f04f 0800 	mov.w	r8, #0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8e8:	6833      	ldr	r3, [r6, #0]
 800a8ea:	f8d3 a000 	ldr.w	sl, [r3]
 800a8ee:	f1ba 0f00 	cmp.w	sl, #0
 800a8f2:	f000 80ad 	beq.w	800aa50 <prvTimerTask+0x178>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 800a8fc:	f7ff fb94 	bl	800a028 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800a900:	f7ff fbaa 	bl	800a058 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800a904:	682a      	ldr	r2, [r5, #0]
 800a906:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 800a908:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800a90a:	f0c0 80b2 	bcc.w	800aa72 <prvTimerTask+0x19a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a90e:	4550      	cmp	r0, sl
	xLastTime = xTimeNow;
 800a910:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a912:	f080 80b8 	bcs.w	800aa86 <prvTimerTask+0x1ae>
 800a916:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a918:	6820      	ldr	r0, [r4, #0]
 800a91a:	ebaa 0109 	sub.w	r1, sl, r9
 800a91e:	f7fe fed5 	bl	80096cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a922:	f7ff fb89 	bl	800a038 <xTaskResumeAll>
 800a926:	b938      	cbnz	r0, 800a938 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 800a928:	4b8e      	ldr	r3, [pc, #568]	; (800ab64 <prvTimerTask+0x28c>)
 800a92a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a92e:	601a      	str	r2, [r3, #0]
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a938:	6820      	ldr	r0, [r4, #0]
 800a93a:	2200      	movs	r2, #0
 800a93c:	a902      	add	r1, sp, #8
 800a93e:	f7fe fd07 	bl	8009350 <xQueueReceive>
 800a942:	2800      	cmp	r0, #0
 800a944:	d0d0      	beq.n	800a8e8 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a946:	9b02      	ldr	r3, [sp, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	db78      	blt.n	800aa3e <prvTimerTask+0x166>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a94c:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	b113      	cbz	r3, 800a958 <prvTimerTask+0x80>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a952:	1d38      	adds	r0, r7, #4
 800a954:	f7fe fa4a 	bl	8008dec <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800a958:	f7ff fb7e 	bl	800a058 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 800a960:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800a962:	f0c0 808d 	bcc.w	800aa80 <prvTimerTask+0x1a8>
	xLastTime = xTimeNow;
 800a966:	9b02      	ldr	r3, [sp, #8]
 800a968:	f8c5 9000 	str.w	r9, [r5]
			switch( xMessage.xMessageID )
 800a96c:	2b09      	cmp	r3, #9
 800a96e:	d8e3      	bhi.n	800a938 <prvTimerTask+0x60>
 800a970:	e8df f003 	tbb	[pc, r3]
 800a974:	55050505 	.word	0x55050505
 800a978:	05055c3e 	.word	0x05055c3e
 800a97c:	3e55      	.short	0x3e55
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a97e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a982:	9b03      	ldr	r3, [sp, #12]
 800a984:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a986:	613f      	str	r7, [r7, #16]
 800a988:	1898      	adds	r0, r3, r2
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a98a:	f041 0101 	orr.w	r1, r1, #1
 800a98e:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a992:	bf2c      	ite	cs
 800a994:	2101      	movcs	r1, #1
 800a996:	2100      	movcc	r1, #0
	if( xNextExpiryTime <= xTimeNow )
 800a998:	4548      	cmp	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a99a:	6078      	str	r0, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800a99c:	f200 808e 	bhi.w	800aabc <prvTimerTask+0x1e4>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9a0:	eba9 0303 	sub.w	r3, r9, r3
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	f200 8097 	bhi.w	800aad8 <prvTimerTask+0x200>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9aa:	6a3b      	ldr	r3, [r7, #32]
 800a9ac:	4638      	mov	r0, r7
 800a9ae:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9b4:	075b      	lsls	r3, r3, #29
 800a9b6:	d5bf      	bpl.n	800a938 <prvTimerTask+0x60>
	if( xTimerQueue != NULL )
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	b183      	cbz	r3, 800a9de <prvTimerTask+0x106>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9bc:	69ba      	ldr	r2, [r7, #24]
 800a9be:	9b03      	ldr	r3, [sp, #12]
		xMessage.xMessageID = xCommandID;
 800a9c0:	f8cd 8018 	str.w	r8, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9c4:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9c6:	e9cd 3707 	strd	r3, r7, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9ca:	f7ff fd73 	bl	800a4b4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	a906      	add	r1, sp, #24
 800a9d6:	f7fe facd 	bl	8008f74 <xQueueGenericSend>
							configASSERT( xResult );
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d1ac      	bne.n	800a938 <prvTimerTask+0x60>
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	e7fe      	b.n	800a9ee <prvTimerTask+0x116>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9f4:	9b03      	ldr	r3, [sp, #12]
 800a9f6:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9f8:	f042 0201 	orr.w	r2, r2, #1
 800a9fc:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 809a 	beq.w	800ab3a <prvTimerTask+0x262>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa06:	444b      	add	r3, r9
	if( xNextExpiryTime <= xTimeNow )
 800aa08:	454b      	cmp	r3, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aa0a:	607b      	str	r3, [r7, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa0c:	bf96      	itet	ls
 800aa0e:	4b56      	ldrls	r3, [pc, #344]	; (800ab68 <prvTimerTask+0x290>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa10:	6830      	ldrhi	r0, [r6, #0]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa12:	6818      	ldrls	r0, [r3, #0]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa14:	613f      	str	r7, [r7, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa16:	1d39      	adds	r1, r7, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa18:	f7fe f9d0 	bl	8008dbc <vListInsert>
 800aa1c:	e78c      	b.n	800a938 <prvTimerTask+0x60>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa22:	f023 0301 	bic.w	r3, r3, #1
 800aa26:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 800aa2a:	e785      	b.n	800a938 <prvTimerTask+0x60>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa30:	079a      	lsls	r2, r3, #30
 800aa32:	d54d      	bpl.n	800aad0 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa34:	f023 0301 	bic.w	r3, r3, #1
 800aa38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800aa3c:	e77c      	b.n	800a938 <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa44:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa46:	9b02      	ldr	r3, [sp, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f6ff af75 	blt.w	800a938 <prvTimerTask+0x60>
 800aa4e:	e77d      	b.n	800a94c <prvTimerTask+0x74>
	vTaskSuspendAll();
 800aa50:	f7ff faea 	bl	800a028 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800aa54:	f7ff fb00 	bl	800a058 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800aa58:	682a      	ldr	r2, [r5, #0]
 800aa5a:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 800aa5c:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800aa5e:	d808      	bhi.n	800aa72 <prvTimerTask+0x19a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa60:	4b41      	ldr	r3, [pc, #260]	; (800ab68 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
 800aa62:	f8c5 9000 	str.w	r9, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	fab2 f282 	clz	r2, r2
 800aa6e:	0952      	lsrs	r2, r2, #5
 800aa70:	e752      	b.n	800a918 <prvTimerTask+0x40>
		prvSwitchTimerLists();
 800aa72:	f7ff fee3 	bl	800a83c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800aa76:	f8c5 9000 	str.w	r9, [r5]
			( void ) xTaskResumeAll();
 800aa7a:	f7ff fadd 	bl	800a038 <xTaskResumeAll>
 800aa7e:	e75b      	b.n	800a938 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800aa80:	f7ff fedc 	bl	800a83c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa84:	e76f      	b.n	800a966 <prvTimerTask+0x8e>
				( void ) xTaskResumeAll();
 800aa86:	f7ff fad7 	bl	800a038 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8a:	6832      	ldr	r2, [r6, #0]
 800aa8c:	68d2      	ldr	r2, [r2, #12]
 800aa8e:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa92:	f10b 0104 	add.w	r1, fp, #4
 800aa96:	4608      	mov	r0, r1
 800aa98:	9101      	str	r1, [sp, #4]
 800aa9a:	f7fe f9a7 	bl	8008dec <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa9e:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 800aaa2:	9901      	ldr	r1, [sp, #4]
 800aaa4:	f010 0f04 	tst.w	r0, #4
 800aaa8:	d11c      	bne.n	800aae4 <prvTimerTask+0x20c>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaaa:	f020 0001 	bic.w	r0, r0, #1
 800aaae:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aab2:	f8db 3020 	ldr.w	r3, [fp, #32]
 800aab6:	4658      	mov	r0, fp
 800aab8:	4798      	blx	r3
}
 800aaba:	e73d      	b.n	800a938 <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aabc:	454b      	cmp	r3, r9
 800aabe:	d902      	bls.n	800aac6 <prvTimerTask+0x1ee>
 800aac0:	2900      	cmp	r1, #0
 800aac2:	f43f af72 	beq.w	800a9aa <prvTimerTask+0xd2>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aac6:	6830      	ldr	r0, [r6, #0]
 800aac8:	1d39      	adds	r1, r7, #4
 800aaca:	f7fe f977 	bl	8008dbc <vListInsert>
	return xProcessTimerNow;
 800aace:	e733      	b.n	800a938 <prvTimerTask+0x60>
							vPortFree( pxTimer );
 800aad0:	4638      	mov	r0, r7
 800aad2:	f000 fbd1 	bl	800b278 <vPortFree>
 800aad6:	e72f      	b.n	800a938 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aad8:	4b23      	ldr	r3, [pc, #140]	; (800ab68 <prvTimerTask+0x290>)
 800aada:	1d39      	adds	r1, r7, #4
 800aadc:	6818      	ldr	r0, [r3, #0]
 800aade:	f7fe f96d 	bl	8008dbc <vListInsert>
	return xProcessTimerNow;
 800aae2:	e729      	b.n	800a938 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aae4:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aae8:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aaec:	eb0a 0300 	add.w	r3, sl, r0
	if( xNextExpiryTime <= xTimeNow )
 800aaf0:	4599      	cmp	r9, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aaf2:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800aaf6:	d203      	bcs.n	800ab00 <prvTimerTask+0x228>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aaf8:	6830      	ldr	r0, [r6, #0]
 800aafa:	f7fe f95f 	bl	8008dbc <vListInsert>
	return xProcessTimerNow;
 800aafe:	e7d8      	b.n	800aab2 <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab00:	eba9 030a 	sub.w	r3, r9, sl
 800ab04:	4298      	cmp	r0, r3
 800ab06:	d821      	bhi.n	800ab4c <prvTimerTask+0x274>
	if( xTimerQueue != NULL )
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	b16b      	cbz	r3, 800ab28 <prvTimerTask+0x250>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab0c:	e9cd 8a06 	strd	r8, sl, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab10:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab14:	f7ff fcce 	bl	800a4b4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab18:	2300      	movs	r3, #0
 800ab1a:	6820      	ldr	r0, [r4, #0]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	a906      	add	r1, sp, #24
 800ab20:	f7fe fa28 	bl	8008f74 <xQueueGenericSend>
			configASSERT( xResult );
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d1c4      	bne.n	800aab2 <prvTimerTask+0x1da>
 800ab28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	e7fe      	b.n	800ab38 <prvTimerTask+0x260>
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab4a:	e7fe      	b.n	800ab4a <prvTimerTask+0x272>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ab4c:	4b06      	ldr	r3, [pc, #24]	; (800ab68 <prvTimerTask+0x290>)
 800ab4e:	6818      	ldr	r0, [r3, #0]
 800ab50:	f7fe f934 	bl	8008dbc <vListInsert>
	return xProcessTimerNow;
 800ab54:	e7ad      	b.n	800aab2 <prvTimerTask+0x1da>
 800ab56:	bf00      	nop
 800ab58:	2000179c 	.word	0x2000179c
 800ab5c:	2000186c 	.word	0x2000186c
 800ab60:	200018c0 	.word	0x200018c0
 800ab64:	e000ed04 	.word	0xe000ed04
 800ab68:	200017a0 	.word	0x200017a0

0800ab6c <xTimerCreateTimerTask>:
{
 800ab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ab6e:	4c23      	ldr	r4, [pc, #140]	; (800abfc <xTimerCreateTimerTask+0x90>)
{
 800ab70:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 800ab72:	f000 f95f 	bl	800ae34 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ab76:	6827      	ldr	r7, [r4, #0]
 800ab78:	b337      	cbz	r7, 800abc8 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab7a:	f000 f97d 	bl	800ae78 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	b1cb      	cbz	r3, 800abb6 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab82:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab84:	aa07      	add	r2, sp, #28
 800ab86:	a906      	add	r1, sp, #24
 800ab88:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab8a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab8e:	f7fe f8e5 	bl	8008d5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab92:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 800ab96:	2202      	movs	r2, #2
 800ab98:	e9cd 2100 	strd	r2, r1, [sp]
 800ab9c:	9302      	str	r3, [sp, #8]
 800ab9e:	9a07      	ldr	r2, [sp, #28]
 800aba0:	4917      	ldr	r1, [pc, #92]	; (800ac00 <xTimerCreateTimerTask+0x94>)
 800aba2:	4818      	ldr	r0, [pc, #96]	; (800ac04 <xTimerCreateTimerTask+0x98>)
 800aba4:	4623      	mov	r3, r4
 800aba6:	f7ff f865 	bl	8009c74 <xTaskCreateStatic>
 800abaa:	4b17      	ldr	r3, [pc, #92]	; (800ac08 <xTimerCreateTimerTask+0x9c>)
 800abac:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800abae:	b110      	cbz	r0, 800abb6 <xTimerCreateTimerTask+0x4a>
}
 800abb0:	2001      	movs	r0, #1
 800abb2:	b009      	add	sp, #36	; 0x24
 800abb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800abc6:	e7fe      	b.n	800abc6 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 800abc8:	4e10      	ldr	r6, [pc, #64]	; (800ac0c <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 800abca:	4d11      	ldr	r5, [pc, #68]	; (800ac10 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 800abcc:	4630      	mov	r0, r6
 800abce:	f7fe f8d5 	bl	8008d7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800abd2:	4628      	mov	r0, r5
 800abd4:	f7fe f8d2 	bl	8008d7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800abd8:	4a0e      	ldr	r2, [pc, #56]	; (800ac14 <xTimerCreateTimerTask+0xa8>)
			pxOverflowTimerList = &xActiveTimerList2;
 800abda:	490f      	ldr	r1, [pc, #60]	; (800ac18 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800abdc:	9700      	str	r7, [sp, #0]
 800abde:	4b0f      	ldr	r3, [pc, #60]	; (800ac1c <xTimerCreateTimerTask+0xb0>)
			pxCurrentTimerList = &xActiveTimerList1;
 800abe0:	6016      	str	r6, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800abe2:	600d      	str	r5, [r1, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800abe4:	4a0e      	ldr	r2, [pc, #56]	; (800ac20 <xTimerCreateTimerTask+0xb4>)
 800abe6:	2110      	movs	r1, #16
 800abe8:	200a      	movs	r0, #10
 800abea:	f7fe f951 	bl	8008e90 <xQueueGenericCreateStatic>
 800abee:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d0c2      	beq.n	800ab7a <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800abf4:	490b      	ldr	r1, [pc, #44]	; (800ac24 <xTimerCreateTimerTask+0xb8>)
 800abf6:	f7fe fd2f 	bl	8009658 <vQueueAddToRegistry>
 800abfa:	e7be      	b.n	800ab7a <xTimerCreateTimerTask+0xe>
 800abfc:	200018c0 	.word	0x200018c0
 800ac00:	0800cb40 	.word	0x0800cb40
 800ac04:	0800a8d9 	.word	0x0800a8d9
 800ac08:	200018c4 	.word	0x200018c4
 800ac0c:	20001844 	.word	0x20001844
 800ac10:	20001858 	.word	0x20001858
 800ac14:	2000179c 	.word	0x2000179c
 800ac18:	200017a0 	.word	0x200017a0
 800ac1c:	20001870 	.word	0x20001870
 800ac20:	200017a4 	.word	0x200017a4
 800ac24:	0800cb38 	.word	0x0800cb38

0800ac28 <xTimerCreate>:
	{
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	4607      	mov	r7, r0
 800ac2e:	b085      	sub	sp, #20
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ac30:	202c      	movs	r0, #44	; 0x2c
	{
 800ac32:	4688      	mov	r8, r1
 800ac34:	4616      	mov	r6, r2
 800ac36:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ac38:	f000 fa62 	bl	800b100 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	b1e8      	cbz	r0, 800ac7c <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 800ac40:	2300      	movs	r3, #0
 800ac42:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ac46:	f1b8 0f00 	cmp.w	r8, #0
 800ac4a:	d01b      	beq.n	800ac84 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
 800ac4c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800acec <xTimerCreate+0xc4>
	taskENTER_CRITICAL();
 800ac50:	f000 f8f0 	bl	800ae34 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ac54:	f8d9 3000 	ldr.w	r3, [r9]
 800ac58:	b1eb      	cbz	r3, 800ac96 <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
 800ac5a:	f000 f90d 	bl	800ae78 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ac5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		pxNewTimer->pcTimerName = pcTimerName;
 800ac60:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 800ac62:	e9c4 8506 	strd	r8, r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ac66:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ac68:	1d20      	adds	r0, r4, #4
 800ac6a:	f7fe f893 	bl	8008d94 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800ac6e:	b12e      	cbz	r6, 800ac7c <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800ac70:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ac74:	f043 0304 	orr.w	r3, r3, #4
 800ac78:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	b005      	add	sp, #20
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ac94:	e7fe      	b.n	800ac94 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
 800ac96:	f8df b058 	ldr.w	fp, [pc, #88]	; 800acf0 <xTimerCreate+0xc8>
			vListInitialise( &xActiveTimerList2 );
 800ac9a:	f8df a058 	ldr.w	sl, [pc, #88]	; 800acf4 <xTimerCreate+0xcc>
 800ac9e:	9303      	str	r3, [sp, #12]
			vListInitialise( &xActiveTimerList1 );
 800aca0:	4658      	mov	r0, fp
 800aca2:	f7fe f86b 	bl	8008d7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aca6:	4650      	mov	r0, sl
 800aca8:	f7fe f868 	bl	8008d7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800acac:	4a0a      	ldr	r2, [pc, #40]	; (800acd8 <xTimerCreate+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 800acae:	490b      	ldr	r1, [pc, #44]	; (800acdc <xTimerCreate+0xb4>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800acb0:	9b03      	ldr	r3, [sp, #12]
 800acb2:	9300      	str	r3, [sp, #0]
 800acb4:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 800acb6:	f8c2 b000 	str.w	fp, [r2]
			pxOverflowTimerList = &xActiveTimerList2;
 800acba:	f8c1 a000 	str.w	sl, [r1]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800acbe:	4b08      	ldr	r3, [pc, #32]	; (800ace0 <xTimerCreate+0xb8>)
 800acc0:	4a08      	ldr	r2, [pc, #32]	; (800ace4 <xTimerCreate+0xbc>)
 800acc2:	2110      	movs	r1, #16
 800acc4:	f7fe f8e4 	bl	8008e90 <xQueueGenericCreateStatic>
 800acc8:	f8c9 0000 	str.w	r0, [r9]
				if( xTimerQueue != NULL )
 800accc:	2800      	cmp	r0, #0
 800acce:	d0c4      	beq.n	800ac5a <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800acd0:	4905      	ldr	r1, [pc, #20]	; (800ace8 <xTimerCreate+0xc0>)
 800acd2:	f7fe fcc1 	bl	8009658 <vQueueAddToRegistry>
 800acd6:	e7c0      	b.n	800ac5a <xTimerCreate+0x32>
 800acd8:	2000179c 	.word	0x2000179c
 800acdc:	200017a0 	.word	0x200017a0
 800ace0:	20001870 	.word	0x20001870
 800ace4:	200017a4 	.word	0x200017a4
 800ace8:	0800cb38 	.word	0x0800cb38
 800acec:	200018c0 	.word	0x200018c0
 800acf0:	20001844 	.word	0x20001844
 800acf4:	20001858 	.word	0x20001858

0800acf8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800acf8:	b1b0      	cbz	r0, 800ad28 <xTimerGenericCommand+0x30>
{
 800acfa:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800acfc:	4d16      	ldr	r5, [pc, #88]	; (800ad58 <xTimerGenericCommand+0x60>)
 800acfe:	4604      	mov	r4, r0
 800ad00:	6828      	ldr	r0, [r5, #0]
{
 800ad02:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800ad04:	b170      	cbz	r0, 800ad24 <xTimerGenericCommand+0x2c>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad06:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad08:	e9cd 1200 	strd	r1, r2, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad0c:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad0e:	dc14      	bgt.n	800ad3a <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad10:	f7ff fbd0 	bl	800a4b4 <xTaskGetSchedulerState>
 800ad14:	2802      	cmp	r0, #2
 800ad16:	d017      	beq.n	800ad48 <xTimerGenericCommand+0x50>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad18:	2300      	movs	r3, #0
 800ad1a:	6828      	ldr	r0, [r5, #0]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	4669      	mov	r1, sp
 800ad20:	f7fe f928 	bl	8008f74 <xQueueGenericSend>
}
 800ad24:	b004      	add	sp, #16
 800ad26:	bd70      	pop	{r4, r5, r6, pc}
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800ad38:	e7fe      	b.n	800ad38 <xTimerGenericCommand+0x40>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	4669      	mov	r1, sp
 800ad3e:	2300      	movs	r3, #0
 800ad40:	f7fe fa9e 	bl	8009280 <xQueueGenericSendFromISR>
}
 800ad44:	b004      	add	sp, #16
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad48:	6828      	ldr	r0, [r5, #0]
 800ad4a:	9a08      	ldr	r2, [sp, #32]
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	4669      	mov	r1, sp
 800ad50:	f7fe f910 	bl	8008f74 <xQueueGenericSend>
 800ad54:	e7e6      	b.n	800ad24 <xTimerGenericCommand+0x2c>
 800ad56:	bf00      	nop
 800ad58:	200018c0 	.word	0x200018c0

0800ad5c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad5c:	4808      	ldr	r0, [pc, #32]	; (800ad80 <prvPortStartFirstTask+0x24>)
 800ad5e:	6800      	ldr	r0, [r0, #0]
 800ad60:	6800      	ldr	r0, [r0, #0]
 800ad62:	f380 8808 	msr	MSP, r0
 800ad66:	f04f 0000 	mov.w	r0, #0
 800ad6a:	f380 8814 	msr	CONTROL, r0
 800ad6e:	b662      	cpsie	i
 800ad70:	b661      	cpsie	f
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	df00      	svc	0
 800ad7c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad7e:	0000      	.short	0x0000
 800ad80:	e000ed08 	.word	0xe000ed08

0800ad84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad94 <vPortEnableVFP+0x10>
 800ad88:	6801      	ldr	r1, [r0, #0]
 800ad8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad8e:	6001      	str	r1, [r0, #0]
 800ad90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad92:	0000      	.short	0x0000
 800ad94:	e000ed88 	.word	0xe000ed88

0800ad98 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800ad98:	4b0e      	ldr	r3, [pc, #56]	; (800add4 <prvTaskExitError+0x3c>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
{
 800ad9c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800ad9e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800ada0:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800ada2:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800ada4:	d008      	beq.n	800adb8 <prvTaskExitError+0x20>
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	e7fe      	b.n	800adb6 <prvTaskExitError+0x1e>
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800adc8:	9b01      	ldr	r3, [sp, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0fc      	beq.n	800adc8 <prvTaskExitError+0x30>
}
 800adce:	b002      	add	sp, #8
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	20000038 	.word	0x20000038

0800add8 <pxPortInitialiseStack>:
{
 800add8:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800adda:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800adde:	4c09      	ldr	r4, [pc, #36]	; (800ae04 <pxPortInitialiseStack+0x2c>)
 800ade0:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ade4:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ade8:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800adec:	f840 5c04 	str.w	r5, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800adf0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800adf4:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800adf8:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800adfc:	bc30      	pop	{r4, r5}
 800adfe:	3844      	subs	r0, #68	; 0x44
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	0800ad99 	.word	0x0800ad99
	...

0800ae10 <SVC_Handler>:
	__asm volatile (
 800ae10:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <pxCurrentTCBConst2>)
 800ae12:	6819      	ldr	r1, [r3, #0]
 800ae14:	6808      	ldr	r0, [r1, #0]
 800ae16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1a:	f380 8809 	msr	PSP, r0
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f04f 0000 	mov.w	r0, #0
 800ae26:	f380 8811 	msr	BASEPRI, r0
 800ae2a:	4770      	bx	lr
 800ae2c:	f3af 8000 	nop.w

0800ae30 <pxCurrentTCBConst2>:
 800ae30:	2000129c 	.word	0x2000129c

0800ae34 <vPortEnterCritical>:
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800ae44:	4a0a      	ldr	r2, [pc, #40]	; (800ae70 <vPortEnterCritical+0x3c>)
 800ae46:	6813      	ldr	r3, [r2, #0]
 800ae48:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800ae4a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800ae4c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ae4e:	d000      	beq.n	800ae52 <vPortEnterCritical+0x1e>
}
 800ae50:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae52:	4b08      	ldr	r3, [pc, #32]	; (800ae74 <vPortEnterCritical+0x40>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ae5a:	d0f9      	beq.n	800ae50 <vPortEnterCritical+0x1c>
 800ae5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	e7fe      	b.n	800ae6c <vPortEnterCritical+0x38>
 800ae6e:	bf00      	nop
 800ae70:	20000038 	.word	0x20000038
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ae78:	4a08      	ldr	r2, [pc, #32]	; (800ae9c <vPortExitCritical+0x24>)
 800ae7a:	6813      	ldr	r3, [r2, #0]
 800ae7c:	b943      	cbnz	r3, 800ae90 <vPortExitCritical+0x18>
 800ae7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	e7fe      	b.n	800ae8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ae90:	3b01      	subs	r3, #1
 800ae92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae94:	b90b      	cbnz	r3, 800ae9a <vPortExitCritical+0x22>
	__asm volatile
 800ae96:	f383 8811 	msr	BASEPRI, r3
}
 800ae9a:	4770      	bx	lr
 800ae9c:	20000038 	.word	0x20000038

0800aea0 <PendSV_Handler>:
	__asm volatile
 800aea0:	f3ef 8009 	mrs	r0, PSP
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	4b15      	ldr	r3, [pc, #84]	; (800af00 <pxCurrentTCBConst>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	f01e 0f10 	tst.w	lr, #16
 800aeb0:	bf08      	it	eq
 800aeb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aeb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeba:	6010      	str	r0, [r2, #0]
 800aebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aec4:	f380 8811 	msr	BASEPRI, r0
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f7ff f8d8 	bl	800a084 <vTaskSwitchContext>
 800aed4:	f04f 0000 	mov.w	r0, #0
 800aed8:	f380 8811 	msr	BASEPRI, r0
 800aedc:	bc09      	pop	{r0, r3}
 800aede:	6819      	ldr	r1, [r3, #0]
 800aee0:	6808      	ldr	r0, [r1, #0]
 800aee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee6:	f01e 0f10 	tst.w	lr, #16
 800aeea:	bf08      	it	eq
 800aeec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aef0:	f380 8809 	msr	PSP, r0
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	f3af 8000 	nop.w

0800af00 <pxCurrentTCBConst>:
 800af00:	2000129c 	.word	0x2000129c

0800af04 <xPortSysTickHandler>:
{
 800af04:	b508      	push	{r3, lr}
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800af16:	f7ff f8a5 	bl	800a064 <xTaskIncrementTick>
 800af1a:	b118      	cbz	r0, 800af24 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af1c:	4b03      	ldr	r3, [pc, #12]	; (800af2c <xPortSysTickHandler+0x28>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
	__asm volatile
 800af24:	2300      	movs	r3, #0
 800af26:	f383 8811 	msr	BASEPRI, r3
}
 800af2a:	bd08      	pop	{r3, pc}
 800af2c:	e000ed04 	.word	0xe000ed04

0800af30 <vPortSetupTimerInterrupt>:
{
 800af30:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af32:	4a09      	ldr	r2, [pc, #36]	; (800af58 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af34:	4d09      	ldr	r5, [pc, #36]	; (800af5c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af36:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <vPortSetupTimerInterrupt+0x30>)
 800af38:	4c0a      	ldr	r4, [pc, #40]	; (800af64 <vPortSetupTimerInterrupt+0x34>)
 800af3a:	480b      	ldr	r0, [pc, #44]	; (800af68 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af3c:	2100      	movs	r1, #0
 800af3e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af40:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	fba4 1303 	umull	r1, r3, r4, r3
 800af48:	099b      	lsrs	r3, r3, #6
 800af4a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af4c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af4e:	6003      	str	r3, [r0, #0]
}
 800af50:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af52:	6011      	str	r1, [r2, #0]
}
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	e000e010 	.word	0xe000e010
 800af5c:	e000e018 	.word	0xe000e018
 800af60:	20000030 	.word	0x20000030
 800af64:	10624dd3 	.word	0x10624dd3
 800af68:	e000e014 	.word	0xe000e014

0800af6c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af6c:	4b44      	ldr	r3, [pc, #272]	; (800b080 <xPortStartScheduler+0x114>)
 800af6e:	4a45      	ldr	r2, [pc, #276]	; (800b084 <xPortStartScheduler+0x118>)
 800af70:	6819      	ldr	r1, [r3, #0]
 800af72:	4291      	cmp	r1, r2
 800af74:	d040      	beq.n	800aff8 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	4b43      	ldr	r3, [pc, #268]	; (800b088 <xPortStartScheduler+0x11c>)
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d033      	beq.n	800afe6 <xPortStartScheduler+0x7a>
{
 800af7e:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af80:	4b42      	ldr	r3, [pc, #264]	; (800b08c <xPortStartScheduler+0x120>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af82:	4c43      	ldr	r4, [pc, #268]	; (800b090 <xPortStartScheduler+0x124>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af84:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800af86:	4943      	ldr	r1, [pc, #268]	; (800b094 <xPortStartScheduler+0x128>)
{
 800af88:	b085      	sub	sp, #20
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af8a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af8c:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af8e:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af90:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	b2db      	uxtb	r3, r3
 800af96:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afa2:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800afa6:	2007      	movs	r0, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afa8:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afaa:	0614      	lsls	r4, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800afac:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afae:	bf48      	it	mi
 800afb0:	2206      	movmi	r2, #6
 800afb2:	d50f      	bpl.n	800afd4 <xPortStartScheduler+0x68>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800afb8:	005b      	lsls	r3, r3, #1
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afc0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800afc4:	0600      	lsls	r0, r0, #24
 800afc6:	4613      	mov	r3, r2
 800afc8:	f102 32ff 	add.w	r2, r2, #4294967295
 800afcc:	d4f2      	bmi.n	800afb4 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800afce:	2b03      	cmp	r3, #3
 800afd0:	d01b      	beq.n	800b00a <xPortStartScheduler+0x9e>
 800afd2:	600b      	str	r3, [r1, #0]
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	e7fe      	b.n	800afe4 <xPortStartScheduler+0x78>
 800afe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aff6:	e7fe      	b.n	800aff6 <xPortStartScheduler+0x8a>
 800aff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affc:	f383 8811 	msr	BASEPRI, r3
 800b000:	f3bf 8f6f 	isb	sy
 800b004:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b008:	e7fe      	b.n	800b008 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b00a:	9a02      	ldr	r2, [sp, #8]
 800b00c:	481f      	ldr	r0, [pc, #124]	; (800b08c <xPortStartScheduler+0x120>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b00e:	4b22      	ldr	r3, [pc, #136]	; (800b098 <xPortStartScheduler+0x12c>)
	uxCriticalNesting = 0;
 800b010:	4c22      	ldr	r4, [pc, #136]	; (800b09c <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b012:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b014:	f44f 7540 	mov.w	r5, #768	; 0x300
 800b018:	600d      	str	r5, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b01a:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b022:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800b02a:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800b02c:	2500      	movs	r5, #0
	vPortSetupTimerInterrupt();
 800b02e:	f7ff ff7f 	bl	800af30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b032:	6025      	str	r5, [r4, #0]
	vPortEnableVFP();
 800b034:	f7ff fea6 	bl	800ad84 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b038:	4a19      	ldr	r2, [pc, #100]	; (800b0a0 <xPortStartScheduler+0x134>)
 800b03a:	6813      	ldr	r3, [r2, #0]
 800b03c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b040:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800b042:	f7ff fe8b 	bl	800ad5c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b046:	f7ff f81d 	bl	800a084 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800b04a:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0;
 800b04c:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800b04e:	3301      	adds	r3, #1
 800b050:	d008      	beq.n	800b064 <xPortStartScheduler+0xf8>
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	e7fe      	b.n	800b062 <xPortStartScheduler+0xf6>
 800b064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b074:	9b03      	ldr	r3, [sp, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d0fc      	beq.n	800b074 <xPortStartScheduler+0x108>
}
 800b07a:	2000      	movs	r0, #0
 800b07c:	b005      	add	sp, #20
 800b07e:	bd30      	pop	{r4, r5, pc}
 800b080:	e000ed00 	.word	0xe000ed00
 800b084:	410fc271 	.word	0x410fc271
 800b088:	410fc270 	.word	0x410fc270
 800b08c:	e000e400 	.word	0xe000e400
 800b090:	200018c8 	.word	0x200018c8
 800b094:	200018cc 	.word	0x200018cc
 800b098:	e000ed20 	.word	0xe000ed20
 800b09c:	20000038 	.word	0x20000038
 800b0a0:	e000ef34 	.word	0xe000ef34

0800b0a4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0a4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0a8:	2b0f      	cmp	r3, #15
 800b0aa:	d90e      	bls.n	800b0ca <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0ac:	4910      	ldr	r1, [pc, #64]	; (800b0f0 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0ae:	4a11      	ldr	r2, [pc, #68]	; (800b0f4 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0b0:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0b2:	7812      	ldrb	r2, [r2, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d908      	bls.n	800b0ca <vPortValidateInterruptPriority+0x26>
 800b0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	e7fe      	b.n	800b0c8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0ca:	4b0b      	ldr	r3, [pc, #44]	; (800b0f8 <vPortValidateInterruptPriority+0x54>)
 800b0cc:	4a0b      	ldr	r2, [pc, #44]	; (800b0fc <vPortValidateInterruptPriority+0x58>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6812      	ldr	r2, [r2, #0]
 800b0d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d908      	bls.n	800b0ec <vPortValidateInterruptPriority+0x48>
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	e7fe      	b.n	800b0ea <vPortValidateInterruptPriority+0x46>
	}
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	e000e3f0 	.word	0xe000e3f0
 800b0f4:	200018c8 	.word	0x200018c8
 800b0f8:	e000ed0c 	.word	0xe000ed0c
 800b0fc:	200018cc 	.word	0x200018cc

0800b100 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b104:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800b106:	f7fe ff8f 	bl	800a028 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b10a:	4854      	ldr	r0, [pc, #336]	; (800b25c <pvPortMalloc+0x15c>)
 800b10c:	6803      	ldr	r3, [r0, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d03c      	beq.n	800b18c <pvPortMalloc+0x8c>
 800b112:	4a53      	ldr	r2, [pc, #332]	; (800b260 <pvPortMalloc+0x160>)
 800b114:	6815      	ldr	r5, [r2, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b116:	422e      	tst	r6, r5
 800b118:	d130      	bne.n	800b17c <pvPortMalloc+0x7c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b11a:	b37e      	cbz	r6, 800b17c <pvPortMalloc+0x7c>
			{
				xWantedSize += xHeapStructSize;
 800b11c:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b120:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b122:	bf1c      	itt	ne
 800b124:	f024 0407 	bicne.w	r4, r4, #7
 800b128:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b12a:	b33c      	cbz	r4, 800b17c <pvPortMalloc+0x7c>
 800b12c:	f8df c13c 	ldr.w	ip, [pc, #316]	; 800b26c <pvPortMalloc+0x16c>
 800b130:	f8dc 7000 	ldr.w	r7, [ip]
 800b134:	42a7      	cmp	r7, r4
 800b136:	d321      	bcc.n	800b17c <pvPortMalloc+0x7c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800b138:	4a4a      	ldr	r2, [pc, #296]	; (800b264 <pvPortMalloc+0x164>)
 800b13a:	6811      	ldr	r1, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b13c:	e003      	b.n	800b146 <pvPortMalloc+0x46>
 800b13e:	680e      	ldr	r6, [r1, #0]
 800b140:	b126      	cbz	r6, 800b14c <pvPortMalloc+0x4c>
 800b142:	460a      	mov	r2, r1
 800b144:	4631      	mov	r1, r6
 800b146:	6848      	ldr	r0, [r1, #4]
 800b148:	42a0      	cmp	r0, r4
 800b14a:	d3f8      	bcc.n	800b13e <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b14c:	4299      	cmp	r1, r3
 800b14e:	d015      	beq.n	800b17c <pvPortMalloc+0x7c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b150:	460e      	mov	r6, r1
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b152:	eba0 0e04 	sub.w	lr, r0, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b156:	f856 8b08 	ldr.w	r8, [r6], #8
 800b15a:	f8c2 8000 	str.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b15e:	f1be 0f10 	cmp.w	lr, #16
 800b162:	d950      	bls.n	800b206 <pvPortMalloc+0x106>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b164:	190a      	adds	r2, r1, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b166:	0750      	lsls	r0, r2, #29
 800b168:	d034      	beq.n	800b1d4 <pvPortMalloc+0xd4>
 800b16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	e7fe      	b.n	800b17a <pvPortMalloc+0x7a>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b17c:	f7fe ff5c 	bl	800a038 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b180:	2600      	movs	r6, #0
 800b182:	f7f7 f9c1 	bl	8002508 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 800b186:	4630      	mov	r0, r6
 800b188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b18c:	4b36      	ldr	r3, [pc, #216]	; (800b268 <pvPortMalloc+0x168>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b18e:	4c35      	ldr	r4, [pc, #212]	; (800b264 <pvPortMalloc+0x164>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b190:	4d36      	ldr	r5, [pc, #216]	; (800b26c <pvPortMalloc+0x16c>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b192:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800b270 <pvPortMalloc+0x170>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b196:	075f      	lsls	r7, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b198:	bf14      	ite	ne
 800b19a:	1dda      	addne	r2, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b19c:	461a      	moveq	r2, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b19e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	uxAddress -= xHeapStructSize;
 800b1a2:	f1a3 0308 	sub.w	r3, r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1a6:	f023 0307 	bic.w	r3, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1aa:	bf18      	it	ne
 800b1ac:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1b0:	6022      	str	r2, [r4, #0]
 800b1b2:	4611      	mov	r1, r2

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1b4:	4f2a      	ldr	r7, [pc, #168]	; (800b260 <pvPortMalloc+0x160>)
	pxEnd = ( void * ) uxAddress;
 800b1b6:	6003      	str	r3, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1b8:	1a9a      	subs	r2, r3, r2
	xStart.xBlockSize = ( size_t ) 0;
 800b1ba:	2000      	movs	r0, #0
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1bc:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1be:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 800b1c2:	6060      	str	r0, [r4, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b1c4:	f8cc 2000 	str.w	r2, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 800b1c8:	e9c3 0000 	strd	r0, r0, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b1cc:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b1ce:	e9c1 3200 	strd	r3, r2, [r1]
}
 800b1d2:	e7a0      	b.n	800b116 <pvPortMalloc+0x16>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1d4:	4823      	ldr	r0, [pc, #140]	; (800b264 <pvPortMalloc+0x164>)
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1d6:	f8c2 e004 	str.w	lr, [r2, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1da:	604c      	str	r4, [r1, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1dc:	4686      	mov	lr, r0
 800b1de:	6800      	ldr	r0, [r0, #0]
 800b1e0:	4282      	cmp	r2, r0
 800b1e2:	d8fb      	bhi.n	800b1dc <pvPortMalloc+0xdc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1e4:	f8de 4004 	ldr.w	r4, [lr, #4]
 800b1e8:	eb0e 0804 	add.w	r8, lr, r4
 800b1ec:	4542      	cmp	r2, r8
 800b1ee:	d027      	beq.n	800b240 <pvPortMalloc+0x140>
 800b1f0:	6854      	ldr	r4, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b1f2:	eb02 0804 	add.w	r8, r2, r4
 800b1f6:	4540      	cmp	r0, r8
 800b1f8:	d028      	beq.n	800b24c <pvPortMalloc+0x14c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1fa:	6010      	str	r0, [r2, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1fc:	4596      	cmp	lr, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1fe:	6848      	ldr	r0, [r1, #4]
 800b200:	bf18      	it	ne
 800b202:	f8ce 2000 	strne.w	r2, [lr]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b206:	4c1a      	ldr	r4, [pc, #104]	; (800b270 <pvPortMalloc+0x170>)
 800b208:	6822      	ldr	r2, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b20a:	1a3f      	subs	r7, r7, r0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b20c:	4297      	cmp	r7, r2
					xNumberOfSuccessfulAllocations++;
 800b20e:	4a19      	ldr	r2, [pc, #100]	; (800b274 <pvPortMalloc+0x174>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b210:	bf38      	it	cc
 800b212:	6027      	strcc	r7, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800b214:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b216:	f8cc 7000 	str.w	r7, [ip]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b21a:	4328      	orrs	r0, r5
					pxBlock->pxNextFreeBlock = NULL;
 800b21c:	2400      	movs	r4, #0
					xNumberOfSuccessfulAllocations++;
 800b21e:	3301      	adds	r3, #1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b220:	6048      	str	r0, [r1, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b222:	600c      	str	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800b224:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b226:	f7fe ff07 	bl	800a038 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b22a:	0773      	lsls	r3, r6, #29
 800b22c:	d0ab      	beq.n	800b186 <pvPortMalloc+0x86>
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	e7fe      	b.n	800b23e <pvPortMalloc+0x13e>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b240:	6852      	ldr	r2, [r2, #4]
 800b242:	4414      	add	r4, r2
 800b244:	f8ce 4004 	str.w	r4, [lr, #4]
		pxBlockToInsert = pxIterator;
 800b248:	4672      	mov	r2, lr
 800b24a:	e7d2      	b.n	800b1f2 <pvPortMalloc+0xf2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b24c:	4298      	cmp	r0, r3
 800b24e:	d0d4      	beq.n	800b1fa <pvPortMalloc+0xfa>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b250:	e9d0 0300 	ldrd	r0, r3, [r0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b254:	441c      	add	r4, r3
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b256:	6010      	str	r0, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b258:	6054      	str	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b25a:	e7cf      	b.n	800b1fc <pvPortMalloc+0xfc>
 800b25c:	200018d0 	.word	0x200018d0
 800b260:	200098d4 	.word	0x200098d4
 800b264:	200098e8 	.word	0x200098e8
 800b268:	200018d4 	.word	0x200018d4
 800b26c:	200098d8 	.word	0x200098d8
 800b270:	200098dc 	.word	0x200098dc
 800b274:	200098e0 	.word	0x200098e0

0800b278 <vPortFree>:
	if( pv != NULL )
 800b278:	b1e0      	cbz	r0, 800b2b4 <vPortFree+0x3c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b27a:	4a29      	ldr	r2, [pc, #164]	; (800b320 <vPortFree+0xa8>)
{
 800b27c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b27e:	6812      	ldr	r2, [r2, #0]
 800b280:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b284:	4213      	tst	r3, r2
 800b286:	4604      	mov	r4, r0
 800b288:	d00b      	beq.n	800b2a2 <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b28a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b28e:	b191      	cbz	r1, 800b2b6 <vPortFree+0x3e>
 800b290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b294:	f383 8811 	msr	BASEPRI, r3
 800b298:	f3bf 8f6f 	isb	sy
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	e7fe      	b.n	800b2a0 <vPortFree+0x28>
 800b2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2b2:	e7fe      	b.n	800b2b2 <vPortFree+0x3a>
 800b2b4:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2b6:	ea23 0302 	bic.w	r3, r3, r2
 800b2ba:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b2be:	f7fe feb3 	bl	800a028 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2c2:	4918      	ldr	r1, [pc, #96]	; (800b324 <vPortFree+0xac>)
 800b2c4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800b2c8:	680b      	ldr	r3, [r1, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2ca:	4a17      	ldr	r2, [pc, #92]	; (800b328 <vPortFree+0xb0>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2cc:	4403      	add	r3, r0
 800b2ce:	600b      	str	r3, [r1, #0]
		puc -= xHeapStructSize;
 800b2d0:	f1a4 0308 	sub.w	r3, r4, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	6812      	ldr	r2, [r2, #0]
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d8fb      	bhi.n	800b2d4 <vPortFree+0x5c>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2dc:	684c      	ldr	r4, [r1, #4]
 800b2de:	190d      	adds	r5, r1, r4
 800b2e0:	42ab      	cmp	r3, r5
 800b2e2:	d00e      	beq.n	800b302 <vPortFree+0x8a>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2e4:	181c      	adds	r4, r3, r0
 800b2e6:	42a2      	cmp	r2, r4
 800b2e8:	d00f      	beq.n	800b30a <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2ea:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulFrees++;
 800b2ec:	4a0f      	ldr	r2, [pc, #60]	; (800b32c <vPortFree+0xb4>)
	if( pxIterator != pxBlockToInsert )
 800b2ee:	4299      	cmp	r1, r3
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2f0:	bf18      	it	ne
 800b2f2:	600b      	strne	r3, [r1, #0]
					xNumberOfSuccessfulFrees++;
 800b2f4:	6813      	ldr	r3, [r2, #0]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	6013      	str	r3, [r2, #0]
}
 800b2fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 800b2fe:	f7fe be9b 	b.w	800a038 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b302:	4420      	add	r0, r4
 800b304:	6048      	str	r0, [r1, #4]
		pxBlockToInsert = pxIterator;
 800b306:	460b      	mov	r3, r1
 800b308:	e7ec      	b.n	800b2e4 <vPortFree+0x6c>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b30a:	4c09      	ldr	r4, [pc, #36]	; (800b330 <vPortFree+0xb8>)
 800b30c:	6824      	ldr	r4, [r4, #0]
 800b30e:	42a2      	cmp	r2, r4
 800b310:	d0eb      	beq.n	800b2ea <vPortFree+0x72>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b312:	e9d2 2400 	ldrd	r2, r4, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b316:	4420      	add	r0, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b318:	601a      	str	r2, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b31a:	6058      	str	r0, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b31c:	e7e6      	b.n	800b2ec <vPortFree+0x74>
 800b31e:	bf00      	nop
 800b320:	200098d4 	.word	0x200098d4
 800b324:	200098d8 	.word	0x200098d8
 800b328:	200098e8 	.word	0x200098e8
 800b32c:	200098e4 	.word	0x200098e4
 800b330:	200018d0 	.word	0x200018d0

0800b334 <__errno>:
 800b334:	4b01      	ldr	r3, [pc, #4]	; (800b33c <__errno+0x8>)
 800b336:	6818      	ldr	r0, [r3, #0]
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	2000003c 	.word	0x2000003c

0800b340 <__libc_init_array>:
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	4d0d      	ldr	r5, [pc, #52]	; (800b378 <__libc_init_array+0x38>)
 800b344:	4c0d      	ldr	r4, [pc, #52]	; (800b37c <__libc_init_array+0x3c>)
 800b346:	1b64      	subs	r4, r4, r5
 800b348:	10a4      	asrs	r4, r4, #2
 800b34a:	2600      	movs	r6, #0
 800b34c:	42a6      	cmp	r6, r4
 800b34e:	d109      	bne.n	800b364 <__libc_init_array+0x24>
 800b350:	4d0b      	ldr	r5, [pc, #44]	; (800b380 <__libc_init_array+0x40>)
 800b352:	4c0c      	ldr	r4, [pc, #48]	; (800b384 <__libc_init_array+0x44>)
 800b354:	f000 fffa 	bl	800c34c <_init>
 800b358:	1b64      	subs	r4, r4, r5
 800b35a:	10a4      	asrs	r4, r4, #2
 800b35c:	2600      	movs	r6, #0
 800b35e:	42a6      	cmp	r6, r4
 800b360:	d105      	bne.n	800b36e <__libc_init_array+0x2e>
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	f855 3b04 	ldr.w	r3, [r5], #4
 800b368:	4798      	blx	r3
 800b36a:	3601      	adds	r6, #1
 800b36c:	e7ee      	b.n	800b34c <__libc_init_array+0xc>
 800b36e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b372:	4798      	blx	r3
 800b374:	3601      	adds	r6, #1
 800b376:	e7f2      	b.n	800b35e <__libc_init_array+0x1e>
 800b378:	0800cbe8 	.word	0x0800cbe8
 800b37c:	0800cbe8 	.word	0x0800cbe8
 800b380:	0800cbe8 	.word	0x0800cbe8
 800b384:	0800cbec 	.word	0x0800cbec

0800b388 <memcpy>:
 800b388:	440a      	add	r2, r1
 800b38a:	4291      	cmp	r1, r2
 800b38c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b390:	d100      	bne.n	800b394 <memcpy+0xc>
 800b392:	4770      	bx	lr
 800b394:	b510      	push	{r4, lr}
 800b396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b39a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b39e:	4291      	cmp	r1, r2
 800b3a0:	d1f9      	bne.n	800b396 <memcpy+0xe>
 800b3a2:	bd10      	pop	{r4, pc}

0800b3a4 <memset>:
 800b3a4:	4402      	add	r2, r0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d100      	bne.n	800b3ae <memset+0xa>
 800b3ac:	4770      	bx	lr
 800b3ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b3b2:	e7f9      	b.n	800b3a8 <memset+0x4>

0800b3b4 <iprintf>:
 800b3b4:	b40f      	push	{r0, r1, r2, r3}
 800b3b6:	4b0a      	ldr	r3, [pc, #40]	; (800b3e0 <iprintf+0x2c>)
 800b3b8:	b513      	push	{r0, r1, r4, lr}
 800b3ba:	681c      	ldr	r4, [r3, #0]
 800b3bc:	b124      	cbz	r4, 800b3c8 <iprintf+0x14>
 800b3be:	69a3      	ldr	r3, [r4, #24]
 800b3c0:	b913      	cbnz	r3, 800b3c8 <iprintf+0x14>
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f000 fa5e 	bl	800b884 <__sinit>
 800b3c8:	ab05      	add	r3, sp, #20
 800b3ca:	9a04      	ldr	r2, [sp, #16]
 800b3cc:	68a1      	ldr	r1, [r4, #8]
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f000 fc2f 	bl	800bc34 <_vfiprintf_r>
 800b3d6:	b002      	add	sp, #8
 800b3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3dc:	b004      	add	sp, #16
 800b3de:	4770      	bx	lr
 800b3e0:	2000003c 	.word	0x2000003c

0800b3e4 <_puts_r>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	460e      	mov	r6, r1
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	b118      	cbz	r0, 800b3f4 <_puts_r+0x10>
 800b3ec:	6983      	ldr	r3, [r0, #24]
 800b3ee:	b90b      	cbnz	r3, 800b3f4 <_puts_r+0x10>
 800b3f0:	f000 fa48 	bl	800b884 <__sinit>
 800b3f4:	69ab      	ldr	r3, [r5, #24]
 800b3f6:	68ac      	ldr	r4, [r5, #8]
 800b3f8:	b913      	cbnz	r3, 800b400 <_puts_r+0x1c>
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f000 fa42 	bl	800b884 <__sinit>
 800b400:	4b2c      	ldr	r3, [pc, #176]	; (800b4b4 <_puts_r+0xd0>)
 800b402:	429c      	cmp	r4, r3
 800b404:	d120      	bne.n	800b448 <_puts_r+0x64>
 800b406:	686c      	ldr	r4, [r5, #4]
 800b408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b40a:	07db      	lsls	r3, r3, #31
 800b40c:	d405      	bmi.n	800b41a <_puts_r+0x36>
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	0598      	lsls	r0, r3, #22
 800b412:	d402      	bmi.n	800b41a <_puts_r+0x36>
 800b414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b416:	f000 fad3 	bl	800b9c0 <__retarget_lock_acquire_recursive>
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	0719      	lsls	r1, r3, #28
 800b41e:	d51d      	bpl.n	800b45c <_puts_r+0x78>
 800b420:	6923      	ldr	r3, [r4, #16]
 800b422:	b1db      	cbz	r3, 800b45c <_puts_r+0x78>
 800b424:	3e01      	subs	r6, #1
 800b426:	68a3      	ldr	r3, [r4, #8]
 800b428:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b42c:	3b01      	subs	r3, #1
 800b42e:	60a3      	str	r3, [r4, #8]
 800b430:	bb39      	cbnz	r1, 800b482 <_puts_r+0x9e>
 800b432:	2b00      	cmp	r3, #0
 800b434:	da38      	bge.n	800b4a8 <_puts_r+0xc4>
 800b436:	4622      	mov	r2, r4
 800b438:	210a      	movs	r1, #10
 800b43a:	4628      	mov	r0, r5
 800b43c:	f000 f848 	bl	800b4d0 <__swbuf_r>
 800b440:	3001      	adds	r0, #1
 800b442:	d011      	beq.n	800b468 <_puts_r+0x84>
 800b444:	250a      	movs	r5, #10
 800b446:	e011      	b.n	800b46c <_puts_r+0x88>
 800b448:	4b1b      	ldr	r3, [pc, #108]	; (800b4b8 <_puts_r+0xd4>)
 800b44a:	429c      	cmp	r4, r3
 800b44c:	d101      	bne.n	800b452 <_puts_r+0x6e>
 800b44e:	68ac      	ldr	r4, [r5, #8]
 800b450:	e7da      	b.n	800b408 <_puts_r+0x24>
 800b452:	4b1a      	ldr	r3, [pc, #104]	; (800b4bc <_puts_r+0xd8>)
 800b454:	429c      	cmp	r4, r3
 800b456:	bf08      	it	eq
 800b458:	68ec      	ldreq	r4, [r5, #12]
 800b45a:	e7d5      	b.n	800b408 <_puts_r+0x24>
 800b45c:	4621      	mov	r1, r4
 800b45e:	4628      	mov	r0, r5
 800b460:	f000 f888 	bl	800b574 <__swsetup_r>
 800b464:	2800      	cmp	r0, #0
 800b466:	d0dd      	beq.n	800b424 <_puts_r+0x40>
 800b468:	f04f 35ff 	mov.w	r5, #4294967295
 800b46c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b46e:	07da      	lsls	r2, r3, #31
 800b470:	d405      	bmi.n	800b47e <_puts_r+0x9a>
 800b472:	89a3      	ldrh	r3, [r4, #12]
 800b474:	059b      	lsls	r3, r3, #22
 800b476:	d402      	bmi.n	800b47e <_puts_r+0x9a>
 800b478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b47a:	f000 faa2 	bl	800b9c2 <__retarget_lock_release_recursive>
 800b47e:	4628      	mov	r0, r5
 800b480:	bd70      	pop	{r4, r5, r6, pc}
 800b482:	2b00      	cmp	r3, #0
 800b484:	da04      	bge.n	800b490 <_puts_r+0xac>
 800b486:	69a2      	ldr	r2, [r4, #24]
 800b488:	429a      	cmp	r2, r3
 800b48a:	dc06      	bgt.n	800b49a <_puts_r+0xb6>
 800b48c:	290a      	cmp	r1, #10
 800b48e:	d004      	beq.n	800b49a <_puts_r+0xb6>
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	1c5a      	adds	r2, r3, #1
 800b494:	6022      	str	r2, [r4, #0]
 800b496:	7019      	strb	r1, [r3, #0]
 800b498:	e7c5      	b.n	800b426 <_puts_r+0x42>
 800b49a:	4622      	mov	r2, r4
 800b49c:	4628      	mov	r0, r5
 800b49e:	f000 f817 	bl	800b4d0 <__swbuf_r>
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d1bf      	bne.n	800b426 <_puts_r+0x42>
 800b4a6:	e7df      	b.n	800b468 <_puts_r+0x84>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	250a      	movs	r5, #10
 800b4ac:	1c5a      	adds	r2, r3, #1
 800b4ae:	6022      	str	r2, [r4, #0]
 800b4b0:	701d      	strb	r5, [r3, #0]
 800b4b2:	e7db      	b.n	800b46c <_puts_r+0x88>
 800b4b4:	0800cb6c 	.word	0x0800cb6c
 800b4b8:	0800cb8c 	.word	0x0800cb8c
 800b4bc:	0800cb4c 	.word	0x0800cb4c

0800b4c0 <puts>:
 800b4c0:	4b02      	ldr	r3, [pc, #8]	; (800b4cc <puts+0xc>)
 800b4c2:	4601      	mov	r1, r0
 800b4c4:	6818      	ldr	r0, [r3, #0]
 800b4c6:	f7ff bf8d 	b.w	800b3e4 <_puts_r>
 800b4ca:	bf00      	nop
 800b4cc:	2000003c 	.word	0x2000003c

0800b4d0 <__swbuf_r>:
 800b4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d2:	460e      	mov	r6, r1
 800b4d4:	4614      	mov	r4, r2
 800b4d6:	4605      	mov	r5, r0
 800b4d8:	b118      	cbz	r0, 800b4e2 <__swbuf_r+0x12>
 800b4da:	6983      	ldr	r3, [r0, #24]
 800b4dc:	b90b      	cbnz	r3, 800b4e2 <__swbuf_r+0x12>
 800b4de:	f000 f9d1 	bl	800b884 <__sinit>
 800b4e2:	4b21      	ldr	r3, [pc, #132]	; (800b568 <__swbuf_r+0x98>)
 800b4e4:	429c      	cmp	r4, r3
 800b4e6:	d12b      	bne.n	800b540 <__swbuf_r+0x70>
 800b4e8:	686c      	ldr	r4, [r5, #4]
 800b4ea:	69a3      	ldr	r3, [r4, #24]
 800b4ec:	60a3      	str	r3, [r4, #8]
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	071a      	lsls	r2, r3, #28
 800b4f2:	d52f      	bpl.n	800b554 <__swbuf_r+0x84>
 800b4f4:	6923      	ldr	r3, [r4, #16]
 800b4f6:	b36b      	cbz	r3, 800b554 <__swbuf_r+0x84>
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	6820      	ldr	r0, [r4, #0]
 800b4fc:	1ac0      	subs	r0, r0, r3
 800b4fe:	6963      	ldr	r3, [r4, #20]
 800b500:	b2f6      	uxtb	r6, r6
 800b502:	4283      	cmp	r3, r0
 800b504:	4637      	mov	r7, r6
 800b506:	dc04      	bgt.n	800b512 <__swbuf_r+0x42>
 800b508:	4621      	mov	r1, r4
 800b50a:	4628      	mov	r0, r5
 800b50c:	f000 f926 	bl	800b75c <_fflush_r>
 800b510:	bb30      	cbnz	r0, 800b560 <__swbuf_r+0x90>
 800b512:	68a3      	ldr	r3, [r4, #8]
 800b514:	3b01      	subs	r3, #1
 800b516:	60a3      	str	r3, [r4, #8]
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	6022      	str	r2, [r4, #0]
 800b51e:	701e      	strb	r6, [r3, #0]
 800b520:	6963      	ldr	r3, [r4, #20]
 800b522:	3001      	adds	r0, #1
 800b524:	4283      	cmp	r3, r0
 800b526:	d004      	beq.n	800b532 <__swbuf_r+0x62>
 800b528:	89a3      	ldrh	r3, [r4, #12]
 800b52a:	07db      	lsls	r3, r3, #31
 800b52c:	d506      	bpl.n	800b53c <__swbuf_r+0x6c>
 800b52e:	2e0a      	cmp	r6, #10
 800b530:	d104      	bne.n	800b53c <__swbuf_r+0x6c>
 800b532:	4621      	mov	r1, r4
 800b534:	4628      	mov	r0, r5
 800b536:	f000 f911 	bl	800b75c <_fflush_r>
 800b53a:	b988      	cbnz	r0, 800b560 <__swbuf_r+0x90>
 800b53c:	4638      	mov	r0, r7
 800b53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b540:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <__swbuf_r+0x9c>)
 800b542:	429c      	cmp	r4, r3
 800b544:	d101      	bne.n	800b54a <__swbuf_r+0x7a>
 800b546:	68ac      	ldr	r4, [r5, #8]
 800b548:	e7cf      	b.n	800b4ea <__swbuf_r+0x1a>
 800b54a:	4b09      	ldr	r3, [pc, #36]	; (800b570 <__swbuf_r+0xa0>)
 800b54c:	429c      	cmp	r4, r3
 800b54e:	bf08      	it	eq
 800b550:	68ec      	ldreq	r4, [r5, #12]
 800b552:	e7ca      	b.n	800b4ea <__swbuf_r+0x1a>
 800b554:	4621      	mov	r1, r4
 800b556:	4628      	mov	r0, r5
 800b558:	f000 f80c 	bl	800b574 <__swsetup_r>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d0cb      	beq.n	800b4f8 <__swbuf_r+0x28>
 800b560:	f04f 37ff 	mov.w	r7, #4294967295
 800b564:	e7ea      	b.n	800b53c <__swbuf_r+0x6c>
 800b566:	bf00      	nop
 800b568:	0800cb6c 	.word	0x0800cb6c
 800b56c:	0800cb8c 	.word	0x0800cb8c
 800b570:	0800cb4c 	.word	0x0800cb4c

0800b574 <__swsetup_r>:
 800b574:	4b32      	ldr	r3, [pc, #200]	; (800b640 <__swsetup_r+0xcc>)
 800b576:	b570      	push	{r4, r5, r6, lr}
 800b578:	681d      	ldr	r5, [r3, #0]
 800b57a:	4606      	mov	r6, r0
 800b57c:	460c      	mov	r4, r1
 800b57e:	b125      	cbz	r5, 800b58a <__swsetup_r+0x16>
 800b580:	69ab      	ldr	r3, [r5, #24]
 800b582:	b913      	cbnz	r3, 800b58a <__swsetup_r+0x16>
 800b584:	4628      	mov	r0, r5
 800b586:	f000 f97d 	bl	800b884 <__sinit>
 800b58a:	4b2e      	ldr	r3, [pc, #184]	; (800b644 <__swsetup_r+0xd0>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	d10f      	bne.n	800b5b0 <__swsetup_r+0x3c>
 800b590:	686c      	ldr	r4, [r5, #4]
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b598:	0719      	lsls	r1, r3, #28
 800b59a:	d42c      	bmi.n	800b5f6 <__swsetup_r+0x82>
 800b59c:	06dd      	lsls	r5, r3, #27
 800b59e:	d411      	bmi.n	800b5c4 <__swsetup_r+0x50>
 800b5a0:	2309      	movs	r3, #9
 800b5a2:	6033      	str	r3, [r6, #0]
 800b5a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5a8:	81a3      	strh	r3, [r4, #12]
 800b5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ae:	e03e      	b.n	800b62e <__swsetup_r+0xba>
 800b5b0:	4b25      	ldr	r3, [pc, #148]	; (800b648 <__swsetup_r+0xd4>)
 800b5b2:	429c      	cmp	r4, r3
 800b5b4:	d101      	bne.n	800b5ba <__swsetup_r+0x46>
 800b5b6:	68ac      	ldr	r4, [r5, #8]
 800b5b8:	e7eb      	b.n	800b592 <__swsetup_r+0x1e>
 800b5ba:	4b24      	ldr	r3, [pc, #144]	; (800b64c <__swsetup_r+0xd8>)
 800b5bc:	429c      	cmp	r4, r3
 800b5be:	bf08      	it	eq
 800b5c0:	68ec      	ldreq	r4, [r5, #12]
 800b5c2:	e7e6      	b.n	800b592 <__swsetup_r+0x1e>
 800b5c4:	0758      	lsls	r0, r3, #29
 800b5c6:	d512      	bpl.n	800b5ee <__swsetup_r+0x7a>
 800b5c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ca:	b141      	cbz	r1, 800b5de <__swsetup_r+0x6a>
 800b5cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5d0:	4299      	cmp	r1, r3
 800b5d2:	d002      	beq.n	800b5da <__swsetup_r+0x66>
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f000 fa59 	bl	800ba8c <_free_r>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	6363      	str	r3, [r4, #52]	; 0x34
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5e4:	81a3      	strh	r3, [r4, #12]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	6063      	str	r3, [r4, #4]
 800b5ea:	6923      	ldr	r3, [r4, #16]
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	f043 0308 	orr.w	r3, r3, #8
 800b5f4:	81a3      	strh	r3, [r4, #12]
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	b94b      	cbnz	r3, 800b60e <__swsetup_r+0x9a>
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b604:	d003      	beq.n	800b60e <__swsetup_r+0x9a>
 800b606:	4621      	mov	r1, r4
 800b608:	4630      	mov	r0, r6
 800b60a:	f000 f9ff 	bl	800ba0c <__smakebuf_r>
 800b60e:	89a0      	ldrh	r0, [r4, #12]
 800b610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b614:	f010 0301 	ands.w	r3, r0, #1
 800b618:	d00a      	beq.n	800b630 <__swsetup_r+0xbc>
 800b61a:	2300      	movs	r3, #0
 800b61c:	60a3      	str	r3, [r4, #8]
 800b61e:	6963      	ldr	r3, [r4, #20]
 800b620:	425b      	negs	r3, r3
 800b622:	61a3      	str	r3, [r4, #24]
 800b624:	6923      	ldr	r3, [r4, #16]
 800b626:	b943      	cbnz	r3, 800b63a <__swsetup_r+0xc6>
 800b628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b62c:	d1ba      	bne.n	800b5a4 <__swsetup_r+0x30>
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	0781      	lsls	r1, r0, #30
 800b632:	bf58      	it	pl
 800b634:	6963      	ldrpl	r3, [r4, #20]
 800b636:	60a3      	str	r3, [r4, #8]
 800b638:	e7f4      	b.n	800b624 <__swsetup_r+0xb0>
 800b63a:	2000      	movs	r0, #0
 800b63c:	e7f7      	b.n	800b62e <__swsetup_r+0xba>
 800b63e:	bf00      	nop
 800b640:	2000003c 	.word	0x2000003c
 800b644:	0800cb6c 	.word	0x0800cb6c
 800b648:	0800cb8c 	.word	0x0800cb8c
 800b64c:	0800cb4c 	.word	0x0800cb4c

0800b650 <__sflush_r>:
 800b650:	898a      	ldrh	r2, [r1, #12]
 800b652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b656:	4605      	mov	r5, r0
 800b658:	0710      	lsls	r0, r2, #28
 800b65a:	460c      	mov	r4, r1
 800b65c:	d458      	bmi.n	800b710 <__sflush_r+0xc0>
 800b65e:	684b      	ldr	r3, [r1, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	dc05      	bgt.n	800b670 <__sflush_r+0x20>
 800b664:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b666:	2b00      	cmp	r3, #0
 800b668:	dc02      	bgt.n	800b670 <__sflush_r+0x20>
 800b66a:	2000      	movs	r0, #0
 800b66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b672:	2e00      	cmp	r6, #0
 800b674:	d0f9      	beq.n	800b66a <__sflush_r+0x1a>
 800b676:	2300      	movs	r3, #0
 800b678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b67c:	682f      	ldr	r7, [r5, #0]
 800b67e:	602b      	str	r3, [r5, #0]
 800b680:	d032      	beq.n	800b6e8 <__sflush_r+0x98>
 800b682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	075a      	lsls	r2, r3, #29
 800b688:	d505      	bpl.n	800b696 <__sflush_r+0x46>
 800b68a:	6863      	ldr	r3, [r4, #4]
 800b68c:	1ac0      	subs	r0, r0, r3
 800b68e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b690:	b10b      	cbz	r3, 800b696 <__sflush_r+0x46>
 800b692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b694:	1ac0      	subs	r0, r0, r3
 800b696:	2300      	movs	r3, #0
 800b698:	4602      	mov	r2, r0
 800b69a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b69c:	6a21      	ldr	r1, [r4, #32]
 800b69e:	4628      	mov	r0, r5
 800b6a0:	47b0      	blx	r6
 800b6a2:	1c43      	adds	r3, r0, #1
 800b6a4:	89a3      	ldrh	r3, [r4, #12]
 800b6a6:	d106      	bne.n	800b6b6 <__sflush_r+0x66>
 800b6a8:	6829      	ldr	r1, [r5, #0]
 800b6aa:	291d      	cmp	r1, #29
 800b6ac:	d82c      	bhi.n	800b708 <__sflush_r+0xb8>
 800b6ae:	4a2a      	ldr	r2, [pc, #168]	; (800b758 <__sflush_r+0x108>)
 800b6b0:	40ca      	lsrs	r2, r1
 800b6b2:	07d6      	lsls	r6, r2, #31
 800b6b4:	d528      	bpl.n	800b708 <__sflush_r+0xb8>
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	6062      	str	r2, [r4, #4]
 800b6ba:	04d9      	lsls	r1, r3, #19
 800b6bc:	6922      	ldr	r2, [r4, #16]
 800b6be:	6022      	str	r2, [r4, #0]
 800b6c0:	d504      	bpl.n	800b6cc <__sflush_r+0x7c>
 800b6c2:	1c42      	adds	r2, r0, #1
 800b6c4:	d101      	bne.n	800b6ca <__sflush_r+0x7a>
 800b6c6:	682b      	ldr	r3, [r5, #0]
 800b6c8:	b903      	cbnz	r3, 800b6cc <__sflush_r+0x7c>
 800b6ca:	6560      	str	r0, [r4, #84]	; 0x54
 800b6cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6ce:	602f      	str	r7, [r5, #0]
 800b6d0:	2900      	cmp	r1, #0
 800b6d2:	d0ca      	beq.n	800b66a <__sflush_r+0x1a>
 800b6d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6d8:	4299      	cmp	r1, r3
 800b6da:	d002      	beq.n	800b6e2 <__sflush_r+0x92>
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f000 f9d5 	bl	800ba8c <_free_r>
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	6360      	str	r0, [r4, #52]	; 0x34
 800b6e6:	e7c1      	b.n	800b66c <__sflush_r+0x1c>
 800b6e8:	6a21      	ldr	r1, [r4, #32]
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	47b0      	blx	r6
 800b6f0:	1c41      	adds	r1, r0, #1
 800b6f2:	d1c7      	bne.n	800b684 <__sflush_r+0x34>
 800b6f4:	682b      	ldr	r3, [r5, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d0c4      	beq.n	800b684 <__sflush_r+0x34>
 800b6fa:	2b1d      	cmp	r3, #29
 800b6fc:	d001      	beq.n	800b702 <__sflush_r+0xb2>
 800b6fe:	2b16      	cmp	r3, #22
 800b700:	d101      	bne.n	800b706 <__sflush_r+0xb6>
 800b702:	602f      	str	r7, [r5, #0]
 800b704:	e7b1      	b.n	800b66a <__sflush_r+0x1a>
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b70c:	81a3      	strh	r3, [r4, #12]
 800b70e:	e7ad      	b.n	800b66c <__sflush_r+0x1c>
 800b710:	690f      	ldr	r7, [r1, #16]
 800b712:	2f00      	cmp	r7, #0
 800b714:	d0a9      	beq.n	800b66a <__sflush_r+0x1a>
 800b716:	0793      	lsls	r3, r2, #30
 800b718:	680e      	ldr	r6, [r1, #0]
 800b71a:	bf08      	it	eq
 800b71c:	694b      	ldreq	r3, [r1, #20]
 800b71e:	600f      	str	r7, [r1, #0]
 800b720:	bf18      	it	ne
 800b722:	2300      	movne	r3, #0
 800b724:	eba6 0807 	sub.w	r8, r6, r7
 800b728:	608b      	str	r3, [r1, #8]
 800b72a:	f1b8 0f00 	cmp.w	r8, #0
 800b72e:	dd9c      	ble.n	800b66a <__sflush_r+0x1a>
 800b730:	6a21      	ldr	r1, [r4, #32]
 800b732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b734:	4643      	mov	r3, r8
 800b736:	463a      	mov	r2, r7
 800b738:	4628      	mov	r0, r5
 800b73a:	47b0      	blx	r6
 800b73c:	2800      	cmp	r0, #0
 800b73e:	dc06      	bgt.n	800b74e <__sflush_r+0xfe>
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b746:	81a3      	strh	r3, [r4, #12]
 800b748:	f04f 30ff 	mov.w	r0, #4294967295
 800b74c:	e78e      	b.n	800b66c <__sflush_r+0x1c>
 800b74e:	4407      	add	r7, r0
 800b750:	eba8 0800 	sub.w	r8, r8, r0
 800b754:	e7e9      	b.n	800b72a <__sflush_r+0xda>
 800b756:	bf00      	nop
 800b758:	20400001 	.word	0x20400001

0800b75c <_fflush_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	690b      	ldr	r3, [r1, #16]
 800b760:	4605      	mov	r5, r0
 800b762:	460c      	mov	r4, r1
 800b764:	b913      	cbnz	r3, 800b76c <_fflush_r+0x10>
 800b766:	2500      	movs	r5, #0
 800b768:	4628      	mov	r0, r5
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	b118      	cbz	r0, 800b776 <_fflush_r+0x1a>
 800b76e:	6983      	ldr	r3, [r0, #24]
 800b770:	b90b      	cbnz	r3, 800b776 <_fflush_r+0x1a>
 800b772:	f000 f887 	bl	800b884 <__sinit>
 800b776:	4b14      	ldr	r3, [pc, #80]	; (800b7c8 <_fflush_r+0x6c>)
 800b778:	429c      	cmp	r4, r3
 800b77a:	d11b      	bne.n	800b7b4 <_fflush_r+0x58>
 800b77c:	686c      	ldr	r4, [r5, #4]
 800b77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d0ef      	beq.n	800b766 <_fflush_r+0xa>
 800b786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b788:	07d0      	lsls	r0, r2, #31
 800b78a:	d404      	bmi.n	800b796 <_fflush_r+0x3a>
 800b78c:	0599      	lsls	r1, r3, #22
 800b78e:	d402      	bmi.n	800b796 <_fflush_r+0x3a>
 800b790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b792:	f000 f915 	bl	800b9c0 <__retarget_lock_acquire_recursive>
 800b796:	4628      	mov	r0, r5
 800b798:	4621      	mov	r1, r4
 800b79a:	f7ff ff59 	bl	800b650 <__sflush_r>
 800b79e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7a0:	07da      	lsls	r2, r3, #31
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	d4e0      	bmi.n	800b768 <_fflush_r+0xc>
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	059b      	lsls	r3, r3, #22
 800b7aa:	d4dd      	bmi.n	800b768 <_fflush_r+0xc>
 800b7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ae:	f000 f908 	bl	800b9c2 <__retarget_lock_release_recursive>
 800b7b2:	e7d9      	b.n	800b768 <_fflush_r+0xc>
 800b7b4:	4b05      	ldr	r3, [pc, #20]	; (800b7cc <_fflush_r+0x70>)
 800b7b6:	429c      	cmp	r4, r3
 800b7b8:	d101      	bne.n	800b7be <_fflush_r+0x62>
 800b7ba:	68ac      	ldr	r4, [r5, #8]
 800b7bc:	e7df      	b.n	800b77e <_fflush_r+0x22>
 800b7be:	4b04      	ldr	r3, [pc, #16]	; (800b7d0 <_fflush_r+0x74>)
 800b7c0:	429c      	cmp	r4, r3
 800b7c2:	bf08      	it	eq
 800b7c4:	68ec      	ldreq	r4, [r5, #12]
 800b7c6:	e7da      	b.n	800b77e <_fflush_r+0x22>
 800b7c8:	0800cb6c 	.word	0x0800cb6c
 800b7cc:	0800cb8c 	.word	0x0800cb8c
 800b7d0:	0800cb4c 	.word	0x0800cb4c

0800b7d4 <std>:
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	b510      	push	{r4, lr}
 800b7d8:	4604      	mov	r4, r0
 800b7da:	e9c0 3300 	strd	r3, r3, [r0]
 800b7de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7e2:	6083      	str	r3, [r0, #8]
 800b7e4:	8181      	strh	r1, [r0, #12]
 800b7e6:	6643      	str	r3, [r0, #100]	; 0x64
 800b7e8:	81c2      	strh	r2, [r0, #14]
 800b7ea:	6183      	str	r3, [r0, #24]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	2208      	movs	r2, #8
 800b7f0:	305c      	adds	r0, #92	; 0x5c
 800b7f2:	f7ff fdd7 	bl	800b3a4 <memset>
 800b7f6:	4b05      	ldr	r3, [pc, #20]	; (800b80c <std+0x38>)
 800b7f8:	6263      	str	r3, [r4, #36]	; 0x24
 800b7fa:	4b05      	ldr	r3, [pc, #20]	; (800b810 <std+0x3c>)
 800b7fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7fe:	4b05      	ldr	r3, [pc, #20]	; (800b814 <std+0x40>)
 800b800:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b802:	4b05      	ldr	r3, [pc, #20]	; (800b818 <std+0x44>)
 800b804:	6224      	str	r4, [r4, #32]
 800b806:	6323      	str	r3, [r4, #48]	; 0x30
 800b808:	bd10      	pop	{r4, pc}
 800b80a:	bf00      	nop
 800b80c:	0800c1dd 	.word	0x0800c1dd
 800b810:	0800c1ff 	.word	0x0800c1ff
 800b814:	0800c237 	.word	0x0800c237
 800b818:	0800c25b 	.word	0x0800c25b

0800b81c <_cleanup_r>:
 800b81c:	4901      	ldr	r1, [pc, #4]	; (800b824 <_cleanup_r+0x8>)
 800b81e:	f000 b8af 	b.w	800b980 <_fwalk_reent>
 800b822:	bf00      	nop
 800b824:	0800b75d 	.word	0x0800b75d

0800b828 <__sfmoreglue>:
 800b828:	b570      	push	{r4, r5, r6, lr}
 800b82a:	1e4a      	subs	r2, r1, #1
 800b82c:	2568      	movs	r5, #104	; 0x68
 800b82e:	4355      	muls	r5, r2
 800b830:	460e      	mov	r6, r1
 800b832:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b836:	f000 f979 	bl	800bb2c <_malloc_r>
 800b83a:	4604      	mov	r4, r0
 800b83c:	b140      	cbz	r0, 800b850 <__sfmoreglue+0x28>
 800b83e:	2100      	movs	r1, #0
 800b840:	e9c0 1600 	strd	r1, r6, [r0]
 800b844:	300c      	adds	r0, #12
 800b846:	60a0      	str	r0, [r4, #8]
 800b848:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b84c:	f7ff fdaa 	bl	800b3a4 <memset>
 800b850:	4620      	mov	r0, r4
 800b852:	bd70      	pop	{r4, r5, r6, pc}

0800b854 <__sfp_lock_acquire>:
 800b854:	4801      	ldr	r0, [pc, #4]	; (800b85c <__sfp_lock_acquire+0x8>)
 800b856:	f000 b8b3 	b.w	800b9c0 <__retarget_lock_acquire_recursive>
 800b85a:	bf00      	nop
 800b85c:	20009d08 	.word	0x20009d08

0800b860 <__sfp_lock_release>:
 800b860:	4801      	ldr	r0, [pc, #4]	; (800b868 <__sfp_lock_release+0x8>)
 800b862:	f000 b8ae 	b.w	800b9c2 <__retarget_lock_release_recursive>
 800b866:	bf00      	nop
 800b868:	20009d08 	.word	0x20009d08

0800b86c <__sinit_lock_acquire>:
 800b86c:	4801      	ldr	r0, [pc, #4]	; (800b874 <__sinit_lock_acquire+0x8>)
 800b86e:	f000 b8a7 	b.w	800b9c0 <__retarget_lock_acquire_recursive>
 800b872:	bf00      	nop
 800b874:	20009d03 	.word	0x20009d03

0800b878 <__sinit_lock_release>:
 800b878:	4801      	ldr	r0, [pc, #4]	; (800b880 <__sinit_lock_release+0x8>)
 800b87a:	f000 b8a2 	b.w	800b9c2 <__retarget_lock_release_recursive>
 800b87e:	bf00      	nop
 800b880:	20009d03 	.word	0x20009d03

0800b884 <__sinit>:
 800b884:	b510      	push	{r4, lr}
 800b886:	4604      	mov	r4, r0
 800b888:	f7ff fff0 	bl	800b86c <__sinit_lock_acquire>
 800b88c:	69a3      	ldr	r3, [r4, #24]
 800b88e:	b11b      	cbz	r3, 800b898 <__sinit+0x14>
 800b890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b894:	f7ff bff0 	b.w	800b878 <__sinit_lock_release>
 800b898:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b89c:	6523      	str	r3, [r4, #80]	; 0x50
 800b89e:	4b13      	ldr	r3, [pc, #76]	; (800b8ec <__sinit+0x68>)
 800b8a0:	4a13      	ldr	r2, [pc, #76]	; (800b8f0 <__sinit+0x6c>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8a6:	42a3      	cmp	r3, r4
 800b8a8:	bf04      	itt	eq
 800b8aa:	2301      	moveq	r3, #1
 800b8ac:	61a3      	streq	r3, [r4, #24]
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 f820 	bl	800b8f4 <__sfp>
 800b8b4:	6060      	str	r0, [r4, #4]
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f000 f81c 	bl	800b8f4 <__sfp>
 800b8bc:	60a0      	str	r0, [r4, #8]
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f000 f818 	bl	800b8f4 <__sfp>
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	60e0      	str	r0, [r4, #12]
 800b8c8:	2104      	movs	r1, #4
 800b8ca:	6860      	ldr	r0, [r4, #4]
 800b8cc:	f7ff ff82 	bl	800b7d4 <std>
 800b8d0:	68a0      	ldr	r0, [r4, #8]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	2109      	movs	r1, #9
 800b8d6:	f7ff ff7d 	bl	800b7d4 <std>
 800b8da:	68e0      	ldr	r0, [r4, #12]
 800b8dc:	2202      	movs	r2, #2
 800b8de:	2112      	movs	r1, #18
 800b8e0:	f7ff ff78 	bl	800b7d4 <std>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	61a3      	str	r3, [r4, #24]
 800b8e8:	e7d2      	b.n	800b890 <__sinit+0xc>
 800b8ea:	bf00      	nop
 800b8ec:	0800cb48 	.word	0x0800cb48
 800b8f0:	0800b81d 	.word	0x0800b81d

0800b8f4 <__sfp>:
 800b8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f6:	4607      	mov	r7, r0
 800b8f8:	f7ff ffac 	bl	800b854 <__sfp_lock_acquire>
 800b8fc:	4b1e      	ldr	r3, [pc, #120]	; (800b978 <__sfp+0x84>)
 800b8fe:	681e      	ldr	r6, [r3, #0]
 800b900:	69b3      	ldr	r3, [r6, #24]
 800b902:	b913      	cbnz	r3, 800b90a <__sfp+0x16>
 800b904:	4630      	mov	r0, r6
 800b906:	f7ff ffbd 	bl	800b884 <__sinit>
 800b90a:	3648      	adds	r6, #72	; 0x48
 800b90c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b910:	3b01      	subs	r3, #1
 800b912:	d503      	bpl.n	800b91c <__sfp+0x28>
 800b914:	6833      	ldr	r3, [r6, #0]
 800b916:	b30b      	cbz	r3, 800b95c <__sfp+0x68>
 800b918:	6836      	ldr	r6, [r6, #0]
 800b91a:	e7f7      	b.n	800b90c <__sfp+0x18>
 800b91c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b920:	b9d5      	cbnz	r5, 800b958 <__sfp+0x64>
 800b922:	4b16      	ldr	r3, [pc, #88]	; (800b97c <__sfp+0x88>)
 800b924:	60e3      	str	r3, [r4, #12]
 800b926:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b92a:	6665      	str	r5, [r4, #100]	; 0x64
 800b92c:	f000 f847 	bl	800b9be <__retarget_lock_init_recursive>
 800b930:	f7ff ff96 	bl	800b860 <__sfp_lock_release>
 800b934:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b938:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b93c:	6025      	str	r5, [r4, #0]
 800b93e:	61a5      	str	r5, [r4, #24]
 800b940:	2208      	movs	r2, #8
 800b942:	4629      	mov	r1, r5
 800b944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b948:	f7ff fd2c 	bl	800b3a4 <memset>
 800b94c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b954:	4620      	mov	r0, r4
 800b956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b958:	3468      	adds	r4, #104	; 0x68
 800b95a:	e7d9      	b.n	800b910 <__sfp+0x1c>
 800b95c:	2104      	movs	r1, #4
 800b95e:	4638      	mov	r0, r7
 800b960:	f7ff ff62 	bl	800b828 <__sfmoreglue>
 800b964:	4604      	mov	r4, r0
 800b966:	6030      	str	r0, [r6, #0]
 800b968:	2800      	cmp	r0, #0
 800b96a:	d1d5      	bne.n	800b918 <__sfp+0x24>
 800b96c:	f7ff ff78 	bl	800b860 <__sfp_lock_release>
 800b970:	230c      	movs	r3, #12
 800b972:	603b      	str	r3, [r7, #0]
 800b974:	e7ee      	b.n	800b954 <__sfp+0x60>
 800b976:	bf00      	nop
 800b978:	0800cb48 	.word	0x0800cb48
 800b97c:	ffff0001 	.word	0xffff0001

0800b980 <_fwalk_reent>:
 800b980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b984:	4606      	mov	r6, r0
 800b986:	4688      	mov	r8, r1
 800b988:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b98c:	2700      	movs	r7, #0
 800b98e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b992:	f1b9 0901 	subs.w	r9, r9, #1
 800b996:	d505      	bpl.n	800b9a4 <_fwalk_reent+0x24>
 800b998:	6824      	ldr	r4, [r4, #0]
 800b99a:	2c00      	cmp	r4, #0
 800b99c:	d1f7      	bne.n	800b98e <_fwalk_reent+0xe>
 800b99e:	4638      	mov	r0, r7
 800b9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a4:	89ab      	ldrh	r3, [r5, #12]
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d907      	bls.n	800b9ba <_fwalk_reent+0x3a>
 800b9aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	d003      	beq.n	800b9ba <_fwalk_reent+0x3a>
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	47c0      	blx	r8
 800b9b8:	4307      	orrs	r7, r0
 800b9ba:	3568      	adds	r5, #104	; 0x68
 800b9bc:	e7e9      	b.n	800b992 <_fwalk_reent+0x12>

0800b9be <__retarget_lock_init_recursive>:
 800b9be:	4770      	bx	lr

0800b9c0 <__retarget_lock_acquire_recursive>:
 800b9c0:	4770      	bx	lr

0800b9c2 <__retarget_lock_release_recursive>:
 800b9c2:	4770      	bx	lr

0800b9c4 <__swhatbuf_r>:
 800b9c4:	b570      	push	{r4, r5, r6, lr}
 800b9c6:	460e      	mov	r6, r1
 800b9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9cc:	2900      	cmp	r1, #0
 800b9ce:	b096      	sub	sp, #88	; 0x58
 800b9d0:	4614      	mov	r4, r2
 800b9d2:	461d      	mov	r5, r3
 800b9d4:	da07      	bge.n	800b9e6 <__swhatbuf_r+0x22>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	602b      	str	r3, [r5, #0]
 800b9da:	89b3      	ldrh	r3, [r6, #12]
 800b9dc:	061a      	lsls	r2, r3, #24
 800b9de:	d410      	bmi.n	800ba02 <__swhatbuf_r+0x3e>
 800b9e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9e4:	e00e      	b.n	800ba04 <__swhatbuf_r+0x40>
 800b9e6:	466a      	mov	r2, sp
 800b9e8:	f000 fc5e 	bl	800c2a8 <_fstat_r>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	dbf2      	blt.n	800b9d6 <__swhatbuf_r+0x12>
 800b9f0:	9a01      	ldr	r2, [sp, #4]
 800b9f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b9f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b9fa:	425a      	negs	r2, r3
 800b9fc:	415a      	adcs	r2, r3
 800b9fe:	602a      	str	r2, [r5, #0]
 800ba00:	e7ee      	b.n	800b9e0 <__swhatbuf_r+0x1c>
 800ba02:	2340      	movs	r3, #64	; 0x40
 800ba04:	2000      	movs	r0, #0
 800ba06:	6023      	str	r3, [r4, #0]
 800ba08:	b016      	add	sp, #88	; 0x58
 800ba0a:	bd70      	pop	{r4, r5, r6, pc}

0800ba0c <__smakebuf_r>:
 800ba0c:	898b      	ldrh	r3, [r1, #12]
 800ba0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba10:	079d      	lsls	r5, r3, #30
 800ba12:	4606      	mov	r6, r0
 800ba14:	460c      	mov	r4, r1
 800ba16:	d507      	bpl.n	800ba28 <__smakebuf_r+0x1c>
 800ba18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	6123      	str	r3, [r4, #16]
 800ba20:	2301      	movs	r3, #1
 800ba22:	6163      	str	r3, [r4, #20]
 800ba24:	b002      	add	sp, #8
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	ab01      	add	r3, sp, #4
 800ba2a:	466a      	mov	r2, sp
 800ba2c:	f7ff ffca 	bl	800b9c4 <__swhatbuf_r>
 800ba30:	9900      	ldr	r1, [sp, #0]
 800ba32:	4605      	mov	r5, r0
 800ba34:	4630      	mov	r0, r6
 800ba36:	f000 f879 	bl	800bb2c <_malloc_r>
 800ba3a:	b948      	cbnz	r0, 800ba50 <__smakebuf_r+0x44>
 800ba3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba40:	059a      	lsls	r2, r3, #22
 800ba42:	d4ef      	bmi.n	800ba24 <__smakebuf_r+0x18>
 800ba44:	f023 0303 	bic.w	r3, r3, #3
 800ba48:	f043 0302 	orr.w	r3, r3, #2
 800ba4c:	81a3      	strh	r3, [r4, #12]
 800ba4e:	e7e3      	b.n	800ba18 <__smakebuf_r+0xc>
 800ba50:	4b0d      	ldr	r3, [pc, #52]	; (800ba88 <__smakebuf_r+0x7c>)
 800ba52:	62b3      	str	r3, [r6, #40]	; 0x28
 800ba54:	89a3      	ldrh	r3, [r4, #12]
 800ba56:	6020      	str	r0, [r4, #0]
 800ba58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba5c:	81a3      	strh	r3, [r4, #12]
 800ba5e:	9b00      	ldr	r3, [sp, #0]
 800ba60:	6163      	str	r3, [r4, #20]
 800ba62:	9b01      	ldr	r3, [sp, #4]
 800ba64:	6120      	str	r0, [r4, #16]
 800ba66:	b15b      	cbz	r3, 800ba80 <__smakebuf_r+0x74>
 800ba68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f000 fc2d 	bl	800c2cc <_isatty_r>
 800ba72:	b128      	cbz	r0, 800ba80 <__smakebuf_r+0x74>
 800ba74:	89a3      	ldrh	r3, [r4, #12]
 800ba76:	f023 0303 	bic.w	r3, r3, #3
 800ba7a:	f043 0301 	orr.w	r3, r3, #1
 800ba7e:	81a3      	strh	r3, [r4, #12]
 800ba80:	89a0      	ldrh	r0, [r4, #12]
 800ba82:	4305      	orrs	r5, r0
 800ba84:	81a5      	strh	r5, [r4, #12]
 800ba86:	e7cd      	b.n	800ba24 <__smakebuf_r+0x18>
 800ba88:	0800b81d 	.word	0x0800b81d

0800ba8c <_free_r>:
 800ba8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba8e:	2900      	cmp	r1, #0
 800ba90:	d048      	beq.n	800bb24 <_free_r+0x98>
 800ba92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba96:	9001      	str	r0, [sp, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f1a1 0404 	sub.w	r4, r1, #4
 800ba9e:	bfb8      	it	lt
 800baa0:	18e4      	addlt	r4, r4, r3
 800baa2:	f000 fc35 	bl	800c310 <__malloc_lock>
 800baa6:	4a20      	ldr	r2, [pc, #128]	; (800bb28 <_free_r+0x9c>)
 800baa8:	9801      	ldr	r0, [sp, #4]
 800baaa:	6813      	ldr	r3, [r2, #0]
 800baac:	4615      	mov	r5, r2
 800baae:	b933      	cbnz	r3, 800babe <_free_r+0x32>
 800bab0:	6063      	str	r3, [r4, #4]
 800bab2:	6014      	str	r4, [r2, #0]
 800bab4:	b003      	add	sp, #12
 800bab6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800baba:	f000 bc2f 	b.w	800c31c <__malloc_unlock>
 800babe:	42a3      	cmp	r3, r4
 800bac0:	d90b      	bls.n	800bada <_free_r+0x4e>
 800bac2:	6821      	ldr	r1, [r4, #0]
 800bac4:	1862      	adds	r2, r4, r1
 800bac6:	4293      	cmp	r3, r2
 800bac8:	bf04      	itt	eq
 800baca:	681a      	ldreq	r2, [r3, #0]
 800bacc:	685b      	ldreq	r3, [r3, #4]
 800bace:	6063      	str	r3, [r4, #4]
 800bad0:	bf04      	itt	eq
 800bad2:	1852      	addeq	r2, r2, r1
 800bad4:	6022      	streq	r2, [r4, #0]
 800bad6:	602c      	str	r4, [r5, #0]
 800bad8:	e7ec      	b.n	800bab4 <_free_r+0x28>
 800bada:	461a      	mov	r2, r3
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	b10b      	cbz	r3, 800bae4 <_free_r+0x58>
 800bae0:	42a3      	cmp	r3, r4
 800bae2:	d9fa      	bls.n	800bada <_free_r+0x4e>
 800bae4:	6811      	ldr	r1, [r2, #0]
 800bae6:	1855      	adds	r5, r2, r1
 800bae8:	42a5      	cmp	r5, r4
 800baea:	d10b      	bne.n	800bb04 <_free_r+0x78>
 800baec:	6824      	ldr	r4, [r4, #0]
 800baee:	4421      	add	r1, r4
 800baf0:	1854      	adds	r4, r2, r1
 800baf2:	42a3      	cmp	r3, r4
 800baf4:	6011      	str	r1, [r2, #0]
 800baf6:	d1dd      	bne.n	800bab4 <_free_r+0x28>
 800baf8:	681c      	ldr	r4, [r3, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	6053      	str	r3, [r2, #4]
 800bafe:	4421      	add	r1, r4
 800bb00:	6011      	str	r1, [r2, #0]
 800bb02:	e7d7      	b.n	800bab4 <_free_r+0x28>
 800bb04:	d902      	bls.n	800bb0c <_free_r+0x80>
 800bb06:	230c      	movs	r3, #12
 800bb08:	6003      	str	r3, [r0, #0]
 800bb0a:	e7d3      	b.n	800bab4 <_free_r+0x28>
 800bb0c:	6825      	ldr	r5, [r4, #0]
 800bb0e:	1961      	adds	r1, r4, r5
 800bb10:	428b      	cmp	r3, r1
 800bb12:	bf04      	itt	eq
 800bb14:	6819      	ldreq	r1, [r3, #0]
 800bb16:	685b      	ldreq	r3, [r3, #4]
 800bb18:	6063      	str	r3, [r4, #4]
 800bb1a:	bf04      	itt	eq
 800bb1c:	1949      	addeq	r1, r1, r5
 800bb1e:	6021      	streq	r1, [r4, #0]
 800bb20:	6054      	str	r4, [r2, #4]
 800bb22:	e7c7      	b.n	800bab4 <_free_r+0x28>
 800bb24:	b003      	add	sp, #12
 800bb26:	bd30      	pop	{r4, r5, pc}
 800bb28:	200098f0 	.word	0x200098f0

0800bb2c <_malloc_r>:
 800bb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2e:	1ccd      	adds	r5, r1, #3
 800bb30:	f025 0503 	bic.w	r5, r5, #3
 800bb34:	3508      	adds	r5, #8
 800bb36:	2d0c      	cmp	r5, #12
 800bb38:	bf38      	it	cc
 800bb3a:	250c      	movcc	r5, #12
 800bb3c:	2d00      	cmp	r5, #0
 800bb3e:	4606      	mov	r6, r0
 800bb40:	db01      	blt.n	800bb46 <_malloc_r+0x1a>
 800bb42:	42a9      	cmp	r1, r5
 800bb44:	d903      	bls.n	800bb4e <_malloc_r+0x22>
 800bb46:	230c      	movs	r3, #12
 800bb48:	6033      	str	r3, [r6, #0]
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb4e:	f000 fbdf 	bl	800c310 <__malloc_lock>
 800bb52:	4921      	ldr	r1, [pc, #132]	; (800bbd8 <_malloc_r+0xac>)
 800bb54:	680a      	ldr	r2, [r1, #0]
 800bb56:	4614      	mov	r4, r2
 800bb58:	b99c      	cbnz	r4, 800bb82 <_malloc_r+0x56>
 800bb5a:	4f20      	ldr	r7, [pc, #128]	; (800bbdc <_malloc_r+0xb0>)
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	b923      	cbnz	r3, 800bb6a <_malloc_r+0x3e>
 800bb60:	4621      	mov	r1, r4
 800bb62:	4630      	mov	r0, r6
 800bb64:	f000 fb2a 	bl	800c1bc <_sbrk_r>
 800bb68:	6038      	str	r0, [r7, #0]
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f000 fb25 	bl	800c1bc <_sbrk_r>
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	d123      	bne.n	800bbbe <_malloc_r+0x92>
 800bb76:	230c      	movs	r3, #12
 800bb78:	6033      	str	r3, [r6, #0]
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f000 fbce 	bl	800c31c <__malloc_unlock>
 800bb80:	e7e3      	b.n	800bb4a <_malloc_r+0x1e>
 800bb82:	6823      	ldr	r3, [r4, #0]
 800bb84:	1b5b      	subs	r3, r3, r5
 800bb86:	d417      	bmi.n	800bbb8 <_malloc_r+0x8c>
 800bb88:	2b0b      	cmp	r3, #11
 800bb8a:	d903      	bls.n	800bb94 <_malloc_r+0x68>
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	441c      	add	r4, r3
 800bb90:	6025      	str	r5, [r4, #0]
 800bb92:	e004      	b.n	800bb9e <_malloc_r+0x72>
 800bb94:	6863      	ldr	r3, [r4, #4]
 800bb96:	42a2      	cmp	r2, r4
 800bb98:	bf0c      	ite	eq
 800bb9a:	600b      	streq	r3, [r1, #0]
 800bb9c:	6053      	strne	r3, [r2, #4]
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f000 fbbc 	bl	800c31c <__malloc_unlock>
 800bba4:	f104 000b 	add.w	r0, r4, #11
 800bba8:	1d23      	adds	r3, r4, #4
 800bbaa:	f020 0007 	bic.w	r0, r0, #7
 800bbae:	1ac2      	subs	r2, r0, r3
 800bbb0:	d0cc      	beq.n	800bb4c <_malloc_r+0x20>
 800bbb2:	1a1b      	subs	r3, r3, r0
 800bbb4:	50a3      	str	r3, [r4, r2]
 800bbb6:	e7c9      	b.n	800bb4c <_malloc_r+0x20>
 800bbb8:	4622      	mov	r2, r4
 800bbba:	6864      	ldr	r4, [r4, #4]
 800bbbc:	e7cc      	b.n	800bb58 <_malloc_r+0x2c>
 800bbbe:	1cc4      	adds	r4, r0, #3
 800bbc0:	f024 0403 	bic.w	r4, r4, #3
 800bbc4:	42a0      	cmp	r0, r4
 800bbc6:	d0e3      	beq.n	800bb90 <_malloc_r+0x64>
 800bbc8:	1a21      	subs	r1, r4, r0
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f000 faf6 	bl	800c1bc <_sbrk_r>
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	d1dd      	bne.n	800bb90 <_malloc_r+0x64>
 800bbd4:	e7cf      	b.n	800bb76 <_malloc_r+0x4a>
 800bbd6:	bf00      	nop
 800bbd8:	200098f0 	.word	0x200098f0
 800bbdc:	200098f4 	.word	0x200098f4

0800bbe0 <__sfputc_r>:
 800bbe0:	6893      	ldr	r3, [r2, #8]
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	b410      	push	{r4}
 800bbe8:	6093      	str	r3, [r2, #8]
 800bbea:	da08      	bge.n	800bbfe <__sfputc_r+0x1e>
 800bbec:	6994      	ldr	r4, [r2, #24]
 800bbee:	42a3      	cmp	r3, r4
 800bbf0:	db01      	blt.n	800bbf6 <__sfputc_r+0x16>
 800bbf2:	290a      	cmp	r1, #10
 800bbf4:	d103      	bne.n	800bbfe <__sfputc_r+0x1e>
 800bbf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbfa:	f7ff bc69 	b.w	800b4d0 <__swbuf_r>
 800bbfe:	6813      	ldr	r3, [r2, #0]
 800bc00:	1c58      	adds	r0, r3, #1
 800bc02:	6010      	str	r0, [r2, #0]
 800bc04:	7019      	strb	r1, [r3, #0]
 800bc06:	4608      	mov	r0, r1
 800bc08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <__sfputs_r>:
 800bc0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc10:	4606      	mov	r6, r0
 800bc12:	460f      	mov	r7, r1
 800bc14:	4614      	mov	r4, r2
 800bc16:	18d5      	adds	r5, r2, r3
 800bc18:	42ac      	cmp	r4, r5
 800bc1a:	d101      	bne.n	800bc20 <__sfputs_r+0x12>
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	e007      	b.n	800bc30 <__sfputs_r+0x22>
 800bc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc24:	463a      	mov	r2, r7
 800bc26:	4630      	mov	r0, r6
 800bc28:	f7ff ffda 	bl	800bbe0 <__sfputc_r>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d1f3      	bne.n	800bc18 <__sfputs_r+0xa>
 800bc30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc34 <_vfiprintf_r>:
 800bc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc38:	460d      	mov	r5, r1
 800bc3a:	b09d      	sub	sp, #116	; 0x74
 800bc3c:	4614      	mov	r4, r2
 800bc3e:	4698      	mov	r8, r3
 800bc40:	4606      	mov	r6, r0
 800bc42:	b118      	cbz	r0, 800bc4c <_vfiprintf_r+0x18>
 800bc44:	6983      	ldr	r3, [r0, #24]
 800bc46:	b90b      	cbnz	r3, 800bc4c <_vfiprintf_r+0x18>
 800bc48:	f7ff fe1c 	bl	800b884 <__sinit>
 800bc4c:	4b89      	ldr	r3, [pc, #548]	; (800be74 <_vfiprintf_r+0x240>)
 800bc4e:	429d      	cmp	r5, r3
 800bc50:	d11b      	bne.n	800bc8a <_vfiprintf_r+0x56>
 800bc52:	6875      	ldr	r5, [r6, #4]
 800bc54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc56:	07d9      	lsls	r1, r3, #31
 800bc58:	d405      	bmi.n	800bc66 <_vfiprintf_r+0x32>
 800bc5a:	89ab      	ldrh	r3, [r5, #12]
 800bc5c:	059a      	lsls	r2, r3, #22
 800bc5e:	d402      	bmi.n	800bc66 <_vfiprintf_r+0x32>
 800bc60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc62:	f7ff fead 	bl	800b9c0 <__retarget_lock_acquire_recursive>
 800bc66:	89ab      	ldrh	r3, [r5, #12]
 800bc68:	071b      	lsls	r3, r3, #28
 800bc6a:	d501      	bpl.n	800bc70 <_vfiprintf_r+0x3c>
 800bc6c:	692b      	ldr	r3, [r5, #16]
 800bc6e:	b9eb      	cbnz	r3, 800bcac <_vfiprintf_r+0x78>
 800bc70:	4629      	mov	r1, r5
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7ff fc7e 	bl	800b574 <__swsetup_r>
 800bc78:	b1c0      	cbz	r0, 800bcac <_vfiprintf_r+0x78>
 800bc7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc7c:	07dc      	lsls	r4, r3, #31
 800bc7e:	d50e      	bpl.n	800bc9e <_vfiprintf_r+0x6a>
 800bc80:	f04f 30ff 	mov.w	r0, #4294967295
 800bc84:	b01d      	add	sp, #116	; 0x74
 800bc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8a:	4b7b      	ldr	r3, [pc, #492]	; (800be78 <_vfiprintf_r+0x244>)
 800bc8c:	429d      	cmp	r5, r3
 800bc8e:	d101      	bne.n	800bc94 <_vfiprintf_r+0x60>
 800bc90:	68b5      	ldr	r5, [r6, #8]
 800bc92:	e7df      	b.n	800bc54 <_vfiprintf_r+0x20>
 800bc94:	4b79      	ldr	r3, [pc, #484]	; (800be7c <_vfiprintf_r+0x248>)
 800bc96:	429d      	cmp	r5, r3
 800bc98:	bf08      	it	eq
 800bc9a:	68f5      	ldreq	r5, [r6, #12]
 800bc9c:	e7da      	b.n	800bc54 <_vfiprintf_r+0x20>
 800bc9e:	89ab      	ldrh	r3, [r5, #12]
 800bca0:	0598      	lsls	r0, r3, #22
 800bca2:	d4ed      	bmi.n	800bc80 <_vfiprintf_r+0x4c>
 800bca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bca6:	f7ff fe8c 	bl	800b9c2 <__retarget_lock_release_recursive>
 800bcaa:	e7e9      	b.n	800bc80 <_vfiprintf_r+0x4c>
 800bcac:	2300      	movs	r3, #0
 800bcae:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb0:	2320      	movs	r3, #32
 800bcb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcba:	2330      	movs	r3, #48	; 0x30
 800bcbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be80 <_vfiprintf_r+0x24c>
 800bcc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcc4:	f04f 0901 	mov.w	r9, #1
 800bcc8:	4623      	mov	r3, r4
 800bcca:	469a      	mov	sl, r3
 800bccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcd0:	b10a      	cbz	r2, 800bcd6 <_vfiprintf_r+0xa2>
 800bcd2:	2a25      	cmp	r2, #37	; 0x25
 800bcd4:	d1f9      	bne.n	800bcca <_vfiprintf_r+0x96>
 800bcd6:	ebba 0b04 	subs.w	fp, sl, r4
 800bcda:	d00b      	beq.n	800bcf4 <_vfiprintf_r+0xc0>
 800bcdc:	465b      	mov	r3, fp
 800bcde:	4622      	mov	r2, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7ff ff93 	bl	800bc0e <__sfputs_r>
 800bce8:	3001      	adds	r0, #1
 800bcea:	f000 80aa 	beq.w	800be42 <_vfiprintf_r+0x20e>
 800bcee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcf0:	445a      	add	r2, fp
 800bcf2:	9209      	str	r2, [sp, #36]	; 0x24
 800bcf4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f000 80a2 	beq.w	800be42 <_vfiprintf_r+0x20e>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f04f 32ff 	mov.w	r2, #4294967295
 800bd04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd08:	f10a 0a01 	add.w	sl, sl, #1
 800bd0c:	9304      	str	r3, [sp, #16]
 800bd0e:	9307      	str	r3, [sp, #28]
 800bd10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd14:	931a      	str	r3, [sp, #104]	; 0x68
 800bd16:	4654      	mov	r4, sl
 800bd18:	2205      	movs	r2, #5
 800bd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd1e:	4858      	ldr	r0, [pc, #352]	; (800be80 <_vfiprintf_r+0x24c>)
 800bd20:	f7f4 fa5e 	bl	80001e0 <memchr>
 800bd24:	9a04      	ldr	r2, [sp, #16]
 800bd26:	b9d8      	cbnz	r0, 800bd60 <_vfiprintf_r+0x12c>
 800bd28:	06d1      	lsls	r1, r2, #27
 800bd2a:	bf44      	itt	mi
 800bd2c:	2320      	movmi	r3, #32
 800bd2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd32:	0713      	lsls	r3, r2, #28
 800bd34:	bf44      	itt	mi
 800bd36:	232b      	movmi	r3, #43	; 0x2b
 800bd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd40:	2b2a      	cmp	r3, #42	; 0x2a
 800bd42:	d015      	beq.n	800bd70 <_vfiprintf_r+0x13c>
 800bd44:	9a07      	ldr	r2, [sp, #28]
 800bd46:	4654      	mov	r4, sl
 800bd48:	2000      	movs	r0, #0
 800bd4a:	f04f 0c0a 	mov.w	ip, #10
 800bd4e:	4621      	mov	r1, r4
 800bd50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd54:	3b30      	subs	r3, #48	; 0x30
 800bd56:	2b09      	cmp	r3, #9
 800bd58:	d94e      	bls.n	800bdf8 <_vfiprintf_r+0x1c4>
 800bd5a:	b1b0      	cbz	r0, 800bd8a <_vfiprintf_r+0x156>
 800bd5c:	9207      	str	r2, [sp, #28]
 800bd5e:	e014      	b.n	800bd8a <_vfiprintf_r+0x156>
 800bd60:	eba0 0308 	sub.w	r3, r0, r8
 800bd64:	fa09 f303 	lsl.w	r3, r9, r3
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	9304      	str	r3, [sp, #16]
 800bd6c:	46a2      	mov	sl, r4
 800bd6e:	e7d2      	b.n	800bd16 <_vfiprintf_r+0xe2>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	1d19      	adds	r1, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	9103      	str	r1, [sp, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bfbb      	ittet	lt
 800bd7c:	425b      	neglt	r3, r3
 800bd7e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd82:	9307      	strge	r3, [sp, #28]
 800bd84:	9307      	strlt	r3, [sp, #28]
 800bd86:	bfb8      	it	lt
 800bd88:	9204      	strlt	r2, [sp, #16]
 800bd8a:	7823      	ldrb	r3, [r4, #0]
 800bd8c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd8e:	d10c      	bne.n	800bdaa <_vfiprintf_r+0x176>
 800bd90:	7863      	ldrb	r3, [r4, #1]
 800bd92:	2b2a      	cmp	r3, #42	; 0x2a
 800bd94:	d135      	bne.n	800be02 <_vfiprintf_r+0x1ce>
 800bd96:	9b03      	ldr	r3, [sp, #12]
 800bd98:	1d1a      	adds	r2, r3, #4
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	9203      	str	r2, [sp, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	bfb8      	it	lt
 800bda2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bda6:	3402      	adds	r4, #2
 800bda8:	9305      	str	r3, [sp, #20]
 800bdaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be90 <_vfiprintf_r+0x25c>
 800bdae:	7821      	ldrb	r1, [r4, #0]
 800bdb0:	2203      	movs	r2, #3
 800bdb2:	4650      	mov	r0, sl
 800bdb4:	f7f4 fa14 	bl	80001e0 <memchr>
 800bdb8:	b140      	cbz	r0, 800bdcc <_vfiprintf_r+0x198>
 800bdba:	2340      	movs	r3, #64	; 0x40
 800bdbc:	eba0 000a 	sub.w	r0, r0, sl
 800bdc0:	fa03 f000 	lsl.w	r0, r3, r0
 800bdc4:	9b04      	ldr	r3, [sp, #16]
 800bdc6:	4303      	orrs	r3, r0
 800bdc8:	3401      	adds	r4, #1
 800bdca:	9304      	str	r3, [sp, #16]
 800bdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd0:	482c      	ldr	r0, [pc, #176]	; (800be84 <_vfiprintf_r+0x250>)
 800bdd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdd6:	2206      	movs	r2, #6
 800bdd8:	f7f4 fa02 	bl	80001e0 <memchr>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d03f      	beq.n	800be60 <_vfiprintf_r+0x22c>
 800bde0:	4b29      	ldr	r3, [pc, #164]	; (800be88 <_vfiprintf_r+0x254>)
 800bde2:	bb1b      	cbnz	r3, 800be2c <_vfiprintf_r+0x1f8>
 800bde4:	9b03      	ldr	r3, [sp, #12]
 800bde6:	3307      	adds	r3, #7
 800bde8:	f023 0307 	bic.w	r3, r3, #7
 800bdec:	3308      	adds	r3, #8
 800bdee:	9303      	str	r3, [sp, #12]
 800bdf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdf2:	443b      	add	r3, r7
 800bdf4:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf6:	e767      	b.n	800bcc8 <_vfiprintf_r+0x94>
 800bdf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdfc:	460c      	mov	r4, r1
 800bdfe:	2001      	movs	r0, #1
 800be00:	e7a5      	b.n	800bd4e <_vfiprintf_r+0x11a>
 800be02:	2300      	movs	r3, #0
 800be04:	3401      	adds	r4, #1
 800be06:	9305      	str	r3, [sp, #20]
 800be08:	4619      	mov	r1, r3
 800be0a:	f04f 0c0a 	mov.w	ip, #10
 800be0e:	4620      	mov	r0, r4
 800be10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be14:	3a30      	subs	r2, #48	; 0x30
 800be16:	2a09      	cmp	r2, #9
 800be18:	d903      	bls.n	800be22 <_vfiprintf_r+0x1ee>
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d0c5      	beq.n	800bdaa <_vfiprintf_r+0x176>
 800be1e:	9105      	str	r1, [sp, #20]
 800be20:	e7c3      	b.n	800bdaa <_vfiprintf_r+0x176>
 800be22:	fb0c 2101 	mla	r1, ip, r1, r2
 800be26:	4604      	mov	r4, r0
 800be28:	2301      	movs	r3, #1
 800be2a:	e7f0      	b.n	800be0e <_vfiprintf_r+0x1da>
 800be2c:	ab03      	add	r3, sp, #12
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	462a      	mov	r2, r5
 800be32:	4b16      	ldr	r3, [pc, #88]	; (800be8c <_vfiprintf_r+0x258>)
 800be34:	a904      	add	r1, sp, #16
 800be36:	4630      	mov	r0, r6
 800be38:	f3af 8000 	nop.w
 800be3c:	4607      	mov	r7, r0
 800be3e:	1c78      	adds	r0, r7, #1
 800be40:	d1d6      	bne.n	800bdf0 <_vfiprintf_r+0x1bc>
 800be42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be44:	07d9      	lsls	r1, r3, #31
 800be46:	d405      	bmi.n	800be54 <_vfiprintf_r+0x220>
 800be48:	89ab      	ldrh	r3, [r5, #12]
 800be4a:	059a      	lsls	r2, r3, #22
 800be4c:	d402      	bmi.n	800be54 <_vfiprintf_r+0x220>
 800be4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be50:	f7ff fdb7 	bl	800b9c2 <__retarget_lock_release_recursive>
 800be54:	89ab      	ldrh	r3, [r5, #12]
 800be56:	065b      	lsls	r3, r3, #25
 800be58:	f53f af12 	bmi.w	800bc80 <_vfiprintf_r+0x4c>
 800be5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be5e:	e711      	b.n	800bc84 <_vfiprintf_r+0x50>
 800be60:	ab03      	add	r3, sp, #12
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	462a      	mov	r2, r5
 800be66:	4b09      	ldr	r3, [pc, #36]	; (800be8c <_vfiprintf_r+0x258>)
 800be68:	a904      	add	r1, sp, #16
 800be6a:	4630      	mov	r0, r6
 800be6c:	f000 f880 	bl	800bf70 <_printf_i>
 800be70:	e7e4      	b.n	800be3c <_vfiprintf_r+0x208>
 800be72:	bf00      	nop
 800be74:	0800cb6c 	.word	0x0800cb6c
 800be78:	0800cb8c 	.word	0x0800cb8c
 800be7c:	0800cb4c 	.word	0x0800cb4c
 800be80:	0800cbac 	.word	0x0800cbac
 800be84:	0800cbb6 	.word	0x0800cbb6
 800be88:	00000000 	.word	0x00000000
 800be8c:	0800bc0f 	.word	0x0800bc0f
 800be90:	0800cbb2 	.word	0x0800cbb2

0800be94 <_printf_common>:
 800be94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be98:	4616      	mov	r6, r2
 800be9a:	4699      	mov	r9, r3
 800be9c:	688a      	ldr	r2, [r1, #8]
 800be9e:	690b      	ldr	r3, [r1, #16]
 800bea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bea4:	4293      	cmp	r3, r2
 800bea6:	bfb8      	it	lt
 800bea8:	4613      	movlt	r3, r2
 800beaa:	6033      	str	r3, [r6, #0]
 800beac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800beb0:	4607      	mov	r7, r0
 800beb2:	460c      	mov	r4, r1
 800beb4:	b10a      	cbz	r2, 800beba <_printf_common+0x26>
 800beb6:	3301      	adds	r3, #1
 800beb8:	6033      	str	r3, [r6, #0]
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	0699      	lsls	r1, r3, #26
 800bebe:	bf42      	ittt	mi
 800bec0:	6833      	ldrmi	r3, [r6, #0]
 800bec2:	3302      	addmi	r3, #2
 800bec4:	6033      	strmi	r3, [r6, #0]
 800bec6:	6825      	ldr	r5, [r4, #0]
 800bec8:	f015 0506 	ands.w	r5, r5, #6
 800becc:	d106      	bne.n	800bedc <_printf_common+0x48>
 800bece:	f104 0a19 	add.w	sl, r4, #25
 800bed2:	68e3      	ldr	r3, [r4, #12]
 800bed4:	6832      	ldr	r2, [r6, #0]
 800bed6:	1a9b      	subs	r3, r3, r2
 800bed8:	42ab      	cmp	r3, r5
 800beda:	dc26      	bgt.n	800bf2a <_printf_common+0x96>
 800bedc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bee0:	1e13      	subs	r3, r2, #0
 800bee2:	6822      	ldr	r2, [r4, #0]
 800bee4:	bf18      	it	ne
 800bee6:	2301      	movne	r3, #1
 800bee8:	0692      	lsls	r2, r2, #26
 800beea:	d42b      	bmi.n	800bf44 <_printf_common+0xb0>
 800beec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bef0:	4649      	mov	r1, r9
 800bef2:	4638      	mov	r0, r7
 800bef4:	47c0      	blx	r8
 800bef6:	3001      	adds	r0, #1
 800bef8:	d01e      	beq.n	800bf38 <_printf_common+0xa4>
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	68e5      	ldr	r5, [r4, #12]
 800befe:	6832      	ldr	r2, [r6, #0]
 800bf00:	f003 0306 	and.w	r3, r3, #6
 800bf04:	2b04      	cmp	r3, #4
 800bf06:	bf08      	it	eq
 800bf08:	1aad      	subeq	r5, r5, r2
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	6922      	ldr	r2, [r4, #16]
 800bf0e:	bf0c      	ite	eq
 800bf10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf14:	2500      	movne	r5, #0
 800bf16:	4293      	cmp	r3, r2
 800bf18:	bfc4      	itt	gt
 800bf1a:	1a9b      	subgt	r3, r3, r2
 800bf1c:	18ed      	addgt	r5, r5, r3
 800bf1e:	2600      	movs	r6, #0
 800bf20:	341a      	adds	r4, #26
 800bf22:	42b5      	cmp	r5, r6
 800bf24:	d11a      	bne.n	800bf5c <_printf_common+0xc8>
 800bf26:	2000      	movs	r0, #0
 800bf28:	e008      	b.n	800bf3c <_printf_common+0xa8>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	4652      	mov	r2, sl
 800bf2e:	4649      	mov	r1, r9
 800bf30:	4638      	mov	r0, r7
 800bf32:	47c0      	blx	r8
 800bf34:	3001      	adds	r0, #1
 800bf36:	d103      	bne.n	800bf40 <_printf_common+0xac>
 800bf38:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf40:	3501      	adds	r5, #1
 800bf42:	e7c6      	b.n	800bed2 <_printf_common+0x3e>
 800bf44:	18e1      	adds	r1, r4, r3
 800bf46:	1c5a      	adds	r2, r3, #1
 800bf48:	2030      	movs	r0, #48	; 0x30
 800bf4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf4e:	4422      	add	r2, r4
 800bf50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf58:	3302      	adds	r3, #2
 800bf5a:	e7c7      	b.n	800beec <_printf_common+0x58>
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	4622      	mov	r2, r4
 800bf60:	4649      	mov	r1, r9
 800bf62:	4638      	mov	r0, r7
 800bf64:	47c0      	blx	r8
 800bf66:	3001      	adds	r0, #1
 800bf68:	d0e6      	beq.n	800bf38 <_printf_common+0xa4>
 800bf6a:	3601      	adds	r6, #1
 800bf6c:	e7d9      	b.n	800bf22 <_printf_common+0x8e>
	...

0800bf70 <_printf_i>:
 800bf70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf74:	460c      	mov	r4, r1
 800bf76:	4691      	mov	r9, r2
 800bf78:	7e27      	ldrb	r7, [r4, #24]
 800bf7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf7c:	2f78      	cmp	r7, #120	; 0x78
 800bf7e:	4680      	mov	r8, r0
 800bf80:	469a      	mov	sl, r3
 800bf82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf86:	d807      	bhi.n	800bf98 <_printf_i+0x28>
 800bf88:	2f62      	cmp	r7, #98	; 0x62
 800bf8a:	d80a      	bhi.n	800bfa2 <_printf_i+0x32>
 800bf8c:	2f00      	cmp	r7, #0
 800bf8e:	f000 80d8 	beq.w	800c142 <_printf_i+0x1d2>
 800bf92:	2f58      	cmp	r7, #88	; 0x58
 800bf94:	f000 80a3 	beq.w	800c0de <_printf_i+0x16e>
 800bf98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfa0:	e03a      	b.n	800c018 <_printf_i+0xa8>
 800bfa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfa6:	2b15      	cmp	r3, #21
 800bfa8:	d8f6      	bhi.n	800bf98 <_printf_i+0x28>
 800bfaa:	a001      	add	r0, pc, #4	; (adr r0, 800bfb0 <_printf_i+0x40>)
 800bfac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bfb0:	0800c009 	.word	0x0800c009
 800bfb4:	0800c01d 	.word	0x0800c01d
 800bfb8:	0800bf99 	.word	0x0800bf99
 800bfbc:	0800bf99 	.word	0x0800bf99
 800bfc0:	0800bf99 	.word	0x0800bf99
 800bfc4:	0800bf99 	.word	0x0800bf99
 800bfc8:	0800c01d 	.word	0x0800c01d
 800bfcc:	0800bf99 	.word	0x0800bf99
 800bfd0:	0800bf99 	.word	0x0800bf99
 800bfd4:	0800bf99 	.word	0x0800bf99
 800bfd8:	0800bf99 	.word	0x0800bf99
 800bfdc:	0800c129 	.word	0x0800c129
 800bfe0:	0800c04d 	.word	0x0800c04d
 800bfe4:	0800c10b 	.word	0x0800c10b
 800bfe8:	0800bf99 	.word	0x0800bf99
 800bfec:	0800bf99 	.word	0x0800bf99
 800bff0:	0800c14b 	.word	0x0800c14b
 800bff4:	0800bf99 	.word	0x0800bf99
 800bff8:	0800c04d 	.word	0x0800c04d
 800bffc:	0800bf99 	.word	0x0800bf99
 800c000:	0800bf99 	.word	0x0800bf99
 800c004:	0800c113 	.word	0x0800c113
 800c008:	680b      	ldr	r3, [r1, #0]
 800c00a:	1d1a      	adds	r2, r3, #4
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	600a      	str	r2, [r1, #0]
 800c010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c018:	2301      	movs	r3, #1
 800c01a:	e0a3      	b.n	800c164 <_printf_i+0x1f4>
 800c01c:	6825      	ldr	r5, [r4, #0]
 800c01e:	6808      	ldr	r0, [r1, #0]
 800c020:	062e      	lsls	r6, r5, #24
 800c022:	f100 0304 	add.w	r3, r0, #4
 800c026:	d50a      	bpl.n	800c03e <_printf_i+0xce>
 800c028:	6805      	ldr	r5, [r0, #0]
 800c02a:	600b      	str	r3, [r1, #0]
 800c02c:	2d00      	cmp	r5, #0
 800c02e:	da03      	bge.n	800c038 <_printf_i+0xc8>
 800c030:	232d      	movs	r3, #45	; 0x2d
 800c032:	426d      	negs	r5, r5
 800c034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c038:	485e      	ldr	r0, [pc, #376]	; (800c1b4 <_printf_i+0x244>)
 800c03a:	230a      	movs	r3, #10
 800c03c:	e019      	b.n	800c072 <_printf_i+0x102>
 800c03e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c042:	6805      	ldr	r5, [r0, #0]
 800c044:	600b      	str	r3, [r1, #0]
 800c046:	bf18      	it	ne
 800c048:	b22d      	sxthne	r5, r5
 800c04a:	e7ef      	b.n	800c02c <_printf_i+0xbc>
 800c04c:	680b      	ldr	r3, [r1, #0]
 800c04e:	6825      	ldr	r5, [r4, #0]
 800c050:	1d18      	adds	r0, r3, #4
 800c052:	6008      	str	r0, [r1, #0]
 800c054:	0628      	lsls	r0, r5, #24
 800c056:	d501      	bpl.n	800c05c <_printf_i+0xec>
 800c058:	681d      	ldr	r5, [r3, #0]
 800c05a:	e002      	b.n	800c062 <_printf_i+0xf2>
 800c05c:	0669      	lsls	r1, r5, #25
 800c05e:	d5fb      	bpl.n	800c058 <_printf_i+0xe8>
 800c060:	881d      	ldrh	r5, [r3, #0]
 800c062:	4854      	ldr	r0, [pc, #336]	; (800c1b4 <_printf_i+0x244>)
 800c064:	2f6f      	cmp	r7, #111	; 0x6f
 800c066:	bf0c      	ite	eq
 800c068:	2308      	moveq	r3, #8
 800c06a:	230a      	movne	r3, #10
 800c06c:	2100      	movs	r1, #0
 800c06e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c072:	6866      	ldr	r6, [r4, #4]
 800c074:	60a6      	str	r6, [r4, #8]
 800c076:	2e00      	cmp	r6, #0
 800c078:	bfa2      	ittt	ge
 800c07a:	6821      	ldrge	r1, [r4, #0]
 800c07c:	f021 0104 	bicge.w	r1, r1, #4
 800c080:	6021      	strge	r1, [r4, #0]
 800c082:	b90d      	cbnz	r5, 800c088 <_printf_i+0x118>
 800c084:	2e00      	cmp	r6, #0
 800c086:	d04d      	beq.n	800c124 <_printf_i+0x1b4>
 800c088:	4616      	mov	r6, r2
 800c08a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c08e:	fb03 5711 	mls	r7, r3, r1, r5
 800c092:	5dc7      	ldrb	r7, [r0, r7]
 800c094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c098:	462f      	mov	r7, r5
 800c09a:	42bb      	cmp	r3, r7
 800c09c:	460d      	mov	r5, r1
 800c09e:	d9f4      	bls.n	800c08a <_printf_i+0x11a>
 800c0a0:	2b08      	cmp	r3, #8
 800c0a2:	d10b      	bne.n	800c0bc <_printf_i+0x14c>
 800c0a4:	6823      	ldr	r3, [r4, #0]
 800c0a6:	07df      	lsls	r7, r3, #31
 800c0a8:	d508      	bpl.n	800c0bc <_printf_i+0x14c>
 800c0aa:	6923      	ldr	r3, [r4, #16]
 800c0ac:	6861      	ldr	r1, [r4, #4]
 800c0ae:	4299      	cmp	r1, r3
 800c0b0:	bfde      	ittt	le
 800c0b2:	2330      	movle	r3, #48	; 0x30
 800c0b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0bc:	1b92      	subs	r2, r2, r6
 800c0be:	6122      	str	r2, [r4, #16]
 800c0c0:	f8cd a000 	str.w	sl, [sp]
 800c0c4:	464b      	mov	r3, r9
 800c0c6:	aa03      	add	r2, sp, #12
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	f7ff fee2 	bl	800be94 <_printf_common>
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	d14c      	bne.n	800c16e <_printf_i+0x1fe>
 800c0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d8:	b004      	add	sp, #16
 800c0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0de:	4835      	ldr	r0, [pc, #212]	; (800c1b4 <_printf_i+0x244>)
 800c0e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c0e4:	6823      	ldr	r3, [r4, #0]
 800c0e6:	680e      	ldr	r6, [r1, #0]
 800c0e8:	061f      	lsls	r7, r3, #24
 800c0ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800c0ee:	600e      	str	r6, [r1, #0]
 800c0f0:	d514      	bpl.n	800c11c <_printf_i+0x1ac>
 800c0f2:	07d9      	lsls	r1, r3, #31
 800c0f4:	bf44      	itt	mi
 800c0f6:	f043 0320 	orrmi.w	r3, r3, #32
 800c0fa:	6023      	strmi	r3, [r4, #0]
 800c0fc:	b91d      	cbnz	r5, 800c106 <_printf_i+0x196>
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	f023 0320 	bic.w	r3, r3, #32
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	2310      	movs	r3, #16
 800c108:	e7b0      	b.n	800c06c <_printf_i+0xfc>
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	f043 0320 	orr.w	r3, r3, #32
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	2378      	movs	r3, #120	; 0x78
 800c114:	4828      	ldr	r0, [pc, #160]	; (800c1b8 <_printf_i+0x248>)
 800c116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c11a:	e7e3      	b.n	800c0e4 <_printf_i+0x174>
 800c11c:	065e      	lsls	r6, r3, #25
 800c11e:	bf48      	it	mi
 800c120:	b2ad      	uxthmi	r5, r5
 800c122:	e7e6      	b.n	800c0f2 <_printf_i+0x182>
 800c124:	4616      	mov	r6, r2
 800c126:	e7bb      	b.n	800c0a0 <_printf_i+0x130>
 800c128:	680b      	ldr	r3, [r1, #0]
 800c12a:	6826      	ldr	r6, [r4, #0]
 800c12c:	6960      	ldr	r0, [r4, #20]
 800c12e:	1d1d      	adds	r5, r3, #4
 800c130:	600d      	str	r5, [r1, #0]
 800c132:	0635      	lsls	r5, r6, #24
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	d501      	bpl.n	800c13c <_printf_i+0x1cc>
 800c138:	6018      	str	r0, [r3, #0]
 800c13a:	e002      	b.n	800c142 <_printf_i+0x1d2>
 800c13c:	0671      	lsls	r1, r6, #25
 800c13e:	d5fb      	bpl.n	800c138 <_printf_i+0x1c8>
 800c140:	8018      	strh	r0, [r3, #0]
 800c142:	2300      	movs	r3, #0
 800c144:	6123      	str	r3, [r4, #16]
 800c146:	4616      	mov	r6, r2
 800c148:	e7ba      	b.n	800c0c0 <_printf_i+0x150>
 800c14a:	680b      	ldr	r3, [r1, #0]
 800c14c:	1d1a      	adds	r2, r3, #4
 800c14e:	600a      	str	r2, [r1, #0]
 800c150:	681e      	ldr	r6, [r3, #0]
 800c152:	6862      	ldr	r2, [r4, #4]
 800c154:	2100      	movs	r1, #0
 800c156:	4630      	mov	r0, r6
 800c158:	f7f4 f842 	bl	80001e0 <memchr>
 800c15c:	b108      	cbz	r0, 800c162 <_printf_i+0x1f2>
 800c15e:	1b80      	subs	r0, r0, r6
 800c160:	6060      	str	r0, [r4, #4]
 800c162:	6863      	ldr	r3, [r4, #4]
 800c164:	6123      	str	r3, [r4, #16]
 800c166:	2300      	movs	r3, #0
 800c168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c16c:	e7a8      	b.n	800c0c0 <_printf_i+0x150>
 800c16e:	6923      	ldr	r3, [r4, #16]
 800c170:	4632      	mov	r2, r6
 800c172:	4649      	mov	r1, r9
 800c174:	4640      	mov	r0, r8
 800c176:	47d0      	blx	sl
 800c178:	3001      	adds	r0, #1
 800c17a:	d0ab      	beq.n	800c0d4 <_printf_i+0x164>
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	079b      	lsls	r3, r3, #30
 800c180:	d413      	bmi.n	800c1aa <_printf_i+0x23a>
 800c182:	68e0      	ldr	r0, [r4, #12]
 800c184:	9b03      	ldr	r3, [sp, #12]
 800c186:	4298      	cmp	r0, r3
 800c188:	bfb8      	it	lt
 800c18a:	4618      	movlt	r0, r3
 800c18c:	e7a4      	b.n	800c0d8 <_printf_i+0x168>
 800c18e:	2301      	movs	r3, #1
 800c190:	4632      	mov	r2, r6
 800c192:	4649      	mov	r1, r9
 800c194:	4640      	mov	r0, r8
 800c196:	47d0      	blx	sl
 800c198:	3001      	adds	r0, #1
 800c19a:	d09b      	beq.n	800c0d4 <_printf_i+0x164>
 800c19c:	3501      	adds	r5, #1
 800c19e:	68e3      	ldr	r3, [r4, #12]
 800c1a0:	9903      	ldr	r1, [sp, #12]
 800c1a2:	1a5b      	subs	r3, r3, r1
 800c1a4:	42ab      	cmp	r3, r5
 800c1a6:	dcf2      	bgt.n	800c18e <_printf_i+0x21e>
 800c1a8:	e7eb      	b.n	800c182 <_printf_i+0x212>
 800c1aa:	2500      	movs	r5, #0
 800c1ac:	f104 0619 	add.w	r6, r4, #25
 800c1b0:	e7f5      	b.n	800c19e <_printf_i+0x22e>
 800c1b2:	bf00      	nop
 800c1b4:	0800cbbd 	.word	0x0800cbbd
 800c1b8:	0800cbce 	.word	0x0800cbce

0800c1bc <_sbrk_r>:
 800c1bc:	b538      	push	{r3, r4, r5, lr}
 800c1be:	4d06      	ldr	r5, [pc, #24]	; (800c1d8 <_sbrk_r+0x1c>)
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	602b      	str	r3, [r5, #0]
 800c1c8:	f7f6 fd50 	bl	8002c6c <_sbrk>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d102      	bne.n	800c1d6 <_sbrk_r+0x1a>
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	b103      	cbz	r3, 800c1d6 <_sbrk_r+0x1a>
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	bd38      	pop	{r3, r4, r5, pc}
 800c1d8:	20009d0c 	.word	0x20009d0c

0800c1dc <__sread>:
 800c1dc:	b510      	push	{r4, lr}
 800c1de:	460c      	mov	r4, r1
 800c1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e4:	f000 f8a0 	bl	800c328 <_read_r>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	bfab      	itete	ge
 800c1ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c1f0:	181b      	addge	r3, r3, r0
 800c1f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1f6:	bfac      	ite	ge
 800c1f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1fa:	81a3      	strhlt	r3, [r4, #12]
 800c1fc:	bd10      	pop	{r4, pc}

0800c1fe <__swrite>:
 800c1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c202:	461f      	mov	r7, r3
 800c204:	898b      	ldrh	r3, [r1, #12]
 800c206:	05db      	lsls	r3, r3, #23
 800c208:	4605      	mov	r5, r0
 800c20a:	460c      	mov	r4, r1
 800c20c:	4616      	mov	r6, r2
 800c20e:	d505      	bpl.n	800c21c <__swrite+0x1e>
 800c210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c214:	2302      	movs	r3, #2
 800c216:	2200      	movs	r2, #0
 800c218:	f000 f868 	bl	800c2ec <_lseek_r>
 800c21c:	89a3      	ldrh	r3, [r4, #12]
 800c21e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c226:	81a3      	strh	r3, [r4, #12]
 800c228:	4632      	mov	r2, r6
 800c22a:	463b      	mov	r3, r7
 800c22c:	4628      	mov	r0, r5
 800c22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c232:	f000 b817 	b.w	800c264 <_write_r>

0800c236 <__sseek>:
 800c236:	b510      	push	{r4, lr}
 800c238:	460c      	mov	r4, r1
 800c23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c23e:	f000 f855 	bl	800c2ec <_lseek_r>
 800c242:	1c43      	adds	r3, r0, #1
 800c244:	89a3      	ldrh	r3, [r4, #12]
 800c246:	bf15      	itete	ne
 800c248:	6560      	strne	r0, [r4, #84]	; 0x54
 800c24a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c24e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c252:	81a3      	strheq	r3, [r4, #12]
 800c254:	bf18      	it	ne
 800c256:	81a3      	strhne	r3, [r4, #12]
 800c258:	bd10      	pop	{r4, pc}

0800c25a <__sclose>:
 800c25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c25e:	f000 b813 	b.w	800c288 <_close_r>
	...

0800c264 <_write_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	; (800c284 <_write_r+0x20>)
 800c268:	4604      	mov	r4, r0
 800c26a:	4608      	mov	r0, r1
 800c26c:	4611      	mov	r1, r2
 800c26e:	2200      	movs	r2, #0
 800c270:	602a      	str	r2, [r5, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	f7f6 fa9c 	bl	80027b0 <_write>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_write_r+0x1e>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_write_r+0x1e>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	20009d0c 	.word	0x20009d0c

0800c288 <_close_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d06      	ldr	r5, [pc, #24]	; (800c2a4 <_close_r+0x1c>)
 800c28c:	2300      	movs	r3, #0
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	602b      	str	r3, [r5, #0]
 800c294:	f7f6 fcdc 	bl	8002c50 <_close>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_close_r+0x1a>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_close_r+0x1a>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	20009d0c 	.word	0x20009d0c

0800c2a8 <_fstat_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	; (800c2c8 <_fstat_r+0x20>)
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	602b      	str	r3, [r5, #0]
 800c2b6:	f7f6 fccf 	bl	8002c58 <_fstat>
 800c2ba:	1c43      	adds	r3, r0, #1
 800c2bc:	d102      	bne.n	800c2c4 <_fstat_r+0x1c>
 800c2be:	682b      	ldr	r3, [r5, #0]
 800c2c0:	b103      	cbz	r3, 800c2c4 <_fstat_r+0x1c>
 800c2c2:	6023      	str	r3, [r4, #0]
 800c2c4:	bd38      	pop	{r3, r4, r5, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20009d0c 	.word	0x20009d0c

0800c2cc <_isatty_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d06      	ldr	r5, [pc, #24]	; (800c2e8 <_isatty_r+0x1c>)
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	602b      	str	r3, [r5, #0]
 800c2d8:	f7f6 fcc4 	bl	8002c64 <_isatty>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_isatty_r+0x1a>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_isatty_r+0x1a>
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	20009d0c 	.word	0x20009d0c

0800c2ec <_lseek_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4d07      	ldr	r5, [pc, #28]	; (800c30c <_lseek_r+0x20>)
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	602a      	str	r2, [r5, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f7f6 fcb4 	bl	8002c68 <_lseek>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_lseek_r+0x1e>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_lseek_r+0x1e>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	20009d0c 	.word	0x20009d0c

0800c310 <__malloc_lock>:
 800c310:	4801      	ldr	r0, [pc, #4]	; (800c318 <__malloc_lock+0x8>)
 800c312:	f7ff bb55 	b.w	800b9c0 <__retarget_lock_acquire_recursive>
 800c316:	bf00      	nop
 800c318:	20009d04 	.word	0x20009d04

0800c31c <__malloc_unlock>:
 800c31c:	4801      	ldr	r0, [pc, #4]	; (800c324 <__malloc_unlock+0x8>)
 800c31e:	f7ff bb50 	b.w	800b9c2 <__retarget_lock_release_recursive>
 800c322:	bf00      	nop
 800c324:	20009d04 	.word	0x20009d04

0800c328 <_read_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4d07      	ldr	r5, [pc, #28]	; (800c348 <_read_r+0x20>)
 800c32c:	4604      	mov	r4, r0
 800c32e:	4608      	mov	r0, r1
 800c330:	4611      	mov	r1, r2
 800c332:	2200      	movs	r2, #0
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	f7f6 fc7c 	bl	8002c34 <_read>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_read_r+0x1e>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	b103      	cbz	r3, 800c346 <_read_r+0x1e>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	20009d0c 	.word	0x20009d0c

0800c34c <_init>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	bf00      	nop
 800c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c352:	bc08      	pop	{r3}
 800c354:	469e      	mov	lr, r3
 800c356:	4770      	bx	lr

0800c358 <_fini>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	bf00      	nop
 800c35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c35e:	bc08      	pop	{r3}
 800c360:	469e      	mov	lr, r3
 800c362:	4770      	bx	lr
