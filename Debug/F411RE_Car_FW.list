
F411RE_Car_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009474  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  08009614  08009614  00019614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de4  08009de4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009de4  08009de4  00019de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dec  08009dec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dec  08009dec  00019dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009df0  08009df0  00019df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b4c  20000070  08009e64  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20009bbc  08009e64  00029bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005aaf5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086c2  00000000  00000000  0007ab95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0003214c  00000000  00000000  00083257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002050  00000000  00000000  000b53a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005970  00000000  00000000  000b73f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211dd  00000000  00000000  000bcd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043cd5  00000000  00000000  000ddf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4015  00000000  00000000  00121c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d5c2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c00  00000000  00000000  001d5c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095fc 	.word	0x080095fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080095fc 	.word	0x080095fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <HCI_TL_SPI_Init+0x70>)

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800057e:	481b      	ldr	r0, [pc, #108]	; (80005ec <HCI_TL_SPI_Init+0x74>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	2100      	movs	r1, #0
 8000582:	9101      	str	r1, [sp, #4]
 8000584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000586:	f042 0201 	orr.w	r2, r2, #1
 800058a:	631a      	str	r2, [r3, #48]	; 0x30
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	9104      	str	r1, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HCI_TL_SPI_Init+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800059a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800059c:	2201      	movs	r2, #1
 800059e:	e9cd 2302 	strd	r2, r3, [sp, #8]

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005a2:	2400      	movs	r4, #0
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005a4:	f002 f8c0 	bl	8002728 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005a8:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005aa:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005b0:	2301      	movs	r3, #1
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005b2:	480e      	ldr	r0, [pc, #56]	; (80005ec <HCI_TL_SPI_Init+0x74>)
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80005b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005bc:	f002 f8b4 	bl	8002728 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005c0:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005c2:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005c4:	2202      	movs	r2, #2
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005c6:	4809      	ldr	r0, [pc, #36]	; (80005ec <HCI_TL_SPI_Init+0x74>)
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80005cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005d0:	f002 f8aa 	bl	8002728 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2102      	movs	r1, #2
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <HCI_TL_SPI_Init+0x74>)
 80005da:	f002 fabd 	bl	8002b58 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 80005de:	f000 fe3d 	bl	800125c <BSP_SPI1_Init>
}
 80005e2:	b009      	add	sp, #36	; 0x24
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000
 80005f0:	10110000 	.word	0x10110000

080005f4 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80005f4:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <HCI_TL_SPI_DeInit+0x20>)
 80005f8:	2101      	movs	r1, #1
 80005fa:	f002 f9e5 	bl	80029c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <HCI_TL_SPI_DeInit+0x20>)
 8000600:	2102      	movs	r1, #2
 8000602:	f002 f9e1 	bl	80029c8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <HCI_TL_SPI_DeInit+0x20>)
 8000608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060c:	f002 f9dc 	bl	80029c8 <HAL_GPIO_DeInit>
  return 0;
}
 8000610:	2000      	movs	r0, #0
 8000612:	bd08      	pop	{r3, pc}
 8000614:	40020000 	.word	0x40020000

08000618 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000618:	b510      	push	{r4, lr}
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800061a:	4c0d      	ldr	r4, [pc, #52]	; (8000650 <HCI_TL_SPI_Reset+0x38>)
 800061c:	2201      	movs	r2, #1
 800061e:	4620      	mov	r0, r4
 8000620:	2102      	movs	r1, #2
 8000622:	f002 fa99 	bl	8002b58 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000626:	4620      	mov	r0, r4
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062e:	f002 fa93 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000632:	2005      	movs	r0, #5
 8000634:	f001 fae2 	bl	8001bfc <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000638:	4620      	mov	r0, r4
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000640:	f002 fa8a 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000644:	2005      	movs	r0, #5
 8000646:	f001 fad9 	bl	8001bfc <HAL_Delay>
  return 0;
}
 800064a:	2000      	movs	r0, #0
 800064c:	bd10      	pop	{r4, pc}
 800064e:	bf00      	nop
 8000650:	40020000 	.word	0x40020000

08000654 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_00 = 0x00;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <HCI_TL_SPI_Receive+0x80>)
{
 8000658:	4606      	mov	r6, r0
 800065a:	460f      	mov	r7, r1
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800065c:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8000660:	b087      	sub	sp, #28
  uint8_t char_00 = 0x00;
 8000662:	2400      	movs	r4, #0
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000664:	9002      	str	r0, [sp, #8]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000666:	2006      	movs	r0, #6
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000668:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t char_00 = 0x00;
 800066c:	f88d 4006 	strb.w	r4, [sp, #6]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000670:	f001 fd98 	bl	80021a4 <HAL_NVIC_DisableIRQ>
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000674:	4818      	ldr	r0, [pc, #96]	; (80006d8 <HCI_TL_SPI_Receive+0x84>)
 8000676:	4622      	mov	r2, r4
 8000678:	2102      	movs	r1, #2
 800067a:	f002 fa6d 	bl	8002b58 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800067e:	2205      	movs	r2, #5
 8000680:	a904      	add	r1, sp, #16
 8000682:	a802      	add	r0, sp, #8
 8000684:	f000 fdb4 	bl	80011f0 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8000688:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800068c:	f89d 3013 	ldrb.w	r3, [sp, #19]

  if(byte_count > 0)
 8000690:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 8000694:	d013      	beq.n	80006be <HCI_TL_SPI_Receive+0x6a>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8000696:	42bd      	cmp	r5, r7
 8000698:	bf28      	it	cs
 800069a:	463d      	movcs	r5, r7
    {
      byte_count = size;
    }

    for(len = 0; len < byte_count; len++)
 800069c:	b17d      	cbz	r5, 80006be <HCI_TL_SPI_Receive+0x6a>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 800069e:	2201      	movs	r2, #1
 80006a0:	f10d 0107 	add.w	r1, sp, #7
 80006a4:	f10d 0006 	add.w	r0, sp, #6
 80006a8:	f000 fda2 	bl	80011f0 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80006ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80006b0:	5532      	strb	r2, [r6, r4]
    for(len = 0; len < byte_count; len++)
 80006b2:	1c63      	adds	r3, r4, #1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4295      	cmp	r5, r2
 80006b8:	4614      	mov	r4, r2
 80006ba:	d8f0      	bhi.n	800069e <HCI_TL_SPI_Receive+0x4a>
 80006bc:	4615      	mov	r5, r2
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2102      	movs	r1, #2
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <HCI_TL_SPI_Receive+0x84>)
 80006c4:	f002 fa48 	bl	8002b58 <HAL_GPIO_WritePin>
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80006c8:	2006      	movs	r0, #6
 80006ca:	f001 fd57 	bl	800217c <HAL_NVIC_EnableIRQ>

  HCI_TL_SPI_Enable_IRQ();

  return len;
}
 80006ce:	4628      	mov	r0, r5
 80006d0:	b007      	add	sp, #28
 80006d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d4:	08009614 	.word	0x08009614
 80006d8:	40020000 	.word	0x40020000

080006dc <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80006dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006e0:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <HCI_TL_SPI_Send+0xc4>)
    uint32_t tickstart_data_available = HAL_GetTick();

    result = 0;

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006e2:	4e30      	ldr	r6, [pc, #192]	; (80007a4 <HCI_TL_SPI_Send+0xc8>)
{
 80006e4:	4681      	mov	r9, r0
 80006e6:	460f      	mov	r7, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006e8:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 80006ec:	b085      	sub	sp, #20
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80006ee:	9000      	str	r0, [sp, #0]
 80006f0:	f88d 1004 	strb.w	r1, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f001 fa7c 	bl	8001bf0 <HAL_GetTick>
 80006f8:	4680      	mov	r8, r0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80006fa:	2006      	movs	r0, #6
 80006fc:	f001 fd52 	bl	80021a4 <HAL_NVIC_DisableIRQ>
    uint32_t tickstart_data_available = HAL_GetTick();
 8000700:	f001 fa76 	bl	8001bf0 <HAL_GetTick>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
    uint32_t tickstart_data_available = HAL_GetTick();
 8000706:	4605      	mov	r5, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000708:	2102      	movs	r1, #2
 800070a:	4630      	mov	r0, r6
 800070c:	f002 fa24 	bl	8002b58 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000710:	e004      	b.n	800071c <HCI_TL_SPI_Send+0x40>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000712:	f001 fa6d 	bl	8001bf0 <HAL_GetTick>
 8000716:	1b40      	subs	r0, r0, r5
 8000718:	280f      	cmp	r0, #15
 800071a:	d83a      	bhi.n	8000792 <HCI_TL_SPI_Send+0xb6>
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800071c:	4821      	ldr	r0, [pc, #132]	; (80007a4 <HCI_TL_SPI_Send+0xc8>)
 800071e:	2101      	movs	r1, #1
 8000720:	f002 fa08 	bl	8002b34 <HAL_GPIO_ReadPin>
    while(!IsDataAvailable())
 8000724:	2801      	cmp	r0, #1
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000726:	4604      	mov	r4, r0
    while(!IsDataAvailable())
 8000728:	d1f3      	bne.n	8000712 <HCI_TL_SPI_Send+0x36>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800072a:	2205      	movs	r2, #5
 800072c:	a902      	add	r1, sp, #8
 800072e:	4668      	mov	r0, sp
 8000730:	f000 fd5e 	bl	80011f0 <BSP_SPI1_SendRecv>
    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000734:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8000738:	f89d 3009 	ldrb.w	r3, [sp, #9]
    if(rx_bytes >= size)
 800073c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000740:	42bb      	cmp	r3, r7
 8000742:	d213      	bcs.n	800076c <HCI_TL_SPI_Send+0x90>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000744:	4622      	mov	r2, r4
 8000746:	2102      	movs	r1, #2
 8000748:	4630      	mov	r0, r6
 800074a:	f002 fa05 	bl	8002b58 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800074e:	f001 fa4f 	bl	8001bf0 <HAL_GetTick>
 8000752:	eba0 0008 	sub.w	r0, r0, r8
 8000756:	280f      	cmp	r0, #15
 8000758:	d9d2      	bls.n	8000700 <HCI_TL_SPI_Send+0x24>
      break;
 800075a:	f06f 0402 	mvn.w	r4, #2
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800075e:	2006      	movs	r0, #6
 8000760:	f001 fd0c 	bl	800217c <HAL_NVIC_EnableIRQ>
}
 8000764:	4620      	mov	r0, r4
 8000766:	b005      	add	sp, #20
 8000768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800076c:	490e      	ldr	r1, [pc, #56]	; (80007a8 <HCI_TL_SPI_Send+0xcc>)
 800076e:	463a      	mov	r2, r7
 8000770:	4648      	mov	r0, r9
 8000772:	f000 fd3d 	bl	80011f0 <BSP_SPI1_SendRecv>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000776:	4622      	mov	r2, r4
 8000778:	480a      	ldr	r0, [pc, #40]	; (80007a4 <HCI_TL_SPI_Send+0xc8>)
 800077a:	2102      	movs	r1, #2
 800077c:	f002 f9ec 	bl	8002b58 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000780:	f001 fa36 	bl	8001bf0 <HAL_GetTick>
 8000784:	eba0 0008 	sub.w	r0, r0, r8
 8000788:	280f      	cmp	r0, #15
 800078a:	bf98      	it	ls
 800078c:	2400      	movls	r4, #0
 800078e:	d9e6      	bls.n	800075e <HCI_TL_SPI_Send+0x82>
 8000790:	e7e3      	b.n	800075a <HCI_TL_SPI_Send+0x7e>
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000792:	4804      	ldr	r0, [pc, #16]	; (80007a4 <HCI_TL_SPI_Send+0xc8>)
 8000794:	2201      	movs	r2, #1
 8000796:	2102      	movs	r1, #2
 8000798:	f002 f9de 	bl	8002b58 <HAL_GPIO_WritePin>
 800079c:	e7dd      	b.n	800075a <HCI_TL_SPI_Send+0x7e>
 800079e:	bf00      	nop
 80007a0:	0800961c 	.word	0x0800961c
 80007a4:	40020000 	.word	0x40020000
 80007a8:	2000008c 	.word	0x2000008c

080007ac <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80007ac:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007ae:	4c07      	ldr	r4, [pc, #28]	; (80007cc <hci_tl_lowlevel_isr+0x20>)
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80007b0:	e002      	b.n	80007b8 <hci_tl_lowlevel_isr+0xc>
  {
    if (hci_notify_asynch_evt(NULL))
 80007b2:	f005 fcb7 	bl	8006124 <hci_notify_asynch_evt>
 80007b6:	b940      	cbnz	r0, 80007ca <hci_tl_lowlevel_isr+0x1e>
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007b8:	2101      	movs	r1, #1
 80007ba:	4620      	mov	r0, r4
 80007bc:	f002 f9ba 	bl	8002b34 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
  while(IsDataAvailable())
 80007c2:	2b01      	cmp	r3, #1
    if (hci_notify_asynch_evt(NULL))
 80007c4:	f04f 0000 	mov.w	r0, #0
  while(IsDataAvailable())
 80007c8:	d0f3      	beq.n	80007b2 <hci_tl_lowlevel_isr+0x6>
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80007ca:	bd10      	pop	{r4, pc}
 80007cc:	40020000 	.word	0x40020000

080007d0 <hci_tl_lowlevel_init>:
{
 80007d0:	b530      	push	{r4, r5, lr}
 80007d2:	b089      	sub	sp, #36	; 0x24
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80007d4:	4c11      	ldr	r4, [pc, #68]	; (800081c <hci_tl_lowlevel_init+0x4c>)
  fops.Receive = HCI_TL_SPI_Receive;
 80007d6:	4912      	ldr	r1, [pc, #72]	; (8000820 <hci_tl_lowlevel_init+0x50>)
  fops.Init    = HCI_TL_SPI_Init;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <hci_tl_lowlevel_init+0x54>)
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80007da:	4813      	ldr	r0, [pc, #76]	; (8000828 <hci_tl_lowlevel_init+0x58>)
  fops.Send    = HCI_TL_SPI_Send;
 80007dc:	4d13      	ldr	r5, [pc, #76]	; (800082c <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <hci_tl_lowlevel_init+0x60>)
  fops.Init    = HCI_TL_SPI_Init;
 80007e0:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80007e2:	9002      	str	r0, [sp, #8]
  fops.GetTick = BSP_GetTick;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <hci_tl_lowlevel_init+0x64>)
 80007e6:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 80007e8:	a801      	add	r0, sp, #4
  fops.Reset   = HCI_TL_SPI_Reset;
 80007ea:	9203      	str	r2, [sp, #12]
  fops.Receive = HCI_TL_SPI_Receive;
 80007ec:	e9cd 1504 	strd	r1, r5, [sp, #16]
  hci_register_io_bus (&fops);
 80007f0:	f005 fb7e 	bl	8005ef0 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80007f4:	4620      	mov	r0, r4
 80007f6:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80007fa:	f001 ff5d 	bl	80026b8 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <hci_tl_lowlevel_init+0x68>)
 8000800:	4620      	mov	r0, r4
 8000802:	2100      	movs	r1, #0
 8000804:	f001 ff52 	bl	80026ac <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2105      	movs	r1, #5
 800080c:	2006      	movs	r0, #6
 800080e:	f001 fc6b 	bl	80020e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000812:	2006      	movs	r0, #6
 8000814:	f001 fcb2 	bl	800217c <HAL_NVIC_EnableIRQ>
}
 8000818:	b009      	add	sp, #36	; 0x24
 800081a:	bd30      	pop	{r4, r5, pc}
 800081c:	2000988c 	.word	0x2000988c
 8000820:	08000655 	.word	0x08000655
 8000824:	08000579 	.word	0x08000579
 8000828:	080005f5 	.word	0x080005f5
 800082c:	080006dd 	.word	0x080006dd
 8000830:	08000619 	.word	0x08000619
 8000834:	0800121d 	.word	0x0800121d
 8000838:	080007ad 	.word	0x080007ad

0800083c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800083c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800083e:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_ADC1_Init+0x64>)
 8000840:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_ADC1_Init+0x68>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000842:	4919      	ldr	r1, [pc, #100]	; (80008a8 <MX_ADC1_Init+0x6c>)
  hadc1.Instance = ADC1;
 8000844:	6003      	str	r3, [r0, #0]
{
 8000846:	b084      	sub	sp, #16
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000848:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 800084c:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800084e:	6042      	str	r2, [r0, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000850:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8000852:	e9cd 3301 	strd	r3, r3, [sp, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000856:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000858:	6083      	str	r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	9300      	str	r3, [sp, #0]
  hadc1.Init.ScanConvMode = DISABLE;
 800085c:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800085e:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000860:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000864:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000866:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000868:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 800086c:	9303      	str	r3, [sp, #12]
  hadc1.Init.NbrOfConversion = 1;
 800086e:	61c2      	str	r2, [r0, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000870:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000872:	f001 f9d5 	bl	8001c20 <HAL_ADC_Init>
 8000876:	b960      	cbnz	r0, 8000892 <MX_ADC1_Init+0x56>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000878:	2202      	movs	r2, #2
 800087a:	2301      	movs	r3, #1
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800087c:	2400      	movs	r4, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	4808      	ldr	r0, [pc, #32]	; (80008a0 <MX_ADC1_Init+0x64>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000880:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000882:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_2;
 8000884:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000888:	f001 fb26 	bl	8001ed8 <HAL_ADC_ConfigChannel>
 800088c:	b920      	cbnz	r0, 8000898 <MX_ADC1_Init+0x5c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088e:	b004      	add	sp, #16
 8000890:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000892:	f000 ff29 	bl	80016e8 <Error_Handler>
 8000896:	e7ef      	b.n	8000878 <MX_ADC1_Init+0x3c>
    Error_Handler();
 8000898:	f000 ff26 	bl	80016e8 <Error_Handler>
}
 800089c:	b004      	add	sp, #16
 800089e:	bd10      	pop	{r4, pc}
 80008a0:	20009894 	.word	0x20009894
 80008a4:	40012000 	.word	0x40012000
 80008a8:	0f000001 	.word	0x0f000001

080008ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008ac:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 80008ae:	6802      	ldr	r2, [r0, #0]
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <HAL_ADC_MspInit+0x98>)
{
 80008b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 80008b6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80008bc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80008c0:	9406      	str	r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 80008c2:	d001      	beq.n	80008c8 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008c4:	b008      	add	sp, #32
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008c8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80008cc:	9400      	str	r4, [sp, #0]
 80008ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 80008d0:	4e1d      	ldr	r6, [pc, #116]	; (8000948 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008d6:	645a      	str	r2, [r3, #68]	; 0x44
 80008d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008da:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80008de:	9200      	str	r2, [sp, #0]
 80008e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	9401      	str	r4, [sp, #4]
 80008e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e6:	f042 0201 	orr.w	r2, r2, #1
 80008ea:	631a      	str	r2, [r3, #48]	; 0x30
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008f6:	2204      	movs	r2, #4
 80008f8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	a902      	add	r1, sp, #8
 80008fc:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	4812      	ldr	r0, [pc, #72]	; (800094c <HAL_ADC_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000902:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f001 ff0f 	bl	8002728 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800090a:	4811      	ldr	r0, [pc, #68]	; (8000950 <HAL_ADC_MspInit+0xa4>)
 800090c:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800090e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000912:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800091a:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800091c:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000920:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000924:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000928:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800092a:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800092c:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800092e:	f001 fc53 	bl	80021d8 <HAL_DMA_Init>
 8000932:	b918      	cbnz	r0, 800093c <HAL_ADC_MspInit+0x90>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000934:	63ae      	str	r6, [r5, #56]	; 0x38
 8000936:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8000938:	b008      	add	sp, #32
 800093a:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800093c:	f000 fed4 	bl	80016e8 <Error_Handler>
 8000940:	e7f8      	b.n	8000934 <HAL_ADC_MspInit+0x88>
 8000942:	bf00      	nop
 8000944:	40012000 	.word	0x40012000
 8000948:	200098dc 	.word	0x200098dc
 800094c:	40020000 	.word	0x40020000
 8000950:	40026410 	.word	0x40026410

08000954 <APP_UserEvtRx>:
{
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;

  if(hci_pckt->type == HCI_EVENT_PKT)
 8000954:	7803      	ldrb	r3, [r0, #0]
 8000956:	2b04      	cmp	r3, #4
 8000958:	d000      	beq.n	800095c <APP_UserEvtRx+0x8>
 800095a:	4770      	bx	lr
{
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;

    if(event_pckt->evt == EVT_LE_META_EVENT)
 800095e:	7843      	ldrb	r3, [r0, #1]
 8000960:	2b3e      	cmp	r3, #62	; 0x3e
{
 8000962:	b083      	sub	sp, #12
 8000964:	4605      	mov	r5, r0
    if(event_pckt->evt == EVT_LE_META_EVENT)
 8000966:	d042      	beq.n	80009ee <APP_UserEvtRx+0x9a>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
        }
      }
    }
    else if(event_pckt->evt == EVT_VENDOR)
 8000968:	2bff      	cmp	r3, #255	; 0xff
 800096a:	d02f      	beq.n	80009cc <APP_UserEvtRx+0x78>
    }
    else
    {
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
      {
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800096c:	4c48      	ldr	r4, [pc, #288]	; (8000a90 <APP_UserEvtRx+0x13c>)
 800096e:	8822      	ldrh	r2, [r4, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d103      	bne.n	800097c <APP_UserEvtRx+0x28>
        {
          hci_events_table[i].process((void *)event_pckt->data);
 8000974:	6863      	ldr	r3, [r4, #4]
 8000976:	3003      	adds	r0, #3
 8000978:	4798      	blx	r3
 800097a:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800097c:	8922      	ldrh	r2, [r4, #8]
 800097e:	4293      	cmp	r3, r2
 8000980:	d103      	bne.n	800098a <APP_UserEvtRx+0x36>
          hci_events_table[i].process((void *)event_pckt->data);
 8000982:	68e3      	ldr	r3, [r4, #12]
 8000984:	1ce8      	adds	r0, r5, #3
 8000986:	4798      	blx	r3
 8000988:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800098a:	8a22      	ldrh	r2, [r4, #16]
 800098c:	4293      	cmp	r3, r2
 800098e:	d103      	bne.n	8000998 <APP_UserEvtRx+0x44>
          hci_events_table[i].process((void *)event_pckt->data);
 8000990:	6963      	ldr	r3, [r4, #20]
 8000992:	1ce8      	adds	r0, r5, #3
 8000994:	4798      	blx	r3
 8000996:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8000998:	8b22      	ldrh	r2, [r4, #24]
 800099a:	4293      	cmp	r3, r2
 800099c:	d103      	bne.n	80009a6 <APP_UserEvtRx+0x52>
          hci_events_table[i].process((void *)event_pckt->data);
 800099e:	69e3      	ldr	r3, [r4, #28]
 80009a0:	1ce8      	adds	r0, r5, #3
 80009a2:	4798      	blx	r3
 80009a4:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 80009a6:	8c22      	ldrh	r2, [r4, #32]
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d103      	bne.n	80009b4 <APP_UserEvtRx+0x60>
          hci_events_table[i].process((void *)event_pckt->data);
 80009ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009ae:	1ce8      	adds	r0, r5, #3
 80009b0:	4798      	blx	r3
 80009b2:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 80009b4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d103      	bne.n	80009c2 <APP_UserEvtRx+0x6e>
          hci_events_table[i].process((void *)event_pckt->data);
 80009ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009bc:	1ce8      	adds	r0, r5, #3
 80009be:	4798      	blx	r3
 80009c0:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 80009c2:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d05c      	beq.n	8000a82 <APP_UserEvtRx+0x12e>
        }
      }
    }
  }
}
 80009c8:	b003      	add	sp, #12
 80009ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009cc:	4c31      	ldr	r4, [pc, #196]	; (8000a94 <APP_UserEvtRx+0x140>)
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 80009ce:	1d47      	adds	r7, r0, #5
 80009d0:	f504 76ac 	add.w	r6, r4, #344	; 0x158
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 80009d4:	f8b5 2003 	ldrh.w	r2, [r5, #3]
 80009d8:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d102      	bne.n	80009e6 <APP_UserEvtRx+0x92>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	4638      	mov	r0, r7
 80009e4:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80009e6:	3408      	adds	r4, #8
 80009e8:	42b4      	cmp	r4, r6
 80009ea:	d1f3      	bne.n	80009d4 <APP_UserEvtRx+0x80>
 80009ec:	e7ec      	b.n	80009c8 <APP_UserEvtRx+0x74>
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80009ee:	4c2a      	ldr	r4, [pc, #168]	; (8000a98 <APP_UserEvtRx+0x144>)
 80009f0:	78c3      	ldrb	r3, [r0, #3]
 80009f2:	8822      	ldrh	r2, [r4, #0]
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d103      	bne.n	8000a00 <APP_UserEvtRx+0xac>
          hci_le_meta_events_table[i].process((void *)evt->data);
 80009f8:	6863      	ldr	r3, [r4, #4]
 80009fa:	3004      	adds	r0, #4
 80009fc:	4798      	blx	r3
 80009fe:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000a00:	8922      	ldrh	r2, [r4, #8]
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d103      	bne.n	8000a0e <APP_UserEvtRx+0xba>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000a06:	68e3      	ldr	r3, [r4, #12]
 8000a08:	1d28      	adds	r0, r5, #4
 8000a0a:	4798      	blx	r3
 8000a0c:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000a0e:	8a22      	ldrh	r2, [r4, #16]
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d103      	bne.n	8000a1c <APP_UserEvtRx+0xc8>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000a14:	6963      	ldr	r3, [r4, #20]
 8000a16:	1d28      	adds	r0, r5, #4
 8000a18:	4798      	blx	r3
 8000a1a:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000a1c:	8b22      	ldrh	r2, [r4, #24]
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d103      	bne.n	8000a2a <APP_UserEvtRx+0xd6>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000a22:	69e3      	ldr	r3, [r4, #28]
 8000a24:	1d28      	adds	r0, r5, #4
 8000a26:	4798      	blx	r3
 8000a28:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000a2a:	8c22      	ldrh	r2, [r4, #32]
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d103      	bne.n	8000a38 <APP_UserEvtRx+0xe4>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a32:	1d28      	adds	r0, r5, #4
 8000a34:	4798      	blx	r3
 8000a36:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000a38:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d103      	bne.n	8000a46 <APP_UserEvtRx+0xf2>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000a3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a40:	1d28      	adds	r0, r5, #4
 8000a42:	4798      	blx	r3
 8000a44:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000a46:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d103      	bne.n	8000a54 <APP_UserEvtRx+0x100>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000a4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a4e:	1d28      	adds	r0, r5, #4
 8000a50:	4798      	blx	r3
 8000a52:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000a54:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d103      	bne.n	8000a62 <APP_UserEvtRx+0x10e>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000a5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000a5c:	1d28      	adds	r0, r5, #4
 8000a5e:	4798      	blx	r3
 8000a60:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000a62:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d103      	bne.n	8000a72 <APP_UserEvtRx+0x11e>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000a6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a6c:	1d28      	adds	r0, r5, #4
 8000a6e:	4798      	blx	r3
 8000a70:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000a72:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d1a6      	bne.n	80009c8 <APP_UserEvtRx+0x74>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000a7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	1d28      	adds	r0, r5, #4
 8000a80:	e002      	b.n	8000a88 <APP_UserEvtRx+0x134>
          hci_events_table[i].process((void *)event_pckt->data);
 8000a82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	1ce8      	adds	r0, r5, #3
}
 8000a88:	b003      	add	sp, #12
 8000a8a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hci_events_table[i].process((void *)event_pckt->data);
 8000a8e:	4718      	bx	r3
 8000a90:	08009b54 	.word	0x08009b54
 8000a94:	08009be0 	.word	0x08009be0
 8000a98:	08009b8c 	.word	0x08009b8c

08000a9c <BlueNRG_Init>:
{
 8000a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hci_init(APP_UserEvtRx, NULL);
 8000aa0:	2100      	movs	r1, #0
{
 8000aa2:	b0b7      	sub	sp, #220	; 0xdc
	hci_init(APP_UserEvtRx, NULL);
 8000aa4:	48d2      	ldr	r0, [pc, #840]	; (8000df0 <BlueNRG_Init+0x354>)
 8000aa6:	f005 f9f7 	bl	8005e98 <hci_init>
	hci_reset();
 8000aaa:	f004 ff1f 	bl	80058ec <hci_reset>
	HAL_Delay(2000);
 8000aae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ab2:	f001 f8a3 	bl	8001bfc <HAL_Delay>
	ret = aci_hal_set_tx_power_level(1, 4);
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f005 f9cb 	bl	8005e54 <aci_hal_set_tx_power_level>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	f040 81ec 	bne.w	8000e9c <BlueNRG_Init+0x400>
	uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000ac4:	4bcb      	ldr	r3, [pc, #812]	; (8000df4 <BlueNRG_Init+0x358>)
 8000ac6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000aca:	902e      	str	r0, [sp, #184]	; 0xb8
	ret = hci_le_rand(random_number);
 8000acc:	a832      	add	r0, sp, #200	; 0xc8
	uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000ace:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
	ret = hci_le_rand(random_number);
 8000ad2:	f004 ff5f 	bl	8005994 <hci_le_rand>
		discovery_time += (2*random_number[i]);
 8000ad6:	f89d 10c8 	ldrb.w	r1, [sp, #200]	; 0xc8
 8000ada:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8000ade:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8000ae2:	f89d 00cb 	ldrb.w	r0, [sp, #203]	; 0xcb
	bdaddr[0] = (uint8_t) (random_number[0]);
 8000ae6:	f88d 10b8 	strb.w	r1, [sp, #184]	; 0xb8
		discovery_time += (2*random_number[i]);
 8000aea:	440a      	add	r2, r1
 8000aec:	4413      	add	r3, r2
 8000aee:	f89d 10cc 	ldrb.w	r1, [sp, #204]	; 0xcc
 8000af2:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
	bdaddr[1] = (uint8_t) (random_number[3]);
 8000af6:	f88d 00b9 	strb.w	r0, [sp, #185]	; 0xb9
		discovery_time += (2*random_number[i]);
 8000afa:	4403      	add	r3, r0
 8000afc:	4419      	add	r1, r3
 8000afe:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
 8000b02:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
	bdaddr[2] = (uint8_t) (random_number[6]);
 8000b06:	f88d 00ba 	strb.w	r0, [sp, #186]	; 0xba
		discovery_time += (2*random_number[i]);
 8000b0a:	440a      	add	r2, r1
 8000b0c:	4402      	add	r2, r0
 8000b0e:	4413      	add	r3, r2
 8000b10:	48b9      	ldr	r0, [pc, #740]	; (8000df8 <BlueNRG_Init+0x35c>)
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000b18:	ac2e      	add	r4, sp, #184	; 0xb8
 8000b1a:	8003      	strh	r3, [r0, #0]
 8000b1c:	4622      	mov	r2, r4
 8000b1e:	2106      	movs	r1, #6
 8000b20:	2000      	movs	r0, #0
 8000b22:	f005 f96d 	bl	8005e00 <aci_hal_write_config_data>
	ret = aci_gatt_init();
 8000b26:	f004 ffe5 	bl	8005af4 <aci_gatt_init>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	f040 81bb 	bne.w	8000ea6 <BlueNRG_Init+0x40a>
	aci_gap_init(GAP_PERIPHERAL_ROLE, GAP_PRIVACY_DISABLED, 0x17, &hGAPService, &hDevNameChar, &hAppearanceChar);
 8000b30:	4ab2      	ldr	r2, [pc, #712]	; (8000dfc <BlueNRG_Init+0x360>)
 8000b32:	4bb3      	ldr	r3, [pc, #716]	; (8000e00 <BlueNRG_Init+0x364>)
	const uint8_t char1_uuid[16] =
 8000b34:	4db3      	ldr	r5, [pc, #716]	; (8000e04 <BlueNRG_Init+0x368>)
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8000b36:	4fb4      	ldr	r7, [pc, #720]	; (8000e08 <BlueNRG_Init+0x36c>)
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8000b38:	f8df b300 	ldr.w	fp, [pc, #768]	; 8000e3c <BlueNRG_Init+0x3a0>
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8000b3c:	f8df a300 	ldr.w	sl, [pc, #768]	; 8000e40 <BlueNRG_Init+0x3a4>
	BLUENRG_memcpy(&char_obj_4.Char_UUID_128, char4_uuid, 16);
 8000b40:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8000e44 <BlueNRG_Init+0x3a8>
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8000b44:	f8df 8300 	ldr.w	r8, [pc, #768]	; 8000e48 <BlueNRG_Init+0x3ac>
	aci_gap_init(GAP_PERIPHERAL_ROLE, GAP_PRIVACY_DISABLED, 0x17, &hGAPService, &hDevNameChar, &hAppearanceChar);
 8000b48:	e9cd 3200 	strd	r3, r2, [sp]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4baf      	ldr	r3, [pc, #700]	; (8000e0c <BlueNRG_Init+0x370>)
 8000b50:	2217      	movs	r2, #23
 8000b52:	2001      	movs	r0, #1
 8000b54:	f004 ff98 	bl	8005a88 <aci_gap_init>
	const uint8_t service_uuid[16] =
 8000b58:	4bad      	ldr	r3, [pc, #692]	; (8000e10 <BlueNRG_Init+0x374>)
 8000b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b5c:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8000b60:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	const uint8_t char1_uuid[16] =
 8000b64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
	const uint8_t char2_uuid[16] =
 8000b68:	f105 0e10 	add.w	lr, r5, #16
	const uint8_t char1_uuid[16] =
 8000b6c:	ae1e      	add	r6, sp, #120	; 0x78
 8000b6e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char2_uuid[16] =
 8000b72:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8000b76:	ae22      	add	r6, sp, #136	; 0x88
	const uint8_t char3_uuid[16] =
 8000b78:	f105 0e20 	add.w	lr, r5, #32
	const uint8_t char2_uuid[16] =
 8000b7c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char3_uuid[16] =
 8000b80:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8000b84:	ae26      	add	r6, sp, #152	; 0x98
	const uint8_t char4_uuid[16] =
 8000b86:	f105 0e30 	add.w	lr, r5, #48	; 0x30
	const uint8_t char3_uuid[16] =
 8000b8a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char4_uuid[16] =
 8000b8e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
	const uint8_t char5_uuid[16] =
 8000b92:	f105 0e40 	add.w	lr, r5, #64	; 0x40
	const uint8_t char4_uuid[16] =
 8000b96:	ad2a      	add	r5, sp, #168	; 0xa8
 8000b98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	const uint8_t char5_uuid[16] =
 8000b9c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8000ba0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(&suuid_object.Service_UUID_128, service_uuid, 16);
 8000ba4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ba8:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8000e4c <BlueNRG_Init+0x3b0>
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8000bac:	9700      	str	r7, [sp, #0]
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8000bae:	ae1e      	add	r6, sp, #120	; 0x78
	BLUENRG_memcpy(&suuid_object.Service_UUID_128, service_uuid, 16);
 8000bb0:	f8cc 0000 	str.w	r0, [ip]
 8000bb4:	f8cc 1004 	str.w	r1, [ip, #4]
 8000bb8:	f8cc 2008 	str.w	r2, [ip, #8]
 8000bbc:	f8cc 300c 	str.w	r3, [ip, #12]
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8000bc0:	4661      	mov	r1, ip
 8000bc2:	2314      	movs	r3, #20
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f004 ffb0 	bl	8005b2c <aci_gatt_add_service>
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8000bcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bce:	f8df c280 	ldr.w	ip, [pc, #640]	; 8000e50 <BlueNRG_Init+0x3b4>
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8000bd2:	ae22      	add	r6, sp, #136	; 0x88
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8000bd4:	f8cc 0000 	str.w	r0, [ip]
 8000bd8:	f8cc 1004 	str.w	r1, [ip, #4]
 8000bdc:	f8cc 2008 	str.w	r2, [ip, #8]
 8000be0:	f8cc 300c 	str.w	r3, [ip, #12]
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8000be4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8000be6:	ae26      	add	r6, sp, #152	; 0x98
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8000be8:	f8cb 0000 	str.w	r0, [fp]
 8000bec:	f8cb 1004 	str.w	r1, [fp, #4]
 8000bf0:	f8cb 2008 	str.w	r2, [fp, #8]
 8000bf4:	f8cb 300c 	str.w	r3, [fp, #12]
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8000bf8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bfa:	f8ca 0000 	str.w	r0, [sl]
 8000bfe:	f8ca 1004 	str.w	r1, [sl, #4]
 8000c02:	f8ca 2008 	str.w	r2, [sl, #8]
 8000c06:	f8ca 300c 	str.w	r3, [sl, #12]
	BLUENRG_memcpy(&char_obj_4.Char_UUID_128, char4_uuid, 16);
 8000c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0c:	f8c9 0000 	str.w	r0, [r9]
 8000c10:	f8c9 1004 	str.w	r1, [r9, #4]
 8000c14:	f8c9 2008 	str.w	r2, [r9, #8]
 8000c18:	f8c9 300c 	str.w	r3, [r9, #12]
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8000c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1e:	f8c8 300c 	str.w	r3, [r8, #12]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8000c22:	4b7c      	ldr	r3, [pc, #496]	; (8000e14 <BlueNRG_Init+0x378>)
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8000c24:	f8c8 0000 	str.w	r0, [r8]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8000c28:	2400      	movs	r4, #0
 8000c2a:	2607      	movs	r6, #7
 8000c2c:	2510      	movs	r5, #16
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8000c2e:	f8c8 1004 	str.w	r1, [r8, #4]
 8000c32:	f8c8 2008 	str.w	r2, [r8, #8]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8000c36:	2102      	movs	r1, #2
 8000c38:	4662      	mov	r2, ip
 8000c3a:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000c3e:	9500      	str	r5, [sp, #0]
 8000c40:	2304      	movs	r3, #4
 8000c42:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000c46:	8838      	ldrh	r0, [r7, #0]
 8000c48:	9603      	str	r6, [sp, #12]
 8000c4a:	f004 ffbd 	bl	8005bc8 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_2, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8000c4e:	9500      	str	r5, [sp, #0]
 8000c50:	4d71      	ldr	r5, [pc, #452]	; (8000e18 <BlueNRG_Init+0x37c>)
 8000c52:	9505      	str	r5, [sp, #20]
 8000c54:	465a      	mov	r2, fp
 8000c56:	2102      	movs	r1, #2
 8000c58:	2304      	movs	r3, #4
 8000c5a:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8000c5e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000c62:	8838      	ldrh	r0, [r7, #0]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_3, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_READ,
 8000c64:	468b      	mov	fp, r1
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_2, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8000c66:	f004 ffaf 	bl	8005bc8 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_3, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_READ,
 8000c6a:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <BlueNRG_Init+0x380>)
 8000c6c:	9305      	str	r3, [sp, #20]
 8000c6e:	4652      	mov	r2, sl
 8000c70:	4659      	mov	r1, fp
 8000c72:	f8cd b000 	str.w	fp, [sp]
 8000c76:	2304      	movs	r3, #4
 8000c78:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8000c7c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000c80:	8838      	ldrh	r0, [r7, #0]
 8000c82:	f004 ffa1 	bl	8005bc8 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_4, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP,
 8000c86:	2501      	movs	r5, #1
 8000c88:	f04f 0c0c 	mov.w	ip, #12
 8000c8c:	4b64      	ldr	r3, [pc, #400]	; (8000e20 <BlueNRG_Init+0x384>)
 8000c8e:	f8cd c000 	str.w	ip, [sp]
 8000c92:	464a      	mov	r2, r9
 8000c94:	4659      	mov	r1, fp
 8000c96:	9305      	str	r3, [sp, #20]
 8000c98:	8838      	ldrh	r0, [r7, #0]
 8000c9a:	9404      	str	r4, [sp, #16]
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	9603      	str	r6, [sp, #12]
 8000ca0:	9401      	str	r4, [sp, #4]
 8000ca2:	9502      	str	r5, [sp, #8]
 8000ca4:	f004 ff90 	bl	8005bc8 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_5, BLE_DATA_BYTES(6), CHAR_PROP_READ,
 8000ca8:	4b5e      	ldr	r3, [pc, #376]	; (8000e24 <BlueNRG_Init+0x388>)
 8000caa:	f8cd b000 	str.w	fp, [sp]
 8000cae:	4642      	mov	r2, r8
 8000cb0:	4659      	mov	r1, fp
 8000cb2:	9305      	str	r3, [sp, #20]
 8000cb4:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8000cb8:	2306      	movs	r3, #6
 8000cba:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000cbe:	8838      	ldrh	r0, [r7, #0]
	const char char2name[] = {'W','R','N','_','C','R','A','S','H'};
 8000cc0:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8000e54 <BlueNRG_Init+0x3b8>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_5, BLE_DATA_BYTES(6), CHAR_PROP_READ,
 8000cc4:	f004 ff80 	bl	8005bc8 <aci_gatt_add_char>
	const char char1name[] = {'W','R','N','_','S','P','E','E','D'};
 8000cc8:	4b57      	ldr	r3, [pc, #348]	; (8000e28 <BlueNRG_Init+0x38c>)
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8000cca:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8000e58 <BlueNRG_Init+0x3bc>
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8000cce:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8000e5c <BlueNRG_Init+0x3c0>
	const char char1name[] = {'W','R','N','_','S','P','E','E','D'};
 8000cd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cd6:	ab0b      	add	r3, sp, #44	; 0x2c
 8000cd8:	c303      	stmia	r3!, {r0, r1}
 8000cda:	701a      	strb	r2, [r3, #0]
	const char char2name[] = {'W','R','N','_','C','R','A','S','H'};
 8000cdc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8000ce0:	ab0e      	add	r3, sp, #56	; 0x38
 8000ce2:	c303      	stmia	r3!, {r0, r1}
 8000ce4:	701a      	strb	r2, [r3, #0]
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8000ce6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8000cea:	ab11      	add	r3, sp, #68	; 0x44
 8000cec:	c303      	stmia	r3!, {r0, r1}
 8000cee:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000cf2:	f823 2b02 	strh.w	r2, [r3], #2
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8000cf6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8000cfa:	f8df c164 	ldr.w	ip, [pc, #356]	; 8000e60 <BlueNRG_Init+0x3c4>
	aci_gatt_add_char_desc(hService, hClientNotify_OverSpeed, UUID_TYPE_16, &DescriptorProperty,
 8000cfe:	f8df e164 	ldr.w	lr, [pc, #356]	; 8000e64 <BlueNRG_Init+0x3c8>
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8000d02:	f883 8000 	strb.w	r8, [r3]
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8000d06:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8000d0a:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8000d0e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8000d12:	f10d 095c 	add.w	r9, sp, #92	; 0x5c
	DescriptorProperty.Char_UUID_16 = CHAR_USER_DESC_UUID;
 8000d16:	f642 1c01 	movw	ip, #10497	; 0x2901
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8000d1a:	e889 0007 	stmia.w	r9, {r0, r1, r2}
	DescriptorProperty.Char_UUID_16 = CHAR_USER_DESC_UUID;
 8000d1e:	f8ad c0c8 	strh.w	ip, [sp, #200]	; 0xc8
	aci_gatt_add_char_desc(hService, hClientNotify_OverSpeed, UUID_TYPE_16, &DescriptorProperty,
 8000d22:	e9cd 4e07 	strd	r4, lr, [sp, #28]
 8000d26:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8000d2a:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8000d2e:	4939      	ldr	r1, [pc, #228]	; (8000e14 <BlueNRG_Init+0x378>)
 8000d30:	8838      	ldrh	r0, [r7, #0]
 8000d32:	8809      	ldrh	r1, [r1, #0]
 8000d34:	f04f 081e 	mov.w	r8, #30
 8000d38:	f04f 0b09 	mov.w	fp, #9
 8000d3c:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8000d40:	ab0b      	add	r3, sp, #44	; 0x2c
 8000d42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8000d46:	462a      	mov	r2, r5
 8000d48:	4663      	mov	r3, ip
 8000d4a:	f8cd 8000 	str.w	r8, [sp]
 8000d4e:	f004 ffa1 	bl	8005c94 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientNotify_Crash, UUID_TYPE_16, &DescriptorProperty,
 8000d52:	e9cd 8b00 	strd	r8, fp, [sp]
 8000d56:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8000d5a:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8000d5e:	492e      	ldr	r1, [pc, #184]	; (8000e18 <BlueNRG_Init+0x37c>)
 8000d60:	4a32      	ldr	r2, [pc, #200]	; (8000e2c <BlueNRG_Init+0x390>)
 8000d62:	9407      	str	r4, [sp, #28]
 8000d64:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8000d68:	ab0e      	add	r3, sp, #56	; 0x38
 8000d6a:	8809      	ldrh	r1, [r1, #0]
 8000d6c:	8838      	ldrh	r0, [r7, #0]
 8000d6e:	9208      	str	r2, [sp, #32]
 8000d70:	9302      	str	r3, [sp, #8]
 8000d72:	462a      	mov	r2, r5
 8000d74:	4663      	mov	r3, ip
 8000d76:	f004 ff8d 	bl	8005c94 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientRead_Velocity, UUID_TYPE_16, &DescriptorProperty,
 8000d7a:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8000d7e:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8000d82:	4926      	ldr	r1, [pc, #152]	; (8000e1c <BlueNRG_Init+0x380>)
 8000d84:	4a2a      	ldr	r2, [pc, #168]	; (8000e30 <BlueNRG_Init+0x394>)
 8000d86:	9407      	str	r4, [sp, #28]
 8000d88:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8000d8c:	f04f 0b0b 	mov.w	fp, #11
 8000d90:	ab11      	add	r3, sp, #68	; 0x44
 8000d92:	f8cd 8000 	str.w	r8, [sp]
 8000d96:	8809      	ldrh	r1, [r1, #0]
 8000d98:	8838      	ldrh	r0, [r7, #0]
 8000d9a:	9208      	str	r2, [sp, #32]
 8000d9c:	e9cd b301 	strd	fp, r3, [sp, #4]
 8000da0:	462a      	mov	r2, r5
 8000da2:	4663      	mov	r3, ip
 8000da4:	f004 ff76 	bl	8005c94 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientWrite_Direction, UUID_TYPE_16, &DescriptorProperty,
 8000da8:	e9cd 6406 	strd	r6, r4, [sp, #24]
 8000dac:	491c      	ldr	r1, [pc, #112]	; (8000e20 <BlueNRG_Init+0x384>)
 8000dae:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <BlueNRG_Init+0x398>)
 8000db0:	f8cd a008 	str.w	sl, [sp, #8]
 8000db4:	f04f 0c03 	mov.w	ip, #3
 8000db8:	230a      	movs	r3, #10
 8000dba:	9405      	str	r4, [sp, #20]
 8000dbc:	9403      	str	r4, [sp, #12]
 8000dbe:	f8cd 8000 	str.w	r8, [sp]
 8000dc2:	8809      	ldrh	r1, [r1, #0]
 8000dc4:	8838      	ldrh	r0, [r7, #0]
 8000dc6:	9208      	str	r2, [sp, #32]
 8000dc8:	f8cd c010 	str.w	ip, [sp, #16]
 8000dcc:	462a      	mov	r2, r5
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	ab32      	add	r3, sp, #200	; 0xc8
 8000dd2:	f004 ff5f 	bl	8005c94 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientRead_VerifyDirection, UUID_TYPE_16, &DescriptorProperty,
 8000dd6:	e9cd 6406 	strd	r6, r4, [sp, #24]
 8000dda:	e9cd 5404 	strd	r5, r4, [sp, #16]
 8000dde:	e9cd 9402 	strd	r9, r4, [sp, #8]
 8000de2:	e9cd 8b00 	strd	r8, fp, [sp]
 8000de6:	490f      	ldr	r1, [pc, #60]	; (8000e24 <BlueNRG_Init+0x388>)
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <BlueNRG_Init+0x39c>)
 8000dea:	8809      	ldrh	r1, [r1, #0]
 8000dec:	e03c      	b.n	8000e68 <BlueNRG_Init+0x3cc>
 8000dee:	bf00      	nop
 8000df0:	08000955 	.word	0x08000955
 8000df4:	08009624 	.word	0x08009624
 8000df8:	2000018e 	.word	0x2000018e
 8000dfc:	20000190 	.word	0x20000190
 8000e00:	2000019c 	.word	0x2000019c
 8000e04:	0800962c 	.word	0x0800962c
 8000e08:	200001a8 	.word	0x200001a8
 8000e0c:	200001a4 	.word	0x200001a4
 8000e10:	080096a8 	.word	0x080096a8
 8000e14:	20000194 	.word	0x20000194
 8000e18:	20000192 	.word	0x20000192
 8000e1c:	20000196 	.word	0x20000196
 8000e20:	2000019a 	.word	0x2000019a
 8000e24:	20000198 	.word	0x20000198
 8000e28:	080096bc 	.word	0x080096bc
 8000e2c:	200001a6 	.word	0x200001a6
 8000e30:	200001aa 	.word	0x200001aa
 8000e34:	200001a2 	.word	0x200001a2
 8000e38:	2000019e 	.word	0x2000019e
 8000e3c:	200099a0 	.word	0x200099a0
 8000e40:	20009970 	.word	0x20009970
 8000e44:	2000993c 	.word	0x2000993c
 8000e48:	20009990 	.word	0x20009990
 8000e4c:	20009980 	.word	0x20009980
 8000e50:	20009960 	.word	0x20009960
 8000e54:	080096c8 	.word	0x080096c8
 8000e58:	080096d4 	.word	0x080096d4
 8000e5c:	080096e0 	.word	0x080096e0
 8000e60:	080096f0 	.word	0x080096f0
 8000e64:	200001a0 	.word	0x200001a0
 8000e68:	8838      	ldrh	r0, [r7, #0]
 8000e6a:	9308      	str	r3, [sp, #32]
 8000e6c:	462a      	mov	r2, r5
 8000e6e:	ab32      	add	r3, sp, #200	; 0xc8
 8000e70:	f004 ff10 	bl	8005c94 <aci_gatt_add_char_desc>
	if(FunctionAlreadyCalled == SET)
 8000e74:	4a19      	ldr	r2, [pc, #100]	; (8000edc <BlueNRG_Init+0x440>)
	Conn_Details.deviceRole = 0xFF;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <BlueNRG_Init+0x444>)
	if(FunctionAlreadyCalled == SET)
 8000e78:	7812      	ldrb	r2, [r2, #0]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 8000e7a:	741c      	strb	r4, [r3, #16]
	Conn_Details.connectionhandle = 0xFFFF;
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
	Conn_Details.deviceRole = 0xFF;
 8000e80:	20ff      	movs	r0, #255	; 0xff
	if(FunctionAlreadyCalled == SET)
 8000e82:	42aa      	cmp	r2, r5
	BLUENRG_memset(&Conn_Details.BLE_Client_Addr[0], 0, 6);
 8000e84:	601c      	str	r4, [r3, #0]
 8000e86:	809c      	strh	r4, [r3, #4]
	Conn_Details.deviceRole = 0xFF;
 8000e88:	7198      	strb	r0, [r3, #6]
	Conn_Details.connectionhandle = 0xFFFF;
 8000e8a:	6099      	str	r1, [r3, #8]
 8000e8c:	60d9      	str	r1, [r3, #12]
	if(FunctionAlreadyCalled == SET)
 8000e8e:	d00f      	beq.n	8000eb0 <BlueNRG_Init+0x414>
	FunctionAlreadyCalled = SET;
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <BlueNRG_Init+0x440>)
 8000e92:	2301      	movs	r3, #1
 8000e94:	7013      	strb	r3, [r2, #0]
}
 8000e96:	b037      	add	sp, #220	; 0xdc
 8000e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000e9c:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <BlueNRG_Init+0x448>)
 8000e9e:	2164      	movs	r1, #100	; 0x64
 8000ea0:	f000 fc24 	bl	80016ec <assert_failed>
 8000ea4:	e60e      	b.n	8000ac4 <BlueNRG_Init+0x28>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000ea6:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <BlueNRG_Init+0x448>)
 8000ea8:	216b      	movs	r1, #107	; 0x6b
 8000eaa:	f000 fc1f 	bl	80016ec <assert_failed>
 8000eae:	e63f      	b.n	8000b30 <BlueNRG_Init+0x94>
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8000eb0:	490d      	ldr	r1, [pc, #52]	; (8000ee8 <BlueNRG_Init+0x44c>)
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000eb2:	9432      	str	r4, [sp, #200]	; 0xc8
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8000eb4:	ab32      	add	r3, sp, #200	; 0xc8
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	6808      	ldr	r0, [r1, #0]
 8000eba:	4623      	mov	r3, r4
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	f006 fe1b 	bl	8007af8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ec2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0e3      	beq.n	8000e90 <BlueNRG_Init+0x3f4>
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <BlueNRG_Init+0x450>)
 8000eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	f3bf 8f4f 	dsb	sy
 8000ed4:	f3bf 8f6f 	isb	sy
 8000ed8:	e7da      	b.n	8000e90 <BlueNRG_Init+0x3f4>
 8000eda:	bf00      	nop
 8000edc:	2000018b 	.word	0x2000018b
 8000ee0:	2000994c 	.word	0x2000994c
 8000ee4:	0800968c 	.word	0x0800968c
 8000ee8:	200099b0 	.word	0x200099b0
 8000eec:	e000ed04 	.word	0xe000ed04

08000ef0 <BlueNRG_MakeDeviceDiscoverable>:
{
 8000ef0:	b570      	push	{r4, r5, r6, lr}
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <BlueNRG_MakeDeviceDiscoverable+0x6c>)
	uint8_t uuidscanresponse[18] =
 8000ef4:	4d1a      	ldr	r5, [pc, #104]	; (8000f60 <BlueNRG_MakeDeviceDiscoverable+0x70>)
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 8000ef6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
{
 8000efa:	b090      	sub	sp, #64	; 0x40
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 8000efc:	ae08      	add	r6, sp, #32
 8000efe:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	hci_le_set_scan_response_data(0, NULL);
 8000f02:	2100      	movs	r1, #0
 8000f04:	4608      	mov	r0, r1
 8000f06:	f004 fd0b 	bl	8005920 <hci_le_set_scan_response_data>
	uint8_t uuidscanresponse[18] =
 8000f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0c:	ac0b      	add	r4, sp, #44	; 0x2c
 8000f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	8023      	strh	r3, [r4, #0]
	hci_le_set_scan_response_data(18, uuidscanresponse);
 8000f14:	a90b      	add	r1, sp, #44	; 0x2c
 8000f16:	2012      	movs	r0, #18
 8000f18:	f004 fd02 	bl	8005920 <hci_le_set_scan_response_data>
	ret = aci_gap_set_discoverable(ADV_IND, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	9201      	str	r2, [sp, #4]
 8000f22:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000f26:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000f2a:	9602      	str	r6, [sp, #8]
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f34:	21a0      	movs	r1, #160	; 0xa0
 8000f36:	f004 fd53 	bl	80059e0 <aci_gap_set_discoverable>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000f3a:	b920      	cbnz	r0, 8000f46 <BlueNRG_MakeDeviceDiscoverable+0x56>
	Conn_Details.ConnectionStatus = STATE_AWAITING_CONNECTION;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <BlueNRG_MakeDeviceDiscoverable+0x74>)
 8000f3e:	2211      	movs	r2, #17
 8000f40:	741a      	strb	r2, [r3, #16]
}
 8000f42:	b010      	add	sp, #64	; 0x40
 8000f44:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000f46:	4808      	ldr	r0, [pc, #32]	; (8000f68 <BlueNRG_MakeDeviceDiscoverable+0x78>)
 8000f48:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8000f4c:	f000 fbce 	bl	80016ec <assert_failed>
	Conn_Details.ConnectionStatus = STATE_AWAITING_CONNECTION;
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <BlueNRG_MakeDeviceDiscoverable+0x74>)
 8000f52:	2211      	movs	r2, #17
 8000f54:	741a      	strb	r2, [r3, #16]
}
 8000f56:	b010      	add	sp, #64	; 0x40
 8000f58:	bd70      	pop	{r4, r5, r6, pc}
 8000f5a:	bf00      	nop
 8000f5c:	08009700 	.word	0x08009700
 8000f60:	08009710 	.word	0x08009710
 8000f64:	2000994c 	.word	0x2000994c
 8000f68:	0800968c 	.word	0x0800968c

08000f6c <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	b084      	sub	sp, #16
	static FlagStatus FunctionAlreadyCalled = RESET;

	/* This callback function/event only saves connection handle */
	Conn_Details.connectionhandle = Connection_Handle;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <hci_le_connection_complete_event+0x6c>)
{
 8000f72:	9808      	ldr	r0, [sp, #32]
	Conn_Details.connectionhandle = Connection_Handle;
 8000f74:	8119      	strh	r1, [r3, #8]

	/* Role should be slave: 0x01 (if 0x00, it is master and incorrect in this example project) */
	Conn_Details.deviceRole = Role;
 8000f76:	719a      	strb	r2, [r3, #6]
	Conn_Details.BLE_SupervisionTimeout = Supervision_Timeout;

	/* Update connection status to connected */
	Conn_Details.ConnectionStatus = STATE_CONNECTED;

	if(FunctionAlreadyCalled == SET)
 8000f78:	4c18      	ldr	r4, [pc, #96]	; (8000fdc <hci_le_connection_complete_event+0x70>)
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 8000f7a:	6802      	ldr	r2, [r0, #0]
 8000f7c:	601a      	str	r2, [r3, #0]
	if(FunctionAlreadyCalled == SET)
 8000f7e:	7822      	ldrb	r2, [r4, #0]
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 8000f80:	8881      	ldrh	r1, [r0, #4]
{
 8000f82:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8000f86:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8000f8a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 8000f8e:	8099      	strh	r1, [r3, #4]
	if(FunctionAlreadyCalled == SET)
 8000f90:	2a01      	cmp	r2, #1
	Conn_Details.ConnectionStatus = STATE_CONNECTED;
 8000f92:	f04f 0199 	mov.w	r1, #153	; 0x99
	Conn_Details.BLE_ConnInterval = Conn_Interval;
 8000f96:	815e      	strh	r6, [r3, #10]
	Conn_Details.BLE_ConnLatency = Conn_Latency;
 8000f98:	819d      	strh	r5, [r3, #12]
	Conn_Details.BLE_SupervisionTimeout = Supervision_Timeout;
 8000f9a:	81d8      	strh	r0, [r3, #14]
	Conn_Details.ConnectionStatus = STATE_CONNECTED;
 8000f9c:	7419      	strb	r1, [r3, #16]
	if(FunctionAlreadyCalled == SET)
 8000f9e:	d003      	beq.n	8000fa8 <hci_le_connection_complete_event+0x3c>
		   is pdFALSE */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

	/* Indication that function is called already, and can send notifications to FreeRTOS tasks next time it is executed */
	FunctionAlreadyCalled = SET;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	7023      	strb	r3, [r4, #0]
} /* end hci_le_connection_complete_event() */
 8000fa4:	b004      	add	sp, #16
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <hci_le_connection_complete_event+0x74>)
 8000faa:	a903      	add	r1, sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000fac:	2300      	movs	r3, #0
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8000fae:	6800      	ldr	r0, [r0, #0]
 8000fb0:	9100      	str	r1, [sp, #0]
 8000fb2:	2102      	movs	r1, #2
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000fb4:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8000fb6:	f006 fd9f 	bl	8007af8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000fba:	9b03      	ldr	r3, [sp, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0ef      	beq.n	8000fa0 <hci_le_connection_complete_event+0x34>
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <hci_le_connection_complete_event+0x78>)
 8000fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	f3bf 8f4f 	dsb	sy
 8000fcc:	f3bf 8f6f 	isb	sy
	FunctionAlreadyCalled = SET;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	7023      	strb	r3, [r4, #0]
} /* end hci_le_connection_complete_event() */
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2000994c 	.word	0x2000994c
 8000fdc:	2000018c 	.word	0x2000018c
 8000fe0:	200099b0 	.word	0x200099b0
 8000fe4:	e000ed04 	.word	0xe000ed04

08000fe8 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8000fe8:	b530      	push	{r4, r5, lr}
	if(FunctionAlreadyCalled == SET)
 8000fea:	4c15      	ldr	r4, [pc, #84]	; (8001040 <hci_disconnection_complete_event+0x58>)
	Conn_Details.deviceRole = 0xFF;
 8000fec:	4915      	ldr	r1, [pc, #84]	; (8001044 <hci_disconnection_complete_event+0x5c>)
	if(FunctionAlreadyCalled == SET)
 8000fee:	7822      	ldrb	r2, [r4, #0]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 8000ff0:	2300      	movs	r3, #0
	Conn_Details.connectionhandle = 0xFFFF;
 8000ff2:	f04f 30ff 	mov.w	r0, #4294967295
	Conn_Details.deviceRole = 0xFF;
 8000ff6:	25ff      	movs	r5, #255	; 0xff
	if(FunctionAlreadyCalled == SET)
 8000ff8:	2a01      	cmp	r2, #1
{
 8000ffa:	b085      	sub	sp, #20
	Conn_Details.deviceRole = 0xFF;
 8000ffc:	718d      	strb	r5, [r1, #6]
	Conn_Details.connectionhandle = 0xFFFF;
 8000ffe:	6088      	str	r0, [r1, #8]
 8001000:	60c8      	str	r0, [r1, #12]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 8001002:	740b      	strb	r3, [r1, #16]
	BLUENRG_memset(&Conn_Details.BLE_Client_Addr[0], 0, 6);
 8001004:	600b      	str	r3, [r1, #0]
 8001006:	808b      	strh	r3, [r1, #4]
	if(FunctionAlreadyCalled == SET)
 8001008:	d003      	beq.n	8001012 <hci_disconnection_complete_event+0x2a>
	FunctionAlreadyCalled = SET;
 800100a:	2301      	movs	r3, #1
 800100c:	7023      	strb	r3, [r4, #0]
	/* Resets all connectivity status details */
	Server_ResetConnectionStatus();

} /* end hci_disconnection_complete_event() */
 800100e:	b005      	add	sp, #20
 8001010:	bd30      	pop	{r4, r5, pc}
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <hci_disconnection_complete_event+0x60>)
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001014:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001016:	a903      	add	r1, sp, #12
 8001018:	6800      	ldr	r0, [r0, #0]
 800101a:	9100      	str	r1, [sp, #0]
 800101c:	4611      	mov	r1, r2
 800101e:	f006 fd6b 	bl	8007af8 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001022:	9b03      	ldr	r3, [sp, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f0      	beq.n	800100a <hci_disconnection_complete_event+0x22>
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <hci_disconnection_complete_event+0x64>)
 800102a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	f3bf 8f4f 	dsb	sy
 8001034:	f3bf 8f6f 	isb	sy
	FunctionAlreadyCalled = SET;
 8001038:	2301      	movs	r3, #1
 800103a:	7023      	strb	r3, [r4, #0]
} /* end hci_disconnection_complete_event() */
 800103c:	b005      	add	sp, #20
 800103e:	bd30      	pop	{r4, r5, pc}
 8001040:	2000018b 	.word	0x2000018b
 8001044:	2000994c 	.word	0x2000994c
 8001048:	200099b0 	.word	0x200099b0
 800104c:	e000ed04 	.word	0xe000ed04

08001050 <aci_gatt_notification_event>:
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{


} /* end aci_gatt_notification_event() */
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <aci_gatt_attribute_modified_event>:
                                       uint8_t Attr_Data[])
{

	/* Determine which characteristic was modified by Client (Indicate and Notify characteristics
	   are modified by Client only if Client acknowledges these features on Server) */
	if(Attr_Handle == hClientWrite_Direction+1)
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <aci_gatt_attribute_modified_event+0x5c>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	4299      	cmp	r1, r3
 800105c:	d000      	beq.n	8001060 <aci_gatt_attribute_modified_event+0xc>
 800105e:	4770      	bx	lr
{
 8001060:	b510      	push	{r4, lr}
 8001062:	b084      	sub	sp, #16
	{
		if((Attr_Data[0] == 0x4E)||((Attr_Data[0] == 0x6E)))
 8001064:	9b06      	ldr	r3, [sp, #24]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800106c:	2b4e      	cmp	r3, #78	; 0x4e
 800106e:	d019      	beq.n	80010a4 <aci_gatt_attribute_modified_event+0x50>

			/* Notify ACK to master through fifth characteristic (verify direction) printing 'NORTH'*/
			uint8_t buff[6] = {0x4E, 0x4F, 0x52, 0x54, 0x48, 0x00};
			aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
		}
		else if((Attr_Data[0] == 0x45)||((Attr_Data[0] == 0x65)))
 8001070:	2b45      	cmp	r3, #69	; 0x45
 8001072:	d005      	beq.n	8001080 <aci_gatt_attribute_modified_event+0x2c>

			/* Notify ACK to master through fifth characteristic (verify direction) printing 'EAST' */
			uint8_t buff[6] = {0x45, 0x41, 0x53, 0x54, 0x00, 0x00};
			aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
		}
		else if((Attr_Data[0] == 0x53)||((Attr_Data[0] == 0x73)))
 8001074:	2b53      	cmp	r3, #83	; 0x53
 8001076:	d019      	beq.n	80010ac <aci_gatt_attribute_modified_event+0x58>

			/* Notify ACK to master through fifth characteristic (verify direction) printing 'SOUTH' */
			uint8_t buff[6] = {0x53, 0x4F, 0x55, 0x54, 0x48, 0x00};
			aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
		}
		else if((Attr_Data[0] == 0x57)||(Attr_Data[0] == 0x77))
 8001078:	2b57      	cmp	r3, #87	; 0x57
 800107a:	d015      	beq.n	80010a8 <aci_gatt_attribute_modified_event+0x54>
			uint8_t buff[6] = {0x57, 0x45, 0x53, 0x54, 0x00, 0x00};
 			aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
		}
	}

} /* end aci_gatt_attribute_modified_event() */
 800107c:	b004      	add	sp, #16
 800107e:	bd10      	pop	{r4, pc}
			uint8_t buff[6] = {0x45, 0x41, 0x53, 0x54, 0x00, 0x00};
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <aci_gatt_attribute_modified_event+0x60>)
 			aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 8001082:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <aci_gatt_attribute_modified_event+0x64>)
 8001084:	4c0d      	ldr	r4, [pc, #52]	; (80010bc <aci_gatt_attribute_modified_event+0x68>)
			uint8_t buff[6] = {0x57, 0x45, 0x53, 0x54, 0x00, 0x00};
 8001086:	e893 0003 	ldmia.w	r3, {r0, r1}
 			aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 800108a:	ab02      	add	r3, sp, #8
			uint8_t buff[6] = {0x57, 0x45, 0x53, 0x54, 0x00, 0x00};
 800108c:	9002      	str	r0, [sp, #8]
 800108e:	f8ad 100c 	strh.w	r1, [sp, #12]
 			aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 8001092:	8811      	ldrh	r1, [r2, #0]
 8001094:	8820      	ldrh	r0, [r4, #0]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	2306      	movs	r3, #6
 800109c:	f004 fe80 	bl	8005da0 <aci_gatt_update_char_value>
} /* end aci_gatt_attribute_modified_event() */
 80010a0:	b004      	add	sp, #16
 80010a2:	bd10      	pop	{r4, pc}
			uint8_t buff[6] = {0x4E, 0x4F, 0x52, 0x54, 0x48, 0x00};
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <aci_gatt_attribute_modified_event+0x6c>)
 80010a6:	e7ec      	b.n	8001082 <aci_gatt_attribute_modified_event+0x2e>
			uint8_t buff[6] = {0x57, 0x45, 0x53, 0x54, 0x00, 0x00};
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <aci_gatt_attribute_modified_event+0x70>)
 80010aa:	e7ea      	b.n	8001082 <aci_gatt_attribute_modified_event+0x2e>
			uint8_t buff[6] = {0x53, 0x4F, 0x55, 0x54, 0x48, 0x00};
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <aci_gatt_attribute_modified_event+0x74>)
 80010ae:	e7e8      	b.n	8001082 <aci_gatt_attribute_modified_event+0x2e>
 80010b0:	2000019a 	.word	0x2000019a
 80010b4:	0800967c 	.word	0x0800967c
 80010b8:	20000198 	.word	0x20000198
 80010bc:	200001a8 	.word	0x200001a8
 80010c0:	08009724 	.word	0x08009724
 80010c4:	08009684 	.word	0x08009684
 80010c8:	0800972c 	.word	0x0800972c

080010cc <Task_BlinkLEDIndicator>:
 * @param
 * @retval
 * @note
 */
static void Task_BlinkLEDIndicator(void *argument)
{
 80010cc:	b510      	push	{r4, lr}
		/* Perform accurate blocking delay */
		LastActiveTime = xTaskGetTickCount();
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);

		/* Toggle LED every 1 second */
		HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 80010ce:	4c09      	ldr	r4, [pc, #36]	; (80010f4 <Task_BlinkLEDIndicator+0x28>)
{
 80010d0:	b082      	sub	sp, #8
		Task2_RSS = uxTaskGetStackHighWaterMark(NULL);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f006 fc3e 	bl	8007954 <uxTaskGetStackHighWaterMark>
		LastActiveTime = xTaskGetTickCount();
 80010d8:	f006 fa28 	bl	800752c <xTaskGetTickCount>
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 80010dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		LastActiveTime = xTaskGetTickCount();
 80010e0:	4603      	mov	r3, r0
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 80010e2:	a801      	add	r0, sp, #4
		LastActiveTime = xTaskGetTickCount();
 80010e4:	9301      	str	r3, [sp, #4]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 80010e6:	f006 f89b 	bl	8007220 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 80010ea:	2120      	movs	r1, #32
 80010ec:	4620      	mov	r0, r4
 80010ee:	f001 fd4d 	bl	8002b8c <HAL_GPIO_TogglePin>
	while(1)
 80010f2:	e7ee      	b.n	80010d2 <Task_BlinkLEDIndicator+0x6>
 80010f4:	40020000 	.word	0x40020000

080010f8 <Task_ParseBLEMessage>:
{
 80010f8:	b508      	push	{r3, lr}
		hci_user_evt_proc();
 80010fa:	f004 ffef 	bl	80060dc <hci_user_evt_proc>
		uint32_t NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80010fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001102:	2001      	movs	r0, #1
 8001104:	f006 fc96 	bl	8007a34 <ulTaskNotifyTake>
		Task1_RSS = uxTaskGetStackHighWaterMark(NULL);
 8001108:	2000      	movs	r0, #0
 800110a:	f006 fc23 	bl	8007954 <uxTaskGetStackHighWaterMark>
	while(1)
 800110e:	e7f4      	b.n	80010fa <Task_ParseBLEMessage+0x2>

08001110 <Task_ManageBLEConnections>:
{
 8001110:	b538      	push	{r3, r4, r5, lr}
	BlueNRG_Init();
 8001112:	f7ff fcc3 	bl	8000a9c <BlueNRG_Init>
	BlueNRG_MakeDeviceDiscoverable();
 8001116:	f7ff feeb 	bl	8000ef0 <BlueNRG_MakeDeviceDiscoverable>
 800111a:	4d0c      	ldr	r5, [pc, #48]	; (800114c <Task_ManageBLEConnections+0x3c>)
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	2001      	movs	r0, #1
 8001122:	f006 fc87 	bl	8007a34 <ulTaskNotifyTake>
 8001126:	4604      	mov	r4, r0
		Task0_RSS = uxTaskGetStackHighWaterMark(NULL);
 8001128:	2000      	movs	r0, #0
 800112a:	f006 fc13 	bl	8007954 <uxTaskGetStackHighWaterMark>
		if(NotificationValue & FRTOS_TASK_NOTIF_BLE_CONNECTED)
 800112e:	07a2      	lsls	r2, r4, #30
 8001130:	d503      	bpl.n	800113a <Task_ManageBLEConnections+0x2a>
			vTaskResume(h_TaskBLEMsg);
 8001132:	6828      	ldr	r0, [r5, #0]
 8001134:	f006 f8f2 	bl	800731c <vTaskResume>
 8001138:	e7f0      	b.n	800111c <Task_ManageBLEConnections+0xc>
		else if(NotificationValue & FRTOS_TASK_NOTIF_BLE_DISCONNECTED)
 800113a:	07e3      	lsls	r3, r4, #31
 800113c:	d5ee      	bpl.n	800111c <Task_ManageBLEConnections+0xc>
			vTaskSuspend(h_TaskBLEMsg);
 800113e:	6828      	ldr	r0, [r5, #0]
 8001140:	f006 fa58 	bl	80075f4 <vTaskSuspend>
			BlueNRG_MakeDeviceDiscoverable();
 8001144:	f7ff fed4 	bl	8000ef0 <BlueNRG_MakeDeviceDiscoverable>
 8001148:	e7e8      	b.n	800111c <Task_ManageBLEConnections+0xc>
 800114a:	bf00      	nop
 800114c:	200001ac 	.word	0x200001ac

08001150 <FRTOS_Init_Tasks>:
{
 8001150:	b500      	push	{lr}
 8001152:	b083      	sub	sp, #12
	TaskCreationStatus = xTaskCreate( Task_ManageBLEConnections,
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <FRTOS_Init_Tasks+0x78>)
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	232e      	movs	r3, #46	; 0x2e
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	491b      	ldr	r1, [pc, #108]	; (80011cc <FRTOS_Init_Tasks+0x7c>)
 800115e:	481c      	ldr	r0, [pc, #112]	; (80011d0 <FRTOS_Init_Tasks+0x80>)
 8001160:	2300      	movs	r3, #0
 8001162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001166:	f006 f827 	bl	80071b8 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 800116a:	2801      	cmp	r0, #1
 800116c:	d003      	beq.n	8001176 <FRTOS_Init_Tasks+0x26>
 800116e:	4819      	ldr	r0, [pc, #100]	; (80011d4 <FRTOS_Init_Tasks+0x84>)
 8001170:	216a      	movs	r1, #106	; 0x6a
 8001172:	f000 fabb 	bl	80016ec <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_ParseBLEMessage,
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <FRTOS_Init_Tasks+0x88>)
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	232d      	movs	r3, #45	; 0x2d
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	4917      	ldr	r1, [pc, #92]	; (80011dc <FRTOS_Init_Tasks+0x8c>)
 8001180:	4817      	ldr	r0, [pc, #92]	; (80011e0 <FRTOS_Init_Tasks+0x90>)
 8001182:	2300      	movs	r3, #0
 8001184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001188:	f006 f816 	bl	80071b8 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 800118c:	2801      	cmp	r0, #1
 800118e:	d003      	beq.n	8001198 <FRTOS_Init_Tasks+0x48>
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <FRTOS_Init_Tasks+0x84>)
 8001192:	2175      	movs	r1, #117	; 0x75
 8001194:	f000 faaa 	bl	80016ec <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_BlinkLEDIndicator,
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <FRTOS_Init_Tasks+0x94>)
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	231e      	movs	r3, #30
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4911      	ldr	r1, [pc, #68]	; (80011e8 <FRTOS_Init_Tasks+0x98>)
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <FRTOS_Init_Tasks+0x9c>)
 80011a4:	2300      	movs	r3, #0
 80011a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011aa:	f006 f805 	bl	80071b8 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 80011ae:	2801      	cmp	r0, #1
 80011b0:	d102      	bne.n	80011b8 <FRTOS_Init_Tasks+0x68>
}
 80011b2:	b003      	add	sp, #12
 80011b4:	f85d fb04 	ldr.w	pc, [sp], #4
	assert_param(TaskCreationStatus == pdPASS);
 80011b8:	4806      	ldr	r0, [pc, #24]	; (80011d4 <FRTOS_Init_Tasks+0x84>)
 80011ba:	217f      	movs	r1, #127	; 0x7f
}
 80011bc:	b003      	add	sp, #12
 80011be:	f85d eb04 	ldr.w	lr, [sp], #4
	assert_param(TaskCreationStatus == pdPASS);
 80011c2:	f000 ba93 	b.w	80016ec <assert_failed>
 80011c6:	bf00      	nop
 80011c8:	200099b0 	.word	0x200099b0
 80011cc:	08009734 	.word	0x08009734
 80011d0:	08001111 	.word	0x08001111
 80011d4:	0800974c 	.word	0x0800974c
 80011d8:	200001ac 	.word	0x200001ac
 80011dc:	0800976c 	.word	0x0800976c
 80011e0:	080010f9 	.word	0x080010f9
 80011e4:	200001b0 	.word	0x200001b0
 80011e8:	08009780 	.word	0x08009780
 80011ec:	080010cd 	.word	0x080010cd

080011f0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80011f0:	b530      	push	{r4, r5, lr}
 80011f2:	b083      	sub	sp, #12
 80011f4:	460d      	mov	r5, r1
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80011f6:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 80011fa:	4613      	mov	r3, r2
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80011fc:	4601      	mov	r1, r0
 80011fe:	462a      	mov	r2, r5
 8001200:	9400      	str	r4, [sp, #0]
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <BSP_SPI1_SendRecv+0x28>)
 8001204:	f003 f9de 	bl	80045c4 <HAL_SPI_TransmitReceive>
 8001208:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 800120a:	bf14      	ite	ne
 800120c:	f06f 0005 	mvnne.w	r0, #5
 8001210:	2000      	moveq	r0, #0
 8001212:	b003      	add	sp, #12
 8001214:	bd30      	pop	{r4, r5, pc}
 8001216:	bf00      	nop
 8001218:	200099b4 	.word	0x200099b4

0800121c <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 800121c:	f000 bce8 	b.w	8001bf0 <HAL_GetTick>

08001220 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <MX_SPI1_Init+0x38>)
{
 8001222:	b538      	push	{r3, r4, r5, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001224:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi->Instance = SPI1;
 8001228:	6002      	str	r2, [r0, #0]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800122a:	2201      	movs	r2, #1
  hspi->Init.NSS = SPI_NSS_SOFT;
 800122c:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001230:	2430      	movs	r4, #48	; 0x30
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001232:	6041      	str	r1, [r0, #4]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001234:	6142      	str	r2, [r0, #20]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 10;
 8001236:	210a      	movs	r1, #10
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001238:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800123a:	e9c0 5406 	strd	r5, r4, [r0, #24]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800123e:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001242:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi->Init.CRCPolynomial = 10;
 8001246:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001248:	6102      	str	r2, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124a:	6282      	str	r2, [r0, #40]	; 0x28
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800124c:	f003 f8b6 	bl	80043bc <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8001250:	3800      	subs	r0, #0
 8001252:	bf18      	it	ne
 8001254:	2001      	movne	r0, #1
 8001256:	bd38      	pop	{r3, r4, r5, pc}
 8001258:	40013000 	.word	0x40013000

0800125c <BSP_SPI1_Init>:
{
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(SPI1InitCounter++ == 0)
 800125e:	4a2f      	ldr	r2, [pc, #188]	; (800131c <BSP_SPI1_Init+0xc0>)
  hspi1.Instance  = SPI1;
 8001260:	4c2f      	ldr	r4, [pc, #188]	; (8001320 <BSP_SPI1_Init+0xc4>)
  if(SPI1InitCounter++ == 0)
 8001262:	6813      	ldr	r3, [r2, #0]
  hspi1.Instance  = SPI1;
 8001264:	492f      	ldr	r1, [pc, #188]	; (8001324 <BSP_SPI1_Init+0xc8>)
 8001266:	6021      	str	r1, [r4, #0]
  if(SPI1InitCounter++ == 0)
 8001268:	1c59      	adds	r1, r3, #1
{
 800126a:	b08b      	sub	sp, #44	; 0x2c
  if(SPI1InitCounter++ == 0)
 800126c:	6011      	str	r1, [r2, #0]
 800126e:	b113      	cbz	r3, 8001276 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8001270:	2000      	movs	r0, #0
}
 8001272:	b00b      	add	sp, #44	; 0x2c
 8001274:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001276:	4620      	mov	r0, r4
 8001278:	f003 fb3c 	bl	80048f4 <HAL_SPI_GetState>
 800127c:	4603      	mov	r3, r0
 800127e:	2800      	cmp	r0, #0
 8001280:	d1f6      	bne.n	8001270 <BSP_SPI1_Init+0x14>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001282:	4a29      	ldr	r2, [pc, #164]	; (8001328 <BSP_SPI1_Init+0xcc>)
 8001284:	9001      	str	r0, [sp, #4]
 8001286:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001288:	4828      	ldr	r0, [pc, #160]	; (800132c <BSP_SPI1_Init+0xd0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800128a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800128e:	6451      	str	r1, [r2, #68]	; 0x44
 8001290:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001292:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8001296:	9101      	str	r1, [sp, #4]
 8001298:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800129e:	f041 0101 	orr.w	r1, r1, #1
 80012a2:	6311      	str	r1, [r2, #48]	; 0x30
 80012a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80012a6:	f001 0101 	and.w	r1, r1, #1
 80012aa:	9102      	str	r1, [sp, #8]
 80012ac:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	9303      	str	r3, [sp, #12]
 80012b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	2302      	movs	r3, #2
 80012c4:	2600      	movs	r6, #0
 80012c6:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80012c8:	2505      	movs	r5, #5
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80012ca:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80012cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	f8dd c00c 	ldr.w	ip, [sp, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80012d4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80012d6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80012da:	f001 fa25 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80012e2:	4812      	ldr	r0, [pc, #72]	; (800132c <BSP_SPI1_Init+0xd0>)
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80012e4:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80012e6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80012e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012ec:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80012f0:	f001 fa1a 	bl	8002728 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80012f4:	480e      	ldr	r0, [pc, #56]	; (8001330 <BSP_SPI1_Init+0xd4>)
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80012f6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80012f8:	2208      	movs	r2, #8
 80012fa:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80012fc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80012fe:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8001302:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001306:	f001 fa0f 	bl	8002728 <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800130a:	4620      	mov	r0, r4
 800130c:	f7ff ff88 	bl	8001220 <MX_SPI1_Init>
 8001310:	2800      	cmp	r0, #0
 8001312:	d0ad      	beq.n	8001270 <BSP_SPI1_Init+0x14>
				ret = BSP_ERROR_BUS_FAILURE;
 8001314:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8001318:	e7ab      	b.n	8001272 <BSP_SPI1_Init+0x16>
 800131a:	bf00      	nop
 800131c:	200001b4 	.word	0x200001b4
 8001320:	200099b4 	.word	0x200099b4
 8001324:	40013000 	.word	0x40013000
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400

08001334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001334:	b500      	push	{lr}
 8001336:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_DMA_Init+0x30>)
 800133a:	2200      	movs	r2, #0
 800133c:	9201      	str	r2, [sp, #4]
 800133e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001340:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001344:	6319      	str	r1, [r3, #48]	; 0x30
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134c:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800134e:	2105      	movs	r1, #5
 8001350:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001352:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001354:	f000 fec8 	bl	80020e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001358:	2038      	movs	r0, #56	; 0x38

}
 800135a:	b003      	add	sp, #12
 800135c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001360:	f000 bf0c 	b.w	800217c <HAL_NVIC_EnableIRQ>
 8001364:	40023800 	.word	0x40023800

08001368 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 800136c:	2000      	movs	r0, #0
 800136e:	4770      	bx	lr

08001370 <vApplicationIdleHook>:
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */


	hci_user_evt_proc();
 8001370:	f004 beb4 	b.w	80060dc <hci_user_evt_proc>

08001374 <vApplicationMallocFailedHook>:
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop

08001378 <MX_FREERTOS_Init>:

  /* USER CODE BEGIN RTOS_EVENTS */

  /* USER CODE END RTOS_EVENTS */

}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop

0800137c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	2400      	movs	r4, #0
{
 8001380:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001386:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <MX_GPIO_Init+0x14c>)
 800138c:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 8001392:	4d4e      	ldr	r5, [pc, #312]	; (80014cc <MX_GPIO_Init+0x150>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 8001394:	4e4e      	ldr	r6, [pc, #312]	; (80014d0 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	f042 0204 	orr.w	r2, r2, #4
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
 800139c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139e:	f002 0204 	and.w	r2, r2, #4
 80013a2:	9201      	str	r2, [sp, #4]
 80013a4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	9402      	str	r4, [sp, #8]
 80013a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ae:	631a      	str	r2, [r3, #48]	; 0x30
 80013b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013b2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013b6:	9202      	str	r2, [sp, #8]
 80013b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	9403      	str	r4, [sp, #12]
 80013bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013be:	f042 0201 	orr.w	r2, r2, #1
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
 80013c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c6:	f002 0201 	and.w	r2, r2, #1
 80013ca:	9203      	str	r2, [sp, #12]
 80013cc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	9404      	str	r4, [sp, #16]
 80013d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d2:	f042 0202 	orr.w	r2, r2, #2
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
 80013d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013da:	f002 0202 	and.w	r2, r2, #2
 80013de:	9204      	str	r2, [sp, #16]
 80013e0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e2:	9405      	str	r4, [sp, #20]
 80013e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e6:	f042 0208 	orr.w	r2, r2, #8
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 80013f4:	4622      	mov	r2, r4
 80013f6:	4628      	mov	r0, r5
 80013f8:	f44f 7191 	mov.w	r1, #290	; 0x122
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fc:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 80013fe:	f001 fbab 	bl	8002b58 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 8001406:	a906      	add	r1, sp, #24
 8001408:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
 800140a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 8001412:	f001 f989 	bl	8002728 <HAL_GPIO_Init>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001416:	4630      	mov	r0, r6
 8001418:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800141a:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 800141e:	2303      	movs	r3, #3
 8001420:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001426:	f001 f97f 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800142a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800142c:	2203      	movs	r2, #3
 800142e:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001430:	4829      	ldr	r0, [pc, #164]	; (80014d8 <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001434:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001438:	f001 f976 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_Pin;
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001440:	a906      	add	r1, sp, #24
 8001442:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_Pin;
 8001444:	2201      	movs	r2, #1
 8001446:	e9cd 2306 	strd	r2, r3, [sp, #24]

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 800144a:	f44f 7691 	mov.w	r6, #290	; 0x122
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_GPIO_Port, &GPIO_InitStruct);
 800144e:	f001 f96b 	bl	8002728 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 8001452:	2701      	movs	r7, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	a906      	add	r1, sp, #24
 8001456:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 8001458:	2200      	movs	r2, #0
 800145a:	2300      	movs	r3, #0
 800145c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001460:	e9cd 6706 	strd	r6, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f001 f960 	bl	8002728 <HAL_GPIO_Init>
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	4628      	mov	r0, r5
 800146a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10
 800146c:	f649 6218 	movw	r2, #40472	; 0x9e18
 8001470:	2303      	movs	r3, #3
 8001472:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f001 f956 	bl	8002728 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800147e:	f24f 42f7 	movw	r2, #62711	; 0xf4f7
 8001482:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	4815      	ldr	r0, [pc, #84]	; (80014dc <MX_GPIO_Init+0x160>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001488:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f001 f94c 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001490:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001492:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001494:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <MX_GPIO_Init+0x164>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	f001 f943 	bl	8002728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 1);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2105      	movs	r1, #5
 80014a6:	2006      	movs	r0, #6
 80014a8:	f000 fe1e 	bl	80020e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014ac:	2006      	movs	r0, #6
 80014ae:	f000 fe65 	bl	800217c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 2);
 80014b2:	2202      	movs	r2, #2
 80014b4:	2106      	movs	r1, #6
 80014b6:	2028      	movs	r0, #40	; 0x28
 80014b8:	f000 fe16 	bl	80020e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014bc:	2028      	movs	r0, #40	; 0x28
 80014be:	f000 fe5d 	bl	800217c <HAL_NVIC_EnableIRQ>

}
 80014c2:	b00d      	add	sp, #52	; 0x34
 80014c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020800 	.word	0x40020800
 80014d4:	10110000 	.word	0x10110000
 80014d8:	40021c00 	.word	0x40021c00
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020c00 	.word	0x40020c00

080014e4 <MX_I2C1_Init>:
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 80014e6:	490c      	ldr	r1, [pc, #48]	; (8001518 <MX_I2C1_Init+0x34>)
{
 80014e8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_I2C1_Init+0x38>)
 80014ec:	6003      	str	r3, [r0, #0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f2:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
 80014f4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 80014f8:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fc:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.ClockSpeed = 100000;
 8001500:	6041      	str	r1, [r0, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001502:	6102      	str	r2, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001504:	f001 fb66 	bl	8002bd4 <HAL_I2C_Init>
 8001508:	b900      	cbnz	r0, 800150c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150a:	bd08      	pop	{r3, pc}
 800150c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001510:	f000 b8ea 	b.w	80016e8 <Error_Handler>
 8001514:	20009a0c 	.word	0x20009a0c
 8001518:	000186a0 	.word	0x000186a0
 800151c:	40005400 	.word	0x40005400

08001520 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001520:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8001522:	6802      	ldr	r2, [r0, #0]
 8001524:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <HAL_I2C_MspInit+0x78>)
{
 8001526:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 800152a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001530:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001534:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 8001536:	d001      	beq.n	800153c <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001538:	b008      	add	sp, #32
 800153a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4d17      	ldr	r5, [pc, #92]	; (800159c <HAL_I2C_MspInit+0x7c>)
 800153e:	9400      	str	r4, [sp, #0]
 8001540:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	4817      	ldr	r0, [pc, #92]	; (80015a0 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	632b      	str	r3, [r5, #48]	; 0x30
 800154a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001552:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001556:	2312      	movs	r3, #18
 8001558:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800155c:	2201      	movs	r2, #1
 800155e:	2303      	movs	r3, #3
 8001560:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001564:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001566:	2304      	movs	r3, #4
 8001568:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f001 f8dc 	bl	8002728 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001570:	9401      	str	r4, [sp, #4]
 8001572:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001578:	642b      	str	r3, [r5, #64]	; 0x40
 800157a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800157c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001580:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 1);
 8001582:	2201      	movs	r2, #1
 8001584:	2106      	movs	r1, #6
 8001586:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001588:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 1);
 800158a:	f000 fdad 	bl	80020e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800158e:	201f      	movs	r0, #31
 8001590:	f000 fdf4 	bl	800217c <HAL_NVIC_EnableIRQ>
}
 8001594:	b008      	add	sp, #32
 8001596:	bd70      	pop	{r4, r5, r6, pc}
 8001598:	40005400 	.word	0x40005400
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020400 	.word	0x40020400

080015a4 <_write>:
/* Private user code ---------------------------------------------------------*/

int _write(int file, char *ptr, int len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	for(uint16_t i=0 ; i<len ; i++)
 80015a4:	1e10      	subs	r0, r2, #0
 80015a6:	dd1c      	ble.n	80015e2 <_write+0x3e>
{
 80015a8:	b430      	push	{r4, r5}
	for(uint16_t i=0 ; i<len ; i++)
 80015aa:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015ac:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80015b0:	f8d4 5e80 	ldr.w	r5, [r4, #3712]	; 0xe80
 80015b4:	07ed      	lsls	r5, r5, #31
		ITM_SendChar((*ptr++));
 80015b6:	f101 0101 	add.w	r1, r1, #1
 80015ba:	d50c      	bpl.n	80015d6 <_write+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80015bc:	f8d4 2e00 	ldr.w	r2, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015c0:	07d2      	lsls	r2, r2, #31
 80015c2:	d508      	bpl.n	80015d6 <_write+0x32>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80015c4:	6825      	ldr	r5, [r4, #0]
 80015c6:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80015ca:	b91d      	cbnz	r5, 80015d4 <_write+0x30>
    {
      __NOP();
 80015cc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80015ce:	6825      	ldr	r5, [r4, #0]
 80015d0:	2d00      	cmp	r5, #0
 80015d2:	d0fb      	beq.n	80015cc <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80015d4:	7022      	strb	r2, [r4, #0]
	for(uint16_t i=0 ; i<len ; i++)
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4283      	cmp	r3, r0
 80015dc:	dbe8      	blt.n	80015b0 <_write+0xc>

	return len;
}
 80015de:	bc30      	pop	{r4, r5}
 80015e0:	4770      	bx	lr
 80015e2:	4770      	bx	lr

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	2300      	movs	r3, #0
{
 80015e8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 80015ee:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80015f6:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4922      	ldr	r1, [pc, #136]	; (8001684 <SystemClock_Config+0xa0>)
 80015fc:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	4a20      	ldr	r2, [pc, #128]	; (8001688 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800160a:	6408      	str	r0, [r1, #64]	; 0x40
 800160c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800160e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001612:	9100      	str	r1, [sp, #0]
 8001614:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	6813      	ldr	r3, [r2, #0]
 800161a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001626:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001628:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162a:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162c:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2202      	movs	r2, #2
 8001632:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001634:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001636:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163a:	e9cd 410b 	strd	r4, r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800163e:	25c8      	movs	r5, #200	; 0xc8
 8001640:	2410      	movs	r4, #16
 8001642:	2202      	movs	r2, #2
 8001644:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 200;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001648:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 800164c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001650:	f002 fa68 	bl	8003b24 <HAL_RCC_OscConfig>
 8001654:	b108      	cbz	r0, 800165a <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001656:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800165a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165c:	240f      	movs	r4, #15
 800165e:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001660:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001668:	a802      	add	r0, sp, #8
 800166a:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001670:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001674:	f002 fd0c 	bl	8004090 <HAL_RCC_ClockConfig>
 8001678:	b108      	cbz	r0, 800167e <SystemClock_Config+0x9a>
 800167a:	b672      	cpsid	i
  while (1)
 800167c:	e7fe      	b.n	800167c <SystemClock_Config+0x98>
}
 800167e:	b015      	add	sp, #84	; 0x54
 8001680:	bd30      	pop	{r4, r5, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <main>:
{
 800168c:	b508      	push	{r3, lr}
  HAL_Init();
 800168e:	f000 fa89 	bl	8001ba4 <HAL_Init>
  SystemClock_Config();
 8001692:	f7ff ffa7 	bl	80015e4 <SystemClock_Config>
  MX_GPIO_Init();
 8001696:	f7ff fe71 	bl	800137c <MX_GPIO_Init>
  MX_DMA_Init();
 800169a:	f7ff fe4b 	bl	8001334 <MX_DMA_Init>
  MX_ADC1_Init();
 800169e:	f7ff f8cd 	bl	800083c <MX_ADC1_Init>
  MX_I2C1_Init();
 80016a2:	f7ff ff1f 	bl	80014e4 <MX_I2C1_Init>
  MX_TIM5_Init();
 80016a6:	f000 f9ad 	bl	8001a04 <MX_TIM5_Init>
  MX_TIM9_Init();
 80016aa:	f000 f9e5 	bl	8001a78 <MX_TIM9_Init>
  printf("STM32F411RE Nucleo-64 Board\n");
 80016ae:	480b      	ldr	r0, [pc, #44]	; (80016dc <main+0x50>)
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 80016b0:	4c0b      	ldr	r4, [pc, #44]	; (80016e0 <main+0x54>)
  printf("STM32F411RE Nucleo-64 Board\n");
 80016b2:	f007 f85d 	bl	8008770 <puts>
  printf("FreeRTOS-BLE-Car\n\n");
 80016b6:	480b      	ldr	r0, [pc, #44]	; (80016e4 <main+0x58>)
 80016b8:	f007 f85a 	bl	8008770 <puts>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80016bc:	f004 fde6 	bl	800628c <osKernelInitialize>
  MX_FREERTOS_Init();
 80016c0:	f7ff fe5a 	bl	8001378 <MX_FREERTOS_Init>
  FRTOS_Init_Tasks();
 80016c4:	f7ff fd44 	bl	8001150 <FRTOS_Init_Tasks>
  osKernelStart();
 80016c8:	f004 fdf2 	bl	80062b0 <osKernelStart>
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 80016cc:	4620      	mov	r0, r4
 80016ce:	2120      	movs	r1, #32
 80016d0:	f001 fa5c 	bl	8002b8c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80016d4:	2064      	movs	r0, #100	; 0x64
 80016d6:	f000 fa91 	bl	8001bfc <HAL_Delay>
  while (1)
 80016da:	e7f7      	b.n	80016cc <main+0x40>
 80016dc:	08009790 	.word	0x08009790
 80016e0:	40020000 	.word	0x40020000
 80016e4:	080097ac 	.word	0x080097ac

080016e8 <Error_Handler>:
 80016e8:	b672      	cpsid	i
  while (1)
 80016ea:	e7fe      	b.n	80016ea <Error_Handler+0x2>

080016ec <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80016ec:	460a      	mov	r2, r1
 80016ee:	b508      	push	{r3, lr}
	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 80016f0:	4601      	mov	r1, r0
 80016f2:	4802      	ldr	r0, [pc, #8]	; (80016fc <assert_failed+0x10>)
 80016f4:	f006 ffb6 	bl	8008664 <iprintf>
	for(;;);
 80016f8:	e7fe      	b.n	80016f8 <assert_failed+0xc>
 80016fa:	bf00      	nop
 80016fc:	080097c0 	.word	0x080097c0

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_MspInit+0x3c>)
 8001704:	2200      	movs	r2, #0
 8001706:	9200      	str	r2, [sp, #0]
 8001708:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800170a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800170e:	6459      	str	r1, [r3, #68]	; 0x44
 8001710:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001712:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001716:	9100      	str	r1, [sp, #0]
 8001718:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	9201      	str	r2, [sp, #4]
 800171c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800171e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001722:	6419      	str	r1, [r3, #64]	; 0x40
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800172e:	210f      	movs	r1, #15
 8001730:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001734:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001736:	f000 bcd7 	b.w	80020e8 <HAL_NVIC_SetPriority>
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b530      	push	{r4, r5, lr}
 8001742:	4601      	mov	r1, r0
 8001744:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001746:	2200      	movs	r2, #0
 8001748:	201c      	movs	r0, #28
 800174a:	f000 fccd 	bl	80020e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174e:	201c      	movs	r0, #28
 8001750:	f000 fd14 	bl	800217c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001754:	2500      	movs	r5, #0
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_InitTick+0x70>)
 8001758:	9502      	str	r5, [sp, #8]
 800175a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800175c:	4c15      	ldr	r4, [pc, #84]	; (80017b4 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 800176c:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001770:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001772:	f002 fd9f 	bl	80042b4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001776:	f002 fd8d 	bl	8004294 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 800177c:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800177e:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	0c9b      	lsrs	r3, r3, #18
 8001786:	3b01      	subs	r3, #1
  htim2.Instance = TIM2;
 8001788:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800178c:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001790:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim2.Instance = TIM2;
 8001796:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001798:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800179a:	f003 f8af 	bl	80048fc <HAL_TIM_Base_Init>
 800179e:	b110      	cbz	r0, 80017a6 <HAL_InitTick+0x66>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
 80017a0:	2001      	movs	r0, #1
}
 80017a2:	b009      	add	sp, #36	; 0x24
 80017a4:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 80017a6:	4620      	mov	r0, r4
 80017a8:	f003 f97e 	bl	8004aa8 <HAL_TIM_Base_Start_IT>
}
 80017ac:	b009      	add	sp, #36	; 0x24
 80017ae:	bd30      	pop	{r4, r5, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	20009a60 	.word	0x20009a60
 80017b8:	431bde83 	.word	0x431bde83

080017bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler>
 80017be:	bf00      	nop

080017c0 <HardFault_Handler>:
 * It extracts the location of stack frame and passes it to the handler written
 * in C as a pointer. We also extract the LR value as second parameter.
 */
void HardFault_Handler(void)
{
	asm(
 80017c0:	f01e 0f04 	tst.w	lr, #4
 80017c4:	bf0c      	ite	eq
 80017c6:	f3ef 8008 	mrseq	r0, MSP
 80017ca:	f3ef 8009 	mrsne	r0, PSP
 80017ce:	4671      	mov	r1, lr
 80017d0:	f000 b802 	b.w	80017d8 <HardFault_Handler_C>
		"MRSEQ  R0, MSP\n\t"
		"MRSNE  R0, PSP\n\t"
		"MOV    R1, LR\n\t"
		"B      (HardFault_Handler_C)\n\t"
	);
}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop

080017d8 <HardFault_Handler_C>:
/**
 * HardFault handler in C, with stack frame location and LR value extracted
 * from the assembly wrapper as input parameters
 */
void HardFault_Handler_C(unsigned long * hardfault_args, unsigned int lr_value)
{
 80017d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned long stacked_psr;
	unsigned long cfsr;
	unsigned long bus_fault_address;
	unsigned long memmanage_fault_address;

	bus_fault_address       = SCB->BFAR;
 80017dc:	4c35      	ldr	r4, [pc, #212]	; (80018b4 <HardFault_Handler_C+0xdc>)
{
 80017de:	ed2d 8b02 	vpush	{d8}
	bus_fault_address       = SCB->BFAR;
 80017e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
{
 80017e4:	4605      	mov	r5, r0
 80017e6:	b085      	sub	sp, #20
	bus_fault_address       = SCB->BFAR;
 80017e8:	ee08 3a10 	vmov	s16, r3
	memmanage_fault_address = SCB->MMFAR;
	cfsr                    = SCB->CFSR;

	stacked_r0  = ((unsigned long) hardfault_args[0]);
	stacked_r1  = ((unsigned long) hardfault_args[1]);
 80017ec:	686b      	ldr	r3, [r5, #4]
	stacked_r0  = ((unsigned long) hardfault_args[0]);
 80017ee:	682a      	ldr	r2, [r5, #0]
	stacked_r1  = ((unsigned long) hardfault_args[1]);
 80017f0:	9302      	str	r3, [sp, #8]
	stacked_r2  = ((unsigned long) hardfault_args[2]);
	stacked_r3  = ((unsigned long) hardfault_args[3]);
	stacked_r12 = ((unsigned long) hardfault_args[4]);
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 80017f2:	e9d5 9304 	ldrd	r9, r3, [r5, #16]
	stacked_r0  = ((unsigned long) hardfault_args[0]);
 80017f6:	9203      	str	r2, [sp, #12]
	memmanage_fault_address = SCB->MMFAR;
 80017f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
	stacked_pc  = ((unsigned long) hardfault_args[6]);
	stacked_psr = ((unsigned long) hardfault_args[7]);

	printf ("[HardFault]\n");
 80017fa:	482f      	ldr	r0, [pc, #188]	; (80018b8 <HardFault_Handler_C+0xe0>)
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 80017fc:	9301      	str	r3, [sp, #4]
	stacked_r3  = ((unsigned long) hardfault_args[3]);
 80017fe:	e9d5 ba02 	ldrd	fp, sl, [r5, #8]
	stacked_psr = ((unsigned long) hardfault_args[7]);
 8001802:	e9d5 7606 	ldrd	r7, r6, [r5, #24]
	memmanage_fault_address = SCB->MMFAR;
 8001806:	ee08 2a90 	vmov	s17, r2
	cfsr                    = SCB->CFSR;
 800180a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
{
 800180c:	4688      	mov	r8, r1
	printf ("[HardFault]\n");
 800180e:	f006 ffaf 	bl	8008770 <puts>
	printf ("- Stack frame:\n");
 8001812:	482a      	ldr	r0, [pc, #168]	; (80018bc <HardFault_Handler_C+0xe4>)
 8001814:	f006 ffac 	bl	8008770 <puts>
	printf (" R0  = %lx\n", stacked_r0);
 8001818:	9a03      	ldr	r2, [sp, #12]
 800181a:	4829      	ldr	r0, [pc, #164]	; (80018c0 <HardFault_Handler_C+0xe8>)
 800181c:	4611      	mov	r1, r2
 800181e:	f006 ff21 	bl	8008664 <iprintf>
	printf (" R1  = %lx\n", stacked_r1);
 8001822:	9b02      	ldr	r3, [sp, #8]
 8001824:	4827      	ldr	r0, [pc, #156]	; (80018c4 <HardFault_Handler_C+0xec>)
 8001826:	4619      	mov	r1, r3
 8001828:	f006 ff1c 	bl	8008664 <iprintf>
	printf (" R2  = %lx\n", stacked_r2);
 800182c:	4659      	mov	r1, fp
 800182e:	4826      	ldr	r0, [pc, #152]	; (80018c8 <HardFault_Handler_C+0xf0>)
 8001830:	f006 ff18 	bl	8008664 <iprintf>
	printf (" R3  = %lx\n", stacked_r3);
 8001834:	4651      	mov	r1, sl
 8001836:	4825      	ldr	r0, [pc, #148]	; (80018cc <HardFault_Handler_C+0xf4>)
 8001838:	f006 ff14 	bl	8008664 <iprintf>
	printf (" R12 = %lx\n", stacked_r12);
 800183c:	4649      	mov	r1, r9
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <HardFault_Handler_C+0xf8>)
 8001840:	f006 ff10 	bl	8008664 <iprintf>
	printf (" LR  = %lx\n", stacked_lr);
 8001844:	9901      	ldr	r1, [sp, #4]
 8001846:	4823      	ldr	r0, [pc, #140]	; (80018d4 <HardFault_Handler_C+0xfc>)
 8001848:	f006 ff0c 	bl	8008664 <iprintf>
	printf (" PC  = %lx\n", stacked_pc);
 800184c:	4639      	mov	r1, r7
 800184e:	4822      	ldr	r0, [pc, #136]	; (80018d8 <HardFault_Handler_C+0x100>)
 8001850:	f006 ff08 	bl	8008664 <iprintf>
	printf (" PSR = %lx\n", stacked_psr);
 8001854:	4631      	mov	r1, r6
 8001856:	4821      	ldr	r0, [pc, #132]	; (80018dc <HardFault_Handler_C+0x104>)
 8001858:	f006 ff04 	bl	8008664 <iprintf>
	printf ("- FSR/FAR:\n");
 800185c:	4820      	ldr	r0, [pc, #128]	; (80018e0 <HardFault_Handler_C+0x108>)
 800185e:	f006 ff87 	bl	8008770 <puts>
	printf (" CFSR = %lx\n", cfsr);
 8001862:	4629      	mov	r1, r5
 8001864:	481f      	ldr	r0, [pc, #124]	; (80018e4 <HardFault_Handler_C+0x10c>)
 8001866:	f006 fefd 	bl	8008664 <iprintf>
	printf (" HFSR = 0x%08X\n", (unsigned int)(SCB->HFSR));
 800186a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800186c:	481e      	ldr	r0, [pc, #120]	; (80018e8 <HardFault_Handler_C+0x110>)
 800186e:	f006 fef9 	bl	8008664 <iprintf>
	printf (" DFSR = 0x%08X\n", (unsigned int)(SCB->DFSR));
 8001872:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001874:	481d      	ldr	r0, [pc, #116]	; (80018ec <HardFault_Handler_C+0x114>)
 8001876:	f006 fef5 	bl	8008664 <iprintf>
	printf (" AFSR = 0x%08X\n", (unsigned int)(SCB->AFSR));
 800187a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800187c:	481c      	ldr	r0, [pc, #112]	; (80018f0 <HardFault_Handler_C+0x118>)
 800187e:	f006 fef1 	bl	8008664 <iprintf>
	if (cfsr & 0x0080) printf (" MMFAR = %lx\n", memmanage_fault_address);
 8001882:	062a      	lsls	r2, r5, #24
 8001884:	d409      	bmi.n	800189a <HardFault_Handler_C+0xc2>
	if (cfsr & 0x8000) printf (" BFAR = %lx\n", bus_fault_address);
 8001886:	042b      	lsls	r3, r5, #16
 8001888:	d40d      	bmi.n	80018a6 <HardFault_Handler_C+0xce>
	printf ("- Misc\n");
 800188a:	481a      	ldr	r0, [pc, #104]	; (80018f4 <HardFault_Handler_C+0x11c>)
 800188c:	f006 ff70 	bl	8008770 <puts>
	printf (" LR/EXC_RETURN= %x\n", lr_value);
 8001890:	4819      	ldr	r0, [pc, #100]	; (80018f8 <HardFault_Handler_C+0x120>)
 8001892:	4641      	mov	r1, r8
 8001894:	f006 fee6 	bl	8008664 <iprintf>

	while(1); // endless loop
 8001898:	e7fe      	b.n	8001898 <HardFault_Handler_C+0xc0>
	if (cfsr & 0x0080) printf (" MMFAR = %lx\n", memmanage_fault_address);
 800189a:	ee18 1a90 	vmov	r1, s17
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <HardFault_Handler_C+0x124>)
 80018a0:	f006 fee0 	bl	8008664 <iprintf>
 80018a4:	e7ef      	b.n	8001886 <HardFault_Handler_C+0xae>
	if (cfsr & 0x8000) printf (" BFAR = %lx\n", bus_fault_address);
 80018a6:	ee18 1a10 	vmov	r1, s16
 80018aa:	4815      	ldr	r0, [pc, #84]	; (8001900 <HardFault_Handler_C+0x128>)
 80018ac:	f006 feda 	bl	8008664 <iprintf>
 80018b0:	e7eb      	b.n	800188a <HardFault_Handler_C+0xb2>
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00
 80018b8:	080097f0 	.word	0x080097f0
 80018bc:	080097fc 	.word	0x080097fc
 80018c0:	0800980c 	.word	0x0800980c
 80018c4:	08009818 	.word	0x08009818
 80018c8:	08009824 	.word	0x08009824
 80018cc:	08009830 	.word	0x08009830
 80018d0:	0800983c 	.word	0x0800983c
 80018d4:	08009848 	.word	0x08009848
 80018d8:	08009854 	.word	0x08009854
 80018dc:	08009860 	.word	0x08009860
 80018e0:	0800986c 	.word	0x0800986c
 80018e4:	08009878 	.word	0x08009878
 80018e8:	08009888 	.word	0x08009888
 80018ec:	08009898 	.word	0x08009898
 80018f0:	080098a8 	.word	0x080098a8
 80018f4:	080098d8 	.word	0x080098d8
 80018f8:	080098e0 	.word	0x080098e0
 80018fc:	080098b8 	.word	0x080098b8
 8001900:	080098c8 	.word	0x080098c8

08001904 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <MemManage_Handler>
 8001906:	bf00      	nop

08001908 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <BusFault_Handler>
 800190a:	bf00      	nop

0800190c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler>
 800190e:	bf00      	nop

08001910 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <EXTI0_IRQHandler>:
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001914:	4801      	ldr	r0, [pc, #4]	; (800191c <EXTI0_IRQHandler+0x8>)
 8001916:	f000 bef1 	b.w	80026fc <HAL_EXTI_IRQHandler>
 800191a:	bf00      	nop
 800191c:	2000988c 	.word	0x2000988c

08001920 <TIM1_BRK_TIM9_IRQHandler>:
/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim9);
 8001920:	4801      	ldr	r0, [pc, #4]	; (8001928 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 8001922:	f003 bb57 	b.w	8004fd4 <HAL_TIM_IRQHandler>
 8001926:	bf00      	nop
 8001928:	20009af0 	.word	0x20009af0

0800192c <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim2);
 800192c:	4801      	ldr	r0, [pc, #4]	; (8001934 <TIM2_IRQHandler+0x8>)
 800192e:	f003 bb51 	b.w	8004fd4 <HAL_TIM_IRQHandler>
 8001932:	bf00      	nop
 8001934:	20009a60 	.word	0x20009a60

08001938 <I2C1_EV_IRQHandler>:
/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001938:	4801      	ldr	r0, [pc, #4]	; (8001940 <I2C1_EV_IRQHandler+0x8>)
 800193a:	f001 bc33 	b.w	80031a4 <HAL_I2C_EV_IRQHandler>
 800193e:	bf00      	nop
 8001940:	20009a0c 	.word	0x20009a0c

08001944 <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001944:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001948:	f001 b938 	b.w	8002bbc <HAL_GPIO_EXTI_IRQHandler>

0800194c <TIM5_IRQHandler>:
/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim5);
 800194c:	4801      	ldr	r0, [pc, #4]	; (8001954 <TIM5_IRQHandler+0x8>)
 800194e:	f003 bb41 	b.w	8004fd4 <HAL_TIM_IRQHandler>
 8001952:	bf00      	nop
 8001954:	20009aa8 	.word	0x20009aa8

08001958 <DMA2_Stream0_IRQHandler>:
/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001958:	4801      	ldr	r0, [pc, #4]	; (8001960 <DMA2_Stream0_IRQHandler+0x8>)
 800195a:	f000 bdb3 	b.w	80024c4 <HAL_DMA_IRQHandler>
 800195e:	bf00      	nop
 8001960:	200098dc 	.word	0x200098dc

08001964 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)
 8001964:	6803      	ldr	r3, [r0, #0]
 8001966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196a:	d000      	beq.n	800196e <HAL_TIM_PeriodElapsedCallback+0xa>
	}
	else if(htim->Instance == TIM9)
	{

	}
}
 800196c:	4770      	bx	lr
		HAL_IncTick();
 800196e:	f000 b933 	b.w	8001bd8 <HAL_IncTick>
 8001972:	bf00      	nop

08001974 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001974:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	1e16      	subs	r6, r2, #0
 8001978:	dd07      	ble.n	800198a <_read+0x16>
 800197a:	460c      	mov	r4, r1
 800197c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800197e:	f3af 8000 	nop.w
 8001982:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	42a5      	cmp	r5, r4
 8001988:	d1f9      	bne.n	800197e <_read+0xa>
	}

return len;
}
 800198a:	4630      	mov	r0, r6
 800198c:	bd70      	pop	{r4, r5, r6, pc}
 800198e:	bf00      	nop

08001990 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800199e:	2000      	movs	r0, #0
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop

080019a4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80019a4:	2001      	movs	r0, #1
 80019a6:	4770      	bx	lr

080019a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80019a8:	2000      	movs	r0, #0
 80019aa:	4770      	bx	lr

080019ac <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ae:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80019b0:	680b      	ldr	r3, [r1, #0]
{
 80019b2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4c0c      	ldr	r4, [pc, #48]	; (80019e8 <_sbrk+0x3c>)
 80019b6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80019b8:	b12b      	cbz	r3, 80019c6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4418      	add	r0, r3
 80019bc:	4290      	cmp	r0, r2
 80019be:	d807      	bhi.n	80019d0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80019c0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <_sbrk+0x40>)
 80019c8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80019ca:	4418      	add	r0, r3
 80019cc:	4290      	cmp	r0, r2
 80019ce:	d9f7      	bls.n	80019c0 <_sbrk+0x14>
    errno = ENOMEM;
 80019d0:	f006 fe08 	bl	80085e4 <__errno>
 80019d4:	230c      	movs	r3, #12
 80019d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd10      	pop	{r4, pc}
 80019e0:	200001b8 	.word	0x200001b8
 80019e4:	20020000 	.word	0x20020000
 80019e8:	00000f00 	.word	0x00000f00
 80019ec:	20009bc0 	.word	0x20009bc0

080019f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <SystemInit+0x10>)
 80019f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80019f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a04:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a06:	481a      	ldr	r0, [pc, #104]	; (8001a70 <MX_TIM5_Init+0x6c>)
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_TIM5_Init+0x70>)
 8001a0a:	6003      	str	r3, [r0, #0]
{
 8001a0c:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0e:	2300      	movs	r3, #0
  htim5.Init.Prescaler = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 4294967295;
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a14:	e9cd 3303 	strd	r3, r3, [sp, #12]
  htim5.Init.Period = 4294967295;
 8001a18:	60c2      	str	r2, [r0, #12]
  htim5.Init.Prescaler = 0;
 8001a1a:	6043      	str	r3, [r0, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1c:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1e:	9300      	str	r3, [sp, #0]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	6083      	str	r3, [r0, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a26:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a2a:	f002 ff67 	bl	80048fc <HAL_TIM_Base_Init>
 8001a2e:	b998      	cbnz	r0, 8001a58 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a34:	480e      	ldr	r0, [pc, #56]	; (8001a70 <MX_TIM5_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a36:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a38:	a902      	add	r1, sp, #8
 8001a3a:	f003 f891 	bl	8004b60 <HAL_TIM_ConfigClockSource>
 8001a3e:	b998      	cbnz	r0, 8001a68 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2200      	movs	r2, #0
 8001a42:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a44:	480a      	ldr	r0, [pc, #40]	; (8001a70 <MX_TIM5_Init+0x6c>)
 8001a46:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a48:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a4c:	f003 fb6c 	bl	8005128 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	b928      	cbnz	r0, 8001a5e <MX_TIM5_Init+0x5a>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a52:	b007      	add	sp, #28
 8001a54:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001a58:	f7ff fe46 	bl	80016e8 <Error_Handler>
 8001a5c:	e7e8      	b.n	8001a30 <MX_TIM5_Init+0x2c>
    Error_Handler();
 8001a5e:	f7ff fe43 	bl	80016e8 <Error_Handler>
}
 8001a62:	b007      	add	sp, #28
 8001a64:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001a68:	f7ff fe3e 	bl	80016e8 <Error_Handler>
 8001a6c:	e7e8      	b.n	8001a40 <MX_TIM5_Init+0x3c>
 8001a6e:	bf00      	nop
 8001a70:	20009aa8 	.word	0x20009aa8
 8001a74:	40000c00 	.word	0x40000c00

08001a78 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001a78:	b500      	push	{lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a7a:	4813      	ldr	r0, [pc, #76]	; (8001ac8 <MX_TIM9_Init+0x50>)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_TIM9_Init+0x54>)
 8001a7e:	6003      	str	r3, [r0, #0]
{
 8001a80:	b085      	sub	sp, #20
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	2300      	movs	r3, #0
  htim9.Init.Prescaler = 0;
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim9.Init.Period = 65535;
 8001a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a88:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim9.Init.Period = 65535;
 8001a8c:	60c2      	str	r2, [r0, #12]
  htim9.Init.Prescaler = 0;
 8001a8e:	6043      	str	r3, [r0, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a90:	9300      	str	r3, [sp, #0]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	6083      	str	r3, [r0, #8]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a94:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a98:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001a9a:	f002 ff2f 	bl	80048fc <HAL_TIM_Base_Init>
 8001a9e:	b950      	cbnz	r0, 8001ab6 <MX_TIM9_Init+0x3e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001aa4:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <MX_TIM9_Init+0x50>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa6:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001aa8:	4669      	mov	r1, sp
 8001aaa:	f003 f859 	bl	8004b60 <HAL_TIM_ConfigClockSource>
 8001aae:	b928      	cbnz	r0, 8001abc <MX_TIM9_Init+0x44>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001ab0:	b005      	add	sp, #20
 8001ab2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001ab6:	f7ff fe17 	bl	80016e8 <Error_Handler>
 8001aba:	e7f1      	b.n	8001aa0 <MX_TIM9_Init+0x28>
    Error_Handler();
 8001abc:	f7ff fe14 	bl	80016e8 <Error_Handler>
}
 8001ac0:	b005      	add	sp, #20
 8001ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ac6:	bf00      	nop
 8001ac8:	20009af0 	.word	0x20009af0
 8001acc:	40014000 	.word	0x40014000

08001ad0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ad0:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM5)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_TIM_Base_MspInit+0x74>)
 8001ad4:	6803      	ldr	r3, [r0, #0]
 8001ad6:	4293      	cmp	r3, r2
{
 8001ad8:	b083      	sub	sp, #12
  if(tim_baseHandle->Instance==TIM5)
 8001ada:	d005      	beq.n	8001ae8 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM9)
 8001adc:	4a1a      	ldr	r2, [pc, #104]	; (8001b48 <HAL_TIM_Base_MspInit+0x78>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_TIM_Base_MspInit+0x46>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001ae2:	b003      	add	sp, #12
 8001ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_TIM_Base_MspInit+0x7c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	9200      	str	r2, [sp, #0]
 8001aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af0:	f042 0208 	orr.w	r2, r2, #8
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM5_IRQn, 7, 1);
 8001afe:	2201      	movs	r2, #1
 8001b00:	2107      	movs	r1, #7
 8001b02:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b04:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM5_IRQn, 7, 1);
 8001b06:	f000 faef 	bl	80020e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b0a:	2032      	movs	r0, #50	; 0x32
}
 8001b0c:	b003      	add	sp, #12
 8001b0e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b12:	f000 bb33 	b.w	800217c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_TIM_Base_MspInit+0x7c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	9201      	str	r2, [sp, #4]
 8001b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b22:	645a      	str	r2, [r3, #68]	; 0x44
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 2);
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	2107      	movs	r1, #7
 8001b30:	2018      	movs	r0, #24
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b32:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 2);
 8001b34:	f000 fad8 	bl	80020e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b38:	2018      	movs	r0, #24
}
 8001b3a:	b003      	add	sp, #12
 8001b3c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b40:	f000 bb1c 	b.w	800217c <HAL_NVIC_EnableIRQ>
 8001b44:	40000c00 	.word	0x40000c00
 8001b48:	40014000 	.word	0x40014000
 8001b4c:	40023800 	.word	0x40023800

08001b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8001b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b56:	490e      	ldr	r1, [pc, #56]	; (8001b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b58:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b6c:	4c0b      	ldr	r4, [pc, #44]	; (8001b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b7a:	f7ff ff39 	bl	80019f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f006 fd37 	bl	80085f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b82:	f7ff fd83 	bl	800168c <main>
  bx  lr    
 8001b86:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8001b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b94:	08009df4 	.word	0x08009df4
  ldr r2, =_sbss
 8001b98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b9c:	20009bbc 	.word	0x20009bbc

08001ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_Init+0x30>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bae:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bb6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bbe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 fa73 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f7ff fdba 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fd98 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	bd08      	pop	{r3, pc}
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001bd8:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <HAL_IncTick+0x10>)
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <HAL_IncTick+0x14>)
 8001bdc:	6811      	ldr	r1, [r2, #0]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	440b      	add	r3, r1
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20009b38 	.word	0x20009b38
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001bf0:	4b01      	ldr	r3, [pc, #4]	; (8001bf8 <HAL_GetTick+0x8>)
 8001bf2:	6818      	ldr	r0, [r3, #0]
}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20009b38 	.word	0x20009b38

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff fff6 	bl	8001bf0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c04:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001c06:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001c08:	d002      	beq.n	8001c10 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_Delay+0x20>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c10:	f7ff ffee 	bl	8001bf0 <HAL_GetTick>
 8001c14:	1b43      	subs	r3, r0, r5
 8001c16:	42a3      	cmp	r3, r4
 8001c18:	d3fa      	bcc.n	8001c10 <HAL_Delay+0x14>
  {
  }
}
 8001c1a:	bd38      	pop	{r3, r4, r5, pc}
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c20:	2800      	cmp	r0, #0
 8001c22:	f000 8140 	beq.w	8001ea6 <HAL_ADC_Init+0x286>
{
 8001c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001c28:	6802      	ldr	r2, [r0, #0]
 8001c2a:	4ba7      	ldr	r3, [pc, #668]	; (8001ec8 <HAL_ADC_Init+0x2a8>)
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	4604      	mov	r4, r0
 8001c30:	d004      	beq.n	8001c3c <HAL_ADC_Init+0x1c>
 8001c32:	48a6      	ldr	r0, [pc, #664]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001c34:	f240 1143 	movw	r1, #323	; 0x143
 8001c38:	f7ff fd58 	bl	80016ec <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001c3c:	6863      	ldr	r3, [r4, #4]
 8001c3e:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8001c42:	d004      	beq.n	8001c4e <HAL_ADC_Init+0x2e>
 8001c44:	48a1      	ldr	r0, [pc, #644]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001c46:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001c4a:	f7ff fd4f 	bl	80016ec <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001c4e:	68a3      	ldr	r3, [r4, #8]
 8001c50:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8001c54:	d004      	beq.n	8001c60 <HAL_ADC_Init+0x40>
 8001c56:	489d      	ldr	r0, [pc, #628]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001c58:	f240 1145 	movw	r1, #325	; 0x145
 8001c5c:	f7ff fd46 	bl	80016ec <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8001c60:	6923      	ldr	r3, [r4, #16]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d879      	bhi.n	8001d5a <HAL_ADC_Init+0x13a>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001c66:	7e23      	ldrb	r3, [r4, #24]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d86a      	bhi.n	8001d42 <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8001c6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c6e:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 8001c72:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8001c76:	d014      	beq.n	8001ca2 <HAL_ADC_Init+0x82>
 8001c78:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8001c7c:	d011      	beq.n	8001ca2 <HAL_ADC_Init+0x82>
 8001c7e:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8001c82:	d00e      	beq.n	8001ca2 <HAL_ADC_Init+0x82>
 8001c84:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
 8001c88:	d00b      	beq.n	8001ca2 <HAL_ADC_Init+0x82>
 8001c8a:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001c8e:	d008      	beq.n	8001ca2 <HAL_ADC_Init+0x82>
 8001c90:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d904      	bls.n	8001ca2 <HAL_ADC_Init+0x82>
 8001c98:	488c      	ldr	r0, [pc, #560]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001c9a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001c9e:	f7ff fd25 	bl	80016ec <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001ca2:	68e3      	ldr	r3, [r4, #12]
 8001ca4:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8001ca8:	d122      	bne.n	8001cf0 <HAL_ADC_Init+0xd0>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8001caa:	69e3      	ldr	r3, [r4, #28]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	d827      	bhi.n	8001d02 <HAL_ADC_Init+0xe2>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001cb2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d82c      	bhi.n	8001d14 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001cba:	6963      	ldr	r3, [r4, #20]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d831      	bhi.n	8001d24 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001cc0:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d836      	bhi.n	8001d36 <HAL_ADC_Init+0x116>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cc8:	4b81      	ldr	r3, [pc, #516]	; (8001ed0 <HAL_ADC_Init+0x2b0>)
 8001cca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d004      	beq.n	8001cda <HAL_ADC_Init+0xba>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001cd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cd2:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8001cd6:	f040 80d7 	bne.w	8001e88 <HAL_ADC_Init+0x268>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cda:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8001cdc:	2d00      	cmp	r5, #0
 8001cde:	d045      	beq.n	8001d6c <HAL_ADC_Init+0x14c>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ce2:	06db      	lsls	r3, r3, #27
 8001ce4:	d54b      	bpl.n	8001d7e <HAL_ADC_Init+0x15e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8001cec:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8001cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001cf0:	4876      	ldr	r0, [pc, #472]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001cf2:	f240 1149 	movw	r1, #329	; 0x149
 8001cf6:	f7ff fcf9 	bl	80016ec <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8001cfa:	69e3      	ldr	r3, [r4, #28]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	d9d7      	bls.n	8001cb2 <HAL_ADC_Init+0x92>
 8001d02:	4872      	ldr	r0, [pc, #456]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001d04:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001d08:	f7ff fcf0 	bl	80016ec <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001d0c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d9d2      	bls.n	8001cba <HAL_ADC_Init+0x9a>
 8001d14:	486d      	ldr	r0, [pc, #436]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001d16:	f240 114b 	movw	r1, #331	; 0x14b
 8001d1a:	f7ff fce7 	bl	80016ec <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001d1e:	6963      	ldr	r3, [r4, #20]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d9cd      	bls.n	8001cc0 <HAL_ADC_Init+0xa0>
 8001d24:	4869      	ldr	r0, [pc, #420]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001d26:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8001d2a:	f7ff fcdf 	bl	80016ec <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001d2e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d9c8      	bls.n	8001cc8 <HAL_ADC_Init+0xa8>
 8001d36:	4865      	ldr	r0, [pc, #404]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001d38:	f240 114d 	movw	r1, #333	; 0x14d
 8001d3c:	f7ff fcd6 	bl	80016ec <assert_failed>
 8001d40:	e7c2      	b.n	8001cc8 <HAL_ADC_Init+0xa8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001d42:	f240 1147 	movw	r1, #327	; 0x147
 8001d46:	4861      	ldr	r0, [pc, #388]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001d48:	f7ff fcd0 	bl	80016ec <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8001d4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d4e:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 8001d52:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8001d56:	d0a4      	beq.n	8001ca2 <HAL_ADC_Init+0x82>
 8001d58:	e78e      	b.n	8001c78 <HAL_ADC_Init+0x58>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8001d5a:	485c      	ldr	r0, [pc, #368]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001d5c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001d60:	f7ff fcc4 	bl	80016ec <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001d64:	7e23      	ldrb	r3, [r4, #24]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d980      	bls.n	8001c6c <HAL_ADC_Init+0x4c>
 8001d6a:	e7ea      	b.n	8001d42 <HAL_ADC_Init+0x122>
    HAL_ADC_MspInit(hadc);
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7fe fd9d 	bl	80008ac <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001d72:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d74:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001d76:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d7a:	06db      	lsls	r3, r3, #27
 8001d7c:	d4b3      	bmi.n	8001ce6 <HAL_ADC_Init+0xc6>
    ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d80:	4954      	ldr	r1, [pc, #336]	; (8001ed4 <HAL_ADC_Init+0x2b4>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d82:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d84:	4d52      	ldr	r5, [pc, #328]	; (8001ed0 <HAL_ADC_Init+0x2b0>)
    ADC_STATE_CLR_SET(hadc->State,
 8001d86:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001d8a:	f022 0202 	bic.w	r2, r2, #2
 8001d8e:	f042 0202 	orr.w	r2, r2, #2
 8001d92:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d94:	684a      	ldr	r2, [r1, #4]
 8001d96:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001d9a:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d9c:	684a      	ldr	r2, [r1, #4]
 8001d9e:	6860      	ldr	r0, [r4, #4]
 8001da0:	4302      	orrs	r2, r0
 8001da2:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001da4:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001da6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001da8:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001daa:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dac:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8001db0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001db8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dba:	6858      	ldr	r0, [r3, #4]
 8001dbc:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8001dc0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dc2:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dc6:	4339      	orrs	r1, r7
 8001dc8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dca:	6899      	ldr	r1, [r3, #8]
 8001dcc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8001dd0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dd2:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd4:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dd6:	ea42 0206 	orr.w	r2, r2, r6
 8001dda:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ddc:	d05a      	beq.n	8001e94 <HAL_ADC_Init+0x274>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dde:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001de0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de2:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001de6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	4310      	orrs	r0, r2
 8001dec:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dee:	6899      	ldr	r1, [r3, #8]
 8001df0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001df4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	432a      	orrs	r2, r5
 8001dfa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	f022 0202 	bic.w	r2, r2, #2
 8001e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	7e21      	ldrb	r1, [r4, #24]
 8001e08:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001e0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e0e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	d049      	beq.n	8001eaa <HAL_ADC_Init+0x28a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001e16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e18:	3a01      	subs	r2, #1
 8001e1a:	2a07      	cmp	r2, #7
 8001e1c:	d84a      	bhi.n	8001eb4 <HAL_ADC_Init+0x294>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001e24:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8001e2c:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8001e34:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e38:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e3a:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e3c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e44:	3801      	subs	r0, #1
 8001e46:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8001e4a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e4c:	6899      	ldr	r1, [r3, #8]
 8001e4e:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8001e52:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e54:	6899      	ldr	r1, [r3, #8]
 8001e56:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001e5a:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8001e5e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e60:	6899      	ldr	r1, [r3, #8]
 8001e62:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001e66:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e68:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e6c:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8001e70:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001e72:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001e74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e76:	f023 0303 	bic.w	r3, r3, #3
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001e80:	2300      	movs	r3, #0
 8001e82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001e88:	4810      	ldr	r0, [pc, #64]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001e8a:	f240 1151 	movw	r1, #337	; 0x151
 8001e8e:	f7ff fc2d 	bl	80016ec <assert_failed>
 8001e92:	e722      	b.n	8001cda <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	e7aa      	b.n	8001dfc <HAL_ADC_Init+0x1dc>
    return HAL_ERROR;
 8001ea6:	2001      	movs	r0, #1
}
 8001ea8:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	e7c0      	b.n	8001e36 <HAL_ADC_Init+0x216>
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001eb4:	4805      	ldr	r0, [pc, #20]	; (8001ecc <HAL_ADC_Init+0x2ac>)
 8001eb6:	f240 71a6 	movw	r1, #1958	; 0x7a6
 8001eba:	f7ff fc17 	bl	80016ec <assert_failed>
 8001ebe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	3a01      	subs	r2, #1
 8001ec4:	e7ab      	b.n	8001e1e <HAL_ADC_Init+0x1fe>
 8001ec6:	bf00      	nop
 8001ec8:	40012000 	.word	0x40012000
 8001ecc:	0800990c 	.word	0x0800990c
 8001ed0:	0f000001 	.word	0x0f000001
 8001ed4:	40012300 	.word	0x40012300

08001ed8 <HAL_ADC_ConfigChannel>:
{
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001eda:	680b      	ldr	r3, [r1, #0]
{
 8001edc:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8001ede:	2200      	movs	r2, #0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001ee0:	2b12      	cmp	r3, #18
{
 8001ee2:	460e      	mov	r6, r1
 8001ee4:	4604      	mov	r4, r0
  __IO uint32_t counter = 0U;
 8001ee6:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001ee8:	d903      	bls.n	8001ef2 <HAL_ADC_ConfigChannel+0x1a>
 8001eea:	4a6a      	ldr	r2, [pc, #424]	; (8002094 <HAL_ADC_ConfigChannel+0x1bc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	f040 8087 	bne.w	8002000 <HAL_ADC_ConfigChannel+0x128>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001ef2:	6873      	ldr	r3, [r6, #4]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	f200 808c 	bhi.w	8002014 <HAL_ADC_ConfigChannel+0x13c>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001efc:	68b3      	ldr	r3, [r6, #8]
 8001efe:	2b07      	cmp	r3, #7
 8001f00:	f200 8091 	bhi.w	8002026 <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8001f04:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	f000 8096 	beq.w	800203a <HAL_ADC_ConfigChannel+0x162>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f14:	6835      	ldr	r5, [r6, #0]
 8001f16:	2d09      	cmp	r5, #9
 8001f18:	d827      	bhi.n	8001f6a <HAL_ADC_ConfigChannel+0x92>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f1a:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f1c:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f1e:	6902      	ldr	r2, [r0, #16]
 8001f20:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8001f24:	2107      	movs	r1, #7
 8001f26:	40b9      	lsls	r1, r7
 8001f28:	ea22 0201 	bic.w	r2, r2, r1
 8001f2c:	6102      	str	r2, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f2e:	6902      	ldr	r2, [r0, #16]
 8001f30:	40bb      	lsls	r3, r7
 8001f32:	4313      	orrs	r3, r2
 8001f34:	6103      	str	r3, [r0, #16]
  if (sConfig->Rank < 7U)
 8001f36:	6873      	ldr	r3, [r6, #4]
 8001f38:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f3a:	462f      	mov	r7, r5
  if (sConfig->Rank < 7U)
 8001f3c:	d82a      	bhi.n	8001f94 <HAL_ADC_ConfigChannel+0xbc>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f42:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001f44:	3b05      	subs	r3, #5
 8001f46:	211f      	movs	r1, #31
 8001f48:	4099      	lsls	r1, r3
 8001f4a:	ea22 0201 	bic.w	r2, r2, r1
 8001f4e:	6342      	str	r2, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f50:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001f52:	fa07 f303 	lsl.w	r3, r7, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	6343      	str	r3, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f5a:	4b4f      	ldr	r3, [pc, #316]	; (8002098 <HAL_ADC_ConfigChannel+0x1c0>)
 8001f5c:	4298      	cmp	r0, r3
 8001f5e:	d02d      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0xe4>
  __HAL_UNLOCK(hadc);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001f66:	b003      	add	sp, #12
 8001f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f6a:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f6c:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f6e:	68c1      	ldr	r1, [r0, #12]
 8001f70:	b2af      	uxth	r7, r5
 8001f72:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8001f76:	3a1e      	subs	r2, #30
 8001f78:	f04f 0c07 	mov.w	ip, #7
 8001f7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001f80:	ea21 010c 	bic.w	r1, r1, ip
 8001f84:	60c1      	str	r1, [r0, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f86:	68c1      	ldr	r1, [r0, #12]
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7U)
 8001f8e:	6873      	ldr	r3, [r6, #4]
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d9d4      	bls.n	8001f3e <HAL_ADC_ConfigChannel+0x66>
  else if (sConfig->Rank < 13U)
 8001f94:	2b0c      	cmp	r3, #12
 8001f96:	d853      	bhi.n	8002040 <HAL_ADC_ConfigChannel+0x168>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f9c:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001fa4:	408a      	lsls	r2, r1
 8001fa6:	ea23 0302 	bic.w	r3, r3, r2
 8001faa:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001fae:	fa07 f101 	lsl.w	r1, r7, r1
 8001fb2:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fb4:	4b38      	ldr	r3, [pc, #224]	; (8002098 <HAL_ADC_ConfigChannel+0x1c0>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fb6:	6301      	str	r1, [r0, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fb8:	4298      	cmp	r0, r3
 8001fba:	d1d1      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x88>
 8001fbc:	2d12      	cmp	r5, #18
 8001fbe:	d04e      	beq.n	800205e <HAL_ADC_ConfigChannel+0x186>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fc0:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_ADC_ConfigChannel+0x1bc>)
 8001fc2:	429d      	cmp	r5, r3
 8001fc4:	d158      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1a0>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fc6:	4a35      	ldr	r2, [pc, #212]	; (800209c <HAL_ADC_ConfigChannel+0x1c4>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_ADC_ConfigChannel+0x1c8>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fca:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fcc:	4835      	ldr	r0, [pc, #212]	; (80020a4 <HAL_ADC_ConfigChannel+0x1cc>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fce:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8001fd2:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fd4:	6851      	ldr	r1, [r2, #4]
 8001fd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001fda:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fba0 2303 	umull	r2, r3, r0, r3
 8001fe2:	0c9b      	lsrs	r3, r3, #18
 8001fe4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001fec:	9b01      	ldr	r3, [sp, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0b6      	beq.n	8001f60 <HAL_ADC_ConfigChannel+0x88>
        counter--;
 8001ff2:	9b01      	ldr	r3, [sp, #4]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001ff8:	9b01      	ldr	r3, [sp, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f9      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x11a>
 8001ffe:	e7af      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x88>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002000:	4829      	ldr	r0, [pc, #164]	; (80020a8 <HAL_ADC_ConfigChannel+0x1d0>)
 8002002:	f240 6189 	movw	r1, #1673	; 0x689
 8002006:	f7ff fb71 	bl	80016ec <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800200a:	6873      	ldr	r3, [r6, #4]
 800200c:	3b01      	subs	r3, #1
 800200e:	2b0f      	cmp	r3, #15
 8002010:	f67f af74 	bls.w	8001efc <HAL_ADC_ConfigChannel+0x24>
 8002014:	4824      	ldr	r0, [pc, #144]	; (80020a8 <HAL_ADC_ConfigChannel+0x1d0>)
 8002016:	f240 618a 	movw	r1, #1674	; 0x68a
 800201a:	f7ff fb67 	bl	80016ec <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800201e:	68b3      	ldr	r3, [r6, #8]
 8002020:	2b07      	cmp	r3, #7
 8002022:	f67f af6f 	bls.w	8001f04 <HAL_ADC_ConfigChannel+0x2c>
 8002026:	4820      	ldr	r0, [pc, #128]	; (80020a8 <HAL_ADC_ConfigChannel+0x1d0>)
 8002028:	f240 618b 	movw	r1, #1675	; 0x68b
 800202c:	f7ff fb5e 	bl	80016ec <assert_failed>
  __HAL_LOCK(hadc);
 8002030:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002034:	2b01      	cmp	r3, #1
 8002036:	f47f af6a 	bne.w	8001f0e <HAL_ADC_ConfigChannel+0x36>
 800203a:	2002      	movs	r0, #2
}
 800203c:	b003      	add	sp, #12
 800203e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002040:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002044:	3a41      	subs	r2, #65	; 0x41
 8002046:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002048:	211f      	movs	r1, #31
 800204a:	4091      	lsls	r1, r2
 800204c:	ea23 0301 	bic.w	r3, r3, r1
 8002050:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002052:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002054:	fa07 f102 	lsl.w	r1, r7, r2
 8002058:	4319      	orrs	r1, r3
 800205a:	62c1      	str	r1, [r0, #44]	; 0x2c
 800205c:	e77d      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x82>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800205e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8002062:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002066:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800206a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 800206e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002072:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002076:	e773      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x88>
 8002078:	2d11      	cmp	r5, #17
 800207a:	f47f af71 	bne.w	8001f60 <HAL_ADC_ConfigChannel+0x88>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <HAL_ADC_ConfigChannel+0x1c4>)
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002086:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800208e:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002090:	e766      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x88>
 8002092:	bf00      	nop
 8002094:	10000012 	.word	0x10000012
 8002098:	40012000 	.word	0x40012000
 800209c:	40012300 	.word	0x40012300
 80020a0:	20000000 	.word	0x20000000
 80020a4:	431bde83 	.word	0x431bde83
 80020a8:	0800990c 	.word	0x0800990c

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80020ac:	1ec3      	subs	r3, r0, #3
 80020ae:	2b04      	cmp	r3, #4
{
 80020b0:	b510      	push	{r4, lr}
 80020b2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80020b4:	d80e      	bhi.n	80020d4 <HAL_NVIC_SetPriorityGrouping+0x28>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b6:	490a      	ldr	r1, [pc, #40]	; (80020e0 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80020b8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ba:	0223      	lsls	r3, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020bc:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c4:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c6:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80020d0:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80020d2:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80020d6:	2192      	movs	r1, #146	; 0x92
 80020d8:	f7ff fb08 	bl	80016ec <assert_failed>
 80020dc:	e7eb      	b.n	80020b6 <HAL_NVIC_SetPriorityGrouping+0xa>
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00
 80020e4:	08009944 	.word	0x08009944

080020e8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80020e8:	2a0f      	cmp	r2, #15
{ 
 80020ea:	b570      	push	{r4, r5, r6, lr}
 80020ec:	4616      	mov	r6, r2
 80020ee:	4605      	mov	r5, r0
 80020f0:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80020f2:	d837      	bhi.n	8002164 <HAL_NVIC_SetPriority+0x7c>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80020f4:	2c0f      	cmp	r4, #15
 80020f6:	d830      	bhi.n	800215a <HAL_NVIC_SetPriority+0x72>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_NVIC_SetPriority+0x88>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	f1c3 0007 	rsb	r0, r3, #7
 8002104:	2804      	cmp	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210a:	bf28      	it	cs
 800210c:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	2a06      	cmp	r2, #6
 8002110:	d918      	bls.n	8002144 <HAL_NVIC_SetPriority+0x5c>
 8002112:	3b03      	subs	r3, #3
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	409a      	lsls	r2, r3
 800211a:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211e:	f04f 31ff 	mov.w	r1, #4294967295
 8002122:	4081      	lsls	r1, r0
 8002124:	ea24 0401 	bic.w	r4, r4, r1
 8002128:	409c      	lsls	r4, r3
  if ((int32_t)(IRQn) >= 0)
 800212a:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8002130:	db0b      	blt.n	800214a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8002136:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 800213a:	0124      	lsls	r4, r4, #4
 800213c:	b2e4      	uxtb	r4, r4
 800213e:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002142:	bd70      	pop	{r4, r5, r6, pc}
 8002144:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002146:	4633      	mov	r3, r6
 8002148:	e7e9      	b.n	800211e <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_NVIC_SetPriority+0x8c>)
 800214c:	f005 050f 	and.w	r5, r5, #15
 8002150:	0124      	lsls	r4, r4, #4
 8002152:	442b      	add	r3, r5
 8002154:	b2e4      	uxtb	r4, r4
 8002156:	761c      	strb	r4, [r3, #24]
 8002158:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800215a:	4807      	ldr	r0, [pc, #28]	; (8002178 <HAL_NVIC_SetPriority+0x90>)
 800215c:	21ab      	movs	r1, #171	; 0xab
 800215e:	f7ff fac5 	bl	80016ec <assert_failed>
 8002162:	e7c9      	b.n	80020f8 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002164:	4804      	ldr	r0, [pc, #16]	; (8002178 <HAL_NVIC_SetPriority+0x90>)
 8002166:	21aa      	movs	r1, #170	; 0xaa
 8002168:	f7ff fac0 	bl	80016ec <assert_failed>
 800216c:	e7c2      	b.n	80020f4 <HAL_NVIC_SetPriority+0xc>
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00
 8002174:	e000ecfc 	.word	0xe000ecfc
 8002178:	08009944 	.word	0x08009944

0800217c <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800217c:	2800      	cmp	r0, #0
 800217e:	db08      	blt.n	8002192 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002180:	f000 011f 	and.w	r1, r0, #31
 8002184:	4a05      	ldr	r2, [pc, #20]	; (800219c <HAL_NVIC_EnableIRQ+0x20>)
 8002186:	0940      	lsrs	r0, r0, #5
 8002188:	2301      	movs	r3, #1
 800218a:	408b      	lsls	r3, r1
 800218c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002190:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002192:	4803      	ldr	r0, [pc, #12]	; (80021a0 <HAL_NVIC_EnableIRQ+0x24>)
 8002194:	21be      	movs	r1, #190	; 0xbe
 8002196:	f7ff baa9 	b.w	80016ec <assert_failed>
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	08009944 	.word	0x08009944

080021a4 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80021a4:	2800      	cmp	r0, #0
 80021a6:	db0e      	blt.n	80021c6 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a8:	0943      	lsrs	r3, r0, #5
 80021aa:	4909      	ldr	r1, [pc, #36]	; (80021d0 <HAL_NVIC_DisableIRQ+0x2c>)
 80021ac:	3320      	adds	r3, #32
 80021ae:	2201      	movs	r2, #1
 80021b0:	f000 001f 	and.w	r0, r0, #31
 80021b4:	fa02 f000 	lsl.w	r0, r2, r0
 80021b8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021c0:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80021c4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80021c6:	4803      	ldr	r0, [pc, #12]	; (80021d4 <HAL_NVIC_DisableIRQ+0x30>)
 80021c8:	21ce      	movs	r1, #206	; 0xce
 80021ca:	f7ff ba8f 	b.w	80016ec <assert_failed>
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100
 80021d4:	08009944 	.word	0x08009944

080021d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff fd08 	bl	8001bf0 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021e0:	2c00      	cmp	r4, #0
 80021e2:	f000 8114 	beq.w	800240e <HAL_DMA_Init+0x236>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	4aa8      	ldr	r2, [pc, #672]	; (800248c <HAL_DMA_Init+0x2b4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	4605      	mov	r5, r0
 80021ee:	d031      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 80021f0:	3218      	adds	r2, #24
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d02e      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 80021f6:	3218      	adds	r2, #24
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d02b      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 80021fc:	3218      	adds	r2, #24
 80021fe:	4293      	cmp	r3, r2
 8002200:	d028      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 8002202:	3218      	adds	r2, #24
 8002204:	4293      	cmp	r3, r2
 8002206:	d025      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 8002208:	3218      	adds	r2, #24
 800220a:	4293      	cmp	r3, r2
 800220c:	d022      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 800220e:	3218      	adds	r2, #24
 8002210:	4293      	cmp	r3, r2
 8002212:	d01f      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 8002214:	3218      	adds	r2, #24
 8002216:	4293      	cmp	r3, r2
 8002218:	d01c      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 800221a:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800221e:	4293      	cmp	r3, r2
 8002220:	d018      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 8002222:	3218      	adds	r2, #24
 8002224:	4293      	cmp	r3, r2
 8002226:	d015      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 8002228:	3218      	adds	r2, #24
 800222a:	4293      	cmp	r3, r2
 800222c:	d012      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 800222e:	3218      	adds	r2, #24
 8002230:	4293      	cmp	r3, r2
 8002232:	d00f      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 8002234:	3218      	adds	r2, #24
 8002236:	4293      	cmp	r3, r2
 8002238:	d00c      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 800223a:	3218      	adds	r2, #24
 800223c:	4293      	cmp	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 8002240:	3218      	adds	r2, #24
 8002242:	4293      	cmp	r3, r2
 8002244:	d006      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 8002246:	3218      	adds	r2, #24
 8002248:	4293      	cmp	r3, r2
 800224a:	d003      	beq.n	8002254 <HAL_DMA_Init+0x7c>
 800224c:	4890      	ldr	r0, [pc, #576]	; (8002490 <HAL_DMA_Init+0x2b8>)
 800224e:	21b8      	movs	r1, #184	; 0xb8
 8002250:	f7ff fa4c 	bl	80016ec <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002254:	6863      	ldr	r3, [r4, #4]
 8002256:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 800225a:	d006      	beq.n	800226a <HAL_DMA_Init+0x92>
 800225c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002260:	d003      	beq.n	800226a <HAL_DMA_Init+0x92>
 8002262:	488b      	ldr	r0, [pc, #556]	; (8002490 <HAL_DMA_Init+0x2b8>)
 8002264:	21b9      	movs	r1, #185	; 0xb9
 8002266:	f7ff fa41 	bl	80016ec <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800226a:	68a3      	ldr	r3, [r4, #8]
 800226c:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8002270:	f040 8098 	bne.w	80023a4 <HAL_DMA_Init+0x1cc>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002274:	68e3      	ldr	r3, [r4, #12]
 8002276:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800227a:	f040 809f 	bne.w	80023bc <HAL_DMA_Init+0x1e4>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800227e:	6923      	ldr	r3, [r4, #16]
 8002280:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8002284:	f040 80a3 	bne.w	80023ce <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002288:	6963      	ldr	r3, [r4, #20]
 800228a:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800228e:	d003      	beq.n	8002298 <HAL_DMA_Init+0xc0>
 8002290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002294:	f040 80a7 	bne.w	80023e6 <HAL_DMA_Init+0x20e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002298:	69a3      	ldr	r3, [r4, #24]
 800229a:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800229e:	d003      	beq.n	80022a8 <HAL_DMA_Init+0xd0>
 80022a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022a4:	f040 80a9 	bne.w	80023fa <HAL_DMA_Init+0x222>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80022a8:	69e3      	ldr	r3, [r4, #28]
 80022aa:	f033 0220 	bics.w	r2, r3, #32
 80022ae:	d006      	beq.n	80022be <HAL_DMA_Init+0xe6>
 80022b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b4:	d003      	beq.n	80022be <HAL_DMA_Init+0xe6>
 80022b6:	4876      	ldr	r0, [pc, #472]	; (8002490 <HAL_DMA_Init+0x2b8>)
 80022b8:	21bf      	movs	r1, #191	; 0xbf
 80022ba:	f7ff fa17 	bl	80016ec <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80022be:	6a23      	ldr	r3, [r4, #32]
 80022c0:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80022c4:	d003      	beq.n	80022ce <HAL_DMA_Init+0xf6>
 80022c6:	4872      	ldr	r0, [pc, #456]	; (8002490 <HAL_DMA_Init+0x2b8>)
 80022c8:	21c0      	movs	r1, #192	; 0xc0
 80022ca:	f7ff fa0f 	bl	80016ec <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80022ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022d0:	b1db      	cbz	r3, 800230a <HAL_DMA_Init+0x132>
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d005      	beq.n	80022e2 <HAL_DMA_Init+0x10a>
 80022d6:	486e      	ldr	r0, [pc, #440]	; (8002490 <HAL_DMA_Init+0x2b8>)
 80022d8:	21c1      	movs	r1, #193	; 0xc1
 80022da:	f7ff fa07 	bl	80016ec <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80022de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022e0:	b19b      	cbz	r3, 800230a <HAL_DMA_Init+0x132>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80022e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	f200 80b3 	bhi.w	8002450 <HAL_DMA_Init+0x278>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80022ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022ec:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 80022f0:	d003      	beq.n	80022fa <HAL_DMA_Init+0x122>
 80022f2:	4867      	ldr	r0, [pc, #412]	; (8002490 <HAL_DMA_Init+0x2b8>)
 80022f4:	21c7      	movs	r1, #199	; 0xc7
 80022f6:	f7ff f9f9 	bl	80016ec <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80022fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022fc:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8002300:	d003      	beq.n	800230a <HAL_DMA_Init+0x132>
 8002302:	4863      	ldr	r0, [pc, #396]	; (8002490 <HAL_DMA_Init+0x2b8>)
 8002304:	21c8      	movs	r1, #200	; 0xc8
 8002306:	f7ff f9f1 	bl	80016ec <assert_failed>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800230a:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800230c:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 800230e:	2100      	movs	r1, #0
 8002310:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002314:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002320:	e005      	b.n	800232e <HAL_DMA_Init+0x156>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002322:	f7ff fc65 	bl	8001bf0 <HAL_GetTick>
 8002326:	1b40      	subs	r0, r0, r5
 8002328:	2805      	cmp	r0, #5
 800232a:	d855      	bhi.n	80023d8 <HAL_DMA_Init+0x200>
 800232c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	07d1      	lsls	r1, r2, #31
 8002332:	d4f6      	bmi.n	8002322 <HAL_DMA_Init+0x14a>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002334:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002338:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233c:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233e:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 8002340:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002342:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002344:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002348:	4302      	orrs	r2, r0
 800234a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800234c:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800234e:	4951      	ldr	r1, [pc, #324]	; (8002494 <HAL_DMA_Init+0x2bc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002350:	4332      	orrs	r2, r6
 8002352:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002354:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002356:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002358:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235a:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235c:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002360:	d057      	beq.n	8002412 <HAL_DMA_Init+0x23a>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002362:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002364:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002366:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800236a:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800236c:	b2da      	uxtb	r2, r3
 800236e:	494a      	ldr	r1, [pc, #296]	; (8002498 <HAL_DMA_Init+0x2c0>)
  hdma->Instance->FCR = tmp;
 8002370:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002372:	3a10      	subs	r2, #16
 8002374:	fba1 0102 	umull	r0, r1, r1, r2
 8002378:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800237a:	4848      	ldr	r0, [pc, #288]	; (800249c <HAL_DMA_Init+0x2c4>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800237c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002380:	5c41      	ldrb	r1, [r0, r1]
 8002382:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002384:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8002388:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800238a:	bf88      	it	hi
 800238c:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800238e:	223f      	movs	r2, #63	; 0x3f
 8002390:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8002392:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002394:	2100      	movs	r1, #0
 8002396:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002398:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800239a:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800239c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 80023a0:	4608      	mov	r0, r1
}
 80023a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	f43f af65 	beq.w	8002274 <HAL_DMA_Init+0x9c>
 80023aa:	4839      	ldr	r0, [pc, #228]	; (8002490 <HAL_DMA_Init+0x2b8>)
 80023ac:	21ba      	movs	r1, #186	; 0xba
 80023ae:	f7ff f99d 	bl	80016ec <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80023b2:	68e3      	ldr	r3, [r4, #12]
 80023b4:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80023b8:	f43f af61 	beq.w	800227e <HAL_DMA_Init+0xa6>
 80023bc:	4834      	ldr	r0, [pc, #208]	; (8002490 <HAL_DMA_Init+0x2b8>)
 80023be:	21bb      	movs	r1, #187	; 0xbb
 80023c0:	f7ff f994 	bl	80016ec <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80023c4:	6923      	ldr	r3, [r4, #16]
 80023c6:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80023ca:	f43f af5d 	beq.w	8002288 <HAL_DMA_Init+0xb0>
 80023ce:	4830      	ldr	r0, [pc, #192]	; (8002490 <HAL_DMA_Init+0x2b8>)
 80023d0:	21bc      	movs	r1, #188	; 0xbc
 80023d2:	f7ff f98b 	bl	80016ec <assert_failed>
 80023d6:	e757      	b.n	8002288 <HAL_DMA_Init+0xb0>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023da:	2220      	movs	r2, #32
 80023dc:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 80023e2:	4618      	mov	r0, r3
}
 80023e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80023e6:	482a      	ldr	r0, [pc, #168]	; (8002490 <HAL_DMA_Init+0x2b8>)
 80023e8:	21bd      	movs	r1, #189	; 0xbd
 80023ea:	f7ff f97f 	bl	80016ec <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80023ee:	69a3      	ldr	r3, [r4, #24]
 80023f0:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 80023f4:	f43f af58 	beq.w	80022a8 <HAL_DMA_Init+0xd0>
 80023f8:	e752      	b.n	80022a0 <HAL_DMA_Init+0xc8>
 80023fa:	4825      	ldr	r0, [pc, #148]	; (8002490 <HAL_DMA_Init+0x2b8>)
 80023fc:	21be      	movs	r1, #190	; 0xbe
 80023fe:	f7ff f975 	bl	80016ec <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002402:	69e3      	ldr	r3, [r4, #28]
 8002404:	f033 0220 	bics.w	r2, r3, #32
 8002408:	f43f af59 	beq.w	80022be <HAL_DMA_Init+0xe6>
 800240c:	e750      	b.n	80022b0 <HAL_DMA_Init+0xd8>
    return HAL_ERROR;
 800240e:	2001      	movs	r0, #1
}
 8002410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002412:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 8002416:	4328      	orrs	r0, r5
 8002418:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 800241a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 800241c:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 800241e:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002420:	f020 0007 	bic.w	r0, r0, #7
 8002424:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 8002426:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800242a:	2d00      	cmp	r5, #0
 800242c:	d09e      	beq.n	800236c <HAL_DMA_Init+0x194>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800242e:	b1a6      	cbz	r6, 800245a <HAL_DMA_Init+0x282>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002430:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002434:	d017      	beq.n	8002466 <HAL_DMA_Init+0x28e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002436:	2a02      	cmp	r2, #2
 8002438:	d903      	bls.n	8002442 <HAL_DMA_Init+0x26a>
 800243a:	2a03      	cmp	r2, #3
 800243c:	d196      	bne.n	800236c <HAL_DMA_Init+0x194>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800243e:	01ea      	lsls	r2, r5, #7
 8002440:	d594      	bpl.n	800236c <HAL_DMA_Init+0x194>
        hdma->State = HAL_DMA_STATE_READY;
 8002442:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002444:	2240      	movs	r2, #64	; 0x40
 8002446:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002448:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800244c:	4618      	mov	r0, r3
}
 800244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002450:	480f      	ldr	r0, [pc, #60]	; (8002490 <HAL_DMA_Init+0x2b8>)
 8002452:	21c6      	movs	r1, #198	; 0xc6
 8002454:	f7ff f94a 	bl	80016ec <assert_failed>
 8002458:	e747      	b.n	80022ea <HAL_DMA_Init+0x112>
    switch (tmp)
 800245a:	2a01      	cmp	r2, #1
 800245c:	d010      	beq.n	8002480 <HAL_DMA_Init+0x2a8>
 800245e:	f032 0202 	bics.w	r2, r2, #2
 8002462:	d183      	bne.n	800236c <HAL_DMA_Init+0x194>
 8002464:	e7eb      	b.n	800243e <HAL_DMA_Init+0x266>
    switch (tmp)
 8002466:	2a03      	cmp	r2, #3
 8002468:	d880      	bhi.n	800236c <HAL_DMA_Init+0x194>
 800246a:	a101      	add	r1, pc, #4	; (adr r1, 8002470 <HAL_DMA_Init+0x298>)
 800246c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002470:	08002443 	.word	0x08002443
 8002474:	0800243f 	.word	0x0800243f
 8002478:	08002443 	.word	0x08002443
 800247c:	08002481 	.word	0x08002481
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002480:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002484:	f47f af72 	bne.w	800236c <HAL_DMA_Init+0x194>
 8002488:	e7db      	b.n	8002442 <HAL_DMA_Init+0x26a>
 800248a:	bf00      	nop
 800248c:	40026010 	.word	0x40026010
 8002490:	08009980 	.word	0x08009980
 8002494:	f010803f 	.word	0xf010803f
 8002498:	aaaaaaab 	.word	0xaaaaaaab
 800249c:	080099b8 	.word	0x080099b8

080024a0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d003      	beq.n	80024b0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80024ac:	2001      	movs	r0, #1
 80024ae:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80024b0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80024b2:	2305      	movs	r3, #5
 80024b4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80024b8:	6813      	ldr	r3, [r2, #0]
 80024ba:	f023 0301 	bic.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80024c0:	2000      	movs	r0, #0
}
 80024c2:	4770      	bx	lr

080024c4 <HAL_DMA_IRQHandler>:
{
 80024c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024c8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80024ca:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024cc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 80024ce:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80024d2:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024d4:	4971      	ldr	r1, [pc, #452]	; (800269c <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d6:	2208      	movs	r2, #8
 80024d8:	409a      	lsls	r2, r3
 80024da:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 80024dc:	680d      	ldr	r5, [r1, #0]
{
 80024de:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e0:	d004      	beq.n	80024ec <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024e2:	6801      	ldr	r1, [r0, #0]
 80024e4:	680f      	ldr	r7, [r1, #0]
 80024e6:	0778      	lsls	r0, r7, #29
 80024e8:	f100 808a 	bmi.w	8002600 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ec:	2201      	movs	r2, #1
 80024ee:	409a      	lsls	r2, r3
 80024f0:	4222      	tst	r2, r4
 80024f2:	d004      	beq.n	80024fe <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024f4:	f8d8 1000 	ldr.w	r1, [r8]
 80024f8:	6949      	ldr	r1, [r1, #20]
 80024fa:	0609      	lsls	r1, r1, #24
 80024fc:	d478      	bmi.n	80025f0 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024fe:	2204      	movs	r2, #4
 8002500:	409a      	lsls	r2, r3
 8002502:	4222      	tst	r2, r4
 8002504:	d004      	beq.n	8002510 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002506:	f8d8 1000 	ldr.w	r1, [r8]
 800250a:	6809      	ldr	r1, [r1, #0]
 800250c:	078f      	lsls	r7, r1, #30
 800250e:	d467      	bmi.n	80025e0 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002510:	2210      	movs	r2, #16
 8002512:	409a      	lsls	r2, r3
 8002514:	4222      	tst	r2, r4
 8002516:	d004      	beq.n	8002522 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002518:	f8d8 1000 	ldr.w	r1, [r8]
 800251c:	680f      	ldr	r7, [r1, #0]
 800251e:	0738      	lsls	r0, r7, #28
 8002520:	d449      	bmi.n	80025b6 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002522:	2220      	movs	r2, #32
 8002524:	409a      	lsls	r2, r3
 8002526:	4222      	tst	r2, r4
 8002528:	d017      	beq.n	800255a <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800252a:	f8d8 1000 	ldr.w	r1, [r8]
 800252e:	680c      	ldr	r4, [r1, #0]
 8002530:	06e0      	lsls	r0, r4, #27
 8002532:	d512      	bpl.n	800255a <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002534:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002536:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800253a:	2a05      	cmp	r2, #5
 800253c:	d073      	beq.n	8002626 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800253e:	680b      	ldr	r3, [r1, #0]
 8002540:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002544:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002546:	f000 8090 	beq.w	800266a <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800254a:	0319      	lsls	r1, r3, #12
 800254c:	f140 809b 	bpl.w	8002686 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8002550:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8002554:	b10b      	cbz	r3, 800255a <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8002556:	4640      	mov	r0, r8
 8002558:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800255a:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800255e:	b33b      	cbz	r3, 80025b0 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002560:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002564:	07da      	lsls	r2, r3, #31
 8002566:	d51b      	bpl.n	80025a0 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8002568:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800256c:	494c      	ldr	r1, [pc, #304]	; (80026a0 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800256e:	2305      	movs	r3, #5
 8002570:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002574:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002576:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002580:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8002582:	e002      	b.n	800258a <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002584:	6813      	ldr	r3, [r2, #0]
 8002586:	07db      	lsls	r3, r3, #31
 8002588:	d504      	bpl.n	8002594 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800258a:	9b01      	ldr	r3, [sp, #4]
 800258c:	3301      	adds	r3, #1
 800258e:	42ab      	cmp	r3, r5
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	d9f7      	bls.n	8002584 <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 8002594:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002596:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8002598:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800259c:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80025a0:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80025a4:	b123      	cbz	r3, 80025b0 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 80025a6:	4640      	mov	r0, r8
}
 80025a8:	b002      	add	sp, #8
 80025aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80025ae:	4718      	bx	r3
}
 80025b0:	b002      	add	sp, #8
 80025b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025b6:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025b8:	680a      	ldr	r2, [r1, #0]
 80025ba:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025be:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025c0:	d12a      	bne.n	8002618 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c2:	05d7      	lsls	r7, r2, #23
 80025c4:	d403      	bmi.n	80025ce <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c6:	680a      	ldr	r2, [r1, #0]
 80025c8:	f022 0208 	bic.w	r2, r2, #8
 80025cc:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80025ce:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	d0a5      	beq.n	8002522 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 80025d6:	4640      	mov	r0, r8
 80025d8:	4790      	blx	r2
 80025da:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80025de:	e7a0      	b.n	8002522 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025e0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025e2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80025e6:	f042 0204 	orr.w	r2, r2, #4
 80025ea:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80025ee:	e78f      	b.n	8002510 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025f0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025f2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80025f6:	f042 0202 	orr.w	r2, r2, #2
 80025fa:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80025fe:	e77e      	b.n	80024fe <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002600:	680f      	ldr	r7, [r1, #0]
 8002602:	f027 0704 	bic.w	r7, r7, #4
 8002606:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002608:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800260a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002616:	e769      	b.n	80024ec <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002618:	0312      	lsls	r2, r2, #12
 800261a:	d5d8      	bpl.n	80025ce <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800261c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002620:	2a00      	cmp	r2, #0
 8002622:	d1d8      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x112>
 8002624:	e77d      	b.n	8002522 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002626:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002628:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262c:	f022 0216 	bic.w	r2, r2, #22
 8002630:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002632:	694a      	ldr	r2, [r1, #20]
 8002634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002638:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800263a:	b354      	cbz	r4, 8002692 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800263c:	680a      	ldr	r2, [r1, #0]
 800263e:	f022 0208 	bic.w	r2, r2, #8
 8002642:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002644:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8002646:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 800264e:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002650:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002652:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 8002654:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002658:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800265c:	2900      	cmp	r1, #0
 800265e:	d0a7      	beq.n	80025b0 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8002660:	4640      	mov	r0, r8
}
 8002662:	b002      	add	sp, #8
 8002664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8002668:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800266a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800266e:	f47f af6f 	bne.w	8002550 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002672:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002674:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002676:	f022 0210 	bic.w	r2, r2, #16
 800267a:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800267c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002680:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 8002684:	e764      	b.n	8002550 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8002686:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800268a:	2b00      	cmp	r3, #0
 800268c:	f47f af63 	bne.w	8002556 <HAL_DMA_IRQHandler+0x92>
 8002690:	e763      	b.n	800255a <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002692:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002696:	2a00      	cmp	r2, #0
 8002698:	d1d0      	bne.n	800263c <HAL_DMA_IRQHandler+0x178>
 800269a:	e7d3      	b.n	8002644 <HAL_DMA_IRQHandler+0x180>
 800269c:	20000000 	.word	0x20000000
 80026a0:	1b4e81b5 	.word	0x1b4e81b5

080026a4 <HAL_DMA_GetState>:
  return hdma->State;
 80026a4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop

080026ac <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80026ac:	b911      	cbnz	r1, 80026b4 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80026ae:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b0:	4608      	mov	r0, r1
      break;
 80026b2:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 80026b4:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 80026b6:	4770      	bx	lr

080026b8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80026b8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
 80026ba:	f021 63c0 	bic.w	r3, r1, #100663296	; 0x6000000
 80026be:	f023 031f 	bic.w	r3, r3, #31
{
 80026c2:	460c      	mov	r4, r1
 80026c4:	4605      	mov	r5, r0
  assert_param(IS_EXTI_LINE(ExtiLine));
 80026c6:	b90b      	cbnz	r3, 80026cc <HAL_EXTI_GetHandle+0x14>
 80026c8:	018b      	lsls	r3, r1, #6
 80026ca:	d408      	bmi.n	80026de <HAL_EXTI_GetHandle+0x26>
 80026cc:	480a      	ldr	r0, [pc, #40]	; (80026f8 <HAL_EXTI_GetHandle+0x40>)
 80026ce:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80026d2:	f7ff f80b 	bl	80016ec <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
 80026d6:	b165      	cbz	r5, 80026f2 <HAL_EXTI_GetHandle+0x3a>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80026d8:	602c      	str	r4, [r5, #0]

    return HAL_OK;
 80026da:	2000      	movs	r0, #0
  }
}
 80026dc:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_EXTI_LINE(ExtiLine));
 80026de:	f001 031f 	and.w	r3, r1, #31
 80026e2:	2b16      	cmp	r3, #22
 80026e4:	d9f7      	bls.n	80026d6 <HAL_EXTI_GetHandle+0x1e>
 80026e6:	4804      	ldr	r0, [pc, #16]	; (80026f8 <HAL_EXTI_GetHandle+0x40>)
 80026e8:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80026ec:	f7fe fffe 	bl	80016ec <assert_failed>
 80026f0:	e7f1      	b.n	80026d6 <HAL_EXTI_GetHandle+0x1e>
    return HAL_ERROR;
 80026f2:	2001      	movs	r0, #1
}
 80026f4:	bd38      	pop	{r3, r4, r5, pc}
 80026f6:	bf00      	nop
 80026f8:	080099c0 	.word	0x080099c0

080026fc <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80026fc:	6803      	ldr	r3, [r0, #0]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80026fe:	4909      	ldr	r1, [pc, #36]	; (8002724 <HAL_EXTI_IRQHandler+0x28>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002700:	f003 021f 	and.w	r2, r3, #31
{
 8002704:	b410      	push	{r4}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002706:	2301      	movs	r3, #1
  regval = (EXTI->PR & maskline);
 8002708:	694c      	ldr	r4, [r1, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800270a:	4093      	lsls	r3, r2
  if (regval != 0x00u)
 800270c:	421c      	tst	r4, r3
 800270e:	d005      	beq.n	800271c <HAL_EXTI_IRQHandler+0x20>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002710:	6842      	ldr	r2, [r0, #4]
    EXTI->PR = maskline;
 8002712:	614b      	str	r3, [r1, #20]
    if (hexti->PendingCallback != NULL)
 8002714:	b112      	cbz	r2, 800271c <HAL_EXTI_IRQHandler+0x20>
    {
      hexti->PendingCallback();
    }
  }
}
 8002716:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 800271a:	4710      	bx	r2
}
 800271c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40013c00 	.word	0x40013c00

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800272c:	4b9c      	ldr	r3, [pc, #624]	; (80029a0 <HAL_GPIO_Init+0x278>)
 800272e:	4298      	cmp	r0, r3
{
 8002730:	b083      	sub	sp, #12
 8002732:	4605      	mov	r5, r0
 8002734:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002736:	d017      	beq.n	8002768 <HAL_GPIO_Init+0x40>
 8002738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800273c:	4298      	cmp	r0, r3
 800273e:	d013      	beq.n	8002768 <HAL_GPIO_Init+0x40>
 8002740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002744:	4298      	cmp	r0, r3
 8002746:	d00f      	beq.n	8002768 <HAL_GPIO_Init+0x40>
 8002748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800274c:	4298      	cmp	r0, r3
 800274e:	d00b      	beq.n	8002768 <HAL_GPIO_Init+0x40>
 8002750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002754:	4298      	cmp	r0, r3
 8002756:	d007      	beq.n	8002768 <HAL_GPIO_Init+0x40>
 8002758:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800275c:	4298      	cmp	r0, r3
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x40>
 8002760:	4890      	ldr	r0, [pc, #576]	; (80029a4 <HAL_GPIO_Init+0x27c>)
 8002762:	21ac      	movs	r1, #172	; 0xac
 8002764:	f7fe ffc2 	bl	80016ec <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	b29a      	uxth	r2, r3
 800276c:	2a00      	cmp	r2, #0
 800276e:	f000 80d2 	beq.w	8002916 <HAL_GPIO_Init+0x1ee>
 8002772:	0c1b      	lsrs	r3, r3, #16
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 80cd 	bne.w	8002916 <HAL_GPIO_Init+0x1ee>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d917      	bls.n	80027b2 <HAL_GPIO_Init+0x8a>
 8002782:	f1a3 0211 	sub.w	r2, r3, #17
 8002786:	2a01      	cmp	r2, #1
 8002788:	d913      	bls.n	80027b2 <HAL_GPIO_Init+0x8a>
 800278a:	4987      	ldr	r1, [pc, #540]	; (80029a8 <HAL_GPIO_Init+0x280>)
 800278c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002790:	428a      	cmp	r2, r1
 8002792:	d00e      	beq.n	80027b2 <HAL_GPIO_Init+0x8a>
 8002794:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8002798:	428b      	cmp	r3, r1
 800279a:	d00a      	beq.n	80027b2 <HAL_GPIO_Init+0x8a>
 800279c:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80027a0:	428a      	cmp	r2, r1
 80027a2:	d006      	beq.n	80027b2 <HAL_GPIO_Init+0x8a>
 80027a4:	4a81      	ldr	r2, [pc, #516]	; (80029ac <HAL_GPIO_Init+0x284>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x8a>
 80027aa:	487e      	ldr	r0, [pc, #504]	; (80029a4 <HAL_GPIO_Init+0x27c>)
 80027ac:	21ae      	movs	r1, #174	; 0xae
 80027ae:	f7fe ff9d 	bl	80016ec <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	f200 80e9 	bhi.w	800298c <HAL_GPIO_Init+0x264>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ba:	f8df a208 	ldr.w	sl, [pc, #520]	; 80029c4 <HAL_GPIO_Init+0x29c>
{
 80027be:	2400      	movs	r4, #0
 80027c0:	e003      	b.n	80027ca <HAL_GPIO_Init+0xa2>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c2:	3401      	adds	r4, #1
 80027c4:	2c10      	cmp	r4, #16
 80027c6:	f000 80a3 	beq.w	8002910 <HAL_GPIO_Init+0x1e8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ca:	683b      	ldr	r3, [r7, #0]
    ioposition = 0x01U << position;
 80027cc:	2601      	movs	r6, #1
 80027ce:	40a6      	lsls	r6, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d0:	ea06 0803 	and.w	r8, r6, r3
    if(iocurrent == ioposition)
 80027d4:	ea36 0303 	bics.w	r3, r6, r3
 80027d8:	d1f3      	bne.n	80027c2 <HAL_GPIO_Init+0x9a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	f001 0303 	and.w	r3, r1, #3
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	2a01      	cmp	r2, #1
 80027e4:	f240 809c 	bls.w	8002920 <HAL_GPIO_Init+0x1f8>
 80027e8:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 80027ec:	f04f 0903 	mov.w	r9, #3
 80027f0:	fa09 f90b 	lsl.w	r9, r9, fp
 80027f4:	ea6f 0909 	mvn.w	r9, r9
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d028      	beq.n	800284e <HAL_GPIO_Init+0x126>
        temp = GPIOx->PUPDR;
 80027fc:	68e8      	ldr	r0, [r5, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027fe:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002800:	ea00 0009 	and.w	r0, r0, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002804:	fa02 f20b 	lsl.w	r2, r2, fp
 8002808:	4302      	orrs	r2, r0
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280a:	2b02      	cmp	r3, #2
        GPIOx->PUPDR = temp;
 800280c:	60ea      	str	r2, [r5, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	d11e      	bne.n	800284e <HAL_GPIO_Init+0x126>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	2a0f      	cmp	r2, #15
 8002814:	f240 80a0 	bls.w	8002958 <HAL_GPIO_Init+0x230>
 8002818:	21dc      	movs	r1, #220	; 0xdc
 800281a:	4862      	ldr	r0, [pc, #392]	; (80029a4 <HAL_GPIO_Init+0x27c>)
 800281c:	f7fe ff66 	bl	80016ec <assert_failed>
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	f001 0303 	and.w	r3, r1, #3
        temp = GPIOx->AFR[position >> 3U];
 8002828:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 800282c:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002830:	f004 0607 	and.w	r6, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8002834:	f8dc 0020 	ldr.w	r0, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002838:	00b6      	lsls	r6, r6, #2
 800283a:	f04f 0e0f 	mov.w	lr, #15
 800283e:	fa0e fe06 	lsl.w	lr, lr, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002842:	40b2      	lsls	r2, r6
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002844:	ea20 000e 	bic.w	r0, r0, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002848:	4302      	orrs	r2, r0
        GPIOx->AFR[position >> 3U] = temp;
 800284a:	f8cc 2020 	str.w	r2, [ip, #32]
      temp = GPIOx->MODER;
 800284e:	682a      	ldr	r2, [r5, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002850:	fa03 f30b 	lsl.w	r3, r3, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002854:	ea02 0909 	and.w	r9, r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002858:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->MODER = temp;
 800285c:	602b      	str	r3, [r5, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800285e:	00cb      	lsls	r3, r1, #3
 8002860:	d5af      	bpl.n	80027c2 <HAL_GPIO_Init+0x9a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <HAL_GPIO_Init+0x288>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002864:	4e4e      	ldr	r6, [pc, #312]	; (80029a0 <HAL_GPIO_Init+0x278>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002866:	2200      	movs	r2, #0
 8002868:	9201      	str	r2, [sp, #4]
 800286a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800286c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
 8002872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002874:	f024 0303 	bic.w	r3, r4, #3
 8002878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800287c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002880:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002884:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002886:	f004 0203 	and.w	r2, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288a:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800288c:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002890:	0092      	lsls	r2, r2, #2
 8002892:	200f      	movs	r0, #15
 8002894:	4090      	lsls	r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002896:	42b5      	cmp	r5, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002898:	ea2c 0000 	bic.w	r0, ip, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800289c:	d00f      	beq.n	80028be <HAL_GPIO_Init+0x196>
 800289e:	4555      	cmp	r5, sl
 80028a0:	d06a      	beq.n	8002978 <HAL_GPIO_Init+0x250>
 80028a2:	4e44      	ldr	r6, [pc, #272]	; (80029b4 <HAL_GPIO_Init+0x28c>)
 80028a4:	42b5      	cmp	r5, r6
 80028a6:	d06c      	beq.n	8002982 <HAL_GPIO_Init+0x25a>
 80028a8:	4e43      	ldr	r6, [pc, #268]	; (80029b8 <HAL_GPIO_Init+0x290>)
 80028aa:	42b5      	cmp	r5, r6
 80028ac:	d073      	beq.n	8002996 <HAL_GPIO_Init+0x26e>
 80028ae:	4e43      	ldr	r6, [pc, #268]	; (80029bc <HAL_GPIO_Init+0x294>)
 80028b0:	42b5      	cmp	r5, r6
 80028b2:	bf0c      	ite	eq
 80028b4:	2604      	moveq	r6, #4
 80028b6:	2607      	movne	r6, #7
 80028b8:	fa06 f202 	lsl.w	r2, r6, r2
 80028bc:	4310      	orrs	r0, r2
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028be:	4a40      	ldr	r2, [pc, #256]	; (80029c0 <HAL_GPIO_Init+0x298>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c0:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 80028c2:	6812      	ldr	r2, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80028c4:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 80028c6:	ea6f 0008 	mvn.w	r0, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ca:	03ce      	lsls	r6, r1, #15
        temp &= ~((uint32_t)iocurrent);
 80028cc:	bf54      	ite	pl
 80028ce:	4002      	andpl	r2, r0
          temp |= iocurrent;
 80028d0:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 80028d4:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80028d6:	685a      	ldr	r2, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028d8:	038b      	lsls	r3, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 80028dc:	bf54      	ite	pl
 80028de:	4002      	andpl	r2, r0
          temp |= iocurrent;
 80028e0:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 80028e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028e6:	689a      	ldr	r2, [r3, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80028e8:	4b35      	ldr	r3, [pc, #212]	; (80029c0 <HAL_GPIO_Init+0x298>)
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ea:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80028ec:	bf54      	ite	pl
 80028ee:	4002      	andpl	r2, r0
          temp |= iocurrent;
 80028f0:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80028f4:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80028f6:	68db      	ldr	r3, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028f8:	028a      	lsls	r2, r1, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fa:	f104 0401 	add.w	r4, r4, #1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80028fe:	4a30      	ldr	r2, [pc, #192]	; (80029c0 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 8002900:	bf54      	ite	pl
 8002902:	4003      	andpl	r3, r0
          temp |= iocurrent;
 8002904:	ea48 0303 	orrmi.w	r3, r8, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002908:	2c10      	cmp	r4, #16
        EXTI->FTSR = temp;
 800290a:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290c:	f47f af5d 	bne.w	80027ca <HAL_GPIO_Init+0xa2>
      }
    }
  }
}
 8002910:	b003      	add	sp, #12
 8002912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002916:	4823      	ldr	r0, [pc, #140]	; (80029a4 <HAL_GPIO_Init+0x27c>)
 8002918:	21ad      	movs	r1, #173	; 0xad
 800291a:	f7fe fee7 	bl	80016ec <assert_failed>
 800291e:	e72d      	b.n	800277c <HAL_GPIO_Init+0x54>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	2a03      	cmp	r2, #3
 8002924:	d81f      	bhi.n	8002966 <HAL_GPIO_Init+0x23e>
        temp = GPIOx->OSPEEDR; 
 8002926:	68a8      	ldr	r0, [r5, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002928:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 800292c:	f04f 0903 	mov.w	r9, #3
 8002930:	fa09 f90b 	lsl.w	r9, r9, fp
 8002934:	ea20 0009 	bic.w	r0, r0, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002938:	fa02 f20b 	lsl.w	r2, r2, fp
 800293c:	4302      	orrs	r2, r0
        GPIOx->OSPEEDR = temp;
 800293e:	60aa      	str	r2, [r5, #8]
        temp = GPIOx->OTYPER;
 8002940:	6868      	ldr	r0, [r5, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002942:	f3c1 1200 	ubfx	r2, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002946:	ea20 0006 	bic.w	r0, r0, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800294a:	4616      	mov	r6, r2
 800294c:	40a6      	lsls	r6, r4
 800294e:	4306      	orrs	r6, r0
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002950:	ea6f 0909 	mvn.w	r9, r9
        GPIOx->OTYPER = temp;
 8002954:	606e      	str	r6, [r5, #4]
 8002956:	e74f      	b.n	80027f8 <HAL_GPIO_Init+0xd0>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002958:	f249 70f7 	movw	r0, #38903	; 0x97f7
 800295c:	40d0      	lsrs	r0, r2
 800295e:	07c0      	lsls	r0, r0, #31
 8002960:	f53f af62 	bmi.w	8002828 <HAL_GPIO_Init+0x100>
 8002964:	e758      	b.n	8002818 <HAL_GPIO_Init+0xf0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002966:	21c1      	movs	r1, #193	; 0xc1
 8002968:	480e      	ldr	r0, [pc, #56]	; (80029a4 <HAL_GPIO_Init+0x27c>)
 800296a:	f7fe febf 	bl	80016ec <assert_failed>
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	f001 0303 	and.w	r3, r1, #3
 8002976:	e7d6      	b.n	8002926 <HAL_GPIO_Init+0x1fe>
 8002978:	2601      	movs	r6, #1
 800297a:	fa06 f202 	lsl.w	r2, r6, r2
 800297e:	4310      	orrs	r0, r2
 8002980:	e79d      	b.n	80028be <HAL_GPIO_Init+0x196>
 8002982:	2602      	movs	r6, #2
 8002984:	fa06 f202 	lsl.w	r2, r6, r2
 8002988:	4310      	orrs	r0, r2
 800298a:	e798      	b.n	80028be <HAL_GPIO_Init+0x196>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800298c:	4805      	ldr	r0, [pc, #20]	; (80029a4 <HAL_GPIO_Init+0x27c>)
 800298e:	21af      	movs	r1, #175	; 0xaf
 8002990:	f7fe feac 	bl	80016ec <assert_failed>
 8002994:	e711      	b.n	80027ba <HAL_GPIO_Init+0x92>
 8002996:	2603      	movs	r6, #3
 8002998:	fa06 f202 	lsl.w	r2, r6, r2
 800299c:	4310      	orrs	r0, r2
 800299e:	e78e      	b.n	80028be <HAL_GPIO_Init+0x196>
 80029a0:	40020000 	.word	0x40020000
 80029a4:	080099fc 	.word	0x080099fc
 80029a8:	10110000 	.word	0x10110000
 80029ac:	10220000 	.word	0x10220000
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40013c00 	.word	0x40013c00
 80029c4:	40020400 	.word	0x40020400

080029c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t tmp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80029cc:	4b52      	ldr	r3, [pc, #328]	; (8002b18 <HAL_GPIO_DeInit+0x150>)
 80029ce:	4298      	cmp	r0, r3
{
 80029d0:	b083      	sub	sp, #12
 80029d2:	4604      	mov	r4, r0
 80029d4:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80029d6:	d018      	beq.n	8002a0a <HAL_GPIO_DeInit+0x42>
 80029d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029dc:	4298      	cmp	r0, r3
 80029de:	d014      	beq.n	8002a0a <HAL_GPIO_DeInit+0x42>
 80029e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029e4:	4298      	cmp	r0, r3
 80029e6:	d010      	beq.n	8002a0a <HAL_GPIO_DeInit+0x42>
 80029e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ec:	4298      	cmp	r0, r3
 80029ee:	d00c      	beq.n	8002a0a <HAL_GPIO_DeInit+0x42>
 80029f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029f4:	4298      	cmp	r0, r3
 80029f6:	d008      	beq.n	8002a0a <HAL_GPIO_DeInit+0x42>
 80029f8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80029fc:	4298      	cmp	r0, r3
 80029fe:	d004      	beq.n	8002a0a <HAL_GPIO_DeInit+0x42>
 8002a00:	4846      	ldr	r0, [pc, #280]	; (8002b1c <HAL_GPIO_DeInit+0x154>)
 8002a02:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a06:	f7fe fe71 	bl	80016ec <assert_failed>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a0a:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8002b18 <HAL_GPIO_DeInit+0x150>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a0e:	f8df e120 	ldr.w	lr, [pc, #288]	; 8002b30 <HAL_GPIO_DeInit+0x168>
{
 8002a12:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8002a14:	f04f 0c01 	mov.w	ip, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a18:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a1c:	f04f 0a03 	mov.w	sl, #3
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_DeInit+0x60>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a22:	3301      	adds	r3, #1
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d068      	beq.n	8002afa <HAL_GPIO_DeInit+0x132>
    ioposition = 0x01U << position;
 8002a28:	fa0c f203 	lsl.w	r2, ip, r3
    if(iocurrent == ioposition)
 8002a2c:	ea32 0106 	bics.w	r1, r2, r6
    iocurrent = (GPIO_Pin) & ioposition;
 8002a30:	ea02 0506 	and.w	r5, r2, r6
    if(iocurrent == ioposition)
 8002a34:	d1f5      	bne.n	8002a22 <HAL_GPIO_DeInit+0x5a>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002a36:	f023 0003 	bic.w	r0, r3, #3
 8002a3a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002a3e:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a42:	f003 0103 	and.w	r1, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002a46:	6887      	ldr	r7, [r0, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a48:	0089      	lsls	r1, r1, #2
 8002a4a:	fa09 f801 	lsl.w	r8, r9, r1
 8002a4e:	ea08 0707 	and.w	r7, r8, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a52:	455c      	cmp	r4, fp
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002a54:	9701      	str	r7, [sp, #4]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002a56:	d053      	beq.n	8002b00 <HAL_GPIO_DeInit+0x138>
 8002a58:	4f31      	ldr	r7, [pc, #196]	; (8002b20 <HAL_GPIO_DeInit+0x158>)
 8002a5a:	42bc      	cmp	r4, r7
 8002a5c:	d052      	beq.n	8002b04 <HAL_GPIO_DeInit+0x13c>
 8002a5e:	4f31      	ldr	r7, [pc, #196]	; (8002b24 <HAL_GPIO_DeInit+0x15c>)
 8002a60:	42bc      	cmp	r4, r7
 8002a62:	d052      	beq.n	8002b0a <HAL_GPIO_DeInit+0x142>
 8002a64:	4f30      	ldr	r7, [pc, #192]	; (8002b28 <HAL_GPIO_DeInit+0x160>)
 8002a66:	42bc      	cmp	r4, r7
 8002a68:	d053      	beq.n	8002b12 <HAL_GPIO_DeInit+0x14a>
 8002a6a:	4f30      	ldr	r7, [pc, #192]	; (8002b2c <HAL_GPIO_DeInit+0x164>)
 8002a6c:	42bc      	cmp	r4, r7
 8002a6e:	bf14      	ite	ne
 8002a70:	2707      	movne	r7, #7
 8002a72:	2704      	moveq	r7, #4
 8002a74:	fa07 f101 	lsl.w	r1, r7, r1
 8002a78:	9f01      	ldr	r7, [sp, #4]
 8002a7a:	428f      	cmp	r7, r1
 8002a7c:	d11b      	bne.n	8002ab6 <HAL_GPIO_DeInit+0xee>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a7e:	f8de 1000 	ldr.w	r1, [lr]
 8002a82:	ea21 0105 	bic.w	r1, r1, r5
 8002a86:	f8ce 1000 	str.w	r1, [lr]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002a8a:	f8de 1004 	ldr.w	r1, [lr, #4]
 8002a8e:	ea21 0105 	bic.w	r1, r1, r5
 8002a92:	f8ce 1004 	str.w	r1, [lr, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a96:	f8de 1008 	ldr.w	r1, [lr, #8]
 8002a9a:	ea21 0105 	bic.w	r1, r1, r5
 8002a9e:	f8ce 1008 	str.w	r1, [lr, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002aa2:	f8de 100c 	ldr.w	r1, [lr, #12]
 8002aa6:	ea21 0505 	bic.w	r5, r1, r5
 8002aaa:	f8ce 500c 	str.w	r5, [lr, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002aae:	6881      	ldr	r1, [r0, #8]
 8002ab0:	ea21 0108 	bic.w	r1, r1, r8
 8002ab4:	6081      	str	r1, [r0, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab6:	6821      	ldr	r1, [r4, #0]
 8002ab8:	005d      	lsls	r5, r3, #1
 8002aba:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002abe:	08d8      	lsrs	r0, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ac0:	ea21 0105 	bic.w	r1, r1, r5
 8002ac4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8002ac8:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aca:	f003 0107 	and.w	r1, r3, #7
 8002ace:	6a07      	ldr	r7, [r0, #32]
 8002ad0:	0089      	lsls	r1, r1, #2
 8002ad2:	fa09 f101 	lsl.w	r1, r9, r1
 8002ad6:	ea27 0101 	bic.w	r1, r7, r1
 8002ada:	6201      	str	r1, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002adc:	68e1      	ldr	r1, [r4, #12]
 8002ade:	ea21 0105 	bic.w	r1, r1, r5
 8002ae2:	60e1      	str	r1, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae4:	6861      	ldr	r1, [r4, #4]
 8002ae6:	ea21 0202 	bic.w	r2, r1, r2
 8002aea:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aec:	68a2      	ldr	r2, [r4, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af0:	ea22 0505 	bic.w	r5, r2, r5
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af4:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af6:	60a5      	str	r5, [r4, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af8:	d196      	bne.n	8002a28 <HAL_GPIO_DeInit+0x60>
    }
  }
}
 8002afa:	b003      	add	sp, #12
 8002afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b00:	2100      	movs	r1, #0
 8002b02:	e7b9      	b.n	8002a78 <HAL_GPIO_DeInit+0xb0>
 8002b04:	fa0c f101 	lsl.w	r1, ip, r1
 8002b08:	e7b6      	b.n	8002a78 <HAL_GPIO_DeInit+0xb0>
 8002b0a:	2702      	movs	r7, #2
 8002b0c:	fa07 f101 	lsl.w	r1, r7, r1
 8002b10:	e7b2      	b.n	8002a78 <HAL_GPIO_DeInit+0xb0>
 8002b12:	fa0a f101 	lsl.w	r1, sl, r1
 8002b16:	e7af      	b.n	8002a78 <HAL_GPIO_DeInit+0xb0>
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	080099fc 	.word	0x080099fc
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b38:	460c      	mov	r4, r1
 8002b3a:	b129      	cbz	r1, 8002b48 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b3c:	692b      	ldr	r3, [r5, #16]
 8002b3e:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002b40:	bf14      	ite	ne
 8002b42:	2001      	movne	r0, #1
 8002b44:	2000      	moveq	r0, #0
 8002b46:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <HAL_GPIO_ReadPin+0x20>)
 8002b4a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002b4e:	f7fe fdcd 	bl	80016ec <assert_failed>
 8002b52:	e7f3      	b.n	8002b3c <HAL_GPIO_ReadPin+0x8>
 8002b54:	080099fc 	.word	0x080099fc

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b5e:	460c      	mov	r4, r1
 8002b60:	b161      	cbz	r1, 8002b7c <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b62:	2d01      	cmp	r5, #1
 8002b64:	d803      	bhi.n	8002b6e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8002b66:	b905      	cbnz	r5, 8002b6a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	61b4      	str	r4, [r6, #24]
  }
}
 8002b6c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002b6e:	4806      	ldr	r0, [pc, #24]	; (8002b88 <HAL_GPIO_WritePin+0x30>)
 8002b70:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8002b74:	f7fe fdba 	bl	80016ec <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b78:	61b4      	str	r4, [r6, #24]
}
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <HAL_GPIO_WritePin+0x30>)
 8002b7e:	f240 119b 	movw	r1, #411	; 0x19b
 8002b82:	f7fe fdb3 	bl	80016ec <assert_failed>
 8002b86:	e7ec      	b.n	8002b62 <HAL_GPIO_WritePin+0xa>
 8002b88:	080099fc 	.word	0x080099fc

08002b8c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b8c:	b538      	push	{r3, r4, r5, lr}
 8002b8e:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b90:	460c      	mov	r4, r1
 8002b92:	b141      	cbz	r1, 8002ba6 <HAL_GPIO_TogglePin+0x1a>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b94:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b96:	ea04 0301 	and.w	r3, r4, r1
 8002b9a:	ea24 0401 	bic.w	r4, r4, r1
 8002b9e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002ba2:	61ac      	str	r4, [r5, #24]
}
 8002ba4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ba6:	4803      	ldr	r0, [pc, #12]	; (8002bb4 <HAL_GPIO_TogglePin+0x28>)
 8002ba8:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002bac:	f7fe fd9e 	bl	80016ec <assert_failed>
 8002bb0:	e7f0      	b.n	8002b94 <HAL_GPIO_TogglePin+0x8>
 8002bb2:	bf00      	nop
 8002bb4:	080099fc 	.word	0x080099fc

08002bb8 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop

08002bbc <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002bbe:	6951      	ldr	r1, [r2, #20]
 8002bc0:	4201      	tst	r1, r0
 8002bc2:	d100      	bne.n	8002bc6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002bc4:	4770      	bx	lr
{
 8002bc6:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bc8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bca:	f7ff fff5 	bl	8002bb8 <HAL_GPIO_EXTI_Callback>
}
 8002bce:	bd08      	pop	{r3, pc}
 8002bd0:	40013c00 	.word	0x40013c00

08002bd4 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	f000 8135 	beq.w	8002e44 <HAL_I2C_Init+0x270>
{
 8002bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002bdc:	4a9a      	ldr	r2, [pc, #616]	; (8002e48 <HAL_I2C_Init+0x274>)
 8002bde:	6803      	ldr	r3, [r0, #0]
 8002be0:	4293      	cmp	r3, r2
 8002be2:	4604      	mov	r4, r0
 8002be4:	d00c      	beq.n	8002c00 <HAL_I2C_Init+0x2c>
 8002be6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d008      	beq.n	8002c00 <HAL_I2C_Init+0x2c>
 8002bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d004      	beq.n	8002c00 <HAL_I2C_Init+0x2c>
 8002bf6:	4895      	ldr	r0, [pc, #596]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002bf8:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002bfc:	f7fe fd76 	bl	80016ec <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002c00:	6863      	ldr	r3, [r4, #4]
 8002c02:	4a93      	ldr	r2, [pc, #588]	; (8002e50 <HAL_I2C_Init+0x27c>)
 8002c04:	3b01      	subs	r3, #1
 8002c06:	4293      	cmp	r3, r2
 8002c08:	f200 8103 	bhi.w	8002e12 <HAL_I2C_Init+0x23e>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002c0c:	68a3      	ldr	r3, [r4, #8]
 8002c0e:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8002c12:	f040 80d9 	bne.w	8002dc8 <HAL_I2C_Init+0x1f4>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002c16:	68e3      	ldr	r3, [r4, #12]
 8002c18:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c1c:	f023 0303 	bic.w	r3, r3, #3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 80de 	bne.w	8002de2 <HAL_I2C_Init+0x20e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002c26:	6923      	ldr	r3, [r4, #16]
 8002c28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c30:	d004      	beq.n	8002c3c <HAL_I2C_Init+0x68>
 8002c32:	4886      	ldr	r0, [pc, #536]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002c34:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002c38:	f7fe fd58 	bl	80016ec <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002c3c:	6963      	ldr	r3, [r4, #20]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	f200 80d5 	bhi.w	8002dee <HAL_I2C_Init+0x21a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002c44:	69a3      	ldr	r3, [r4, #24]
 8002c46:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8002c4a:	f040 80da 	bne.w	8002e02 <HAL_I2C_Init+0x22e>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002c4e:	69e3      	ldr	r3, [r4, #28]
 8002c50:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8002c54:	d004      	beq.n	8002c60 <HAL_I2C_Init+0x8c>
 8002c56:	487d      	ldr	r0, [pc, #500]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002c58:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002c5c:	f7fe fd46 	bl	80016ec <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002c60:	6a23      	ldr	r3, [r4, #32]
 8002c62:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8002c66:	f040 809d 	bne.w	8002da4 <HAL_I2C_Init+0x1d0>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c6a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002c6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80a2 	beq.w	8002dbc <HAL_I2C_Init+0x1e8>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c78:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c7a:	2224      	movs	r2, #36	; 0x24
 8002c7c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c98:	f001 fafc 	bl	8004294 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9c:	6865      	ldr	r5, [r4, #4]
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <HAL_I2C_Init+0x280>)
 8002ca0:	429d      	cmp	r5, r3
 8002ca2:	d84e      	bhi.n	8002d42 <HAL_I2C_Init+0x16e>
 8002ca4:	4b6c      	ldr	r3, [pc, #432]	; (8002e58 <HAL_I2C_Init+0x284>)
 8002ca6:	4298      	cmp	r0, r3
 8002ca8:	f240 80b1 	bls.w	8002e0e <HAL_I2C_Init+0x23a>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cac:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002cae:	4b6b      	ldr	r3, [pc, #428]	; (8002e5c <HAL_I2C_Init+0x288>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cb0:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002cb2:	fba3 6300 	umull	r6, r3, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cb6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002cba:	ea41 4193 	orr.w	r1, r1, r3, lsr #18
 8002cbe:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cc0:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc2:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cc4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002cc8:	3301      	adds	r3, #1
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cce:	69d1      	ldr	r1, [r2, #28]
 8002cd0:	3801      	subs	r0, #1
 8002cd2:	006b      	lsls	r3, r5, #1
 8002cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd8:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002ce2:	4203      	tst	r3, r0
 8002ce4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ce8:	f040 8099 	bne.w	8002e1e <HAL_I2C_Init+0x24a>
 8002cec:	2304      	movs	r3, #4
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cf2:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8002cf6:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cf8:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cfa:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8002cfe:	432b      	orrs	r3, r5
 8002d00:	4303      	orrs	r3, r0
 8002d02:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d04:	6890      	ldr	r0, [r2, #8]
 8002d06:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d08:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d0a:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8002d0e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002d12:	4329      	orrs	r1, r5
 8002d14:	4301      	orrs	r1, r0
 8002d16:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d18:	68d1      	ldr	r1, [r2, #12]
 8002d1a:	69a0      	ldr	r0, [r4, #24]
 8002d1c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002d20:	4303      	orrs	r3, r0
 8002d22:	430b      	orrs	r3, r1
 8002d24:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d26:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d28:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002d2a:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8002d30:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d32:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d38:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 8002d3e:	4618      	mov	r0, r3
}
 8002d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_I2C_Init+0x28c>)
 8002d44:	4298      	cmp	r0, r3
 8002d46:	d962      	bls.n	8002e0e <HAL_I2C_Init+0x23a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d48:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002d4a:	4944      	ldr	r1, [pc, #272]	; (8002e5c <HAL_I2C_Init+0x288>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d4c:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d4e:	4f45      	ldr	r7, [pc, #276]	; (8002e64 <HAL_I2C_Init+0x290>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002d50:	fba1 3100 	umull	r3, r1, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d54:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8002d58:	ea46 4691 	orr.w	r6, r6, r1, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d5c:	f44f 7396 	mov.w	r3, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002d60:	0c89      	lsrs	r1, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d62:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d64:	fb03 f301 	mul.w	r3, r3, r1
 8002d68:	fba7 1303 	umull	r1, r3, r7, r3
 8002d6c:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d6e:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002d76:	3301      	adds	r3, #1
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d7c:	69d1      	ldr	r1, [r2, #28]
 8002d7e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002d82:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002d86:	2e00      	cmp	r6, #0
 8002d88:	d14c      	bne.n	8002e24 <HAL_I2C_Init+0x250>
 8002d8a:	3801      	subs	r0, #1
 8002d8c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8002d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d94:	3301      	adds	r3, #1
 8002d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d050      	beq.n	8002e40 <HAL_I2C_Init+0x26c>
 8002d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da2:	e7a4      	b.n	8002cee <HAL_I2C_Init+0x11a>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002da4:	4829      	ldr	r0, [pc, #164]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002da6:	f240 11c7 	movw	r1, #455	; 0x1c7
 8002daa:	f7fe fc9f 	bl	80016ec <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002db2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f47f af5e 	bne.w	8002c78 <HAL_I2C_Init+0xa4>
    hi2c->Lock = HAL_UNLOCKED;
 8002dbc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f7fe fbad 	bl	8001520 <HAL_I2C_MspInit>
 8002dc6:	e757      	b.n	8002c78 <HAL_I2C_Init+0xa4>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002dc8:	4820      	ldr	r0, [pc, #128]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002dca:	f240 11c1 	movw	r1, #449	; 0x1c1
 8002dce:	f7fe fc8d 	bl	80016ec <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002dd2:	68e3      	ldr	r3, [r4, #12]
 8002dd4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dd8:	f023 0303 	bic.w	r3, r3, #3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f43f af22 	beq.w	8002c26 <HAL_I2C_Init+0x52>
 8002de2:	481a      	ldr	r0, [pc, #104]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002de4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002de8:	f7fe fc80 	bl	80016ec <assert_failed>
 8002dec:	e71b      	b.n	8002c26 <HAL_I2C_Init+0x52>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002dee:	4817      	ldr	r0, [pc, #92]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002df0:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002df4:	f7fe fc7a 	bl	80016ec <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002df8:	69a3      	ldr	r3, [r4, #24]
 8002dfa:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8002dfe:	f43f af26 	beq.w	8002c4e <HAL_I2C_Init+0x7a>
 8002e02:	4812      	ldr	r0, [pc, #72]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002e04:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002e08:	f7fe fc70 	bl	80016ec <assert_failed>
 8002e0c:	e71f      	b.n	8002c4e <HAL_I2C_Init+0x7a>
    return HAL_ERROR;
 8002e0e:	2001      	movs	r0, #1
}
 8002e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002e12:	480e      	ldr	r0, [pc, #56]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002e14:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002e18:	f7fe fc68 	bl	80016ec <assert_failed>
 8002e1c:	e6f6      	b.n	8002c0c <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e22:	e764      	b.n	8002cee <HAL_I2C_Init+0x11a>
 8002e24:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002e28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e2c:	3801      	subs	r0, #1
 8002e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	b113      	cbz	r3, 8002e40 <HAL_I2C_Init+0x26c>
 8002e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e3e:	e756      	b.n	8002cee <HAL_I2C_Init+0x11a>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e754      	b.n	8002cee <HAL_I2C_Init+0x11a>
    return HAL_ERROR;
 8002e44:	2001      	movs	r0, #1
}
 8002e46:	4770      	bx	lr
 8002e48:	40005400 	.word	0x40005400
 8002e4c:	08009a38 	.word	0x08009a38
 8002e50:	00061a7f 	.word	0x00061a7f
 8002e54:	000186a0 	.word	0x000186a0
 8002e58:	001e847f 	.word	0x001e847f
 8002e5c:	431bde83 	.word	0x431bde83
 8002e60:	003d08ff 	.word	0x003d08ff
 8002e64:	10624dd3 	.word	0x10624dd3

08002e68 <HAL_I2C_MasterTxCpltCallback>:
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop

08002e6c <HAL_I2C_MasterRxCpltCallback>:
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop

08002e70 <HAL_I2C_SlaveTxCpltCallback>:
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop

08002e74 <HAL_I2C_SlaveRxCpltCallback>:
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop

08002e78 <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop

08002e7c <HAL_I2C_ListenCpltCallback>:
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop

08002e80 <HAL_I2C_MemTxCpltCallback>:
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop

08002e84 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e84:	b538      	push	{r3, r4, r5, lr}
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e86:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d

  if (hi2c->EventCount == 0U)
 8002e8a:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002e8c:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8002e8e:	b959      	cbnz	r1, 8002ea8 <I2C_MemoryTransmit_TXE_BTF+0x24>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e90:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e92:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e94:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e96:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e98:	d032      	beq.n	8002f00 <I2C_MemoryTransmit_TXE_BTF+0x7c>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e9e:	610a      	str	r2, [r1, #16]

      hi2c->EventCount++;
 8002ea0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002ea2:	3201      	adds	r2, #1
 8002ea4:	6502      	str	r2, [r0, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002ea6:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 8002ea8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002eaa:	2901      	cmp	r1, #1
 8002eac:	d020      	beq.n	8002ef0 <I2C_MemoryTransmit_TXE_BTF+0x6c>
  else if (hi2c->EventCount == 2U)
 8002eae:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002eb0:	2902      	cmp	r1, #2
 8002eb2:	d1f8      	bne.n	8002ea6 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8002eb4:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002eb6:	2a22      	cmp	r2, #34	; 0x22
 8002eb8:	d02c      	beq.n	8002f14 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002eba:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002ebc:	b289      	uxth	r1, r1
 8002ebe:	bb29      	cbnz	r1, 8002f0c <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ec0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002ec2:	b289      	uxth	r1, r1
 8002ec4:	2900      	cmp	r1, #0
 8002ec6:	d1ee      	bne.n	8002ea6 <I2C_MemoryTransmit_TXE_BTF+0x22>
 8002ec8:	2a21      	cmp	r2, #33	; 0x21
 8002eca:	d1ec      	bne.n	8002ea6 <I2C_MemoryTransmit_TXE_BTF+0x22>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ecc:	6802      	ldr	r2, [r0, #0]
 8002ece:	6854      	ldr	r4, [r2, #4]
 8002ed0:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8002ed4:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed6:	6814      	ldr	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	2520      	movs	r5, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eda:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8002ede:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ee0:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee6:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002eea:	f7ff ffc9 	bl	8002e80 <HAL_I2C_MemTxCpltCallback>
}
 8002eee:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ef0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002ef2:	6801      	ldr	r1, [r0, #0]
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8002ef8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002efa:	3201      	adds	r2, #1
 8002efc:	6502      	str	r2, [r0, #80]	; 0x50
}
 8002efe:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8002f04:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002f06:	3202      	adds	r2, #2
 8002f08:	6502      	str	r2, [r0, #80]	; 0x50
}
 8002f0a:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f0c:	2a21      	cmp	r2, #33	; 0x21
 8002f0e:	d007      	beq.n	8002f20 <I2C_MemoryTransmit_TXE_BTF+0x9c>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 8002f12:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f14:	6802      	ldr	r2, [r0, #0]
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]
}
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f20:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002f22:	6802      	ldr	r2, [r0, #0]
 8002f24:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002f28:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8002f2a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002f2c:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f2e:	3a01      	subs	r2, #1
 8002f30:	b292      	uxth	r2, r2
 8002f32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f34:	bd38      	pop	{r3, r4, r5, pc}
 8002f36:	bf00      	nop

08002f38 <HAL_I2C_MemRxCpltCallback>:
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop

08002f3c <HAL_I2C_ErrorCallback>:
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop

08002f40 <HAL_I2C_AbortCpltCallback>:
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop

08002f44 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f44:	b570      	push	{r4, r5, r6, lr}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f46:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <I2C_DMAAbort+0xec>)
 8002f48:	4a3a      	ldr	r2, [pc, #232]	; (8003034 <I2C_DMAAbort+0xf0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f4c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002f4e:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f50:	08db      	lsrs	r3, r3, #3
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
  __IO uint32_t count = 0U;
 8002f56:	2200      	movs	r2, #0
 8002f58:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f5a:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f5c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002f60:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002f6a:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f6c:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f6e:	e005      	b.n	8002f7c <I2C_DMAAbort+0x38>
    if (count == 0U)
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
 8002f70:	9b01      	ldr	r3, [sp, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	9301      	str	r3, [sp, #4]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f76:	6813      	ldr	r3, [r2, #0]
 8002f78:	059b      	lsls	r3, r3, #22
 8002f7a:	d506      	bpl.n	8002f8a <I2C_DMAAbort+0x46>
    if (count == 0U)
 8002f7c:	9b01      	ldr	r3, [sp, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f6      	bne.n	8002f70 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f84:	f043 0320 	orr.w	r3, r3, #32
 8002f88:	6403      	str	r3, [r0, #64]	; 0x40
  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
  }
  if (hi2c->hdmarx != NULL)
 8002f8a:	e9d0 430d 	ldrd	r4, r3, [r0, #52]	; 0x34
  if (hi2c->hdmatx != NULL)
 8002f8e:	b344      	cbz	r4, 8002fe2 <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002f90:	2500      	movs	r5, #0
 8002f92:	63e5      	str	r5, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8002f94:	b1f3      	cbz	r3, 8002fd4 <I2C_DMAAbort+0x90>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f96:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002f98:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9a:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8002f9e:	6016      	str	r6, [r2, #0]

  hi2c->XferCount = 0U;
 8002fa0:	8545      	strh	r5, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002fa2:	6525      	str	r5, [r4, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002fa4:	2400      	movs	r4, #0
 8002fa6:	651c      	str	r4, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002fa8:	6813      	ldr	r3, [r2, #0]
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6013      	str	r3, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fb0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fb4:	2b60      	cmp	r3, #96	; 0x60
 8002fb6:	d029      	beq.n	800300c <I2C_DMAAbort+0xc8>
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fb8:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8002fbc:	2928      	cmp	r1, #40	; 0x28
 8002fbe:	d018      	beq.n	8002ff2 <I2C_DMAAbort+0xae>
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_LISTEN;
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002fc0:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc2:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002fcc:	f7ff ffb6 	bl	8002f3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd4:	6815      	ldr	r5, [r2, #0]
 8002fd6:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8002fda:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8002fdc:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002fde:	6523      	str	r3, [r4, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8002fe0:	e7e2      	b.n	8002fa8 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8002fe2:	b1f3      	cbz	r3, 8003022 <I2C_DMAAbort+0xde>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe4:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002fe6:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe8:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8002fec:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8002fee:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8002ff0:	e7d8      	b.n	8002fa4 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8002ff2:	6813      	ldr	r3, [r2, #0]
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffa:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ffc:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003002:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003004:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003006:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 800300a:	e7df      	b.n	8002fcc <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800300c:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 800300e:	2220      	movs	r2, #32
 8003010:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003014:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003018:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800301a:	f7ff ff91 	bl	8002f40 <HAL_I2C_AbortCpltCallback>
}
 800301e:	b002      	add	sp, #8
 8003020:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003022:	6814      	ldr	r4, [r2, #0]
 8003024:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8003028:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 800302a:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800302c:	e7bc      	b.n	8002fa8 <I2C_DMAAbort+0x64>
 800302e:	bf00      	nop
 8003030:	20000000 	.word	0x20000000
 8003034:	14f8b589 	.word	0x14f8b589

08003038 <I2C_ITError>:
{
 8003038:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800303a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800303e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003042:	2b10      	cmp	r3, #16
{
 8003044:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003046:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003048:	d039      	beq.n	80030be <I2C_ITError+0x86>
 800304a:	b2d9      	uxtb	r1, r3
 800304c:	2940      	cmp	r1, #64	; 0x40
 800304e:	d036      	beq.n	80030be <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003050:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8003054:	2928      	cmp	r1, #40	; 0x28
 8003056:	d03d      	beq.n	80030d4 <I2C_ITError+0x9c>
 8003058:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	0508      	lsls	r0, r1, #20
 800305e:	d407      	bmi.n	8003070 <I2C_ITError+0x38>
 8003060:	2a60      	cmp	r2, #96	; 0x60
 8003062:	d005      	beq.n	8003070 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8003064:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003066:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003068:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800306c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003070:	2200      	movs	r2, #0
 8003072:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800307a:	d134      	bne.n	80030e6 <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800307c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003080:	2960      	cmp	r1, #96	; 0x60
 8003082:	d075      	beq.n	8003170 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	0650      	lsls	r0, r2, #25
 8003088:	d505      	bpl.n	8003096 <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003092:	3301      	adds	r3, #1
 8003094:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003096:	4620      	mov	r0, r4
 8003098:	f7ff ff50 	bl	8002f3c <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 800309c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800309e:	0719      	lsls	r1, r3, #28
 80030a0:	d004      	beq.n	80030ac <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	6853      	ldr	r3, [r2, #4]
 80030a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030aa:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80030ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80030b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030b2:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 80030b4:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80030b6:	d501      	bpl.n	80030bc <I2C_ITError+0x84>
 80030b8:	2b28      	cmp	r3, #40	; 0x28
 80030ba:	d02f      	beq.n	800311c <I2C_ITError+0xe4>
}
 80030bc:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030be:	2a22      	cmp	r2, #34	; 0x22
 80030c0:	d1c6      	bne.n	8003050 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ca:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	0512      	lsls	r2, r2, #20
 80030d0:	d5c8      	bpl.n	8003064 <I2C_ITError+0x2c>
 80030d2:	e7cd      	b.n	8003070 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030d8:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80030da:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80030e4:	d0ca      	beq.n	800307c <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80030e6:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80030e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80030ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ee:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80030f0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d01e      	beq.n	8003136 <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <I2C_ITError+0x164>)
 80030fa:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80030fc:	f7ff f9d0 	bl	80024a0 <HAL_DMA_Abort_IT>
 8003100:	2800      	cmp	r0, #0
 8003102:	d0cb      	beq.n	800309c <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 8003104:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003106:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003108:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800310a:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003112:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003116:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003118:	4798      	blx	r3
 800311a:	e7bf      	b.n	800309c <I2C_ITError+0x64>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <I2C_ITError+0x168>)
 800311e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8003120:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8003122:	2300      	movs	r3, #0
 8003124:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8003126:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8003128:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800312c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003130:	f7ff fea4 	bl	8002e7c <HAL_I2C_ListenCpltCallback>
}
 8003134:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003136:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003138:	4b18      	ldr	r3, [pc, #96]	; (800319c <I2C_ITError+0x164>)
 800313a:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800313c:	f7ff f9b0 	bl	80024a0 <HAL_DMA_Abort_IT>
 8003140:	2800      	cmp	r0, #0
 8003142:	d0ab      	beq.n	800309c <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	0651      	lsls	r1, r2, #25
 800314a:	d506      	bpl.n	800315a <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8003152:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	3201      	adds	r2, #1
 8003158:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800315a:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800315c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800315e:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8003162:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003164:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003166:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800316a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800316c:	4798      	blx	r3
 800316e:	e795      	b.n	800309c <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8003170:	2120      	movs	r1, #32
 8003172:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003176:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	0652      	lsls	r2, r2, #25
 800317c:	d506      	bpl.n	800318c <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003184:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	3201      	adds	r2, #1
 800318a:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003194:	4620      	mov	r0, r4
 8003196:	f7ff fed3 	bl	8002f40 <HAL_I2C_AbortCpltCallback>
 800319a:	e77f      	b.n	800309c <I2C_ITError+0x64>
 800319c:	08002f45 	.word	0x08002f45
 80031a0:	ffff0000 	.word	0xffff0000

080031a4 <HAL_I2C_EV_IRQHandler>:
{
 80031a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031a6:	6803      	ldr	r3, [r0, #0]
{
 80031a8:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031aa:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031ae:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031b2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031b6:	2910      	cmp	r1, #16
{
 80031b8:	b08c      	sub	sp, #48	; 0x30
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031ba:	b2cd      	uxtb	r5, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031bc:	d021      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x5e>
 80031be:	2d40      	cmp	r5, #64	; 0x40
 80031c0:	d01f      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	2900      	cmp	r1, #0
 80031c8:	f000 8093 	beq.w	80032f2 <HAL_I2C_EV_IRQHandler+0x14e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031cc:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 80031ce:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d0:	f011 0f02 	tst.w	r1, #2
 80031d4:	f3c1 0640 	ubfx	r6, r1, #1, #1
 80031d8:	d056      	beq.n	8003288 <HAL_I2C_EV_IRQHandler+0xe4>
 80031da:	0586      	lsls	r6, r0, #22
 80031dc:	d556      	bpl.n	800328c <HAL_I2C_EV_IRQHandler+0xe8>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80031e0:	b102      	cbz	r2, 80031e4 <HAL_I2C_EV_IRQHandler+0x40>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031e2:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031e4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80031e8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80031ec:	2a28      	cmp	r2, #40	; 0x28
 80031ee:	f000 8217 	beq.w	8003620 <HAL_I2C_EV_IRQHandler+0x47c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031f2:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 80031f6:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031f8:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80031fa:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80031fe:	b00c      	add	sp, #48	; 0x30
 8003200:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003202:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003204:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003206:	f012 0f01 	tst.w	r2, #1
 800320a:	d11a      	bne.n	8003242 <HAL_I2C_EV_IRQHandler+0x9e>
 800320c:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8003210:	d0f5      	beq.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 8003212:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003216:	d0f2      	beq.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003218:	0716      	lsls	r6, r2, #28
 800321a:	d56d      	bpl.n	80032f8 <HAL_I2C_EV_IRQHandler+0x154>
 800321c:	0586      	lsls	r6, r0, #22
 800321e:	f140 8083 	bpl.w	8003328 <HAL_I2C_EV_IRQHandler+0x184>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003222:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003226:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003228:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800322a:	2900      	cmp	r1, #0
 800322c:	f000 81df 	beq.w	80035ee <HAL_I2C_EV_IRQHandler+0x44a>
 8003230:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8003232:	2a00      	cmp	r2, #0
 8003234:	f000 81db 	beq.w	80035ee <HAL_I2C_EV_IRQHandler+0x44a>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	e7dd      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003242:	0586      	lsls	r6, r0, #22
 8003244:	d56e      	bpl.n	8003324 <HAL_I2C_EV_IRQHandler+0x180>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003246:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003248:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 800324c:	f000 81e5 	beq.w	800361a <HAL_I2C_EV_IRQHandler+0x476>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003250:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003252:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003256:	bf04      	itt	eq
 8003258:	2208      	moveq	r2, #8
 800325a:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800325c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003260:	2a40      	cmp	r2, #64	; 0x40
 8003262:	f000 81d3 	beq.w	800360c <HAL_I2C_EV_IRQHandler+0x468>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003266:	6922      	ldr	r2, [r4, #16]
 8003268:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800326c:	f000 81ae 	beq.w	80035cc <HAL_I2C_EV_IRQHandler+0x428>
      if (hi2c->EventCount == 0U)
 8003270:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003272:	2a00      	cmp	r2, #0
 8003274:	f040 81e8 	bne.w	8003648 <HAL_I2C_EV_IRQHandler+0x4a4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003278:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800327a:	11d2      	asrs	r2, r2, #7
 800327c:	f002 0206 	and.w	r2, r2, #6
 8003280:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	e7ba      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003288:	06cd      	lsls	r5, r1, #27
 800328a:	d47c      	bmi.n	8003386 <HAL_I2C_EV_IRQHandler+0x1e2>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800328c:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8003290:	2a21      	cmp	r2, #33	; 0x21
 8003292:	f000 80f5 	beq.w	8003480 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003296:	064a      	lsls	r2, r1, #25
 8003298:	f140 8132 	bpl.w	8003500 <HAL_I2C_EV_IRQHandler+0x35c>
 800329c:	0546      	lsls	r6, r0, #21
 800329e:	f140 812f 	bpl.w	8003500 <HAL_I2C_EV_IRQHandler+0x35c>
 80032a2:	074d      	lsls	r5, r1, #29
 80032a4:	f100 812f 	bmi.w	8003506 <HAL_I2C_EV_IRQHandler+0x362>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032a8:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80032ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80032ae:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032b0:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80032b2:	2a00      	cmp	r2, #0
 80032b4:	d0a3      	beq.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80032bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80032be:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80032c8:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032ca:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80032cc:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d195      	bne.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 80032d2:	292a      	cmp	r1, #42	; 0x2a
 80032d4:	d193      	bne.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032d6:	6822      	ldr	r2, [r4, #0]
 80032d8:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032da:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032e0:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032e2:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032e4:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032e6:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032e8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032ec:	f7ff fdc2 	bl	8002e74 <HAL_I2C_SlaveRxCpltCallback>
 80032f0:	e785      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032f2:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032f4:	6959      	ldr	r1, [r3, #20]
 80032f6:	e76b      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f8:	0796      	lsls	r6, r2, #30
 80032fa:	d515      	bpl.n	8003328 <HAL_I2C_EV_IRQHandler+0x184>
 80032fc:	0586      	lsls	r6, r0, #22
 80032fe:	d513      	bpl.n	8003328 <HAL_I2C_EV_IRQHandler+0x184>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003300:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003304:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003306:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003308:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800330c:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800330e:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003310:	f000 81ae 	beq.w	8003670 <HAL_I2C_EV_IRQHandler+0x4cc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003314:	2200      	movs	r2, #0
 8003316:	9209      	str	r2, [sp, #36]	; 0x24
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	9209      	str	r2, [sp, #36]	; 0x24
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	9309      	str	r3, [sp, #36]	; 0x24
 8003320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003322:	e76c      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003324:	0716      	lsls	r6, r2, #28
 8003326:	d5e7      	bpl.n	80032f8 <HAL_I2C_EV_IRQHandler+0x154>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003328:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800332c:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800332e:	f000 80f3 	beq.w	8003518 <HAL_I2C_EV_IRQHandler+0x374>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003332:	050e      	lsls	r6, r1, #20
 8003334:	f53f af63 	bmi.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003338:	0611      	lsls	r1, r2, #24
 800333a:	f140 8113 	bpl.w	8003564 <HAL_I2C_EV_IRQHandler+0x3c0>
 800333e:	0546      	lsls	r6, r0, #21
 8003340:	f140 8110 	bpl.w	8003564 <HAL_I2C_EV_IRQHandler+0x3c0>
 8003344:	0751      	lsls	r1, r2, #29
 8003346:	f100 8110 	bmi.w	800356a <HAL_I2C_EV_IRQHandler+0x3c6>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800334a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800334e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003350:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003354:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003356:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003358:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800335a:	2800      	cmp	r0, #0
 800335c:	f040 8235 	bne.w	80037ca <HAL_I2C_EV_IRQHandler+0x626>
 8003360:	2a21      	cmp	r2, #33	; 0x21
 8003362:	f000 8325 	beq.w	80039b0 <HAL_I2C_EV_IRQHandler+0x80c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003366:	2940      	cmp	r1, #64	; 0x40
 8003368:	f47f af49 	bne.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800336c:	2a22      	cmp	r2, #34	; 0x22
 800336e:	f47f af46 	bne.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    if (hi2c->XferCount == 0U)
 8003372:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003374:	b292      	uxth	r2, r2
 8003376:	2a00      	cmp	r2, #0
 8003378:	f040 82a4 	bne.w	80038c4 <HAL_I2C_EV_IRQHandler+0x720>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	e73b      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003386:	0585      	lsls	r5, r0, #22
 8003388:	d580      	bpl.n	800328c <HAL_I2C_EV_IRQHandler+0xe8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800338a:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003394:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003396:	960b      	str	r6, [sp, #44]	; 0x2c
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	920b      	str	r2, [sp, #44]	; 0x2c
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ac:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	0510      	lsls	r0, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033b2:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033b4:	d521      	bpl.n	80033fa <HAL_I2C_EV_IRQHandler+0x256>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033b6:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80033ba:	2a22      	cmp	r2, #34	; 0x22
 80033bc:	f000 8175 	beq.w	80036aa <HAL_I2C_EV_IRQHandler+0x506>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80033c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80033c2:	6802      	ldr	r2, [r0, #0]
 80033c4:	6852      	ldr	r2, [r2, #4]
 80033c6:	b292      	uxth	r2, r2
 80033c8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80033ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80033cc:	b292      	uxth	r2, r2
 80033ce:	b11a      	cbz	r2, 80033d8 <HAL_I2C_EV_IRQHandler+0x234>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80033d2:	f042 0204 	orr.w	r2, r2, #4
 80033d6:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033de:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033e0:	f7ff f960 	bl	80026a4 <HAL_DMA_GetState>
 80033e4:	2801      	cmp	r0, #1
 80033e6:	d008      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x256>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80033ea:	4ba0      	ldr	r3, [pc, #640]	; (800366c <HAL_I2C_EV_IRQHandler+0x4c8>)
 80033ec:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033ee:	f7ff f857 	bl	80024a0 <HAL_DMA_Abort_IT>
 80033f2:	b110      	cbz	r0, 80033fa <HAL_I2C_EV_IRQHandler+0x256>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80033f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80033f8:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80033fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	b313      	cbz	r3, 8003446 <HAL_I2C_EV_IRQHandler+0x2a2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	0751      	lsls	r1, r2, #29
 8003406:	d50a      	bpl.n	800341e <HAL_I2C_EV_IRQHandler+0x27a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003408:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 800340e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003410:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003412:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 8003414:	3a01      	subs	r2, #1
 8003416:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8003418:	3101      	adds	r1, #1
      hi2c->XferCount--;
 800341a:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800341c:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	0652      	lsls	r2, r2, #25
 8003422:	d509      	bpl.n	8003438 <HAL_I2C_EV_IRQHandler+0x294>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 800342a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800342c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800342e:	3b01      	subs	r3, #1
 8003430:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003432:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8003434:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003436:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8003438:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	b11b      	cbz	r3, 8003446 <HAL_I2C_EV_IRQHandler+0x2a2>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800343e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 80d9 	bne.w	8003600 <HAL_I2C_EV_IRQHandler+0x45c>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800344e:	2d2a      	cmp	r5, #42	; 0x2a
 8003450:	f000 814c 	beq.w	80036ec <HAL_I2C_EV_IRQHandler+0x548>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003454:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003458:	2b28      	cmp	r3, #40	; 0x28
 800345a:	f000 814f 	beq.w	80036fc <HAL_I2C_EV_IRQHandler+0x558>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800345e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003460:	2b22      	cmp	r3, #34	; 0x22
 8003462:	d002      	beq.n	800346a <HAL_I2C_EV_IRQHandler+0x2c6>
 8003464:	2d22      	cmp	r5, #34	; 0x22
 8003466:	f47f aeca 	bne.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
        hi2c->PreviousState = I2C_STATE_NONE;
 800346a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800346c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800346e:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003470:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003472:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003476:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800347a:	f7ff fcfb 	bl	8002e74 <HAL_I2C_SlaveRxCpltCallback>
 800347e:	e6be      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003480:	060e      	lsls	r6, r1, #24
 8003482:	d528      	bpl.n	80034d6 <HAL_I2C_EV_IRQHandler+0x332>
 8003484:	0545      	lsls	r5, r0, #21
 8003486:	d526      	bpl.n	80034d6 <HAL_I2C_EV_IRQHandler+0x332>
 8003488:	074e      	lsls	r6, r1, #29
 800348a:	d427      	bmi.n	80034dc <HAL_I2C_EV_IRQHandler+0x338>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800348c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003490:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003492:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003494:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003496:	2900      	cmp	r1, #0
 8003498:	f43f aeb1 	beq.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800349e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80034a2:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 80034a4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80034a6:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80034a8:	3901      	subs	r1, #1
 80034aa:	b289      	uxth	r1, r1
 80034ac:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034ae:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80034b0:	b289      	uxth	r1, r1
 80034b2:	2900      	cmp	r1, #0
 80034b4:	f47f aea3 	bne.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 80034b8:	2829      	cmp	r0, #41	; 0x29
 80034ba:	f47f aea0 	bne.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034be:	6859      	ldr	r1, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034c0:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034c2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80034c6:	6059      	str	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034c8:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034ca:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034cc:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034d0:	f7ff fcce 	bl	8002e70 <HAL_I2C_SlaveTxCpltCallback>
 80034d4:	e693      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d6:	074d      	lsls	r5, r1, #29
 80034d8:	f57f ae91 	bpl.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 80034dc:	0581      	lsls	r1, r0, #22
 80034de:	f57f ae8e 	bpl.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
  if (hi2c->XferCount != 0U)
 80034e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80034e4:	b292      	uxth	r2, r2
 80034e6:	2a00      	cmp	r2, #0
 80034e8:	f43f ae89 	beq.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034ee:	f812 1b01 	ldrb.w	r1, [r2], #1
 80034f2:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 80034f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80034f6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80034fe:	e67e      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003500:	0749      	lsls	r1, r1, #29
 8003502:	f57f ae7c 	bpl.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 8003506:	0582      	lsls	r2, r0, #22
 8003508:	f57f ae79 	bpl.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
  if (hi2c->XferCount != 0U)
 800350c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800350e:	b292      	uxth	r2, r2
 8003510:	2a00      	cmp	r2, #0
 8003512:	f43f ae74 	beq.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 8003516:	e01a      	b.n	800354e <HAL_I2C_EV_IRQHandler+0x3aa>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003518:	050d      	lsls	r5, r1, #20
 800351a:	f53f ae70 	bmi.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800351e:	0651      	lsls	r1, r2, #25
 8003520:	d42f      	bmi.n	8003582 <HAL_I2C_EV_IRQHandler+0x3de>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003522:	0751      	lsls	r1, r2, #29
 8003524:	f57f ae6b 	bpl.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 8003528:	0582      	lsls	r2, r0, #22
 800352a:	f57f ae68 	bpl.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800352e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8003530:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003532:	b292      	uxth	r2, r2
 8003534:	2a04      	cmp	r2, #4
 8003536:	f000 8139 	beq.w	80037ac <HAL_I2C_EV_IRQHandler+0x608>
  else if (hi2c->XferCount == 3U)
 800353a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800353c:	b292      	uxth	r2, r2
 800353e:	2a03      	cmp	r2, #3
 8003540:	f000 8155 	beq.w	80037ee <HAL_I2C_EV_IRQHandler+0x64a>
  else if (hi2c->XferCount == 2U)
 8003544:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003546:	b292      	uxth	r2, r2
 8003548:	2a02      	cmp	r2, #2
 800354a:	f000 8181 	beq.w	8003850 <HAL_I2C_EV_IRQHandler+0x6ac>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8003554:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003556:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003558:	3b01      	subs	r3, #1
 800355a:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 800355c:	3201      	adds	r2, #1
    hi2c->XferCount--;
 800355e:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003560:	6262      	str	r2, [r4, #36]	; 0x24
      }
 8003562:	e64c      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003564:	0752      	lsls	r2, r2, #29
 8003566:	f57f ae4a 	bpl.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 800356a:	0586      	lsls	r6, r0, #22
 800356c:	f57f ae47 	bpl.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003570:	2d10      	cmp	r5, #16
 8003572:	f000 80f7 	beq.w	8003764 <HAL_I2C_EV_IRQHandler+0x5c0>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003576:	4620      	mov	r0, r4
}
 8003578:	b00c      	add	sp, #48	; 0x30
 800357a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800357e:	f7ff bc81 	b.w	8002e84 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003582:	0546      	lsls	r6, r0, #21
 8003584:	d5cd      	bpl.n	8003522 <HAL_I2C_EV_IRQHandler+0x37e>
 8003586:	0755      	lsls	r5, r2, #29
 8003588:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800358c:	d4cc      	bmi.n	8003528 <HAL_I2C_EV_IRQHandler+0x384>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800358e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003592:	2a22      	cmp	r2, #34	; 0x22
 8003594:	f47f ae33 	bne.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    tmp = hi2c->XferCount;
 8003598:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800359a:	b292      	uxth	r2, r2
    if (tmp > 3U)
 800359c:	2a03      	cmp	r2, #3
 800359e:	f240 8197 	bls.w	80038d0 <HAL_I2C_EV_IRQHandler+0x72c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80035a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80035aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80035b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80035b6:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 80035b8:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 80035ba:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 80035bc:	f47f ae1f 	bne.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035c0:	6822      	ldr	r2, [r4, #0]
 80035c2:	6853      	ldr	r3, [r2, #4]
 80035c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c8:	6053      	str	r3, [r2, #4]
 80035ca:	e618      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035cc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80035d0:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035d4:	bf16      	itet	ne
 80035d6:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035da:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035de:	b2d2      	uxtbne	r2, r2
 80035e0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80035e4:	b11a      	cbz	r2, 80035ee <HAL_I2C_EV_IRQHandler+0x44a>
 80035e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035e8:	2a00      	cmp	r2, #0
 80035ea:	f47f ae25 	bne.w	8003238 <HAL_I2C_EV_IRQHandler+0x94>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035f0:	2a00      	cmp	r2, #0
 80035f2:	f43f ae04 	beq.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 80035f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	f47f ae1d 	bne.w	8003238 <HAL_I2C_EV_IRQHandler+0x94>
 80035fe:	e5fe      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    I2C_ITError(hi2c);
 8003600:	4620      	mov	r0, r4
}
 8003602:	b00c      	add	sp, #48	; 0x30
 8003604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8003608:	f7ff bd16 	b.w	8003038 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 800360c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800360e:	bb3a      	cbnz	r2, 8003660 <HAL_I2C_EV_IRQHandler+0x4bc>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003610:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003616:	611a      	str	r2, [r3, #16]
 8003618:	e5f1      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800361a:	2201      	movs	r2, #1
 800361c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800361e:	e61d      	b.n	800325c <HAL_I2C_EV_IRQHandler+0xb8>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003626:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003628:	062e      	lsls	r6, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800362a:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_UNLOCK(hi2c);
 800362e:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003632:	bf54      	ite	pl
 8003634:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003636:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8003638:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800363c:	f001 0101 	and.w	r1, r1, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003640:	4620      	mov	r0, r4
 8003642:	f7ff fc19 	bl	8002e78 <HAL_I2C_AddrCallback>
 8003646:	e5da      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      else if (hi2c->EventCount == 1U)
 8003648:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800364a:	2a01      	cmp	r2, #1
 800364c:	f47f add7 	bne.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003650:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003652:	11d2      	asrs	r2, r2, #7
 8003654:	f002 0206 	and.w	r2, r2, #6
 8003658:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 800365c:	611a      	str	r2, [r3, #16]
 800365e:	e5ce      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003660:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	611a      	str	r2, [r3, #16]
 800366a:	e5c8      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 800366c:	08002f45 	.word	0x08002f45
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003670:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003672:	b911      	cbnz	r1, 800367a <HAL_I2C_EV_IRQHandler+0x4d6>
 8003674:	2a40      	cmp	r2, #64	; 0x40
 8003676:	f000 80a1 	beq.w	80037bc <HAL_I2C_EV_IRQHandler+0x618>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800367a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800367c:	b922      	cbnz	r2, 8003688 <HAL_I2C_EV_IRQHandler+0x4e4>
 800367e:	6921      	ldr	r1, [r4, #16]
 8003680:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8003684:	f000 80a5 	beq.w	80037d2 <HAL_I2C_EV_IRQHandler+0x62e>
      if (hi2c->XferCount == 0U)
 8003688:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800368a:	b292      	uxth	r2, r2
 800368c:	2a00      	cmp	r2, #0
 800368e:	d142      	bne.n	8003716 <HAL_I2C_EV_IRQHandler+0x572>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003690:	9202      	str	r2, [sp, #8]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	9202      	str	r2, [sp, #8]
 8003696:	699a      	ldr	r2, [r3, #24]
 8003698:	9202      	str	r2, [sp, #8]
 800369a:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	6523      	str	r3, [r4, #80]	; 0x50
 80036a8:	e5a9      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80036aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80036ac:	6802      	ldr	r2, [r0, #0]
 80036ae:	6852      	ldr	r2, [r2, #4]
 80036b0:	b292      	uxth	r2, r2
 80036b2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80036b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80036b6:	b292      	uxth	r2, r2
 80036b8:	b11a      	cbz	r2, 80036c2 <HAL_I2C_EV_IRQHandler+0x51e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80036bc:	f042 0204 	orr.w	r2, r2, #4
 80036c0:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036ca:	f7fe ffeb 	bl	80026a4 <HAL_DMA_GetState>
 80036ce:	2801      	cmp	r0, #1
 80036d0:	f43f ae93 	beq.w	80033fa <HAL_I2C_EV_IRQHandler+0x256>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80036d6:	4ba9      	ldr	r3, [pc, #676]	; (800397c <HAL_I2C_EV_IRQHandler+0x7d8>)
 80036d8:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036da:	f7fe fee1 	bl	80024a0 <HAL_DMA_Abort_IT>
 80036de:	2800      	cmp	r0, #0
 80036e0:	f43f ae8b 	beq.w	80033fa <HAL_I2C_EV_IRQHandler+0x256>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80036e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80036e8:	4798      	blx	r3
 80036ea:	e686      	b.n	80033fa <HAL_I2C_EV_IRQHandler+0x256>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036ec:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 80036ee:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036f0:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036f6:	f7ff fbbd 	bl	8002e74 <HAL_I2C_SlaveRxCpltCallback>
 80036fa:	e6ab      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2b0>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036fc:	4ba0      	ldr	r3, [pc, #640]	; (8003980 <HAL_I2C_EV_IRQHandler+0x7dc>)
 80036fe:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8003700:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003702:	2300      	movs	r3, #0
 8003704:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8003706:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8003708:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003710:	f7ff fbb4 	bl	8002e7c <HAL_I2C_ListenCpltCallback>
 8003714:	e573      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      else if (hi2c->XferCount == 1U)
 8003716:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003718:	b292      	uxth	r2, r2
 800371a:	2a01      	cmp	r2, #1
 800371c:	d076      	beq.n	800380c <HAL_I2C_EV_IRQHandler+0x668>
      else if (hi2c->XferCount == 2U)
 800371e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003720:	b292      	uxth	r2, r2
 8003722:	2a02      	cmp	r2, #2
 8003724:	f000 810c 	beq.w	8003940 <HAL_I2C_EV_IRQHandler+0x79c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800372e:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	0511      	lsls	r1, r2, #20
 8003734:	d50e      	bpl.n	8003754 <HAL_I2C_EV_IRQHandler+0x5b0>
 8003736:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800373a:	d007      	beq.n	800374c <HAL_I2C_EV_IRQHandler+0x5a8>
 800373c:	3801      	subs	r0, #1
 800373e:	281f      	cmp	r0, #31
 8003740:	d808      	bhi.n	8003754 <HAL_I2C_EV_IRQHandler+0x5b0>
 8003742:	4a90      	ldr	r2, [pc, #576]	; (8003984 <HAL_I2C_EV_IRQHandler+0x7e0>)
 8003744:	fa22 f000 	lsr.w	r0, r2, r0
 8003748:	07c2      	lsls	r2, r0, #31
 800374a:	d503      	bpl.n	8003754 <HAL_I2C_EV_IRQHandler+0x5b0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003752:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003754:	2200      	movs	r2, #0
 8003756:	9208      	str	r2, [sp, #32]
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	9208      	str	r2, [sp, #32]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	9308      	str	r3, [sp, #32]
 8003760:	9b08      	ldr	r3, [sp, #32]
 8003762:	e79f      	b.n	80036a4 <HAL_I2C_EV_IRQHandler+0x500>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003764:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003766:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800376a:	2a21      	cmp	r2, #33	; 0x21
 800376c:	f47f ad47 	bne.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    if (hi2c->XferCount != 0U)
 8003770:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003772:	b292      	uxth	r2, r2
 8003774:	2a00      	cmp	r2, #0
 8003776:	f47f aeb9 	bne.w	80034ec <HAL_I2C_EV_IRQHandler+0x348>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800377a:	2908      	cmp	r1, #8
 800377c:	f000 8160 	beq.w	8003a40 <HAL_I2C_EV_IRQHandler+0x89c>
 8003780:	2920      	cmp	r1, #32
 8003782:	f000 815d 	beq.w	8003a40 <HAL_I2C_EV_IRQHandler+0x89c>
 8003786:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800378a:	f000 8159 	beq.w	8003a40 <HAL_I2C_EV_IRQHandler+0x89c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800378e:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003790:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003792:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 8003796:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003798:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800379a:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800379c:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800379e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80037a2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80037a6:	f7ff fb5f 	bl	8002e68 <HAL_I2C_MasterTxCpltCallback>
 80037aa:	e528      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ac:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b4:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80037ba:	e6cb      	b.n	8003554 <HAL_I2C_EV_IRQHandler+0x3b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037bc:	9100      	str	r1, [sp, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	9200      	str	r2, [sp, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	9b00      	ldr	r3, [sp, #0]
 80037c8:	e519      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037ca:	2a21      	cmp	r2, #33	; 0x21
 80037cc:	f43f add1 	beq.w	8003372 <HAL_I2C_EV_IRQHandler+0x1ce>
 80037d0:	e5c9      	b.n	8003366 <HAL_I2C_EV_IRQHandler+0x1c2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	9201      	str	r2, [sp, #4]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	9201      	str	r2, [sp, #4]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	9201      	str	r2, [sp, #4]
 80037dc:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80037e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037e8:	3301      	adds	r3, #1
 80037ea:	6523      	str	r3, [r4, #80]	; 0x50
 80037ec:	e507      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ee:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80037f0:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80037f8:	f43f aea9 	beq.w	800354e <HAL_I2C_EV_IRQHandler+0x3aa>
 80037fc:	2902      	cmp	r1, #2
 80037fe:	f43f aea6 	beq.w	800354e <HAL_I2C_EV_IRQHandler+0x3aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e6a0      	b.n	800354e <HAL_I2C_EV_IRQHandler+0x3aa>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800380c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003810:	f000 8102 	beq.w	8003a18 <HAL_I2C_EV_IRQHandler+0x874>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003814:	2808      	cmp	r0, #8
 8003816:	f000 80bb 	beq.w	8003990 <HAL_I2C_EV_IRQHandler+0x7ec>
 800381a:	2820      	cmp	r0, #32
 800381c:	f000 80b8 	beq.w	8003990 <HAL_I2C_EV_IRQHandler+0x7ec>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003820:	2d12      	cmp	r5, #18
 8003822:	f000 8150 	beq.w	8003ac6 <HAL_I2C_EV_IRQHandler+0x922>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003826:	2810      	cmp	r0, #16
 8003828:	f200 8150 	bhi.w	8003acc <HAL_I2C_EV_IRQHandler+0x928>
 800382c:	4a56      	ldr	r2, [pc, #344]	; (8003988 <HAL_I2C_EV_IRQHandler+0x7e4>)
 800382e:	fa22 f000 	lsr.w	r0, r2, r0
 8003832:	07c1      	lsls	r1, r0, #31
 8003834:	f140 814a 	bpl.w	8003acc <HAL_I2C_EV_IRQHandler+0x928>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800383e:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003840:	2200      	movs	r2, #0
 8003842:	9205      	str	r2, [sp, #20]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	9205      	str	r2, [sp, #20]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	9305      	str	r3, [sp, #20]
 800384c:	9b05      	ldr	r3, [sp, #20]
 800384e:	e729      	b.n	80036a4 <HAL_I2C_EV_IRQHandler+0x500>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003850:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003854:	f000 80c3 	beq.w	80039de <HAL_I2C_EV_IRQHandler+0x83a>
 8003858:	2910      	cmp	r1, #16
 800385a:	f000 80c0 	beq.w	80039de <HAL_I2C_EV_IRQHandler+0x83a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800385e:	2904      	cmp	r1, #4
 8003860:	f000 8122 	beq.w	8003aa8 <HAL_I2C_EV_IRQHandler+0x904>
 8003864:	2902      	cmp	r1, #2
 8003866:	f000 811f 	beq.w	8003aa8 <HAL_I2C_EV_IRQHandler+0x904>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003870:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8003876:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003878:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 800387c:	3b01      	subs	r3, #1
 800387e:	b29b      	uxth	r3, r3
 8003880:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003882:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8003884:	1c51      	adds	r1, r2, #1
 8003886:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003888:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 800388a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800388c:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 800388e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003890:	3b01      	subs	r3, #1
 8003892:	b29b      	uxth	r3, r3
 8003894:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003896:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8003898:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800389a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 800389e:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 80038a0:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038a2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	f000 80db 	beq.w	8003a68 <HAL_I2C_EV_IRQHandler+0x8c4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b2:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038b4:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80038ba:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038bc:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80038be:	f7ff fad5 	bl	8002e6c <HAL_I2C_MasterRxCpltCallback>
 80038c2:	e49c      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038c4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80038c8:	2a40      	cmp	r2, #64	; 0x40
 80038ca:	f47f ae0f 	bne.w	80034ec <HAL_I2C_EV_IRQHandler+0x348>
 80038ce:	e652      	b.n	8003576 <HAL_I2C_EV_IRQHandler+0x3d2>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80038d2:	2802      	cmp	r0, #2
 80038d4:	f43f ac93 	beq.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 80038d8:	2a01      	cmp	r2, #1
 80038da:	f63f ac90 	bhi.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80038de:	4a2b      	ldr	r2, [pc, #172]	; (800398c <HAL_I2C_EV_IRQHandler+0x7e8>)
  __IO uint32_t count = 0U;
 80038e0:	910a      	str	r1, [sp, #40]	; 0x28
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80038e8:	fbb2 f2f1 	udiv	r2, r2, r1
 80038ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80038f0:	920a      	str	r2, [sp, #40]	; 0x28
 80038f2:	e004      	b.n	80038fe <HAL_I2C_EV_IRQHandler+0x75a>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80038fa:	f000 80ec 	beq.w	8003ad6 <HAL_I2C_EV_IRQHandler+0x932>
    count--;
 80038fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003900:	3a01      	subs	r2, #1
 8003902:	920a      	str	r2, [sp, #40]	; 0x28
    if (count == 0U)
 8003904:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003906:	2900      	cmp	r1, #0
 8003908:	d1f4      	bne.n	80038f4 <HAL_I2C_EV_IRQHandler+0x750>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390e:	f042 0220 	orr.w	r2, r2, #32
 8003912:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800391a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8003920:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003922:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003924:	3b01      	subs	r3, #1
 8003926:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003928:	3201      	adds	r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 800392a:	2020      	movs	r0, #32
        hi2c->XferCount--;
 800392c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800392e:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8003930:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8003934:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003936:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800393a:	f7ff faff 	bl	8002f3c <HAL_I2C_ErrorCallback>
 800393e:	e45e      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003940:	2810      	cmp	r0, #16
 8003942:	f240 809a 	bls.w	8003a7a <HAL_I2C_EV_IRQHandler+0x8d6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394c:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003954:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	0516      	lsls	r6, r2, #20
 800395a:	d507      	bpl.n	800396c <HAL_I2C_EV_IRQHandler+0x7c8>
 800395c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003960:	f040 8098 	bne.w	8003a94 <HAL_I2C_EV_IRQHandler+0x8f0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800396a:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396c:	2200      	movs	r2, #0
 800396e:	9207      	str	r2, [sp, #28]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	9207      	str	r2, [sp, #28]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	9307      	str	r3, [sp, #28]
 8003978:	9b07      	ldr	r3, [sp, #28]
 800397a:	e693      	b.n	80036a4 <HAL_I2C_EV_IRQHandler+0x500>
 800397c:	08002f45 	.word	0x08002f45
 8003980:	ffff0000 	.word	0xffff0000
 8003984:	80008081 	.word	0x80008081
 8003988:	00010014 	.word	0x00010014
 800398c:	20000000 	.word	0x20000000
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003990:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003992:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399a:	9106      	str	r1, [sp, #24]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	9206      	str	r2, [sp, #24]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	9206      	str	r2, [sp, #24]
 80039a4:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	e679      	b.n	80036a4 <HAL_I2C_EV_IRQHandler+0x500>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039b0:	2d08      	cmp	r5, #8
 80039b2:	d018      	beq.n	80039e6 <HAL_I2C_EV_IRQHandler+0x842>
 80039b4:	2d20      	cmp	r5, #32
 80039b6:	d016      	beq.n	80039e6 <HAL_I2C_EV_IRQHandler+0x842>
 80039b8:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80039bc:	d013      	beq.n	80039e6 <HAL_I2C_EV_IRQHandler+0x842>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039be:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039c0:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c6:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80039c8:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ca:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80039cc:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039ce:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80039d4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80039d8:	f7ff fa46 	bl	8002e68 <HAL_I2C_MasterTxCpltCallback>
 80039dc:	e40f      	b.n	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	e744      	b.n	8003870 <HAL_I2C_EV_IRQHandler+0x6cc>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ec:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039f0:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80039f2:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80039f8:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039fa:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039fc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a00:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a04:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a08:	2b40      	cmp	r3, #64	; 0x40
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a0a:	4620      	mov	r0, r4
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a0c:	f47f aecb 	bne.w	80037a6 <HAL_I2C_EV_IRQHandler+0x602>
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a10:	f7ff fa36 	bl	8002e80 <HAL_I2C_MemTxCpltCallback>
 8003a14:	f7ff bbf3 	b.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1e:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003a26:	d043      	beq.n	8003ab0 <HAL_I2C_EV_IRQHandler+0x90c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a28:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2a:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a30:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	9103      	str	r1, [sp, #12]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	9203      	str	r2, [sp, #12]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	9303      	str	r3, [sp, #12]
 8003a3c:	9b03      	ldr	r3, [sp, #12]
 8003a3e:	e631      	b.n	80036a4 <HAL_I2C_EV_IRQHandler+0x500>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a46:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	681a      	ldr	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a4a:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        hi2c->State = HAL_I2C_STATE_READY;
 8003a50:	2520      	movs	r5, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a52:	601a      	str	r2, [r3, #0]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a54:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a56:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a58:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a60:	f7ff fa02 	bl	8002e68 <HAL_I2C_MasterTxCpltCallback>
 8003a64:	f7ff bbcb 	b.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a6e:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a70:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a72:	f7ff fa61 	bl	8002f38 <HAL_I2C_MemRxCpltCallback>
 8003a76:	f7ff bbc2 	b.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a7a:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <HAL_I2C_EV_IRQHandler+0x978>)
 8003a7c:	40c2      	lsrs	r2, r0
 8003a7e:	07d2      	lsls	r2, r2, #31
 8003a80:	f57f af61 	bpl.w	8003946 <HAL_I2C_EV_IRQHandler+0x7a2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a8a:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	0515      	lsls	r5, r2, #20
 8003a90:	f57f af6c 	bpl.w	800396c <HAL_I2C_EV_IRQHandler+0x7c8>
 8003a94:	3801      	subs	r0, #1
 8003a96:	281f      	cmp	r0, #31
 8003a98:	f63f af68 	bhi.w	800396c <HAL_I2C_EV_IRQHandler+0x7c8>
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_I2C_EV_IRQHandler+0x97c>)
 8003a9e:	40c2      	lsrs	r2, r0
 8003aa0:	07d0      	lsls	r0, r2, #31
 8003aa2:	f57f af63 	bpl.w	800396c <HAL_I2C_EV_IRQHandler+0x7c8>
 8003aa6:	e75d      	b.n	8003964 <HAL_I2C_EV_IRQHandler+0x7c0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e6df      	b.n	8003870 <HAL_I2C_EV_IRQHandler+0x6cc>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab0:	9204      	str	r2, [sp, #16]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	9204      	str	r2, [sp, #16]
 8003ab6:	699a      	ldr	r2, [r3, #24]
 8003ab8:	9204      	str	r2, [sp, #16]
 8003aba:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e5ee      	b.n	80036a4 <HAL_I2C_EV_IRQHandler+0x500>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ac6:	2801      	cmp	r0, #1
 8003ac8:	f47f af62 	bne.w	8003990 <HAL_I2C_EV_IRQHandler+0x7ec>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e6b4      	b.n	8003840 <HAL_I2C_EV_IRQHandler+0x69c>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad8:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ada:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003ade:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ae0:	6859      	ldr	r1, [r3, #4]
 8003ae2:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003ae6:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8003aec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003aee:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8003af6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003afc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8003b00:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b02:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8003b04:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b06:	f47f aed5 	bne.w	80038b4 <HAL_I2C_EV_IRQHandler+0x710>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b0e:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b10:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b12:	f7ff fa11 	bl	8002f38 <HAL_I2C_MemRxCpltCallback>
 8003b16:	f7ff bb72 	b.w	80031fe <HAL_I2C_EV_IRQHandler+0x5a>
 8003b1a:	bf00      	nop
 8003b1c:	00010014 	.word	0x00010014
 8003b20:	80008081 	.word	0x80008081

08003b24 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b24:	2800      	cmp	r0, #0
 8003b26:	f000 8263 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x4cc>
{
 8003b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003b2e:	6803      	ldr	r3, [r0, #0]
 8003b30:	2b0f      	cmp	r3, #15
{
 8003b32:	b082      	sub	sp, #8
 8003b34:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003b36:	f200 8137 	bhi.w	8003da8 <HAL_RCC_OscConfig+0x284>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3a:	07dd      	lsls	r5, r3, #31
 8003b3c:	d537      	bpl.n	8003bae <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003b3e:	6863      	ldr	r3, [r4, #4]
 8003b40:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_OscConfig+0x2a>
 8003b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b4a:	f040 81a4 	bne.w	8003e96 <HAL_RCC_OscConfig+0x372>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4e:	4ab6      	ldr	r2, [pc, #728]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
 8003b50:	6893      	ldr	r3, [r2, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	f000 8180 	beq.w	8003e5c <HAL_RCC_OscConfig+0x338>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5c:	6893      	ldr	r3, [r2, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	f000 8176 	beq.w	8003e54 <HAL_RCC_OscConfig+0x330>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b68:	6863      	ldr	r3, [r4, #4]
 8003b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6e:	f000 817f 	beq.w	8003e70 <HAL_RCC_OscConfig+0x34c>
 8003b72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b76:	f000 8207 	beq.w	8003f88 <HAL_RCC_OscConfig+0x464>
 8003b7a:	4dab      	ldr	r5, [pc, #684]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
 8003b7c:	682a      	ldr	r2, [r5, #0]
 8003b7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b82:	602a      	str	r2, [r5, #0]
 8003b84:	682a      	ldr	r2, [r5, #0]
 8003b86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b8a:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f040 8174 	bne.w	8003e7a <HAL_RCC_OscConfig+0x356>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b92:	f7fe f82d 	bl	8001bf0 <HAL_GetTick>
 8003b96:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b98:	e005      	b.n	8003ba6 <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b9a:	f7fe f829 	bl	8001bf0 <HAL_GetTick>
 8003b9e:	1b80      	subs	r0, r0, r6
 8003ba0:	2864      	cmp	r0, #100	; 0x64
 8003ba2:	f200 819a 	bhi.w	8003eda <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba6:	682b      	ldr	r3, [r5, #0]
 8003ba8:	039b      	lsls	r3, r3, #14
 8003baa:	d4f6      	bmi.n	8003b9a <HAL_RCC_OscConfig+0x76>
 8003bac:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	079f      	lsls	r7, r3, #30
 8003bb0:	d530      	bpl.n	8003c14 <HAL_RCC_OscConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003bb2:	68e3      	ldr	r3, [r4, #12]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	f200 810c 	bhi.w	8003dd2 <HAL_RCC_OscConfig+0x2ae>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	2b1f      	cmp	r3, #31
 8003bbe:	f200 8111 	bhi.w	8003de4 <HAL_RCC_OscConfig+0x2c0>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bc2:	4b99      	ldr	r3, [pc, #612]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	f012 0f0c 	tst.w	r2, #12
 8003bca:	f000 80f7 	beq.w	8003dbc <HAL_RCC_OscConfig+0x298>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bd4:	2a08      	cmp	r2, #8
 8003bd6:	f000 80ed 	beq.w	8003db4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bda:	68e3      	ldr	r3, [r4, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8198 	beq.w	8003f12 <HAL_RCC_OscConfig+0x3ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be2:	4b92      	ldr	r3, [pc, #584]	; (8003e2c <HAL_RCC_OscConfig+0x308>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be4:	4e90      	ldr	r6, [pc, #576]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_HSI_ENABLE();
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003bea:	f7fe f801 	bl	8001bf0 <HAL_GetTick>
 8003bee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf0:	e005      	b.n	8003bfe <HAL_RCC_OscConfig+0xda>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf2:	f7fd fffd 	bl	8001bf0 <HAL_GetTick>
 8003bf6:	1b40      	subs	r0, r0, r5
 8003bf8:	2802      	cmp	r0, #2
 8003bfa:	f200 816e 	bhi.w	8003eda <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfe:	6833      	ldr	r3, [r6, #0]
 8003c00:	0798      	lsls	r0, r3, #30
 8003c02:	d5f6      	bpl.n	8003bf2 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	6833      	ldr	r3, [r6, #0]
 8003c06:	6922      	ldr	r2, [r4, #16]
 8003c08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003c0c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003c10:	6033      	str	r3, [r6, #0]
 8003c12:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c14:	071a      	lsls	r2, r3, #28
 8003c16:	f100 80af 	bmi.w	8003d78 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c1a:	075d      	lsls	r5, r3, #29
 8003c1c:	d544      	bpl.n	8003ca8 <HAL_RCC_OscConfig+0x184>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003c1e:	68a3      	ldr	r3, [r4, #8]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d906      	bls.n	8003c32 <HAL_RCC_OscConfig+0x10e>
 8003c24:	2b05      	cmp	r3, #5
 8003c26:	d004      	beq.n	8003c32 <HAL_RCC_OscConfig+0x10e>
 8003c28:	4881      	ldr	r0, [pc, #516]	; (8003e30 <HAL_RCC_OscConfig+0x30c>)
 8003c2a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003c2e:	f7fd fd5d 	bl	80016ec <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c32:	4a7d      	ldr	r2, [pc, #500]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
 8003c34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c36:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	f040 80f2 	bne.w	8003e22 <HAL_RCC_OscConfig+0x2fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c46:	6413      	str	r3, [r2, #64]	; 0x40
 8003c48:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003c52:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c54:	4e77      	ldr	r6, [pc, #476]	; (8003e34 <HAL_RCC_OscConfig+0x310>)
 8003c56:	6833      	ldr	r3, [r6, #0]
 8003c58:	05d8      	lsls	r0, r3, #23
 8003c5a:	f140 812e 	bpl.w	8003eba <HAL_RCC_OscConfig+0x396>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c5e:	68a3      	ldr	r3, [r4, #8]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f000 813e 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x3be>
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	f000 81c4 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x4d0>
 8003c6c:	4e6e      	ldr	r6, [pc, #440]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
 8003c6e:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	6732      	str	r2, [r6, #112]	; 0x70
 8003c76:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003c78:	f022 0204 	bic.w	r2, r2, #4
 8003c7c:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f040 8134 	bne.w	8003eec <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c84:	f7fd ffb4 	bl	8001bf0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003c8c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8e:	e005      	b.n	8003c9c <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fd ffae 	bl	8001bf0 <HAL_GetTick>
 8003c94:	1bc0      	subs	r0, r0, r7
 8003c96:	4540      	cmp	r0, r8
 8003c98:	f200 811f 	bhi.w	8003eda <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003c9e:	079b      	lsls	r3, r3, #30
 8003ca0:	d4f6      	bmi.n	8003c90 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca2:	2d00      	cmp	r5, #0
 8003ca4:	f040 817a 	bne.w	8003f9c <HAL_RCC_OscConfig+0x478>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003ca8:	69a0      	ldr	r0, [r4, #24]
 8003caa:	2802      	cmp	r0, #2
 8003cac:	f200 80c8 	bhi.w	8003e40 <HAL_RCC_OscConfig+0x31c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d05d      	beq.n	8003d70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb4:	4d5c      	ldr	r5, [pc, #368]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
 8003cb6:	68ab      	ldr	r3, [r5, #8]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	f000 8139 	beq.w	8003f34 <HAL_RCC_OscConfig+0x410>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc2:	2802      	cmp	r0, #2
 8003cc4:	f040 8182 	bne.w	8003fcc <HAL_RCC_OscConfig+0x4a8>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003cc8:	69e3      	ldr	r3, [r4, #28]
 8003cca:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8003cce:	d004      	beq.n	8003cda <HAL_RCC_OscConfig+0x1b6>
 8003cd0:	4857      	ldr	r0, [pc, #348]	; (8003e30 <HAL_RCC_OscConfig+0x30c>)
 8003cd2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003cd6:	f7fd fd09 	bl	80016ec <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003cda:	6a23      	ldr	r3, [r4, #32]
 8003cdc:	2b3f      	cmp	r3, #63	; 0x3f
 8003cde:	f200 816f 	bhi.w	8003fc0 <HAL_RCC_OscConfig+0x49c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ce4:	3b32      	subs	r3, #50	; 0x32
 8003ce6:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8003cea:	f200 8163 	bhi.w	8003fb4 <HAL_RCC_OscConfig+0x490>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003cee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	f200 8159 	bhi.w	8003fa8 <HAL_RCC_OscConfig+0x484>
 8003cf6:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8003cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfe:	07d8      	lsls	r0, r3, #31
 8003d00:	f140 8152 	bpl.w	8003fa8 <HAL_RCC_OscConfig+0x484>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003d04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d06:	3b02      	subs	r3, #2
 8003d08:	2b0d      	cmp	r3, #13
 8003d0a:	f200 817d 	bhi.w	8004008 <HAL_RCC_OscConfig+0x4e4>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0e:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <HAL_RCC_OscConfig+0x314>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d10:	4e45      	ldr	r6, [pc, #276]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_PLL_DISABLE();
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d16:	f7fd ff6b 	bl	8001bf0 <HAL_GetTick>
 8003d1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1c:	e005      	b.n	8003d2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd ff67 	bl	8001bf0 <HAL_GetTick>
 8003d22:	1b40      	subs	r0, r0, r5
 8003d24:	2802      	cmp	r0, #2
 8003d26:	f200 80d8 	bhi.w	8003eda <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	6833      	ldr	r3, [r6, #0]
 8003d2c:	0199      	lsls	r1, r3, #6
 8003d2e:	d4f6      	bmi.n	8003d1e <HAL_RCC_OscConfig+0x1fa>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d30:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8003d34:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8003d38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003d3a:	432b      	orrs	r3, r5
 8003d3c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003d40:	0852      	lsrs	r2, r2, #1
 8003d42:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003d46:	3a01      	subs	r2, #1
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d48:	493b      	ldr	r1, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x314>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4a:	4d37      	ldr	r5, [pc, #220]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003d50:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d52:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8003d54:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003d56:	f7fd ff4b 	bl	8001bf0 <HAL_GetTick>
 8003d5a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5c:	e005      	b.n	8003d6a <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5e:	f7fd ff47 	bl	8001bf0 <HAL_GetTick>
 8003d62:	1b00      	subs	r0, r0, r4
 8003d64:	2802      	cmp	r0, #2
 8003d66:	f200 80b8 	bhi.w	8003eda <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6a:	682b      	ldr	r3, [r5, #0]
 8003d6c:	019a      	lsls	r2, r3, #6
 8003d6e:	d5f6      	bpl.n	8003d5e <HAL_RCC_OscConfig+0x23a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003d70:	2000      	movs	r0, #0
}
 8003d72:	b002      	add	sp, #8
 8003d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003d78:	6963      	ldr	r3, [r4, #20]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d848      	bhi.n	8003e10 <HAL_RCC_OscConfig+0x2ec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d036      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b2e      	ldr	r3, [pc, #184]	; (8003e3c <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d84:	4e28      	ldr	r6, [pc, #160]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
      __HAL_RCC_LSI_ENABLE();
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003d8a:	f7fd ff31 	bl	8001bf0 <HAL_GetTick>
 8003d8e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d90:	e005      	b.n	8003d9e <HAL_RCC_OscConfig+0x27a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d92:	f7fd ff2d 	bl	8001bf0 <HAL_GetTick>
 8003d96:	1b40      	subs	r0, r0, r5
 8003d98:	2802      	cmp	r0, #2
 8003d9a:	f200 809e 	bhi.w	8003eda <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003da0:	079b      	lsls	r3, r3, #30
 8003da2:	d5f6      	bpl.n	8003d92 <HAL_RCC_OscConfig+0x26e>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	e738      	b.n	8003c1a <HAL_RCC_OscConfig+0xf6>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003da8:	4821      	ldr	r0, [pc, #132]	; (8003e30 <HAL_RCC_OscConfig+0x30c>)
 8003daa:	21e8      	movs	r1, #232	; 0xe8
 8003dac:	f7fd fc9e 	bl	80016ec <assert_failed>
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	e6c2      	b.n	8003b3a <HAL_RCC_OscConfig+0x16>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	025e      	lsls	r6, r3, #9
 8003db8:	f53f af0f 	bmi.w	8003bda <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	079d      	lsls	r5, r3, #30
 8003dc2:	d56d      	bpl.n	8003ea0 <HAL_RCC_OscConfig+0x37c>
 8003dc4:	68e3      	ldr	r3, [r4, #12]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d06a      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x37c>
        return HAL_ERROR;
 8003dca:	2001      	movs	r0, #1
}
 8003dcc:	b002      	add	sp, #8
 8003dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003dd2:	4817      	ldr	r0, [pc, #92]	; (8003e30 <HAL_RCC_OscConfig+0x30c>)
 8003dd4:	f240 111f 	movw	r1, #287	; 0x11f
 8003dd8:	f7fd fc88 	bl	80016ec <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003ddc:	6923      	ldr	r3, [r4, #16]
 8003dde:	2b1f      	cmp	r3, #31
 8003de0:	f67f aeef 	bls.w	8003bc2 <HAL_RCC_OscConfig+0x9e>
 8003de4:	4812      	ldr	r0, [pc, #72]	; (8003e30 <HAL_RCC_OscConfig+0x30c>)
 8003de6:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003dea:	f7fd fc7f 	bl	80016ec <assert_failed>
 8003dee:	e6e8      	b.n	8003bc2 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_LSI_DISABLE();
 8003df0:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df2:	4e0d      	ldr	r6, [pc, #52]	; (8003e28 <HAL_RCC_OscConfig+0x304>)
      __HAL_RCC_LSI_DISABLE();
 8003df4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003df6:	f7fd fefb 	bl	8001bf0 <HAL_GetTick>
 8003dfa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	e004      	b.n	8003e08 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fd fef7 	bl	8001bf0 <HAL_GetTick>
 8003e02:	1b40      	subs	r0, r0, r5
 8003e04:	2802      	cmp	r0, #2
 8003e06:	d868      	bhi.n	8003eda <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003e0a:	079f      	lsls	r7, r3, #30
 8003e0c:	d4f7      	bmi.n	8003dfe <HAL_RCC_OscConfig+0x2da>
 8003e0e:	e7c9      	b.n	8003da4 <HAL_RCC_OscConfig+0x280>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003e10:	4807      	ldr	r0, [pc, #28]	; (8003e30 <HAL_RCC_OscConfig+0x30c>)
 8003e12:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003e16:	f7fd fc69 	bl	80016ec <assert_failed>
 8003e1a:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0e7      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2cc>
 8003e20:	e7af      	b.n	8003d82 <HAL_RCC_OscConfig+0x25e>
    FlagStatus       pwrclkchanged = RESET;
 8003e22:	2500      	movs	r5, #0
 8003e24:	e716      	b.n	8003c54 <HAL_RCC_OscConfig+0x130>
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	42470000 	.word	0x42470000
 8003e30:	08009a70 	.word	0x08009a70
 8003e34:	40007000 	.word	0x40007000
 8003e38:	42470060 	.word	0x42470060
 8003e3c:	42470e80 	.word	0x42470e80
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003e40:	4874      	ldr	r0, [pc, #464]	; (8004014 <HAL_RCC_OscConfig+0x4f0>)
 8003e42:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003e46:	f7fd fc51 	bl	80016ec <assert_failed>
 8003e4a:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	f47f af31 	bne.w	8003cb4 <HAL_RCC_OscConfig+0x190>
 8003e52:	e78d      	b.n	8003d70 <HAL_RCC_OscConfig+0x24c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e54:	6853      	ldr	r3, [r2, #4]
 8003e56:	0258      	lsls	r0, r3, #9
 8003e58:	f57f ae86 	bpl.w	8003b68 <HAL_RCC_OscConfig+0x44>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	4b6e      	ldr	r3, [pc, #440]	; (8004018 <HAL_RCC_OscConfig+0x4f4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0399      	lsls	r1, r3, #14
 8003e62:	f57f aea3 	bpl.w	8003bac <HAL_RCC_OscConfig+0x88>
 8003e66:	6863      	ldr	r3, [r4, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f47f ae9f 	bne.w	8003bac <HAL_RCC_OscConfig+0x88>
 8003e6e:	e7ac      	b.n	8003dca <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e70:	4a69      	ldr	r2, [pc, #420]	; (8004018 <HAL_RCC_OscConfig+0x4f4>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e7a:	f7fd feb9 	bl	8001bf0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	4e66      	ldr	r6, [pc, #408]	; (8004018 <HAL_RCC_OscConfig+0x4f4>)
        tickstart = HAL_GetTick();
 8003e80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	e004      	b.n	8003e8e <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd feb4 	bl	8001bf0 <HAL_GetTick>
 8003e88:	1b40      	subs	r0, r0, r5
 8003e8a:	2864      	cmp	r0, #100	; 0x64
 8003e8c:	d825      	bhi.n	8003eda <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	6833      	ldr	r3, [r6, #0]
 8003e90:	039a      	lsls	r2, r3, #14
 8003e92:	d5f7      	bpl.n	8003e84 <HAL_RCC_OscConfig+0x360>
 8003e94:	e68a      	b.n	8003bac <HAL_RCC_OscConfig+0x88>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003e96:	485f      	ldr	r0, [pc, #380]	; (8004014 <HAL_RCC_OscConfig+0x4f0>)
 8003e98:	21ed      	movs	r1, #237	; 0xed
 8003e9a:	f7fd fc27 	bl	80016ec <assert_failed>
 8003e9e:	e656      	b.n	8003b4e <HAL_RCC_OscConfig+0x2a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea0:	4a5d      	ldr	r2, [pc, #372]	; (8004018 <HAL_RCC_OscConfig+0x4f4>)
 8003ea2:	6921      	ldr	r1, [r4, #16]
 8003ea4:	6813      	ldr	r3, [r2, #0]
 8003ea6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003eaa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb2:	071a      	lsls	r2, r3, #28
 8003eb4:	f57f aeb1 	bpl.w	8003c1a <HAL_RCC_OscConfig+0xf6>
 8003eb8:	e75e      	b.n	8003d78 <HAL_RCC_OscConfig+0x254>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eba:	6833      	ldr	r3, [r6, #0]
 8003ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003ec2:	f7fd fe95 	bl	8001bf0 <HAL_GetTick>
 8003ec6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec8:	6833      	ldr	r3, [r6, #0]
 8003eca:	05d9      	lsls	r1, r3, #23
 8003ecc:	f53f aec7 	bmi.w	8003c5e <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed0:	f7fd fe8e 	bl	8001bf0 <HAL_GetTick>
 8003ed4:	1bc0      	subs	r0, r0, r7
 8003ed6:	2802      	cmp	r0, #2
 8003ed8:	d9f6      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x3a4>
            return HAL_TIMEOUT;
 8003eda:	2003      	movs	r0, #3
}
 8003edc:	b002      	add	sp, #8
 8003ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee2:	4a4d      	ldr	r2, [pc, #308]	; (8004018 <HAL_RCC_OscConfig+0x4f4>)
 8003ee4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003eec:	f7fd fe80 	bl	8001bf0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	4f49      	ldr	r7, [pc, #292]	; (8004018 <HAL_RCC_OscConfig+0x4f4>)
      tickstart = HAL_GetTick();
 8003ef2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	e004      	b.n	8003f04 <HAL_RCC_OscConfig+0x3e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efa:	f7fd fe79 	bl	8001bf0 <HAL_GetTick>
 8003efe:	1b80      	subs	r0, r0, r6
 8003f00:	4540      	cmp	r0, r8
 8003f02:	d8ea      	bhi.n	8003eda <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f06:	079a      	lsls	r2, r3, #30
 8003f08:	d5f7      	bpl.n	8003efa <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 8003f0a:	2d00      	cmp	r5, #0
 8003f0c:	f43f aecc 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x184>
 8003f10:	e044      	b.n	8003f9c <HAL_RCC_OscConfig+0x478>
        __HAL_RCC_HSI_DISABLE();
 8003f12:	4a42      	ldr	r2, [pc, #264]	; (800401c <HAL_RCC_OscConfig+0x4f8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f14:	4e40      	ldr	r6, [pc, #256]	; (8004018 <HAL_RCC_OscConfig+0x4f4>)
        __HAL_RCC_HSI_DISABLE();
 8003f16:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f18:	f7fd fe6a 	bl	8001bf0 <HAL_GetTick>
 8003f1c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1e:	e004      	b.n	8003f2a <HAL_RCC_OscConfig+0x406>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f20:	f7fd fe66 	bl	8001bf0 <HAL_GetTick>
 8003f24:	1b40      	subs	r0, r0, r5
 8003f26:	2802      	cmp	r0, #2
 8003f28:	d8d7      	bhi.n	8003eda <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2a:	6833      	ldr	r3, [r6, #0]
 8003f2c:	0799      	lsls	r1, r3, #30
 8003f2e:	d4f7      	bmi.n	8003f20 <HAL_RCC_OscConfig+0x3fc>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	e66f      	b.n	8003c14 <HAL_RCC_OscConfig+0xf0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f34:	2801      	cmp	r0, #1
 8003f36:	f43f af1c 	beq.w	8003d72 <HAL_RCC_OscConfig+0x24e>
        pll_config = RCC->PLLCFGR;
 8003f3a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f3c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f42:	4291      	cmp	r1, r2
 8003f44:	f47f af41 	bne.w	8003dca <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f48:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f4a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	4291      	cmp	r1, r2
 8003f50:	f47f af3b 	bne.w	8003dca <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f56:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003f5a:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f5c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003f60:	f47f af33 	bne.w	8003dca <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003f66:	0852      	lsrs	r2, r2, #1
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003f72:	f47f af2a 	bne.w	8003dca <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f78:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f7c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8003f80:	bf14      	ite	ne
 8003f82:	2001      	movne	r0, #1
 8003f84:	2000      	moveq	r0, #0
 8003f86:	e6f4      	b.n	8003d72 <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f88:	4b23      	ldr	r3, [pc, #140]	; (8004018 <HAL_RCC_OscConfig+0x4f4>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f98:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f9a:	e76e      	b.n	8003e7a <HAL_RCC_OscConfig+0x356>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <HAL_RCC_OscConfig+0x4f4>)
 8003f9e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa6:	e67f      	b.n	8003ca8 <HAL_RCC_OscConfig+0x184>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003fa8:	481a      	ldr	r0, [pc, #104]	; (8004014 <HAL_RCC_OscConfig+0x4f0>)
 8003faa:	f240 11db 	movw	r1, #475	; 0x1db
 8003fae:	f7fd fb9d 	bl	80016ec <assert_failed>
 8003fb2:	e6a7      	b.n	8003d04 <HAL_RCC_OscConfig+0x1e0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003fb4:	4817      	ldr	r0, [pc, #92]	; (8004014 <HAL_RCC_OscConfig+0x4f0>)
 8003fb6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003fba:	f7fd fb97 	bl	80016ec <assert_failed>
 8003fbe:	e696      	b.n	8003cee <HAL_RCC_OscConfig+0x1ca>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003fc0:	4814      	ldr	r0, [pc, #80]	; (8004014 <HAL_RCC_OscConfig+0x4f0>)
 8003fc2:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003fc6:	f7fd fb91 	bl	80016ec <assert_failed>
 8003fca:	e68a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1be>
        __HAL_RCC_PLL_DISABLE();
 8003fcc:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_RCC_OscConfig+0x4fc>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003fd2:	f7fd fe0d 	bl	8001bf0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003fd8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	e005      	b.n	8003fe8 <HAL_RCC_OscConfig+0x4c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fd fe08 	bl	8001bf0 <HAL_GetTick>
 8003fe0:	1b40      	subs	r0, r0, r5
 8003fe2:	2802      	cmp	r0, #2
 8003fe4:	f63f af79 	bhi.w	8003eda <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	019b      	lsls	r3, r3, #6
 8003fec:	d4f6      	bmi.n	8003fdc <HAL_RCC_OscConfig+0x4b8>
 8003fee:	e6bf      	b.n	8003d70 <HAL_RCC_OscConfig+0x24c>
    return HAL_ERROR;
 8003ff0:	2001      	movs	r0, #1
}
 8003ff2:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <HAL_RCC_OscConfig+0x4f4>)
 8003ff6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ff8:	f042 0204 	orr.w	r2, r2, #4
 8003ffc:	671a      	str	r2, [r3, #112]	; 0x70
 8003ffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004006:	e771      	b.n	8003eec <HAL_RCC_OscConfig+0x3c8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004008:	4802      	ldr	r0, [pc, #8]	; (8004014 <HAL_RCC_OscConfig+0x4f0>)
 800400a:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800400e:	f7fd fb6d 	bl	80016ec <assert_failed>
 8004012:	e67c      	b.n	8003d0e <HAL_RCC_OscConfig+0x1ea>
 8004014:	08009a70 	.word	0x08009a70
 8004018:	40023800 	.word	0x40023800
 800401c:	42470000 	.word	0x42470000
 8004020:	42470060 	.word	0x42470060

08004024 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004024:	4917      	ldr	r1, [pc, #92]	; (8004084 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8004026:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004028:	688b      	ldr	r3, [r1, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	2b04      	cmp	r3, #4
 8004030:	d01b      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x46>
 8004032:	2b08      	cmp	r3, #8
 8004034:	d117      	bne.n	8004066 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004036:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004038:	684b      	ldr	r3, [r1, #4]
 800403a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800403e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004042:	d114      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004044:	6849      	ldr	r1, [r1, #4]
 8004046:	4810      	ldr	r0, [pc, #64]	; (8004088 <HAL_RCC_GetSysClockFreq+0x64>)
 8004048:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800404c:	fba1 0100 	umull	r0, r1, r1, r0
 8004050:	f7fc f916 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_GetSysClockFreq+0x60>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800405c:	3301      	adds	r3, #1
 800405e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004060:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004064:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004066:	4808      	ldr	r0, [pc, #32]	; (8004088 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004068:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800406a:	4808      	ldr	r0, [pc, #32]	; (800408c <HAL_RCC_GetSysClockFreq+0x68>)
}
 800406c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406e:	684b      	ldr	r3, [r1, #4]
 8004070:	4806      	ldr	r0, [pc, #24]	; (800408c <HAL_RCC_GetSysClockFreq+0x68>)
 8004072:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004076:	fba3 0100 	umull	r0, r1, r3, r0
 800407a:	2300      	movs	r3, #0
 800407c:	f7fc f900 	bl	8000280 <__aeabi_uldivmod>
 8004080:	e7e8      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x30>
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	00f42400 	.word	0x00f42400
 800408c:	017d7840 	.word	0x017d7840

08004090 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004090:	2800      	cmp	r0, #0
 8004092:	f000 80f2 	beq.w	800427a <HAL_RCC_ClockConfig+0x1ea>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004096:	6803      	ldr	r3, [r0, #0]
 8004098:	3b01      	subs	r3, #1
 800409a:	2b0e      	cmp	r3, #14
{
 800409c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a0:	460d      	mov	r5, r1
 80040a2:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80040a4:	f200 80d0 	bhi.w	8004248 <HAL_RCC_ClockConfig+0x1b8>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80040a8:	2d07      	cmp	r5, #7
 80040aa:	f200 80c2 	bhi.w	8004232 <HAL_RCC_ClockConfig+0x1a2>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040ae:	4a74      	ldr	r2, [pc, #464]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 80040b0:	6813      	ldr	r3, [r2, #0]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	42ab      	cmp	r3, r5
 80040b8:	d36a      	bcc.n	8004190 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	0798      	lsls	r0, r3, #30
 80040be:	d52c      	bpl.n	800411a <HAL_RCC_ClockConfig+0x8a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	0759      	lsls	r1, r3, #29
 80040c2:	d504      	bpl.n	80040ce <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c4:	496f      	ldr	r1, [pc, #444]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 80040c6:	688a      	ldr	r2, [r1, #8]
 80040c8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80040cc:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ce:	071a      	lsls	r2, r3, #28
 80040d0:	d504      	bpl.n	80040dc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d2:	496c      	ldr	r1, [pc, #432]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 80040d4:	688a      	ldr	r2, [r1, #8]
 80040d6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80040da:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80040dc:	68a1      	ldr	r1, [r4, #8]
 80040de:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 80040e2:	d014      	beq.n	800410e <HAL_RCC_ClockConfig+0x7e>
 80040e4:	f021 0220 	bic.w	r2, r1, #32
 80040e8:	2a90      	cmp	r2, #144	; 0x90
 80040ea:	d010      	beq.n	800410e <HAL_RCC_ClockConfig+0x7e>
 80040ec:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 80040f0:	2aa0      	cmp	r2, #160	; 0xa0
 80040f2:	d00c      	beq.n	800410e <HAL_RCC_ClockConfig+0x7e>
 80040f4:	f021 0210 	bic.w	r2, r1, #16
 80040f8:	2ac0      	cmp	r2, #192	; 0xc0
 80040fa:	d008      	beq.n	800410e <HAL_RCC_ClockConfig+0x7e>
 80040fc:	29f0      	cmp	r1, #240	; 0xf0
 80040fe:	d006      	beq.n	800410e <HAL_RCC_ClockConfig+0x7e>
 8004100:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004104:	4860      	ldr	r0, [pc, #384]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004106:	f7fd faf1 	bl	80016ec <assert_failed>
 800410a:	68a1      	ldr	r1, [r4, #8]
 800410c:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800410e:	485d      	ldr	r0, [pc, #372]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 8004110:	6882      	ldr	r2, [r0, #8]
 8004112:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004116:	430a      	orrs	r2, r1
 8004118:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411a:	07df      	lsls	r7, r3, #31
 800411c:	d527      	bpl.n	800416e <HAL_RCC_ClockConfig+0xde>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800411e:	6863      	ldr	r3, [r4, #4]
 8004120:	2b03      	cmp	r3, #3
 8004122:	f200 80a1 	bhi.w	8004268 <HAL_RCC_ClockConfig+0x1d8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004126:	2b01      	cmp	r3, #1
 8004128:	f000 8098 	beq.w	800425c <HAL_RCC_ClockConfig+0x1cc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412c:	1e9a      	subs	r2, r3, #2
 800412e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004130:	4a54      	ldr	r2, [pc, #336]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 8004132:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004134:	f240 808e 	bls.w	8004254 <HAL_RCC_ClockConfig+0x1c4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	0791      	lsls	r1, r2, #30
 800413a:	d525      	bpl.n	8004188 <HAL_RCC_ClockConfig+0xf8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413c:	4e51      	ldr	r6, [pc, #324]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 800413e:	68b2      	ldr	r2, [r6, #8]
 8004140:	f022 0203 	bic.w	r2, r2, #3
 8004144:	4313      	orrs	r3, r2
 8004146:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004148:	f7fd fd52 	bl	8001bf0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004150:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e005      	b.n	8004160 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fd fd4c 	bl	8001bf0 <HAL_GetTick>
 8004158:	1bc0      	subs	r0, r0, r7
 800415a:	4540      	cmp	r0, r8
 800415c:	f200 808b 	bhi.w	8004276 <HAL_RCC_ClockConfig+0x1e6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004160:	68b3      	ldr	r3, [r6, #8]
 8004162:	6862      	ldr	r2, [r4, #4]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800416c:	d1f2      	bne.n	8004154 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800416e:	4a44      	ldr	r2, [pc, #272]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
 8004170:	6813      	ldr	r3, [r2, #0]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	42ab      	cmp	r3, r5
 8004178:	d915      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	b2eb      	uxtb	r3, r5
 800417c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417e:	6813      	ldr	r3, [r2, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	42ab      	cmp	r3, r5
 8004186:	d00e      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
}
 800418a:	4618      	mov	r0, r3
 800418c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004190:	b2eb      	uxtb	r3, r5
 8004192:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004194:	6813      	ldr	r3, [r2, #0]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	42ab      	cmp	r3, r5
 800419c:	d1f4      	bne.n	8004188 <HAL_RCC_ClockConfig+0xf8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	0798      	lsls	r0, r3, #30
 80041a2:	d48d      	bmi.n	80040c0 <HAL_RCC_ClockConfig+0x30>
 80041a4:	e7b9      	b.n	800411a <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	075a      	lsls	r2, r3, #29
 80041aa:	d518      	bpl.n	80041de <HAL_RCC_ClockConfig+0x14e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80041ac:	68e1      	ldr	r1, [r4, #12]
 80041ae:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 80041b2:	d00e      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x142>
 80041b4:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 80041b8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x142>
 80041be:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 80041c2:	d006      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x142>
 80041c4:	f240 21c5 	movw	r1, #709	; 0x2c5
 80041c8:	482f      	ldr	r0, [pc, #188]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 80041ca:	f7fd fa8f 	bl	80016ec <assert_failed>
 80041ce:	68e1      	ldr	r1, [r4, #12]
 80041d0:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d2:	482c      	ldr	r0, [pc, #176]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 80041d4:	6882      	ldr	r2, [r0, #8]
 80041d6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80041da:	430a      	orrs	r2, r1
 80041dc:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041de:	071b      	lsls	r3, r3, #28
 80041e0:	d518      	bpl.n	8004214 <HAL_RCC_ClockConfig+0x184>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80041e2:	6922      	ldr	r2, [r4, #16]
 80041e4:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 80041e8:	d00d      	beq.n	8004206 <HAL_RCC_ClockConfig+0x176>
 80041ea:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 80041ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x176>
 80041f4:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80041f8:	d005      	beq.n	8004206 <HAL_RCC_ClockConfig+0x176>
 80041fa:	4823      	ldr	r0, [pc, #140]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 80041fc:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8004200:	f7fd fa74 	bl	80016ec <assert_failed>
 8004204:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004206:	491f      	ldr	r1, [pc, #124]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 8004208:	688b      	ldr	r3, [r1, #8]
 800420a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800420e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004212:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004214:	f7ff ff06 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8004218:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 800421a:	4c1c      	ldr	r4, [pc, #112]	; (800428c <HAL_RCC_ClockConfig+0x1fc>)
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	491c      	ldr	r1, [pc, #112]	; (8004290 <HAL_RCC_ClockConfig+0x200>)
 8004220:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004226:	5ca2      	ldrb	r2, [r4, r2]
 8004228:	40d0      	lsrs	r0, r2
 800422a:	6008      	str	r0, [r1, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004232:	4815      	ldr	r0, [pc, #84]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 8004234:	f240 215d 	movw	r1, #605	; 0x25d
 8004238:	f7fd fa58 	bl	80016ec <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800423c:	4b10      	ldr	r3, [pc, #64]	; (8004280 <HAL_RCC_ClockConfig+0x1f0>)
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	b2ed      	uxtb	r5, r5
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	701d      	strb	r5, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	e79f      	b.n	8004188 <HAL_RCC_ClockConfig+0xf8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004248:	480f      	ldr	r0, [pc, #60]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 800424a:	f44f 7117 	mov.w	r1, #604	; 0x25c
 800424e:	f7fd fa4d 	bl	80016ec <assert_failed>
 8004252:	e729      	b.n	80040a8 <HAL_RCC_ClockConfig+0x18>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004254:	0190      	lsls	r0, r2, #6
 8004256:	f53f af71 	bmi.w	800413c <HAL_RCC_ClockConfig+0xac>
 800425a:	e795      	b.n	8004188 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425c:	4a09      	ldr	r2, [pc, #36]	; (8004284 <HAL_RCC_ClockConfig+0x1f4>)
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	0396      	lsls	r6, r2, #14
 8004262:	f53f af6b 	bmi.w	800413c <HAL_RCC_ClockConfig+0xac>
 8004266:	e78f      	b.n	8004188 <HAL_RCC_ClockConfig+0xf8>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004268:	4807      	ldr	r0, [pc, #28]	; (8004288 <HAL_RCC_ClockConfig+0x1f8>)
 800426a:	f240 2187 	movw	r1, #647	; 0x287
 800426e:	f7fd fa3d 	bl	80016ec <assert_failed>
 8004272:	6863      	ldr	r3, [r4, #4]
 8004274:	e757      	b.n	8004126 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e787      	b.n	800418a <HAL_RCC_ClockConfig+0xfa>
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
}
 800427c:	4618      	mov	r0, r3
 800427e:	4770      	bx	lr
 8004280:	40023c00 	.word	0x40023c00
 8004284:	40023800 	.word	0x40023800
 8004288:	08009a70 	.word	0x08009a70
 800428c:	080098f4 	.word	0x080098f4
 8004290:	20000000 	.word	0x20000000

08004294 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004294:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004296:	4a05      	ldr	r2, [pc, #20]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8004298:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800429a:	4905      	ldr	r1, [pc, #20]	; (80042b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800429c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80042a0:	6808      	ldr	r0, [r1, #0]
 80042a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80042a4:	40d8      	lsrs	r0, r3
 80042a6:	4770      	bx	lr
 80042a8:	40023800 	.word	0x40023800
 80042ac:	08009904 	.word	0x08009904
 80042b0:	20000000 	.word	0x20000000

080042b4 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042b6:	220f      	movs	r2, #15
 80042b8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	f002 0203 	and.w	r2, r2, #3
 80042c0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80042c8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80042d0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	08db      	lsrs	r3, r3, #3
{
 80042d6:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042d8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042dc:	4c05      	ldr	r4, [pc, #20]	; (80042f4 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042de:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042e0:	6823      	ldr	r3, [r4, #0]
}
 80042e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	600b      	str	r3, [r1, #0]
}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40023c00 	.word	0x40023c00

080042f8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80042f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	4698      	mov	r8, r3
 8004300:	4616      	mov	r6, r2
 8004302:	460c      	mov	r4, r1
 8004304:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004306:	f7fd fc73 	bl	8001bf0 <HAL_GetTick>
 800430a:	44b0      	add	r8, r6
 800430c:	eba8 0500 	sub.w	r5, r8, r0
  tmp_tickstart = HAL_GetTick();
 8004310:	f7fd fc6e 	bl	8001bf0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004314:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800431c:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8004320:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004322:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004324:	1c73      	adds	r3, r6, #1
 8004326:	6839      	ldr	r1, [r7, #0]
 8004328:	d107      	bne.n	800433a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 800432a:	688b      	ldr	r3, [r1, #8]
 800432c:	ea34 0303 	bics.w	r3, r4, r3
 8004330:	d0fb      	beq.n	800432a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 8004332:	2000      	movs	r0, #0
}
 8004334:	b002      	add	sp, #8
 8004336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800433a:	688b      	ldr	r3, [r1, #8]
 800433c:	ea34 0303 	bics.w	r3, r4, r3
 8004340:	d1f7      	bne.n	8004332 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004342:	f7fd fc55 	bl	8001bf0 <HAL_GetTick>
 8004346:	eba0 0308 	sub.w	r3, r0, r8
 800434a:	42ab      	cmp	r3, r5
 800434c:	d208      	bcs.n	8004360 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if(count == 0U)
 800434e:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004350:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004352:	2a00      	cmp	r2, #0
      count--;
 8004354:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8004358:	bf08      	it	eq
 800435a:	2500      	moveq	r5, #0
      count--;
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	e7e1      	b.n	8004324 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004360:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004364:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004366:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800436a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800436e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004370:	d014      	beq.n	800439c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004374:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004378:	d007      	beq.n	800438a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800437a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800437c:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800437e:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004382:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8004386:	2003      	movs	r0, #3
 8004388:	e7d4      	b.n	8004334 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e7ee      	b.n	800437a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80043a2:	d002      	beq.n	80043aa <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043a4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80043a8:	d1e3      	bne.n	8004372 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e7de      	b.n	8004372 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
 80043b4:	20000000 	.word	0x20000000

080043b8 <HAL_SPI_MspInit>:
}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop

080043bc <HAL_SPI_Init>:
  if (hspi == NULL)
 80043bc:	2800      	cmp	r0, #0
 80043be:	f000 80ec 	beq.w	800459a <HAL_SPI_Init+0x1de>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80043c2:	6803      	ldr	r3, [r0, #0]
 80043c4:	4a7d      	ldr	r2, [pc, #500]	; (80045bc <HAL_SPI_Init+0x200>)
 80043c6:	4293      	cmp	r3, r2
{
 80043c8:	b570      	push	{r4, r5, r6, lr}
 80043ca:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80043cc:	d014      	beq.n	80043f8 <HAL_SPI_Init+0x3c>
 80043ce:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d010      	beq.n	80043f8 <HAL_SPI_Init+0x3c>
 80043d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00c      	beq.n	80043f8 <HAL_SPI_Init+0x3c>
 80043de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d008      	beq.n	80043f8 <HAL_SPI_Init+0x3c>
 80043e6:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_SPI_Init+0x3c>
 80043ee:	4874      	ldr	r0, [pc, #464]	; (80045c0 <HAL_SPI_Init+0x204>)
 80043f0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80043f4:	f7fd f97a 	bl	80016ec <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80043f8:	6863      	ldr	r3, [r4, #4]
 80043fa:	b13b      	cbz	r3, 800440c <HAL_SPI_Init+0x50>
 80043fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004400:	d004      	beq.n	800440c <HAL_SPI_Init+0x50>
 8004402:	486f      	ldr	r0, [pc, #444]	; (80045c0 <HAL_SPI_Init+0x204>)
 8004404:	f240 1143 	movw	r1, #323	; 0x143
 8004408:	f7fd f970 	bl	80016ec <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800440c:	68a3      	ldr	r3, [r4, #8]
 800440e:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8004412:	f040 809a 	bne.w	800454a <HAL_SPI_Init+0x18e>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004416:	68e3      	ldr	r3, [r4, #12]
 8004418:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800441c:	f040 80a3 	bne.w	8004566 <HAL_SPI_Init+0x1aa>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004420:	69a3      	ldr	r3, [r4, #24]
 8004422:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8004426:	d003      	beq.n	8004430 <HAL_SPI_Init+0x74>
 8004428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800442c:	f040 80aa 	bne.w	8004584 <HAL_SPI_Init+0x1c8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004430:	69e3      	ldr	r3, [r4, #28]
 8004432:	f033 0318 	bics.w	r3, r3, #24
 8004436:	d006      	beq.n	8004446 <HAL_SPI_Init+0x8a>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d004      	beq.n	8004446 <HAL_SPI_Init+0x8a>
 800443c:	4860      	ldr	r0, [pc, #384]	; (80045c0 <HAL_SPI_Init+0x204>)
 800443e:	f240 1147 	movw	r1, #327	; 0x147
 8004442:	f7fd f953 	bl	80016ec <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004446:	6a23      	ldr	r3, [r4, #32]
 8004448:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800444c:	d004      	beq.n	8004458 <HAL_SPI_Init+0x9c>
 800444e:	485c      	ldr	r0, [pc, #368]	; (80045c0 <HAL_SPI_Init+0x204>)
 8004450:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004454:	f7fd f94a 	bl	80016ec <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800445a:	2b00      	cmp	r3, #0
 800445c:	d15c      	bne.n	8004518 <HAL_SPI_Init+0x15c>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800445e:	6923      	ldr	r3, [r4, #16]
 8004460:	f033 0302 	bics.w	r3, r3, #2
 8004464:	d004      	beq.n	8004470 <HAL_SPI_Init+0xb4>
 8004466:	4856      	ldr	r0, [pc, #344]	; (80045c0 <HAL_SPI_Init+0x204>)
 8004468:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800446c:	f7fd f93e 	bl	80016ec <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004470:	6963      	ldr	r3, [r4, #20]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d904      	bls.n	8004480 <HAL_SPI_Init+0xc4>
 8004476:	4852      	ldr	r0, [pc, #328]	; (80045c0 <HAL_SPI_Init+0x204>)
 8004478:	f240 114d 	movw	r1, #333	; 0x14d
 800447c:	f7fd f936 	bl	80016ec <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004486:	f000 808a 	beq.w	800459e <HAL_SPI_Init+0x1e2>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800448a:	2300      	movs	r3, #0
 800448c:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800448e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004492:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004494:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004498:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800449a:	2a00      	cmp	r2, #0
 800449c:	d069      	beq.n	8004572 <HAL_SPI_Init+0x1b6>
 800449e:	4619      	mov	r1, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044a0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80044a4:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 80044a8:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 80044ac:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80044b0:	432b      	orrs	r3, r5
 80044b2:	f400 6500 	and.w	r5, r0, #2048	; 0x800
 80044b6:	6960      	ldr	r0, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 80044b8:	6826      	ldr	r6, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044ba:	432b      	orrs	r3, r5
 80044bc:	f002 0502 	and.w	r5, r2, #2
 80044c0:	69a2      	ldr	r2, [r4, #24]
 80044c2:	432b      	orrs	r3, r5
 80044c4:	f000 0001 	and.w	r0, r0, #1
 80044c8:	69e5      	ldr	r5, [r4, #28]
 80044ca:	4303      	orrs	r3, r0
 80044cc:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80044d0:	4303      	orrs	r3, r0
 80044d2:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80044d6:	6a20      	ldr	r0, [r4, #32]
 80044d8:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 80044da:	2502      	movs	r5, #2
 80044dc:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044e0:	f000 0080 	and.w	r0, r0, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044e6:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044e8:	0c12      	lsrs	r2, r2, #16
  __HAL_SPI_DISABLE(hspi);
 80044ea:	6830      	ldr	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044ec:	f005 0510 	and.w	r5, r5, #16
 80044f0:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044f4:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044f6:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 80044f8:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80044fc:	6030      	str	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044fe:	6033      	str	r3, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004500:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004502:	69f3      	ldr	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004504:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800450a:	2101      	movs	r1, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800450c:	61f3      	str	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800450e:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004510:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  return HAL_OK;
 8004514:	4610      	mov	r0, r2
}
 8004516:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004518:	2b10      	cmp	r3, #16
 800451a:	d007      	beq.n	800452c <HAL_SPI_Init+0x170>
 800451c:	4828      	ldr	r0, [pc, #160]	; (80045c0 <HAL_SPI_Init+0x204>)
 800451e:	f240 1149 	movw	r1, #329	; 0x149
 8004522:	f7fd f8e3 	bl	80016ec <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004528:	2b00      	cmp	r3, #0
 800452a:	d098      	beq.n	800445e <HAL_SPI_Init+0xa2>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800452c:	69e3      	ldr	r3, [r4, #28]
 800452e:	f033 0318 	bics.w	r3, r3, #24
 8004532:	d006      	beq.n	8004542 <HAL_SPI_Init+0x186>
 8004534:	2b20      	cmp	r3, #32
 8004536:	d004      	beq.n	8004542 <HAL_SPI_Init+0x186>
 8004538:	4821      	ldr	r0, [pc, #132]	; (80045c0 <HAL_SPI_Init+0x204>)
 800453a:	f240 115b 	movw	r1, #347	; 0x15b
 800453e:	f7fd f8d5 	bl	80016ec <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004542:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004544:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8004548:	e7a1      	b.n	800448e <HAL_SPI_Init+0xd2>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800454a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454e:	f43f af62 	beq.w	8004416 <HAL_SPI_Init+0x5a>
 8004552:	481b      	ldr	r0, [pc, #108]	; (80045c0 <HAL_SPI_Init+0x204>)
 8004554:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004558:	f7fd f8c8 	bl	80016ec <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800455c:	68e3      	ldr	r3, [r4, #12]
 800455e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8004562:	f43f af5d 	beq.w	8004420 <HAL_SPI_Init+0x64>
 8004566:	4816      	ldr	r0, [pc, #88]	; (80045c0 <HAL_SPI_Init+0x204>)
 8004568:	f240 1145 	movw	r1, #325	; 0x145
 800456c:	f7fd f8be 	bl	80016ec <assert_failed>
 8004570:	e756      	b.n	8004420 <HAL_SPI_Init+0x64>
    hspi->Lock = HAL_UNLOCKED;
 8004572:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004576:	4620      	mov	r0, r4
 8004578:	f7ff ff1e 	bl	80043b8 <HAL_SPI_MspInit>
 800457c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800457e:	f403 5100 	and.w	r1, r3, #8192	; 0x2000
 8004582:	e78d      	b.n	80044a0 <HAL_SPI_Init+0xe4>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004584:	480e      	ldr	r0, [pc, #56]	; (80045c0 <HAL_SPI_Init+0x204>)
 8004586:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800458a:	f7fd f8af 	bl	80016ec <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800458e:	69e3      	ldr	r3, [r4, #28]
 8004590:	f033 0318 	bics.w	r3, r3, #24
 8004594:	f43f af57 	beq.w	8004446 <HAL_SPI_Init+0x8a>
 8004598:	e74e      	b.n	8004438 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 800459a:	2001      	movs	r0, #1
}
 800459c:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800459e:	69e3      	ldr	r3, [r4, #28]
 80045a0:	f033 0318 	bics.w	r3, r3, #24
 80045a4:	f43f af73 	beq.w	800448e <HAL_SPI_Init+0xd2>
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	f43f af70 	beq.w	800448e <HAL_SPI_Init+0xd2>
 80045ae:	4804      	ldr	r0, [pc, #16]	; (80045c0 <HAL_SPI_Init+0x204>)
 80045b0:	f240 1151 	movw	r1, #337	; 0x151
 80045b4:	f7fd f89a 	bl	80016ec <assert_failed>
 80045b8:	e769      	b.n	800448e <HAL_SPI_Init+0xd2>
 80045ba:	bf00      	nop
 80045bc:	40013000 	.word	0x40013000
 80045c0:	08009aa8 	.word	0x08009aa8

080045c4 <HAL_SPI_TransmitReceive>:
{
 80045c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045c8:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80045ca:	6880      	ldr	r0, [r0, #8]
{
 80045cc:	b083      	sub	sp, #12
 80045ce:	4688      	mov	r8, r1
 80045d0:	4691      	mov	r9, r2
 80045d2:	461f      	mov	r7, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80045d4:	2800      	cmp	r0, #0
 80045d6:	f040 80a8 	bne.w	800472a <HAL_SPI_TransmitReceive+0x166>
  __HAL_LOCK(hspi);
 80045da:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 80045de:	2801      	cmp	r0, #1
 80045e0:	f000 80ad 	beq.w	800473e <HAL_SPI_TransmitReceive+0x17a>
 80045e4:	2301      	movs	r3, #1
 80045e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80045ea:	f7fd fb01 	bl	8001bf0 <HAL_GetTick>
  tmp_state           = hspi->State;
 80045ee:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80045f2:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045f4:	2e01      	cmp	r6, #1
  tickstart = HAL_GetTick();
 80045f6:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 80045f8:	b2f2      	uxtb	r2, r6
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045fa:	d011      	beq.n	8004620 <HAL_SPI_TransmitReceive+0x5c>
 80045fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004600:	d009      	beq.n	8004616 <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 8004602:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004604:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004606:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004608:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800460c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004610:	b003      	add	sp, #12
 8004612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004616:	68a1      	ldr	r1, [r4, #8]
 8004618:	2900      	cmp	r1, #0
 800461a:	d1f2      	bne.n	8004602 <HAL_SPI_TransmitReceive+0x3e>
 800461c:	2a04      	cmp	r2, #4
 800461e:	d1f0      	bne.n	8004602 <HAL_SPI_TransmitReceive+0x3e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004620:	f1b8 0f00 	cmp.w	r8, #0
 8004624:	f000 808f 	beq.w	8004746 <HAL_SPI_TransmitReceive+0x182>
 8004628:	f1b9 0f00 	cmp.w	r9, #0
 800462c:	f000 808b 	beq.w	8004746 <HAL_SPI_TransmitReceive+0x182>
 8004630:	2f00      	cmp	r7, #0
 8004632:	f000 8088 	beq.w	8004746 <HAL_SPI_TransmitReceive+0x182>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004636:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800463a:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800463c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004640:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004642:	bf1c      	itt	ne
 8004644:	2205      	movne	r2, #5
 8004646:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800464a:	2200      	movs	r2, #0
 800464c:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 800464e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004650:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004652:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 8004654:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8004656:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800465a:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800465c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004660:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004662:	d403      	bmi.n	800466c <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8004664:	6802      	ldr	r2, [r0, #0]
 8004666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800466a:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800466c:	68e2      	ldr	r2, [r4, #12]
 800466e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004672:	f000 80b6 	beq.w	80047e2 <HAL_SPI_TransmitReceive+0x21e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80a8 	beq.w	80047cc <HAL_SPI_TransmitReceive+0x208>
 800467c:	2f01      	cmp	r7, #1
 800467e:	f000 80a5 	beq.w	80047cc <HAL_SPI_TransmitReceive+0x208>
 8004682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004684:	3301      	adds	r3, #1
        txallowed = 1U;
 8004686:	f04f 0601 	mov.w	r6, #1
 800468a:	d028      	beq.n	80046de <HAL_SPI_TransmitReceive+0x11a>
 800468c:	e05d      	b.n	800474a <HAL_SPI_TransmitReceive+0x186>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800468e:	6822      	ldr	r2, [r4, #0]
 8004690:	6893      	ldr	r3, [r2, #8]
 8004692:	0798      	lsls	r0, r3, #30
 8004694:	d50f      	bpl.n	80046b6 <HAL_SPI_TransmitReceive+0xf2>
 8004696:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004698:	b29b      	uxth	r3, r3
 800469a:	b163      	cbz	r3, 80046b6 <HAL_SPI_TransmitReceive+0xf2>
 800469c:	b15e      	cbz	r6, 80046b6 <HAL_SPI_TransmitReceive+0xf2>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800469e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80046a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80046a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80046a8:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80046ae:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 80046b0:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80046b2:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 80046b4:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046b6:	6893      	ldr	r3, [r2, #8]
 80046b8:	f013 0301 	ands.w	r3, r3, #1
 80046bc:	d00d      	beq.n	80046da <HAL_SPI_TransmitReceive+0x116>
 80046be:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80046c0:	b289      	uxth	r1, r1
 80046c2:	b151      	cbz	r1, 80046da <HAL_SPI_TransmitReceive+0x116>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80046c6:	68d2      	ldr	r2, [r2, #12]
 80046c8:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 80046ca:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80046cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80046ce:	3a01      	subs	r2, #1
 80046d0:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 80046d2:	3101      	adds	r1, #1
        txallowed = 1U;
 80046d4:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80046d6:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80046d8:	63a1      	str	r1, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046da:	f7fd fa89 	bl	8001bf0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1d3      	bne.n	800468e <HAL_SPI_TransmitReceive+0xca>
 80046e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1cf      	bne.n	800468e <HAL_SPI_TransmitReceive+0xca>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046ee:	4b7e      	ldr	r3, [pc, #504]	; (80048e8 <HAL_SPI_TransmitReceive+0x324>)
 80046f0:	4a7e      	ldr	r2, [pc, #504]	; (80048ec <HAL_SPI_TransmitReceive+0x328>)
 80046f2:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f4:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0d5b      	lsrs	r3, r3, #21
 80046fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004700:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004704:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004708:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800470a:	d150      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x1ea>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800470c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800470e:	462b      	mov	r3, r5
 8004710:	2180      	movs	r1, #128	; 0x80
 8004712:	4620      	mov	r0, r4
 8004714:	f7ff fdf0 	bl	80042f8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004718:	2800      	cmp	r0, #0
 800471a:	d04b      	beq.n	80047b4 <HAL_SPI_TransmitReceive+0x1f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800471c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800471e:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004720:	4313      	orrs	r3, r2
 8004722:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004724:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004726:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8004728:	e76c      	b.n	8004604 <HAL_SPI_TransmitReceive+0x40>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800472a:	4871      	ldr	r0, [pc, #452]	; (80048f0 <HAL_SPI_TransmitReceive+0x32c>)
 800472c:	f240 417e 	movw	r1, #1150	; 0x47e
 8004730:	f7fc ffdc 	bl	80016ec <assert_failed>
  __HAL_LOCK(hspi);
 8004734:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8004738:	2801      	cmp	r0, #1
 800473a:	f47f af53 	bne.w	80045e4 <HAL_SPI_TransmitReceive+0x20>
 800473e:	2002      	movs	r0, #2
}
 8004740:	b003      	add	sp, #12
 8004742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8004746:	2001      	movs	r0, #1
 8004748:	e75c      	b.n	8004604 <HAL_SPI_TransmitReceive+0x40>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800474a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800474c:	b29b      	uxth	r3, r3
 800474e:	b91b      	cbnz	r3, 8004758 <HAL_SPI_TransmitReceive+0x194>
 8004750:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ca      	beq.n	80046ee <HAL_SPI_TransmitReceive+0x12a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004758:	6822      	ldr	r2, [r4, #0]
 800475a:	6893      	ldr	r3, [r2, #8]
 800475c:	0799      	lsls	r1, r3, #30
 800475e:	d50f      	bpl.n	8004780 <HAL_SPI_TransmitReceive+0x1bc>
 8004760:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004762:	b29b      	uxth	r3, r3
 8004764:	b163      	cbz	r3, 8004780 <HAL_SPI_TransmitReceive+0x1bc>
 8004766:	b15e      	cbz	r6, 8004780 <HAL_SPI_TransmitReceive+0x1bc>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004768:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800476e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004770:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004772:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8004774:	3b01      	subs	r3, #1
 8004776:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004778:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 800477a:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800477c:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800477e:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004780:	6893      	ldr	r3, [r2, #8]
 8004782:	f013 0301 	ands.w	r3, r3, #1
 8004786:	d003      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x1cc>
 8004788:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800478a:	b289      	uxth	r1, r1
 800478c:	2900      	cmp	r1, #0
 800478e:	d167      	bne.n	8004860 <HAL_SPI_TransmitReceive+0x29c>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004790:	f7fd fa2e 	bl	8001bf0 <HAL_GetTick>
 8004794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004796:	1b40      	subs	r0, r0, r5
 8004798:	4298      	cmp	r0, r3
 800479a:	d3d6      	bcc.n	800474a <HAL_SPI_TransmitReceive+0x186>
        errorcode = HAL_TIMEOUT;
 800479c:	2003      	movs	r0, #3
 800479e:	e731      	b.n	8004604 <HAL_SPI_TransmitReceive+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 80047a0:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047a2:	6822      	ldr	r2, [r4, #0]
      count--;
 80047a4:	3b01      	subs	r3, #1
 80047a6:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047a8:	6893      	ldr	r3, [r2, #8]
 80047aa:	061b      	lsls	r3, r3, #24
 80047ac:	d502      	bpl.n	80047b4 <HAL_SPI_TransmitReceive+0x1f0>
      if (count == 0U)
 80047ae:	9b01      	ldr	r3, [sp, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f5      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x1dc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047b4:	68a0      	ldr	r0, [r4, #8]
 80047b6:	2800      	cmp	r0, #0
 80047b8:	f040 8093 	bne.w	80048e2 <HAL_SPI_TransmitReceive+0x31e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	9000      	str	r0, [sp, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	9200      	str	r2, [sp, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	9b00      	ldr	r3, [sp, #0]
 80047ca:	e71b      	b.n	8004604 <HAL_SPI_TransmitReceive+0x40>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047cc:	f898 3000 	ldrb.w	r3, [r8]
 80047d0:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80047d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047da:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80047dc:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047de:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80047e0:	e74f      	b.n	8004682 <HAL_SPI_TransmitReceive+0xbe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d148      	bne.n	8004878 <HAL_SPI_TransmitReceive+0x2b4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047e6:	4641      	mov	r1, r8
 80047e8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80047ec:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80047ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047f0:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80047f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047fa:	3301      	adds	r3, #1
{
 80047fc:	f04f 0601 	mov.w	r6, #1
 8004800:	d025      	beq.n	800484e <HAL_SPI_TransmitReceive+0x28a>
 8004802:	e03c      	b.n	800487e <HAL_SPI_TransmitReceive+0x2ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	6893      	ldr	r3, [r2, #8]
 8004808:	079b      	lsls	r3, r3, #30
 800480a:	d50d      	bpl.n	8004828 <HAL_SPI_TransmitReceive+0x264>
 800480c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800480e:	b29b      	uxth	r3, r3
 8004810:	b153      	cbz	r3, 8004828 <HAL_SPI_TransmitReceive+0x264>
 8004812:	b14e      	cbz	r6, 8004828 <HAL_SPI_TransmitReceive+0x264>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004814:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004816:	f831 3b02 	ldrh.w	r3, [r1], #2
 800481a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800481c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800481e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004820:	3b01      	subs	r3, #1
 8004822:	b29b      	uxth	r3, r3
 8004824:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004826:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004828:	6893      	ldr	r3, [r2, #8]
 800482a:	f013 0301 	ands.w	r3, r3, #1
 800482e:	d00c      	beq.n	800484a <HAL_SPI_TransmitReceive+0x286>
 8004830:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004832:	b289      	uxth	r1, r1
 8004834:	b149      	cbz	r1, 800484a <HAL_SPI_TransmitReceive+0x286>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004836:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004838:	68d2      	ldr	r2, [r2, #12]
 800483a:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800483e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004840:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004842:	3a01      	subs	r2, #1
 8004844:	b292      	uxth	r2, r2
        txallowed = 1U;
 8004846:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8004848:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800484a:	f7fd f9d1 	bl	8001bf0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800484e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1d6      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x240>
 8004856:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1d2      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x240>
 800485e:	e746      	b.n	80046ee <HAL_SPI_TransmitReceive+0x12a>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004860:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004862:	68d2      	ldr	r2, [r2, #12]
 8004864:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 8004866:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004868:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800486a:	3a01      	subs	r2, #1
 800486c:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 800486e:	3101      	adds	r1, #1
        txallowed = 1U;
 8004870:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8004872:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004874:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 1U;
 8004876:	e78b      	b.n	8004790 <HAL_SPI_TransmitReceive+0x1cc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004878:	2f01      	cmp	r7, #1
 800487a:	d1bd      	bne.n	80047f8 <HAL_SPI_TransmitReceive+0x234>
 800487c:	e7b3      	b.n	80047e6 <HAL_SPI_TransmitReceive+0x222>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800487e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004880:	b29b      	uxth	r3, r3
 8004882:	b923      	cbnz	r3, 800488e <HAL_SPI_TransmitReceive+0x2ca>
 8004884:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	f43f af30 	beq.w	80046ee <HAL_SPI_TransmitReceive+0x12a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800488e:	6822      	ldr	r2, [r4, #0]
 8004890:	6893      	ldr	r3, [r2, #8]
 8004892:	079f      	lsls	r7, r3, #30
 8004894:	d50d      	bpl.n	80048b2 <HAL_SPI_TransmitReceive+0x2ee>
 8004896:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004898:	b29b      	uxth	r3, r3
 800489a:	b153      	cbz	r3, 80048b2 <HAL_SPI_TransmitReceive+0x2ee>
 800489c:	b14e      	cbz	r6, 80048b2 <HAL_SPI_TransmitReceive+0x2ee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800489e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80048a0:	f831 3b02 	ldrh.w	r3, [r1], #2
 80048a4:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80048a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a8:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80048b0:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048b2:	6893      	ldr	r3, [r2, #8]
 80048b4:	f013 0301 	ands.w	r3, r3, #1
 80048b8:	d00c      	beq.n	80048d4 <HAL_SPI_TransmitReceive+0x310>
 80048ba:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80048bc:	b289      	uxth	r1, r1
 80048be:	b149      	cbz	r1, 80048d4 <HAL_SPI_TransmitReceive+0x310>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80048c2:	68d2      	ldr	r2, [r2, #12]
 80048c4:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80048c8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ca:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80048cc:	3a01      	subs	r2, #1
 80048ce:	b292      	uxth	r2, r2
        txallowed = 1U;
 80048d0:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80048d2:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048d4:	f7fd f98c 	bl	8001bf0 <HAL_GetTick>
 80048d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048da:	1b40      	subs	r0, r0, r5
 80048dc:	4298      	cmp	r0, r3
 80048de:	d3ce      	bcc.n	800487e <HAL_SPI_TransmitReceive+0x2ba>
 80048e0:	e75c      	b.n	800479c <HAL_SPI_TransmitReceive+0x1d8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048e2:	2000      	movs	r0, #0
 80048e4:	e68e      	b.n	8004604 <HAL_SPI_TransmitReceive+0x40>
 80048e6:	bf00      	nop
 80048e8:	20000000 	.word	0x20000000
 80048ec:	165e9f81 	.word	0x165e9f81
 80048f0:	08009aa8 	.word	0x08009aa8

080048f4 <HAL_SPI_GetState>:
  return hspi->State;
 80048f4:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop

080048fc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fc:	2800      	cmp	r0, #0
 80048fe:	f000 80cd 	beq.w	8004a9c <HAL_TIM_Base_Init+0x1a0>
{
 8004902:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004904:	4a66      	ldr	r2, [pc, #408]	; (8004aa0 <HAL_TIM_Base_Init+0x1a4>)
 8004906:	6803      	ldr	r3, [r0, #0]
 8004908:	4293      	cmp	r3, r2
 800490a:	4604      	mov	r4, r0
 800490c:	d01f      	beq.n	800494e <HAL_TIM_Base_Init+0x52>
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d01c      	beq.n	800494e <HAL_TIM_Base_Init+0x52>
 8004914:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004918:	4293      	cmp	r3, r2
 800491a:	d018      	beq.n	800494e <HAL_TIM_Base_Init+0x52>
 800491c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004920:	4293      	cmp	r3, r2
 8004922:	d014      	beq.n	800494e <HAL_TIM_Base_Init+0x52>
 8004924:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004928:	4293      	cmp	r3, r2
 800492a:	d010      	beq.n	800494e <HAL_TIM_Base_Init+0x52>
 800492c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004930:	4293      	cmp	r3, r2
 8004932:	d00c      	beq.n	800494e <HAL_TIM_Base_Init+0x52>
 8004934:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004938:	4293      	cmp	r3, r2
 800493a:	d008      	beq.n	800494e <HAL_TIM_Base_Init+0x52>
 800493c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_TIM_Base_Init+0x52>
 8004944:	4857      	ldr	r0, [pc, #348]	; (8004aa4 <HAL_TIM_Base_Init+0x1a8>)
 8004946:	f240 1113 	movw	r1, #275	; 0x113
 800494a:	f7fc fecf 	bl	80016ec <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800494e:	68a3      	ldr	r3, [r4, #8]
 8004950:	f033 0210 	bics.w	r2, r3, #16
 8004954:	d00a      	beq.n	800496c <HAL_TIM_Base_Init+0x70>
 8004956:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800495a:	2a20      	cmp	r2, #32
 800495c:	d006      	beq.n	800496c <HAL_TIM_Base_Init+0x70>
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d004      	beq.n	800496c <HAL_TIM_Base_Init+0x70>
 8004962:	4850      	ldr	r0, [pc, #320]	; (8004aa4 <HAL_TIM_Base_Init+0x1a8>)
 8004964:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004968:	f7fc fec0 	bl	80016ec <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800496c:	6923      	ldr	r3, [r4, #16]
 800496e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8004972:	d003      	beq.n	800497c <HAL_TIM_Base_Init+0x80>
 8004974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004978:	f040 8085 	bne.w	8004a86 <HAL_TIM_Base_Init+0x18a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800497c:	69a3      	ldr	r3, [r4, #24]
 800497e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004982:	d132      	bne.n	80049ea <HAL_TIM_Base_Init+0xee>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004984:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004988:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800498c:	2b00      	cmp	r3, #0
 800498e:	d037      	beq.n	8004a00 <HAL_TIM_Base_Init+0x104>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004990:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004992:	4943      	ldr	r1, [pc, #268]	; (8004aa0 <HAL_TIM_Base_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	2302      	movs	r3, #2
 8004996:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800499a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800499c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800499e:	d05e      	beq.n	8004a5e <HAL_TIM_Base_Init+0x162>
 80049a0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80049a4:	d032      	beq.n	8004a0c <HAL_TIM_Base_Init+0x110>
 80049a6:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80049aa:	428a      	cmp	r2, r1
 80049ac:	d02e      	beq.n	8004a0c <HAL_TIM_Base_Init+0x110>
 80049ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049b2:	428a      	cmp	r2, r1
 80049b4:	d02a      	beq.n	8004a0c <HAL_TIM_Base_Init+0x110>
 80049b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049ba:	428a      	cmp	r2, r1
 80049bc:	d026      	beq.n	8004a0c <HAL_TIM_Base_Init+0x110>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049be:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80049c2:	428a      	cmp	r2, r1
 80049c4:	d026      	beq.n	8004a14 <HAL_TIM_Base_Init+0x118>
 80049c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049ca:	428a      	cmp	r2, r1
 80049cc:	d022      	beq.n	8004a14 <HAL_TIM_Base_Init+0x118>
 80049ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049d2:	428a      	cmp	r2, r1
 80049d4:	d01e      	beq.n	8004a14 <HAL_TIM_Base_Init+0x118>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d6:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d8:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049da:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80049e2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049e6:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e8:	e021      	b.n	8004a2e <HAL_TIM_Base_Init+0x132>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80049ea:	482e      	ldr	r0, [pc, #184]	; (8004aa4 <HAL_TIM_Base_Init+0x1a8>)
 80049ec:	f44f 718b 	mov.w	r1, #278	; 0x116
 80049f0:	f7fc fe7c 	bl	80016ec <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80049f4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80049f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1c7      	bne.n	8004990 <HAL_TIM_Base_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 8004a00:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004a04:	4620      	mov	r0, r4
 8004a06:	f7fd f863 	bl	8001ad0 <HAL_TIM_Base_MspInit>
 8004a0a:	e7c1      	b.n	8004990 <HAL_TIM_Base_Init+0x94>
    tmpcr1 |= Structure->CounterMode;
 8004a0c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a12:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a14:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a16:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a18:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a1e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a24:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004a26:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004a28:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a2c:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a32:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004a3a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004a3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004a56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004a5a:	2000      	movs	r0, #0
}
 8004a5c:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004a5e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a60:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a62:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a68:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a6e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a74:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004a76:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a78:	68e3      	ldr	r3, [r4, #12]
 8004a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a7c:	6863      	ldr	r3, [r4, #4]
 8004a7e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	6963      	ldr	r3, [r4, #20]
 8004a82:	6313      	str	r3, [r2, #48]	; 0x30
 8004a84:	e7d3      	b.n	8004a2e <HAL_TIM_Base_Init+0x132>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004a86:	4807      	ldr	r0, [pc, #28]	; (8004aa4 <HAL_TIM_Base_Init+0x1a8>)
 8004a88:	f240 1115 	movw	r1, #277	; 0x115
 8004a8c:	f7fc fe2e 	bl	80016ec <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004a90:	69a3      	ldr	r3, [r4, #24]
 8004a92:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004a96:	f43f af75 	beq.w	8004984 <HAL_TIM_Base_Init+0x88>
 8004a9a:	e7a6      	b.n	80049ea <HAL_TIM_Base_Init+0xee>
    return HAL_ERROR;
 8004a9c:	2001      	movs	r0, #1
}
 8004a9e:	4770      	bx	lr
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	08009ae0 	.word	0x08009ae0

08004aa8 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004aa8:	4a2a      	ldr	r2, [pc, #168]	; (8004b54 <HAL_TIM_Base_Start_IT+0xac>)
 8004aaa:	6803      	ldr	r3, [r0, #0]
 8004aac:	4293      	cmp	r3, r2
{
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004ab2:	d01f      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x4c>
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab8:	d01c      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x4c>
 8004aba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d018      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x4c>
 8004ac2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d014      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x4c>
 8004aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d010      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x4c>
 8004ad2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00c      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x4c>
 8004ada:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d008      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x4c>
 8004ae2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x4c>
 8004aea:	481b      	ldr	r0, [pc, #108]	; (8004b58 <HAL_TIM_Base_Start_IT+0xb0>)
 8004aec:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004af0:	f7fc fdfc 	bl	80016ec <assert_failed>
  if (htim->State != HAL_TIM_STATE_READY)
 8004af4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d127      	bne.n	8004b4c <HAL_TIM_Base_Start_IT+0xa4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004afc:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afe:	4915      	ldr	r1, [pc, #84]	; (8004b54 <HAL_TIM_Base_Start_IT+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	2202      	movs	r2, #2
 8004b02:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b06:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b08:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b10:	d011      	beq.n	8004b36 <HAL_TIM_Base_Start_IT+0x8e>
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b16:	d00e      	beq.n	8004b36 <HAL_TIM_Base_Start_IT+0x8e>
 8004b18:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <HAL_TIM_Base_Start_IT+0xb4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <HAL_TIM_Base_Start_IT+0x8e>
 8004b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <HAL_TIM_Base_Start_IT+0x8e>
 8004b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_Base_Start_IT+0x8e>
 8004b2e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d104      	bne.n	8004b40 <HAL_TIM_Base_Start_IT+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3c:	2a06      	cmp	r2, #6
 8004b3e:	d007      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0xa8>
    __HAL_TIM_ENABLE(htim);
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004b48:	2000      	movs	r0, #0
}
 8004b4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004b4c:	2001      	movs	r0, #1
}
 8004b4e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8004b50:	2000      	movs	r0, #0
}
 8004b52:	bd10      	pop	{r4, pc}
 8004b54:	40010000 	.word	0x40010000
 8004b58:	08009ae0 	.word	0x08009ae0
 8004b5c:	40000400 	.word	0x40000400

08004b60 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004b60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	f000 8177 	beq.w	8004e58 <HAL_TIM_ConfigClockSource+0x2f8>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004b6c:	2201      	movs	r2, #1
{
 8004b6e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004b70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004b78:	680b      	ldr	r3, [r1, #0]
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7e:	4604      	mov	r4, r0
 8004b80:	460d      	mov	r5, r1
 8004b82:	f000 8124 	beq.w	8004dce <HAL_TIM_ConfigClockSource+0x26e>
 8004b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b8a:	f000 8153 	beq.w	8004e34 <HAL_TIM_ConfigClockSource+0x2d4>
 8004b8e:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 8004b92:	f040 8157 	bne.w	8004e44 <HAL_TIM_ConfigClockSource+0x2e4>
  tmpsmcr = htim->Instance->SMCR;
 8004b96:	6822      	ldr	r2, [r4, #0]
 8004b98:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8004b9e:	f021 0177 	bic.w	r1, r1, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004ba2:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004ba4:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004ba6:	f000 81a1 	beq.w	8004eec <HAL_TIM_ConfigClockSource+0x38c>
 8004baa:	d87e      	bhi.n	8004caa <HAL_TIM_ConfigClockSource+0x14a>
 8004bac:	2b40      	cmp	r3, #64	; 0x40
 8004bae:	f000 8159 	beq.w	8004e64 <HAL_TIM_ConfigClockSource+0x304>
 8004bb2:	d94c      	bls.n	8004c4e <HAL_TIM_ConfigClockSource+0xee>
 8004bb4:	2b50      	cmp	r3, #80	; 0x50
 8004bb6:	d143      	bne.n	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004bb8:	4ba8      	ldr	r3, [pc, #672]	; (8004e5c <HAL_TIM_ConfigClockSource+0x2fc>)
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d017      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x8e>
 8004bbe:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004bc2:	d014      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x8e>
 8004bc4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d010      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x8e>
 8004bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d00c      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x8e>
 8004bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d008      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x8e>
 8004bdc:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d004      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x8e>
 8004be4:	489e      	ldr	r0, [pc, #632]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004be6:	f241 4161 	movw	r1, #5217	; 0x1461
 8004bea:	f7fc fd7f 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004bee:	686b      	ldr	r3, [r5, #4]
 8004bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf4:	d009      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xaa>
 8004bf6:	f033 0202 	bics.w	r2, r3, #2
 8004bfa:	d006      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xaa>
 8004bfc:	2b0a      	cmp	r3, #10
 8004bfe:	d004      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xaa>
 8004c00:	4897      	ldr	r0, [pc, #604]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004c02:	f241 4164 	movw	r1, #5220	; 0x1464
 8004c06:	f7fc fd71 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004c0a:	68ee      	ldr	r6, [r5, #12]
 8004c0c:	2e0f      	cmp	r6, #15
 8004c0e:	f200 81ce 	bhi.w	8004fae <HAL_TIM_ConfigClockSource+0x44e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	6869      	ldr	r1, [r5, #4]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c16:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c18:	6a1d      	ldr	r5, [r3, #32]
 8004c1a:	f025 0501 	bic.w	r5, r5, #1
 8004c1e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c20:	699a      	ldr	r2, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c22:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c26:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c2a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004c2e:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c32:	6219      	str	r1, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c34:	689a      	ldr	r2, [r3, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c3a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3e:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004c42:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004c44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004c48:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004c4c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d002      	beq.n	8004c58 <HAL_TIM_ConfigClockSource+0xf8>
 8004c52:	d926      	bls.n	8004ca2 <HAL_TIM_ConfigClockSource+0x142>
 8004c54:	2b30      	cmp	r3, #48	; 0x30
 8004c56:	d1f3      	bne.n	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004c58:	4980      	ldr	r1, [pc, #512]	; (8004e5c <HAL_TIM_ConfigClockSource+0x2fc>)
 8004c5a:	428a      	cmp	r2, r1
 8004c5c:	d019      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x132>
 8004c5e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004c62:	d016      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x132>
 8004c64:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004c68:	428a      	cmp	r2, r1
 8004c6a:	d012      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x132>
 8004c6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c70:	428a      	cmp	r2, r1
 8004c72:	d00e      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x132>
 8004c74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c78:	428a      	cmp	r2, r1
 8004c7a:	d00a      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x132>
 8004c7c:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8004c80:	428a      	cmp	r2, r1
 8004c82:	d006      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x132>
 8004c84:	4876      	ldr	r0, [pc, #472]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004c86:	f241 4194 	movw	r1, #5268	; 0x1494
 8004c8a:	f7fc fd2f 	bl	80016ec <assert_failed>
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004c92:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c94:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004c9e:	6093      	str	r3, [r2, #8]
}
 8004ca0:	e7ce      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
  switch (sClockSourceConfig->ClockSource)
 8004ca2:	f033 0110 	bics.w	r1, r3, #16
 8004ca6:	d1cb      	bne.n	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
 8004ca8:	e7d6      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0xf8>
 8004caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cae:	f000 8095 	beq.w	8004ddc <HAL_TIM_ConfigClockSource+0x27c>
 8004cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb6:	d141      	bne.n	8004d3c <HAL_TIM_ConfigClockSource+0x1dc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004cb8:	4b68      	ldr	r3, [pc, #416]	; (8004e5c <HAL_TIM_ConfigClockSource+0x2fc>)
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d013      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x186>
 8004cbe:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004cc2:	d010      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x186>
 8004cc4:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d00c      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x186>
 8004ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d008      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x186>
 8004cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d004      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x186>
 8004cdc:	4860      	ldr	r0, [pc, #384]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004cde:	f241 414d 	movw	r1, #5197	; 0x144d
 8004ce2:	f7fc fd03 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004ce6:	68ab      	ldr	r3, [r5, #8]
 8004ce8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8004cec:	d004      	beq.n	8004cf8 <HAL_TIM_ConfigClockSource+0x198>
 8004cee:	485c      	ldr	r0, [pc, #368]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004cf0:	f241 4150 	movw	r1, #5200	; 0x1450
 8004cf4:	f7fc fcfa 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004cf8:	686b      	ldr	r3, [r5, #4]
 8004cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cfe:	d009      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x1b4>
 8004d00:	f033 0202 	bics.w	r2, r3, #2
 8004d04:	d006      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x1b4>
 8004d06:	2b0a      	cmp	r3, #10
 8004d08:	d004      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x1b4>
 8004d0a:	4855      	ldr	r0, [pc, #340]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004d0c:	f241 4151 	movw	r1, #5201	; 0x1451
 8004d10:	f7fc fcec 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004d14:	68e8      	ldr	r0, [r5, #12]
 8004d16:	280f      	cmp	r0, #15
 8004d18:	f200 813b 	bhi.w	8004f92 <HAL_TIM_ConfigClockSource+0x432>
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	6822      	ldr	r2, [r4, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d1e:	68ab      	ldr	r3, [r5, #8]
 8004d20:	6891      	ldr	r1, [r2, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d22:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d24:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8004d28:	432b      	orrs	r3, r5
 8004d2a:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d2c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d30:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d32:	6893      	ldr	r3, [r2, #8]
 8004d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d38:	6093      	str	r3, [r2, #8]
      break;
 8004d3a:	e781      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
  switch (sClockSourceConfig->ClockSource)
 8004d3c:	2b70      	cmp	r3, #112	; 0x70
 8004d3e:	f47f af7f 	bne.w	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004d42:	4b46      	ldr	r3, [pc, #280]	; (8004e5c <HAL_TIM_ConfigClockSource+0x2fc>)
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d017      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x218>
 8004d48:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004d4c:	d014      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x218>
 8004d4e:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d010      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x218>
 8004d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d00c      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x218>
 8004d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d008      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x218>
 8004d66:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0x218>
 8004d6e:	483c      	ldr	r0, [pc, #240]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004d70:	f241 4135 	movw	r1, #5173	; 0x1435
 8004d74:	f7fc fcba 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004d78:	68ab      	ldr	r3, [r5, #8]
 8004d7a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x22a>
 8004d80:	4837      	ldr	r0, [pc, #220]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004d82:	f241 4138 	movw	r1, #5176	; 0x1438
 8004d86:	f7fc fcb1 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004d8a:	686b      	ldr	r3, [r5, #4]
 8004d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d90:	d009      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x246>
 8004d92:	f033 0202 	bics.w	r2, r3, #2
 8004d96:	d006      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x246>
 8004d98:	2b0a      	cmp	r3, #10
 8004d9a:	d004      	beq.n	8004da6 <HAL_TIM_ConfigClockSource+0x246>
 8004d9c:	4830      	ldr	r0, [pc, #192]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004d9e:	f241 4139 	movw	r1, #5177	; 0x1439
 8004da2:	f7fc fca3 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004da6:	68e8      	ldr	r0, [r5, #12]
 8004da8:	280f      	cmp	r0, #15
 8004daa:	f200 80eb 	bhi.w	8004f84 <HAL_TIM_ConfigClockSource+0x424>
      TIM_ETR_SetConfig(htim->Instance,
 8004dae:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004db0:	68ab      	ldr	r3, [r5, #8]
 8004db2:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db4:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8004dba:	432b      	orrs	r3, r5
 8004dbc:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dbe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 8004dc2:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004dc4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004dca:	6093      	str	r3, [r2, #8]
      break;
 8004dcc:	e738      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
  tmpsmcr = htim->Instance->SMCR;
 8004dce:	6802      	ldr	r2, [r0, #0]
 8004dd0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004dda:	6093      	str	r3, [r2, #8]
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <HAL_TIM_ConfigClockSource+0x2fc>)
 8004dde:	429a      	cmp	r2, r3
 8004de0:	f43f af2e 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
 8004de4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004de8:	f43f af2a 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
 8004dec:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8004df0:	429a      	cmp	r2, r3
 8004df2:	f43f af25 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
 8004df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	f43f af20 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
 8004e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e04:	429a      	cmp	r2, r3
 8004e06:	f43f af1b 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
 8004e0a:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	f43f af16 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
 8004e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	f43f af11 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
 8004e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e22:	429a      	cmp	r2, r3
 8004e24:	f43f af0c 	beq.w	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
 8004e28:	480d      	ldr	r0, [pc, #52]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004e2a:	f241 412e 	movw	r1, #5166	; 0x142e
 8004e2e:	f7fc fc5d 	bl	80016ec <assert_failed>
 8004e32:	e705      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
  tmpsmcr = htim->Instance->SMCR;
 8004e34:	6802      	ldr	r2, [r0, #0]
 8004e36:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004e40:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004e42:	e739      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x158>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004e44:	2a40      	cmp	r2, #64	; 0x40
 8004e46:	f43f aea6 	beq.w	8004b96 <HAL_TIM_ConfigClockSource+0x36>
 8004e4a:	4805      	ldr	r0, [pc, #20]	; (8004e60 <HAL_TIM_ConfigClockSource+0x300>)
 8004e4c:	f241 4122 	movw	r1, #5154	; 0x1422
 8004e50:	f7fc fc4c 	bl	80016ec <assert_failed>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	e69e      	b.n	8004b96 <HAL_TIM_ConfigClockSource+0x36>
  __HAL_LOCK(htim);
 8004e58:	2002      	movs	r0, #2
}
 8004e5a:	4770      	bx	lr
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	08009ae0 	.word	0x08009ae0
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004e64:	4b55      	ldr	r3, [pc, #340]	; (8004fbc <HAL_TIM_ConfigClockSource+0x45c>)
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d017      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x33a>
 8004e6a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004e6e:	d014      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x33a>
 8004e70:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d010      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x33a>
 8004e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d00c      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x33a>
 8004e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d008      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x33a>
 8004e88:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d004      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x33a>
 8004e90:	484b      	ldr	r0, [pc, #300]	; (8004fc0 <HAL_TIM_ConfigClockSource+0x460>)
 8004e92:	f241 4181 	movw	r1, #5249	; 0x1481
 8004e96:	f7fc fc29 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004e9a:	686b      	ldr	r3, [r5, #4]
 8004e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea0:	d009      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x356>
 8004ea2:	f033 0202 	bics.w	r2, r3, #2
 8004ea6:	d006      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x356>
 8004ea8:	2b0a      	cmp	r3, #10
 8004eaa:	d004      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x356>
 8004eac:	4844      	ldr	r0, [pc, #272]	; (8004fc0 <HAL_TIM_ConfigClockSource+0x460>)
 8004eae:	f241 4184 	movw	r1, #5252	; 0x1484
 8004eb2:	f7fc fc1b 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004eb6:	68ee      	ldr	r6, [r5, #12]
 8004eb8:	2e0f      	cmp	r6, #15
 8004eba:	d871      	bhi.n	8004fa0 <HAL_TIM_ConfigClockSource+0x440>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8004ec0:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec2:	6a1d      	ldr	r5, [r3, #32]
 8004ec4:	f025 0501 	bic.w	r5, r5, #1
 8004ec8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eca:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ecc:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ed0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ed4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004ed8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004edc:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004ede:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ee0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ee4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004ee8:	609a      	str	r2, [r3, #8]
}
 8004eea:	e6a9      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004eec:	4b33      	ldr	r3, [pc, #204]	; (8004fbc <HAL_TIM_ConfigClockSource+0x45c>)
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d017      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x3c2>
 8004ef2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004ef6:	d014      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x3c2>
 8004ef8:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d010      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x3c2>
 8004f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d00c      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x3c2>
 8004f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d008      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x3c2>
 8004f10:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d004      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x3c2>
 8004f18:	4829      	ldr	r0, [pc, #164]	; (8004fc0 <HAL_TIM_ConfigClockSource+0x460>)
 8004f1a:	f241 4171 	movw	r1, #5233	; 0x1471
 8004f1e:	f7fc fbe5 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004f22:	686b      	ldr	r3, [r5, #4]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	d009      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x3de>
 8004f2a:	f033 0202 	bics.w	r2, r3, #2
 8004f2e:	d006      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x3de>
 8004f30:	2b0a      	cmp	r3, #10
 8004f32:	d004      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x3de>
 8004f34:	4822      	ldr	r0, [pc, #136]	; (8004fc0 <HAL_TIM_ConfigClockSource+0x460>)
 8004f36:	f241 4174 	movw	r1, #5236	; 0x1474
 8004f3a:	f7fc fbd7 	bl	80016ec <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004f3e:	68ee      	ldr	r6, [r5, #12]
 8004f40:	2e0f      	cmp	r6, #15
 8004f42:	d818      	bhi.n	8004f76 <HAL_TIM_ConfigClockSource+0x416>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f48:	6a18      	ldr	r0, [r3, #32]
 8004f4a:	f020 0010 	bic.w	r0, r0, #16
 8004f4e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f50:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8004f52:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f54:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f5c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f60:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004f64:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f66:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004f68:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f6e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	e664      	b.n	8004c40 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004f76:	4812      	ldr	r0, [pc, #72]	; (8004fc0 <HAL_TIM_ConfigClockSource+0x460>)
 8004f78:	f241 4175 	movw	r1, #5237	; 0x1475
 8004f7c:	f7fc fbb6 	bl	80016ec <assert_failed>
 8004f80:	68ee      	ldr	r6, [r5, #12]
 8004f82:	e7df      	b.n	8004f44 <HAL_TIM_ConfigClockSource+0x3e4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004f84:	480e      	ldr	r0, [pc, #56]	; (8004fc0 <HAL_TIM_ConfigClockSource+0x460>)
 8004f86:	f241 413a 	movw	r1, #5178	; 0x143a
 8004f8a:	f7fc fbaf 	bl	80016ec <assert_failed>
 8004f8e:	68e8      	ldr	r0, [r5, #12]
 8004f90:	e70d      	b.n	8004dae <HAL_TIM_ConfigClockSource+0x24e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004f92:	480b      	ldr	r0, [pc, #44]	; (8004fc0 <HAL_TIM_ConfigClockSource+0x460>)
 8004f94:	f241 4152 	movw	r1, #5202	; 0x1452
 8004f98:	f7fc fba8 	bl	80016ec <assert_failed>
 8004f9c:	68e8      	ldr	r0, [r5, #12]
 8004f9e:	e6bd      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004fa0:	4807      	ldr	r0, [pc, #28]	; (8004fc0 <HAL_TIM_ConfigClockSource+0x460>)
 8004fa2:	f241 4185 	movw	r1, #5253	; 0x1485
 8004fa6:	f7fc fba1 	bl	80016ec <assert_failed>
 8004faa:	68ee      	ldr	r6, [r5, #12]
 8004fac:	e786      	b.n	8004ebc <HAL_TIM_ConfigClockSource+0x35c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004fae:	4804      	ldr	r0, [pc, #16]	; (8004fc0 <HAL_TIM_ConfigClockSource+0x460>)
 8004fb0:	f241 4165 	movw	r1, #5221	; 0x1465
 8004fb4:	f7fc fb9a 	bl	80016ec <assert_failed>
 8004fb8:	68ee      	ldr	r6, [r5, #12]
 8004fba:	e62a      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0xb2>
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	08009ae0 	.word	0x08009ae0

08004fc4 <HAL_TIM_OC_DelayElapsedCallback>:
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop

08004fc8 <HAL_TIM_IC_CaptureCallback>:
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop

08004fcc <HAL_TIM_PWM_PulseFinishedCallback>:
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop

08004fd0 <HAL_TIM_TriggerCallback>:
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop

08004fd4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fd4:	6803      	ldr	r3, [r0, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	0791      	lsls	r1, r2, #30
{
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fde:	d502      	bpl.n	8004fe6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	0792      	lsls	r2, r2, #30
 8004fe4:	d45f      	bmi.n	80050a6 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	0750      	lsls	r0, r2, #29
 8004fea:	d502      	bpl.n	8004ff2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	0751      	lsls	r1, r2, #29
 8004ff0:	d446      	bmi.n	8005080 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	0712      	lsls	r2, r2, #28
 8004ff6:	d502      	bpl.n	8004ffe <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	0710      	lsls	r0, r2, #28
 8004ffc:	d42e      	bmi.n	800505c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	06d2      	lsls	r2, r2, #27
 8005002:	d502      	bpl.n	800500a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	06d0      	lsls	r0, r2, #27
 8005008:	d418      	bmi.n	800503c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	07d1      	lsls	r1, r2, #31
 800500e:	d502      	bpl.n	8005016 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	07d2      	lsls	r2, r2, #31
 8005014:	d45d      	bmi.n	80050d2 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	0610      	lsls	r0, r2, #24
 800501a:	d502      	bpl.n	8005022 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	0611      	lsls	r1, r2, #24
 8005020:	d45f      	bmi.n	80050e2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	0652      	lsls	r2, r2, #25
 8005026:	d502      	bpl.n	800502e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	0650      	lsls	r0, r2, #25
 800502c:	d461      	bmi.n	80050f2 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	0691      	lsls	r1, r2, #26
 8005032:	d502      	bpl.n	800503a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	0692      	lsls	r2, r2, #26
 8005038:	d443      	bmi.n	80050c2 <HAL_TIM_IRQHandler+0xee>
}
 800503a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800503c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005040:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005042:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005044:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800504c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800504e:	d064      	beq.n	800511a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005050:	f7ff ffba 	bl	8004fc8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005054:	2200      	movs	r2, #0
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	7722      	strb	r2, [r4, #28]
 800505a:	e7d6      	b.n	800500a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800505c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005060:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005062:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005064:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800506a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800506c:	d152      	bne.n	8005114 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	f7ff ffa9 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005072:	4620      	mov	r0, r4
 8005074:	f7ff ffaa 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005078:	2200      	movs	r2, #0
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	7722      	strb	r2, [r4, #28]
 800507e:	e7be      	b.n	8004ffe <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005080:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005084:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005086:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005088:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005090:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005092:	d13c      	bne.n	800510e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005094:	f7ff ff96 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	4620      	mov	r0, r4
 800509a:	f7ff ff97 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	2200      	movs	r2, #0
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	7722      	strb	r2, [r4, #28]
 80050a4:	e7a5      	b.n	8004ff2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050a6:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050aa:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050ac:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ae:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	079b      	lsls	r3, r3, #30
 80050b4:	d025      	beq.n	8005102 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	f7ff ff87 	bl	8004fc8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	2200      	movs	r2, #0
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	7722      	strb	r2, [r4, #28]
 80050c0:	e791      	b.n	8004fe6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050c2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80050c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050c8:	611a      	str	r2, [r3, #16]
}
 80050ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80050ce:	f000 b897 	b.w	8005200 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050d2:	f06f 0201 	mvn.w	r2, #1
 80050d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80050d8:	4620      	mov	r0, r4
 80050da:	f7fc fc43 	bl	8001964 <HAL_TIM_PeriodElapsedCallback>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	e799      	b.n	8005016 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 f88b 	bl	8005204 <HAL_TIMEx_BreakCallback>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	e797      	b.n	8005022 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80050f8:	4620      	mov	r0, r4
 80050fa:	f7ff ff69 	bl	8004fd0 <HAL_TIM_TriggerCallback>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	e795      	b.n	800502e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	f7ff ff5f 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005106:	4620      	mov	r0, r4
 8005108:	f7ff ff60 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
 800510c:	e7d5      	b.n	80050ba <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800510e:	f7ff ff5b 	bl	8004fc8 <HAL_TIM_IC_CaptureCallback>
 8005112:	e7c4      	b.n	800509e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8005114:	f7ff ff58 	bl	8004fc8 <HAL_TIM_IC_CaptureCallback>
 8005118:	e7ae      	b.n	8005078 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	f7ff ff53 	bl	8004fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800511e:	4620      	mov	r0, r4
 8005120:	f7ff ff54 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
 8005124:	e796      	b.n	8005054 <HAL_TIM_IRQHandler+0x80>
 8005126:	bf00      	nop

08005128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005128:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800512a:	4a32      	ldr	r2, [pc, #200]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800512c:	6803      	ldr	r3, [r0, #0]
 800512e:	4293      	cmp	r3, r2
{
 8005130:	4604      	mov	r4, r0
 8005132:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005134:	d013      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513a:	d010      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800513c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005140:	4293      	cmp	r3, r2
 8005142:	d00c      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8005144:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005148:	4293      	cmp	r3, r2
 800514a:	d008      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 800514c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8005154:	4828      	ldr	r0, [pc, #160]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005156:	f240 7177 	movw	r1, #1911	; 0x777
 800515a:	f7fc fac7 	bl	80016ec <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800515e:	682b      	ldr	r3, [r5, #0]
 8005160:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8005164:	d006      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d004      	beq.n	8005174 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800516a:	4823      	ldr	r0, [pc, #140]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800516c:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 8005170:	f7fc fabc 	bl	80016ec <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005174:	686b      	ldr	r3, [r5, #4]
 8005176:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800517a:	d12f      	bne.n	80051dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>

  /* Check input state */
  __HAL_LOCK(htim);
 800517c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d034      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0xc6>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005184:	6823      	ldr	r3, [r4, #0]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005186:	481b      	ldr	r0, [pc, #108]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	2202      	movs	r2, #2
 800518a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800518e:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005190:	6829      	ldr	r1, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005192:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005196:	430a      	orrs	r2, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005198:	4283      	cmp	r3, r0
  tmpsmcr = htim->Instance->SMCR;
 800519a:	6899      	ldr	r1, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800519c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519e:	d011      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80051a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a4:	d00e      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80051a6:	4a15      	ldr	r2, [pc, #84]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00b      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80051ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d007      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80051b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80051bc:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d104      	bne.n	80051ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c4:	686a      	ldr	r2, [r5, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ca:	4311      	orrs	r1, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051cc:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ce:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80051d0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80051d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80051d6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 80051da:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80051dc:	4806      	ldr	r0, [pc, #24]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051de:	f240 7179 	movw	r1, #1913	; 0x779
 80051e2:	f7fc fa83 	bl	80016ec <assert_failed>
  __HAL_LOCK(htim);
 80051e6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d1ca      	bne.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80051ee:	2002      	movs	r0, #2
}
 80051f0:	bd38      	pop	{r3, r4, r5, pc}
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000
 80051f8:	08009b18 	.word	0x08009b18
 80051fc:	40000400 	.word	0x40000400

08005200 <HAL_TIMEx_CommutCallback>:
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop

08005204 <HAL_TIMEx_BreakCallback>:
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop

08005208 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8005208:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
  hci_disconnection_complete_event(rp0->Status,
 800520a:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800520e:	78c2      	ldrb	r2, [r0, #3]
 8005210:	7800      	ldrb	r0, [r0, #0]
 8005212:	f7fb fee9 	bl	8000fe8 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
}
 8005216:	2000      	movs	r0, #0
 8005218:	bd08      	pop	{r3, pc}
 800521a:	bf00      	nop

0800521c <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800521c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
  hci_encryption_change_event(rp0->Status,
 800521e:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8005222:	78c2      	ldrb	r2, [r0, #3]
 8005224:	7800      	ldrb	r0, [r0, #0]
 8005226:	f000 faf1 	bl	800580c <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
}
 800522a:	2000      	movs	r0, #0
 800522c:	bd08      	pop	{r3, pc}
 800522e:	bf00      	nop

08005230 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8005230:	b500      	push	{lr}
 8005232:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
  hci_read_remote_version_information_complete_event(rp0->Status,
 8005234:	88c3      	ldrh	r3, [r0, #6]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	8883      	ldrh	r3, [r0, #4]
 800523a:	78c2      	ldrb	r2, [r0, #3]
 800523c:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8005240:	7800      	ldrb	r0, [r0, #0]
 8005242:	f000 fae5 	bl	8005810 <hci_read_remote_version_information_complete_event>
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
}
 8005246:	2000      	movs	r0, #0
 8005248:	b003      	add	sp, #12
 800524a:	f85d fb04 	ldr.w	pc, [sp], #4
 800524e:	bf00      	nop

08005250 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8005250:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
  hci_hardware_error_event(rp0->Hardware_Code);
 8005252:	7800      	ldrb	r0, [r0, #0]
 8005254:	f000 fade 	bl	8005814 <hci_hardware_error_event>

  return status;
}
 8005258:	2000      	movs	r0, #0
 800525a:	bd08      	pop	{r3, pc}

0800525c <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 800525c:	b530      	push	{r4, r5, lr}
 800525e:	4602      	mov	r2, r0
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8005260:	7800      	ldrb	r0, [r0, #0]
{
 8005262:	b0a1      	sub	sp, #132	; 0x84
 8005264:	4669      	mov	r1, sp
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8005266:	b148      	cbz	r0, 800527c <hci_number_of_completed_packets_event_process+0x20>
 8005268:	3201      	adds	r2, #1
 800526a:	eb01 0580 	add.w	r5, r1, r0, lsl #2
 800526e:	460b      	mov	r3, r1
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8005270:	f852 4b04 	ldr.w	r4, [r2], #4
 8005274:	f843 4b04 	str.w	r4, [r3], #4
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8005278:	429d      	cmp	r5, r3
 800527a:	d1f9      	bne.n	8005270 <hci_number_of_completed_packets_event_process+0x14>
    size += 2;
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
    size += 2;
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 800527c:	f000 facc 	bl	8005818 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
}
 8005280:	2000      	movs	r0, #0
 8005282:	b021      	add	sp, #132	; 0x84
 8005284:	bd30      	pop	{r4, r5, pc}
 8005286:	bf00      	nop

08005288 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8005288:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
  hci_data_buffer_overflow_event(rp0->Link_Type);
 800528a:	7800      	ldrb	r0, [r0, #0]
 800528c:	f000 fac6 	bl	800581c <hci_data_buffer_overflow_event>

  return status;
}
 8005290:	2000      	movs	r0, #0
 8005292:	bd08      	pop	{r3, pc}

08005294 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8005294:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8005296:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800529a:	7800      	ldrb	r0, [r0, #0]
 800529c:	f000 fac0 	bl	8005820 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
}
 80052a0:	2000      	movs	r0, #0
 80052a2:	bd08      	pop	{r3, pc}

080052a4 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80052a4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
  aci_blue_initialized_event(rp0->Reason_Code);
 80052a6:	7800      	ldrb	r0, [r0, #0]
 80052a8:	f000 fb14 	bl	80058d4 <aci_blue_initialized_event>

  return status;
}
 80052ac:	2000      	movs	r0, #0
 80052ae:	bd08      	pop	{r3, pc}

080052b0 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 80052b0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
  aci_blue_events_lost_event(rp0->Lost_Events);
 80052b2:	f000 fb11 	bl	80058d8 <aci_blue_events_lost_event>

  return status;
}
 80052b6:	2000      	movs	r0, #0
 80052b8:	bd08      	pop	{r3, pc}
 80052ba:	bf00      	nop

080052bc <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 80052bc:	b570      	push	{r4, r5, r6, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
  aci_blue_crash_info_event(rp0->Crash_Type,
 80052be:	4603      	mov	r3, r0
{
 80052c0:	b088      	sub	sp, #32
 80052c2:	4601      	mov	r1, r0
  aci_blue_crash_info_event(rp0->Crash_Type,
 80052c4:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80052c8:	f813 0b26 	ldrb.w	r0, [r3], #38
 80052cc:	f8d1 2021 	ldr.w	r2, [r1, #33]	; 0x21
 80052d0:	f8d1 601d 	ldr.w	r6, [r1, #29]
 80052d4:	9307      	str	r3, [sp, #28]
 80052d6:	f8d1 5019 	ldr.w	r5, [r1, #25]
 80052da:	9406      	str	r4, [sp, #24]
 80052dc:	f8d1 4015 	ldr.w	r4, [r1, #21]
 80052e0:	9205      	str	r2, [sp, #20]
 80052e2:	f8d1 2011 	ldr.w	r2, [r1, #17]
 80052e6:	9604      	str	r6, [sp, #16]
 80052e8:	f8d1 300d 	ldr.w	r3, [r1, #13]
 80052ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80052f0:	e9cd 3200 	strd	r3, r2, [sp]
 80052f4:	f8d1 3009 	ldr.w	r3, [r1, #9]
 80052f8:	f8d1 2005 	ldr.w	r2, [r1, #5]
 80052fc:	f8d1 1001 	ldr.w	r1, [r1, #1]
 8005300:	f000 faec 	bl	80058dc <aci_blue_crash_info_event>
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);

  return status;
}
 8005304:	2000      	movs	r0, #0
 8005306:	b008      	add	sp, #32
 8005308:	bd70      	pop	{r4, r5, r6, pc}
 800530a:	bf00      	nop

0800530c <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 800530c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 800530e:	f8d0 2002 	ldr.w	r2, [r0, #2]
 8005312:	7841      	ldrb	r1, [r0, #1]
 8005314:	7800      	ldrb	r0, [r0, #0]
 8005316:	f000 fae3 	bl	80058e0 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
}
 800531a:	2000      	movs	r0, #0
 800531c:	bd08      	pop	{r3, pc}
 800531e:	bf00      	nop

08005320 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8005320:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
  aci_hal_scan_req_report_event(rp0->RSSI,
 8005322:	1c82      	adds	r2, r0, #2
 8005324:	7841      	ldrb	r1, [r0, #1]
 8005326:	f990 0000 	ldrsb.w	r0, [r0]
 800532a:	f000 fadb 	bl	80058e4 <aci_hal_scan_req_report_event>
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);

  return status;
}
 800532e:	2000      	movs	r0, #0
 8005330:	bd08      	pop	{r3, pc}
 8005332:	bf00      	nop

08005334 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8005334:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8005336:	1c82      	adds	r2, r0, #2
 8005338:	7841      	ldrb	r1, [r0, #1]
 800533a:	7800      	ldrb	r0, [r0, #0]
 800533c:	f000 fad4 	bl	80058e8 <aci_hal_fw_error_event>
                         rp0->Data_Length,
                         rp0->Data);

  return status;
}
 8005340:	2000      	movs	r0, #0
 8005342:	bd08      	pop	{r3, pc}

08005344 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8005344:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_limited_discoverable_event();
 8005346:	f000 fa7f 	bl	8005848 <aci_gap_limited_discoverable_event>

  return status;
}
 800534a:	2000      	movs	r0, #0
 800534c:	bd08      	pop	{r3, pc}
 800534e:	bf00      	nop

08005350 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8005350:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8005352:	78c2      	ldrb	r2, [r0, #3]
 8005354:	7881      	ldrb	r1, [r0, #2]
 8005356:	8800      	ldrh	r0, [r0, #0]
 8005358:	f000 fa78 	bl	800584c <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
}
 800535c:	2000      	movs	r0, #0
 800535e:	bd08      	pop	{r3, pc}

08005360 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8005360:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8005362:	8800      	ldrh	r0, [r0, #0]
 8005364:	f000 fa74 	bl	8005850 <aci_gap_pass_key_req_event>

  return status;
}
 8005368:	2000      	movs	r0, #0
 800536a:	bd08      	pop	{r3, pc}

0800536c <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800536c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800536e:	8800      	ldrh	r0, [r0, #0]
 8005370:	f000 fa70 	bl	8005854 <aci_gap_authorization_req_event>

  return status;
}
 8005374:	2000      	movs	r0, #0
 8005376:	bd08      	pop	{r3, pc}

08005378 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8005378:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_slave_security_initiated_event();
 800537a:	f000 fa6d 	bl	8005858 <aci_gap_slave_security_initiated_event>

  return status;
}
 800537e:	2000      	movs	r0, #0
 8005380:	bd08      	pop	{r3, pc}
 8005382:	bf00      	nop

08005384 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8005384:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_bond_lost_event();
 8005386:	f000 fa69 	bl	800585c <aci_gap_bond_lost_event>

  return status;
}
 800538a:	2000      	movs	r0, #0
 800538c:	bd08      	pop	{r3, pc}
 800538e:	bf00      	nop

08005390 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8005390:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8005392:	1cc3      	adds	r3, r0, #3
 8005394:	7882      	ldrb	r2, [r0, #2]
 8005396:	7841      	ldrb	r1, [r0, #1]
 8005398:	7800      	ldrb	r0, [r0, #0]
 800539a:	f000 fa61 	bl	8005860 <aci_gap_proc_complete_event>
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);

  return status;
}
 800539e:	2000      	movs	r0, #0
 80053a0:	bd08      	pop	{r3, pc}
 80053a2:	bf00      	nop

080053a4 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 80053a4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 80053a6:	8800      	ldrh	r0, [r0, #0]
 80053a8:	f000 fa5c 	bl	8005864 <aci_gap_addr_not_resolved_event>

  return status;
}
 80053ac:	2000      	movs	r0, #0
 80053ae:	bd08      	pop	{r3, pc}

080053b0 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 80053b0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 80053b2:	f8d0 1002 	ldr.w	r1, [r0, #2]
 80053b6:	8800      	ldrh	r0, [r0, #0]
 80053b8:	f000 fa56 	bl	8005868 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
}
 80053bc:	2000      	movs	r0, #0
 80053be:	bd08      	pop	{r3, pc}

080053c0 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 80053c0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 80053c2:	7881      	ldrb	r1, [r0, #2]
 80053c4:	8800      	ldrh	r0, [r0, #0]
 80053c6:	f000 fa51 	bl	800586c <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
}
 80053ca:	2000      	movs	r0, #0
 80053cc:	bd08      	pop	{r3, pc}
 80053ce:	bf00      	nop

080053d0 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80053d0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80053d2:	8841      	ldrh	r1, [r0, #2]
 80053d4:	8800      	ldrh	r0, [r0, #0]
 80053d6:	f000 fa75 	bl	80058c4 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
}
 80053da:	2000      	movs	r0, #0
 80053dc:	bd08      	pop	{r3, pc}
 80053de:	bf00      	nop

080053e0 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 80053e0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80053e2:	1cc2      	adds	r2, r0, #3
 80053e4:	7881      	ldrb	r1, [r0, #2]
 80053e6:	8800      	ldrh	r0, [r0, #0]
 80053e8:	f000 fa6e 	bl	80058c8 <aci_l2cap_proc_timeout_event>
                               rp0->Data_Length,
                               rp0->Data);

  return status;
}
 80053ec:	2000      	movs	r0, #0
 80053ee:	bd08      	pop	{r3, pc}

080053f0 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 80053f0:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 80053f2:	f8b0 100b 	ldrh.w	r1, [r0, #11]
 80053f6:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 80053fa:	f8b0 3007 	ldrh.w	r3, [r0, #7]
{
 80053fe:	b085      	sub	sp, #20
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8005400:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800540a:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800540e:	7881      	ldrb	r1, [r0, #2]
 8005410:	8800      	ldrh	r0, [r0, #0]
 8005412:	f000 fa5b 	bl	80058cc <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
}
 8005416:	2000      	movs	r0, #0
 8005418:	b005      	add	sp, #20
 800541a:	f85d fb04 	ldr.w	pc, [sp], #4
 800541e:	bf00      	nop

08005420 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8005420:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8005422:	4602      	mov	r2, r0
{
 8005424:	b083      	sub	sp, #12
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8005426:	7943      	ldrb	r3, [r0, #5]
{
 8005428:	4601      	mov	r1, r0
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800542a:	f832 0b06 	ldrh.w	r0, [r2], #6
 800542e:	9200      	str	r2, [sp, #0]
 8005430:	f8b1 2003 	ldrh.w	r2, [r1, #3]
 8005434:	7889      	ldrb	r1, [r1, #2]
 8005436:	f000 fa4b 	bl	80058d0 <aci_l2cap_command_reject_event>
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);

  return status;
}
 800543a:	2000      	movs	r0, #0
 800543c:	b003      	add	sp, #12
 800543e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005442:	bf00      	nop

08005444 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8005444:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8005446:	4602      	mov	r2, r0
{
 8005448:	b083      	sub	sp, #12
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800544a:	88c3      	ldrh	r3, [r0, #6]
{
 800544c:	4601      	mov	r1, r0
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800544e:	f832 0b08 	ldrh.w	r0, [r2], #8
 8005452:	9200      	str	r2, [sp, #0]
 8005454:	888a      	ldrh	r2, [r1, #4]
 8005456:	8849      	ldrh	r1, [r1, #2]
 8005458:	f7fb fdfc 	bl	8001054 <aci_gatt_attribute_modified_event>
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);

  return status;
}
 800545c:	2000      	movs	r0, #0
 800545e:	b003      	add	sp, #12
 8005460:	f85d fb04 	ldr.w	pc, [sp], #4

08005464 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8005464:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8005466:	8800      	ldrh	r0, [r0, #0]
 8005468:	f000 fa02 	bl	8005870 <aci_gatt_proc_timeout_event>

  return status;
}
 800546c:	2000      	movs	r0, #0
 800546e:	bd08      	pop	{r3, pc}

08005470 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8005470:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8005472:	8841      	ldrh	r1, [r0, #2]
 8005474:	8800      	ldrh	r0, [r0, #0]
 8005476:	f000 f9fd 	bl	8005874 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
}
 800547a:	2000      	movs	r0, #0
 800547c:	bd08      	pop	{r3, pc}
 800547e:	bf00      	nop

08005480 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8005480:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8005482:	1d03      	adds	r3, r0, #4
 8005484:	78c2      	ldrb	r2, [r0, #3]
 8005486:	7881      	ldrb	r1, [r0, #2]
 8005488:	8800      	ldrh	r0, [r0, #0]
 800548a:	f000 f9f5 	bl	8005878 <aci_att_find_info_resp_event>
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);

  return status;
}
 800548e:	2000      	movs	r0, #0
 8005490:	bd08      	pop	{r3, pc}
 8005492:	bf00      	nop

08005494 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8005494:	b570      	push	{r4, r5, r6, lr}
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8005496:	7881      	ldrb	r1, [r0, #2]
{
 8005498:	b0a0      	sub	sp, #128	; 0x80
 800549a:	466a      	mov	r2, sp
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800549c:	b149      	cbz	r1, 80054b2 <aci_att_find_by_type_value_resp_event_process+0x1e>
 800549e:	eb02 0681 	add.w	r6, r2, r1, lsl #2
 80054a2:	4613      	mov	r3, r2
 80054a4:	1cc4      	adds	r4, r0, #3
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 80054a6:	f854 5b04 	ldr.w	r5, [r4], #4
 80054aa:	f843 5b04 	str.w	r5, [r3], #4
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80054ae:	429e      	cmp	r6, r3
 80054b0:	d1f9      	bne.n	80054a6 <aci_att_find_by_type_value_resp_event_process+0x12>
    size += 2;
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
    size += 2;
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 80054b2:	8800      	ldrh	r0, [r0, #0]
 80054b4:	f000 f9e2 	bl	800587c <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
}
 80054b8:	2000      	movs	r0, #0
 80054ba:	b020      	add	sp, #128	; 0x80
 80054bc:	bd70      	pop	{r4, r5, r6, pc}
 80054be:	bf00      	nop

080054c0 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 80054c0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 80054c2:	1d03      	adds	r3, r0, #4
 80054c4:	78c2      	ldrb	r2, [r0, #3]
 80054c6:	7881      	ldrb	r1, [r0, #2]
 80054c8:	8800      	ldrh	r0, [r0, #0]
 80054ca:	f000 f9d9 	bl	8005880 <aci_att_read_by_type_resp_event>
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);

  return status;
}
 80054ce:	2000      	movs	r0, #0
 80054d0:	bd08      	pop	{r3, pc}
 80054d2:	bf00      	nop

080054d4 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 80054d4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
  aci_att_read_resp_event(rp0->Connection_Handle,
 80054d6:	1cc2      	adds	r2, r0, #3
 80054d8:	7881      	ldrb	r1, [r0, #2]
 80054da:	8800      	ldrh	r0, [r0, #0]
 80054dc:	f000 f9d2 	bl	8005884 <aci_att_read_resp_event>
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);

  return status;
}
 80054e0:	2000      	movs	r0, #0
 80054e2:	bd08      	pop	{r3, pc}

080054e4 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 80054e4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 80054e6:	1cc2      	adds	r2, r0, #3
 80054e8:	7881      	ldrb	r1, [r0, #2]
 80054ea:	8800      	ldrh	r0, [r0, #0]
 80054ec:	f000 f9cc 	bl	8005888 <aci_att_read_blob_resp_event>
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);

  return status;
}
 80054f0:	2000      	movs	r0, #0
 80054f2:	bd08      	pop	{r3, pc}

080054f4 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 80054f4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 80054f6:	1cc2      	adds	r2, r0, #3
 80054f8:	7881      	ldrb	r1, [r0, #2]
 80054fa:	8800      	ldrh	r0, [r0, #0]
 80054fc:	f000 f9c6 	bl	800588c <aci_att_read_multiple_resp_event>
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);

  return status;
}
 8005500:	2000      	movs	r0, #0
 8005502:	bd08      	pop	{r3, pc}

08005504 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8005504:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8005506:	1d03      	adds	r3, r0, #4
 8005508:	78c2      	ldrb	r2, [r0, #3]
 800550a:	7881      	ldrb	r1, [r0, #2]
 800550c:	8800      	ldrh	r0, [r0, #0]
 800550e:	f000 f9bf 	bl	8005890 <aci_att_read_by_group_type_resp_event>
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);

  return status;
}
 8005512:	2000      	movs	r0, #0
 8005514:	bd08      	pop	{r3, pc}
 8005516:	bf00      	nop

08005518 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8005518:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800551a:	4602      	mov	r2, r0
{
 800551c:	b083      	sub	sp, #12
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800551e:	7983      	ldrb	r3, [r0, #6]
{
 8005520:	4601      	mov	r1, r0
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8005522:	f832 0b07 	ldrh.w	r0, [r2], #7
 8005526:	9200      	str	r2, [sp, #0]
 8005528:	888a      	ldrh	r2, [r1, #4]
 800552a:	8849      	ldrh	r1, [r1, #2]
 800552c:	f000 f9b2 	bl	8005894 <aci_att_prepare_write_resp_event>
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);

  return status;
}
 8005530:	2000      	movs	r0, #0
 8005532:	b003      	add	sp, #12
 8005534:	f85d fb04 	ldr.w	pc, [sp], #4

08005538 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8005538:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800553a:	8800      	ldrh	r0, [r0, #0]
 800553c:	f000 f9ac 	bl	8005898 <aci_att_exec_write_resp_event>

  return status;
}
 8005540:	2000      	movs	r0, #0
 8005542:	bd08      	pop	{r3, pc}

08005544 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8005544:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
  aci_gatt_indication_event(rp0->Connection_Handle,
 8005546:	1d43      	adds	r3, r0, #5
 8005548:	7902      	ldrb	r2, [r0, #4]
 800554a:	8841      	ldrh	r1, [r0, #2]
 800554c:	8800      	ldrh	r0, [r0, #0]
 800554e:	f000 f9a5 	bl	800589c <aci_gatt_indication_event>
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);

  return status;
}
 8005552:	2000      	movs	r0, #0
 8005554:	bd08      	pop	{r3, pc}
 8005556:	bf00      	nop

08005558 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8005558:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
  aci_gatt_notification_event(rp0->Connection_Handle,
 800555a:	1d43      	adds	r3, r0, #5
 800555c:	7902      	ldrb	r2, [r0, #4]
 800555e:	8841      	ldrh	r1, [r0, #2]
 8005560:	8800      	ldrh	r0, [r0, #0]
 8005562:	f7fb fd75 	bl	8001050 <aci_gatt_notification_event>
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);

  return status;
}
 8005566:	2000      	movs	r0, #0
 8005568:	bd08      	pop	{r3, pc}
 800556a:	bf00      	nop

0800556c <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800556c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800556e:	7881      	ldrb	r1, [r0, #2]
 8005570:	8800      	ldrh	r0, [r0, #0]
 8005572:	f000 f995 	bl	80058a0 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
}
 8005576:	2000      	movs	r0, #0
 8005578:	bd08      	pop	{r3, pc}
 800557a:	bf00      	nop

0800557c <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800557c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800557e:	7943      	ldrb	r3, [r0, #5]
 8005580:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8005584:	7881      	ldrb	r1, [r0, #2]
 8005586:	8800      	ldrh	r0, [r0, #0]
 8005588:	f000 f98c 	bl	80058a4 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
}
 800558c:	2000      	movs	r0, #0
 800558e:	bd08      	pop	{r3, pc}

08005590 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8005590:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8005592:	1d43      	adds	r3, r0, #5
 8005594:	7902      	ldrb	r2, [r0, #4]
 8005596:	8841      	ldrh	r1, [r0, #2]
 8005598:	8800      	ldrh	r0, [r0, #0]
 800559a:	f000 f985 	bl	80058a8 <aci_gatt_disc_read_char_by_uuid_resp_event>
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);

  return status;
}
 800559e:	2000      	movs	r0, #0
 80055a0:	bd08      	pop	{r3, pc}
 80055a2:	bf00      	nop

080055a4 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 80055a4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 80055a6:	1d43      	adds	r3, r0, #5
 80055a8:	7902      	ldrb	r2, [r0, #4]
 80055aa:	8841      	ldrh	r1, [r0, #2]
 80055ac:	8800      	ldrh	r0, [r0, #0]
 80055ae:	f000 f97d 	bl	80058ac <aci_gatt_write_permit_req_event>
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);

  return status;
}
 80055b2:	2000      	movs	r0, #0
 80055b4:	bd08      	pop	{r3, pc}
 80055b6:	bf00      	nop

080055b8 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 80055b8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 80055ba:	8882      	ldrh	r2, [r0, #4]
 80055bc:	8841      	ldrh	r1, [r0, #2]
 80055be:	8800      	ldrh	r0, [r0, #0]
 80055c0:	f000 f976 	bl	80058b0 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
}
 80055c4:	2000      	movs	r0, #0
 80055c6:	bd08      	pop	{r3, pc}

080055c8 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 80055c8:	b530      	push	{r4, r5, lr}
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80055ca:	7885      	ldrb	r5, [r0, #2]
{
 80055cc:	b0a1      	sub	sp, #132	; 0x84
 80055ce:	4604      	mov	r4, r0
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80055d0:	466b      	mov	r3, sp
 80055d2:	b12d      	cbz	r5, 80055e0 <aci_gatt_read_multi_permit_req_event_process+0x18>
 80055d4:	4618      	mov	r0, r3
 80055d6:	006a      	lsls	r2, r5, #1
 80055d8:	1ce1      	adds	r1, r4, #3
 80055da:	f003 f82d 	bl	8008638 <memcpy>
 80055de:	4603      	mov	r3, r0
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
    size += 2;
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 80055e0:	8820      	ldrh	r0, [r4, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	4629      	mov	r1, r5
 80055e6:	f000 f965 	bl	80058b4 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
}
 80055ea:	2000      	movs	r0, #0
 80055ec:	b021      	add	sp, #132	; 0x84
 80055ee:	bd30      	pop	{r4, r5, pc}

080055f0 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 80055f0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 80055f2:	8841      	ldrh	r1, [r0, #2]
 80055f4:	8800      	ldrh	r0, [r0, #0]
 80055f6:	f000 f95f 	bl	80058b8 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
}
 80055fa:	2000      	movs	r0, #0
 80055fc:	bd08      	pop	{r3, pc}
 80055fe:	bf00      	nop

08005600 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8005600:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8005602:	8800      	ldrh	r0, [r0, #0]
 8005604:	f000 f95a 	bl	80058bc <aci_gatt_server_confirmation_event>

  return status;
}
 8005608:	2000      	movs	r0, #0
 800560a:	bd08      	pop	{r3, pc}

0800560c <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800560c:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800560e:	4602      	mov	r2, r0
{
 8005610:	b083      	sub	sp, #12
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8005612:	7983      	ldrb	r3, [r0, #6]
{
 8005614:	4601      	mov	r1, r0
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8005616:	f832 0b07 	ldrh.w	r0, [r2], #7
 800561a:	9200      	str	r2, [sp, #0]
 800561c:	888a      	ldrh	r2, [r1, #4]
 800561e:	8849      	ldrh	r1, [r1, #2]
 8005620:	f000 f94e 	bl	80058c0 <aci_gatt_prepare_write_permit_req_event>
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);

  return status;
}
 8005624:	2000      	movs	r0, #0
 8005626:	b003      	add	sp, #12
 8005628:	f85d fb04 	ldr.w	pc, [sp], #4

0800562c <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800562c:	b530      	push	{r4, r5, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
  hci_le_connection_complete_event(rp0->Status,
 800562e:	7c45      	ldrb	r5, [r0, #17]
 8005630:	f8b0 400f 	ldrh.w	r4, [r0, #15]
 8005634:	f8b0 100d 	ldrh.w	r1, [r0, #13]
 8005638:	f8b0 200b 	ldrh.w	r2, [r0, #11]
{
 800563c:	b087      	sub	sp, #28
  hci_le_connection_complete_event(rp0->Status,
 800563e:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8005642:	e9cd 2101 	strd	r2, r1, [sp, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8005646:	1d43      	adds	r3, r0, #5
  hci_le_connection_complete_event(rp0->Status,
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	7903      	ldrb	r3, [r0, #4]
 800564c:	78c2      	ldrb	r2, [r0, #3]
 800564e:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8005652:	7800      	ldrb	r0, [r0, #0]
 8005654:	f7fb fc8a 	bl	8000f6c <hci_le_connection_complete_event>
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
}
 8005658:	2000      	movs	r0, #0
 800565a:	b007      	add	sp, #28
 800565c:	bd30      	pop	{r4, r5, pc}
 800565e:	bf00      	nop

08005660 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8005660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8005664:	f890 e000 	ldrb.w	lr, [r0]
{
 8005668:	b09f      	sub	sp, #124	; 0x7c
  for (i = 0; i < rp0->Num_Reports; i++) {
 800566a:	f1be 0f00 	cmp.w	lr, #0
 800566e:	d02c      	beq.n	80056ca <hci_le_advertising_report_event_process+0x6a>
 8005670:	f100 010a 	add.w	r1, r0, #10
 8005674:	f04f 0c0b 	mov.w	ip, #11
 8005678:	fb1c 1c0e 	smlabb	ip, ip, lr, r1
 800567c:	f10d 0302 	add.w	r3, sp, #2
  uint8_t size = 1;
 8005680:	2201      	movs	r2, #1
    size += 1;
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
    size += 1;
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
    size += 6;
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8005682:	f811 5c01 	ldrb.w	r5, [r1, #-1]
    size += 1;
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8005686:	f8c3 100a 	str.w	r1, [r3, #10]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800568a:	460c      	mov	r4, r1
    size += rp0->Advertising_Report[i].Length_Data;
 800568c:	f105 0609 	add.w	r6, r5, #9
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8005690:	f854 7d07 	ldr.w	r7, [r4, #-7]!
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8005694:	719d      	strb	r5, [r3, #6]
    size += rp0->Advertising_Report[i].Length_Data;
 8005696:	4432      	add	r2, r6
 8005698:	b2d2      	uxtb	r2, r2
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800569a:	f811 6c09 	ldrb.w	r6, [r1, #-9]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800569e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 80056a2:	f811 4c08 	ldrb.w	r4, [r1, #-8]
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 80056a6:	f810 9002 	ldrb.w	r9, [r0, r2]
 80056aa:	f883 900e 	strb.w	r9, [r3, #14]
 80056ae:	310b      	adds	r1, #11
    size += 1;
 80056b0:	3201      	adds	r2, #1
  for (i = 0; i < rp0->Num_Reports; i++) {
 80056b2:	4561      	cmp	r1, ip
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80056b4:	f8a3 8004 	strh.w	r8, [r3, #4]
 80056b8:	601f      	str	r7, [r3, #0]
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 80056ba:	f803 6c02 	strb.w	r6, [r3, #-2]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 80056be:	f803 4c01 	strb.w	r4, [r3, #-1]
    size += 1;
 80056c2:	b2d2      	uxtb	r2, r2
  for (i = 0; i < rp0->Num_Reports; i++) {
 80056c4:	f103 0314 	add.w	r3, r3, #20
 80056c8:	d1db      	bne.n	8005682 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80056ca:	4670      	mov	r0, lr
 80056cc:	4669      	mov	r1, sp
 80056ce:	f000 f8a9 	bl	8005824 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
}
 80056d2:	2000      	movs	r0, #0
 80056d4:	b01f      	add	sp, #124	; 0x7c
 80056d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056da:	bf00      	nop

080056dc <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 80056dc:	b500      	push	{lr}
 80056de:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
  hci_le_connection_update_complete_event(rp0->Status,
 80056e0:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 80056ea:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 80056ee:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 80056f2:	7800      	ldrb	r0, [r0, #0]
 80056f4:	f000 f898 	bl	8005828 <hci_le_connection_update_complete_event>
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
}
 80056f8:	2000      	movs	r0, #0
 80056fa:	b003      	add	sp, #12
 80056fc:	f85d fb04 	ldr.w	pc, [sp], #4

08005700 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8005700:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8005702:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8005706:	1cc2      	adds	r2, r0, #3
 8005708:	7800      	ldrb	r0, [r0, #0]
 800570a:	f000 f88f 	bl	800582c <hci_le_read_remote_used_features_complete_event>
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);

  return status;
}
 800570e:	2000      	movs	r0, #0
 8005710:	bd08      	pop	{r3, pc}
 8005712:	bf00      	nop

08005714 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8005714:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
                                     rp0->Random_Number,
 8005716:	4601      	mov	r1, r0
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8005718:	8942      	ldrh	r2, [r0, #10]
 800571a:	f831 0b02 	ldrh.w	r0, [r1], #2
 800571e:	f000 f887 	bl	8005830 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
}
 8005722:	2000      	movs	r0, #0
 8005724:	bd08      	pop	{r3, pc}
 8005726:	bf00      	nop

08005728 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 8005728:	b500      	push	{lr}
 800572a:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800572c:	8903      	ldrh	r3, [r0, #8]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	88c3      	ldrh	r3, [r0, #6]
 8005732:	8882      	ldrh	r2, [r0, #4]
 8005734:	8841      	ldrh	r1, [r0, #2]
 8005736:	8800      	ldrh	r0, [r0, #0]
 8005738:	f000 f87c 	bl	8005834 <hci_le_data_length_change_event>
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
}
 800573c:	2000      	movs	r0, #0
 800573e:	b003      	add	sp, #12
 8005740:	f85d fb04 	ldr.w	pc, [sp], #4

08005744 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8005744:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
                                                   rp0->Local_P256_Public_Key);
 8005746:	4601      	mov	r1, r0
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8005748:	f811 0b01 	ldrb.w	r0, [r1], #1
 800574c:	f000 f874 	bl	8005838 <hci_le_read_local_p256_public_key_complete_event>

  return status;
}
 8005750:	2000      	movs	r0, #0
 8005752:	bd08      	pop	{r3, pc}

08005754 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8005754:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
  hci_le_generate_dhkey_complete_event(rp0->Status,
                                       rp0->DHKey);
 8005756:	4601      	mov	r1, r0
  hci_le_generate_dhkey_complete_event(rp0->Status,
 8005758:	f811 0b01 	ldrb.w	r0, [r1], #1
 800575c:	f000 f86e 	bl	800583c <hci_le_generate_dhkey_complete_event>

  return status;
}
 8005760:	2000      	movs	r0, #0
 8005762:	bd08      	pop	{r3, pc}

08005764 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8005764:	b530      	push	{r4, r5, lr}
 8005766:	b089      	sub	sp, #36	; 0x24
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8005768:	7f42      	ldrb	r2, [r0, #29]
 800576a:	f8b0 5019 	ldrh.w	r5, [r0, #25]
 800576e:	f8b0 4017 	ldrh.w	r4, [r0, #23]
 8005772:	f8b0 301b 	ldrh.w	r3, [r0, #27]
 8005776:	9206      	str	r2, [sp, #24]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
                                            rp0->Local_Resolvable_Private_Address,
                                            rp0->Peer_Resolvable_Private_Address,
 8005778:	f100 0111 	add.w	r1, r0, #17
                                            rp0->Local_Resolvable_Private_Address,
 800577c:	f100 020b 	add.w	r2, r0, #11
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8005780:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8005784:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005788:	9305      	str	r3, [sp, #20]
                                            rp0->Peer_Address,
 800578a:	1d43      	adds	r3, r0, #5
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	7903      	ldrb	r3, [r0, #4]
 8005790:	78c2      	ldrb	r2, [r0, #3]
 8005792:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8005796:	7800      	ldrb	r0, [r0, #0]
 8005798:	f000 f852 	bl	8005840 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
}
 800579c:	2000      	movs	r0, #0
 800579e:	b009      	add	sp, #36	; 0x24
 80057a0:	bd30      	pop	{r4, r5, pc}
 80057a2:	bf00      	nop

080057a4 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80057a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057a8:	4603      	mov	r3, r0
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80057aa:	7800      	ldrb	r0, [r0, #0]
{
 80057ac:	b0a1      	sub	sp, #132	; 0x84
  for (i = 0; i < rp0->Num_Reports; i++) {
 80057ae:	b328      	cbz	r0, 80057fc <hci_le_direct_advertising_report_event_process+0x58>
 80057b0:	3303      	adds	r3, #3
 80057b2:	eb03 1900 	add.w	r9, r3, r0, lsl #4
 80057b6:	f10d 0209 	add.w	r2, sp, #9
    size += 1;
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
    size += 6;
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
    size += 1;
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80057ba:	4619      	mov	r1, r3
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80057bc:	f813 cc02 	ldrb.w	ip, [r3, #-2]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80057c0:	f851 ef07 	ldr.w	lr, [r1, #7]!
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80057c4:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 80057c8:	681e      	ldr	r6, [r3, #0]
 80057ca:	889d      	ldrh	r5, [r3, #4]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 80057cc:	799c      	ldrb	r4, [r3, #6]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80057ce:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    size += 6;
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80057d2:	7b59      	ldrb	r1, [r3, #13]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80057d4:	f8a2 8004 	strh.w	r8, [r2, #4]
 80057d8:	3310      	adds	r3, #16
  for (i = 0; i < rp0->Num_Reports; i++) {
 80057da:	454b      	cmp	r3, r9
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80057dc:	f8c2 e000 	str.w	lr, [r2]
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80057e0:	f802 cc09 	strb.w	ip, [r2, #-9]
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80057e4:	f802 7c08 	strb.w	r7, [r2, #-8]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 80057e8:	f842 6c07 	str.w	r6, [r2, #-7]
 80057ec:	f822 5c03 	strh.w	r5, [r2, #-3]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 80057f0:	f802 4c01 	strb.w	r4, [r2, #-1]
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80057f4:	7191      	strb	r1, [r2, #6]
  for (i = 0; i < rp0->Num_Reports; i++) {
 80057f6:	f102 0210 	add.w	r2, r2, #16
 80057fa:	d1de      	bne.n	80057ba <hci_le_direct_advertising_report_event_process+0x16>
    size += 1;
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 80057fc:	4669      	mov	r1, sp
 80057fe:	f000 f821 	bl	8005844 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
}
 8005802:	2000      	movs	r0, #0
 8005804:	b021      	add	sp, #132	; 0x84
 8005806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800580a:	bf00      	nop

0800580c <hci_encryption_change_event>:
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop

08005810 <hci_read_remote_version_information_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop

08005814 <hci_hardware_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop

08005818 <hci_number_of_completed_packets_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop

0800581c <hci_data_buffer_overflow_event>:
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop

08005820 <hci_encryption_key_refresh_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop

08005824 <hci_le_advertising_report_event>:
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop

08005828 <hci_le_connection_update_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop

0800582c <hci_le_read_remote_used_features_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop

08005830 <hci_le_long_term_key_request_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop

08005834 <hci_le_data_length_change_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop

08005838 <hci_le_read_local_p256_public_key_complete_event>:
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop

0800583c <hci_le_generate_dhkey_complete_event>:
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop

08005840 <hci_le_enhanced_connection_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop

08005844 <hci_le_direct_advertising_report_event>:
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop

08005848 <aci_gap_limited_discoverable_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop

0800584c <aci_gap_pairing_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop

08005850 <aci_gap_pass_key_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop

08005854 <aci_gap_authorization_req_event>:
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop

08005858 <aci_gap_slave_security_initiated_event>:
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop

0800585c <aci_gap_bond_lost_event>:
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop

08005860 <aci_gap_proc_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop

08005864 <aci_gap_addr_not_resolved_event>:
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop

08005868 <aci_gap_numeric_comparison_value_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop

0800586c <aci_gap_keypress_notification_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop

08005870 <aci_gatt_proc_timeout_event>:
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop

08005874 <aci_att_exchange_mtu_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop

08005878 <aci_att_find_info_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop

0800587c <aci_att_find_by_type_value_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop

08005880 <aci_att_read_by_type_resp_event>:
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop

08005884 <aci_att_read_resp_event>:
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop

08005888 <aci_att_read_blob_resp_event>:
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop

0800588c <aci_att_read_multiple_resp_event>:
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop

08005890 <aci_att_read_by_group_type_resp_event>:
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop

08005894 <aci_att_prepare_write_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop

08005898 <aci_att_exec_write_resp_event>:
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop

0800589c <aci_gatt_indication_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop

080058a0 <aci_gatt_proc_complete_event>:
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop

080058a4 <aci_gatt_error_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop

080058a8 <aci_gatt_disc_read_char_by_uuid_resp_event>:
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop

080058ac <aci_gatt_write_permit_req_event>:
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop

080058b0 <aci_gatt_read_permit_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop

080058b4 <aci_gatt_read_multi_permit_req_event>:
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop

080058b8 <aci_gatt_tx_pool_available_event>:
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop

080058bc <aci_gatt_server_confirmation_event>:
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop

080058c0 <aci_gatt_prepare_write_permit_req_event>:
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop

080058c4 <aci_l2cap_connection_update_resp_event>:
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop

080058c8 <aci_l2cap_proc_timeout_event>:
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop

080058cc <aci_l2cap_connection_update_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop

080058d0 <aci_l2cap_command_reject_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop

080058d4 <aci_blue_initialized_event>:
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop

080058d8 <aci_blue_events_lost_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop

080058dc <aci_blue_crash_info_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop

080058e0 <aci_hal_end_of_radio_activity_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop

080058e4 <aci_hal_scan_req_report_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop

080058e8 <aci_hal_fw_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop

080058ec <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 80058ec:	b510      	push	{r4, lr}
 80058ee:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 80058f0:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x03;
  rq.ocf = 0x003;
  rq.rparam = &status;
 80058f2:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 80058f6:	2301      	movs	r3, #1
  rq.ogf = 0x03;
 80058f8:	f04f 1403 	mov.w	r4, #196611	; 0x30003
  if (hci_send_req(&rq, FALSE) < 0)
 80058fc:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80058fe:	e9cd 1103 	strd	r1, r1, [sp, #12]
  rq.rlen = 1;
 8005902:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tBleStatus status = 0;
 8005906:	f88d 1007 	strb.w	r1, [sp, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800590a:	9105      	str	r1, [sp, #20]
  rq.ogf = 0x03;
 800590c:	9402      	str	r4, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 800590e:	f000 faff 	bl	8005f10 <hci_send_req>
 8005912:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8005914:	bfac      	ite	ge
 8005916:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800591a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800591c:	b008      	add	sp, #32
 800591e:	bd10      	pop	{r4, pc}

08005920 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 8005920:	b510      	push	{r4, lr}
 8005922:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005924:	f10d 0403 	add.w	r4, sp, #3
 8005928:	2200      	movs	r2, #0
  uint8_t index_input = 0;
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800592a:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 800592c:	7022      	strb	r2, [r4, #0]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800592e:	7018      	strb	r0, [r3, #0]
  index_input += 1;
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 8005930:	b1d1      	cbz	r1, 8005968 <hci_le_set_scan_response_data+0x48>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8005932:	680a      	ldr	r2, [r1, #0]
 8005934:	6848      	ldr	r0, [r1, #4]
 8005936:	f8cd 201d 	str.w	r2, [sp, #29]
 800593a:	f8cd 0021 	str.w	r0, [sp, #33]	; 0x21
 800593e:	688a      	ldr	r2, [r1, #8]
 8005940:	68c8      	ldr	r0, [r1, #12]
 8005942:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
 8005946:	f8cd 0029 	str.w	r0, [sp, #41]	; 0x29
 800594a:	690a      	ldr	r2, [r1, #16]
 800594c:	6948      	ldr	r0, [r1, #20]
 800594e:	f8cd 202d 	str.w	r2, [sp, #45]	; 0x2d
 8005952:	f8cd 0031 	str.w	r0, [sp, #49]	; 0x31
 8005956:	698a      	ldr	r2, [r1, #24]
 8005958:	8b88      	ldrh	r0, [r1, #28]
 800595a:	7f89      	ldrb	r1, [r1, #30]
 800595c:	f8cd 2035 	str.w	r2, [sp, #53]	; 0x35
 8005960:	f8ad 0039 	strh.w	r0, [sp, #57]	; 0x39
 8005964:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
  }
  index_input += 31;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 8005968:	4809      	ldr	r0, [pc, #36]	; (8005990 <hci_le_set_scan_response_data+0x70>)
  rq.ocf = 0x009;
  rq.cparam = cmd_buffer;
 800596a:	9303      	str	r3, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800596c:	2100      	movs	r1, #0
  rq.clen = index_input;
 800596e:	2220      	movs	r2, #32
  rq.ogf = 0x08;
 8005970:	9001      	str	r0, [sp, #4]
  rq.rparam = &status;
  rq.rlen = 1;
 8005972:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8005974:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 8005976:	9405      	str	r4, [sp, #20]
  rq.clen = index_input;
 8005978:	9204      	str	r2, [sp, #16]
  rq.rlen = 1;
 800597a:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800597c:	9102      	str	r1, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 800597e:	f000 fac7 	bl	8005f10 <hci_send_req>
 8005982:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8005984:	bfac      	ite	ge
 8005986:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8005988:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 800598a:	b048      	add	sp, #288	; 0x120
 800598c:	bd10      	pop	{r4, pc}
 800598e:	bf00      	nop
 8005990:	00090008 	.word	0x00090008

08005994 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 8005994:	b510      	push	{r4, lr}
 8005996:	b08a      	sub	sp, #40	; 0x28
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005998:	ab01      	add	r3, sp, #4
 800599a:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 800599c:	4a0f      	ldr	r2, [pc, #60]	; (80059dc <hci_le_rand+0x48>)
  rq.ocf = 0x018;
  rq.rparam = &resp;
 800599e:	9308      	str	r3, [sp, #32]
{
 80059a0:	4604      	mov	r4, r0
  rq.rlen = sizeof(resp);
 80059a2:	2309      	movs	r3, #9
  if (hci_send_req(&rq, FALSE) < 0)
 80059a4:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80059a6:	e9cd 1101 	strd	r1, r1, [sp, #4]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80059aa:	e9cd 1105 	strd	r1, r1, [sp, #20]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80059ae:	f88d 100c 	strb.w	r1, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80059b2:	9107      	str	r1, [sp, #28]
  rq.ogf = 0x08;
 80059b4:	9204      	str	r2, [sp, #16]
  rq.rlen = sizeof(resp);
 80059b6:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80059b8:	f000 faaa 	bl	8005f10 <hci_send_req>
 80059bc:	2800      	cmp	r0, #0
 80059be:	db0a      	blt.n	80059d6 <hci_le_rand+0x42>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 80059c0:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80059c4:	b928      	cbnz	r0, 80059d2 <hci_le_rand+0x3e>
    return resp.Status;
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 80059c6:	f8dd 2005 	ldr.w	r2, [sp, #5]
 80059ca:	f8dd 3009 	ldr.w	r3, [sp, #9]
 80059ce:	6022      	str	r2, [r4, #0]
 80059d0:	6063      	str	r3, [r4, #4]
  return BLE_STATUS_SUCCESS;
}
 80059d2:	b00a      	add	sp, #40	; 0x28
 80059d4:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 80059d6:	20ff      	movs	r0, #255	; 0xff
}
 80059d8:	b00a      	add	sp, #40	; 0x28
 80059da:	bd10      	pop	{r4, pc}
 80059dc:	00180008 	.word	0x00180008

080059e0 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	b0cb      	sub	sp, #300	; 0x12c
 80059e6:	4696      	mov	lr, r2
 80059e8:	f89d 5154 	ldrb.w	r5, [sp, #340]	; 0x154
 80059ec:	f89d 615c 	ldrb.w	r6, [sp, #348]	; 0x15c
 80059f0:	f8bd 4168 	ldrh.w	r4, [sp, #360]	; 0x168
 80059f4:	f89d c150 	ldrb.w	ip, [sp, #336]	; 0x150
 80059f8:	9401      	str	r4, [sp, #4]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 80059fa:	f04f 0800 	mov.w	r8, #0
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80059fe:	ac09      	add	r4, sp, #36	; 0x24
 8005a00:	f105 0a08 	add.w	sl, r5, #8
  uint8_t index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8005a04:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8005a08:	f8ad 1025 	strh.w	r1, [sp, #37]	; 0x25
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8005a0c:	462a      	mov	r2, r5
 8005a0e:	9956      	ldr	r1, [sp, #344]	; 0x158
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8005a10:	f8ad e027 	strh.w	lr, [sp, #39]	; 0x27
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8005a14:	a80b      	add	r0, sp, #44	; 0x2c
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8005a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8005a1a:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
{
 8005a1e:	f8bd b164 	ldrh.w	fp, [sp, #356]	; 0x164
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8005a22:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005a26:	f106 0709 	add.w	r7, r6, #9
  tBleStatus status = 0;
 8005a2a:	f88d 800b 	strb.w	r8, [sp, #11]
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8005a2e:	f002 fe03 	bl	8008638 <memcpy>
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005a32:	eb04 000a 	add.w	r0, r4, sl
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005a36:	442f      	add	r7, r5
    index_input += Local_Name_Length*sizeof(uint8_t);
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
    }
    index_input += 1;
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8005a38:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8005a3a:	f804 600a 	strb.w	r6, [r4, sl]
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8005a3e:	4632      	mov	r2, r6
 8005a40:	3001      	adds	r0, #1
 8005a42:	f002 fdf9 	bl	8008638 <memcpy>
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
    }
    index_input += 2;
 8005a46:	360d      	adds	r6, #13
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005a48:	19e2      	adds	r2, r4, r7
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8005a4a:	f824 b007 	strh.w	fp, [r4, r7]
    index_input += 2;
 8005a4e:	4435      	add	r5, r6
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8005a50:	9f01      	ldr	r7, [sp, #4]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8005a52:	4e0c      	ldr	r6, [pc, #48]	; (8005a84 <aci_gap_set_discoverable+0xa4>)
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8005a54:	8057      	strh	r7, [r2, #2]
  tBleStatus status = 0;
 8005a56:	f10d 090b 	add.w	r9, sp, #11
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8005a5a:	2301      	movs	r3, #1
  rq.clen = index_input;
 8005a5c:	b2ed      	uxtb	r5, r5
  if (hci_send_req(&rq, FALSE) < 0)
 8005a5e:	4641      	mov	r1, r8
 8005a60:	a803      	add	r0, sp, #12
  rq.cparam = cmd_buffer;
 8005a62:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.ogf = 0x3f;
 8005a66:	e9cd 6803 	strd	r6, r8, [sp, #12]
  rq.rparam = &status;
 8005a6a:	f8cd 901c 	str.w	r9, [sp, #28]
  rq.rlen = 1;
 8005a6e:	9308      	str	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 8005a70:	f000 fa4e 	bl	8005f10 <hci_send_req>
 8005a74:	4540      	cmp	r0, r8
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8005a76:	bfac      	ite	ge
 8005a78:	f899 0000 	ldrbge.w	r0, [r9]
    return BLE_STATUS_TIMEOUT;
 8005a7c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8005a7e:	b04b      	add	sp, #300	; 0x12c
 8005a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a84:	0083003f 	.word	0x0083003f

08005a88 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	b0ca      	sub	sp, #296	; 0x128
 8005a8c:	461e      	mov	r6, r3
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8005a8e:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <aci_gap_init+0x68>)
 8005a90:	9303      	str	r3, [sp, #12]
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8005a92:	2303      	movs	r3, #3
  cp0->Role = htob(Role, 1);
 8005a94:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8005a98:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
  rq.clen = index_input;
 8005a9c:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005a9e:	2100      	movs	r1, #0
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8005aa0:	2307      	movs	r3, #7
  cp0->Role = htob(Role, 1);
 8005aa2:	ad09      	add	r5, sp, #36	; 0x24
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005aa4:	ac01      	add	r4, sp, #4
  if (hci_send_req(&rq, FALSE) < 0)
 8005aa6:	a803      	add	r0, sp, #12
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005aa8:	9101      	str	r1, [sp, #4]
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8005aaa:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  rq.cparam = cmd_buffer;
 8005aae:	9505      	str	r5, [sp, #20]
  rq.rlen = sizeof(resp);
 8005ab0:	9308      	str	r3, [sp, #32]
  rq.rparam = &resp;
 8005ab2:	9407      	str	r4, [sp, #28]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005ab4:	9104      	str	r1, [sp, #16]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005ab6:	f8cd 1007 	str.w	r1, [sp, #7]
  if (hci_send_req(&rq, FALSE) < 0)
 8005aba:	f000 fa29 	bl	8005f10 <hci_send_req>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	db12      	blt.n	8005ae8 <aci_gap_init+0x60>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 8005ac2:	7820      	ldrb	r0, [r4, #0]
 8005ac4:	b970      	cbnz	r0, 8005ae4 <aci_gap_init+0x5c>
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005ac6:	6821      	ldr	r1, [r4, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8005ac8:	78e2      	ldrb	r2, [r4, #3]
 8005aca:	7925      	ldrb	r5, [r4, #4]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8005acc:	6863      	ldr	r3, [r4, #4]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005ace:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8005ad2:	8031      	strh	r1, [r6, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8005ad4:	994e      	ldr	r1, [sp, #312]	; 0x138
 8005ad6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005ada:	800a      	strh	r2, [r1, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8005adc:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8005ade:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8005ae2:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8005ae4:	b04a      	add	sp, #296	; 0x128
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8005ae8:	20ff      	movs	r0, #255	; 0xff
}
 8005aea:	b04a      	add	sp, #296	; 0x128
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
 8005aee:	bf00      	nop
 8005af0:	008a003f 	.word	0x008a003f

08005af4 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8005af4:	b510      	push	{r4, lr}
 8005af6:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8005af8:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x101;
  rq.rparam = &status;
 8005afa:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 8005afe:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 8005b00:	4c09      	ldr	r4, [pc, #36]	; (8005b28 <aci_gatt_init+0x34>)
  tBleStatus status = 0;
 8005b02:	f88d 1007 	strb.w	r1, [sp, #7]
  if (hci_send_req(&rq, FALSE) < 0)
 8005b06:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b08:	e9cd 1103 	strd	r1, r1, [sp, #12]
  rq.rlen = 1;
 8005b0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b10:	9105      	str	r1, [sp, #20]
  rq.ogf = 0x3f;
 8005b12:	9402      	str	r4, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8005b14:	f000 f9fc 	bl	8005f10 <hci_send_req>
 8005b18:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8005b1a:	bfac      	ite	ge
 8005b1c:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8005b20:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8005b22:	b008      	add	sp, #32
 8005b24:	bd10      	pop	{r4, pc}
 8005b26:	bf00      	nop
 8005b28:	0101003f 	.word	0x0101003f

08005b2c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8005b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005b30:	2801      	cmp	r0, #1
{
 8005b32:	b0c9      	sub	sp, #292	; 0x124
 8005b34:	4616      	mov	r6, r2
 8005b36:	461c      	mov	r4, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005b38:	d031      	beq.n	8005b9e <aci_gatt_add_service+0x72>
 8005b3a:	2802      	cmp	r0, #2
 8005b3c:	d003      	beq.n	8005b46 <aci_gatt_add_service+0x1a>
 8005b3e:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 8005b40:	b049      	add	sp, #292	; 0x124
 8005b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005b46:	466d      	mov	r5, sp
 8005b48:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8005b4a:	f10d 081c 	add.w	r8, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005b4e:	802b      	strh	r3, [r5, #0]
 8005b50:	70ab      	strb	r3, [r5, #2]
      case 2: size = 16; break;
 8005b52:	f04f 0913 	mov.w	r9, #19
 8005b56:	2210      	movs	r2, #16
 8005b58:	f10d 072d 	add.w	r7, sp, #45	; 0x2d
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8005b5c:	f888 0000 	strb.w	r0, [r8]
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8005b60:	f10d 001d 	add.w	r0, sp, #29
 8005b64:	f002 fd68 	bl	8008638 <memcpy>
  rq.ogf = 0x3f;
 8005b68:	4a16      	ldr	r2, [pc, #88]	; (8005bc4 <aci_gatt_add_service+0x98>)
      cp1->Service_Type = htob(Service_Type, 1);
 8005b6a:	703e      	strb	r6, [r7, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b6c:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 8005b6e:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8005b70:	a801      	add	r0, sp, #4
  rq.clen = index_input;
 8005b72:	e9cd 8903 	strd	r8, r9, [sp, #12]
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8005b76:	707c      	strb	r4, [r7, #1]
  rq.rparam = &resp;
 8005b78:	9505      	str	r5, [sp, #20]
  rq.ogf = 0x3f;
 8005b7a:	9201      	str	r2, [sp, #4]
  rq.rlen = sizeof(resp);
 8005b7c:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005b7e:	9102      	str	r1, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8005b80:	f000 f9c6 	bl	8005f10 <hci_send_req>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	db18      	blt.n	8005bba <aci_gatt_add_service+0x8e>
  if (resp.Status) {
 8005b88:	7828      	ldrb	r0, [r5, #0]
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d1d8      	bne.n	8005b40 <aci_gatt_add_service+0x14>
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8005b8e:	682b      	ldr	r3, [r5, #0]
 8005b90:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8005b92:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8005b96:	8013      	strh	r3, [r2, #0]
}
 8005b98:	b049      	add	sp, #292	; 0x124
 8005b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005b9e:	466d      	mov	r5, sp
 8005ba0:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8005ba2:	f10d 081c 	add.w	r8, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005ba6:	802b      	strh	r3, [r5, #0]
 8005ba8:	70ab      	strb	r3, [r5, #2]
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8005baa:	f04f 0905 	mov.w	r9, #5
 8005bae:	2202      	movs	r2, #2
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005bb0:	f10d 071f 	add.w	r7, sp, #31
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8005bb4:	f888 0000 	strb.w	r0, [r8]
    switch (Service_UUID_Type) {
 8005bb8:	e7d2      	b.n	8005b60 <aci_gatt_add_service+0x34>
    return BLE_STATUS_TIMEOUT;
 8005bba:	20ff      	movs	r0, #255	; 0xff
}
 8005bbc:	b049      	add	sp, #292	; 0x124
 8005bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bc2:	bf00      	nop
 8005bc4:	0102003f 	.word	0x0102003f

08005bc8 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005bce:	2901      	cmp	r1, #1
{
 8005bd0:	461c      	mov	r4, r3
 8005bd2:	f89d 8150 	ldrb.w	r8, [sp, #336]	; 0x150
 8005bd6:	f89d 9154 	ldrb.w	r9, [sp, #340]	; 0x154
 8005bda:	f89d a158 	ldrb.w	sl, [sp, #344]	; 0x158
 8005bde:	f89d b15c 	ldrb.w	fp, [sp, #348]	; 0x15c
 8005be2:	f89d 3160 	ldrb.w	r3, [sp, #352]	; 0x160
 8005be6:	4694      	mov	ip, r2
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005be8:	d041      	beq.n	8005c6e <aci_gatt_add_char+0xa6>
 8005bea:	2902      	cmp	r1, #2
 8005bec:	d003      	beq.n	8005bf6 <aci_gatt_add_char+0x2e>
 8005bee:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 8005bf0:	b04b      	add	sp, #300	; 0x12c
 8005bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005bf6:	ad02      	add	r5, sp, #8
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	802a      	strh	r2, [r5, #0]
 8005bfc:	70aa      	strb	r2, [r5, #2]
      case 2: size = 16; break;
 8005bfe:	221a      	movs	r2, #26
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005c00:	af09      	add	r7, sp, #36	; 0x24
      case 2: size = 16; break;
 8005c02:	9200      	str	r2, [sp, #0]
 8005c04:	f10d 0637 	add.w	r6, sp, #55	; 0x37
 8005c08:	2210      	movs	r2, #16
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005c0a:	8038      	strh	r0, [r7, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005c0c:	70b9      	strb	r1, [r7, #2]
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8005c0e:	4661      	mov	r1, ip
 8005c10:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8005c14:	9301      	str	r3, [sp, #4]
 8005c16:	f002 fd0f 	bl	8008638 <memcpy>
      cp1->Char_Properties = htob(Char_Properties, 1);
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f368 0207 	bfi	r2, r8, #0, #8
      cp1->Is_Variable = htob(Is_Variable, 1);
 8005c20:	9b01      	ldr	r3, [sp, #4]
 8005c22:	71b3      	strb	r3, [r6, #6]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8005c24:	f369 220f 	bfi	r2, r9, #8, #8
  rq.clen = index_input;
 8005c28:	9b00      	ldr	r3, [sp, #0]
  rq.ogf = 0x3f;
 8005c2a:	f8df c064 	ldr.w	ip, [pc, #100]	; 8005c90 <aci_gatt_add_char+0xc8>
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8005c2e:	8034      	strh	r4, [r6, #0]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8005c30:	f36a 4217 	bfi	r2, sl, #16, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c34:	2100      	movs	r1, #0
      cp1->Char_Properties = htob(Char_Properties, 1);
 8005c36:	f36b 621f 	bfi	r2, fp, #24, #8
  rq.rlen = sizeof(resp);
 8005c3a:	2403      	movs	r4, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8005c3c:	a803      	add	r0, sp, #12
  rq.rparam = &resp;
 8005c3e:	e9cd 3506 	strd	r3, r5, [sp, #24]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8005c42:	f8c6 2002 	str.w	r2, [r6, #2]
  rq.cparam = cmd_buffer;
 8005c46:	9705      	str	r7, [sp, #20]
  rq.ogf = 0x3f;
 8005c48:	f8cd c00c 	str.w	ip, [sp, #12]
  rq.rlen = sizeof(resp);
 8005c4c:	9408      	str	r4, [sp, #32]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005c4e:	9104      	str	r1, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 8005c50:	f000 f95e 	bl	8005f10 <hci_send_req>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	db17      	blt.n	8005c88 <aci_gatt_add_char+0xc0>
  if (resp.Status) {
 8005c58:	7828      	ldrb	r0, [r5, #0]
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d1c8      	bne.n	8005bf0 <aci_gatt_add_char+0x28>
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8005c5e:	682b      	ldr	r3, [r5, #0]
 8005c60:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8005c62:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8005c66:	8013      	strh	r3, [r2, #0]
}
 8005c68:	b04b      	add	sp, #300	; 0x12c
 8005c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005c6e:	ad02      	add	r5, sp, #8
 8005c70:	2200      	movs	r2, #0
 8005c72:	802a      	strh	r2, [r5, #0]
 8005c74:	70aa      	strb	r2, [r5, #2]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005c76:	220c      	movs	r2, #12
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005c78:	af09      	add	r7, sp, #36	; 0x24
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005c7a:	9200      	str	r2, [sp, #0]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005c7c:	f10d 0629 	add.w	r6, sp, #41	; 0x29
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005c80:	2202      	movs	r2, #2
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005c82:	8038      	strh	r0, [r7, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005c84:	70b9      	strb	r1, [r7, #2]
    switch (Char_UUID_Type) {
 8005c86:	e7c2      	b.n	8005c0e <aci_gatt_add_char+0x46>
    return BLE_STATUS_TIMEOUT;
 8005c88:	20ff      	movs	r0, #255	; 0xff
}
 8005c8a:	b04b      	add	sp, #300	; 0x12c
 8005c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c90:	0104003f 	.word	0x0104003f

08005c94 <aci_gatt_add_char_desc>:
                                  uint8_t Access_Permissions,
                                  uint8_t GATT_Evt_Mask,
                                  uint8_t Enc_Key_Size,
                                  uint8_t Is_Variable,
                                  uint16_t *Char_Desc_Handle)
{
 8005c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c98:	b0cd      	sub	sp, #308	; 0x134
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_desc_cp0 *cp0 = (aci_gatt_add_char_desc_cp0*)(cmd_buffer);
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8005c9a:	2a01      	cmp	r2, #1
{
 8005c9c:	f89d 5164 	ldrb.w	r5, [sp, #356]	; 0x164
 8005ca0:	9500      	str	r5, [sp, #0]
 8005ca2:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8005ca6:	9501      	str	r5, [sp, #4]
 8005ca8:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8005cac:	f89d 9158 	ldrb.w	r9, [sp, #344]	; 0x158
 8005cb0:	f89d 415c 	ldrb.w	r4, [sp, #348]	; 0x15c
 8005cb4:	f89d a170 	ldrb.w	sl, [sp, #368]	; 0x170
 8005cb8:	f89d b174 	ldrb.w	fp, [sp, #372]	; 0x174
 8005cbc:	9502      	str	r5, [sp, #8]
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8005cbe:	d056      	beq.n	8005d6e <aci_gatt_add_char_desc+0xda>
 8005cc0:	2a02      	cmp	r2, #2
 8005cc2:	d003      	beq.n	8005ccc <aci_gatt_add_char_desc+0x38>
 8005cc4:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 8005cc6:	b04d      	add	sp, #308	; 0x134
 8005cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005ccc:	af04      	add	r7, sp, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8005cce:	ae0b      	add	r6, sp, #44	; 0x2c
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005cd0:	f04f 0c00 	mov.w	ip, #0
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8005cd4:	f104 0517 	add.w	r5, r4, #23
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005cd8:	8030      	strh	r0, [r6, #0]
      case 2: size = 16; break;
 8005cda:	2010      	movs	r0, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8005cdc:	4435      	add	r5, r6
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005cde:	f8a7 c000 	strh.w	ip, [r7]
 8005ce2:	f887 c002 	strb.w	ip, [r7, #2]
      case 2: size = 16; break;
 8005ce6:	9003      	str	r0, [sp, #12]
 8005ce8:	f10d 0841 	add.w	r8, sp, #65	; 0x41
  cp0->Char_Handle = htob(Char_Handle, 2);
 8005cec:	8071      	strh	r1, [r6, #2]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 8005cee:	7132      	strb	r2, [r6, #4]
    BLUENRG_memcpy((void *) &cp0->Char_Desc_Uuid, (const void *) Char_Desc_Uuid, size);
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 8005cf8:	f002 fc9e 	bl	8008638 <memcpy>
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Char_Desc_Value_Length = htob(Char_Desc_Value_Length, 1);
 8005d00:	f888 4001 	strb.w	r4, [r8, #1]
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8005d04:	f108 0002 	add.w	r0, r8, #2
      cp1->Char_Desc_Value_Max_Len = htob(Char_Desc_Value_Max_Len, 1);
 8005d08:	f888 9000 	strb.w	r9, [r8]
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8005d0c:	f002 fc94 	bl	8008638 <memcpy>
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8005d10:	9a00      	ldr	r2, [sp, #0]
  rq.ogf = 0x3f;
 8005d12:	f8df c088 	ldr.w	ip, [pc, #136]	; 8005d9c <aci_gatt_add_char_desc+0x108>
      cp2->Is_Variable = htob(Is_Variable, 1);
 8005d16:	f885 b004 	strb.w	fp, [r5, #4]
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f362 0307 	bfi	r3, r2, #0, #8
 8005d20:	9a01      	ldr	r2, [sp, #4]
  rq.rparam = &resp;
 8005d22:	9709      	str	r7, [sp, #36]	; 0x24
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8005d24:	f362 230f 	bfi	r3, r2, #8, #8
    index_input += 1;
 8005d28:	9a03      	ldr	r2, [sp, #12]
  rq.ogf = 0x3f;
 8005d2a:	f8cd c014 	str.w	ip, [sp, #20]
    index_input += 1;
 8005d2e:	340c      	adds	r4, #12
 8005d30:	4422      	add	r2, r4
 8005d32:	4614      	mov	r4, r2
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8005d34:	9a02      	ldr	r2, [sp, #8]
 8005d36:	f362 4317 	bfi	r3, r2, #16, #8
 8005d3a:	f36a 631f 	bfi	r3, sl, #24, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d3e:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 8005d40:	2203      	movs	r2, #3
  rq.clen = index_input;
 8005d42:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 8005d44:	a805      	add	r0, sp, #20
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8005d46:	602b      	str	r3, [r5, #0]
  rq.cparam = cmd_buffer;
 8005d48:	e9cd 6407 	strd	r6, r4, [sp, #28]
  rq.rlen = sizeof(resp);
 8005d4c:	920a      	str	r2, [sp, #40]	; 0x28
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005d4e:	9106      	str	r1, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8005d50:	f000 f8de 	bl	8005f10 <hci_send_req>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	db1d      	blt.n	8005d94 <aci_gatt_add_char_desc+0x100>
  if (resp.Status) {
 8005d58:	7838      	ldrb	r0, [r7, #0]
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d1b3      	bne.n	8005cc6 <aci_gatt_add_char_desc+0x32>
  *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	9a5e      	ldr	r2, [sp, #376]	; 0x178
 8005d62:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8005d66:	8013      	strh	r3, [r2, #0]
}
 8005d68:	b04d      	add	sp, #308	; 0x134
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005d6e:	af04      	add	r7, sp, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8005d70:	ae0b      	add	r6, sp, #44	; 0x2c
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005d72:	f04f 0c00 	mov.w	ip, #0
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8005d76:	f104 0509 	add.w	r5, r4, #9
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005d7a:	8030      	strh	r0, [r6, #0]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 8005d7c:	2002      	movs	r0, #2
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8005d7e:	4435      	add	r5, r6
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8005d80:	f8a7 c000 	strh.w	ip, [r7]
 8005d84:	f887 c002 	strb.w	ip, [r7, #2]
      case 1: size = 2; break;
 8005d88:	9003      	str	r0, [sp, #12]
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8005d8a:	f10d 0833 	add.w	r8, sp, #51	; 0x33
  cp0->Char_Handle = htob(Char_Handle, 2);
 8005d8e:	8071      	strh	r1, [r6, #2]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 8005d90:	7132      	strb	r2, [r6, #4]
 8005d92:	e7ad      	b.n	8005cf0 <aci_gatt_add_char_desc+0x5c>
    return BLE_STATUS_TIMEOUT;
 8005d94:	20ff      	movs	r0, #255	; 0xff
}
 8005d96:	b04d      	add	sp, #308	; 0x134
 8005d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9c:	0105003f 	.word	0x0105003f

08005da0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8005da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005da2:	b0c9      	sub	sp, #292	; 0x124
 8005da4:	461c      	mov	r4, r3
 8005da6:	468c      	mov	ip, r1
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005da8:	2600      	movs	r6, #0
{
 8005daa:	4613      	mov	r3, r2
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8005dac:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005dae:	f8ad 001c 	strh.w	r0, [sp, #28]
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8005db2:	4622      	mov	r2, r4
 8005db4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8005db8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  cp0->Char_Handle = htob(Char_Handle, 2);
 8005dbc:	f8ad c01e 	strh.w	ip, [sp, #30]
  cp0->Val_Offset = htob(Val_Offset, 1);
 8005dc0:	f88d 3020 	strb.w	r3, [sp, #32]
  tBleStatus status = 0;
 8005dc4:	f88d 6003 	strb.w	r6, [sp, #3]
    index_input += Char_Value_Length*sizeof(uint8_t);
 8005dc8:	3406      	adds	r4, #6
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8005dca:	f002 fc35 	bl	8008638 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8005dce:	4a0b      	ldr	r2, [pc, #44]	; (8005dfc <aci_gatt_update_char_value+0x5c>)
  tBleStatus status = 0;
 8005dd0:	f10d 0703 	add.w	r7, sp, #3
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8005dd4:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005dd6:	ad07      	add	r5, sp, #28
  rq.clen = index_input;
 8005dd8:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 8005dda:	4631      	mov	r1, r6
 8005ddc:	a801      	add	r0, sp, #4
  rq.ogf = 0x3f;
 8005dde:	e9cd 2601 	strd	r2, r6, [sp, #4]
  rq.cparam = cmd_buffer;
 8005de2:	9503      	str	r5, [sp, #12]
  rq.clen = index_input;
 8005de4:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 8005de6:	9705      	str	r7, [sp, #20]
  rq.rlen = 1;
 8005de8:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8005dea:	f000 f891 	bl	8005f10 <hci_send_req>
 8005dee:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8005df0:	bfac      	ite	ge
 8005df2:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 8005df4:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8005df6:	b049      	add	sp, #292	; 0x124
 8005df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	0106003f 	.word	0x0106003f

08005e00 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8005e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e02:	460c      	mov	r4, r1
 8005e04:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005e06:	2500      	movs	r5, #0
{
 8005e08:	4603      	mov	r3, r0
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	f10d 001e 	add.w	r0, sp, #30
 8005e10:	4622      	mov	r2, r4
  cp0->Offset = htob(Offset, 1);
 8005e12:	f88d 301c 	strb.w	r3, [sp, #28]
  cp0->Length = htob(Length, 1);
 8005e16:	f88d 401d 	strb.w	r4, [sp, #29]
  tBleStatus status = 0;
 8005e1a:	f88d 5003 	strb.w	r5, [sp, #3]
    index_input += Length*sizeof(uint8_t);
 8005e1e:	3402      	adds	r4, #2
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8005e20:	f002 fc0a 	bl	8008638 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8005e24:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <aci_hal_write_config_data+0x50>)
  tBleStatus status = 0;
 8005e26:	f10d 0703 	add.w	r7, sp, #3
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8005e2a:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 8005e2c:	ae07      	add	r6, sp, #28
  rq.clen = index_input;
 8005e2e:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 8005e30:	4629      	mov	r1, r5
 8005e32:	a801      	add	r0, sp, #4
  rq.ogf = 0x3f;
 8005e34:	e9cd 2501 	strd	r2, r5, [sp, #4]
  rq.clen = index_input;
 8005e38:	9404      	str	r4, [sp, #16]
  rq.cparam = cmd_buffer;
 8005e3a:	9603      	str	r6, [sp, #12]
  rq.rparam = &status;
 8005e3c:	9705      	str	r7, [sp, #20]
  rq.rlen = 1;
 8005e3e:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8005e40:	f000 f866 	bl	8005f10 <hci_send_req>
 8005e44:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8005e46:	bfac      	ite	ge
 8005e48:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 8005e4a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8005e4c:	b049      	add	sp, #292	; 0x124
 8005e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e50:	000c003f 	.word	0x000c003f

08005e54 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8005e54:	b510      	push	{r4, lr}
 8005e56:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8005e58:	2300      	movs	r3, #0
  uint8_t index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 8005e5a:	aa07      	add	r2, sp, #28
 8005e5c:	f88d 001c 	strb.w	r0, [sp, #28]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 8005e60:	f88d 101d 	strb.w	r1, [sp, #29]
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8005e64:	480b      	ldr	r0, [pc, #44]	; (8005e94 <aci_hal_set_tx_power_level+0x40>)
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
 8005e66:	9203      	str	r2, [sp, #12]
  rq.clen = index_input;
 8005e68:	2102      	movs	r1, #2
  tBleStatus status = 0;
 8005e6a:	f10d 0403 	add.w	r4, sp, #3
  rq.ogf = 0x3f;
 8005e6e:	9001      	str	r0, [sp, #4]
  rq.rparam = &status;
  rq.rlen = 1;
 8005e70:	2201      	movs	r2, #1
  rq.clen = index_input;
 8005e72:	9104      	str	r1, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 8005e74:	a801      	add	r0, sp, #4
 8005e76:	4619      	mov	r1, r3
  rq.rlen = 1;
 8005e78:	9206      	str	r2, [sp, #24]
  rq.rparam = &status;
 8005e7a:	9405      	str	r4, [sp, #20]
  tBleStatus status = 0;
 8005e7c:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005e80:	9302      	str	r3, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8005e82:	f000 f845 	bl	8005f10 <hci_send_req>
 8005e86:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8005e88:	bfac      	ite	ge
 8005e8a:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8005e8c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8005e8e:	b048      	add	sp, #288	; 0x120
 8005e90:	bd10      	pop	{r4, pc}
 8005e92:	bf00      	nop
 8005e94:	000f003f 	.word	0x000f003f

08005e98 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005e9c:	4f10      	ldr	r7, [pc, #64]	; (8005ee0 <hci_init+0x48>)
  if(UserEvtRx != NULL)
 8005e9e:	b100      	cbz	r0, 8005ea2 <hci_init+0xa>
    hciContext.UserEvtRx = UserEvtRx;
 8005ea0:	61f8      	str	r0, [r7, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8005ea2:	4810      	ldr	r0, [pc, #64]	; (8005ee4 <hci_init+0x4c>)
 8005ea4:	4c10      	ldr	r4, [pc, #64]	; (8005ee8 <hci_init+0x50>)
  hci_tl_lowlevel_init();

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005ea6:	4606      	mov	r6, r0
  list_init_head(&hciReadPktPool);
 8005ea8:	f000 f974 	bl	8006194 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005eac:	480f      	ldr	r0, [pc, #60]	; (8005eec <hci_init+0x54>)
 8005eae:	f000 f971 	bl	8006194 <list_init_head>
  hci_tl_lowlevel_init();
 8005eb2:	f7fa fc8d 	bl	80007d0 <hci_tl_lowlevel_init>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005eb6:	f504 65af 	add.w	r5, r4, #1400	; 0x578
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	348c      	adds	r4, #140	; 0x8c
 8005ec0:	f000 f984 	bl	80061cc <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005ec4:	42a5      	cmp	r5, r4
 8005ec6:	d1f8      	bne.n	8005eba <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	b10b      	cbz	r3, 8005ed0 <hci_init+0x38>
 8005ecc:	2000      	movs	r0, #0
 8005ece:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	b113      	cbz	r3, 8005eda <hci_init+0x42>
}
 8005ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005ed8:	4718      	bx	r3
}
 8005eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ede:	bf00      	nop
 8005ee0:	200001bc 	.word	0x200001bc
 8005ee4:	20009b3c 	.word	0x20009b3c
 8005ee8:	200001dc 	.word	0x200001dc
 8005eec:	20009b44 	.word	0x20009b44

08005ef0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <hci_register_io_bus+0x1c>)
  hciContext.io.Receive = fops->Receive;  
  hciContext.io.Send    = fops->Send;
  hciContext.io.GetTick = fops->GetTick;
 8005ef2:	6982      	ldr	r2, [r0, #24]
{
 8005ef4:	b430      	push	{r4, r5}
  hciContext.io.Init    = fops->Init; 
 8005ef6:	6805      	ldr	r5, [r0, #0]
  hciContext.io.GetTick = fops->GetTick;
 8005ef8:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8005efa:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 8005efe:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8005f02:	6902      	ldr	r2, [r0, #16]
 8005f04:	611a      	str	r2, [r3, #16]
  hciContext.io.Init    = fops->Init; 
 8005f06:	601d      	str	r5, [r3, #0]
}
 8005f08:	bc30      	pop	{r4, r5}
 8005f0a:	4770      	bx	lr
 8005f0c:	200001bc 	.word	0x200001bc

08005f10 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8005f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f14:	4606      	mov	r6, r0
 8005f16:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8005f18:	2300      	movs	r3, #0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8005f1a:	a802      	add	r0, sp, #8
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005f1c:	8877      	ldrh	r7, [r6, #2]
 8005f1e:	f8b6 9000 	ldrh.w	r9, [r6]
  tHciDataPacket * hciReadPacket = NULL;
 8005f22:	9301      	str	r3, [sp, #4]
{
 8005f24:	4688      	mov	r8, r1
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005f26:	4c6a      	ldr	r4, [pc, #424]	; (80060d0 <hci_send_req+0x1c0>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005f28:	4d6a      	ldr	r5, [pc, #424]	; (80060d4 <hci_send_req+0x1c4>)
  list_init_head(&hciTempQueue);
 8005f2a:	f000 f933 	bl	8006194 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005f2e:	e005      	b.n	8005f3c <hci_send_req+0x2c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005f30:	f000 f958 	bl	80061e4 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8005f34:	9904      	ldr	r1, [sp, #16]
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 f948 	bl	80061cc <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 f985 	bl	800624c <list_get_size>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b04      	cmp	r3, #4
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8005f46:	a904      	add	r1, sp, #16
 8005f48:	4628      	mov	r0, r5
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8005f4a:	ddf1      	ble.n	8005f30 <hci_send_req+0x20>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005f4c:	8873      	ldrh	r3, [r6, #2]
 8005f4e:	8832      	ldrh	r2, [r6, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005f50:	7b34      	ldrb	r4, [r6, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8005f52:	68b1      	ldr	r1, [r6, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005f54:	f88d 4013 	strb.w	r4, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f5c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 8005f60:	2501      	movs	r5, #1
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8005f62:	4622      	mov	r2, r4
 8005f64:	a805      	add	r0, sp, #20
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005f66:	f8ad 3011 	strh.w	r3, [sp, #17]
  payload[0] = HCI_COMMAND_PKT;
 8005f6a:	f88d 5010 	strb.w	r5, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8005f6e:	f002 fb63 	bl	8008638 <memcpy>
  if (hciContext.io.Send)
 8005f72:	4b59      	ldr	r3, [pc, #356]	; (80060d8 <hci_send_req+0x1c8>)
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	b113      	cbz	r3, 8005f7e <hci_send_req+0x6e>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005f78:	1d21      	adds	r1, r4, #4
 8005f7a:	a804      	add	r0, sp, #16
 8005f7c:	4798      	blx	r3
  
  if (async)
 8005f7e:	f1b8 0f00 	cmp.w	r8, #0
 8005f82:	f040 808f 	bne.w	80060a4 <hci_send_req+0x194>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005f86:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005f8a:	ea47 2789 	orr.w	r7, r7, r9, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005f8e:	4d51      	ldr	r5, [pc, #324]	; (80060d4 <hci_send_req+0x1c4>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8005f90:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80060d0 <hci_send_req+0x1c0>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8005f94:	b2bf      	uxth	r7, r7
    uint32_t tickstart = HAL_GetTick();
 8005f96:	f7fb fe2b 	bl	8001bf0 <HAL_GetTick>
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	e002      	b.n	8005fa4 <hci_send_req+0x94>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005f9e:	f000 f8fd 	bl	800619c <list_is_empty>
 8005fa2:	b1f0      	cbz	r0, 8005fe2 <hci_send_req+0xd2>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005fa4:	f7fb fe24 	bl	8001bf0 <HAL_GetTick>
 8005fa8:	1b03      	subs	r3, r0, r4
 8005faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8005fae:	4628      	mov	r0, r5
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005fb0:	d9f5      	bls.n	8005f9e <hci_send_req+0x8e>
 8005fb2:	9901      	ldr	r1, [sp, #4]
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	d142      	bne.n	800603e <hci_send_req+0x12e>
    list_insert_head(dest_list, tmp_node);
 8005fb8:	4c46      	ldr	r4, [pc, #280]	; (80060d4 <hci_send_req+0x1c4>)
 8005fba:	e005      	b.n	8005fc8 <hci_send_req+0xb8>
    list_remove_tail(src_list, &tmp_node);
 8005fbc:	f000 f92c 	bl	8006218 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8005fc0:	9904      	ldr	r1, [sp, #16]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f8f6 	bl	80061b4 <list_insert_head>
  while (!list_is_empty(src_list))
 8005fc8:	a802      	add	r0, sp, #8
 8005fca:	f000 f8e7 	bl	800619c <list_is_empty>
 8005fce:	4603      	mov	r3, r0
    list_remove_tail(src_list, &tmp_node);
 8005fd0:	a904      	add	r1, sp, #16
 8005fd2:	a802      	add	r0, sp, #8
  while (!list_is_empty(src_list))
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0f1      	beq.n	8005fbc <hci_send_req+0xac>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return -1;
 8005fd8:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 8005fdc:	b025      	add	sp, #148	; 0x94
 8005fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8005fe2:	a901      	add	r1, sp, #4
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	f000 f8fd 	bl	80061e4 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8005fea:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 8005fec:	7a0b      	ldrb	r3, [r1, #8]
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d112      	bne.n	8006018 <hci_send_req+0x108>
      switch (event_pckt->evt) 
 8005ff2:	7a4b      	ldrb	r3, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005ff4:	f891 4088 	ldrb.w	r4, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	d020      	beq.n	800603e <hci_send_req+0x12e>
 8005ffc:	d823      	bhi.n	8006046 <hci_send_req+0x136>
 8005ffe:	2b0e      	cmp	r3, #14
 8006000:	d01a      	beq.n	8006038 <hci_send_req+0x128>
 8006002:	2b0f      	cmp	r3, #15
 8006004:	d108      	bne.n	8006018 <hci_send_req+0x108>
        if (cs->opcode != opcode)
 8006006:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 800600a:	42bb      	cmp	r3, r7
 800600c:	d117      	bne.n	800603e <hci_send_req+0x12e>
        if (r->event != EVT_CMD_STATUS) {
 800600e:	6873      	ldr	r3, [r6, #4]
 8006010:	2b0f      	cmp	r3, #15
 8006012:	d052      	beq.n	80060ba <hci_send_req+0x1aa>
          if (cs->status) {
 8006014:	7acb      	ldrb	r3, [r1, #11]
 8006016:	b993      	cbnz	r3, 800603e <hci_send_req+0x12e>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8006018:	4640      	mov	r0, r8
 800601a:	f000 f8bf 	bl	800619c <list_is_empty>
 800601e:	b120      	cbz	r0, 800602a <hci_send_req+0x11a>
 8006020:	4628      	mov	r0, r5
 8006022:	f000 f8bb 	bl	800619c <list_is_empty>
 8006026:	2800      	cmp	r0, #0
 8006028:	d140      	bne.n	80060ac <hci_send_req+0x19c>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800602a:	9901      	ldr	r1, [sp, #4]
 800602c:	a802      	add	r0, sp, #8
 800602e:	f000 f8cd 	bl	80061cc <list_insert_tail>
      hciReadPacket=NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	e7ae      	b.n	8005f96 <hci_send_req+0x86>
        if (cc->opcode != opcode)
 8006038:	898b      	ldrh	r3, [r1, #12]
 800603a:	42bb      	cmp	r3, r7
 800603c:	d014      	beq.n	8006068 <hci_send_req+0x158>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800603e:	4824      	ldr	r0, [pc, #144]	; (80060d0 <hci_send_req+0x1c0>)
 8006040:	f000 f8b8 	bl	80061b4 <list_insert_head>
 8006044:	e7b8      	b.n	8005fb8 <hci_send_req+0xa8>
      switch (event_pckt->evt) 
 8006046:	2b3e      	cmp	r3, #62	; 0x3e
 8006048:	d1e6      	bne.n	8006018 <hci_send_req+0x108>
        if (me->subevent != r->event)
 800604a:	7aca      	ldrb	r2, [r1, #11]
 800604c:	6873      	ldr	r3, [r6, #4]
 800604e:	429a      	cmp	r2, r3
 8006050:	d1e2      	bne.n	8006018 <hci_send_req+0x108>
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8006052:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
        len -= 1;
 8006056:	1f22      	subs	r2, r4, #4
        r->rlen = MIN(len, r->rlen);
 8006058:	429a      	cmp	r2, r3
 800605a:	bf28      	it	cs
 800605c:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800605e:	310c      	adds	r1, #12
        r->rlen = MIN(len, r->rlen);
 8006060:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8006062:	f002 fae9 	bl	8008638 <memcpy>
        goto done;
 8006066:	e009      	b.n	800607c <hci_send_req+0x16c>
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006068:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
        len -= EVT_CMD_COMPLETE_SIZE;
 800606c:	1fa2      	subs	r2, r4, #6
        r->rlen = MIN(len, r->rlen);
 800606e:	429a      	cmp	r2, r3
 8006070:	bf28      	it	cs
 8006072:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006074:	310e      	adds	r1, #14
        r->rlen = MIN(len, r->rlen);
 8006076:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006078:	f002 fade 	bl	8008638 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800607c:	9901      	ldr	r1, [sp, #4]
 800607e:	4814      	ldr	r0, [pc, #80]	; (80060d0 <hci_send_req+0x1c0>)
    list_insert_head(dest_list, tmp_node);
 8006080:	4c14      	ldr	r4, [pc, #80]	; (80060d4 <hci_send_req+0x1c4>)
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8006082:	f000 f897 	bl	80061b4 <list_insert_head>
static void move_list(tListNode * dest_list, tListNode * src_list)
 8006086:	e005      	b.n	8006094 <hci_send_req+0x184>
    list_remove_tail(src_list, &tmp_node);
 8006088:	f000 f8c6 	bl	8006218 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800608c:	9904      	ldr	r1, [sp, #16]
 800608e:	4620      	mov	r0, r4
 8006090:	f000 f890 	bl	80061b4 <list_insert_head>
  while (!list_is_empty(src_list))
 8006094:	a802      	add	r0, sp, #8
 8006096:	f000 f881 	bl	800619c <list_is_empty>
 800609a:	4603      	mov	r3, r0
    list_remove_tail(src_list, &tmp_node);
 800609c:	a904      	add	r1, sp, #16
 800609e:	a802      	add	r0, sp, #8
  while (!list_is_empty(src_list))
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f1      	beq.n	8006088 <hci_send_req+0x178>
    return 0;
 80060a4:	2000      	movs	r0, #0
}
 80060a6:	b025      	add	sp, #148	; 0x94
 80060a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80060ac:	9901      	ldr	r1, [sp, #4]
 80060ae:	4640      	mov	r0, r8
 80060b0:	f000 f88c 	bl	80061cc <list_insert_tail>
      hciReadPacket=NULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	e76d      	b.n	8005f96 <hci_send_req+0x86>
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80060ba:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 80060be:	1ee2      	subs	r2, r4, #3
        r->rlen = MIN(len, r->rlen);
 80060c0:	429a      	cmp	r2, r3
 80060c2:	bf28      	it	cs
 80060c4:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80060c6:	310b      	adds	r1, #11
        r->rlen = MIN(len, r->rlen);
 80060c8:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80060ca:	f002 fab5 	bl	8008638 <memcpy>
        goto done;
 80060ce:	e7d5      	b.n	800607c <hci_send_req+0x16c>
 80060d0:	20009b3c 	.word	0x20009b3c
 80060d4:	20009b44 	.word	0x20009b44
 80060d8:	200001bc 	.word	0x200001bc

080060dc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 80060e0:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80060e2:	4c0d      	ldr	r4, [pc, #52]	; (8006118 <hci_user_evt_proc+0x3c>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
 80060e4:	4e0d      	ldr	r6, [pc, #52]	; (800611c <hci_user_evt_proc+0x40>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80060e6:	4d0e      	ldr	r5, [pc, #56]	; (8006120 <hci_user_evt_proc+0x44>)
  tHciDataPacket * hciReadPacket = NULL;
 80060e8:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80060ea:	e00a      	b.n	8006102 <hci_user_evt_proc+0x26>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80060ec:	f000 f87a 	bl	80061e4 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 80060f0:	69f3      	ldr	r3, [r6, #28]
 80060f2:	b113      	cbz	r3, 80060fa <hci_user_evt_proc+0x1e>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80060f4:	9801      	ldr	r0, [sp, #4]
 80060f6:	3008      	adds	r0, #8
 80060f8:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80060fa:	9901      	ldr	r1, [sp, #4]
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 f865 	bl	80061cc <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8006102:	4620      	mov	r0, r4
 8006104:	f000 f84a 	bl	800619c <list_is_empty>
 8006108:	4603      	mov	r3, r0
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800610a:	a901      	add	r1, sp, #4
 800610c:	4620      	mov	r0, r4
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0ec      	beq.n	80060ec <hci_user_evt_proc+0x10>
  }
}
 8006112:	b002      	add	sp, #8
 8006114:	bd70      	pop	{r4, r5, r6, pc}
 8006116:	bf00      	nop
 8006118:	20009b44 	.word	0x20009b44
 800611c:	200001bc 	.word	0x200001bc
 8006120:	20009b3c 	.word	0x20009b3c

08006124 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8006124:	b530      	push	{r4, r5, lr}
 8006126:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 8006128:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800612a:	4817      	ldr	r0, [pc, #92]	; (8006188 <hci_notify_asynch_evt+0x64>)
  tHciDataPacket * hciReadPacket = NULL;
 800612c:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800612e:	f000 f835 	bl	800619c <list_is_empty>
 8006132:	b110      	cbz	r0, 800613a <hci_notify_asynch_evt+0x16>
      }
    }
  }
  else 
  {
    ret = 1;
 8006134:	2001      	movs	r0, #1
  }
  return ret;
  
}
 8006136:	b003      	add	sp, #12
 8006138:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800613a:	4605      	mov	r5, r0
 800613c:	a901      	add	r1, sp, #4
 800613e:	4812      	ldr	r0, [pc, #72]	; (8006188 <hci_notify_asynch_evt+0x64>)
 8006140:	f000 f850 	bl	80061e4 <list_remove_head>
    if (hciContext.io.Receive)
 8006144:	4b11      	ldr	r3, [pc, #68]	; (800618c <hci_notify_asynch_evt+0x68>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	b1db      	cbz	r3, 8006182 <hci_notify_asynch_evt+0x5e>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800614a:	9801      	ldr	r0, [sp, #4]
 800614c:	2180      	movs	r1, #128	; 0x80
 800614e:	3008      	adds	r0, #8
 8006150:	4798      	blx	r3
      if (data_len > 0)
 8006152:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
        hciReadPacket->data_len = data_len;
 8006156:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 8006158:	d00d      	beq.n	8006176 <hci_notify_asynch_evt+0x52>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800615a:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 800615c:	f881 4088 	strb.w	r4, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8006160:	2b04      	cmp	r3, #4
 8006162:	d108      	bne.n	8006176 <hci_notify_asynch_evt+0x52>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8006164:	7a8b      	ldrb	r3, [r1, #10]
 8006166:	3c03      	subs	r4, #3
 8006168:	42a3      	cmp	r3, r4
 800616a:	d104      	bne.n	8006176 <hci_notify_asynch_evt+0x52>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800616c:	4808      	ldr	r0, [pc, #32]	; (8006190 <hci_notify_asynch_evt+0x6c>)
 800616e:	f000 f82d 	bl	80061cc <list_insert_tail>
  int32_t ret = 0;
 8006172:	4628      	mov	r0, r5
 8006174:	e7df      	b.n	8006136 <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8006176:	4804      	ldr	r0, [pc, #16]	; (8006188 <hci_notify_asynch_evt+0x64>)
 8006178:	f000 f81c 	bl	80061b4 <list_insert_head>
  int32_t ret = 0;
 800617c:	2000      	movs	r0, #0
}
 800617e:	b003      	add	sp, #12
 8006180:	bd30      	pop	{r4, r5, pc}
  int32_t ret = 0;
 8006182:	4618      	mov	r0, r3
  return ret;
 8006184:	e7d7      	b.n	8006136 <hci_notify_asynch_evt+0x12>
 8006186:	bf00      	nop
 8006188:	20009b3c 	.word	0x20009b3c
 800618c:	200001bc 	.word	0x200001bc
 8006190:	20009b44 	.word	0x20009b44

08006194 <list_init_head>:
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;	
 8006194:	e9c0 0000 	strd	r0, r0, [r0]
}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop

0800619c <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800619c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80061a0:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80061a2:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 80061a4:	1a18      	subs	r0, r3, r0
 80061a6:	fab0 f080 	clz	r0, r0
 80061aa:	0940      	lsrs	r0, r0, #5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ac:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop

080061b4 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80061b8:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80061ba:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 80061bc:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 80061c0:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 80061c2:	680a      	ldr	r2, [r1, #0]
 80061c4:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c6:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80061ca:	4770      	bx	lr

080061cc <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061cc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80061d0:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 80061d2:	6842      	ldr	r2, [r0, #4]
 80061d4:	e9c1 0200 	strd	r0, r2, [r1]
  listHead->prev = node;
 80061d8:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 80061da:	684a      	ldr	r2, [r1, #4]
 80061dc:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061de:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80061e2:	4770      	bx	lr

080061e4 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80061e4:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80061ea:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80061ec:	6803      	ldr	r3, [r0, #0]
 80061ee:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80061f4:	b672      	cpsid	i
  (node->prev)->next = node->next;
 80061f6:	e9d3 3200 	ldrd	r3, r2, [r3]
 80061fa:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 80061fc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fe:	f380 8810 	msr	PRIMASK, r0
  list_remove_node (listHead->next);
  (*node)->next = NULL;
 8006202:	680a      	ldr	r2, [r1, #0]
 8006204:	2300      	movs	r3, #0
 8006206:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8006208:	680a      	ldr	r2, [r1, #0]
 800620a:	6053      	str	r3, [r2, #4]
 800620c:	f384 8810 	msr	PRIMASK, r4
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop

08006218 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8006218:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800621a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800621e:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8006220:	6843      	ldr	r3, [r0, #4]
 8006222:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006224:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006228:	b672      	cpsid	i
  (node->prev)->next = node->next;
 800622a:	e9d3 3200 	ldrd	r3, r2, [r3]
 800622e:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 8006230:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006232:	f380 8810 	msr	PRIMASK, r0
  list_remove_node (listHead->prev);
  (*node)->next = NULL;
 8006236:	680a      	ldr	r2, [r1, #0]
 8006238:	2300      	movs	r3, #0
 800623a:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800623c:	680a      	ldr	r2, [r1, #0]
 800623e:	6053      	str	r3, [r2, #4]
 8006240:	f384 8810 	msr	PRIMASK, r4
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8006244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop

0800624c <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800624c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800624e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006252:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8006254:	6803      	ldr	r3, [r0, #0]
  while (temp != listHead)
 8006256:	429a      	cmp	r2, r3
  int size = 0;
 8006258:	f04f 0000 	mov.w	r0, #0
  while (temp != listHead)
 800625c:	d004      	beq.n	8006268 <list_get_size+0x1c>
  {
    size++;
    temp = temp->next;		
 800625e:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 8006260:	429a      	cmp	r2, r3
    size++;
 8006262:	f100 0001 	add.w	r0, r0, #1
  while (temp != listHead)
 8006266:	d1fa      	bne.n	800625e <list_get_size+0x12>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006268:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop

08006270 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006270:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <SysTick_Handler+0x18>)
 8006274:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006276:	f001 fb87 	bl	8007988 <xTaskGetSchedulerState>
 800627a:	2801      	cmp	r0, #1
 800627c:	d100      	bne.n	8006280 <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800627e:	bd08      	pop	{r3, pc}
 8006280:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006284:	f001 bf96 	b.w	80081b4 <xPortSysTickHandler>
 8006288:	e000e010 	.word	0xe000e010

0800628c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800628c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006290:	b92b      	cbnz	r3, 800629e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006292:	4b06      	ldr	r3, [pc, #24]	; (80062ac <osKernelInitialize+0x20>)
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	b928      	cbnz	r0, 80062a4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006298:	2201      	movs	r2, #1
 800629a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800629c:	4770      	bx	lr
    stat = osErrorISR;
 800629e:	f06f 0005 	mvn.w	r0, #5
 80062a2:	4770      	bx	lr
    } else {
      stat = osError;
 80062a4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	200009c0 	.word	0x200009c0

080062b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80062b0:	b510      	push	{r4, lr}
 80062b2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80062b6:	b974      	cbnz	r4, 80062d6 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80062b8:	4b08      	ldr	r3, [pc, #32]	; (80062dc <osKernelStart+0x2c>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	2a01      	cmp	r2, #1
 80062be:	d107      	bne.n	80062d0 <osKernelStart+0x20>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062c0:	4907      	ldr	r1, [pc, #28]	; (80062e0 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80062c2:	2202      	movs	r2, #2
 80062c4:	77cc      	strb	r4, [r1, #31]
 80062c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80062c8:	f001 f87a 	bl	80073c0 <vTaskStartScheduler>
      stat = osOK;
 80062cc:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80062ce:	bd10      	pop	{r4, pc}
      stat = osError;
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80062d4:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80062d6:	f06f 0005 	mvn.w	r0, #5
}
 80062da:	bd10      	pop	{r4, pc}
 80062dc:	200009c0 	.word	0x200009c0
 80062e0:	e000ed00 	.word	0xe000ed00

080062e4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062e4:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <vApplicationGetIdleTaskMemory+0x14>)
 80062e6:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062e8:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062ea:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062ec:	4c03      	ldr	r4, [pc, #12]	; (80062fc <vApplicationGetIdleTaskMemory+0x18>)
 80062ee:	600c      	str	r4, [r1, #0]
}
 80062f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062f4:	6013      	str	r3, [r2, #0]
}
 80062f6:	4770      	bx	lr
 80062f8:	20000954 	.word	0x20000954
 80062fc:	20000754 	.word	0x20000754

08006300 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006300:	4b05      	ldr	r3, [pc, #20]	; (8006318 <vApplicationGetTimerTaskMemory+0x18>)
 8006302:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006304:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006306:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800630a:	4c04      	ldr	r4, [pc, #16]	; (800631c <vApplicationGetTimerTaskMemory+0x1c>)
 800630c:	600c      	str	r4, [r1, #0]
}
 800630e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006312:	6013      	str	r3, [r2, #0]
}
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	200011c4 	.word	0x200011c4
 800631c:	200009c4 	.word	0x200009c4

08006320 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006320:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006324:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006328:	2200      	movs	r2, #0
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800632a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800632e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006330:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006332:	6043      	str	r3, [r0, #4]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop

08006338 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006338:	2300      	movs	r3, #0
 800633a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop

08006340 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006340:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006342:	6802      	ldr	r2, [r0, #0]
{
 8006344:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006346:	689c      	ldr	r4, [r3, #8]
 8006348:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800634a:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800634c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800634e:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006350:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006352:	6099      	str	r1, [r3, #8]
}
 8006354:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8006358:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800635a:	6002      	str	r2, [r0, #0]
}
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop

08006360 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006360:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006362:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006364:	1c6b      	adds	r3, r5, #1
 8006366:	d010      	beq.n	800638a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006368:	f100 0308 	add.w	r3, r0, #8
 800636c:	461c      	mov	r4, r3
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	42aa      	cmp	r2, r5
 8006374:	d9fa      	bls.n	800636c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006376:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8006378:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800637a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800637c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800637e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006380:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8006382:	6108      	str	r0, [r1, #16]
}
 8006384:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8006386:	6002      	str	r2, [r0, #0]
}
 8006388:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800638a:	6904      	ldr	r4, [r0, #16]
 800638c:	6863      	ldr	r3, [r4, #4]
 800638e:	e7f2      	b.n	8006376 <vListInsert+0x16>

08006390 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006390:	6903      	ldr	r3, [r0, #16]
{
 8006392:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006394:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006398:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800639a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800639c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800639e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063a0:	bf08      	it	eq
 80063a2:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80063a4:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80063a6:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 80063aa:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 80063ac:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 80063ae:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80063b0:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80063b2:	6818      	ldr	r0, [r3, #0]
}
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop

080063b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063bc:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063be:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063c0:	b920      	cbnz	r0, 80063cc <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063c2:	6825      	ldr	r5, [r4, #0]
 80063c4:	b35d      	cbz	r5, 800641e <prvCopyDataToQueue+0x66>
 80063c6:	3601      	adds	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063c8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80063cc:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063ce:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 80063d0:	b985      	cbnz	r5, 80063f4 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063d2:	6860      	ldr	r0, [r4, #4]
 80063d4:	f002 f930 	bl	8008638 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063dc:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063de:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063e0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063e2:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063e4:	f106 0601 	add.w	r6, r6, #1
 80063e8:	bf24      	itt	cs
 80063ea:	6823      	ldrcs	r3, [r4, #0]
 80063ec:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80063ee:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063f0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80063f2:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063f4:	68e0      	ldr	r0, [r4, #12]
 80063f6:	f002 f91f 	bl	8008638 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80063fc:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063fe:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006400:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006402:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006404:	60e3      	str	r3, [r4, #12]
 8006406:	f1c2 0200 	rsb	r2, r2, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800640a:	d202      	bcs.n	8006412 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800640c:	68a3      	ldr	r3, [r4, #8]
 800640e:	441a      	add	r2, r3
 8006410:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006412:	2d02      	cmp	r5, #2
 8006414:	d008      	beq.n	8006428 <prvCopyDataToQueue+0x70>
 8006416:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8006418:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800641a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800641c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800641e:	68a0      	ldr	r0, [r4, #8]
 8006420:	f001 fac2 	bl	80079a8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006424:	60a5      	str	r5, [r4, #8]
 8006426:	e7ce      	b.n	80063c6 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006428:	2e01      	cmp	r6, #1
 800642a:	bf38      	it	cc
 800642c:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 800642e:	2000      	movs	r0, #0
 8006430:	e7ca      	b.n	80063c8 <prvCopyDataToQueue+0x10>
 8006432:	bf00      	nop

08006434 <xQueueGenericCreateStatic>:
	{
 8006434:	b530      	push	{r4, r5, lr}
 8006436:	b083      	sub	sp, #12
 8006438:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800643c:	b940      	cbnz	r0, 8006450 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	e7fe      	b.n	800644e <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8006450:	461c      	mov	r4, r3
 8006452:	b1e3      	cbz	r3, 800648e <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006454:	b172      	cbz	r2, 8006474 <xQueueGenericCreateStatic+0x40>
 8006456:	b319      	cbz	r1, 80064a0 <xQueueGenericCreateStatic+0x6c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006458:	2350      	movs	r3, #80	; 0x50
 800645a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800645c:	9b01      	ldr	r3, [sp, #4]
 800645e:	2b50      	cmp	r3, #80	; 0x50
 8006460:	d027      	beq.n	80064b2 <xQueueGenericCreateStatic+0x7e>
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	e7fe      	b.n	8006472 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006474:	2900      	cmp	r1, #0
 8006476:	d146      	bne.n	8006506 <xQueueGenericCreateStatic+0xd2>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006478:	2350      	movs	r3, #80	; 0x50
 800647a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800647c:	9b01      	ldr	r3, [sp, #4]
 800647e:	2b50      	cmp	r3, #80	; 0x50
 8006480:	d1ef      	bne.n	8006462 <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006482:	2301      	movs	r3, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006484:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006486:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800648a:	4622      	mov	r2, r4
 800648c:	e015      	b.n	80064ba <xQueueGenericCreateStatic+0x86>
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800649e:	e7fe      	b.n	800649e <xQueueGenericCreateStatic+0x6a>
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064b0:	e7fe      	b.n	80064b0 <xQueueGenericCreateStatic+0x7c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064b2:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80064ba:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 80064be:	6022      	str	r2, [r4, #0]
	taskENTER_CRITICAL();
 80064c0:	f001 fe10 	bl	80080e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064c4:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 80064c8:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064ca:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064cc:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064d0:	1acb      	subs	r3, r1, r3
 80064d2:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064d4:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064d6:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 80064d8:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064da:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80064e0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064e4:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80064e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064ec:	f7ff ff18 	bl	8006320 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80064f4:	f7ff ff14 	bl	8006320 <vListInitialise>
	taskEXIT_CRITICAL();
 80064f8:	f001 fe16 	bl	8008128 <vPortExitCritical>
	}
 80064fc:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80064fe:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	}
 8006502:	b003      	add	sp, #12
 8006504:	bd30      	pop	{r4, r5, pc}
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006516:	e7fe      	b.n	8006516 <xQueueGenericCreateStatic+0xe2>

08006518 <xQueueGenericSend>:
{
 8006518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006520:	2800      	cmp	r0, #0
 8006522:	f000 80ac 	beq.w	800667e <xQueueGenericSend+0x166>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006526:	4688      	mov	r8, r1
 8006528:	461f      	mov	r7, r3
 800652a:	4604      	mov	r4, r0
 800652c:	2900      	cmp	r1, #0
 800652e:	f000 8099 	beq.w	8006664 <xQueueGenericSend+0x14c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006532:	2f02      	cmp	r7, #2
 8006534:	d10b      	bne.n	800654e <xQueueGenericSend+0x36>
 8006536:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d008      	beq.n	800654e <xQueueGenericSend+0x36>
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	e7fe      	b.n	800654c <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800654e:	f001 fa1b 	bl	8007988 <xTaskGetSchedulerState>
 8006552:	4682      	mov	sl, r0
 8006554:	2800      	cmp	r0, #0
 8006556:	f000 809b 	beq.w	8006690 <xQueueGenericSend+0x178>
 800655a:	f04f 0a00 	mov.w	sl, #0
					portYIELD_WITHIN_API();
 800655e:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8006820 <xQueueGenericSend+0x308>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006562:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8006566:	f001 fdbd 	bl	80080e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800656a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800656c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800656e:	429a      	cmp	r2, r3
 8006570:	f0c0 80f4 	bcc.w	800675c <xQueueGenericSend+0x244>
 8006574:	2f02      	cmp	r7, #2
 8006576:	f000 80f1 	beq.w	800675c <xQueueGenericSend+0x244>
				if( xTicksToWait == ( TickType_t ) 0 )
 800657a:	9d01      	ldr	r5, [sp, #4]
 800657c:	2d00      	cmp	r5, #0
 800657e:	f000 814a 	beq.w	8006816 <xQueueGenericSend+0x2fe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006582:	ad02      	add	r5, sp, #8
				else if( xEntryTimeSet == pdFALSE )
 8006584:	f1ba 0f00 	cmp.w	sl, #0
 8006588:	f000 80e4 	beq.w	8006754 <xQueueGenericSend+0x23c>
		taskEXIT_CRITICAL();
 800658c:	f001 fdcc 	bl	8008128 <vPortExitCritical>
		vTaskSuspendAll();
 8006590:	f000 ffb4 	bl	80074fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006594:	f001 fda6 	bl	80080e4 <vPortEnterCritical>
 8006598:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800659c:	2bff      	cmp	r3, #255	; 0xff
 800659e:	bf04      	itt	eq
 80065a0:	2300      	moveq	r3, #0
 80065a2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80065a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80065aa:	2bff      	cmp	r3, #255	; 0xff
 80065ac:	bf04      	itt	eq
 80065ae:	2300      	moveq	r3, #0
 80065b0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80065b4:	f001 fdb8 	bl	8008128 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065b8:	4628      	mov	r0, r5
 80065ba:	a901      	add	r1, sp, #4
 80065bc:	f001 f974 	bl	80078a8 <xTaskCheckForTimeOut>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	f040 80e8 	bne.w	8006796 <xQueueGenericSend+0x27e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065c6:	f001 fd8d 	bl	80080e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80065cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d06b      	beq.n	80066aa <xQueueGenericSend+0x192>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80065d2:	f001 fda9 	bl	8008128 <vPortExitCritical>
	taskENTER_CRITICAL();
 80065d6:	f001 fd85 	bl	80080e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80065da:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80065de:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	dc05      	bgt.n	80065f0 <xQueueGenericSend+0xd8>
 80065e4:	e012      	b.n	800660c <xQueueGenericSend+0xf4>
			--cTxLock;
 80065e6:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80065ec:	b25d      	sxtb	r5, r3
 80065ee:	d00d      	beq.n	800660c <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f4:	b153      	cbz	r3, 800660c <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065f6:	f001 f903 	bl	8007800 <xTaskRemoveFromEventList>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d0f3      	beq.n	80065e6 <xQueueGenericSend+0xce>
						vTaskMissedYield();
 80065fe:	f001 f9a3 	bl	8007948 <vTaskMissedYield>
			--cTxLock;
 8006602:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006604:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006608:	b25d      	sxtb	r5, r3
 800660a:	d1f1      	bne.n	80065f0 <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 800660c:	23ff      	movs	r3, #255	; 0xff
 800660e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006612:	f001 fd89 	bl	8008128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006616:	f001 fd65 	bl	80080e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800661a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800661e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006620:	2d00      	cmp	r5, #0
 8006622:	dd15      	ble.n	8006650 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006624:	f104 0a10 	add.w	sl, r4, #16
 8006628:	e004      	b.n	8006634 <xQueueGenericSend+0x11c>
				--cRxLock;
 800662a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800662c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006630:	b25d      	sxtb	r5, r3
 8006632:	d00d      	beq.n	8006650 <xQueueGenericSend+0x138>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006634:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006636:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006638:	b153      	cbz	r3, 8006650 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800663a:	f001 f8e1 	bl	8007800 <xTaskRemoveFromEventList>
 800663e:	2800      	cmp	r0, #0
 8006640:	d0f3      	beq.n	800662a <xQueueGenericSend+0x112>
					vTaskMissedYield();
 8006642:	f001 f981 	bl	8007948 <vTaskMissedYield>
				--cRxLock;
 8006646:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006648:	f013 0fff 	tst.w	r3, #255	; 0xff
 800664c:	b25d      	sxtb	r5, r3
 800664e:	d1f1      	bne.n	8006634 <xQueueGenericSend+0x11c>
		pxQueue->cRxLock = queueUNLOCKED;
 8006650:	23ff      	movs	r3, #255	; 0xff
 8006652:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006656:	f001 fd67 	bl	8008128 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800665a:	f000 ff57 	bl	800750c <xTaskResumeAll>
 800665e:	f04f 0a01 	mov.w	sl, #1
 8006662:	e780      	b.n	8006566 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006664:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	f43f af63 	beq.w	8006532 <xQueueGenericSend+0x1a>
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	e7fe      	b.n	800667c <xQueueGenericSend+0x164>
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800668e:	e7fe      	b.n	800668e <xQueueGenericSend+0x176>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006690:	9b01      	ldr	r3, [sp, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f43f af63 	beq.w	800655e <xQueueGenericSend+0x46>
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	e7fe      	b.n	80066a8 <xQueueGenericSend+0x190>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066aa:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 80066ae:	f001 fd3b 	bl	8008128 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066b2:	9901      	ldr	r1, [sp, #4]
 80066b4:	4650      	mov	r0, sl
 80066b6:	f001 f80b 	bl	80076d0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80066ba:	f001 fd13 	bl	80080e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80066be:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80066c2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	dc05      	bgt.n	80066d4 <xQueueGenericSend+0x1bc>
 80066c8:	e012      	b.n	80066f0 <xQueueGenericSend+0x1d8>
			--cTxLock;
 80066ca:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066d0:	b25d      	sxtb	r5, r3
 80066d2:	d00d      	beq.n	80066f0 <xQueueGenericSend+0x1d8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066d6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066d8:	b153      	cbz	r3, 80066f0 <xQueueGenericSend+0x1d8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066da:	f001 f891 	bl	8007800 <xTaskRemoveFromEventList>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d0f3      	beq.n	80066ca <xQueueGenericSend+0x1b2>
						vTaskMissedYield();
 80066e2:	f001 f931 	bl	8007948 <vTaskMissedYield>
			--cTxLock;
 80066e6:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066ec:	b25d      	sxtb	r5, r3
 80066ee:	d1f1      	bne.n	80066d4 <xQueueGenericSend+0x1bc>
		pxQueue->cTxLock = queueUNLOCKED;
 80066f0:	23ff      	movs	r3, #255	; 0xff
 80066f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80066f6:	f001 fd17 	bl	8008128 <vPortExitCritical>
	taskENTER_CRITICAL();
 80066fa:	f001 fcf3 	bl	80080e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80066fe:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8006702:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006704:	2d00      	cmp	r5, #0
 8006706:	dc05      	bgt.n	8006714 <xQueueGenericSend+0x1fc>
 8006708:	e012      	b.n	8006730 <xQueueGenericSend+0x218>
				--cRxLock;
 800670a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800670c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006710:	b25d      	sxtb	r5, r3
 8006712:	d00d      	beq.n	8006730 <xQueueGenericSend+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006714:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006716:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006718:	b153      	cbz	r3, 8006730 <xQueueGenericSend+0x218>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800671a:	f001 f871 	bl	8007800 <xTaskRemoveFromEventList>
 800671e:	2800      	cmp	r0, #0
 8006720:	d0f3      	beq.n	800670a <xQueueGenericSend+0x1f2>
					vTaskMissedYield();
 8006722:	f001 f911 	bl	8007948 <vTaskMissedYield>
				--cRxLock;
 8006726:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006728:	f013 0fff 	tst.w	r3, #255	; 0xff
 800672c:	b25d      	sxtb	r5, r3
 800672e:	d1f1      	bne.n	8006714 <xQueueGenericSend+0x1fc>
		pxQueue->cRxLock = queueUNLOCKED;
 8006730:	23ff      	movs	r3, #255	; 0xff
 8006732:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006736:	f001 fcf7 	bl	8008128 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800673a:	f000 fee7 	bl	800750c <xTaskResumeAll>
 800673e:	2800      	cmp	r0, #0
 8006740:	d18d      	bne.n	800665e <xQueueGenericSend+0x146>
					portYIELD_WITHIN_API();
 8006742:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006746:	f8c9 3000 	str.w	r3, [r9]
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	e784      	b.n	800665e <xQueueGenericSend+0x146>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006754:	4628      	mov	r0, r5
 8006756:	f001 f89b 	bl	8007890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800675a:	e717      	b.n	800658c <xQueueGenericSend+0x74>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800675c:	463a      	mov	r2, r7
 800675e:	4641      	mov	r1, r8
 8006760:	4620      	mov	r0, r4
 8006762:	f7ff fe29 	bl	80063b8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006768:	b973      	cbnz	r3, 8006788 <xQueueGenericSend+0x270>
					else if( xYieldRequired != pdFALSE )
 800676a:	b138      	cbz	r0, 800677c <xQueueGenericSend+0x264>
						queueYIELD_IF_USING_PREEMPTION();
 800676c:	4b2c      	ldr	r3, [pc, #176]	; (8006820 <xQueueGenericSend+0x308>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800677c:	f001 fcd4 	bl	8008128 <vPortExitCritical>
				return pdPASS;
 8006780:	2001      	movs	r0, #1
}
 8006782:	b004      	add	sp, #16
 8006784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006788:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800678c:	f001 f838 	bl	8007800 <xTaskRemoveFromEventList>
 8006790:	2800      	cmp	r0, #0
 8006792:	d0f3      	beq.n	800677c <xQueueGenericSend+0x264>
 8006794:	e7ea      	b.n	800676c <xQueueGenericSend+0x254>
	taskENTER_CRITICAL();
 8006796:	f001 fca5 	bl	80080e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800679a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800679e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067a0:	2d00      	cmp	r5, #0
 80067a2:	dd11      	ble.n	80067c8 <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067a4:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80067a8:	e004      	b.n	80067b4 <xQueueGenericSend+0x29c>
			--cTxLock;
 80067aa:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80067b0:	b25d      	sxtb	r5, r3
 80067b2:	d009      	beq.n	80067c8 <xQueueGenericSend+0x2b0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067b6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b8:	b133      	cbz	r3, 80067c8 <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ba:	f001 f821 	bl	8007800 <xTaskRemoveFromEventList>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d0f3      	beq.n	80067aa <xQueueGenericSend+0x292>
						vTaskMissedYield();
 80067c2:	f001 f8c1 	bl	8007948 <vTaskMissedYield>
 80067c6:	e7f0      	b.n	80067aa <xQueueGenericSend+0x292>
		pxQueue->cTxLock = queueUNLOCKED;
 80067c8:	23ff      	movs	r3, #255	; 0xff
 80067ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80067ce:	f001 fcab 	bl	8008128 <vPortExitCritical>
	taskENTER_CRITICAL();
 80067d2:	f001 fc87 	bl	80080e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80067d6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80067da:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067dc:	2d00      	cmp	r5, #0
 80067de:	dd11      	ble.n	8006804 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067e0:	f104 0610 	add.w	r6, r4, #16
 80067e4:	e004      	b.n	80067f0 <xQueueGenericSend+0x2d8>
				--cRxLock;
 80067e6:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80067ec:	b25d      	sxtb	r5, r3
 80067ee:	d009      	beq.n	8006804 <xQueueGenericSend+0x2ec>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067f0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067f2:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067f4:	b133      	cbz	r3, 8006804 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067f6:	f001 f803 	bl	8007800 <xTaskRemoveFromEventList>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d0f3      	beq.n	80067e6 <xQueueGenericSend+0x2ce>
					vTaskMissedYield();
 80067fe:	f001 f8a3 	bl	8007948 <vTaskMissedYield>
 8006802:	e7f0      	b.n	80067e6 <xQueueGenericSend+0x2ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8006804:	23ff      	movs	r3, #255	; 0xff
 8006806:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800680a:	f001 fc8d 	bl	8008128 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800680e:	f000 fe7d 	bl	800750c <xTaskResumeAll>
			return errQUEUE_FULL;
 8006812:	2000      	movs	r0, #0
 8006814:	e7b5      	b.n	8006782 <xQueueGenericSend+0x26a>
					taskEXIT_CRITICAL();
 8006816:	f001 fc87 	bl	8008128 <vPortExitCritical>
					return errQUEUE_FULL;
 800681a:	4628      	mov	r0, r5
 800681c:	e7b1      	b.n	8006782 <xQueueGenericSend+0x26a>
 800681e:	bf00      	nop
 8006820:	e000ed04 	.word	0xe000ed04

08006824 <xQueueReceive>:
{
 8006824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006828:	b085      	sub	sp, #20
 800682a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800682c:	2800      	cmp	r0, #0
 800682e:	f000 80f5 	beq.w	8006a1c <xQueueReceive+0x1f8>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006832:	460e      	mov	r6, r1
 8006834:	4604      	mov	r4, r0
 8006836:	2900      	cmp	r1, #0
 8006838:	f000 808a 	beq.w	8006950 <xQueueReceive+0x12c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800683c:	f001 f8a4 	bl	8007988 <xTaskGetSchedulerState>
 8006840:	2800      	cmp	r0, #0
 8006842:	d079      	beq.n	8006938 <xQueueReceive+0x114>
		taskENTER_CRITICAL();
 8006844:	f001 fc4e 	bl	80080e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006848:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800684a:	2d00      	cmp	r5, #0
 800684c:	f040 8148 	bne.w	8006ae0 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006850:	9b01      	ldr	r3, [sp, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 80dc 	beq.w	8006a10 <xQueueReceive+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006858:	a802      	add	r0, sp, #8
 800685a:	f001 f819 	bl	8007890 <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 800685e:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8006b28 <xQueueReceive+0x304>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006862:	f104 0724 	add.w	r7, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8006866:	f001 fc5f 	bl	8008128 <vPortExitCritical>
		vTaskSuspendAll();
 800686a:	f000 fe47 	bl	80074fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800686e:	f001 fc39 	bl	80080e4 <vPortEnterCritical>
 8006872:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006876:	2bff      	cmp	r3, #255	; 0xff
 8006878:	bf04      	itt	eq
 800687a:	2300      	moveq	r3, #0
 800687c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8006880:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006884:	2bff      	cmp	r3, #255	; 0xff
 8006886:	bf04      	itt	eq
 8006888:	2300      	moveq	r3, #0
 800688a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800688e:	f001 fc4b 	bl	8008128 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006892:	a901      	add	r1, sp, #4
 8006894:	a802      	add	r0, sp, #8
 8006896:	f001 f807 	bl	80078a8 <xTaskCheckForTimeOut>
 800689a:	2800      	cmp	r0, #0
 800689c:	d165      	bne.n	800696a <xQueueReceive+0x146>
	taskENTER_CRITICAL();
 800689e:	f001 fc21 	bl	80080e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80c2 	beq.w	8006a2e <xQueueReceive+0x20a>
	taskEXIT_CRITICAL();
 80068aa:	f001 fc3d 	bl	8008128 <vPortExitCritical>
	taskENTER_CRITICAL();
 80068ae:	f001 fc19 	bl	80080e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80068b2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80068b6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068b8:	2d00      	cmp	r5, #0
 80068ba:	dc05      	bgt.n	80068c8 <xQueueReceive+0xa4>
 80068bc:	e012      	b.n	80068e4 <xQueueReceive+0xc0>
			--cTxLock;
 80068be:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80068c4:	b25d      	sxtb	r5, r3
 80068c6:	d00d      	beq.n	80068e4 <xQueueReceive+0xc0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ca:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068cc:	b153      	cbz	r3, 80068e4 <xQueueReceive+0xc0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ce:	f000 ff97 	bl	8007800 <xTaskRemoveFromEventList>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d0f3      	beq.n	80068be <xQueueReceive+0x9a>
						vTaskMissedYield();
 80068d6:	f001 f837 	bl	8007948 <vTaskMissedYield>
			--cTxLock;
 80068da:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80068e0:	b25d      	sxtb	r5, r3
 80068e2:	d1f1      	bne.n	80068c8 <xQueueReceive+0xa4>
		pxQueue->cTxLock = queueUNLOCKED;
 80068e4:	23ff      	movs	r3, #255	; 0xff
 80068e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80068ea:	f001 fc1d 	bl	8008128 <vPortExitCritical>
	taskENTER_CRITICAL();
 80068ee:	f001 fbf9 	bl	80080e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80068f2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80068f6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068f8:	2d00      	cmp	r5, #0
 80068fa:	dd15      	ble.n	8006928 <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068fc:	f104 0910 	add.w	r9, r4, #16
 8006900:	e004      	b.n	800690c <xQueueReceive+0xe8>
				--cRxLock;
 8006902:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006904:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006908:	b25d      	sxtb	r5, r3
 800690a:	d00d      	beq.n	8006928 <xQueueReceive+0x104>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800690c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800690e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006910:	b153      	cbz	r3, 8006928 <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006912:	f000 ff75 	bl	8007800 <xTaskRemoveFromEventList>
 8006916:	2800      	cmp	r0, #0
 8006918:	d0f3      	beq.n	8006902 <xQueueReceive+0xde>
					vTaskMissedYield();
 800691a:	f001 f815 	bl	8007948 <vTaskMissedYield>
				--cRxLock;
 800691e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006920:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006924:	b25d      	sxtb	r5, r3
 8006926:	d1f1      	bne.n	800690c <xQueueReceive+0xe8>
		pxQueue->cRxLock = queueUNLOCKED;
 8006928:	23ff      	movs	r3, #255	; 0xff
 800692a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800692e:	f001 fbfb 	bl	8008128 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8006932:	f000 fdeb 	bl	800750c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006936:	e062      	b.n	80069fe <xQueueReceive+0x1da>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006938:	9b01      	ldr	r3, [sp, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d082      	beq.n	8006844 <xQueueReceive+0x20>
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	e7fe      	b.n	800694e <xQueueReceive+0x12a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006950:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	f43f af72 	beq.w	800683c <xQueueReceive+0x18>
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	e7fe      	b.n	8006968 <xQueueReceive+0x144>
	taskENTER_CRITICAL();
 800696a:	f001 fbbb 	bl	80080e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800696e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8006972:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006974:	2d00      	cmp	r5, #0
 8006976:	dc05      	bgt.n	8006984 <xQueueReceive+0x160>
 8006978:	e012      	b.n	80069a0 <xQueueReceive+0x17c>
			--cTxLock;
 800697a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800697c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006980:	b25d      	sxtb	r5, r3
 8006982:	d00d      	beq.n	80069a0 <xQueueReceive+0x17c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006984:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006986:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006988:	b153      	cbz	r3, 80069a0 <xQueueReceive+0x17c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800698a:	f000 ff39 	bl	8007800 <xTaskRemoveFromEventList>
 800698e:	2800      	cmp	r0, #0
 8006990:	d0f3      	beq.n	800697a <xQueueReceive+0x156>
						vTaskMissedYield();
 8006992:	f000 ffd9 	bl	8007948 <vTaskMissedYield>
			--cTxLock;
 8006996:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006998:	f013 0fff 	tst.w	r3, #255	; 0xff
 800699c:	b25d      	sxtb	r5, r3
 800699e:	d1f1      	bne.n	8006984 <xQueueReceive+0x160>
		pxQueue->cTxLock = queueUNLOCKED;
 80069a0:	23ff      	movs	r3, #255	; 0xff
 80069a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80069a6:	f001 fbbf 	bl	8008128 <vPortExitCritical>
	taskENTER_CRITICAL();
 80069aa:	f001 fb9b 	bl	80080e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80069ae:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80069b2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069b4:	2d00      	cmp	r5, #0
 80069b6:	dd15      	ble.n	80069e4 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b8:	f104 0910 	add.w	r9, r4, #16
 80069bc:	e004      	b.n	80069c8 <xQueueReceive+0x1a4>
				--cRxLock;
 80069be:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069c4:	b25d      	sxtb	r5, r3
 80069c6:	d00d      	beq.n	80069e4 <xQueueReceive+0x1c0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069c8:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ca:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069cc:	b153      	cbz	r3, 80069e4 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ce:	f000 ff17 	bl	8007800 <xTaskRemoveFromEventList>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d0f3      	beq.n	80069be <xQueueReceive+0x19a>
					vTaskMissedYield();
 80069d6:	f000 ffb7 	bl	8007948 <vTaskMissedYield>
				--cRxLock;
 80069da:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069e0:	b25d      	sxtb	r5, r3
 80069e2:	d1f1      	bne.n	80069c8 <xQueueReceive+0x1a4>
		pxQueue->cRxLock = queueUNLOCKED;
 80069e4:	23ff      	movs	r3, #255	; 0xff
 80069e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80069ea:	f001 fb9d 	bl	8008128 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80069ee:	f000 fd8d 	bl	800750c <xTaskResumeAll>
	taskENTER_CRITICAL();
 80069f2:	f001 fb77 	bl	80080e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069f8:	b153      	cbz	r3, 8006a10 <xQueueReceive+0x1ec>
	taskEXIT_CRITICAL();
 80069fa:	f001 fb95 	bl	8008128 <vPortExitCritical>
		taskENTER_CRITICAL();
 80069fe:	f001 fb71 	bl	80080e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a02:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a04:	2d00      	cmp	r5, #0
 8006a06:	d16b      	bne.n	8006ae0 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a08:	9b01      	ldr	r3, [sp, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f47f af2b 	bne.w	8006866 <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 8006a10:	f001 fb8a 	bl	8008128 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006a14:	2000      	movs	r0, #0
}
 8006a16:	b005      	add	sp, #20
 8006a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006a2c:	e7fe      	b.n	8006a2c <xQueueReceive+0x208>
	taskEXIT_CRITICAL();
 8006a2e:	f001 fb7b 	bl	8008128 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a32:	9901      	ldr	r1, [sp, #4]
 8006a34:	4638      	mov	r0, r7
 8006a36:	f000 fe4b 	bl	80076d0 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8006a3a:	f001 fb53 	bl	80080e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006a3e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8006a42:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a44:	2d00      	cmp	r5, #0
 8006a46:	dc05      	bgt.n	8006a54 <xQueueReceive+0x230>
 8006a48:	e012      	b.n	8006a70 <xQueueReceive+0x24c>
			--cTxLock;
 8006a4a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a4c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a50:	b25d      	sxtb	r5, r3
 8006a52:	d00d      	beq.n	8006a70 <xQueueReceive+0x24c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a56:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a58:	b153      	cbz	r3, 8006a70 <xQueueReceive+0x24c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a5a:	f000 fed1 	bl	8007800 <xTaskRemoveFromEventList>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d0f3      	beq.n	8006a4a <xQueueReceive+0x226>
						vTaskMissedYield();
 8006a62:	f000 ff71 	bl	8007948 <vTaskMissedYield>
			--cTxLock;
 8006a66:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a68:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a6c:	b25d      	sxtb	r5, r3
 8006a6e:	d1f1      	bne.n	8006a54 <xQueueReceive+0x230>
		pxQueue->cTxLock = queueUNLOCKED;
 8006a70:	23ff      	movs	r3, #255	; 0xff
 8006a72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006a76:	f001 fb57 	bl	8008128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006a7a:	f001 fb33 	bl	80080e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006a7e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8006a82:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a84:	2d00      	cmp	r5, #0
 8006a86:	dd15      	ble.n	8006ab4 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a88:	f104 0910 	add.w	r9, r4, #16
 8006a8c:	e004      	b.n	8006a98 <xQueueReceive+0x274>
				--cRxLock;
 8006a8e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a90:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a94:	b25d      	sxtb	r5, r3
 8006a96:	d00d      	beq.n	8006ab4 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a98:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a9a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a9c:	b153      	cbz	r3, 8006ab4 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a9e:	f000 feaf 	bl	8007800 <xTaskRemoveFromEventList>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d0f3      	beq.n	8006a8e <xQueueReceive+0x26a>
					vTaskMissedYield();
 8006aa6:	f000 ff4f 	bl	8007948 <vTaskMissedYield>
				--cRxLock;
 8006aaa:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006aac:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ab0:	b25d      	sxtb	r5, r3
 8006ab2:	d1f1      	bne.n	8006a98 <xQueueReceive+0x274>
		pxQueue->cRxLock = queueUNLOCKED;
 8006ab4:	23ff      	movs	r3, #255	; 0xff
 8006ab6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006aba:	f001 fb35 	bl	8008128 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8006abe:	f000 fd25 	bl	800750c <xTaskResumeAll>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d19b      	bne.n	80069fe <xQueueReceive+0x1da>
					portYIELD_WITHIN_API();
 8006ac6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006aca:	f8c8 3000 	str.w	r3, [r8]
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8006ad6:	f001 fb05 	bl	80080e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ada:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	d093      	beq.n	8006a08 <xQueueReceive+0x1e4>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ae0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006ae2:	b152      	cbz	r2, 8006afa <xQueueReceive+0x2d6>
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ae4:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ae8:	1899      	adds	r1, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006aea:	4281      	cmp	r1, r0
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006aec:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006aee:	bf24      	itt	cs
 8006af0:	6821      	ldrcs	r1, [r4, #0]
 8006af2:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006af4:	4630      	mov	r0, r6
 8006af6:	f001 fd9f 	bl	8008638 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006afa:	3d01      	subs	r5, #1
 8006afc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	b91b      	cbnz	r3, 8006b0a <xQueueReceive+0x2e6>
				taskEXIT_CRITICAL();
 8006b02:	f001 fb11 	bl	8008128 <vPortExitCritical>
				return pdPASS;
 8006b06:	2001      	movs	r0, #1
 8006b08:	e785      	b.n	8006a16 <xQueueReceive+0x1f2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b0a:	f104 0010 	add.w	r0, r4, #16
 8006b0e:	f000 fe77 	bl	8007800 <xTaskRemoveFromEventList>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d0f5      	beq.n	8006b02 <xQueueReceive+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
 8006b16:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <xQueueReceive+0x304>)
 8006b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	e7ec      	b.n	8006b02 <xQueueReceive+0x2de>
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b2c:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <vQueueAddToRegistry+0x70>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	b1ba      	cbz	r2, 8006b62 <vQueueAddToRegistry+0x36>
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	b1f2      	cbz	r2, 8006b74 <vQueueAddToRegistry+0x48>
 8006b36:	691a      	ldr	r2, [r3, #16]
 8006b38:	b1f2      	cbz	r2, 8006b78 <vQueueAddToRegistry+0x4c>
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	b1f2      	cbz	r2, 8006b7c <vQueueAddToRegistry+0x50>
 8006b3e:	6a1a      	ldr	r2, [r3, #32]
 8006b40:	b1f2      	cbz	r2, 8006b80 <vQueueAddToRegistry+0x54>
 8006b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b44:	b1f2      	cbz	r2, 8006b84 <vQueueAddToRegistry+0x58>
 8006b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b48:	b1f2      	cbz	r2, 8006b88 <vQueueAddToRegistry+0x5c>
 8006b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b4c:	b1f2      	cbz	r2, 8006b8c <vQueueAddToRegistry+0x60>
 8006b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b50:	b1f2      	cbz	r2, 8006b90 <vQueueAddToRegistry+0x64>
 8006b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b54:	b1f2      	cbz	r2, 8006b94 <vQueueAddToRegistry+0x68>
 8006b56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b58:	b112      	cbz	r2, 8006b60 <vQueueAddToRegistry+0x34>
 8006b5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b5c:	b1e2      	cbz	r2, 8006b98 <vQueueAddToRegistry+0x6c>
 8006b5e:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b60:	220a      	movs	r2, #10
	{
 8006b62:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b64:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b6c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b72:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b74:	2201      	movs	r2, #1
 8006b76:	e7f4      	b.n	8006b62 <vQueueAddToRegistry+0x36>
 8006b78:	2202      	movs	r2, #2
 8006b7a:	e7f2      	b.n	8006b62 <vQueueAddToRegistry+0x36>
 8006b7c:	2203      	movs	r2, #3
 8006b7e:	e7f0      	b.n	8006b62 <vQueueAddToRegistry+0x36>
 8006b80:	2204      	movs	r2, #4
 8006b82:	e7ee      	b.n	8006b62 <vQueueAddToRegistry+0x36>
 8006b84:	2205      	movs	r2, #5
 8006b86:	e7ec      	b.n	8006b62 <vQueueAddToRegistry+0x36>
 8006b88:	2206      	movs	r2, #6
 8006b8a:	e7ea      	b.n	8006b62 <vQueueAddToRegistry+0x36>
 8006b8c:	2207      	movs	r2, #7
 8006b8e:	e7e8      	b.n	8006b62 <vQueueAddToRegistry+0x36>
 8006b90:	2208      	movs	r2, #8
 8006b92:	e7e6      	b.n	8006b62 <vQueueAddToRegistry+0x36>
 8006b94:	2209      	movs	r2, #9
 8006b96:	e7e4      	b.n	8006b62 <vQueueAddToRegistry+0x36>
 8006b98:	220b      	movs	r2, #11
 8006b9a:	e7e2      	b.n	8006b62 <vQueueAddToRegistry+0x36>
 8006b9c:	20009b4c 	.word	0x20009b4c

08006ba0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	460e      	mov	r6, r1
 8006ba6:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ba8:	f001 fa9c 	bl	80080e4 <vPortEnterCritical>
 8006bac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006bb0:	2bff      	cmp	r3, #255	; 0xff
 8006bb2:	bf04      	itt	eq
 8006bb4:	2300      	moveq	r3, #0
 8006bb6:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8006bba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006bbe:	2bff      	cmp	r3, #255	; 0xff
 8006bc0:	bf04      	itt	eq
 8006bc2:	2300      	moveq	r3, #0
 8006bc4:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8006bc8:	f001 faae 	bl	8008128 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d045      	beq.n	8006c5e <vQueueWaitForMessageRestricted+0xbe>
	taskENTER_CRITICAL();
 8006bd2:	f001 fa87 	bl	80080e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006bd6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8006bda:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bdc:	2d00      	cmp	r5, #0
 8006bde:	dd15      	ble.n	8006c0c <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006be0:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8006be4:	e004      	b.n	8006bf0 <vQueueWaitForMessageRestricted+0x50>
			--cTxLock;
 8006be6:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006be8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006bec:	b25d      	sxtb	r5, r3
 8006bee:	d00d      	beq.n	8006c0c <vQueueWaitForMessageRestricted+0x6c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bf4:	b153      	cbz	r3, 8006c0c <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bf6:	f000 fe03 	bl	8007800 <xTaskRemoveFromEventList>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d0f3      	beq.n	8006be6 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8006bfe:	f000 fea3 	bl	8007948 <vTaskMissedYield>
			--cTxLock;
 8006c02:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c08:	b25d      	sxtb	r5, r3
 8006c0a:	d1f1      	bne.n	8006bf0 <vQueueWaitForMessageRestricted+0x50>
		pxQueue->cTxLock = queueUNLOCKED;
 8006c0c:	23ff      	movs	r3, #255	; 0xff
 8006c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006c12:	f001 fa89 	bl	8008128 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006c16:	f001 fa65 	bl	80080e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006c1a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8006c1e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c20:	2d00      	cmp	r5, #0
 8006c22:	dd15      	ble.n	8006c50 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c24:	f104 0610 	add.w	r6, r4, #16
 8006c28:	e004      	b.n	8006c34 <vQueueWaitForMessageRestricted+0x94>
				--cRxLock;
 8006c2a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c30:	b25d      	sxtb	r5, r3
 8006c32:	d00d      	beq.n	8006c50 <vQueueWaitForMessageRestricted+0xb0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c34:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c36:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c38:	b153      	cbz	r3, 8006c50 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c3a:	f000 fde1 	bl	8007800 <xTaskRemoveFromEventList>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d0f3      	beq.n	8006c2a <vQueueWaitForMessageRestricted+0x8a>
					vTaskMissedYield();
 8006c42:	f000 fe81 	bl	8007948 <vTaskMissedYield>
				--cRxLock;
 8006c46:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c48:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c4c:	b25d      	sxtb	r5, r3
 8006c4e:	d1f1      	bne.n	8006c34 <vQueueWaitForMessageRestricted+0x94>
		pxQueue->cRxLock = queueUNLOCKED;
 8006c50:	23ff      	movs	r3, #255	; 0xff
 8006c52:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8006c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006c5a:	f001 ba65 	b.w	8008128 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c5e:	462a      	mov	r2, r5
 8006c60:	4631      	mov	r1, r6
 8006c62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c66:	f000 fd7b 	bl	8007760 <vTaskPlaceOnEventListRestricted>
 8006c6a:	e7b2      	b.n	8006bd2 <vQueueWaitForMessageRestricted+0x32>

08006c6c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c70:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c72:	f001 fa37 	bl	80080e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c76:	4a34      	ldr	r2, [pc, #208]	; (8006d48 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8006c78:	4e34      	ldr	r6, [pc, #208]	; (8006d4c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8006c7a:	6813      	ldr	r3, [r2, #0]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c80:	6833      	ldr	r3, [r6, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d032      	beq.n	8006cec <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c86:	4d32      	ldr	r5, [pc, #200]	; (8006d50 <prvAddNewTaskToReadyList+0xe4>)
 8006c88:	682b      	ldr	r3, [r5, #0]
 8006c8a:	b33b      	cbz	r3, 8006cdc <prvAddNewTaskToReadyList+0x70>
 8006c8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006c8e:	4f31      	ldr	r7, [pc, #196]	; (8006d54 <prvAddNewTaskToReadyList+0xe8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c90:	4931      	ldr	r1, [pc, #196]	; (8006d58 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8006c92:	4a32      	ldr	r2, [pc, #200]	; (8006d5c <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8006c94:	f8d1 c000 	ldr.w	ip, [r1]
		uxTaskNumber++;
 8006c98:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006c9a:	4584      	cmp	ip, r0
		uxTaskNumber++;
 8006c9c:	f103 0301 	add.w	r3, r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8006ca0:	bf38      	it	cc
 8006ca2:	6008      	strcc	r0, [r1, #0]
 8006ca4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ca8:	64e3      	str	r3, [r4, #76]	; 0x4c
		prvAddTaskToReadyList( pxNewTCB );
 8006caa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006cae:	1d21      	adds	r1, r4, #4
		uxTaskNumber++;
 8006cb0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006cb2:	f7ff fb45 	bl	8006340 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cb6:	f001 fa37 	bl	8008128 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cba:	682b      	ldr	r3, [r5, #0]
 8006cbc:	b163      	cbz	r3, 8006cd8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cbe:	6832      	ldr	r2, [r6, #0]
 8006cc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006cc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d207      	bcs.n	8006cd8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cc8:	4b25      	ldr	r3, [pc, #148]	; (8006d60 <prvAddNewTaskToReadyList+0xf4>)
 8006cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cdc:	6833      	ldr	r3, [r6, #0]
 8006cde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	4f1c      	ldr	r7, [pc, #112]	; (8006d54 <prvAddNewTaskToReadyList+0xe8>)
 8006ce4:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8006ce6:	bf98      	it	ls
 8006ce8:	6034      	strls	r4, [r6, #0]
 8006cea:	e7d1      	b.n	8006c90 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8006cec:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cee:	6813      	ldr	r3, [r2, #0]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d003      	beq.n	8006cfc <prvAddNewTaskToReadyList+0x90>
 8006cf4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006cf6:	4f17      	ldr	r7, [pc, #92]	; (8006d54 <prvAddNewTaskToReadyList+0xe8>)
 8006cf8:	4d15      	ldr	r5, [pc, #84]	; (8006d50 <prvAddNewTaskToReadyList+0xe4>)
 8006cfa:	e7c9      	b.n	8006c90 <prvAddNewTaskToReadyList+0x24>
 8006cfc:	4f15      	ldr	r7, [pc, #84]	; (8006d54 <prvAddNewTaskToReadyList+0xe8>)
 8006cfe:	463d      	mov	r5, r7
 8006d00:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d04:	4628      	mov	r0, r5
 8006d06:	3514      	adds	r5, #20
 8006d08:	f7ff fb0a 	bl	8006320 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d0c:	45a8      	cmp	r8, r5
 8006d0e:	d1f9      	bne.n	8006d04 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d10:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8006d78 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 8006d14:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8006d7c <prvAddNewTaskToReadyList+0x110>
 8006d18:	4d0d      	ldr	r5, [pc, #52]	; (8006d50 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8006d1a:	4648      	mov	r0, r9
 8006d1c:	f7ff fb00 	bl	8006320 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d20:	4640      	mov	r0, r8
 8006d22:	f7ff fafd 	bl	8006320 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d26:	480f      	ldr	r0, [pc, #60]	; (8006d64 <prvAddNewTaskToReadyList+0xf8>)
 8006d28:	f7ff fafa 	bl	8006320 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d2c:	480e      	ldr	r0, [pc, #56]	; (8006d68 <prvAddNewTaskToReadyList+0xfc>)
 8006d2e:	f7ff faf7 	bl	8006320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d32:	480e      	ldr	r0, [pc, #56]	; (8006d6c <prvAddNewTaskToReadyList+0x100>)
 8006d34:	f7ff faf4 	bl	8006320 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d38:	4a0d      	ldr	r2, [pc, #52]	; (8006d70 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d3a:	4b0e      	ldr	r3, [pc, #56]	; (8006d74 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d3c:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006d42:	f8c3 8000 	str.w	r8, [r3]
}
 8006d46:	e7a3      	b.n	8006c90 <prvAddNewTaskToReadyList+0x24>
 8006d48:	200016a0 	.word	0x200016a0
 8006d4c:	20001230 	.word	0x20001230
 8006d50:	200016fc 	.word	0x200016fc
 8006d54:	2000123c 	.word	0x2000123c
 8006d58:	200016b0 	.word	0x200016b0
 8006d5c:	200016ac 	.word	0x200016ac
 8006d60:	e000ed04 	.word	0xe000ed04
 8006d64:	200016e8 	.word	0x200016e8
 8006d68:	20001714 	.word	0x20001714
 8006d6c:	20001700 	.word	0x20001700
 8006d70:	20001234 	.word	0x20001234
 8006d74:	20001238 	.word	0x20001238
 8006d78:	200016b4 	.word	0x200016b4
 8006d7c:	200016c8 	.word	0x200016c8

08006d80 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d86:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8006d8a:	465a      	mov	r2, fp
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d90:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006d92:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8006d94:	4699      	mov	r9, r3
 8006d96:	e9dd 6a0a 	ldrd	r6, sl, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d9a:	f001 fc5b 	bl	8008654 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006da0:	f1ab 0b04 	sub.w	fp, fp, #4
 8006da4:	449b      	add	fp, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006da6:	f02b 0b07 	bic.w	fp, fp, #7
	if( pcName != NULL )
 8006daa:	2d00      	cmp	r5, #0
 8006dac:	d038      	beq.n	8006e20 <prvInitialiseNewTask.isra.0+0xa0>
 8006dae:	1e6a      	subs	r2, r5, #1
 8006db0:	f105 0117 	add.w	r1, r5, #23
 8006db4:	f104 0533 	add.w	r5, r4, #51	; 0x33
 8006db8:	e001      	b.n	8006dbe <prvInitialiseNewTask.isra.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dba:	428a      	cmp	r2, r1
 8006dbc:	d006      	beq.n	8006dcc <prvInitialiseNewTask.isra.0+0x4c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dbe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006dc2:	f805 3f01 	strb.w	r3, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8006dc6:	7817      	ldrb	r7, [r2, #0]
 8006dc8:	2f00      	cmp	r7, #0
 8006dca:	d1f6      	bne.n	8006dba <prvInitialiseNewTask.isra.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dd2:	2e37      	cmp	r6, #55	; 0x37
 8006dd4:	bf28      	it	cs
 8006dd6:	2637      	movcs	r6, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8006dd8:	2500      	movs	r5, #0
 8006dda:	e9c4 6515 	strd	r6, r5, [r4, #84]	; 0x54
	pxNewTCB->uxPriority = uxPriority;
 8006dde:	62e6      	str	r6, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006de0:	1d20      	adds	r0, r4, #4
 8006de2:	f7ff faa9 	bl	8006338 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de6:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dea:	f104 0018 	add.w	r0, r4, #24
 8006dee:	f7ff faa3 	bl	8006338 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006df2:	6665      	str	r5, [r4, #100]	; 0x64
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006df4:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df8:	61a6      	str	r6, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dfa:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8006dfe:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e02:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e04:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e06:	464a      	mov	r2, r9
 8006e08:	4641      	mov	r1, r8
 8006e0a:	4658      	mov	r0, fp
 8006e0c:	f001 f93c 	bl	8008088 <pxPortInitialiseStack>
 8006e10:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8006e12:	f1ba 0f00 	cmp.w	sl, #0
 8006e16:	d001      	beq.n	8006e1c <prvInitialiseNewTask.isra.0+0x9c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e18:	f8ca 4000 	str.w	r4, [sl]
}
 8006e1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e20:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8006e24:	e7d5      	b.n	8006dd2 <prvInitialiseNewTask.isra.0+0x52>
 8006e26:	bf00      	nop

08006e28 <prvIdleTask>:
{
 8006e28:	4d23      	ldr	r5, [pc, #140]	; (8006eb8 <prvIdleTask+0x90>)
 8006e2a:	f8df a094 	ldr.w	sl, [pc, #148]	; 8006ec0 <prvIdleTask+0x98>
 8006e2e:	4e23      	ldr	r6, [pc, #140]	; (8006ebc <prvIdleTask+0x94>)
 8006e30:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006ec4 <prvIdleTask+0x9c>
				taskYIELD();
 8006e34:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8006ec8 <prvIdleTask+0xa0>
{
 8006e38:	b580      	push	{r7, lr}
				taskYIELD();
 8006e3a:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e3e:	682b      	ldr	r3, [r5, #0]
 8006e40:	b343      	cbz	r3, 8006e94 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 8006e42:	f001 f94f 	bl	80080e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e46:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006e4a:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e4c:	1d20      	adds	r0, r4, #4
 8006e4e:	f7ff fa9f 	bl	8006390 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e52:	6833      	ldr	r3, [r6, #0]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 8006e5e:	f001 f963 	bl	8008128 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e62:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8006e66:	b163      	cbz	r3, 8006e82 <prvIdleTask+0x5a>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d020      	beq.n	8006eae <prvIdleTask+0x86>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d0e6      	beq.n	8006e3e <prvIdleTask+0x16>
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	e7fe      	b.n	8006e80 <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 8006e82:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006e84:	f001 fb50 	bl	8008528 <vPortFree>
				vPortFree( pxTCB );
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f001 fb4d 	bl	8008528 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1d6      	bne.n	8006e42 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e94:	f8d9 3000 	ldr.w	r3, [r9]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d905      	bls.n	8006ea8 <prvIdleTask+0x80>
				taskYIELD();
 8006e9c:	f8c8 7000 	str.w	r7, [r8]
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8006ea8:	f7fa fa62 	bl	8001370 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006eac:	e7c7      	b.n	8006e3e <prvIdleTask+0x16>
				vPortFree( pxTCB );
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f001 fb3a 	bl	8008528 <vPortFree>
 8006eb4:	e7c3      	b.n	8006e3e <prvIdleTask+0x16>
 8006eb6:	bf00      	nop
 8006eb8:	200016a4 	.word	0x200016a4
 8006ebc:	200016a0 	.word	0x200016a0
 8006ec0:	20001714 	.word	0x20001714
 8006ec4:	2000123c 	.word	0x2000123c
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8006ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ed0:	4b47      	ldr	r3, [pc, #284]	; (8006ff0 <xTaskIncrementTick.part.0+0x124>)
 8006ed2:	681e      	ldr	r6, [r3, #0]
 8006ed4:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 8006ed6:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8006ed8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	d041      	beq.n	8006f62 <xTaskIncrementTick.part.0+0x96>
 8006ede:	4d45      	ldr	r5, [pc, #276]	; (8006ff4 <xTaskIncrementTick.part.0+0x128>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	429e      	cmp	r6, r3
 8006ee4:	d34a      	bcc.n	8006f7c <xTaskIncrementTick.part.0+0xb0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ee6:	f8df a110 	ldr.w	sl, [pc, #272]	; 8006ff8 <xTaskIncrementTick.part.0+0x12c>
 8006eea:	f8da 3000 	ldr.w	r3, [sl]
 8006eee:	681c      	ldr	r4, [r3, #0]
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	d074      	beq.n	8006fde <xTaskIncrementTick.part.0+0x112>
 8006ef4:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8007008 <xTaskIncrementTick.part.0+0x13c>
 8006ef8:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800700c <xTaskIncrementTick.part.0+0x140>
					prvAddTaskToReadyList( pxTCB );
 8006efc:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007010 <xTaskIncrementTick.part.0+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 8006f00:	2400      	movs	r4, #0
 8006f02:	e023      	b.n	8006f4c <xTaskIncrementTick.part.0+0x80>
 8006f04:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f06:	f7ff fa43 	bl	8006390 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f0e:	f107 0018 	add.w	r0, r7, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f12:	b113      	cbz	r3, 8006f1a <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f14:	f7ff fa3c 	bl	8006390 <uxListRemove>
 8006f18:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	f8db 2000 	ldr.w	r2, [fp]
 8006f20:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8006f24:	4293      	cmp	r3, r2
 8006f26:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006f2a:	bf88      	it	hi
 8006f2c:	f8cb 3000 	strhi.w	r3, [fp]
 8006f30:	f7ff fa06 	bl	8006340 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f34:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f38:	f8da 3000 	ldr.w	r3, [sl]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f40:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8006f42:	4291      	cmp	r1, r2
 8006f44:	bf28      	it	cs
 8006f46:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d04c      	beq.n	8006fe6 <xTaskIncrementTick.part.0+0x11a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f4c:	f8da 3000 	ldr.w	r3, [sl]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f54:	687b      	ldr	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f56:	1d39      	adds	r1, r7, #4
					if( xConstTickCount < xItemValue )
 8006f58:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f5a:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8006f5c:	d2d2      	bcs.n	8006f04 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8006f5e:	602b      	str	r3, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f60:	e011      	b.n	8006f86 <xTaskIncrementTick.part.0+0xba>
			taskSWITCH_DELAYED_LISTS();
 8006f62:	4b25      	ldr	r3, [pc, #148]	; (8006ff8 <xTaskIncrementTick.part.0+0x12c>)
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	b30a      	cbz	r2, 8006fae <xTaskIncrementTick.part.0+0xe2>
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	e7fe      	b.n	8006f7a <xTaskIncrementTick.part.0+0xae>
 8006f7c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8007008 <xTaskIncrementTick.part.0+0x13c>
 8006f80:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800700c <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 8006f84:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f86:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 8006f8a:	491c      	ldr	r1, [pc, #112]	; (8006ffc <xTaskIncrementTick.part.0+0x130>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 8006f98:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8006f9a:	2a02      	cmp	r2, #2
 8006f9c:	bf28      	it	cs
 8006f9e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8006fa0:	2b00      	cmp	r3, #0
}
 8006fa2:	bf0c      	ite	eq
 8006fa4:	4620      	moveq	r0, r4
 8006fa6:	2001      	movne	r0, #1
 8006fa8:	b003      	add	sp, #12
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006fae:	4a14      	ldr	r2, [pc, #80]	; (8007000 <xTaskIncrementTick.part.0+0x134>)
 8006fb0:	6818      	ldr	r0, [r3, #0]
 8006fb2:	4914      	ldr	r1, [pc, #80]	; (8007004 <xTaskIncrementTick.part.0+0x138>)
 8006fb4:	6814      	ldr	r4, [r2, #0]
 8006fb6:	601c      	str	r4, [r3, #0]
 8006fb8:	6010      	str	r0, [r2, #0]
 8006fba:	680a      	ldr	r2, [r1, #0]
 8006fbc:	3201      	adds	r2, #1
 8006fbe:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	6812      	ldr	r2, [r2, #0]
 8006fc4:	b922      	cbnz	r2, 8006fd0 <xTaskIncrementTick.part.0+0x104>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fc6:	4d0b      	ldr	r5, [pc, #44]	; (8006ff4 <xTaskIncrementTick.part.0+0x128>)
 8006fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fcc:	602b      	str	r3, [r5, #0]
 8006fce:	e787      	b.n	8006ee0 <xTaskIncrementTick.part.0+0x14>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd0:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fd2:	4d08      	ldr	r5, [pc, #32]	; (8006ff4 <xTaskIncrementTick.part.0+0x128>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	602b      	str	r3, [r5, #0]
	}
}
 8006fdc:	e780      	b.n	8006ee0 <xTaskIncrementTick.part.0+0x14>
 8006fde:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8007008 <xTaskIncrementTick.part.0+0x13c>
 8006fe2:	f8df 9028 	ldr.w	r9, [pc, #40]	; 800700c <xTaskIncrementTick.part.0+0x140>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fea:	602b      	str	r3, [r5, #0]
					break;
 8006fec:	e7cb      	b.n	8006f86 <xTaskIncrementTick.part.0+0xba>
 8006fee:	bf00      	nop
 8006ff0:	20001728 	.word	0x20001728
 8006ff4:	200016dc 	.word	0x200016dc
 8006ff8:	20001234 	.word	0x20001234
 8006ffc:	2000172c 	.word	0x2000172c
 8007000:	20001238 	.word	0x20001238
 8007004:	200016e0 	.word	0x200016e0
 8007008:	2000123c 	.word	0x2000123c
 800700c:	20001230 	.word	0x20001230
 8007010:	200016b0 	.word	0x200016b0

08007014 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8007018:	4d40      	ldr	r5, [pc, #256]	; (800711c <xTaskResumeAll.part.0+0x108>)
BaseType_t xTaskResumeAll( void )
 800701a:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800701c:	f001 f862 	bl	80080e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	3b01      	subs	r3, #1
 8007024:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007026:	682b      	ldr	r3, [r5, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d15f      	bne.n	80070ec <xTaskResumeAll.part.0+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800702c:	4b3c      	ldr	r3, [pc, #240]	; (8007120 <xTaskResumeAll.part.0+0x10c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d05b      	beq.n	80070ec <xTaskResumeAll.part.0+0xd8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007034:	4e3b      	ldr	r6, [pc, #236]	; (8007124 <xTaskResumeAll.part.0+0x110>)
 8007036:	6833      	ldr	r3, [r6, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d06c      	beq.n	8007116 <xTaskResumeAll.part.0+0x102>
 800703c:	4f3a      	ldr	r7, [pc, #232]	; (8007128 <xTaskResumeAll.part.0+0x114>)
 800703e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800713c <xTaskResumeAll.part.0+0x128>
 8007042:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8007140 <xTaskResumeAll.part.0+0x12c>
 8007046:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8007144 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704a:	68f3      	ldr	r3, [r6, #12]
 800704c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800704e:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007052:	f104 0018 	add.w	r0, r4, #24
 8007056:	f7ff f99b 	bl	8006390 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800705a:	4658      	mov	r0, fp
 800705c:	f7ff f998 	bl	8006390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007060:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8007068:	4293      	cmp	r3, r2
 800706a:	4659      	mov	r1, fp
 800706c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007070:	bf88      	it	hi
 8007072:	603b      	strhi	r3, [r7, #0]
 8007074:	f7ff f964 	bl	8006340 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007078:	f8d8 3000 	ldr.w	r3, [r8]
 800707c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	429a      	cmp	r2, r3
 8007082:	d33b      	bcc.n	80070fc <xTaskResumeAll.part.0+0xe8>
						xYieldPending = pdTRUE;
 8007084:	2301      	movs	r3, #1
 8007086:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800708a:	6833      	ldr	r3, [r6, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1dc      	bne.n	800704a <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007090:	4b26      	ldr	r3, [pc, #152]	; (800712c <xTaskResumeAll.part.0+0x118>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	2a00      	cmp	r2, #0
 8007098:	d038      	beq.n	800710c <xTaskResumeAll.part.0+0xf8>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800709c:	4b24      	ldr	r3, [pc, #144]	; (8007130 <xTaskResumeAll.part.0+0x11c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070a0:	68d2      	ldr	r2, [r2, #12]
 80070a2:	6852      	ldr	r2, [r2, #4]
 80070a4:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070a6:	4e23      	ldr	r6, [pc, #140]	; (8007134 <xTaskResumeAll.part.0+0x120>)
 80070a8:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80070aa:	b194      	cbz	r4, 80070d2 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 80070ac:	2701      	movs	r7, #1
 80070ae:	e006      	b.n	80070be <xTaskResumeAll.part.0+0xaa>
 80070b0:	f7ff ff0c 	bl	8006ecc <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 80070b4:	b108      	cbz	r0, 80070ba <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 80070b6:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070ba:	3c01      	subs	r4, #1
 80070bc:	d008      	beq.n	80070d0 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070be:	682b      	ldr	r3, [r5, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0f5      	beq.n	80070b0 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 80070c4:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070c6:	3c01      	subs	r4, #1
		++xPendedTicks;
 80070c8:	f103 0301 	add.w	r3, r3, #1
 80070cc:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070ce:	d1f6      	bne.n	80070be <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 80070d0:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80070d2:	f8da 3000 	ldr.w	r3, [sl]
 80070d6:	b14b      	cbz	r3, 80070ec <xTaskResumeAll.part.0+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <xTaskResumeAll.part.0+0x124>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80070e8:	2001      	movs	r0, #1
 80070ea:	e000      	b.n	80070ee <xTaskResumeAll.part.0+0xda>
BaseType_t xAlreadyYielded = pdFALSE;
 80070ec:	2000      	movs	r0, #0
 80070ee:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80070f0:	f001 f81a 	bl	8008128 <vPortExitCritical>
}
 80070f4:	9801      	ldr	r0, [sp, #4]
 80070f6:	b003      	add	sp, #12
 80070f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070fc:	6833      	ldr	r3, [r6, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1a3      	bne.n	800704a <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007102:	4b0a      	ldr	r3, [pc, #40]	; (800712c <xTaskResumeAll.part.0+0x118>)
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	2a00      	cmp	r2, #0
 800710a:	d1c6      	bne.n	800709a <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 800710c:	4b08      	ldr	r3, [pc, #32]	; (8007130 <xTaskResumeAll.part.0+0x11c>)
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	e7c7      	b.n	80070a6 <xTaskResumeAll.part.0+0x92>
 8007116:	f8df a02c 	ldr.w	sl, [pc, #44]	; 8007144 <xTaskResumeAll.part.0+0x130>
 800711a:	e7c4      	b.n	80070a6 <xTaskResumeAll.part.0+0x92>
 800711c:	200016a8 	.word	0x200016a8
 8007120:	200016a0 	.word	0x200016a0
 8007124:	200016e8 	.word	0x200016e8
 8007128:	200016b0 	.word	0x200016b0
 800712c:	20001234 	.word	0x20001234
 8007130:	200016dc 	.word	0x200016dc
 8007134:	200016e4 	.word	0x200016e4
 8007138:	e000ed04 	.word	0xe000ed04
 800713c:	2000123c 	.word	0x2000123c
 8007140:	20001230 	.word	0x20001230
 8007144:	2000172c 	.word	0x2000172c

08007148 <xTaskCreateStatic>:
	{
 8007148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714a:	b087      	sub	sp, #28
 800714c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8007150:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 8007152:	b1bd      	cbz	r5, 8007184 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 8007154:	b16c      	cbz	r4, 8007172 <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007156:	276c      	movs	r7, #108	; 0x6c
 8007158:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800715a:	9f05      	ldr	r7, [sp, #20]
 800715c:	2f6c      	cmp	r7, #108	; 0x6c
 800715e:	d01a      	beq.n	8007196 <xTaskCreateStatic+0x4e>
 8007160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	e7fe      	b.n	8007170 <xTaskCreateStatic+0x28>
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8007182:	e7fe      	b.n	8007182 <xTaskCreateStatic+0x3a>
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8007194:	e7fe      	b.n	8007194 <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007196:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007198:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800719a:	ad04      	add	r5, sp, #16
 800719c:	9402      	str	r4, [sp, #8]
 800719e:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071a0:	f884 7069 	strb.w	r7, [r4, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071a4:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071a6:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071a8:	f7ff fdea 	bl	8006d80 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071ac:	4620      	mov	r0, r4
 80071ae:	f7ff fd5d 	bl	8006c6c <prvAddNewTaskToReadyList>
	}
 80071b2:	9804      	ldr	r0, [sp, #16]
 80071b4:	b007      	add	sp, #28
 80071b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071b8 <xTaskCreate>:
	{
 80071b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071bc:	4607      	mov	r7, r0
 80071be:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071c0:	0090      	lsls	r0, r2, #2
	{
 80071c2:	4615      	mov	r5, r2
 80071c4:	4688      	mov	r8, r1
 80071c6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071c8:	f001 f8f2 	bl	80083b0 <pvPortMalloc>
			if( pxStack != NULL )
 80071cc:	b1e0      	cbz	r0, 8007208 <xTaskCreate+0x50>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071ce:	4604      	mov	r4, r0
 80071d0:	206c      	movs	r0, #108	; 0x6c
 80071d2:	f001 f8ed 	bl	80083b0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80071d6:	4606      	mov	r6, r0
 80071d8:	b1d8      	cbz	r0, 8007212 <xTaskCreate+0x5a>
					pxNewTCB->pxStack = pxStack;
 80071da:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071dc:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071e2:	f886 c069 	strb.w	ip, [r6, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071e6:	9401      	str	r4, [sp, #4]
 80071e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80071ea:	9602      	str	r6, [sp, #8]
 80071ec:	464b      	mov	r3, r9
 80071ee:	462a      	mov	r2, r5
 80071f0:	4641      	mov	r1, r8
 80071f2:	4638      	mov	r0, r7
 80071f4:	9400      	str	r4, [sp, #0]
 80071f6:	f7ff fdc3 	bl	8006d80 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071fa:	4630      	mov	r0, r6
 80071fc:	f7ff fd36 	bl	8006c6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007200:	2001      	movs	r0, #1
	}
 8007202:	b005      	add	sp, #20
 8007204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007208:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800720c:	b005      	add	sp, #20
 800720e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8007212:	4620      	mov	r0, r4
 8007214:	f001 f988 	bl	8008528 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	e7f1      	b.n	8007202 <xTaskCreate+0x4a>
 800721e:	bf00      	nop

08007220 <vTaskDelayUntil>:
		configASSERT( pxPreviousWakeTime );
 8007220:	b338      	cbz	r0, 8007272 <vTaskDelayUntil+0x52>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007222:	b941      	cbnz	r1, 8007236 <vTaskDelayUntil+0x16>
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	e7fe      	b.n	8007234 <vTaskDelayUntil+0x14>
	{
 8007236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		configASSERT( uxSchedulerSuspended == 0 );
 800723a:	4f31      	ldr	r7, [pc, #196]	; (8007300 <vTaskDelayUntil+0xe0>)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	bb0b      	cbnz	r3, 8007284 <vTaskDelayUntil+0x64>
	++uxSchedulerSuspended;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	603b      	str	r3, [r7, #0]
			const TickType_t xConstTickCount = xTickCount;
 8007246:	4d2f      	ldr	r5, [pc, #188]	; (8007304 <vTaskDelayUntil+0xe4>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007248:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 800724a:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800724c:	1854      	adds	r4, r2, r1
 800724e:	bf2c      	ite	cs
 8007250:	2101      	movcs	r1, #1
 8007252:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8007254:	429a      	cmp	r2, r3
			*pxPreviousWakeTime = xTimeToWake;
 8007256:	6004      	str	r4, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8007258:	d92a      	bls.n	80072b0 <vTaskDelayUntil+0x90>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800725a:	bb51      	cbnz	r1, 80072b2 <vTaskDelayUntil+0x92>
	configASSERT( uxSchedulerSuspended );
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	b9d3      	cbnz	r3, 8007296 <vTaskDelayUntil+0x76>
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	e7fe      	b.n	8007270 <vTaskDelayUntil+0x50>
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8007282:	e7fe      	b.n	8007282 <vTaskDelayUntil+0x62>
 8007284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
		configASSERT( uxSchedulerSuspended == 0 );
 8007294:	e7fe      	b.n	8007294 <vTaskDelayUntil+0x74>
 8007296:	f7ff febd 	bl	8007014 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800729a:	b938      	cbnz	r0, 80072ac <vTaskDelayUntil+0x8c>
			portYIELD_WITHIN_API();
 800729c:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <vTaskDelayUntil+0xe8>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
	}
 80072ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80072b0:	b909      	cbnz	r1, 80072b6 <vTaskDelayUntil+0x96>
 80072b2:	42a3      	cmp	r3, r4
 80072b4:	d2d2      	bcs.n	800725c <vTaskDelayUntil+0x3c>
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80072b6:	4e15      	ldr	r6, [pc, #84]	; (800730c <vTaskDelayUntil+0xec>)
const TickType_t xConstTickCount = xTickCount;
 80072b8:	f8d5 8000 	ldr.w	r8, [r5]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80072bc:	6832      	ldr	r2, [r6, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072be:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80072c0:	2100      	movs	r1, #0
 80072c2:	eba8 0503 	sub.w	r5, r8, r3
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072c6:	3004      	adds	r0, #4
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80072c8:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072cc:	f7ff f860 	bl	8006390 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072d0:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072d2:	6833      	ldr	r3, [r6, #0]

			if( xTimeToWake < xConstTickCount )
 80072d4:	45a0      	cmp	r8, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072d6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072d8:	d906      	bls.n	80072e8 <vTaskDelayUntil+0xc8>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072da:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <vTaskDelayUntil+0xf0>)
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	6831      	ldr	r1, [r6, #0]
 80072e0:	3104      	adds	r1, #4
 80072e2:	f7ff f83d 	bl	8006360 <vListInsert>
 80072e6:	e7b9      	b.n	800725c <vTaskDelayUntil+0x3c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072e8:	4b0a      	ldr	r3, [pc, #40]	; (8007314 <vTaskDelayUntil+0xf4>)
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	6831      	ldr	r1, [r6, #0]
 80072ee:	3104      	adds	r1, #4
 80072f0:	f7ff f836 	bl	8006360 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80072f4:	4b08      	ldr	r3, [pc, #32]	; (8007318 <vTaskDelayUntil+0xf8>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80072fa:	bf38      	it	cc
 80072fc:	601c      	strcc	r4, [r3, #0]
 80072fe:	e7ad      	b.n	800725c <vTaskDelayUntil+0x3c>
 8007300:	200016a8 	.word	0x200016a8
 8007304:	20001728 	.word	0x20001728
 8007308:	e000ed04 	.word	0xe000ed04
 800730c:	20001230 	.word	0x20001230
 8007310:	20001238 	.word	0x20001238
 8007314:	20001234 	.word	0x20001234
 8007318:	200016dc 	.word	0x200016dc

0800731c <vTaskResume>:
		configASSERT( xTaskToResume );
 800731c:	b198      	cbz	r0, 8007346 <vTaskResume+0x2a>
	{
 800731e:	b530      	push	{r4, r5, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007320:	4d21      	ldr	r5, [pc, #132]	; (80073a8 <vTaskResume+0x8c>)
 8007322:	682b      	ldr	r3, [r5, #0]
 8007324:	4283      	cmp	r3, r0
	{
 8007326:	b083      	sub	sp, #12
 8007328:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800732a:	d00a      	beq.n	8007342 <vTaskResume+0x26>
			taskENTER_CRITICAL();
 800732c:	f000 feda 	bl	80080e4 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007330:	4b1e      	ldr	r3, [pc, #120]	; (80073ac <vTaskResume+0x90>)
 8007332:	6962      	ldr	r2, [r4, #20]
 8007334:	429a      	cmp	r2, r3
 8007336:	d00f      	beq.n	8007358 <vTaskResume+0x3c>
	}
 8007338:	b003      	add	sp, #12
 800733a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			taskEXIT_CRITICAL();
 800733e:	f000 bef3 	b.w	8008128 <vPortExitCritical>
	}
 8007342:	b003      	add	sp, #12
 8007344:	bd30      	pop	{r4, r5, pc}
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8007356:	e7fe      	b.n	8007356 <vTaskResume+0x3a>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007358:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800735a:	4a15      	ldr	r2, [pc, #84]	; (80073b0 <vTaskResume+0x94>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d0eb      	beq.n	8007338 <vTaskResume+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e9      	bne.n	8007338 <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007364:	1d21      	adds	r1, r4, #4
 8007366:	4608      	mov	r0, r1
 8007368:	9101      	str	r1, [sp, #4]
 800736a:	f7ff f811 	bl	8006390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800736e:	4a11      	ldr	r2, [pc, #68]	; (80073b4 <vTaskResume+0x98>)
 8007370:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007372:	6810      	ldr	r0, [r2, #0]
 8007374:	9901      	ldr	r1, [sp, #4]
 8007376:	4283      	cmp	r3, r0
 8007378:	480f      	ldr	r0, [pc, #60]	; (80073b8 <vTaskResume+0x9c>)
 800737a:	bf88      	it	hi
 800737c:	6013      	strhi	r3, [r2, #0]
 800737e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007382:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007386:	f7fe ffdb 	bl	8006340 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	429a      	cmp	r2, r3
 8007392:	d3d1      	bcc.n	8007338 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 8007394:	4b09      	ldr	r3, [pc, #36]	; (80073bc <vTaskResume+0xa0>)
 8007396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	e7c8      	b.n	8007338 <vTaskResume+0x1c>
 80073a6:	bf00      	nop
 80073a8:	20001230 	.word	0x20001230
 80073ac:	20001700 	.word	0x20001700
 80073b0:	200016e8 	.word	0x200016e8
 80073b4:	200016b0 	.word	0x200016b0
 80073b8:	2000123c 	.word	0x2000123c
 80073bc:	e000ed04 	.word	0xe000ed04

080073c0 <vTaskStartScheduler>:
{
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073c4:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073c6:	4668      	mov	r0, sp
 80073c8:	aa02      	add	r2, sp, #8
 80073ca:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073cc:	e9cd 3300 	strd	r3, r3, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073d0:	f7fe ff88 	bl	80062e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073d4:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 80073d6:	b1c8      	cbz	r0, 800740c <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073d8:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 80073da:	b174      	cbz	r4, 80073fa <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80073dc:	236c      	movs	r3, #108	; 0x6c
 80073de:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073e0:	9b03      	ldr	r3, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073e2:	9d02      	ldr	r5, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073e4:	2b6c      	cmp	r3, #108	; 0x6c
 80073e6:	d01a      	beq.n	800741e <vTaskStartScheduler+0x5e>
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	e7fe      	b.n	80073f8 <vTaskStartScheduler+0x38>
 80073fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800740a:	e7fe      	b.n	800740a <vTaskStartScheduler+0x4a>
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800741c:	e7fe      	b.n	800741c <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800741e:	00ad      	lsls	r5, r5, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007420:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007422:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007424:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007428:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800742a:	6320      	str	r0, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800742c:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800742e:	f001 f911 	bl	8008654 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007432:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007434:	4a2c      	ldr	r2, [pc, #176]	; (80074e8 <vTaskStartScheduler+0x128>)
 8007436:	3d04      	subs	r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007438:	4621      	mov	r1, r4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800743a:	441d      	add	r5, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800743c:	2349      	movs	r3, #73	; 0x49
 800743e:	f801 3f34 	strb.w	r3, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007442:	f025 0607 	bic.w	r6, r5, #7
			if( pcName[ x ] == ( char ) 0x00 )
 8007446:	f102 0017 	add.w	r0, r2, #23
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800744a:	4290      	cmp	r0, r2
 800744c:	d005      	beq.n	800745a <vTaskStartScheduler+0x9a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800744e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007452:	f801 3f01 	strb.w	r3, [r1, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1f7      	bne.n	800744a <vTaskStartScheduler+0x8a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800745a:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800745c:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800745e:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007462:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
	pxNewTCB->uxPriority = uxPriority;
 8007466:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007468:	f7fe ff66 	bl	8006338 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800746c:	f104 0018 	add.w	r0, r4, #24
 8007470:	f7fe ff62 	bl	8006338 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007474:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007476:	491d      	ldr	r1, [pc, #116]	; (80074ec <vTaskStartScheduler+0x12c>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007478:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800747a:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 800747c:	6665      	str	r5, [r4, #100]	; 0x64
		pxNewTCB->ulRunTimeCounter = 0UL;
 800747e:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007482:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8007486:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800748a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800748c:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800748e:	4630      	mov	r0, r6
 8007490:	f000 fdfa 	bl	8008088 <pxPortInitialiseStack>
 8007494:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8007496:	4620      	mov	r0, r4
 8007498:	f7ff fbe8 	bl	8006c6c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 800749c:	f000 fd58 	bl	8007f50 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80074a0:	2801      	cmp	r0, #1
 80074a2:	d003      	beq.n	80074ac <vTaskStartScheduler+0xec>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074a4:	3001      	adds	r0, #1
 80074a6:	d016      	beq.n	80074d6 <vTaskStartScheduler+0x116>
}
 80074a8:	b004      	add	sp, #16
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80074bc:	490c      	ldr	r1, [pc, #48]	; (80074f0 <vTaskStartScheduler+0x130>)
		xSchedulerRunning = pdTRUE;
 80074be:	4a0d      	ldr	r2, [pc, #52]	; (80074f4 <vTaskStartScheduler+0x134>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074c0:	4b0d      	ldr	r3, [pc, #52]	; (80074f8 <vTaskStartScheduler+0x138>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80074c2:	f04f 34ff 	mov.w	r4, #4294967295
 80074c6:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80074c8:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074ca:	601d      	str	r5, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80074cc:	f7f9 ff4c 	bl	8001368 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 80074d0:	f000 fea4 	bl	800821c <xPortStartScheduler>
 80074d4:	e7e8      	b.n	80074a8 <vTaskStartScheduler+0xe8>
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074e6:	e7fe      	b.n	80074e6 <vTaskStartScheduler+0x126>
 80074e8:	08009d34 	.word	0x08009d34
 80074ec:	08006e29 	.word	0x08006e29
 80074f0:	200016dc 	.word	0x200016dc
 80074f4:	200016fc 	.word	0x200016fc
 80074f8:	20001728 	.word	0x20001728

080074fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80074fc:	4a02      	ldr	r2, [pc, #8]	; (8007508 <vTaskSuspendAll+0xc>)
 80074fe:	6813      	ldr	r3, [r2, #0]
 8007500:	3301      	adds	r3, #1
 8007502:	6013      	str	r3, [r2, #0]
}
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	200016a8 	.word	0x200016a8

0800750c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800750c:	4b06      	ldr	r3, [pc, #24]	; (8007528 <xTaskResumeAll+0x1c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	b943      	cbnz	r3, 8007524 <xTaskResumeAll+0x18>
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	e7fe      	b.n	8007522 <xTaskResumeAll+0x16>
 8007524:	f7ff bd76 	b.w	8007014 <xTaskResumeAll.part.0>
 8007528:	200016a8 	.word	0x200016a8

0800752c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800752c:	4b01      	ldr	r3, [pc, #4]	; (8007534 <xTaskGetTickCount+0x8>)
 800752e:	6818      	ldr	r0, [r3, #0]
}
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20001728 	.word	0x20001728

08007538 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007538:	4b05      	ldr	r3, [pc, #20]	; (8007550 <xTaskIncrementTick+0x18>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	b90b      	cbnz	r3, 8007542 <xTaskIncrementTick+0xa>
 800753e:	f7ff bcc5 	b.w	8006ecc <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8007542:	4a04      	ldr	r2, [pc, #16]	; (8007554 <xTaskIncrementTick+0x1c>)
 8007544:	6813      	ldr	r3, [r2, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	6013      	str	r3, [r2, #0]
}
 800754a:	2000      	movs	r0, #0
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	200016a8 	.word	0x200016a8
 8007554:	200016e4 	.word	0x200016e4

08007558 <vTaskSwitchContext>:
{
 8007558:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800755a:	4b20      	ldr	r3, [pc, #128]	; (80075dc <vTaskSwitchContext+0x84>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	b11b      	cbz	r3, 8007568 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007560:	4b1f      	ldr	r3, [pc, #124]	; (80075e0 <vTaskSwitchContext+0x88>)
 8007562:	2201      	movs	r2, #1
 8007564:	601a      	str	r2, [r3, #0]
}
 8007566:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 8007568:	4a1d      	ldr	r2, [pc, #116]	; (80075e0 <vTaskSwitchContext+0x88>)
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800756a:	4c1e      	ldr	r4, [pc, #120]	; (80075e4 <vTaskSwitchContext+0x8c>)
		xYieldPending = pdFALSE;
 800756c:	6013      	str	r3, [r2, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800756e:	f7f9 fefd 	bl	800136c <getRunTimeCounterValue>
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007572:	491d      	ldr	r1, [pc, #116]	; (80075e8 <vTaskSwitchContext+0x90>)
 8007574:	680d      	ldr	r5, [r1, #0]
 8007576:	42a8      	cmp	r0, r5
 8007578:	d904      	bls.n	8007584 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800757e:	1b5b      	subs	r3, r3, r5
 8007580:	4403      	add	r3, r0
 8007582:	6613      	str	r3, [r2, #96]	; 0x60
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007584:	4d19      	ldr	r5, [pc, #100]	; (80075ec <vTaskSwitchContext+0x94>)
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007586:	6008      	str	r0, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	4a19      	ldr	r2, [pc, #100]	; (80075f0 <vTaskSwitchContext+0x98>)
 800758c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8007590:	0080      	lsls	r0, r0, #2
 8007592:	0099      	lsls	r1, r3, #2
 8007594:	5810      	ldr	r0, [r2, r0]
 8007596:	b940      	cbnz	r0, 80075aa <vTaskSwitchContext+0x52>
 8007598:	b1bb      	cbz	r3, 80075ca <vTaskSwitchContext+0x72>
 800759a:	3b01      	subs	r3, #1
 800759c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80075a0:	0099      	lsls	r1, r3, #2
 80075a2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d0f6      	beq.n	8007598 <vTaskSwitchContext+0x40>
 80075aa:	4419      	add	r1, r3
 80075ac:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80075b0:	4602      	mov	r2, r0
 80075b2:	6841      	ldr	r1, [r0, #4]
 80075b4:	6849      	ldr	r1, [r1, #4]
 80075b6:	6041      	str	r1, [r0, #4]
 80075b8:	3208      	adds	r2, #8
 80075ba:	4291      	cmp	r1, r2
 80075bc:	bf04      	itt	eq
 80075be:	6849      	ldreq	r1, [r1, #4]
 80075c0:	6041      	streq	r1, [r0, #4]
 80075c2:	68ca      	ldr	r2, [r1, #12]
 80075c4:	6022      	str	r2, [r4, #0]
 80075c6:	602b      	str	r3, [r5, #0]
}
 80075c8:	bd38      	pop	{r3, r4, r5, pc}
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075da:	e7fe      	b.n	80075da <vTaskSwitchContext+0x82>
 80075dc:	200016a8 	.word	0x200016a8
 80075e0:	2000172c 	.word	0x2000172c
 80075e4:	20001230 	.word	0x20001230
 80075e8:	2000169c 	.word	0x2000169c
 80075ec:	200016b0 	.word	0x200016b0
 80075f0:	2000123c 	.word	0x2000123c

080075f4 <vTaskSuspend>:
	{
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80075f8:	4d2d      	ldr	r5, [pc, #180]	; (80076b0 <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 80075fa:	f000 fd73 	bl	80080e4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80075fe:	2c00      	cmp	r4, #0
 8007600:	d03a      	beq.n	8007678 <vTaskSuspend+0x84>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007602:	1d26      	adds	r6, r4, #4
 8007604:	4630      	mov	r0, r6
 8007606:	f7fe fec3 	bl	8006390 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800760a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800760c:	b11b      	cbz	r3, 8007616 <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800760e:	f104 0018 	add.w	r0, r4, #24
 8007612:	f7fe febd 	bl	8006390 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007616:	4631      	mov	r1, r6
 8007618:	4826      	ldr	r0, [pc, #152]	; (80076b4 <vTaskSuspend+0xc0>)
		if( xSchedulerRunning != pdFALSE )
 800761a:	4e27      	ldr	r6, [pc, #156]	; (80076b8 <vTaskSuspend+0xc4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800761c:	f7fe fe90 	bl	8006340 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007620:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8007624:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007626:	bf04      	itt	eq
 8007628:	2300      	moveq	r3, #0
 800762a:	f884 3068 	strbeq.w	r3, [r4, #104]	; 0x68
		taskEXIT_CRITICAL();
 800762e:	f000 fd7b 	bl	8008128 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8007632:	6833      	ldr	r3, [r6, #0]
 8007634:	b98b      	cbnz	r3, 800765a <vTaskSuspend+0x66>
		if( pxTCB == pxCurrentTCB )
 8007636:	682b      	ldr	r3, [r5, #0]
 8007638:	42a3      	cmp	r3, r4
 800763a:	d000      	beq.n	800763e <vTaskSuspend+0x4a>
	}
 800763c:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 800763e:	6833      	ldr	r3, [r6, #0]
 8007640:	b30b      	cbz	r3, 8007686 <vTaskSuspend+0x92>
				configASSERT( uxSchedulerSuspended == 0 );
 8007642:	4b1e      	ldr	r3, [pc, #120]	; (80076bc <vTaskSuspend+0xc8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	b333      	cbz	r3, 8007696 <vTaskSuspend+0xa2>
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	e7fe      	b.n	8007658 <vTaskSuspend+0x64>
			taskENTER_CRITICAL();
 800765a:	f000 fd43 	bl	80080e4 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800765e:	4b18      	ldr	r3, [pc, #96]	; (80076c0 <vTaskSuspend+0xcc>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	b152      	cbz	r2, 800767c <vTaskSuspend+0x88>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007666:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007668:	4b16      	ldr	r3, [pc, #88]	; (80076c4 <vTaskSuspend+0xd0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800766c:	68d2      	ldr	r2, [r2, #12]
 800766e:	6852      	ldr	r2, [r2, #4]
 8007670:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8007672:	f000 fd59 	bl	8008128 <vPortExitCritical>
 8007676:	e7de      	b.n	8007636 <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007678:	682c      	ldr	r4, [r5, #0]
 800767a:	e7c2      	b.n	8007602 <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 800767c:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <vTaskSuspend+0xd0>)
 800767e:	f04f 32ff 	mov.w	r2, #4294967295
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	e7f5      	b.n	8007672 <vTaskSuspend+0x7e>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007686:	490b      	ldr	r1, [pc, #44]	; (80076b4 <vTaskSuspend+0xc0>)
 8007688:	4a0f      	ldr	r2, [pc, #60]	; (80076c8 <vTaskSuspend+0xd4>)
 800768a:	6809      	ldr	r1, [r1, #0]
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	4291      	cmp	r1, r2
 8007690:	d10a      	bne.n	80076a8 <vTaskSuspend+0xb4>
					pxCurrentTCB = NULL;
 8007692:	602b      	str	r3, [r5, #0]
	}
 8007694:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 8007696:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <vTaskSuspend+0xd8>)
 8007698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
	}
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 80076ac:	f7ff bf54 	b.w	8007558 <vTaskSwitchContext>
 80076b0:	20001230 	.word	0x20001230
 80076b4:	20001700 	.word	0x20001700
 80076b8:	200016fc 	.word	0x200016fc
 80076bc:	200016a8 	.word	0x200016a8
 80076c0:	20001234 	.word	0x20001234
 80076c4:	200016dc 	.word	0x200016dc
 80076c8:	200016a0 	.word	0x200016a0
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80076d0:	b1f0      	cbz	r0, 8007710 <vTaskPlaceOnEventList+0x40>
{
 80076d2:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076d4:	4d1c      	ldr	r5, [pc, #112]	; (8007748 <vTaskPlaceOnEventList+0x78>)
 80076d6:	460c      	mov	r4, r1
 80076d8:	6829      	ldr	r1, [r5, #0]
 80076da:	3118      	adds	r1, #24
 80076dc:	f7fe fe40 	bl	8006360 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80076e0:	4b1a      	ldr	r3, [pc, #104]	; (800774c <vTaskPlaceOnEventList+0x7c>)
 80076e2:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80076e4:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076e6:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ee:	3004      	adds	r0, #4
 80076f0:	f7fe fe4e 	bl	8006390 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076f4:	1c63      	adds	r3, r4, #1
 80076f6:	d014      	beq.n	8007722 <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076f8:	682b      	ldr	r3, [r5, #0]
 80076fa:	19a4      	adds	r4, r4, r6
 80076fc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076fe:	d317      	bcc.n	8007730 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007700:	4b13      	ldr	r3, [pc, #76]	; (8007750 <vTaskPlaceOnEventList+0x80>)
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	6829      	ldr	r1, [r5, #0]
}
 8007706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800770a:	3104      	adds	r1, #4
 800770c:	f7fe be28 	b.w	8006360 <vListInsert>
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007720:	e7fe      	b.n	8007720 <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007722:	6829      	ldr	r1, [r5, #0]
 8007724:	480b      	ldr	r0, [pc, #44]	; (8007754 <vTaskPlaceOnEventList+0x84>)
}
 8007726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800772a:	3104      	adds	r1, #4
 800772c:	f7fe be08 	b.w	8006340 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007730:	4b09      	ldr	r3, [pc, #36]	; (8007758 <vTaskPlaceOnEventList+0x88>)
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	6829      	ldr	r1, [r5, #0]
 8007736:	3104      	adds	r1, #4
 8007738:	f7fe fe12 	bl	8006360 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800773c:	4b07      	ldr	r3, [pc, #28]	; (800775c <vTaskPlaceOnEventList+0x8c>)
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8007742:	bf38      	it	cc
 8007744:	601c      	strcc	r4, [r3, #0]
}
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	20001230 	.word	0x20001230
 800774c:	20001728 	.word	0x20001728
 8007750:	20001238 	.word	0x20001238
 8007754:	20001700 	.word	0x20001700
 8007758:	20001234 	.word	0x20001234
 800775c:	200016dc 	.word	0x200016dc

08007760 <vTaskPlaceOnEventListRestricted>:
	{
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 8007762:	b360      	cbz	r0, 80077be <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007764:	4d20      	ldr	r5, [pc, #128]	; (80077e8 <vTaskPlaceOnEventListRestricted+0x88>)
 8007766:	460c      	mov	r4, r1
 8007768:	6829      	ldr	r1, [r5, #0]
 800776a:	4616      	mov	r6, r2
 800776c:	3118      	adds	r1, #24
 800776e:	f7fe fde7 	bl	8006340 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8007772:	4b1e      	ldr	r3, [pc, #120]	; (80077ec <vTaskPlaceOnEventListRestricted+0x8c>)
		if( xWaitIndefinitely != pdFALSE )
 8007774:	b99e      	cbnz	r6, 800779e <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 8007776:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8007778:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800777a:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800777c:	f883 606a 	strb.w	r6, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007780:	3004      	adds	r0, #4
 8007782:	f7fe fe05 	bl	8006390 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007786:	682b      	ldr	r3, [r5, #0]
 8007788:	19e4      	adds	r4, r4, r7
 800778a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800778c:	d320      	bcc.n	80077d0 <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800778e:	4b18      	ldr	r3, [pc, #96]	; (80077f0 <vTaskPlaceOnEventListRestricted+0x90>)
 8007790:	6818      	ldr	r0, [r3, #0]
 8007792:	6829      	ldr	r1, [r5, #0]
	}
 8007794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007798:	3104      	adds	r1, #4
 800779a:	f7fe bde1 	b.w	8006360 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800779e:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80077a0:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a2:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077aa:	3004      	adds	r0, #4
 80077ac:	f7fe fdf0 	bl	8006390 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b0:	6829      	ldr	r1, [r5, #0]
 80077b2:	4810      	ldr	r0, [pc, #64]	; (80077f4 <vTaskPlaceOnEventListRestricted+0x94>)
	}
 80077b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b8:	3104      	adds	r1, #4
 80077ba:	f7fe bdc1 	b.w	8006340 <vListInsertEnd>
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80077ce:	e7fe      	b.n	80077ce <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077d0:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <vTaskPlaceOnEventListRestricted+0x98>)
 80077d2:	6818      	ldr	r0, [r3, #0]
 80077d4:	6829      	ldr	r1, [r5, #0]
 80077d6:	3104      	adds	r1, #4
 80077d8:	f7fe fdc2 	bl	8006360 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077dc:	4b07      	ldr	r3, [pc, #28]	; (80077fc <vTaskPlaceOnEventListRestricted+0x9c>)
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80077e2:	bf38      	it	cc
 80077e4:	601c      	strcc	r4, [r3, #0]
	}
 80077e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e8:	20001230 	.word	0x20001230
 80077ec:	20001728 	.word	0x20001728
 80077f0:	20001238 	.word	0x20001238
 80077f4:	20001700 	.word	0x20001700
 80077f8:	20001234 	.word	0x20001234
 80077fc:	200016dc 	.word	0x200016dc

08007800 <xTaskRemoveFromEventList>:
{
 8007800:	b510      	push	{r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007802:	68c3      	ldr	r3, [r0, #12]
 8007804:	68dc      	ldr	r4, [r3, #12]
{
 8007806:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 8007808:	2c00      	cmp	r4, #0
 800780a:	d02c      	beq.n	8007866 <xTaskRemoveFromEventList+0x66>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800780c:	f104 0118 	add.w	r1, r4, #24
 8007810:	4608      	mov	r0, r1
 8007812:	9101      	str	r1, [sp, #4]
 8007814:	f7fe fdbc 	bl	8006390 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007818:	4b17      	ldr	r3, [pc, #92]	; (8007878 <xTaskRemoveFromEventList+0x78>)
 800781a:	9901      	ldr	r1, [sp, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	b173      	cbz	r3, 800783e <xTaskRemoveFromEventList+0x3e>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007820:	4816      	ldr	r0, [pc, #88]	; (800787c <xTaskRemoveFromEventList+0x7c>)
 8007822:	f7fe fd8d 	bl	8006340 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007826:	4b16      	ldr	r3, [pc, #88]	; (8007880 <xTaskRemoveFromEventList+0x80>)
 8007828:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8007830:	bf85      	ittet	hi
 8007832:	4b14      	ldrhi	r3, [pc, #80]	; (8007884 <xTaskRemoveFromEventList+0x84>)
 8007834:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8007836:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8007838:	6018      	strhi	r0, [r3, #0]
}
 800783a:	b002      	add	sp, #8
 800783c:	bd10      	pop	{r4, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800783e:	1d21      	adds	r1, r4, #4
 8007840:	4608      	mov	r0, r1
 8007842:	9101      	str	r1, [sp, #4]
 8007844:	f7fe fda4 	bl	8006390 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007848:	4a0f      	ldr	r2, [pc, #60]	; (8007888 <xTaskRemoveFromEventList+0x88>)
 800784a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800784c:	6810      	ldr	r0, [r2, #0]
 800784e:	9901      	ldr	r1, [sp, #4]
 8007850:	4283      	cmp	r3, r0
 8007852:	480e      	ldr	r0, [pc, #56]	; (800788c <xTaskRemoveFromEventList+0x8c>)
 8007854:	bf88      	it	hi
 8007856:	6013      	strhi	r3, [r2, #0]
 8007858:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800785c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007860:	f7fe fd6e 	bl	8006340 <vListInsertEnd>
 8007864:	e7df      	b.n	8007826 <xTaskRemoveFromEventList+0x26>
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8007876:	e7fe      	b.n	8007876 <xTaskRemoveFromEventList+0x76>
 8007878:	200016a8 	.word	0x200016a8
 800787c:	200016e8 	.word	0x200016e8
 8007880:	20001230 	.word	0x20001230
 8007884:	2000172c 	.word	0x2000172c
 8007888:	200016b0 	.word	0x200016b0
 800788c:	2000123c 	.word	0x2000123c

08007890 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007890:	4a03      	ldr	r2, [pc, #12]	; (80078a0 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007892:	4b04      	ldr	r3, [pc, #16]	; (80078a4 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007894:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	e9c0 2300 	strd	r2, r3, [r0]
}
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	200016e0 	.word	0x200016e0
 80078a4:	20001728 	.word	0x20001728

080078a8 <xTaskCheckForTimeOut>:
{
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80078aa:	b318      	cbz	r0, 80078f4 <xTaskCheckForTimeOut+0x4c>
	configASSERT( pxTicksToWait );
 80078ac:	460e      	mov	r6, r1
 80078ae:	b1c1      	cbz	r1, 80078e2 <xTaskCheckForTimeOut+0x3a>
	taskENTER_CRITICAL();
 80078b0:	4605      	mov	r5, r0
 80078b2:	f000 fc17 	bl	80080e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80078b6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8007944 <xTaskCheckForTimeOut+0x9c>
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80078ba:	4b20      	ldr	r3, [pc, #128]	; (800793c <xTaskCheckForTimeOut+0x94>)
		const TickType_t xConstTickCount = xTickCount;
 80078bc:	f8dc 1000 	ldr.w	r1, [ip]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	f892 406a 	ldrb.w	r4, [r2, #106]	; 0x6a
 80078c6:	b9f4      	cbnz	r4, 8007906 <xTaskCheckForTimeOut+0x5e>
			if( *pxTicksToWait == portMAX_DELAY )
 80078c8:	6833      	ldr	r3, [r6, #0]
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	d020      	beq.n	8007910 <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80078ce:	4c1c      	ldr	r4, [pc, #112]	; (8007940 <xTaskCheckForTimeOut+0x98>)
 80078d0:	e9d5 0200 	ldrd	r0, r2, [r5]
 80078d4:	6827      	ldr	r7, [r4, #0]
 80078d6:	42b8      	cmp	r0, r7
 80078d8:	d01e      	beq.n	8007918 <xTaskCheckForTimeOut+0x70>
 80078da:	428a      	cmp	r2, r1
 80078dc:	d81c      	bhi.n	8007918 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 80078de:	2401      	movs	r4, #1
 80078e0:	e016      	b.n	8007910 <xTaskCheckForTimeOut+0x68>
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80078f2:	e7fe      	b.n	80078f2 <xTaskCheckForTimeOut+0x4a>
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8007904:	e7fe      	b.n	8007904 <xTaskCheckForTimeOut+0x5c>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 800790e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8007910:	f000 fc0a 	bl	8008128 <vPortExitCritical>
}
 8007914:	4620      	mov	r0, r4
 8007916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007918:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800791a:	42bb      	cmp	r3, r7
 800791c:	d909      	bls.n	8007932 <xTaskCheckForTimeOut+0x8a>
			*pxTicksToWait -= xElapsedTime;
 800791e:	1a5b      	subs	r3, r3, r1
 8007920:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007922:	6821      	ldr	r1, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007924:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
 8007928:	6033      	str	r3, [r6, #0]
			xReturn = pdFALSE;
 800792a:	2400      	movs	r4, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800792c:	e9c5 1200 	strd	r1, r2, [r5]
			xReturn = pdFALSE;
 8007930:	e7ee      	b.n	8007910 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	6033      	str	r3, [r6, #0]
			xReturn = pdTRUE;
 8007936:	2401      	movs	r4, #1
 8007938:	e7ea      	b.n	8007910 <xTaskCheckForTimeOut+0x68>
 800793a:	bf00      	nop
 800793c:	20001230 	.word	0x20001230
 8007940:	200016e0 	.word	0x200016e0
 8007944:	20001728 	.word	0x20001728

08007948 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007948:	4b01      	ldr	r3, [pc, #4]	; (8007950 <vTaskMissedYield+0x8>)
 800794a:	2201      	movs	r2, #1
 800794c:	601a      	str	r2, [r3, #0]
}
 800794e:	4770      	bx	lr
 8007950:	2000172c 	.word	0x2000172c

08007954 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 8007954:	b168      	cbz	r0, 8007972 <uxTaskGetStackHighWaterMark+0x1e>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007956:	6b03      	ldr	r3, [r0, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007958:	781a      	ldrb	r2, [r3, #0]
 800795a:	2aa5      	cmp	r2, #165	; 0xa5
 800795c:	d10f      	bne.n	800797e <uxTaskGetStackHighWaterMark+0x2a>
 800795e:	f1c3 0101 	rsb	r1, r3, #1
			ulCount++;
 8007962:	18c8      	adds	r0, r1, r3
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007964:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8007968:	2aa5      	cmp	r2, #165	; 0xa5
 800796a:	d0fa      	beq.n	8007962 <uxTaskGetStackHighWaterMark+0xe>
 800796c:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8007970:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
 8007972:	4b04      	ldr	r3, [pc, #16]	; (8007984 <uxTaskGetStackHighWaterMark+0x30>)
 8007974:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007976:	6b03      	ldr	r3, [r0, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007978:	781a      	ldrb	r2, [r3, #0]
 800797a:	2aa5      	cmp	r2, #165	; 0xa5
 800797c:	d0ef      	beq.n	800795e <uxTaskGetStackHighWaterMark+0xa>
 800797e:	2000      	movs	r0, #0
	}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20001230 	.word	0x20001230

08007988 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <xTaskGetSchedulerState+0x18>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	b133      	cbz	r3, 800799c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798e:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <xTaskGetSchedulerState+0x1c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8007994:	bf0c      	ite	eq
 8007996:	2002      	moveq	r0, #2
 8007998:	2000      	movne	r0, #0
 800799a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800799c:	2001      	movs	r0, #1
	}
 800799e:	4770      	bx	lr
 80079a0:	200016fc 	.word	0x200016fc
 80079a4:	200016a8 	.word	0x200016a8

080079a8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80079a8:	b1d0      	cbz	r0, 80079e0 <xTaskPriorityDisinherit+0x38>
	{
 80079aa:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80079ac:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <xTaskPriorityDisinherit+0x80>)
 80079ae:	681c      	ldr	r4, [r3, #0]
 80079b0:	4284      	cmp	r4, r0
	{
 80079b2:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 80079b4:	d008      	beq.n	80079c8 <xTaskPriorityDisinherit+0x20>
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	e7fe      	b.n	80079c6 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80079c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079ca:	b15b      	cbz	r3, 80079e4 <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80079ce:	6d62      	ldr	r2, [r4, #84]	; 0x54
			( pxTCB->uxMutexesHeld )--;
 80079d0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079d2:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80079d4:	65a3      	str	r3, [r4, #88]	; 0x58
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079d6:	d000      	beq.n	80079da <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079d8:	b16b      	cbz	r3, 80079f6 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 80079da:	2000      	movs	r0, #0
	}
 80079dc:	b003      	add	sp, #12
 80079de:	bd30      	pop	{r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80079e0:	2000      	movs	r0, #0
	}
 80079e2:	4770      	bx	lr
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80079f4:	e7fe      	b.n	80079f4 <xTaskPriorityDisinherit+0x4c>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079f6:	1d21      	adds	r1, r4, #4
 80079f8:	4608      	mov	r0, r1
 80079fa:	9101      	str	r1, [sp, #4]
 80079fc:	f7fe fcc8 	bl	8006390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a00:	4a0a      	ldr	r2, [pc, #40]	; (8007a2c <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a02:	6d63      	ldr	r3, [r4, #84]	; 0x54
					prvAddTaskToReadyList( pxTCB );
 8007a04:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a06:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007a08:	4283      	cmp	r3, r0
 8007a0a:	4809      	ldr	r0, [pc, #36]	; (8007a30 <xTaskPriorityDisinherit+0x88>)
 8007a0c:	bf88      	it	hi
 8007a0e:	6013      	strhi	r3, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a10:	f1c3 0538 	rsb	r5, r3, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8007a14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007a18:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007a1c:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1e:	61a5      	str	r5, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a20:	f7fe fc8e 	bl	8006340 <vListInsertEnd>
					xReturn = pdTRUE;
 8007a24:	2001      	movs	r0, #1
		return xReturn;
 8007a26:	e7d9      	b.n	80079dc <xTaskPriorityDisinherit+0x34>
 8007a28:	20001230 	.word	0x20001230
 8007a2c:	200016b0 	.word	0x200016b0
 8007a30:	2000123c 	.word	0x2000123c

08007a34 <ulTaskNotifyTake>:
	{
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007a36:	4c29      	ldr	r4, [pc, #164]	; (8007adc <ulTaskNotifyTake+0xa8>)
	{
 8007a38:	4606      	mov	r6, r0
 8007a3a:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8007a3c:	f000 fb52 	bl	80080e4 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a44:	b923      	cbnz	r3, 8007a50 <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	2101      	movs	r1, #1
 8007a4a:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
				if( xTicksToWait > ( TickType_t ) 0 )
 8007a4e:	b9ad      	cbnz	r5, 8007a7c <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 8007a50:	f000 fb6a 	bl	8008128 <vPortExitCritical>
		taskENTER_CRITICAL();
 8007a54:	f000 fb46 	bl	80080e4 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
			if( ulReturn != 0UL )
 8007a5c:	b11d      	cbz	r5, 8007a66 <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007a5e:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8007a60:	b14e      	cbz	r6, 8007a76 <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007a62:	2200      	movs	r2, #0
 8007a64:	665a      	str	r2, [r3, #100]	; 0x64
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		taskEXIT_CRITICAL();
 8007a6e:	f000 fb5b 	bl	8008128 <vPortExitCritical>
	}
 8007a72:	4628      	mov	r0, r5
 8007a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007a76:	1e6a      	subs	r2, r5, #1
 8007a78:	665a      	str	r2, [r3, #100]	; 0x64
 8007a7a:	e7f4      	b.n	8007a66 <ulTaskNotifyTake+0x32>
const TickType_t xConstTickCount = xTickCount;
 8007a7c:	4a18      	ldr	r2, [pc, #96]	; (8007ae0 <ulTaskNotifyTake+0xac>)
 8007a7e:	6817      	ldr	r7, [r2, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8007a80:	6822      	ldr	r2, [r4, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a82:	6820      	ldr	r0, [r4, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8007a84:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a88:	3004      	adds	r0, #4
 8007a8a:	f7fe fc81 	bl	8006390 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a8e:	1c6b      	adds	r3, r5, #1
 8007a90:	d012      	beq.n	8007ab8 <ulTaskNotifyTake+0x84>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	19ed      	adds	r5, r5, r7
 8007a96:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a98:	d314      	bcc.n	8007ac4 <ulTaskNotifyTake+0x90>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a9a:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <ulTaskNotifyTake+0xb0>)
 8007a9c:	6818      	ldr	r0, [r3, #0]
 8007a9e:	6821      	ldr	r1, [r4, #0]
 8007aa0:	3104      	adds	r1, #4
 8007aa2:	f7fe fc5d 	bl	8006360 <vListInsert>
					portYIELD_WITHIN_API();
 8007aa6:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <ulTaskNotifyTake+0xb4>)
 8007aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	e7cb      	b.n	8007a50 <ulTaskNotifyTake+0x1c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab8:	6821      	ldr	r1, [r4, #0]
 8007aba:	480c      	ldr	r0, [pc, #48]	; (8007aec <ulTaskNotifyTake+0xb8>)
 8007abc:	3104      	adds	r1, #4
 8007abe:	f7fe fc3f 	bl	8006340 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ac2:	e7f0      	b.n	8007aa6 <ulTaskNotifyTake+0x72>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <ulTaskNotifyTake+0xbc>)
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	6821      	ldr	r1, [r4, #0]
 8007aca:	3104      	adds	r1, #4
 8007acc:	f7fe fc48 	bl	8006360 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ad0:	4b08      	ldr	r3, [pc, #32]	; (8007af4 <ulTaskNotifyTake+0xc0>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	4295      	cmp	r5, r2
					xNextTaskUnblockTime = xTimeToWake;
 8007ad6:	bf38      	it	cc
 8007ad8:	601d      	strcc	r5, [r3, #0]
 8007ada:	e7e4      	b.n	8007aa6 <ulTaskNotifyTake+0x72>
 8007adc:	20001230 	.word	0x20001230
 8007ae0:	20001728 	.word	0x20001728
 8007ae4:	20001238 	.word	0x20001238
 8007ae8:	e000ed04 	.word	0xe000ed04
 8007aec:	20001700 	.word	0x20001700
 8007af0:	20001234 	.word	0x20001234
 8007af4:	200016dc 	.word	0x200016dc

08007af8 <xTaskGenericNotifyFromISR>:
	{
 8007af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007afc:	b083      	sub	sp, #12
 8007afe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		configASSERT( xTaskToNotify );
 8007b00:	b318      	cbz	r0, 8007b4a <xTaskGenericNotifyFromISR+0x52>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b02:	460d      	mov	r5, r1
 8007b04:	4690      	mov	r8, r2
 8007b06:	4699      	mov	r9, r3
 8007b08:	4604      	mov	r4, r0
 8007b0a:	f000 fc23 	bl	8008354 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b0e:	f3ef 8611 	mrs	r6, BASEPRI
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8007b22:	f1b9 0f00 	cmp.w	r9, #0
 8007b26:	d002      	beq.n	8007b2e <xTaskGenericNotifyFromISR+0x36>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b2a:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007b2e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007b32:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007b34:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007b36:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
			switch( eAction )
 8007b3a:	f1b8 0f04 	cmp.w	r8, #4
 8007b3e:	d856      	bhi.n	8007bee <xTaskGenericNotifyFromISR+0xf6>
 8007b40:	e8df f008 	tbb	[pc, r8]
 8007b44:	28220c0f 	.word	0x28220c0f
 8007b48:	26          	.byte	0x26
 8007b49:	00          	.byte	0x00
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 8007b5a:	e7fe      	b.n	8007b5a <xTaskGenericNotifyFromISR+0x62>
					pxTCB->ulNotifiedValue |= ulValue;
 8007b5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b5e:	4315      	orrs	r5, r2
 8007b60:	6665      	str	r5, [r4, #100]	; 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d005      	beq.n	8007b72 <xTaskGenericNotifyFromISR+0x7a>
 8007b66:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b68:	f386 8811 	msr	BASEPRI, r6
	}
 8007b6c:	b003      	add	sp, #12
 8007b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007b72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b74:	b183      	cbz	r3, 8007b98 <xTaskGenericNotifyFromISR+0xa0>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	e7fe      	b.n	8007b86 <xTaskGenericNotifyFromISR+0x8e>
					( pxTCB->ulNotifiedValue )++;
 8007b88:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b8a:	3201      	adds	r2, #1
 8007b8c:	6662      	str	r2, [r4, #100]	; 0x64
					break;
 8007b8e:	e7e8      	b.n	8007b62 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d02a      	beq.n	8007bea <xTaskGenericNotifyFromISR+0xf2>
						pxTCB->ulNotifiedValue = ulValue;
 8007b94:	6665      	str	r5, [r4, #100]	; 0x64
 8007b96:	e7e4      	b.n	8007b62 <xTaskGenericNotifyFromISR+0x6a>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b98:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <xTaskGenericNotifyFromISR+0x110>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	b9fb      	cbnz	r3, 8007bde <xTaskGenericNotifyFromISR+0xe6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b9e:	1d21      	adds	r1, r4, #4
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	9101      	str	r1, [sp, #4]
 8007ba4:	f7fe fbf4 	bl	8006390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ba8:	4a18      	ldr	r2, [pc, #96]	; (8007c0c <xTaskGenericNotifyFromISR+0x114>)
 8007baa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007bac:	6810      	ldr	r0, [r2, #0]
 8007bae:	9901      	ldr	r1, [sp, #4]
 8007bb0:	4283      	cmp	r3, r0
 8007bb2:	4817      	ldr	r0, [pc, #92]	; (8007c10 <xTaskGenericNotifyFromISR+0x118>)
 8007bb4:	bf88      	it	hi
 8007bb6:	6013      	strhi	r3, [r2, #0]
 8007bb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007bbc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007bc0:	f7fe fbbe 	bl	8006340 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bc4:	4b13      	ldr	r3, [pc, #76]	; (8007c14 <xTaskGenericNotifyFromISR+0x11c>)
 8007bc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d9ca      	bls.n	8007b66 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 8007bd0:	b10f      	cbz	r7, 8007bd6 <xTaskGenericNotifyFromISR+0xde>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	603b      	str	r3, [r7, #0]
					xYieldPending = pdTRUE;
 8007bd6:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <xTaskGenericNotifyFromISR+0x120>)
 8007bd8:	2001      	movs	r0, #1
 8007bda:	6018      	str	r0, [r3, #0]
 8007bdc:	e7c4      	b.n	8007b68 <xTaskGenericNotifyFromISR+0x70>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007bde:	480f      	ldr	r0, [pc, #60]	; (8007c1c <xTaskGenericNotifyFromISR+0x124>)
 8007be0:	f104 0118 	add.w	r1, r4, #24
 8007be4:	f7fe fbac 	bl	8006340 <vListInsertEnd>
 8007be8:	e7ec      	b.n	8007bc4 <xTaskGenericNotifyFromISR+0xcc>
						xReturn = pdFAIL;
 8007bea:	2000      	movs	r0, #0
 8007bec:	e7bc      	b.n	8007b68 <xTaskGenericNotifyFromISR+0x70>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bf0:	3201      	adds	r2, #1
 8007bf2:	d0b6      	beq.n	8007b62 <xTaskGenericNotifyFromISR+0x6a>
 8007bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	e7fe      	b.n	8007c04 <xTaskGenericNotifyFromISR+0x10c>
 8007c06:	bf00      	nop
 8007c08:	200016a8 	.word	0x200016a8
 8007c0c:	200016b0 	.word	0x200016b0
 8007c10:	2000123c 	.word	0x2000123c
 8007c14:	20001230 	.word	0x20001230
 8007c18:	2000172c 	.word	0x2000172c
 8007c1c:	200016e8 	.word	0x200016e8

08007c20 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c24:	4e22      	ldr	r6, [pc, #136]	; (8007cb0 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 8007c26:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007cb8 <prvSwitchTimerLists+0x98>
{
 8007c2a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8007c2c:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c30:	e00d      	b.n	8007c4e <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c32:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c34:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c36:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c38:	1d25      	adds	r5, r4, #4
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f7fe fba8 	bl	8006390 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c40:	6a23      	ldr	r3, [r4, #32]
 8007c42:	4620      	mov	r0, r4
 8007c44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c46:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007c4a:	075b      	lsls	r3, r3, #29
 8007c4c:	d40a      	bmi.n	8007c64 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c4e:	6833      	ldr	r3, [r6, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	2a00      	cmp	r2, #0
 8007c54:	d1ed      	bne.n	8007c32 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8007c56:	4a17      	ldr	r2, [pc, #92]	; (8007cb4 <prvSwitchTimerLists+0x94>)
 8007c58:	6811      	ldr	r1, [r2, #0]
 8007c5a:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8007c5c:	6013      	str	r3, [r2, #0]
}
 8007c5e:	b005      	add	sp, #20
 8007c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c64:	69a3      	ldr	r3, [r4, #24]
 8007c66:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8007c68:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c6a:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8007c6c:	d205      	bcs.n	8007c7a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c6e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c70:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c72:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c74:	f7fe fb74 	bl	8006360 <vListInsert>
 8007c78:	e7e9      	b.n	8007c4e <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 8007c7a:	f8d9 3000 	ldr.w	r3, [r9]
 8007c7e:	b16b      	cbz	r3, 8007c9c <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c80:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c84:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c86:	f7ff fe7f 	bl	8007988 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f8d9 0000 	ldr.w	r0, [r9]
 8007c90:	461a      	mov	r2, r3
 8007c92:	4669      	mov	r1, sp
 8007c94:	f7fe fc40 	bl	8006518 <xQueueGenericSend>
				configASSERT( xResult );
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d1d8      	bne.n	8007c4e <prvSwitchTimerLists+0x2e>
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	e7fe      	b.n	8007cac <prvSwitchTimerLists+0x8c>
 8007cae:	bf00      	nop
 8007cb0:	20001730 	.word	0x20001730
 8007cb4:	20001734 	.word	0x20001734
 8007cb8:	20001854 	.word	0x20001854

08007cbc <prvTimerTask>:
{
 8007cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc0:	4e9e      	ldr	r6, [pc, #632]	; (8007f3c <prvTimerTask+0x280>)
 8007cc2:	4d9f      	ldr	r5, [pc, #636]	; (8007f40 <prvTimerTask+0x284>)
 8007cc4:	4c9f      	ldr	r4, [pc, #636]	; (8007f44 <prvTimerTask+0x288>)
 8007cc6:	b08b      	sub	sp, #44	; 0x2c
 8007cc8:	f04f 0800 	mov.w	r8, #0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	f8d3 a000 	ldr.w	sl, [r3]
 8007cd2:	f1ba 0f00 	cmp.w	sl, #0
 8007cd6:	f000 80ad 	beq.w	8007e34 <prvTimerTask+0x178>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 8007ce0:	f7ff fc0c 	bl	80074fc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8007ce4:	f7ff fc22 	bl	800752c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007ce8:	682a      	ldr	r2, [r5, #0]
 8007cea:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8007cec:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8007cee:	f0c0 80b2 	bcc.w	8007e56 <prvTimerTask+0x19a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007cf2:	4550      	cmp	r0, sl
	xLastTime = xTimeNow;
 8007cf4:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007cf6:	f080 80b8 	bcs.w	8007e6a <prvTimerTask+0x1ae>
 8007cfa:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	ebaa 0109 	sub.w	r1, sl, r9
 8007d02:	f7fe ff4d 	bl	8006ba0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d06:	f7ff fc01 	bl	800750c <xTaskResumeAll>
 8007d0a:	b938      	cbnz	r0, 8007d1c <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 8007d0c:	4b8e      	ldr	r3, [pc, #568]	; (8007f48 <prvTimerTask+0x28c>)
 8007d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d1c:	6820      	ldr	r0, [r4, #0]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	a902      	add	r1, sp, #8
 8007d22:	f7fe fd7f 	bl	8006824 <xQueueReceive>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d0d0      	beq.n	8007ccc <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007d2a:	9b02      	ldr	r3, [sp, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	db78      	blt.n	8007e22 <prvTimerTask+0x166>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d30:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	b113      	cbz	r3, 8007d3c <prvTimerTask+0x80>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d36:	1d38      	adds	r0, r7, #4
 8007d38:	f7fe fb2a 	bl	8006390 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8007d3c:	f7ff fbf6 	bl	800752c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8007d44:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8007d46:	f0c0 808d 	bcc.w	8007e64 <prvTimerTask+0x1a8>
	xLastTime = xTimeNow;
 8007d4a:	9b02      	ldr	r3, [sp, #8]
 8007d4c:	f8c5 9000 	str.w	r9, [r5]
			switch( xMessage.xMessageID )
 8007d50:	2b09      	cmp	r3, #9
 8007d52:	d8e3      	bhi.n	8007d1c <prvTimerTask+0x60>
 8007d54:	e8df f003 	tbb	[pc, r3]
 8007d58:	55050505 	.word	0x55050505
 8007d5c:	05055c3e 	.word	0x05055c3e
 8007d60:	3e55      	.short	0x3e55
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d62:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d6a:	613f      	str	r7, [r7, #16]
 8007d6c:	1898      	adds	r0, r3, r2
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d6e:	f041 0101 	orr.w	r1, r1, #1
 8007d72:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d76:	bf2c      	ite	cs
 8007d78:	2101      	movcs	r1, #1
 8007d7a:	2100      	movcc	r1, #0
	if( xNextExpiryTime <= xTimeNow )
 8007d7c:	4548      	cmp	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d7e:	6078      	str	r0, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8007d80:	f200 808e 	bhi.w	8007ea0 <prvTimerTask+0x1e4>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d84:	eba9 0303 	sub.w	r3, r9, r3
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	f200 8097 	bhi.w	8007ebc <prvTimerTask+0x200>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	4638      	mov	r0, r7
 8007d92:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d98:	075b      	lsls	r3, r3, #29
 8007d9a:	d5bf      	bpl.n	8007d1c <prvTimerTask+0x60>
	if( xTimerQueue != NULL )
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	b183      	cbz	r3, 8007dc2 <prvTimerTask+0x106>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	9b03      	ldr	r3, [sp, #12]
		xMessage.xMessageID = xCommandID;
 8007da4:	f8cd 8018 	str.w	r8, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007da8:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007daa:	e9cd 3707 	strd	r3, r7, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007dae:	f7ff fdeb 	bl	8007988 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007db2:	2300      	movs	r3, #0
 8007db4:	6820      	ldr	r0, [r4, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	a906      	add	r1, sp, #24
 8007dba:	f7fe fbad 	bl	8006518 <xQueueGenericSend>
							configASSERT( xResult );
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d1ac      	bne.n	8007d1c <prvTimerTask+0x60>
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	e7fe      	b.n	8007dd2 <prvTimerTask+0x116>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007dd4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ddc:	f042 0201 	orr.w	r2, r2, #1
 8007de0:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 809a 	beq.w	8007f1e <prvTimerTask+0x262>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dea:	444b      	add	r3, r9
	if( xNextExpiryTime <= xTimeNow )
 8007dec:	454b      	cmp	r3, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007dee:	607b      	str	r3, [r7, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007df0:	bf96      	itet	ls
 8007df2:	4b56      	ldrls	r3, [pc, #344]	; (8007f4c <prvTimerTask+0x290>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007df4:	6830      	ldrhi	r0, [r6, #0]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007df6:	6818      	ldrls	r0, [r3, #0]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007df8:	613f      	str	r7, [r7, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007dfa:	1d39      	adds	r1, r7, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dfc:	f7fe fab0 	bl	8006360 <vListInsert>
 8007e00:	e78c      	b.n	8007d1c <prvTimerTask+0x60>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e06:	f023 0301 	bic.w	r3, r3, #1
 8007e0a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8007e0e:	e785      	b.n	8007d1c <prvTimerTask+0x60>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e14:	079a      	lsls	r2, r3, #30
 8007e16:	d54d      	bpl.n	8007eb4 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8007e20:	e77c      	b.n	8007d1c <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e22:	9b03      	ldr	r3, [sp, #12]
 8007e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e28:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e2a:	9b02      	ldr	r3, [sp, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f6ff af75 	blt.w	8007d1c <prvTimerTask+0x60>
 8007e32:	e77d      	b.n	8007d30 <prvTimerTask+0x74>
	vTaskSuspendAll();
 8007e34:	f7ff fb62 	bl	80074fc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8007e38:	f7ff fb78 	bl	800752c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007e3c:	682a      	ldr	r2, [r5, #0]
 8007e3e:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8007e40:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8007e42:	d808      	bhi.n	8007e56 <prvTimerTask+0x19a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e44:	4b41      	ldr	r3, [pc, #260]	; (8007f4c <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
 8007e46:	f8c5 9000 	str.w	r9, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	6812      	ldr	r2, [r2, #0]
 8007e4e:	fab2 f282 	clz	r2, r2
 8007e52:	0952      	lsrs	r2, r2, #5
 8007e54:	e752      	b.n	8007cfc <prvTimerTask+0x40>
		prvSwitchTimerLists();
 8007e56:	f7ff fee3 	bl	8007c20 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8007e5a:	f8c5 9000 	str.w	r9, [r5]
			( void ) xTaskResumeAll();
 8007e5e:	f7ff fb55 	bl	800750c <xTaskResumeAll>
 8007e62:	e75b      	b.n	8007d1c <prvTimerTask+0x60>
		prvSwitchTimerLists();
 8007e64:	f7ff fedc 	bl	8007c20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e68:	e76f      	b.n	8007d4a <prvTimerTask+0x8e>
				( void ) xTaskResumeAll();
 8007e6a:	f7ff fb4f 	bl	800750c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e6e:	6832      	ldr	r2, [r6, #0]
 8007e70:	68d2      	ldr	r2, [r2, #12]
 8007e72:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e76:	f10b 0104 	add.w	r1, fp, #4
 8007e7a:	4608      	mov	r0, r1
 8007e7c:	9101      	str	r1, [sp, #4]
 8007e7e:	f7fe fa87 	bl	8006390 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e82:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8007e86:	9901      	ldr	r1, [sp, #4]
 8007e88:	f010 0f04 	tst.w	r0, #4
 8007e8c:	d11c      	bne.n	8007ec8 <prvTimerTask+0x20c>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e8e:	f020 0001 	bic.w	r0, r0, #1
 8007e92:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e96:	f8db 3020 	ldr.w	r3, [fp, #32]
 8007e9a:	4658      	mov	r0, fp
 8007e9c:	4798      	blx	r3
}
 8007e9e:	e73d      	b.n	8007d1c <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ea0:	454b      	cmp	r3, r9
 8007ea2:	d902      	bls.n	8007eaa <prvTimerTask+0x1ee>
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	f43f af72 	beq.w	8007d8e <prvTimerTask+0xd2>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eaa:	6830      	ldr	r0, [r6, #0]
 8007eac:	1d39      	adds	r1, r7, #4
 8007eae:	f7fe fa57 	bl	8006360 <vListInsert>
	return xProcessTimerNow;
 8007eb2:	e733      	b.n	8007d1c <prvTimerTask+0x60>
							vPortFree( pxTimer );
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f000 fb37 	bl	8008528 <vPortFree>
 8007eba:	e72f      	b.n	8007d1c <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ebc:	4b23      	ldr	r3, [pc, #140]	; (8007f4c <prvTimerTask+0x290>)
 8007ebe:	1d39      	adds	r1, r7, #4
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	f7fe fa4d 	bl	8006360 <vListInsert>
	return xProcessTimerNow;
 8007ec6:	e729      	b.n	8007d1c <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ec8:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ecc:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ed0:	eb0a 0300 	add.w	r3, sl, r0
	if( xNextExpiryTime <= xTimeNow )
 8007ed4:	4599      	cmp	r9, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ed6:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8007eda:	d203      	bcs.n	8007ee4 <prvTimerTask+0x228>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007edc:	6830      	ldr	r0, [r6, #0]
 8007ede:	f7fe fa3f 	bl	8006360 <vListInsert>
	return xProcessTimerNow;
 8007ee2:	e7d8      	b.n	8007e96 <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee4:	eba9 030a 	sub.w	r3, r9, sl
 8007ee8:	4298      	cmp	r0, r3
 8007eea:	d821      	bhi.n	8007f30 <prvTimerTask+0x274>
	if( xTimerQueue != NULL )
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	b16b      	cbz	r3, 8007f0c <prvTimerTask+0x250>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ef0:	e9cd 8a06 	strd	r8, sl, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ef4:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ef8:	f7ff fd46 	bl	8007988 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007efc:	2300      	movs	r3, #0
 8007efe:	6820      	ldr	r0, [r4, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	a906      	add	r1, sp, #24
 8007f04:	f7fe fb08 	bl	8006518 <xQueueGenericSend>
			configASSERT( xResult );
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d1c4      	bne.n	8007e96 <prvTimerTask+0x1da>
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	e7fe      	b.n	8007f1c <prvTimerTask+0x260>
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f2e:	e7fe      	b.n	8007f2e <prvTimerTask+0x272>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f30:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <prvTimerTask+0x290>)
 8007f32:	6818      	ldr	r0, [r3, #0]
 8007f34:	f7fe fa14 	bl	8006360 <vListInsert>
	return xProcessTimerNow;
 8007f38:	e7ad      	b.n	8007e96 <prvTimerTask+0x1da>
 8007f3a:	bf00      	nop
 8007f3c:	20001730 	.word	0x20001730
 8007f40:	20001800 	.word	0x20001800
 8007f44:	20001854 	.word	0x20001854
 8007f48:	e000ed04 	.word	0xe000ed04
 8007f4c:	20001734 	.word	0x20001734

08007f50 <xTimerCreateTimerTask>:
{
 8007f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8007f52:	4c23      	ldr	r4, [pc, #140]	; (8007fe0 <xTimerCreateTimerTask+0x90>)
{
 8007f54:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8007f56:	f000 f8c5 	bl	80080e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007f5a:	6827      	ldr	r7, [r4, #0]
 8007f5c:	b337      	cbz	r7, 8007fac <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f5e:	f000 f8e3 	bl	8008128 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	b1cb      	cbz	r3, 8007f9a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f66:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f68:	aa07      	add	r2, sp, #28
 8007f6a:	a906      	add	r1, sp, #24
 8007f6c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f6e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f72:	f7fe f9c5 	bl	8006300 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f76:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	e9cd 2100 	strd	r2, r1, [sp]
 8007f80:	9302      	str	r3, [sp, #8]
 8007f82:	9a07      	ldr	r2, [sp, #28]
 8007f84:	4917      	ldr	r1, [pc, #92]	; (8007fe4 <xTimerCreateTimerTask+0x94>)
 8007f86:	4818      	ldr	r0, [pc, #96]	; (8007fe8 <xTimerCreateTimerTask+0x98>)
 8007f88:	4623      	mov	r3, r4
 8007f8a:	f7ff f8dd 	bl	8007148 <xTaskCreateStatic>
 8007f8e:	4b17      	ldr	r3, [pc, #92]	; (8007fec <xTimerCreateTimerTask+0x9c>)
 8007f90:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007f92:	b110      	cbz	r0, 8007f9a <xTimerCreateTimerTask+0x4a>
}
 8007f94:	2001      	movs	r0, #1
 8007f96:	b009      	add	sp, #36	; 0x24
 8007f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8007faa:	e7fe      	b.n	8007faa <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8007fac:	4e10      	ldr	r6, [pc, #64]	; (8007ff0 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8007fae:	4d11      	ldr	r5, [pc, #68]	; (8007ff4 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f7fe f9b5 	bl	8006320 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f7fe f9b2 	bl	8006320 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007fbc:	4a0e      	ldr	r2, [pc, #56]	; (8007ff8 <xTimerCreateTimerTask+0xa8>)
			pxOverflowTimerList = &xActiveTimerList2;
 8007fbe:	490f      	ldr	r1, [pc, #60]	; (8007ffc <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fc0:	9700      	str	r7, [sp, #0]
 8007fc2:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <xTimerCreateTimerTask+0xb0>)
			pxCurrentTimerList = &xActiveTimerList1;
 8007fc4:	6016      	str	r6, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fc6:	600d      	str	r5, [r1, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fc8:	4a0e      	ldr	r2, [pc, #56]	; (8008004 <xTimerCreateTimerTask+0xb4>)
 8007fca:	2110      	movs	r1, #16
 8007fcc:	200a      	movs	r0, #10
 8007fce:	f7fe fa31 	bl	8006434 <xQueueGenericCreateStatic>
 8007fd2:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d0c2      	beq.n	8007f5e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fd8:	490b      	ldr	r1, [pc, #44]	; (8008008 <xTimerCreateTimerTask+0xb8>)
 8007fda:	f7fe fda7 	bl	8006b2c <vQueueAddToRegistry>
 8007fde:	e7be      	b.n	8007f5e <xTimerCreateTimerTask+0xe>
 8007fe0:	20001854 	.word	0x20001854
 8007fe4:	08009d44 	.word	0x08009d44
 8007fe8:	08007cbd 	.word	0x08007cbd
 8007fec:	20001858 	.word	0x20001858
 8007ff0:	200017d8 	.word	0x200017d8
 8007ff4:	200017ec 	.word	0x200017ec
 8007ff8:	20001730 	.word	0x20001730
 8007ffc:	20001734 	.word	0x20001734
 8008000:	20001804 	.word	0x20001804
 8008004:	20001738 	.word	0x20001738
 8008008:	08009d3c 	.word	0x08009d3c

0800800c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800800c:	4808      	ldr	r0, [pc, #32]	; (8008030 <prvPortStartFirstTask+0x24>)
 800800e:	6800      	ldr	r0, [r0, #0]
 8008010:	6800      	ldr	r0, [r0, #0]
 8008012:	f380 8808 	msr	MSP, r0
 8008016:	f04f 0000 	mov.w	r0, #0
 800801a:	f380 8814 	msr	CONTROL, r0
 800801e:	b662      	cpsie	i
 8008020:	b661      	cpsie	f
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	df00      	svc	0
 800802c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800802e:	0000      	.short	0x0000
 8008030:	e000ed08 	.word	0xe000ed08

08008034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008044 <vPortEnableVFP+0x10>
 8008038:	6801      	ldr	r1, [r0, #0]
 800803a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800803e:	6001      	str	r1, [r0, #0]
 8008040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008042:	0000      	.short	0x0000
 8008044:	e000ed88 	.word	0xe000ed88

08008048 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8008048:	4b0e      	ldr	r3, [pc, #56]	; (8008084 <prvTaskExitError+0x3c>)
 800804a:	681b      	ldr	r3, [r3, #0]
{
 800804c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800804e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8008050:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8008052:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008054:	d008      	beq.n	8008068 <prvTaskExitError+0x20>
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	e7fe      	b.n	8008066 <prvTaskExitError+0x1e>
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008078:	9b01      	ldr	r3, [sp, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0fc      	beq.n	8008078 <prvTaskExitError+0x30>
}
 800807e:	b002      	add	sp, #8
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000008 	.word	0x20000008

08008088 <pxPortInitialiseStack>:
{
 8008088:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800808a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800808e:	4c09      	ldr	r4, [pc, #36]	; (80080b4 <pxPortInitialiseStack+0x2c>)
 8008090:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008094:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008098:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800809c:	f840 5c04 	str.w	r5, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80080a0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080a4:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080a8:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80080ac:	bc30      	pop	{r4, r5}
 80080ae:	3844      	subs	r0, #68	; 0x44
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	08008049 	.word	0x08008049
	...

080080c0 <SVC_Handler>:
	__asm volatile (
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <pxCurrentTCBConst2>)
 80080c2:	6819      	ldr	r1, [r3, #0]
 80080c4:	6808      	ldr	r0, [r1, #0]
 80080c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ca:	f380 8809 	msr	PSP, r0
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f04f 0000 	mov.w	r0, #0
 80080d6:	f380 8811 	msr	BASEPRI, r0
 80080da:	4770      	bx	lr
 80080dc:	f3af 8000 	nop.w

080080e0 <pxCurrentTCBConst2>:
 80080e0:	20001230 	.word	0x20001230

080080e4 <vPortEnterCritical>:
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80080f4:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <vPortEnterCritical+0x3c>)
 80080f6:	6813      	ldr	r3, [r2, #0]
 80080f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80080fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80080fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80080fe:	d000      	beq.n	8008102 <vPortEnterCritical+0x1e>
}
 8008100:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008102:	4b08      	ldr	r3, [pc, #32]	; (8008124 <vPortEnterCritical+0x40>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f013 0fff 	tst.w	r3, #255	; 0xff
 800810a:	d0f9      	beq.n	8008100 <vPortEnterCritical+0x1c>
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	e7fe      	b.n	800811c <vPortEnterCritical+0x38>
 800811e:	bf00      	nop
 8008120:	20000008 	.word	0x20000008
 8008124:	e000ed04 	.word	0xe000ed04

08008128 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8008128:	4a08      	ldr	r2, [pc, #32]	; (800814c <vPortExitCritical+0x24>)
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	b943      	cbnz	r3, 8008140 <vPortExitCritical+0x18>
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	e7fe      	b.n	800813e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008140:	3b01      	subs	r3, #1
 8008142:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008144:	b90b      	cbnz	r3, 800814a <vPortExitCritical+0x22>
	__asm volatile
 8008146:	f383 8811 	msr	BASEPRI, r3
}
 800814a:	4770      	bx	lr
 800814c:	20000008 	.word	0x20000008

08008150 <PendSV_Handler>:
	__asm volatile
 8008150:	f3ef 8009 	mrs	r0, PSP
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <pxCurrentTCBConst>)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	f01e 0f10 	tst.w	lr, #16
 8008160:	bf08      	it	eq
 8008162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816a:	6010      	str	r0, [r2, #0]
 800816c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008174:	f380 8811 	msr	BASEPRI, r0
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f7ff f9ea 	bl	8007558 <vTaskSwitchContext>
 8008184:	f04f 0000 	mov.w	r0, #0
 8008188:	f380 8811 	msr	BASEPRI, r0
 800818c:	bc09      	pop	{r0, r3}
 800818e:	6819      	ldr	r1, [r3, #0]
 8008190:	6808      	ldr	r0, [r1, #0]
 8008192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008196:	f01e 0f10 	tst.w	lr, #16
 800819a:	bf08      	it	eq
 800819c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081a0:	f380 8809 	msr	PSP, r0
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	f3af 8000 	nop.w

080081b0 <pxCurrentTCBConst>:
 80081b0:	20001230 	.word	0x20001230

080081b4 <xPortSysTickHandler>:
{
 80081b4:	b508      	push	{r3, lr}
	__asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80081c6:	f7ff f9b7 	bl	8007538 <xTaskIncrementTick>
 80081ca:	b118      	cbz	r0, 80081d4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <xPortSysTickHandler+0x28>)
 80081ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80081d4:	2300      	movs	r3, #0
 80081d6:	f383 8811 	msr	BASEPRI, r3
}
 80081da:	bd08      	pop	{r3, pc}
 80081dc:	e000ed04 	.word	0xe000ed04

080081e0 <vPortSetupTimerInterrupt>:
{
 80081e0:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081e2:	4a09      	ldr	r2, [pc, #36]	; (8008208 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081e4:	4d09      	ldr	r5, [pc, #36]	; (800820c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081e6:	4b0a      	ldr	r3, [pc, #40]	; (8008210 <vPortSetupTimerInterrupt+0x30>)
 80081e8:	4c0a      	ldr	r4, [pc, #40]	; (8008214 <vPortSetupTimerInterrupt+0x34>)
 80081ea:	480b      	ldr	r0, [pc, #44]	; (8008218 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081ec:	2100      	movs	r1, #0
 80081ee:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081f0:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	fba4 1303 	umull	r1, r3, r4, r3
 80081f8:	099b      	lsrs	r3, r3, #6
 80081fa:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081fc:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081fe:	6003      	str	r3, [r0, #0]
}
 8008200:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008202:	6011      	str	r1, [r2, #0]
}
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	e000e010 	.word	0xe000e010
 800820c:	e000e018 	.word	0xe000e018
 8008210:	20000000 	.word	0x20000000
 8008214:	10624dd3 	.word	0x10624dd3
 8008218:	e000e014 	.word	0xe000e014

0800821c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800821c:	4b44      	ldr	r3, [pc, #272]	; (8008330 <xPortStartScheduler+0x114>)
 800821e:	4a45      	ldr	r2, [pc, #276]	; (8008334 <xPortStartScheduler+0x118>)
 8008220:	6819      	ldr	r1, [r3, #0]
 8008222:	4291      	cmp	r1, r2
 8008224:	d040      	beq.n	80082a8 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	4b43      	ldr	r3, [pc, #268]	; (8008338 <xPortStartScheduler+0x11c>)
 800822a:	429a      	cmp	r2, r3
 800822c:	d033      	beq.n	8008296 <xPortStartScheduler+0x7a>
{
 800822e:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008230:	4b42      	ldr	r3, [pc, #264]	; (800833c <xPortStartScheduler+0x120>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008232:	4c43      	ldr	r4, [pc, #268]	; (8008340 <xPortStartScheduler+0x124>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008234:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008236:	4943      	ldr	r1, [pc, #268]	; (8008344 <xPortStartScheduler+0x128>)
{
 8008238:	b085      	sub	sp, #20
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800823a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800823c:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800823e:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008240:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800824a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800824e:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008252:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008256:	2007      	movs	r0, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008258:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800825a:	0614      	lsls	r4, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800825c:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800825e:	bf48      	it	mi
 8008260:	2206      	movmi	r2, #6
 8008262:	d50f      	bpl.n	8008284 <xPortStartScheduler+0x68>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008264:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008270:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8008274:	0600      	lsls	r0, r0, #24
 8008276:	4613      	mov	r3, r2
 8008278:	f102 32ff 	add.w	r2, r2, #4294967295
 800827c:	d4f2      	bmi.n	8008264 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800827e:	2b03      	cmp	r3, #3
 8008280:	d01b      	beq.n	80082ba <xPortStartScheduler+0x9e>
 8008282:	600b      	str	r3, [r1, #0]
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	e7fe      	b.n	8008294 <xPortStartScheduler+0x78>
 8008296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80082a6:	e7fe      	b.n	80082a6 <xPortStartScheduler+0x8a>
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082b8:	e7fe      	b.n	80082b8 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082ba:	9a02      	ldr	r2, [sp, #8]
 80082bc:	481f      	ldr	r0, [pc, #124]	; (800833c <xPortStartScheduler+0x120>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082be:	4b22      	ldr	r3, [pc, #136]	; (8008348 <xPortStartScheduler+0x12c>)
	uxCriticalNesting = 0;
 80082c0:	4c22      	ldr	r4, [pc, #136]	; (800834c <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082c2:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082c4:	f44f 7540 	mov.w	r5, #768	; 0x300
 80082c8:	600d      	str	r5, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082ca:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80082d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80082da:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 80082dc:	2500      	movs	r5, #0
	vPortSetupTimerInterrupt();
 80082de:	f7ff ff7f 	bl	80081e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80082e2:	6025      	str	r5, [r4, #0]
	vPortEnableVFP();
 80082e4:	f7ff fea6 	bl	8008034 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082e8:	4a19      	ldr	r2, [pc, #100]	; (8008350 <xPortStartScheduler+0x134>)
 80082ea:	6813      	ldr	r3, [r2, #0]
 80082ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80082f0:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80082f2:	f7ff fe8b 	bl	800800c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80082f6:	f7ff f92f 	bl	8007558 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 80082fa:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0;
 80082fc:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 80082fe:	3301      	adds	r3, #1
 8008300:	d008      	beq.n	8008314 <xPortStartScheduler+0xf8>
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	e7fe      	b.n	8008312 <xPortStartScheduler+0xf6>
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0fc      	beq.n	8008324 <xPortStartScheduler+0x108>
}
 800832a:	2000      	movs	r0, #0
 800832c:	b005      	add	sp, #20
 800832e:	bd30      	pop	{r4, r5, pc}
 8008330:	e000ed00 	.word	0xe000ed00
 8008334:	410fc271 	.word	0x410fc271
 8008338:	410fc270 	.word	0x410fc270
 800833c:	e000e400 	.word	0xe000e400
 8008340:	2000185c 	.word	0x2000185c
 8008344:	20001860 	.word	0x20001860
 8008348:	e000ed20 	.word	0xe000ed20
 800834c:	20000008 	.word	0x20000008
 8008350:	e000ef34 	.word	0xe000ef34

08008354 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008354:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008358:	2b0f      	cmp	r3, #15
 800835a:	d90e      	bls.n	800837a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800835c:	4910      	ldr	r1, [pc, #64]	; (80083a0 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800835e:	4a11      	ldr	r2, [pc, #68]	; (80083a4 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008360:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008362:	7812      	ldrb	r2, [r2, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d908      	bls.n	800837a <vPortValidateInterruptPriority+0x26>
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	e7fe      	b.n	8008378 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800837a:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <vPortValidateInterruptPriority+0x54>)
 800837c:	4a0b      	ldr	r2, [pc, #44]	; (80083ac <vPortValidateInterruptPriority+0x58>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6812      	ldr	r2, [r2, #0]
 8008382:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008386:	4293      	cmp	r3, r2
 8008388:	d908      	bls.n	800839c <vPortValidateInterruptPriority+0x48>
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	e7fe      	b.n	800839a <vPortValidateInterruptPriority+0x46>
	}
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	e000e3f0 	.word	0xe000e3f0
 80083a4:	2000185c 	.word	0x2000185c
 80083a8:	e000ed0c 	.word	0xe000ed0c
 80083ac:	20001860 	.word	0x20001860

080083b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b4:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80083b6:	f7ff f8a1 	bl	80074fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083ba:	4854      	ldr	r0, [pc, #336]	; (800850c <pvPortMalloc+0x15c>)
 80083bc:	6803      	ldr	r3, [r0, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d03c      	beq.n	800843c <pvPortMalloc+0x8c>
 80083c2:	4a53      	ldr	r2, [pc, #332]	; (8008510 <pvPortMalloc+0x160>)
 80083c4:	6815      	ldr	r5, [r2, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083c6:	422e      	tst	r6, r5
 80083c8:	d130      	bne.n	800842c <pvPortMalloc+0x7c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083ca:	b37e      	cbz	r6, 800842c <pvPortMalloc+0x7c>
			{
				xWantedSize += xHeapStructSize;
 80083cc:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083d0:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083d2:	bf1c      	itt	ne
 80083d4:	f024 0407 	bicne.w	r4, r4, #7
 80083d8:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083da:	b33c      	cbz	r4, 800842c <pvPortMalloc+0x7c>
 80083dc:	f8df c13c 	ldr.w	ip, [pc, #316]	; 800851c <pvPortMalloc+0x16c>
 80083e0:	f8dc 7000 	ldr.w	r7, [ip]
 80083e4:	42a7      	cmp	r7, r4
 80083e6:	d321      	bcc.n	800842c <pvPortMalloc+0x7c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80083e8:	4a4a      	ldr	r2, [pc, #296]	; (8008514 <pvPortMalloc+0x164>)
 80083ea:	6811      	ldr	r1, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ec:	e003      	b.n	80083f6 <pvPortMalloc+0x46>
 80083ee:	680e      	ldr	r6, [r1, #0]
 80083f0:	b126      	cbz	r6, 80083fc <pvPortMalloc+0x4c>
 80083f2:	460a      	mov	r2, r1
 80083f4:	4631      	mov	r1, r6
 80083f6:	6848      	ldr	r0, [r1, #4]
 80083f8:	42a0      	cmp	r0, r4
 80083fa:	d3f8      	bcc.n	80083ee <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083fc:	4299      	cmp	r1, r3
 80083fe:	d015      	beq.n	800842c <pvPortMalloc+0x7c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008400:	460e      	mov	r6, r1
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008402:	eba0 0e04 	sub.w	lr, r0, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008406:	f856 8b08 	ldr.w	r8, [r6], #8
 800840a:	f8c2 8000 	str.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800840e:	f1be 0f10 	cmp.w	lr, #16
 8008412:	d950      	bls.n	80084b6 <pvPortMalloc+0x106>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008414:	190a      	adds	r2, r1, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008416:	0750      	lsls	r0, r2, #29
 8008418:	d034      	beq.n	8008484 <pvPortMalloc+0xd4>
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	e7fe      	b.n	800842a <pvPortMalloc+0x7a>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800842c:	f7ff f86e 	bl	800750c <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8008430:	2600      	movs	r6, #0
 8008432:	f7f8 ff9f 	bl	8001374 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8008436:	4630      	mov	r0, r6
 8008438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800843c:	4b36      	ldr	r3, [pc, #216]	; (8008518 <pvPortMalloc+0x168>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800843e:	4c35      	ldr	r4, [pc, #212]	; (8008514 <pvPortMalloc+0x164>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008440:	4d36      	ldr	r5, [pc, #216]	; (800851c <pvPortMalloc+0x16c>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008442:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008520 <pvPortMalloc+0x170>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008446:	075f      	lsls	r7, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008448:	bf14      	ite	ne
 800844a:	1dda      	addne	r2, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800844c:	461a      	moveq	r2, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800844e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	uxAddress -= xHeapStructSize;
 8008452:	f1a3 0308 	sub.w	r3, r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008456:	f023 0307 	bic.w	r3, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800845a:	bf18      	it	ne
 800845c:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008460:	6022      	str	r2, [r4, #0]
 8008462:	4611      	mov	r1, r2

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008464:	4f2a      	ldr	r7, [pc, #168]	; (8008510 <pvPortMalloc+0x160>)
	pxEnd = ( void * ) uxAddress;
 8008466:	6003      	str	r3, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008468:	1a9a      	subs	r2, r3, r2
	xStart.xBlockSize = ( size_t ) 0;
 800846a:	2000      	movs	r0, #0
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800846c:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800846e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8008472:	6060      	str	r0, [r4, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008474:	f8cc 2000 	str.w	r2, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 8008478:	e9c3 0000 	strd	r0, r0, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800847c:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800847e:	e9c1 3200 	strd	r3, r2, [r1]
}
 8008482:	e7a0      	b.n	80083c6 <pvPortMalloc+0x16>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008484:	4823      	ldr	r0, [pc, #140]	; (8008514 <pvPortMalloc+0x164>)
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008486:	f8c2 e004 	str.w	lr, [r2, #4]
						pxBlock->xBlockSize = xWantedSize;
 800848a:	604c      	str	r4, [r1, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800848c:	4686      	mov	lr, r0
 800848e:	6800      	ldr	r0, [r0, #0]
 8008490:	4282      	cmp	r2, r0
 8008492:	d8fb      	bhi.n	800848c <pvPortMalloc+0xdc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008494:	f8de 4004 	ldr.w	r4, [lr, #4]
 8008498:	eb0e 0804 	add.w	r8, lr, r4
 800849c:	4542      	cmp	r2, r8
 800849e:	d027      	beq.n	80084f0 <pvPortMalloc+0x140>
 80084a0:	6854      	ldr	r4, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084a2:	eb02 0804 	add.w	r8, r2, r4
 80084a6:	4540      	cmp	r0, r8
 80084a8:	d028      	beq.n	80084fc <pvPortMalloc+0x14c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084aa:	6010      	str	r0, [r2, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084ac:	4596      	cmp	lr, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084ae:	6848      	ldr	r0, [r1, #4]
 80084b0:	bf18      	it	ne
 80084b2:	f8ce 2000 	strne.w	r2, [lr]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084b6:	4c1a      	ldr	r4, [pc, #104]	; (8008520 <pvPortMalloc+0x170>)
 80084b8:	6822      	ldr	r2, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084ba:	1a3f      	subs	r7, r7, r0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084bc:	4297      	cmp	r7, r2
					xNumberOfSuccessfulAllocations++;
 80084be:	4a19      	ldr	r2, [pc, #100]	; (8008524 <pvPortMalloc+0x174>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084c0:	bf38      	it	cc
 80084c2:	6027      	strcc	r7, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80084c4:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084c6:	f8cc 7000 	str.w	r7, [ip]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084ca:	4328      	orrs	r0, r5
					pxBlock->pxNextFreeBlock = NULL;
 80084cc:	2400      	movs	r4, #0
					xNumberOfSuccessfulAllocations++;
 80084ce:	3301      	adds	r3, #1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084d0:	6048      	str	r0, [r1, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084d2:	600c      	str	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 80084d4:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80084d6:	f7ff f819 	bl	800750c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084da:	0773      	lsls	r3, r6, #29
 80084dc:	d0ab      	beq.n	8008436 <pvPortMalloc+0x86>
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	e7fe      	b.n	80084ee <pvPortMalloc+0x13e>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084f0:	6852      	ldr	r2, [r2, #4]
 80084f2:	4414      	add	r4, r2
 80084f4:	f8ce 4004 	str.w	r4, [lr, #4]
		pxBlockToInsert = pxIterator;
 80084f8:	4672      	mov	r2, lr
 80084fa:	e7d2      	b.n	80084a2 <pvPortMalloc+0xf2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084fc:	4298      	cmp	r0, r3
 80084fe:	d0d4      	beq.n	80084aa <pvPortMalloc+0xfa>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008500:	e9d0 0300 	ldrd	r0, r3, [r0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008504:	441c      	add	r4, r3
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008506:	6010      	str	r0, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008508:	6054      	str	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800850a:	e7cf      	b.n	80084ac <pvPortMalloc+0xfc>
 800850c:	20001864 	.word	0x20001864
 8008510:	20009868 	.word	0x20009868
 8008514:	2000987c 	.word	0x2000987c
 8008518:	20001868 	.word	0x20001868
 800851c:	2000986c 	.word	0x2000986c
 8008520:	20009870 	.word	0x20009870
 8008524:	20009874 	.word	0x20009874

08008528 <vPortFree>:
	if( pv != NULL )
 8008528:	b1e0      	cbz	r0, 8008564 <vPortFree+0x3c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800852a:	4a29      	ldr	r2, [pc, #164]	; (80085d0 <vPortFree+0xa8>)
{
 800852c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008534:	4213      	tst	r3, r2
 8008536:	4604      	mov	r4, r0
 8008538:	d00b      	beq.n	8008552 <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800853a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800853e:	b191      	cbz	r1, 8008566 <vPortFree+0x3e>
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	e7fe      	b.n	8008550 <vPortFree+0x28>
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008562:	e7fe      	b.n	8008562 <vPortFree+0x3a>
 8008564:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008566:	ea23 0302 	bic.w	r3, r3, r2
 800856a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800856e:	f7fe ffc5 	bl	80074fc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008572:	4918      	ldr	r1, [pc, #96]	; (80085d4 <vPortFree+0xac>)
 8008574:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8008578:	680b      	ldr	r3, [r1, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800857a:	4a17      	ldr	r2, [pc, #92]	; (80085d8 <vPortFree+0xb0>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 800857c:	4403      	add	r3, r0
 800857e:	600b      	str	r3, [r1, #0]
		puc -= xHeapStructSize;
 8008580:	f1a4 0308 	sub.w	r3, r4, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008584:	4611      	mov	r1, r2
 8008586:	6812      	ldr	r2, [r2, #0]
 8008588:	4293      	cmp	r3, r2
 800858a:	d8fb      	bhi.n	8008584 <vPortFree+0x5c>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800858c:	684c      	ldr	r4, [r1, #4]
 800858e:	190d      	adds	r5, r1, r4
 8008590:	42ab      	cmp	r3, r5
 8008592:	d00e      	beq.n	80085b2 <vPortFree+0x8a>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008594:	181c      	adds	r4, r3, r0
 8008596:	42a2      	cmp	r2, r4
 8008598:	d00f      	beq.n	80085ba <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800859a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulFrees++;
 800859c:	4a0f      	ldr	r2, [pc, #60]	; (80085dc <vPortFree+0xb4>)
	if( pxIterator != pxBlockToInsert )
 800859e:	4299      	cmp	r1, r3
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085a0:	bf18      	it	ne
 80085a2:	600b      	strne	r3, [r1, #0]
					xNumberOfSuccessfulFrees++;
 80085a4:	6813      	ldr	r3, [r2, #0]
 80085a6:	3301      	adds	r3, #1
 80085a8:	6013      	str	r3, [r2, #0]
}
 80085aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 80085ae:	f7fe bfad 	b.w	800750c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085b2:	4420      	add	r0, r4
 80085b4:	6048      	str	r0, [r1, #4]
		pxBlockToInsert = pxIterator;
 80085b6:	460b      	mov	r3, r1
 80085b8:	e7ec      	b.n	8008594 <vPortFree+0x6c>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ba:	4c09      	ldr	r4, [pc, #36]	; (80085e0 <vPortFree+0xb8>)
 80085bc:	6824      	ldr	r4, [r4, #0]
 80085be:	42a2      	cmp	r2, r4
 80085c0:	d0eb      	beq.n	800859a <vPortFree+0x72>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085c2:	e9d2 2400 	ldrd	r2, r4, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085c6:	4420      	add	r0, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085c8:	601a      	str	r2, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ca:	6058      	str	r0, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085cc:	e7e6      	b.n	800859c <vPortFree+0x74>
 80085ce:	bf00      	nop
 80085d0:	20009868 	.word	0x20009868
 80085d4:	2000986c 	.word	0x2000986c
 80085d8:	2000987c 	.word	0x2000987c
 80085dc:	20009878 	.word	0x20009878
 80085e0:	20001864 	.word	0x20001864

080085e4 <__errno>:
 80085e4:	4b01      	ldr	r3, [pc, #4]	; (80085ec <__errno+0x8>)
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	2000000c 	.word	0x2000000c

080085f0 <__libc_init_array>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	4d0d      	ldr	r5, [pc, #52]	; (8008628 <__libc_init_array+0x38>)
 80085f4:	4c0d      	ldr	r4, [pc, #52]	; (800862c <__libc_init_array+0x3c>)
 80085f6:	1b64      	subs	r4, r4, r5
 80085f8:	10a4      	asrs	r4, r4, #2
 80085fa:	2600      	movs	r6, #0
 80085fc:	42a6      	cmp	r6, r4
 80085fe:	d109      	bne.n	8008614 <__libc_init_array+0x24>
 8008600:	4d0b      	ldr	r5, [pc, #44]	; (8008630 <__libc_init_array+0x40>)
 8008602:	4c0c      	ldr	r4, [pc, #48]	; (8008634 <__libc_init_array+0x44>)
 8008604:	f000 fffa 	bl	80095fc <_init>
 8008608:	1b64      	subs	r4, r4, r5
 800860a:	10a4      	asrs	r4, r4, #2
 800860c:	2600      	movs	r6, #0
 800860e:	42a6      	cmp	r6, r4
 8008610:	d105      	bne.n	800861e <__libc_init_array+0x2e>
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	f855 3b04 	ldr.w	r3, [r5], #4
 8008618:	4798      	blx	r3
 800861a:	3601      	adds	r6, #1
 800861c:	e7ee      	b.n	80085fc <__libc_init_array+0xc>
 800861e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008622:	4798      	blx	r3
 8008624:	3601      	adds	r6, #1
 8008626:	e7f2      	b.n	800860e <__libc_init_array+0x1e>
 8008628:	08009dec 	.word	0x08009dec
 800862c:	08009dec 	.word	0x08009dec
 8008630:	08009dec 	.word	0x08009dec
 8008634:	08009df0 	.word	0x08009df0

08008638 <memcpy>:
 8008638:	440a      	add	r2, r1
 800863a:	4291      	cmp	r1, r2
 800863c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008640:	d100      	bne.n	8008644 <memcpy+0xc>
 8008642:	4770      	bx	lr
 8008644:	b510      	push	{r4, lr}
 8008646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800864a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800864e:	4291      	cmp	r1, r2
 8008650:	d1f9      	bne.n	8008646 <memcpy+0xe>
 8008652:	bd10      	pop	{r4, pc}

08008654 <memset>:
 8008654:	4402      	add	r2, r0
 8008656:	4603      	mov	r3, r0
 8008658:	4293      	cmp	r3, r2
 800865a:	d100      	bne.n	800865e <memset+0xa>
 800865c:	4770      	bx	lr
 800865e:	f803 1b01 	strb.w	r1, [r3], #1
 8008662:	e7f9      	b.n	8008658 <memset+0x4>

08008664 <iprintf>:
 8008664:	b40f      	push	{r0, r1, r2, r3}
 8008666:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <iprintf+0x2c>)
 8008668:	b513      	push	{r0, r1, r4, lr}
 800866a:	681c      	ldr	r4, [r3, #0]
 800866c:	b124      	cbz	r4, 8008678 <iprintf+0x14>
 800866e:	69a3      	ldr	r3, [r4, #24]
 8008670:	b913      	cbnz	r3, 8008678 <iprintf+0x14>
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fa5e 	bl	8008b34 <__sinit>
 8008678:	ab05      	add	r3, sp, #20
 800867a:	9a04      	ldr	r2, [sp, #16]
 800867c:	68a1      	ldr	r1, [r4, #8]
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	4620      	mov	r0, r4
 8008682:	f000 fc2f 	bl	8008ee4 <_vfiprintf_r>
 8008686:	b002      	add	sp, #8
 8008688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800868c:	b004      	add	sp, #16
 800868e:	4770      	bx	lr
 8008690:	2000000c 	.word	0x2000000c

08008694 <_puts_r>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	460e      	mov	r6, r1
 8008698:	4605      	mov	r5, r0
 800869a:	b118      	cbz	r0, 80086a4 <_puts_r+0x10>
 800869c:	6983      	ldr	r3, [r0, #24]
 800869e:	b90b      	cbnz	r3, 80086a4 <_puts_r+0x10>
 80086a0:	f000 fa48 	bl	8008b34 <__sinit>
 80086a4:	69ab      	ldr	r3, [r5, #24]
 80086a6:	68ac      	ldr	r4, [r5, #8]
 80086a8:	b913      	cbnz	r3, 80086b0 <_puts_r+0x1c>
 80086aa:	4628      	mov	r0, r5
 80086ac:	f000 fa42 	bl	8008b34 <__sinit>
 80086b0:	4b2c      	ldr	r3, [pc, #176]	; (8008764 <_puts_r+0xd0>)
 80086b2:	429c      	cmp	r4, r3
 80086b4:	d120      	bne.n	80086f8 <_puts_r+0x64>
 80086b6:	686c      	ldr	r4, [r5, #4]
 80086b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086ba:	07db      	lsls	r3, r3, #31
 80086bc:	d405      	bmi.n	80086ca <_puts_r+0x36>
 80086be:	89a3      	ldrh	r3, [r4, #12]
 80086c0:	0598      	lsls	r0, r3, #22
 80086c2:	d402      	bmi.n	80086ca <_puts_r+0x36>
 80086c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086c6:	f000 fad3 	bl	8008c70 <__retarget_lock_acquire_recursive>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	0719      	lsls	r1, r3, #28
 80086ce:	d51d      	bpl.n	800870c <_puts_r+0x78>
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	b1db      	cbz	r3, 800870c <_puts_r+0x78>
 80086d4:	3e01      	subs	r6, #1
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086dc:	3b01      	subs	r3, #1
 80086de:	60a3      	str	r3, [r4, #8]
 80086e0:	bb39      	cbnz	r1, 8008732 <_puts_r+0x9e>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da38      	bge.n	8008758 <_puts_r+0xc4>
 80086e6:	4622      	mov	r2, r4
 80086e8:	210a      	movs	r1, #10
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f848 	bl	8008780 <__swbuf_r>
 80086f0:	3001      	adds	r0, #1
 80086f2:	d011      	beq.n	8008718 <_puts_r+0x84>
 80086f4:	250a      	movs	r5, #10
 80086f6:	e011      	b.n	800871c <_puts_r+0x88>
 80086f8:	4b1b      	ldr	r3, [pc, #108]	; (8008768 <_puts_r+0xd4>)
 80086fa:	429c      	cmp	r4, r3
 80086fc:	d101      	bne.n	8008702 <_puts_r+0x6e>
 80086fe:	68ac      	ldr	r4, [r5, #8]
 8008700:	e7da      	b.n	80086b8 <_puts_r+0x24>
 8008702:	4b1a      	ldr	r3, [pc, #104]	; (800876c <_puts_r+0xd8>)
 8008704:	429c      	cmp	r4, r3
 8008706:	bf08      	it	eq
 8008708:	68ec      	ldreq	r4, [r5, #12]
 800870a:	e7d5      	b.n	80086b8 <_puts_r+0x24>
 800870c:	4621      	mov	r1, r4
 800870e:	4628      	mov	r0, r5
 8008710:	f000 f888 	bl	8008824 <__swsetup_r>
 8008714:	2800      	cmp	r0, #0
 8008716:	d0dd      	beq.n	80086d4 <_puts_r+0x40>
 8008718:	f04f 35ff 	mov.w	r5, #4294967295
 800871c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800871e:	07da      	lsls	r2, r3, #31
 8008720:	d405      	bmi.n	800872e <_puts_r+0x9a>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	059b      	lsls	r3, r3, #22
 8008726:	d402      	bmi.n	800872e <_puts_r+0x9a>
 8008728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800872a:	f000 faa2 	bl	8008c72 <__retarget_lock_release_recursive>
 800872e:	4628      	mov	r0, r5
 8008730:	bd70      	pop	{r4, r5, r6, pc}
 8008732:	2b00      	cmp	r3, #0
 8008734:	da04      	bge.n	8008740 <_puts_r+0xac>
 8008736:	69a2      	ldr	r2, [r4, #24]
 8008738:	429a      	cmp	r2, r3
 800873a:	dc06      	bgt.n	800874a <_puts_r+0xb6>
 800873c:	290a      	cmp	r1, #10
 800873e:	d004      	beq.n	800874a <_puts_r+0xb6>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	6022      	str	r2, [r4, #0]
 8008746:	7019      	strb	r1, [r3, #0]
 8008748:	e7c5      	b.n	80086d6 <_puts_r+0x42>
 800874a:	4622      	mov	r2, r4
 800874c:	4628      	mov	r0, r5
 800874e:	f000 f817 	bl	8008780 <__swbuf_r>
 8008752:	3001      	adds	r0, #1
 8008754:	d1bf      	bne.n	80086d6 <_puts_r+0x42>
 8008756:	e7df      	b.n	8008718 <_puts_r+0x84>
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	250a      	movs	r5, #10
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	6022      	str	r2, [r4, #0]
 8008760:	701d      	strb	r5, [r3, #0]
 8008762:	e7db      	b.n	800871c <_puts_r+0x88>
 8008764:	08009d70 	.word	0x08009d70
 8008768:	08009d90 	.word	0x08009d90
 800876c:	08009d50 	.word	0x08009d50

08008770 <puts>:
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <puts+0xc>)
 8008772:	4601      	mov	r1, r0
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	f7ff bf8d 	b.w	8008694 <_puts_r>
 800877a:	bf00      	nop
 800877c:	2000000c 	.word	0x2000000c

08008780 <__swbuf_r>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	460e      	mov	r6, r1
 8008784:	4614      	mov	r4, r2
 8008786:	4605      	mov	r5, r0
 8008788:	b118      	cbz	r0, 8008792 <__swbuf_r+0x12>
 800878a:	6983      	ldr	r3, [r0, #24]
 800878c:	b90b      	cbnz	r3, 8008792 <__swbuf_r+0x12>
 800878e:	f000 f9d1 	bl	8008b34 <__sinit>
 8008792:	4b21      	ldr	r3, [pc, #132]	; (8008818 <__swbuf_r+0x98>)
 8008794:	429c      	cmp	r4, r3
 8008796:	d12b      	bne.n	80087f0 <__swbuf_r+0x70>
 8008798:	686c      	ldr	r4, [r5, #4]
 800879a:	69a3      	ldr	r3, [r4, #24]
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	071a      	lsls	r2, r3, #28
 80087a2:	d52f      	bpl.n	8008804 <__swbuf_r+0x84>
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	b36b      	cbz	r3, 8008804 <__swbuf_r+0x84>
 80087a8:	6923      	ldr	r3, [r4, #16]
 80087aa:	6820      	ldr	r0, [r4, #0]
 80087ac:	1ac0      	subs	r0, r0, r3
 80087ae:	6963      	ldr	r3, [r4, #20]
 80087b0:	b2f6      	uxtb	r6, r6
 80087b2:	4283      	cmp	r3, r0
 80087b4:	4637      	mov	r7, r6
 80087b6:	dc04      	bgt.n	80087c2 <__swbuf_r+0x42>
 80087b8:	4621      	mov	r1, r4
 80087ba:	4628      	mov	r0, r5
 80087bc:	f000 f926 	bl	8008a0c <_fflush_r>
 80087c0:	bb30      	cbnz	r0, 8008810 <__swbuf_r+0x90>
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	60a3      	str	r3, [r4, #8]
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	6022      	str	r2, [r4, #0]
 80087ce:	701e      	strb	r6, [r3, #0]
 80087d0:	6963      	ldr	r3, [r4, #20]
 80087d2:	3001      	adds	r0, #1
 80087d4:	4283      	cmp	r3, r0
 80087d6:	d004      	beq.n	80087e2 <__swbuf_r+0x62>
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	07db      	lsls	r3, r3, #31
 80087dc:	d506      	bpl.n	80087ec <__swbuf_r+0x6c>
 80087de:	2e0a      	cmp	r6, #10
 80087e0:	d104      	bne.n	80087ec <__swbuf_r+0x6c>
 80087e2:	4621      	mov	r1, r4
 80087e4:	4628      	mov	r0, r5
 80087e6:	f000 f911 	bl	8008a0c <_fflush_r>
 80087ea:	b988      	cbnz	r0, 8008810 <__swbuf_r+0x90>
 80087ec:	4638      	mov	r0, r7
 80087ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f0:	4b0a      	ldr	r3, [pc, #40]	; (800881c <__swbuf_r+0x9c>)
 80087f2:	429c      	cmp	r4, r3
 80087f4:	d101      	bne.n	80087fa <__swbuf_r+0x7a>
 80087f6:	68ac      	ldr	r4, [r5, #8]
 80087f8:	e7cf      	b.n	800879a <__swbuf_r+0x1a>
 80087fa:	4b09      	ldr	r3, [pc, #36]	; (8008820 <__swbuf_r+0xa0>)
 80087fc:	429c      	cmp	r4, r3
 80087fe:	bf08      	it	eq
 8008800:	68ec      	ldreq	r4, [r5, #12]
 8008802:	e7ca      	b.n	800879a <__swbuf_r+0x1a>
 8008804:	4621      	mov	r1, r4
 8008806:	4628      	mov	r0, r5
 8008808:	f000 f80c 	bl	8008824 <__swsetup_r>
 800880c:	2800      	cmp	r0, #0
 800880e:	d0cb      	beq.n	80087a8 <__swbuf_r+0x28>
 8008810:	f04f 37ff 	mov.w	r7, #4294967295
 8008814:	e7ea      	b.n	80087ec <__swbuf_r+0x6c>
 8008816:	bf00      	nop
 8008818:	08009d70 	.word	0x08009d70
 800881c:	08009d90 	.word	0x08009d90
 8008820:	08009d50 	.word	0x08009d50

08008824 <__swsetup_r>:
 8008824:	4b32      	ldr	r3, [pc, #200]	; (80088f0 <__swsetup_r+0xcc>)
 8008826:	b570      	push	{r4, r5, r6, lr}
 8008828:	681d      	ldr	r5, [r3, #0]
 800882a:	4606      	mov	r6, r0
 800882c:	460c      	mov	r4, r1
 800882e:	b125      	cbz	r5, 800883a <__swsetup_r+0x16>
 8008830:	69ab      	ldr	r3, [r5, #24]
 8008832:	b913      	cbnz	r3, 800883a <__swsetup_r+0x16>
 8008834:	4628      	mov	r0, r5
 8008836:	f000 f97d 	bl	8008b34 <__sinit>
 800883a:	4b2e      	ldr	r3, [pc, #184]	; (80088f4 <__swsetup_r+0xd0>)
 800883c:	429c      	cmp	r4, r3
 800883e:	d10f      	bne.n	8008860 <__swsetup_r+0x3c>
 8008840:	686c      	ldr	r4, [r5, #4]
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008848:	0719      	lsls	r1, r3, #28
 800884a:	d42c      	bmi.n	80088a6 <__swsetup_r+0x82>
 800884c:	06dd      	lsls	r5, r3, #27
 800884e:	d411      	bmi.n	8008874 <__swsetup_r+0x50>
 8008850:	2309      	movs	r3, #9
 8008852:	6033      	str	r3, [r6, #0]
 8008854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008858:	81a3      	strh	r3, [r4, #12]
 800885a:	f04f 30ff 	mov.w	r0, #4294967295
 800885e:	e03e      	b.n	80088de <__swsetup_r+0xba>
 8008860:	4b25      	ldr	r3, [pc, #148]	; (80088f8 <__swsetup_r+0xd4>)
 8008862:	429c      	cmp	r4, r3
 8008864:	d101      	bne.n	800886a <__swsetup_r+0x46>
 8008866:	68ac      	ldr	r4, [r5, #8]
 8008868:	e7eb      	b.n	8008842 <__swsetup_r+0x1e>
 800886a:	4b24      	ldr	r3, [pc, #144]	; (80088fc <__swsetup_r+0xd8>)
 800886c:	429c      	cmp	r4, r3
 800886e:	bf08      	it	eq
 8008870:	68ec      	ldreq	r4, [r5, #12]
 8008872:	e7e6      	b.n	8008842 <__swsetup_r+0x1e>
 8008874:	0758      	lsls	r0, r3, #29
 8008876:	d512      	bpl.n	800889e <__swsetup_r+0x7a>
 8008878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800887a:	b141      	cbz	r1, 800888e <__swsetup_r+0x6a>
 800887c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008880:	4299      	cmp	r1, r3
 8008882:	d002      	beq.n	800888a <__swsetup_r+0x66>
 8008884:	4630      	mov	r0, r6
 8008886:	f000 fa59 	bl	8008d3c <_free_r>
 800888a:	2300      	movs	r3, #0
 800888c:	6363      	str	r3, [r4, #52]	; 0x34
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008894:	81a3      	strh	r3, [r4, #12]
 8008896:	2300      	movs	r3, #0
 8008898:	6063      	str	r3, [r4, #4]
 800889a:	6923      	ldr	r3, [r4, #16]
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	f043 0308 	orr.w	r3, r3, #8
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	6923      	ldr	r3, [r4, #16]
 80088a8:	b94b      	cbnz	r3, 80088be <__swsetup_r+0x9a>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088b4:	d003      	beq.n	80088be <__swsetup_r+0x9a>
 80088b6:	4621      	mov	r1, r4
 80088b8:	4630      	mov	r0, r6
 80088ba:	f000 f9ff 	bl	8008cbc <__smakebuf_r>
 80088be:	89a0      	ldrh	r0, [r4, #12]
 80088c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088c4:	f010 0301 	ands.w	r3, r0, #1
 80088c8:	d00a      	beq.n	80088e0 <__swsetup_r+0xbc>
 80088ca:	2300      	movs	r3, #0
 80088cc:	60a3      	str	r3, [r4, #8]
 80088ce:	6963      	ldr	r3, [r4, #20]
 80088d0:	425b      	negs	r3, r3
 80088d2:	61a3      	str	r3, [r4, #24]
 80088d4:	6923      	ldr	r3, [r4, #16]
 80088d6:	b943      	cbnz	r3, 80088ea <__swsetup_r+0xc6>
 80088d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088dc:	d1ba      	bne.n	8008854 <__swsetup_r+0x30>
 80088de:	bd70      	pop	{r4, r5, r6, pc}
 80088e0:	0781      	lsls	r1, r0, #30
 80088e2:	bf58      	it	pl
 80088e4:	6963      	ldrpl	r3, [r4, #20]
 80088e6:	60a3      	str	r3, [r4, #8]
 80088e8:	e7f4      	b.n	80088d4 <__swsetup_r+0xb0>
 80088ea:	2000      	movs	r0, #0
 80088ec:	e7f7      	b.n	80088de <__swsetup_r+0xba>
 80088ee:	bf00      	nop
 80088f0:	2000000c 	.word	0x2000000c
 80088f4:	08009d70 	.word	0x08009d70
 80088f8:	08009d90 	.word	0x08009d90
 80088fc:	08009d50 	.word	0x08009d50

08008900 <__sflush_r>:
 8008900:	898a      	ldrh	r2, [r1, #12]
 8008902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	4605      	mov	r5, r0
 8008908:	0710      	lsls	r0, r2, #28
 800890a:	460c      	mov	r4, r1
 800890c:	d458      	bmi.n	80089c0 <__sflush_r+0xc0>
 800890e:	684b      	ldr	r3, [r1, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	dc05      	bgt.n	8008920 <__sflush_r+0x20>
 8008914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	dc02      	bgt.n	8008920 <__sflush_r+0x20>
 800891a:	2000      	movs	r0, #0
 800891c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008922:	2e00      	cmp	r6, #0
 8008924:	d0f9      	beq.n	800891a <__sflush_r+0x1a>
 8008926:	2300      	movs	r3, #0
 8008928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800892c:	682f      	ldr	r7, [r5, #0]
 800892e:	602b      	str	r3, [r5, #0]
 8008930:	d032      	beq.n	8008998 <__sflush_r+0x98>
 8008932:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	075a      	lsls	r2, r3, #29
 8008938:	d505      	bpl.n	8008946 <__sflush_r+0x46>
 800893a:	6863      	ldr	r3, [r4, #4]
 800893c:	1ac0      	subs	r0, r0, r3
 800893e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008940:	b10b      	cbz	r3, 8008946 <__sflush_r+0x46>
 8008942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008944:	1ac0      	subs	r0, r0, r3
 8008946:	2300      	movs	r3, #0
 8008948:	4602      	mov	r2, r0
 800894a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800894c:	6a21      	ldr	r1, [r4, #32]
 800894e:	4628      	mov	r0, r5
 8008950:	47b0      	blx	r6
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	d106      	bne.n	8008966 <__sflush_r+0x66>
 8008958:	6829      	ldr	r1, [r5, #0]
 800895a:	291d      	cmp	r1, #29
 800895c:	d82c      	bhi.n	80089b8 <__sflush_r+0xb8>
 800895e:	4a2a      	ldr	r2, [pc, #168]	; (8008a08 <__sflush_r+0x108>)
 8008960:	40ca      	lsrs	r2, r1
 8008962:	07d6      	lsls	r6, r2, #31
 8008964:	d528      	bpl.n	80089b8 <__sflush_r+0xb8>
 8008966:	2200      	movs	r2, #0
 8008968:	6062      	str	r2, [r4, #4]
 800896a:	04d9      	lsls	r1, r3, #19
 800896c:	6922      	ldr	r2, [r4, #16]
 800896e:	6022      	str	r2, [r4, #0]
 8008970:	d504      	bpl.n	800897c <__sflush_r+0x7c>
 8008972:	1c42      	adds	r2, r0, #1
 8008974:	d101      	bne.n	800897a <__sflush_r+0x7a>
 8008976:	682b      	ldr	r3, [r5, #0]
 8008978:	b903      	cbnz	r3, 800897c <__sflush_r+0x7c>
 800897a:	6560      	str	r0, [r4, #84]	; 0x54
 800897c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800897e:	602f      	str	r7, [r5, #0]
 8008980:	2900      	cmp	r1, #0
 8008982:	d0ca      	beq.n	800891a <__sflush_r+0x1a>
 8008984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008988:	4299      	cmp	r1, r3
 800898a:	d002      	beq.n	8008992 <__sflush_r+0x92>
 800898c:	4628      	mov	r0, r5
 800898e:	f000 f9d5 	bl	8008d3c <_free_r>
 8008992:	2000      	movs	r0, #0
 8008994:	6360      	str	r0, [r4, #52]	; 0x34
 8008996:	e7c1      	b.n	800891c <__sflush_r+0x1c>
 8008998:	6a21      	ldr	r1, [r4, #32]
 800899a:	2301      	movs	r3, #1
 800899c:	4628      	mov	r0, r5
 800899e:	47b0      	blx	r6
 80089a0:	1c41      	adds	r1, r0, #1
 80089a2:	d1c7      	bne.n	8008934 <__sflush_r+0x34>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0c4      	beq.n	8008934 <__sflush_r+0x34>
 80089aa:	2b1d      	cmp	r3, #29
 80089ac:	d001      	beq.n	80089b2 <__sflush_r+0xb2>
 80089ae:	2b16      	cmp	r3, #22
 80089b0:	d101      	bne.n	80089b6 <__sflush_r+0xb6>
 80089b2:	602f      	str	r7, [r5, #0]
 80089b4:	e7b1      	b.n	800891a <__sflush_r+0x1a>
 80089b6:	89a3      	ldrh	r3, [r4, #12]
 80089b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089bc:	81a3      	strh	r3, [r4, #12]
 80089be:	e7ad      	b.n	800891c <__sflush_r+0x1c>
 80089c0:	690f      	ldr	r7, [r1, #16]
 80089c2:	2f00      	cmp	r7, #0
 80089c4:	d0a9      	beq.n	800891a <__sflush_r+0x1a>
 80089c6:	0793      	lsls	r3, r2, #30
 80089c8:	680e      	ldr	r6, [r1, #0]
 80089ca:	bf08      	it	eq
 80089cc:	694b      	ldreq	r3, [r1, #20]
 80089ce:	600f      	str	r7, [r1, #0]
 80089d0:	bf18      	it	ne
 80089d2:	2300      	movne	r3, #0
 80089d4:	eba6 0807 	sub.w	r8, r6, r7
 80089d8:	608b      	str	r3, [r1, #8]
 80089da:	f1b8 0f00 	cmp.w	r8, #0
 80089de:	dd9c      	ble.n	800891a <__sflush_r+0x1a>
 80089e0:	6a21      	ldr	r1, [r4, #32]
 80089e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089e4:	4643      	mov	r3, r8
 80089e6:	463a      	mov	r2, r7
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b0      	blx	r6
 80089ec:	2800      	cmp	r0, #0
 80089ee:	dc06      	bgt.n	80089fe <__sflush_r+0xfe>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	e78e      	b.n	800891c <__sflush_r+0x1c>
 80089fe:	4407      	add	r7, r0
 8008a00:	eba8 0800 	sub.w	r8, r8, r0
 8008a04:	e7e9      	b.n	80089da <__sflush_r+0xda>
 8008a06:	bf00      	nop
 8008a08:	20400001 	.word	0x20400001

08008a0c <_fflush_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	690b      	ldr	r3, [r1, #16]
 8008a10:	4605      	mov	r5, r0
 8008a12:	460c      	mov	r4, r1
 8008a14:	b913      	cbnz	r3, 8008a1c <_fflush_r+0x10>
 8008a16:	2500      	movs	r5, #0
 8008a18:	4628      	mov	r0, r5
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	b118      	cbz	r0, 8008a26 <_fflush_r+0x1a>
 8008a1e:	6983      	ldr	r3, [r0, #24]
 8008a20:	b90b      	cbnz	r3, 8008a26 <_fflush_r+0x1a>
 8008a22:	f000 f887 	bl	8008b34 <__sinit>
 8008a26:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <_fflush_r+0x6c>)
 8008a28:	429c      	cmp	r4, r3
 8008a2a:	d11b      	bne.n	8008a64 <_fflush_r+0x58>
 8008a2c:	686c      	ldr	r4, [r5, #4]
 8008a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0ef      	beq.n	8008a16 <_fflush_r+0xa>
 8008a36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a38:	07d0      	lsls	r0, r2, #31
 8008a3a:	d404      	bmi.n	8008a46 <_fflush_r+0x3a>
 8008a3c:	0599      	lsls	r1, r3, #22
 8008a3e:	d402      	bmi.n	8008a46 <_fflush_r+0x3a>
 8008a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a42:	f000 f915 	bl	8008c70 <__retarget_lock_acquire_recursive>
 8008a46:	4628      	mov	r0, r5
 8008a48:	4621      	mov	r1, r4
 8008a4a:	f7ff ff59 	bl	8008900 <__sflush_r>
 8008a4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a50:	07da      	lsls	r2, r3, #31
 8008a52:	4605      	mov	r5, r0
 8008a54:	d4e0      	bmi.n	8008a18 <_fflush_r+0xc>
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	059b      	lsls	r3, r3, #22
 8008a5a:	d4dd      	bmi.n	8008a18 <_fflush_r+0xc>
 8008a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a5e:	f000 f908 	bl	8008c72 <__retarget_lock_release_recursive>
 8008a62:	e7d9      	b.n	8008a18 <_fflush_r+0xc>
 8008a64:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <_fflush_r+0x70>)
 8008a66:	429c      	cmp	r4, r3
 8008a68:	d101      	bne.n	8008a6e <_fflush_r+0x62>
 8008a6a:	68ac      	ldr	r4, [r5, #8]
 8008a6c:	e7df      	b.n	8008a2e <_fflush_r+0x22>
 8008a6e:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <_fflush_r+0x74>)
 8008a70:	429c      	cmp	r4, r3
 8008a72:	bf08      	it	eq
 8008a74:	68ec      	ldreq	r4, [r5, #12]
 8008a76:	e7da      	b.n	8008a2e <_fflush_r+0x22>
 8008a78:	08009d70 	.word	0x08009d70
 8008a7c:	08009d90 	.word	0x08009d90
 8008a80:	08009d50 	.word	0x08009d50

08008a84 <std>:
 8008a84:	2300      	movs	r3, #0
 8008a86:	b510      	push	{r4, lr}
 8008a88:	4604      	mov	r4, r0
 8008a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a92:	6083      	str	r3, [r0, #8]
 8008a94:	8181      	strh	r1, [r0, #12]
 8008a96:	6643      	str	r3, [r0, #100]	; 0x64
 8008a98:	81c2      	strh	r2, [r0, #14]
 8008a9a:	6183      	str	r3, [r0, #24]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	2208      	movs	r2, #8
 8008aa0:	305c      	adds	r0, #92	; 0x5c
 8008aa2:	f7ff fdd7 	bl	8008654 <memset>
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <std+0x38>)
 8008aa8:	6263      	str	r3, [r4, #36]	; 0x24
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <std+0x3c>)
 8008aac:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aae:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <std+0x40>)
 8008ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ab2:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <std+0x44>)
 8008ab4:	6224      	str	r4, [r4, #32]
 8008ab6:	6323      	str	r3, [r4, #48]	; 0x30
 8008ab8:	bd10      	pop	{r4, pc}
 8008aba:	bf00      	nop
 8008abc:	0800948d 	.word	0x0800948d
 8008ac0:	080094af 	.word	0x080094af
 8008ac4:	080094e7 	.word	0x080094e7
 8008ac8:	0800950b 	.word	0x0800950b

08008acc <_cleanup_r>:
 8008acc:	4901      	ldr	r1, [pc, #4]	; (8008ad4 <_cleanup_r+0x8>)
 8008ace:	f000 b8af 	b.w	8008c30 <_fwalk_reent>
 8008ad2:	bf00      	nop
 8008ad4:	08008a0d 	.word	0x08008a0d

08008ad8 <__sfmoreglue>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	1e4a      	subs	r2, r1, #1
 8008adc:	2568      	movs	r5, #104	; 0x68
 8008ade:	4355      	muls	r5, r2
 8008ae0:	460e      	mov	r6, r1
 8008ae2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ae6:	f000 f979 	bl	8008ddc <_malloc_r>
 8008aea:	4604      	mov	r4, r0
 8008aec:	b140      	cbz	r0, 8008b00 <__sfmoreglue+0x28>
 8008aee:	2100      	movs	r1, #0
 8008af0:	e9c0 1600 	strd	r1, r6, [r0]
 8008af4:	300c      	adds	r0, #12
 8008af6:	60a0      	str	r0, [r4, #8]
 8008af8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008afc:	f7ff fdaa 	bl	8008654 <memset>
 8008b00:	4620      	mov	r0, r4
 8008b02:	bd70      	pop	{r4, r5, r6, pc}

08008b04 <__sfp_lock_acquire>:
 8008b04:	4801      	ldr	r0, [pc, #4]	; (8008b0c <__sfp_lock_acquire+0x8>)
 8008b06:	f000 b8b3 	b.w	8008c70 <__retarget_lock_acquire_recursive>
 8008b0a:	bf00      	nop
 8008b0c:	20009bb4 	.word	0x20009bb4

08008b10 <__sfp_lock_release>:
 8008b10:	4801      	ldr	r0, [pc, #4]	; (8008b18 <__sfp_lock_release+0x8>)
 8008b12:	f000 b8ae 	b.w	8008c72 <__retarget_lock_release_recursive>
 8008b16:	bf00      	nop
 8008b18:	20009bb4 	.word	0x20009bb4

08008b1c <__sinit_lock_acquire>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__sinit_lock_acquire+0x8>)
 8008b1e:	f000 b8a7 	b.w	8008c70 <__retarget_lock_acquire_recursive>
 8008b22:	bf00      	nop
 8008b24:	20009baf 	.word	0x20009baf

08008b28 <__sinit_lock_release>:
 8008b28:	4801      	ldr	r0, [pc, #4]	; (8008b30 <__sinit_lock_release+0x8>)
 8008b2a:	f000 b8a2 	b.w	8008c72 <__retarget_lock_release_recursive>
 8008b2e:	bf00      	nop
 8008b30:	20009baf 	.word	0x20009baf

08008b34 <__sinit>:
 8008b34:	b510      	push	{r4, lr}
 8008b36:	4604      	mov	r4, r0
 8008b38:	f7ff fff0 	bl	8008b1c <__sinit_lock_acquire>
 8008b3c:	69a3      	ldr	r3, [r4, #24]
 8008b3e:	b11b      	cbz	r3, 8008b48 <__sinit+0x14>
 8008b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b44:	f7ff bff0 	b.w	8008b28 <__sinit_lock_release>
 8008b48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b4c:	6523      	str	r3, [r4, #80]	; 0x50
 8008b4e:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <__sinit+0x68>)
 8008b50:	4a13      	ldr	r2, [pc, #76]	; (8008ba0 <__sinit+0x6c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b56:	42a3      	cmp	r3, r4
 8008b58:	bf04      	itt	eq
 8008b5a:	2301      	moveq	r3, #1
 8008b5c:	61a3      	streq	r3, [r4, #24]
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 f820 	bl	8008ba4 <__sfp>
 8008b64:	6060      	str	r0, [r4, #4]
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 f81c 	bl	8008ba4 <__sfp>
 8008b6c:	60a0      	str	r0, [r4, #8]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f000 f818 	bl	8008ba4 <__sfp>
 8008b74:	2200      	movs	r2, #0
 8008b76:	60e0      	str	r0, [r4, #12]
 8008b78:	2104      	movs	r1, #4
 8008b7a:	6860      	ldr	r0, [r4, #4]
 8008b7c:	f7ff ff82 	bl	8008a84 <std>
 8008b80:	68a0      	ldr	r0, [r4, #8]
 8008b82:	2201      	movs	r2, #1
 8008b84:	2109      	movs	r1, #9
 8008b86:	f7ff ff7d 	bl	8008a84 <std>
 8008b8a:	68e0      	ldr	r0, [r4, #12]
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	2112      	movs	r1, #18
 8008b90:	f7ff ff78 	bl	8008a84 <std>
 8008b94:	2301      	movs	r3, #1
 8008b96:	61a3      	str	r3, [r4, #24]
 8008b98:	e7d2      	b.n	8008b40 <__sinit+0xc>
 8008b9a:	bf00      	nop
 8008b9c:	08009d4c 	.word	0x08009d4c
 8008ba0:	08008acd 	.word	0x08008acd

08008ba4 <__sfp>:
 8008ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba6:	4607      	mov	r7, r0
 8008ba8:	f7ff ffac 	bl	8008b04 <__sfp_lock_acquire>
 8008bac:	4b1e      	ldr	r3, [pc, #120]	; (8008c28 <__sfp+0x84>)
 8008bae:	681e      	ldr	r6, [r3, #0]
 8008bb0:	69b3      	ldr	r3, [r6, #24]
 8008bb2:	b913      	cbnz	r3, 8008bba <__sfp+0x16>
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f7ff ffbd 	bl	8008b34 <__sinit>
 8008bba:	3648      	adds	r6, #72	; 0x48
 8008bbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	d503      	bpl.n	8008bcc <__sfp+0x28>
 8008bc4:	6833      	ldr	r3, [r6, #0]
 8008bc6:	b30b      	cbz	r3, 8008c0c <__sfp+0x68>
 8008bc8:	6836      	ldr	r6, [r6, #0]
 8008bca:	e7f7      	b.n	8008bbc <__sfp+0x18>
 8008bcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bd0:	b9d5      	cbnz	r5, 8008c08 <__sfp+0x64>
 8008bd2:	4b16      	ldr	r3, [pc, #88]	; (8008c2c <__sfp+0x88>)
 8008bd4:	60e3      	str	r3, [r4, #12]
 8008bd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bda:	6665      	str	r5, [r4, #100]	; 0x64
 8008bdc:	f000 f847 	bl	8008c6e <__retarget_lock_init_recursive>
 8008be0:	f7ff ff96 	bl	8008b10 <__sfp_lock_release>
 8008be4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008be8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bec:	6025      	str	r5, [r4, #0]
 8008bee:	61a5      	str	r5, [r4, #24]
 8008bf0:	2208      	movs	r2, #8
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bf8:	f7ff fd2c 	bl	8008654 <memset>
 8008bfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c04:	4620      	mov	r0, r4
 8008c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c08:	3468      	adds	r4, #104	; 0x68
 8008c0a:	e7d9      	b.n	8008bc0 <__sfp+0x1c>
 8008c0c:	2104      	movs	r1, #4
 8008c0e:	4638      	mov	r0, r7
 8008c10:	f7ff ff62 	bl	8008ad8 <__sfmoreglue>
 8008c14:	4604      	mov	r4, r0
 8008c16:	6030      	str	r0, [r6, #0]
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d1d5      	bne.n	8008bc8 <__sfp+0x24>
 8008c1c:	f7ff ff78 	bl	8008b10 <__sfp_lock_release>
 8008c20:	230c      	movs	r3, #12
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	e7ee      	b.n	8008c04 <__sfp+0x60>
 8008c26:	bf00      	nop
 8008c28:	08009d4c 	.word	0x08009d4c
 8008c2c:	ffff0001 	.word	0xffff0001

08008c30 <_fwalk_reent>:
 8008c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c34:	4606      	mov	r6, r0
 8008c36:	4688      	mov	r8, r1
 8008c38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c3c:	2700      	movs	r7, #0
 8008c3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c42:	f1b9 0901 	subs.w	r9, r9, #1
 8008c46:	d505      	bpl.n	8008c54 <_fwalk_reent+0x24>
 8008c48:	6824      	ldr	r4, [r4, #0]
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	d1f7      	bne.n	8008c3e <_fwalk_reent+0xe>
 8008c4e:	4638      	mov	r0, r7
 8008c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c54:	89ab      	ldrh	r3, [r5, #12]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d907      	bls.n	8008c6a <_fwalk_reent+0x3a>
 8008c5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	d003      	beq.n	8008c6a <_fwalk_reent+0x3a>
 8008c62:	4629      	mov	r1, r5
 8008c64:	4630      	mov	r0, r6
 8008c66:	47c0      	blx	r8
 8008c68:	4307      	orrs	r7, r0
 8008c6a:	3568      	adds	r5, #104	; 0x68
 8008c6c:	e7e9      	b.n	8008c42 <_fwalk_reent+0x12>

08008c6e <__retarget_lock_init_recursive>:
 8008c6e:	4770      	bx	lr

08008c70 <__retarget_lock_acquire_recursive>:
 8008c70:	4770      	bx	lr

08008c72 <__retarget_lock_release_recursive>:
 8008c72:	4770      	bx	lr

08008c74 <__swhatbuf_r>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	460e      	mov	r6, r1
 8008c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7c:	2900      	cmp	r1, #0
 8008c7e:	b096      	sub	sp, #88	; 0x58
 8008c80:	4614      	mov	r4, r2
 8008c82:	461d      	mov	r5, r3
 8008c84:	da07      	bge.n	8008c96 <__swhatbuf_r+0x22>
 8008c86:	2300      	movs	r3, #0
 8008c88:	602b      	str	r3, [r5, #0]
 8008c8a:	89b3      	ldrh	r3, [r6, #12]
 8008c8c:	061a      	lsls	r2, r3, #24
 8008c8e:	d410      	bmi.n	8008cb2 <__swhatbuf_r+0x3e>
 8008c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c94:	e00e      	b.n	8008cb4 <__swhatbuf_r+0x40>
 8008c96:	466a      	mov	r2, sp
 8008c98:	f000 fc5e 	bl	8009558 <_fstat_r>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	dbf2      	blt.n	8008c86 <__swhatbuf_r+0x12>
 8008ca0:	9a01      	ldr	r2, [sp, #4]
 8008ca2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ca6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008caa:	425a      	negs	r2, r3
 8008cac:	415a      	adcs	r2, r3
 8008cae:	602a      	str	r2, [r5, #0]
 8008cb0:	e7ee      	b.n	8008c90 <__swhatbuf_r+0x1c>
 8008cb2:	2340      	movs	r3, #64	; 0x40
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	6023      	str	r3, [r4, #0]
 8008cb8:	b016      	add	sp, #88	; 0x58
 8008cba:	bd70      	pop	{r4, r5, r6, pc}

08008cbc <__smakebuf_r>:
 8008cbc:	898b      	ldrh	r3, [r1, #12]
 8008cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cc0:	079d      	lsls	r5, r3, #30
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	d507      	bpl.n	8008cd8 <__smakebuf_r+0x1c>
 8008cc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	6163      	str	r3, [r4, #20]
 8008cd4:	b002      	add	sp, #8
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	ab01      	add	r3, sp, #4
 8008cda:	466a      	mov	r2, sp
 8008cdc:	f7ff ffca 	bl	8008c74 <__swhatbuf_r>
 8008ce0:	9900      	ldr	r1, [sp, #0]
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f000 f879 	bl	8008ddc <_malloc_r>
 8008cea:	b948      	cbnz	r0, 8008d00 <__smakebuf_r+0x44>
 8008cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf0:	059a      	lsls	r2, r3, #22
 8008cf2:	d4ef      	bmi.n	8008cd4 <__smakebuf_r+0x18>
 8008cf4:	f023 0303 	bic.w	r3, r3, #3
 8008cf8:	f043 0302 	orr.w	r3, r3, #2
 8008cfc:	81a3      	strh	r3, [r4, #12]
 8008cfe:	e7e3      	b.n	8008cc8 <__smakebuf_r+0xc>
 8008d00:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <__smakebuf_r+0x7c>)
 8008d02:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	6020      	str	r0, [r4, #0]
 8008d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	9b00      	ldr	r3, [sp, #0]
 8008d10:	6163      	str	r3, [r4, #20]
 8008d12:	9b01      	ldr	r3, [sp, #4]
 8008d14:	6120      	str	r0, [r4, #16]
 8008d16:	b15b      	cbz	r3, 8008d30 <__smakebuf_r+0x74>
 8008d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f000 fc2d 	bl	800957c <_isatty_r>
 8008d22:	b128      	cbz	r0, 8008d30 <__smakebuf_r+0x74>
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	f023 0303 	bic.w	r3, r3, #3
 8008d2a:	f043 0301 	orr.w	r3, r3, #1
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	89a0      	ldrh	r0, [r4, #12]
 8008d32:	4305      	orrs	r5, r0
 8008d34:	81a5      	strh	r5, [r4, #12]
 8008d36:	e7cd      	b.n	8008cd4 <__smakebuf_r+0x18>
 8008d38:	08008acd 	.word	0x08008acd

08008d3c <_free_r>:
 8008d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d3e:	2900      	cmp	r1, #0
 8008d40:	d048      	beq.n	8008dd4 <_free_r+0x98>
 8008d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d46:	9001      	str	r0, [sp, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d4e:	bfb8      	it	lt
 8008d50:	18e4      	addlt	r4, r4, r3
 8008d52:	f000 fc35 	bl	80095c0 <__malloc_lock>
 8008d56:	4a20      	ldr	r2, [pc, #128]	; (8008dd8 <_free_r+0x9c>)
 8008d58:	9801      	ldr	r0, [sp, #4]
 8008d5a:	6813      	ldr	r3, [r2, #0]
 8008d5c:	4615      	mov	r5, r2
 8008d5e:	b933      	cbnz	r3, 8008d6e <_free_r+0x32>
 8008d60:	6063      	str	r3, [r4, #4]
 8008d62:	6014      	str	r4, [r2, #0]
 8008d64:	b003      	add	sp, #12
 8008d66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d6a:	f000 bc2f 	b.w	80095cc <__malloc_unlock>
 8008d6e:	42a3      	cmp	r3, r4
 8008d70:	d90b      	bls.n	8008d8a <_free_r+0x4e>
 8008d72:	6821      	ldr	r1, [r4, #0]
 8008d74:	1862      	adds	r2, r4, r1
 8008d76:	4293      	cmp	r3, r2
 8008d78:	bf04      	itt	eq
 8008d7a:	681a      	ldreq	r2, [r3, #0]
 8008d7c:	685b      	ldreq	r3, [r3, #4]
 8008d7e:	6063      	str	r3, [r4, #4]
 8008d80:	bf04      	itt	eq
 8008d82:	1852      	addeq	r2, r2, r1
 8008d84:	6022      	streq	r2, [r4, #0]
 8008d86:	602c      	str	r4, [r5, #0]
 8008d88:	e7ec      	b.n	8008d64 <_free_r+0x28>
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	b10b      	cbz	r3, 8008d94 <_free_r+0x58>
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	d9fa      	bls.n	8008d8a <_free_r+0x4e>
 8008d94:	6811      	ldr	r1, [r2, #0]
 8008d96:	1855      	adds	r5, r2, r1
 8008d98:	42a5      	cmp	r5, r4
 8008d9a:	d10b      	bne.n	8008db4 <_free_r+0x78>
 8008d9c:	6824      	ldr	r4, [r4, #0]
 8008d9e:	4421      	add	r1, r4
 8008da0:	1854      	adds	r4, r2, r1
 8008da2:	42a3      	cmp	r3, r4
 8008da4:	6011      	str	r1, [r2, #0]
 8008da6:	d1dd      	bne.n	8008d64 <_free_r+0x28>
 8008da8:	681c      	ldr	r4, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	6053      	str	r3, [r2, #4]
 8008dae:	4421      	add	r1, r4
 8008db0:	6011      	str	r1, [r2, #0]
 8008db2:	e7d7      	b.n	8008d64 <_free_r+0x28>
 8008db4:	d902      	bls.n	8008dbc <_free_r+0x80>
 8008db6:	230c      	movs	r3, #12
 8008db8:	6003      	str	r3, [r0, #0]
 8008dba:	e7d3      	b.n	8008d64 <_free_r+0x28>
 8008dbc:	6825      	ldr	r5, [r4, #0]
 8008dbe:	1961      	adds	r1, r4, r5
 8008dc0:	428b      	cmp	r3, r1
 8008dc2:	bf04      	itt	eq
 8008dc4:	6819      	ldreq	r1, [r3, #0]
 8008dc6:	685b      	ldreq	r3, [r3, #4]
 8008dc8:	6063      	str	r3, [r4, #4]
 8008dca:	bf04      	itt	eq
 8008dcc:	1949      	addeq	r1, r1, r5
 8008dce:	6021      	streq	r1, [r4, #0]
 8008dd0:	6054      	str	r4, [r2, #4]
 8008dd2:	e7c7      	b.n	8008d64 <_free_r+0x28>
 8008dd4:	b003      	add	sp, #12
 8008dd6:	bd30      	pop	{r4, r5, pc}
 8008dd8:	20009884 	.word	0x20009884

08008ddc <_malloc_r>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	1ccd      	adds	r5, r1, #3
 8008de0:	f025 0503 	bic.w	r5, r5, #3
 8008de4:	3508      	adds	r5, #8
 8008de6:	2d0c      	cmp	r5, #12
 8008de8:	bf38      	it	cc
 8008dea:	250c      	movcc	r5, #12
 8008dec:	2d00      	cmp	r5, #0
 8008dee:	4606      	mov	r6, r0
 8008df0:	db01      	blt.n	8008df6 <_malloc_r+0x1a>
 8008df2:	42a9      	cmp	r1, r5
 8008df4:	d903      	bls.n	8008dfe <_malloc_r+0x22>
 8008df6:	230c      	movs	r3, #12
 8008df8:	6033      	str	r3, [r6, #0]
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dfe:	f000 fbdf 	bl	80095c0 <__malloc_lock>
 8008e02:	4921      	ldr	r1, [pc, #132]	; (8008e88 <_malloc_r+0xac>)
 8008e04:	680a      	ldr	r2, [r1, #0]
 8008e06:	4614      	mov	r4, r2
 8008e08:	b99c      	cbnz	r4, 8008e32 <_malloc_r+0x56>
 8008e0a:	4f20      	ldr	r7, [pc, #128]	; (8008e8c <_malloc_r+0xb0>)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	b923      	cbnz	r3, 8008e1a <_malloc_r+0x3e>
 8008e10:	4621      	mov	r1, r4
 8008e12:	4630      	mov	r0, r6
 8008e14:	f000 fb2a 	bl	800946c <_sbrk_r>
 8008e18:	6038      	str	r0, [r7, #0]
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f000 fb25 	bl	800946c <_sbrk_r>
 8008e22:	1c43      	adds	r3, r0, #1
 8008e24:	d123      	bne.n	8008e6e <_malloc_r+0x92>
 8008e26:	230c      	movs	r3, #12
 8008e28:	6033      	str	r3, [r6, #0]
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f000 fbce 	bl	80095cc <__malloc_unlock>
 8008e30:	e7e3      	b.n	8008dfa <_malloc_r+0x1e>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	1b5b      	subs	r3, r3, r5
 8008e36:	d417      	bmi.n	8008e68 <_malloc_r+0x8c>
 8008e38:	2b0b      	cmp	r3, #11
 8008e3a:	d903      	bls.n	8008e44 <_malloc_r+0x68>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	441c      	add	r4, r3
 8008e40:	6025      	str	r5, [r4, #0]
 8008e42:	e004      	b.n	8008e4e <_malloc_r+0x72>
 8008e44:	6863      	ldr	r3, [r4, #4]
 8008e46:	42a2      	cmp	r2, r4
 8008e48:	bf0c      	ite	eq
 8008e4a:	600b      	streq	r3, [r1, #0]
 8008e4c:	6053      	strne	r3, [r2, #4]
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f000 fbbc 	bl	80095cc <__malloc_unlock>
 8008e54:	f104 000b 	add.w	r0, r4, #11
 8008e58:	1d23      	adds	r3, r4, #4
 8008e5a:	f020 0007 	bic.w	r0, r0, #7
 8008e5e:	1ac2      	subs	r2, r0, r3
 8008e60:	d0cc      	beq.n	8008dfc <_malloc_r+0x20>
 8008e62:	1a1b      	subs	r3, r3, r0
 8008e64:	50a3      	str	r3, [r4, r2]
 8008e66:	e7c9      	b.n	8008dfc <_malloc_r+0x20>
 8008e68:	4622      	mov	r2, r4
 8008e6a:	6864      	ldr	r4, [r4, #4]
 8008e6c:	e7cc      	b.n	8008e08 <_malloc_r+0x2c>
 8008e6e:	1cc4      	adds	r4, r0, #3
 8008e70:	f024 0403 	bic.w	r4, r4, #3
 8008e74:	42a0      	cmp	r0, r4
 8008e76:	d0e3      	beq.n	8008e40 <_malloc_r+0x64>
 8008e78:	1a21      	subs	r1, r4, r0
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f000 faf6 	bl	800946c <_sbrk_r>
 8008e80:	3001      	adds	r0, #1
 8008e82:	d1dd      	bne.n	8008e40 <_malloc_r+0x64>
 8008e84:	e7cf      	b.n	8008e26 <_malloc_r+0x4a>
 8008e86:	bf00      	nop
 8008e88:	20009884 	.word	0x20009884
 8008e8c:	20009888 	.word	0x20009888

08008e90 <__sfputc_r>:
 8008e90:	6893      	ldr	r3, [r2, #8]
 8008e92:	3b01      	subs	r3, #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	b410      	push	{r4}
 8008e98:	6093      	str	r3, [r2, #8]
 8008e9a:	da08      	bge.n	8008eae <__sfputc_r+0x1e>
 8008e9c:	6994      	ldr	r4, [r2, #24]
 8008e9e:	42a3      	cmp	r3, r4
 8008ea0:	db01      	blt.n	8008ea6 <__sfputc_r+0x16>
 8008ea2:	290a      	cmp	r1, #10
 8008ea4:	d103      	bne.n	8008eae <__sfputc_r+0x1e>
 8008ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eaa:	f7ff bc69 	b.w	8008780 <__swbuf_r>
 8008eae:	6813      	ldr	r3, [r2, #0]
 8008eb0:	1c58      	adds	r0, r3, #1
 8008eb2:	6010      	str	r0, [r2, #0]
 8008eb4:	7019      	strb	r1, [r3, #0]
 8008eb6:	4608      	mov	r0, r1
 8008eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <__sfputs_r>:
 8008ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	460f      	mov	r7, r1
 8008ec4:	4614      	mov	r4, r2
 8008ec6:	18d5      	adds	r5, r2, r3
 8008ec8:	42ac      	cmp	r4, r5
 8008eca:	d101      	bne.n	8008ed0 <__sfputs_r+0x12>
 8008ecc:	2000      	movs	r0, #0
 8008ece:	e007      	b.n	8008ee0 <__sfputs_r+0x22>
 8008ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed4:	463a      	mov	r2, r7
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7ff ffda 	bl	8008e90 <__sfputc_r>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d1f3      	bne.n	8008ec8 <__sfputs_r+0xa>
 8008ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ee4 <_vfiprintf_r>:
 8008ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee8:	460d      	mov	r5, r1
 8008eea:	b09d      	sub	sp, #116	; 0x74
 8008eec:	4614      	mov	r4, r2
 8008eee:	4698      	mov	r8, r3
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	b118      	cbz	r0, 8008efc <_vfiprintf_r+0x18>
 8008ef4:	6983      	ldr	r3, [r0, #24]
 8008ef6:	b90b      	cbnz	r3, 8008efc <_vfiprintf_r+0x18>
 8008ef8:	f7ff fe1c 	bl	8008b34 <__sinit>
 8008efc:	4b89      	ldr	r3, [pc, #548]	; (8009124 <_vfiprintf_r+0x240>)
 8008efe:	429d      	cmp	r5, r3
 8008f00:	d11b      	bne.n	8008f3a <_vfiprintf_r+0x56>
 8008f02:	6875      	ldr	r5, [r6, #4]
 8008f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f06:	07d9      	lsls	r1, r3, #31
 8008f08:	d405      	bmi.n	8008f16 <_vfiprintf_r+0x32>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	059a      	lsls	r2, r3, #22
 8008f0e:	d402      	bmi.n	8008f16 <_vfiprintf_r+0x32>
 8008f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f12:	f7ff fead 	bl	8008c70 <__retarget_lock_acquire_recursive>
 8008f16:	89ab      	ldrh	r3, [r5, #12]
 8008f18:	071b      	lsls	r3, r3, #28
 8008f1a:	d501      	bpl.n	8008f20 <_vfiprintf_r+0x3c>
 8008f1c:	692b      	ldr	r3, [r5, #16]
 8008f1e:	b9eb      	cbnz	r3, 8008f5c <_vfiprintf_r+0x78>
 8008f20:	4629      	mov	r1, r5
 8008f22:	4630      	mov	r0, r6
 8008f24:	f7ff fc7e 	bl	8008824 <__swsetup_r>
 8008f28:	b1c0      	cbz	r0, 8008f5c <_vfiprintf_r+0x78>
 8008f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f2c:	07dc      	lsls	r4, r3, #31
 8008f2e:	d50e      	bpl.n	8008f4e <_vfiprintf_r+0x6a>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	b01d      	add	sp, #116	; 0x74
 8008f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3a:	4b7b      	ldr	r3, [pc, #492]	; (8009128 <_vfiprintf_r+0x244>)
 8008f3c:	429d      	cmp	r5, r3
 8008f3e:	d101      	bne.n	8008f44 <_vfiprintf_r+0x60>
 8008f40:	68b5      	ldr	r5, [r6, #8]
 8008f42:	e7df      	b.n	8008f04 <_vfiprintf_r+0x20>
 8008f44:	4b79      	ldr	r3, [pc, #484]	; (800912c <_vfiprintf_r+0x248>)
 8008f46:	429d      	cmp	r5, r3
 8008f48:	bf08      	it	eq
 8008f4a:	68f5      	ldreq	r5, [r6, #12]
 8008f4c:	e7da      	b.n	8008f04 <_vfiprintf_r+0x20>
 8008f4e:	89ab      	ldrh	r3, [r5, #12]
 8008f50:	0598      	lsls	r0, r3, #22
 8008f52:	d4ed      	bmi.n	8008f30 <_vfiprintf_r+0x4c>
 8008f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f56:	f7ff fe8c 	bl	8008c72 <__retarget_lock_release_recursive>
 8008f5a:	e7e9      	b.n	8008f30 <_vfiprintf_r+0x4c>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f60:	2320      	movs	r3, #32
 8008f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f6a:	2330      	movs	r3, #48	; 0x30
 8008f6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009130 <_vfiprintf_r+0x24c>
 8008f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f74:	f04f 0901 	mov.w	r9, #1
 8008f78:	4623      	mov	r3, r4
 8008f7a:	469a      	mov	sl, r3
 8008f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f80:	b10a      	cbz	r2, 8008f86 <_vfiprintf_r+0xa2>
 8008f82:	2a25      	cmp	r2, #37	; 0x25
 8008f84:	d1f9      	bne.n	8008f7a <_vfiprintf_r+0x96>
 8008f86:	ebba 0b04 	subs.w	fp, sl, r4
 8008f8a:	d00b      	beq.n	8008fa4 <_vfiprintf_r+0xc0>
 8008f8c:	465b      	mov	r3, fp
 8008f8e:	4622      	mov	r2, r4
 8008f90:	4629      	mov	r1, r5
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7ff ff93 	bl	8008ebe <__sfputs_r>
 8008f98:	3001      	adds	r0, #1
 8008f9a:	f000 80aa 	beq.w	80090f2 <_vfiprintf_r+0x20e>
 8008f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa0:	445a      	add	r2, fp
 8008fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80a2 	beq.w	80090f2 <_vfiprintf_r+0x20e>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fb8:	f10a 0a01 	add.w	sl, sl, #1
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	9307      	str	r3, [sp, #28]
 8008fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8008fc6:	4654      	mov	r4, sl
 8008fc8:	2205      	movs	r2, #5
 8008fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fce:	4858      	ldr	r0, [pc, #352]	; (8009130 <_vfiprintf_r+0x24c>)
 8008fd0:	f7f7 f906 	bl	80001e0 <memchr>
 8008fd4:	9a04      	ldr	r2, [sp, #16]
 8008fd6:	b9d8      	cbnz	r0, 8009010 <_vfiprintf_r+0x12c>
 8008fd8:	06d1      	lsls	r1, r2, #27
 8008fda:	bf44      	itt	mi
 8008fdc:	2320      	movmi	r3, #32
 8008fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe2:	0713      	lsls	r3, r2, #28
 8008fe4:	bf44      	itt	mi
 8008fe6:	232b      	movmi	r3, #43	; 0x2b
 8008fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fec:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff2:	d015      	beq.n	8009020 <_vfiprintf_r+0x13c>
 8008ff4:	9a07      	ldr	r2, [sp, #28]
 8008ff6:	4654      	mov	r4, sl
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	f04f 0c0a 	mov.w	ip, #10
 8008ffe:	4621      	mov	r1, r4
 8009000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009004:	3b30      	subs	r3, #48	; 0x30
 8009006:	2b09      	cmp	r3, #9
 8009008:	d94e      	bls.n	80090a8 <_vfiprintf_r+0x1c4>
 800900a:	b1b0      	cbz	r0, 800903a <_vfiprintf_r+0x156>
 800900c:	9207      	str	r2, [sp, #28]
 800900e:	e014      	b.n	800903a <_vfiprintf_r+0x156>
 8009010:	eba0 0308 	sub.w	r3, r0, r8
 8009014:	fa09 f303 	lsl.w	r3, r9, r3
 8009018:	4313      	orrs	r3, r2
 800901a:	9304      	str	r3, [sp, #16]
 800901c:	46a2      	mov	sl, r4
 800901e:	e7d2      	b.n	8008fc6 <_vfiprintf_r+0xe2>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	1d19      	adds	r1, r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	9103      	str	r1, [sp, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	bfbb      	ittet	lt
 800902c:	425b      	neglt	r3, r3
 800902e:	f042 0202 	orrlt.w	r2, r2, #2
 8009032:	9307      	strge	r3, [sp, #28]
 8009034:	9307      	strlt	r3, [sp, #28]
 8009036:	bfb8      	it	lt
 8009038:	9204      	strlt	r2, [sp, #16]
 800903a:	7823      	ldrb	r3, [r4, #0]
 800903c:	2b2e      	cmp	r3, #46	; 0x2e
 800903e:	d10c      	bne.n	800905a <_vfiprintf_r+0x176>
 8009040:	7863      	ldrb	r3, [r4, #1]
 8009042:	2b2a      	cmp	r3, #42	; 0x2a
 8009044:	d135      	bne.n	80090b2 <_vfiprintf_r+0x1ce>
 8009046:	9b03      	ldr	r3, [sp, #12]
 8009048:	1d1a      	adds	r2, r3, #4
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	9203      	str	r2, [sp, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	bfb8      	it	lt
 8009052:	f04f 33ff 	movlt.w	r3, #4294967295
 8009056:	3402      	adds	r4, #2
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009140 <_vfiprintf_r+0x25c>
 800905e:	7821      	ldrb	r1, [r4, #0]
 8009060:	2203      	movs	r2, #3
 8009062:	4650      	mov	r0, sl
 8009064:	f7f7 f8bc 	bl	80001e0 <memchr>
 8009068:	b140      	cbz	r0, 800907c <_vfiprintf_r+0x198>
 800906a:	2340      	movs	r3, #64	; 0x40
 800906c:	eba0 000a 	sub.w	r0, r0, sl
 8009070:	fa03 f000 	lsl.w	r0, r3, r0
 8009074:	9b04      	ldr	r3, [sp, #16]
 8009076:	4303      	orrs	r3, r0
 8009078:	3401      	adds	r4, #1
 800907a:	9304      	str	r3, [sp, #16]
 800907c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009080:	482c      	ldr	r0, [pc, #176]	; (8009134 <_vfiprintf_r+0x250>)
 8009082:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009086:	2206      	movs	r2, #6
 8009088:	f7f7 f8aa 	bl	80001e0 <memchr>
 800908c:	2800      	cmp	r0, #0
 800908e:	d03f      	beq.n	8009110 <_vfiprintf_r+0x22c>
 8009090:	4b29      	ldr	r3, [pc, #164]	; (8009138 <_vfiprintf_r+0x254>)
 8009092:	bb1b      	cbnz	r3, 80090dc <_vfiprintf_r+0x1f8>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	3307      	adds	r3, #7
 8009098:	f023 0307 	bic.w	r3, r3, #7
 800909c:	3308      	adds	r3, #8
 800909e:	9303      	str	r3, [sp, #12]
 80090a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a2:	443b      	add	r3, r7
 80090a4:	9309      	str	r3, [sp, #36]	; 0x24
 80090a6:	e767      	b.n	8008f78 <_vfiprintf_r+0x94>
 80090a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ac:	460c      	mov	r4, r1
 80090ae:	2001      	movs	r0, #1
 80090b0:	e7a5      	b.n	8008ffe <_vfiprintf_r+0x11a>
 80090b2:	2300      	movs	r3, #0
 80090b4:	3401      	adds	r4, #1
 80090b6:	9305      	str	r3, [sp, #20]
 80090b8:	4619      	mov	r1, r3
 80090ba:	f04f 0c0a 	mov.w	ip, #10
 80090be:	4620      	mov	r0, r4
 80090c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090c4:	3a30      	subs	r2, #48	; 0x30
 80090c6:	2a09      	cmp	r2, #9
 80090c8:	d903      	bls.n	80090d2 <_vfiprintf_r+0x1ee>
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d0c5      	beq.n	800905a <_vfiprintf_r+0x176>
 80090ce:	9105      	str	r1, [sp, #20]
 80090d0:	e7c3      	b.n	800905a <_vfiprintf_r+0x176>
 80090d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090d6:	4604      	mov	r4, r0
 80090d8:	2301      	movs	r3, #1
 80090da:	e7f0      	b.n	80090be <_vfiprintf_r+0x1da>
 80090dc:	ab03      	add	r3, sp, #12
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	462a      	mov	r2, r5
 80090e2:	4b16      	ldr	r3, [pc, #88]	; (800913c <_vfiprintf_r+0x258>)
 80090e4:	a904      	add	r1, sp, #16
 80090e6:	4630      	mov	r0, r6
 80090e8:	f3af 8000 	nop.w
 80090ec:	4607      	mov	r7, r0
 80090ee:	1c78      	adds	r0, r7, #1
 80090f0:	d1d6      	bne.n	80090a0 <_vfiprintf_r+0x1bc>
 80090f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090f4:	07d9      	lsls	r1, r3, #31
 80090f6:	d405      	bmi.n	8009104 <_vfiprintf_r+0x220>
 80090f8:	89ab      	ldrh	r3, [r5, #12]
 80090fa:	059a      	lsls	r2, r3, #22
 80090fc:	d402      	bmi.n	8009104 <_vfiprintf_r+0x220>
 80090fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009100:	f7ff fdb7 	bl	8008c72 <__retarget_lock_release_recursive>
 8009104:	89ab      	ldrh	r3, [r5, #12]
 8009106:	065b      	lsls	r3, r3, #25
 8009108:	f53f af12 	bmi.w	8008f30 <_vfiprintf_r+0x4c>
 800910c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800910e:	e711      	b.n	8008f34 <_vfiprintf_r+0x50>
 8009110:	ab03      	add	r3, sp, #12
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	462a      	mov	r2, r5
 8009116:	4b09      	ldr	r3, [pc, #36]	; (800913c <_vfiprintf_r+0x258>)
 8009118:	a904      	add	r1, sp, #16
 800911a:	4630      	mov	r0, r6
 800911c:	f000 f880 	bl	8009220 <_printf_i>
 8009120:	e7e4      	b.n	80090ec <_vfiprintf_r+0x208>
 8009122:	bf00      	nop
 8009124:	08009d70 	.word	0x08009d70
 8009128:	08009d90 	.word	0x08009d90
 800912c:	08009d50 	.word	0x08009d50
 8009130:	08009db0 	.word	0x08009db0
 8009134:	08009dba 	.word	0x08009dba
 8009138:	00000000 	.word	0x00000000
 800913c:	08008ebf 	.word	0x08008ebf
 8009140:	08009db6 	.word	0x08009db6

08009144 <_printf_common>:
 8009144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	4616      	mov	r6, r2
 800914a:	4699      	mov	r9, r3
 800914c:	688a      	ldr	r2, [r1, #8]
 800914e:	690b      	ldr	r3, [r1, #16]
 8009150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009154:	4293      	cmp	r3, r2
 8009156:	bfb8      	it	lt
 8009158:	4613      	movlt	r3, r2
 800915a:	6033      	str	r3, [r6, #0]
 800915c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009160:	4607      	mov	r7, r0
 8009162:	460c      	mov	r4, r1
 8009164:	b10a      	cbz	r2, 800916a <_printf_common+0x26>
 8009166:	3301      	adds	r3, #1
 8009168:	6033      	str	r3, [r6, #0]
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	0699      	lsls	r1, r3, #26
 800916e:	bf42      	ittt	mi
 8009170:	6833      	ldrmi	r3, [r6, #0]
 8009172:	3302      	addmi	r3, #2
 8009174:	6033      	strmi	r3, [r6, #0]
 8009176:	6825      	ldr	r5, [r4, #0]
 8009178:	f015 0506 	ands.w	r5, r5, #6
 800917c:	d106      	bne.n	800918c <_printf_common+0x48>
 800917e:	f104 0a19 	add.w	sl, r4, #25
 8009182:	68e3      	ldr	r3, [r4, #12]
 8009184:	6832      	ldr	r2, [r6, #0]
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	42ab      	cmp	r3, r5
 800918a:	dc26      	bgt.n	80091da <_printf_common+0x96>
 800918c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009190:	1e13      	subs	r3, r2, #0
 8009192:	6822      	ldr	r2, [r4, #0]
 8009194:	bf18      	it	ne
 8009196:	2301      	movne	r3, #1
 8009198:	0692      	lsls	r2, r2, #26
 800919a:	d42b      	bmi.n	80091f4 <_printf_common+0xb0>
 800919c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091a0:	4649      	mov	r1, r9
 80091a2:	4638      	mov	r0, r7
 80091a4:	47c0      	blx	r8
 80091a6:	3001      	adds	r0, #1
 80091a8:	d01e      	beq.n	80091e8 <_printf_common+0xa4>
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	68e5      	ldr	r5, [r4, #12]
 80091ae:	6832      	ldr	r2, [r6, #0]
 80091b0:	f003 0306 	and.w	r3, r3, #6
 80091b4:	2b04      	cmp	r3, #4
 80091b6:	bf08      	it	eq
 80091b8:	1aad      	subeq	r5, r5, r2
 80091ba:	68a3      	ldr	r3, [r4, #8]
 80091bc:	6922      	ldr	r2, [r4, #16]
 80091be:	bf0c      	ite	eq
 80091c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091c4:	2500      	movne	r5, #0
 80091c6:	4293      	cmp	r3, r2
 80091c8:	bfc4      	itt	gt
 80091ca:	1a9b      	subgt	r3, r3, r2
 80091cc:	18ed      	addgt	r5, r5, r3
 80091ce:	2600      	movs	r6, #0
 80091d0:	341a      	adds	r4, #26
 80091d2:	42b5      	cmp	r5, r6
 80091d4:	d11a      	bne.n	800920c <_printf_common+0xc8>
 80091d6:	2000      	movs	r0, #0
 80091d8:	e008      	b.n	80091ec <_printf_common+0xa8>
 80091da:	2301      	movs	r3, #1
 80091dc:	4652      	mov	r2, sl
 80091de:	4649      	mov	r1, r9
 80091e0:	4638      	mov	r0, r7
 80091e2:	47c0      	blx	r8
 80091e4:	3001      	adds	r0, #1
 80091e6:	d103      	bne.n	80091f0 <_printf_common+0xac>
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f0:	3501      	adds	r5, #1
 80091f2:	e7c6      	b.n	8009182 <_printf_common+0x3e>
 80091f4:	18e1      	adds	r1, r4, r3
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	2030      	movs	r0, #48	; 0x30
 80091fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091fe:	4422      	add	r2, r4
 8009200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009204:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009208:	3302      	adds	r3, #2
 800920a:	e7c7      	b.n	800919c <_printf_common+0x58>
 800920c:	2301      	movs	r3, #1
 800920e:	4622      	mov	r2, r4
 8009210:	4649      	mov	r1, r9
 8009212:	4638      	mov	r0, r7
 8009214:	47c0      	blx	r8
 8009216:	3001      	adds	r0, #1
 8009218:	d0e6      	beq.n	80091e8 <_printf_common+0xa4>
 800921a:	3601      	adds	r6, #1
 800921c:	e7d9      	b.n	80091d2 <_printf_common+0x8e>
	...

08009220 <_printf_i>:
 8009220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009224:	460c      	mov	r4, r1
 8009226:	4691      	mov	r9, r2
 8009228:	7e27      	ldrb	r7, [r4, #24]
 800922a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800922c:	2f78      	cmp	r7, #120	; 0x78
 800922e:	4680      	mov	r8, r0
 8009230:	469a      	mov	sl, r3
 8009232:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009236:	d807      	bhi.n	8009248 <_printf_i+0x28>
 8009238:	2f62      	cmp	r7, #98	; 0x62
 800923a:	d80a      	bhi.n	8009252 <_printf_i+0x32>
 800923c:	2f00      	cmp	r7, #0
 800923e:	f000 80d8 	beq.w	80093f2 <_printf_i+0x1d2>
 8009242:	2f58      	cmp	r7, #88	; 0x58
 8009244:	f000 80a3 	beq.w	800938e <_printf_i+0x16e>
 8009248:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800924c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009250:	e03a      	b.n	80092c8 <_printf_i+0xa8>
 8009252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009256:	2b15      	cmp	r3, #21
 8009258:	d8f6      	bhi.n	8009248 <_printf_i+0x28>
 800925a:	a001      	add	r0, pc, #4	; (adr r0, 8009260 <_printf_i+0x40>)
 800925c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009260:	080092b9 	.word	0x080092b9
 8009264:	080092cd 	.word	0x080092cd
 8009268:	08009249 	.word	0x08009249
 800926c:	08009249 	.word	0x08009249
 8009270:	08009249 	.word	0x08009249
 8009274:	08009249 	.word	0x08009249
 8009278:	080092cd 	.word	0x080092cd
 800927c:	08009249 	.word	0x08009249
 8009280:	08009249 	.word	0x08009249
 8009284:	08009249 	.word	0x08009249
 8009288:	08009249 	.word	0x08009249
 800928c:	080093d9 	.word	0x080093d9
 8009290:	080092fd 	.word	0x080092fd
 8009294:	080093bb 	.word	0x080093bb
 8009298:	08009249 	.word	0x08009249
 800929c:	08009249 	.word	0x08009249
 80092a0:	080093fb 	.word	0x080093fb
 80092a4:	08009249 	.word	0x08009249
 80092a8:	080092fd 	.word	0x080092fd
 80092ac:	08009249 	.word	0x08009249
 80092b0:	08009249 	.word	0x08009249
 80092b4:	080093c3 	.word	0x080093c3
 80092b8:	680b      	ldr	r3, [r1, #0]
 80092ba:	1d1a      	adds	r2, r3, #4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	600a      	str	r2, [r1, #0]
 80092c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80092c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092c8:	2301      	movs	r3, #1
 80092ca:	e0a3      	b.n	8009414 <_printf_i+0x1f4>
 80092cc:	6825      	ldr	r5, [r4, #0]
 80092ce:	6808      	ldr	r0, [r1, #0]
 80092d0:	062e      	lsls	r6, r5, #24
 80092d2:	f100 0304 	add.w	r3, r0, #4
 80092d6:	d50a      	bpl.n	80092ee <_printf_i+0xce>
 80092d8:	6805      	ldr	r5, [r0, #0]
 80092da:	600b      	str	r3, [r1, #0]
 80092dc:	2d00      	cmp	r5, #0
 80092de:	da03      	bge.n	80092e8 <_printf_i+0xc8>
 80092e0:	232d      	movs	r3, #45	; 0x2d
 80092e2:	426d      	negs	r5, r5
 80092e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092e8:	485e      	ldr	r0, [pc, #376]	; (8009464 <_printf_i+0x244>)
 80092ea:	230a      	movs	r3, #10
 80092ec:	e019      	b.n	8009322 <_printf_i+0x102>
 80092ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092f2:	6805      	ldr	r5, [r0, #0]
 80092f4:	600b      	str	r3, [r1, #0]
 80092f6:	bf18      	it	ne
 80092f8:	b22d      	sxthne	r5, r5
 80092fa:	e7ef      	b.n	80092dc <_printf_i+0xbc>
 80092fc:	680b      	ldr	r3, [r1, #0]
 80092fe:	6825      	ldr	r5, [r4, #0]
 8009300:	1d18      	adds	r0, r3, #4
 8009302:	6008      	str	r0, [r1, #0]
 8009304:	0628      	lsls	r0, r5, #24
 8009306:	d501      	bpl.n	800930c <_printf_i+0xec>
 8009308:	681d      	ldr	r5, [r3, #0]
 800930a:	e002      	b.n	8009312 <_printf_i+0xf2>
 800930c:	0669      	lsls	r1, r5, #25
 800930e:	d5fb      	bpl.n	8009308 <_printf_i+0xe8>
 8009310:	881d      	ldrh	r5, [r3, #0]
 8009312:	4854      	ldr	r0, [pc, #336]	; (8009464 <_printf_i+0x244>)
 8009314:	2f6f      	cmp	r7, #111	; 0x6f
 8009316:	bf0c      	ite	eq
 8009318:	2308      	moveq	r3, #8
 800931a:	230a      	movne	r3, #10
 800931c:	2100      	movs	r1, #0
 800931e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009322:	6866      	ldr	r6, [r4, #4]
 8009324:	60a6      	str	r6, [r4, #8]
 8009326:	2e00      	cmp	r6, #0
 8009328:	bfa2      	ittt	ge
 800932a:	6821      	ldrge	r1, [r4, #0]
 800932c:	f021 0104 	bicge.w	r1, r1, #4
 8009330:	6021      	strge	r1, [r4, #0]
 8009332:	b90d      	cbnz	r5, 8009338 <_printf_i+0x118>
 8009334:	2e00      	cmp	r6, #0
 8009336:	d04d      	beq.n	80093d4 <_printf_i+0x1b4>
 8009338:	4616      	mov	r6, r2
 800933a:	fbb5 f1f3 	udiv	r1, r5, r3
 800933e:	fb03 5711 	mls	r7, r3, r1, r5
 8009342:	5dc7      	ldrb	r7, [r0, r7]
 8009344:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009348:	462f      	mov	r7, r5
 800934a:	42bb      	cmp	r3, r7
 800934c:	460d      	mov	r5, r1
 800934e:	d9f4      	bls.n	800933a <_printf_i+0x11a>
 8009350:	2b08      	cmp	r3, #8
 8009352:	d10b      	bne.n	800936c <_printf_i+0x14c>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	07df      	lsls	r7, r3, #31
 8009358:	d508      	bpl.n	800936c <_printf_i+0x14c>
 800935a:	6923      	ldr	r3, [r4, #16]
 800935c:	6861      	ldr	r1, [r4, #4]
 800935e:	4299      	cmp	r1, r3
 8009360:	bfde      	ittt	le
 8009362:	2330      	movle	r3, #48	; 0x30
 8009364:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009368:	f106 36ff 	addle.w	r6, r6, #4294967295
 800936c:	1b92      	subs	r2, r2, r6
 800936e:	6122      	str	r2, [r4, #16]
 8009370:	f8cd a000 	str.w	sl, [sp]
 8009374:	464b      	mov	r3, r9
 8009376:	aa03      	add	r2, sp, #12
 8009378:	4621      	mov	r1, r4
 800937a:	4640      	mov	r0, r8
 800937c:	f7ff fee2 	bl	8009144 <_printf_common>
 8009380:	3001      	adds	r0, #1
 8009382:	d14c      	bne.n	800941e <_printf_i+0x1fe>
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	b004      	add	sp, #16
 800938a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800938e:	4835      	ldr	r0, [pc, #212]	; (8009464 <_printf_i+0x244>)
 8009390:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	680e      	ldr	r6, [r1, #0]
 8009398:	061f      	lsls	r7, r3, #24
 800939a:	f856 5b04 	ldr.w	r5, [r6], #4
 800939e:	600e      	str	r6, [r1, #0]
 80093a0:	d514      	bpl.n	80093cc <_printf_i+0x1ac>
 80093a2:	07d9      	lsls	r1, r3, #31
 80093a4:	bf44      	itt	mi
 80093a6:	f043 0320 	orrmi.w	r3, r3, #32
 80093aa:	6023      	strmi	r3, [r4, #0]
 80093ac:	b91d      	cbnz	r5, 80093b6 <_printf_i+0x196>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	f023 0320 	bic.w	r3, r3, #32
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	2310      	movs	r3, #16
 80093b8:	e7b0      	b.n	800931c <_printf_i+0xfc>
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	f043 0320 	orr.w	r3, r3, #32
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	2378      	movs	r3, #120	; 0x78
 80093c4:	4828      	ldr	r0, [pc, #160]	; (8009468 <_printf_i+0x248>)
 80093c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ca:	e7e3      	b.n	8009394 <_printf_i+0x174>
 80093cc:	065e      	lsls	r6, r3, #25
 80093ce:	bf48      	it	mi
 80093d0:	b2ad      	uxthmi	r5, r5
 80093d2:	e7e6      	b.n	80093a2 <_printf_i+0x182>
 80093d4:	4616      	mov	r6, r2
 80093d6:	e7bb      	b.n	8009350 <_printf_i+0x130>
 80093d8:	680b      	ldr	r3, [r1, #0]
 80093da:	6826      	ldr	r6, [r4, #0]
 80093dc:	6960      	ldr	r0, [r4, #20]
 80093de:	1d1d      	adds	r5, r3, #4
 80093e0:	600d      	str	r5, [r1, #0]
 80093e2:	0635      	lsls	r5, r6, #24
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	d501      	bpl.n	80093ec <_printf_i+0x1cc>
 80093e8:	6018      	str	r0, [r3, #0]
 80093ea:	e002      	b.n	80093f2 <_printf_i+0x1d2>
 80093ec:	0671      	lsls	r1, r6, #25
 80093ee:	d5fb      	bpl.n	80093e8 <_printf_i+0x1c8>
 80093f0:	8018      	strh	r0, [r3, #0]
 80093f2:	2300      	movs	r3, #0
 80093f4:	6123      	str	r3, [r4, #16]
 80093f6:	4616      	mov	r6, r2
 80093f8:	e7ba      	b.n	8009370 <_printf_i+0x150>
 80093fa:	680b      	ldr	r3, [r1, #0]
 80093fc:	1d1a      	adds	r2, r3, #4
 80093fe:	600a      	str	r2, [r1, #0]
 8009400:	681e      	ldr	r6, [r3, #0]
 8009402:	6862      	ldr	r2, [r4, #4]
 8009404:	2100      	movs	r1, #0
 8009406:	4630      	mov	r0, r6
 8009408:	f7f6 feea 	bl	80001e0 <memchr>
 800940c:	b108      	cbz	r0, 8009412 <_printf_i+0x1f2>
 800940e:	1b80      	subs	r0, r0, r6
 8009410:	6060      	str	r0, [r4, #4]
 8009412:	6863      	ldr	r3, [r4, #4]
 8009414:	6123      	str	r3, [r4, #16]
 8009416:	2300      	movs	r3, #0
 8009418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800941c:	e7a8      	b.n	8009370 <_printf_i+0x150>
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	4632      	mov	r2, r6
 8009422:	4649      	mov	r1, r9
 8009424:	4640      	mov	r0, r8
 8009426:	47d0      	blx	sl
 8009428:	3001      	adds	r0, #1
 800942a:	d0ab      	beq.n	8009384 <_printf_i+0x164>
 800942c:	6823      	ldr	r3, [r4, #0]
 800942e:	079b      	lsls	r3, r3, #30
 8009430:	d413      	bmi.n	800945a <_printf_i+0x23a>
 8009432:	68e0      	ldr	r0, [r4, #12]
 8009434:	9b03      	ldr	r3, [sp, #12]
 8009436:	4298      	cmp	r0, r3
 8009438:	bfb8      	it	lt
 800943a:	4618      	movlt	r0, r3
 800943c:	e7a4      	b.n	8009388 <_printf_i+0x168>
 800943e:	2301      	movs	r3, #1
 8009440:	4632      	mov	r2, r6
 8009442:	4649      	mov	r1, r9
 8009444:	4640      	mov	r0, r8
 8009446:	47d0      	blx	sl
 8009448:	3001      	adds	r0, #1
 800944a:	d09b      	beq.n	8009384 <_printf_i+0x164>
 800944c:	3501      	adds	r5, #1
 800944e:	68e3      	ldr	r3, [r4, #12]
 8009450:	9903      	ldr	r1, [sp, #12]
 8009452:	1a5b      	subs	r3, r3, r1
 8009454:	42ab      	cmp	r3, r5
 8009456:	dcf2      	bgt.n	800943e <_printf_i+0x21e>
 8009458:	e7eb      	b.n	8009432 <_printf_i+0x212>
 800945a:	2500      	movs	r5, #0
 800945c:	f104 0619 	add.w	r6, r4, #25
 8009460:	e7f5      	b.n	800944e <_printf_i+0x22e>
 8009462:	bf00      	nop
 8009464:	08009dc1 	.word	0x08009dc1
 8009468:	08009dd2 	.word	0x08009dd2

0800946c <_sbrk_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4d06      	ldr	r5, [pc, #24]	; (8009488 <_sbrk_r+0x1c>)
 8009470:	2300      	movs	r3, #0
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	602b      	str	r3, [r5, #0]
 8009478:	f7f8 fa98 	bl	80019ac <_sbrk>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_sbrk_r+0x1a>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_sbrk_r+0x1a>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	20009bb8 	.word	0x20009bb8

0800948c <__sread>:
 800948c:	b510      	push	{r4, lr}
 800948e:	460c      	mov	r4, r1
 8009490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009494:	f000 f8a0 	bl	80095d8 <_read_r>
 8009498:	2800      	cmp	r0, #0
 800949a:	bfab      	itete	ge
 800949c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800949e:	89a3      	ldrhlt	r3, [r4, #12]
 80094a0:	181b      	addge	r3, r3, r0
 80094a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094a6:	bfac      	ite	ge
 80094a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094aa:	81a3      	strhlt	r3, [r4, #12]
 80094ac:	bd10      	pop	{r4, pc}

080094ae <__swrite>:
 80094ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b2:	461f      	mov	r7, r3
 80094b4:	898b      	ldrh	r3, [r1, #12]
 80094b6:	05db      	lsls	r3, r3, #23
 80094b8:	4605      	mov	r5, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	4616      	mov	r6, r2
 80094be:	d505      	bpl.n	80094cc <__swrite+0x1e>
 80094c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c4:	2302      	movs	r3, #2
 80094c6:	2200      	movs	r2, #0
 80094c8:	f000 f868 	bl	800959c <_lseek_r>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094d6:	81a3      	strh	r3, [r4, #12]
 80094d8:	4632      	mov	r2, r6
 80094da:	463b      	mov	r3, r7
 80094dc:	4628      	mov	r0, r5
 80094de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094e2:	f000 b817 	b.w	8009514 <_write_r>

080094e6 <__sseek>:
 80094e6:	b510      	push	{r4, lr}
 80094e8:	460c      	mov	r4, r1
 80094ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ee:	f000 f855 	bl	800959c <_lseek_r>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	89a3      	ldrh	r3, [r4, #12]
 80094f6:	bf15      	itete	ne
 80094f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80094fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009502:	81a3      	strheq	r3, [r4, #12]
 8009504:	bf18      	it	ne
 8009506:	81a3      	strhne	r3, [r4, #12]
 8009508:	bd10      	pop	{r4, pc}

0800950a <__sclose>:
 800950a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800950e:	f000 b813 	b.w	8009538 <_close_r>
	...

08009514 <_write_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4d07      	ldr	r5, [pc, #28]	; (8009534 <_write_r+0x20>)
 8009518:	4604      	mov	r4, r0
 800951a:	4608      	mov	r0, r1
 800951c:	4611      	mov	r1, r2
 800951e:	2200      	movs	r2, #0
 8009520:	602a      	str	r2, [r5, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	f7f8 f83e 	bl	80015a4 <_write>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	d102      	bne.n	8009532 <_write_r+0x1e>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	b103      	cbz	r3, 8009532 <_write_r+0x1e>
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	20009bb8 	.word	0x20009bb8

08009538 <_close_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4d06      	ldr	r5, [pc, #24]	; (8009554 <_close_r+0x1c>)
 800953c:	2300      	movs	r3, #0
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	f7f8 fa24 	bl	8001990 <_close>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_close_r+0x1a>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_close_r+0x1a>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	20009bb8 	.word	0x20009bb8

08009558 <_fstat_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	; (8009578 <_fstat_r+0x20>)
 800955c:	2300      	movs	r3, #0
 800955e:	4604      	mov	r4, r0
 8009560:	4608      	mov	r0, r1
 8009562:	4611      	mov	r1, r2
 8009564:	602b      	str	r3, [r5, #0]
 8009566:	f7f8 fa17 	bl	8001998 <_fstat>
 800956a:	1c43      	adds	r3, r0, #1
 800956c:	d102      	bne.n	8009574 <_fstat_r+0x1c>
 800956e:	682b      	ldr	r3, [r5, #0]
 8009570:	b103      	cbz	r3, 8009574 <_fstat_r+0x1c>
 8009572:	6023      	str	r3, [r4, #0]
 8009574:	bd38      	pop	{r3, r4, r5, pc}
 8009576:	bf00      	nop
 8009578:	20009bb8 	.word	0x20009bb8

0800957c <_isatty_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d06      	ldr	r5, [pc, #24]	; (8009598 <_isatty_r+0x1c>)
 8009580:	2300      	movs	r3, #0
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	602b      	str	r3, [r5, #0]
 8009588:	f7f8 fa0c 	bl	80019a4 <_isatty>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_isatty_r+0x1a>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_isatty_r+0x1a>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20009bb8 	.word	0x20009bb8

0800959c <_lseek_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d07      	ldr	r5, [pc, #28]	; (80095bc <_lseek_r+0x20>)
 80095a0:	4604      	mov	r4, r0
 80095a2:	4608      	mov	r0, r1
 80095a4:	4611      	mov	r1, r2
 80095a6:	2200      	movs	r2, #0
 80095a8:	602a      	str	r2, [r5, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	f7f8 f9fc 	bl	80019a8 <_lseek>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_lseek_r+0x1e>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_lseek_r+0x1e>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	20009bb8 	.word	0x20009bb8

080095c0 <__malloc_lock>:
 80095c0:	4801      	ldr	r0, [pc, #4]	; (80095c8 <__malloc_lock+0x8>)
 80095c2:	f7ff bb55 	b.w	8008c70 <__retarget_lock_acquire_recursive>
 80095c6:	bf00      	nop
 80095c8:	20009bb0 	.word	0x20009bb0

080095cc <__malloc_unlock>:
 80095cc:	4801      	ldr	r0, [pc, #4]	; (80095d4 <__malloc_unlock+0x8>)
 80095ce:	f7ff bb50 	b.w	8008c72 <__retarget_lock_release_recursive>
 80095d2:	bf00      	nop
 80095d4:	20009bb0 	.word	0x20009bb0

080095d8 <_read_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d07      	ldr	r5, [pc, #28]	; (80095f8 <_read_r+0x20>)
 80095dc:	4604      	mov	r4, r0
 80095de:	4608      	mov	r0, r1
 80095e0:	4611      	mov	r1, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	602a      	str	r2, [r5, #0]
 80095e6:	461a      	mov	r2, r3
 80095e8:	f7f8 f9c4 	bl	8001974 <_read>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d102      	bne.n	80095f6 <_read_r+0x1e>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	b103      	cbz	r3, 80095f6 <_read_r+0x1e>
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	20009bb8 	.word	0x20009bb8

080095fc <_init>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr

08009608 <_fini>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	bf00      	nop
 800960c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960e:	bc08      	pop	{r3}
 8009610:	469e      	mov	lr, r3
 8009612:	4770      	bx	lr
