
F411RE_Car_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e368  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800e508  0800e508  0001e508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebc0  0800ebc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebc0  0800ebc0  0001ebc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebc8  0800ebc8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebc8  0800ebc8  0001ebc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebcc  0800ebcc  0001ebcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ebd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b60  20000070  0800ec40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20009bd0  0800ec40  00029bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043c36  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006943  00000000  00000000  00063cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002610  00000000  00000000  0006a620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023b8  00000000  00000000  0006cc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e1c  00000000  00000000  0006efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000304c6  00000000  00000000  0008fe04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3d36  00000000  00000000  000c02ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174000  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a980  00000000  00000000  00174054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e4f0 	.word	0x0800e4f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800e4f0 	.word	0x0800e4f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800057c:	2006      	movs	r0, #6
 800057e:	f002 facf 	bl	8002b20 <HAL_NVIC_EnableIRQ>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}

08000586 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800058a:	2006      	movs	r0, #6
 800058c:	f002 fae0 	bl	8002b50 <HAL_NVIC_DisableIRQ>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <HCI_TL_SPI_Init+0x90>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a1f      	ldr	r2, [pc, #124]	; (8000624 <HCI_TL_SPI_Init+0x90>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <HCI_TL_SPI_Init+0x90>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005b8:	2301      	movs	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <HCI_TL_SPI_Init+0x94>)
 80005be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	4619      	mov	r1, r3
 80005ca:	4818      	ldr	r0, [pc, #96]	; (800062c <HCI_TL_SPI_Init+0x98>)
 80005cc:	f002 ffd0 	bl	8003570 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	4810      	ldr	r0, [pc, #64]	; (800062c <HCI_TL_SPI_Init+0x98>)
 80005ea:	f002 ffc1 	bl	8003570 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4619      	mov	r1, r3
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <HCI_TL_SPI_Init+0x98>)
 8000606:	f002 ffb3 	bl	8003570 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2102      	movs	r1, #2
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <HCI_TL_SPI_Init+0x98>)
 8000610:	f003 fb7e 	bl	8003d10 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8000614:	f000 ff40 	bl	8001498 <BSP_SPI1_Init>
 8000618:	4603      	mov	r3, r0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	10110000 	.word	0x10110000
 800062c:	40020000 	.word	0x40020000

08000630 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000634:	2101      	movs	r1, #1
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <HCI_TL_SPI_DeInit+0x24>)
 8000638:	f003 fa42 	bl	8003ac0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800063c:	2102      	movs	r1, #2
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <HCI_TL_SPI_DeInit+0x24>)
 8000640:	f003 fa3e 	bl	8003ac0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <HCI_TL_SPI_DeInit+0x24>)
 800064a:	f003 fa39 	bl	8003ac0 <HAL_GPIO_DeInit>
  return 0;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020000 	.word	0x40020000

08000658 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2102      	movs	r1, #2
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <HCI_TL_SPI_Reset+0x38>)
 8000662:	f003 fb55 	bl	8003d10 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <HCI_TL_SPI_Reset+0x38>)
 800066e:	f003 fb4f 	bl	8003d10 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000672:	2005      	movs	r0, #5
 8000674:	f001 fd34 	bl	80020e0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <HCI_TL_SPI_Reset+0x38>)
 8000680:	f003 fb46 	bl	8003d10 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000684:	2005      	movs	r0, #5
 8000686:	f001 fd2b 	bl	80020e0 <HAL_Delay>
  return 0;
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020000 	.word	0x40020000

08000694 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80006a4:	2300      	movs	r3, #0
 80006a6:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006a8:	4a26      	ldr	r2, [pc, #152]	; (8000744 <HCI_TL_SPI_Receive+0xb0>)
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b2:	6018      	str	r0, [r3, #0]
 80006b4:	3304      	adds	r3, #4
 80006b6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80006b8:	f7ff ff65 	bl	8000586 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2102      	movs	r1, #2
 80006c0:	4821      	ldr	r0, [pc, #132]	; (8000748 <HCI_TL_SPI_Receive+0xb4>)
 80006c2:	f003 fb25 	bl	8003d10 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006c6:	f107 010c 	add.w	r1, r7, #12
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2205      	movs	r2, #5
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 ff11 	bl	80014f8 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80006d6:	7c3b      	ldrb	r3, [r7, #16]
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	b21a      	sxth	r2, r3
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b21b      	sxth	r3, r3
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80006e6:	8bfb      	ldrh	r3, [r7, #30]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d01e      	beq.n	800072a <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80006ec:	8bfa      	ldrh	r2, [r7, #30]
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d901      	bls.n	80006f8 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 80006f4:	887b      	ldrh	r3, [r7, #2]
 80006f6:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	777b      	strb	r3, [r7, #29]
 80006fc:	e010      	b.n	8000720 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80006fe:	f107 011b 	add.w	r1, r7, #27
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2201      	movs	r2, #1
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fef5 	bl	80014f8 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 800070e:	7f7b      	ldrb	r3, [r7, #29]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	7efa      	ldrb	r2, [r7, #27]
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800071a:	7f7b      	ldrb	r3, [r7, #29]
 800071c:	3301      	adds	r3, #1
 800071e:	777b      	strb	r3, [r7, #29]
 8000720:	7f7b      	ldrb	r3, [r7, #29]
 8000722:	b29b      	uxth	r3, r3
 8000724:	8bfa      	ldrh	r2, [r7, #30]
 8000726:	429a      	cmp	r2, r3
 8000728:	d8e9      	bhi.n	80006fe <HCI_TL_SPI_Receive+0x6a>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2102      	movs	r1, #2
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <HCI_TL_SPI_Receive+0xb4>)
 8000730:	f003 faee 	bl	8003d10 <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 8000734:	f7ff ff20 	bl	8000578 <HCI_TL_SPI_Enable_IRQ>

  return len;
 8000738:	7f7b      	ldrb	r3, [r7, #29]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3720      	adds	r7, #32
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	0800e508 	.word	0x0800e508
 8000748:	40020000 	.word	0x40020000

0800074c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000758:	4a34      	ldr	r2, [pc, #208]	; (800082c <HCI_TL_SPI_Send+0xe0>)
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000762:	6018      	str	r0, [r3, #0]
 8000764:	3304      	adds	r3, #4
 8000766:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000768:	f001 fcae 	bl	80020c8 <HAL_GetTick>
 800076c:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 800076e:	f7ff ff0a 	bl	8000586 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8000772:	f001 fca9 	bl	80020c8 <HAL_GetTick>
 8000776:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2102      	movs	r1, #2
 8000780:	482b      	ldr	r0, [pc, #172]	; (8000830 <HCI_TL_SPI_Send+0xe4>)
 8000782:	f003 fac5 	bl	8003d10 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000786:	e00a      	b.n	800079e <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000788:	f001 fc9e 	bl	80020c8 <HAL_GetTick>
 800078c:	4602      	mov	r2, r0
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	2b0f      	cmp	r3, #15
 8000794:	d903      	bls.n	800079e <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 8000796:	f06f 0302 	mvn.w	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800079c:	e004      	b.n	80007a8 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 800079e:	f000 f84b 	bl	8000838 <IsDataAvailable>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0ef      	beq.n	8000788 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	f113 0f03 	cmn.w	r3, #3
 80007ae:	d105      	bne.n	80007bc <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2102      	movs	r1, #2
 80007b4:	481e      	ldr	r0, [pc, #120]	; (8000830 <HCI_TL_SPI_Send+0xe4>)
 80007b6:	f003 faab 	bl	8003d10 <HAL_GPIO_WritePin>
      break;
 80007ba:	e030      	b.n	800081e <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007bc:	f107 010c 	add.w	r1, r7, #12
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2205      	movs	r2, #5
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fe96 	bl	80014f8 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	7b7b      	ldrb	r3, [r7, #13]
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b21b      	sxth	r3, r3
 80007da:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80007dc:	8b7a      	ldrh	r2, [r7, #26]
 80007de:	887b      	ldrh	r3, [r7, #2]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d306      	bcc.n	80007f2 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80007e4:	887b      	ldrh	r3, [r7, #2]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4912      	ldr	r1, [pc, #72]	; (8000834 <HCI_TL_SPI_Send+0xe8>)
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 fe84 	bl	80014f8 <BSP_SPI1_SendRecv>
 80007f0:	e002      	b.n	80007f8 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80007f2:	f06f 0301 	mvn.w	r3, #1
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2102      	movs	r1, #2
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <HCI_TL_SPI_Send+0xe4>)
 80007fe:	f003 fa87 	bl	8003d10 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000802:	f001 fc61 	bl	80020c8 <HAL_GetTick>
 8000806:	4602      	mov	r2, r0
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d903      	bls.n	8000818 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000810:	f06f 0302 	mvn.w	r3, #2
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000816:	e002      	b.n	800081e <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	2b00      	cmp	r3, #0
 800081c:	dba9      	blt.n	8000772 <HCI_TL_SPI_Send+0x26>

  HCI_TL_SPI_Enable_IRQ();
 800081e:	f7ff feab 	bl	8000578 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8000822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000824:	4618      	mov	r0, r3
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0800e510 	.word	0x0800e510
 8000830:	40020000 	.word	0x40020000
 8000834:	2000008c 	.word	0x2000008c

08000838 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800083c:	2101      	movs	r1, #1
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <IsDataAvailable+0x1c>)
 8000840:	f003 fa40 	bl	8003cc4 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	2b01      	cmp	r3, #1
 8000848:	bf0c      	ite	eq
 800084a:	2301      	moveq	r3, #1
 800084c:	2300      	movne	r3, #0
 800084e:	b2db      	uxtb	r3, r3
}
 8000850:	4618      	mov	r0, r3
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020000 	.word	0x40020000

08000858 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <hci_tl_lowlevel_init+0x54>)
 8000860:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <hci_tl_lowlevel_init+0x58>)
 8000864:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <hci_tl_lowlevel_init+0x5c>)
 8000868:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <hci_tl_lowlevel_init+0x60>)
 800086c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <hci_tl_lowlevel_init+0x64>)
 8000870:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <hci_tl_lowlevel_init+0x68>)
 8000874:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4618      	mov	r0, r3
 800087a:	f009 fc03 	bl	800a084 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800087e:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000882:	4810      	ldr	r0, [pc, #64]	; (80008c4 <hci_tl_lowlevel_init+0x6c>)
 8000884:	f002 fe1e 	bl	80034c4 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <hci_tl_lowlevel_init+0x70>)
 800088a:	2100      	movs	r1, #0
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <hci_tl_lowlevel_init+0x6c>)
 800088e:	f002 fdff 	bl	8003490 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2105      	movs	r1, #5
 8000896:	2006      	movs	r0, #6
 8000898:	f002 f916 	bl	8002ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800089c:	2006      	movs	r0, #6
 800089e:	f002 f93f 	bl	8002b20 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80008a2:	bf00      	nop
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	08000595 	.word	0x08000595
 80008b0:	08000631 	.word	0x08000631
 80008b4:	0800074d 	.word	0x0800074d
 80008b8:	08000695 	.word	0x08000695
 80008bc:	08000659 	.word	0x08000659
 80008c0:	08001539 	.word	0x08001539
 80008c4:	200098a0 	.word	0x200098a0
 80008c8:	080008cd 	.word	0x080008cd

080008cc <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80008d0:	e005      	b.n	80008de <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80008d2:	2000      	movs	r0, #0
 80008d4:	f009 fd3c 	bl	800a350 <hci_notify_asynch_evt>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d105      	bne.n	80008ea <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80008de:	f7ff ffab 	bl	8000838 <IsDataAvailable>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1f4      	bne.n	80008d2 <hci_tl_lowlevel_isr+0x6>
 80008e8:	e000      	b.n	80008ec <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008ea:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_ADC1_Init+0x98>)
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <MX_ADC1_Init+0x9c>)
 8000906:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_ADC1_Init+0x98>)
 800090a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800090e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_ADC1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_ADC1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_ADC1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_ADC1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_ADC1_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_ADC1_Init+0x98>)
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <MX_ADC1_Init+0xa0>)
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_ADC1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_ADC1_Init+0x98>)
 800093e:	2201      	movs	r2, #1
 8000940:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_ADC1_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_ADC1_Init+0x98>)
 800094c:	2201      	movs	r2, #1
 800094e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_ADC1_Init+0x98>)
 8000952:	f001 fbe9 	bl	8002128 <HAL_ADC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800095c:	f001 f8c6 	bl	8001aec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000960:	2302      	movs	r3, #2
 8000962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000964:	2301      	movs	r3, #1
 8000966:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_ADC1_Init+0x98>)
 8000972:	f001 fd37 	bl	80023e4 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800097c:	f001 f8b6 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200098a8 	.word	0x200098a8
 800098c:	40012000 	.word	0x40012000
 8000990:	0f000001 	.word	0x0f000001

08000994 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <HAL_ADC_MspInit+0xd8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d156      	bne.n	8000a64 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a25      	ldr	r2, [pc, #148]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ee:	2304      	movs	r3, #4
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f2:	2303      	movs	r3, #3
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	481c      	ldr	r0, [pc, #112]	; (8000a74 <HAL_ADC_MspInit+0xe0>)
 8000a02:	f002 fdb5 	bl	8003570 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a08:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_ADC_MspInit+0xe8>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a4a:	f002 f899 	bl	8002b80 <HAL_DMA_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000a54:	f001 f84a 	bl	8001aec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a5e:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40012000 	.word	0x40012000
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	200098f0 	.word	0x200098f0
 8000a7c:	40026410 	.word	0x40026410

08000a80 <BlueNRG_Init>:
/**
  * @brief	Main initialization function. To be called at system startup
  * @note		Initializes BlueNRG-2 SPI Interface, HCI application, GAP and GATT layers
  */
void BlueNRG_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af02      	add	r7, sp, #8
	uint8_t ret;

	/* Initialize SPI1 Peripheral and Bluetooth Host Controller Interface */
	hci_init(APP_UserEvtRx, NULL);
 8000a86:	2100      	movs	r1, #0
 8000a88:	481a      	ldr	r0, [pc, #104]	; (8000af4 <BlueNRG_Init+0x74>)
 8000a8a:	f009 fab9 	bl	800a000 <hci_init>

	/* SAMPLEAPP EXAMPLE - Software reset of device and required 2 second delay */
	hci_reset();
 8000a8e:	f008 fba3 	bl	80091d8 <hci_reset>
	HAL_Delay(2000);
 8000a92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a96:	f001 fb23 	bl	80020e0 <HAL_Delay>

	/* Configure transmit power to high power at -2dBm */
	ret = aci_hal_set_tx_power_level(1, 4);
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f009 f9b7 	bl	8009e10 <aci_hal_set_tx_power_level>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <BlueNRG_Init+0x34>
 8000aac:	2164      	movs	r1, #100	; 0x64
 8000aae:	4812      	ldr	r0, [pc, #72]	; (8000af8 <BlueNRG_Init+0x78>)
 8000ab0:	f001 f822 	bl	8001af8 <assert_failed>

	/* Configure BLE device public address if it will be used */
	Setup_DeviceAddress();
 8000ab4:	f000 f828 	bl	8000b08 <Setup_DeviceAddress>

	/* Initialize BLE GATT layer */
	ret = aci_gatt_init();
 8000ab8:	f008 fdc3 	bl	8009642 <aci_gatt_init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	71fb      	strb	r3, [r7, #7]
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <BlueNRG_Init+0x4e>
 8000ac6:	216b      	movs	r1, #107	; 0x6b
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <BlueNRG_Init+0x78>)
 8000aca:	f001 f815 	bl	8001af8 <assert_failed>
	/** Initialize BLE GAP layer with the following characteristics:
	 * 		+ role = 0x01 -> BLE-FreeRTOS Car is Peripheral device
	 *		+ privacy_enabled = 0x00 -> Privacy disabled
	 *		+ device_name_char_len = 8
	 */
	aci_gap_init(GAP_PERIPHERAL_ROLE, GAP_PRIVACY_DISABLED, 0x08, &hGAPService, &hDevNameChar, &hAppearanceChar);
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <BlueNRG_Init+0x7c>)
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <BlueNRG_Init+0x80>)
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <BlueNRG_Init+0x84>)
 8000ad8:	2208      	movs	r2, #8
 8000ada:	2100      	movs	r1, #0
 8000adc:	2001      	movs	r0, #1
 8000ade:	f008 fd25 	bl	800952c <aci_gap_init>

	/* Configure further the services and characteristics to be included in the GATT database */
	GAP_Peripheral_ConfigService();
 8000ae2:	f000 f861 	bl	8000ba8 <GAP_Peripheral_ConfigService>

	Server_ResetConnectionStatus();
 8000ae6:	f000 fa15 	bl	8000f14 <Server_ResetConnectionStatus>
     */
	aci_gap_init(GAP_CENTRAL_ROLE, GAP_PRIVACY_DISABLED, 0x08, &hGAPService, &hDevNameChar, &hAppearanceChar);

#endif

}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	08001029 	.word	0x08001029
 8000af8:	0800e518 	.word	0x0800e518
 8000afc:	20000192 	.word	0x20000192
 8000b00:	20000190 	.word	0x20000190
 8000b04:	2000018e 	.word	0x2000018e

08000b08 <Setup_DeviceAddress>:
  * @note		This MAC address will only be used to connect with other (Central devices). Central devices
  *					will see this MAC address and use it to connect with this peripheral device. Peripheral will
  *					include the MAC address in the advertisement data.
  */
static void Setup_DeviceAddress(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
	tBleStatus ret;
	uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000b0e:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <Setup_DeviceAddress+0x98>)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b18:	6018      	str	r0, [r3, #0]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	8019      	strh	r1, [r3, #0]
	uint8_t random_number[8];

	/* get a random number from BlueNRG */
	ret = hci_le_rand(random_number);
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4618      	mov	r0, r3
 8000b22:	f008 fbe6 	bl	80092f2 <hci_le_rand>
 8000b26:	4603      	mov	r3, r0
 8000b28:	757b      	strb	r3, [r7, #21]
	if(ret != BLE_STATUS_SUCCESS)
	{
		PRINT_DBG("hci_le_rand() call failed: 0x%02x\r\n", ret);
	}

	discovery_time = 3000; /* at least 3 seconds */
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <Setup_DeviceAddress+0x9c>)
 8000b2c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b30:	801a      	strh	r2, [r3, #0]
	/* setup discovery time with random number */
	for (uint8_t i=0; i<8; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	75fb      	strb	r3, [r7, #23]
 8000b36:	e011      	b.n	8000b5c <Setup_DeviceAddress+0x54>
	{
		discovery_time += (2*random_number[i]);
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
 8000b3a:	f107 0218 	add.w	r2, r7, #24
 8000b3e:	4413      	add	r3, r2
 8000b40:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <Setup_DeviceAddress+0x9c>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <Setup_DeviceAddress+0x9c>)
 8000b54:	801a      	strh	r2, [r3, #0]
	for (uint8_t i=0; i<8; i++)
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	75fb      	strb	r3, [r7, #23]
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	d9ea      	bls.n	8000b38 <Setup_DeviceAddress+0x30>
	}

	/* Setup last 3 bytes of public address with random number */
	bdaddr[0] = (uint8_t) (random_number[0]);
 8000b62:	793b      	ldrb	r3, [r7, #4]
 8000b64:	733b      	strb	r3, [r7, #12]
	bdaddr[1] = (uint8_t) (random_number[3]);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	737b      	strb	r3, [r7, #13]
	bdaddr[2] = (uint8_t) (random_number[6]);
 8000b6a:	7abb      	ldrb	r3, [r7, #10]
 8000b6c:	73bb      	strb	r3, [r7, #14]

	/* Configure public MAC address (bdaddr[3:5] is company specific, while bdaddr[0:2] is device specific) */
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	461a      	mov	r2, r3
 8000b74:	2106      	movs	r1, #6
 8000b76:	2000      	movs	r0, #0
 8000b78:	f009 f8da 	bl	8009d30 <aci_hal_write_config_data>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	757b      	strb	r3, [r7, #21]
	if(ret != BLE_STATUS_SUCCESS)
 8000b80:	7d7b      	ldrb	r3, [r7, #21]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d108      	bne.n	8000b98 <Setup_DeviceAddress+0x90>
	  PRINT_DBG("Setting BD_ADDR failed 0x%02x\r\n", ret);
	}
	else
	{
		PRINT_DBG("Public address: ");
		for (uint8_t i=5; i>0; i--)
 8000b86:	2305      	movs	r3, #5
 8000b88:	75bb      	strb	r3, [r7, #22]
 8000b8a:	e002      	b.n	8000b92 <Setup_DeviceAddress+0x8a>
 8000b8c:	7dbb      	ldrb	r3, [r7, #22]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	75bb      	strb	r3, [r7, #22]
 8000b92:	7dbb      	ldrb	r3, [r7, #22]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f9      	bne.n	8000b8c <Setup_DeviceAddress+0x84>
		  PRINT_DBG("%02X-", bdaddr[i]);
		}
		PRINT_DBG("%02X\r\n", bdaddr[0]);
	}

}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	0800e534 	.word	0x0800e534
 8000ba4:	2000018c 	.word	0x2000018c

08000ba8 <GAP_Peripheral_ConfigService>:
  * @brief	Configure Services and associated Characteristics in GATT Server
  * @note		Must be called as these characteristics are involved with data flow and data
  *					transfer via BLE protocol. Values will be exchanged through characteristics.
  */
static void GAP_Peripheral_ConfigService(void)
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b0b6      	sub	sp, #216	; 0xd8
 8000bac:	af0a      	add	r7, sp, #40	; 0x28
	/* 128-bit UUID Declarations for 1 Service and the 4 Characteristics underneath that Service */

	/* Configure 128-bit Service UUID since Sciton does not have dedicated 16-bit Service
	   UUID with Bluetooth SIG. Service UUID obtained through UUID generator.
	   UUID (uuidgenerator.net): a898328b-03f9-4d63-b11d-51505ae1ce5d */
	const uint8_t service_uuid[16] =
 8000bae:	4bb1      	ldr	r3, [pc, #708]	; (8000e74 <GAP_Peripheral_ConfigService+0x2cc>)
 8000bb0:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x5D,0xCE,0xE1,0x5A,0x50,0x51,0x1D,0xB1,0x63,0x4D,0xF9,0x03,0x8B,0x32,0x98,0xA8};
	const uint8_t char1_uuid[16] =
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <GAP_Peripheral_ConfigService+0x2d0>)
 8000bbc:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x96,0xF7,0x4E,0xBF,0xB3,0x8E,0xB7,0x82,0x36,0x4B,0x7E,0x8B,0x00,0x00,0x00,0x01};
	const uint8_t char2_uuid[16] =
 8000bc6:	4bad      	ldr	r3, [pc, #692]	; (8000e7c <GAP_Peripheral_ConfigService+0x2d4>)
 8000bc8:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000bcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x96,0xF7,0x4E,0xBF,0xB3,0x8E,0xB7,0x82,0x36,0x4B,0x7E,0x8B,0x00,0x00,0x00,0x02};
	const uint8_t char3_uuid[16] =
 8000bd2:	4bab      	ldr	r3, [pc, #684]	; (8000e80 <GAP_Peripheral_ConfigService+0x2d8>)
 8000bd4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000bd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x96,0xF7,0x4E,0xBF,0xB3,0x8E,0xB7,0x82,0x36,0x4B,0x7E,0x8B,0x00,0x00,0x00,0x03};
	const uint8_t char4_uuid[16] =
 8000bde:	4ba9      	ldr	r3, [pc, #676]	; (8000e84 <GAP_Peripheral_ConfigService+0x2dc>)
 8000be0:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000be4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000be6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x96,0xF7,0x4E,0xBF,0xB3,0x8E,0xB7,0x82,0x36,0x4B,0x7E,0x8B,0x00,0x00,0x00,0x04};
	const uint8_t char5_uuid[16] =
 8000bea:	4ba7      	ldr	r3, [pc, #668]	; (8000e88 <GAP_Peripheral_ConfigService+0x2e0>)
 8000bec:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000bf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x96,0xF7,0x4E,0xBF,0xB3,0x8E,0xB7,0x82,0x36,0x4B,0x7E,0x8B,0x00,0x00,0x00,0x05};

	BLUENRG_memcpy(&suuid_object.Service_UUID_128, service_uuid, 16);
 8000bf6:	4ba5      	ldr	r3, [pc, #660]	; (8000e8c <GAP_Peripheral_ConfigService+0x2e4>)
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c00:	6028      	str	r0, [r5, #0]
 8000c02:	6069      	str	r1, [r5, #4]
 8000c04:	60aa      	str	r2, [r5, #8]
 8000c06:	60eb      	str	r3, [r5, #12]

	/* Add the Bluetooth Service based on the configuration above */
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8000c08:	4ba1      	ldr	r3, [pc, #644]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	2201      	movs	r2, #1
 8000c10:	499e      	ldr	r1, [pc, #632]	; (8000e8c <GAP_Peripheral_ConfigService+0x2e4>)
 8000c12:	2002      	movs	r0, #2
 8000c14:	f008 fd3f 	bl	8009696 <aci_gatt_add_service>
		* Fixed characteristic value length							: FIXED_LENGTH
		*
		* This characteristic will be used (...TBD...)
		*/
	/* First characteristic's UUID */
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8000c18:	4b9e      	ldr	r3, [pc, #632]	; (8000e94 <GAP_Peripheral_ConfigService+0x2ec>)
 8000c1a:	461d      	mov	r5, r3
 8000c1c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c22:	6028      	str	r0, [r5, #0]
 8000c24:	6069      	str	r1, [r5, #4]
 8000c26:	60aa      	str	r2, [r5, #8]
 8000c28:	60eb      	str	r3, [r5, #12]
		* Fixed characteristic value length							: FIXED_LENGTH
		*
		* This characteristic will be used (...TBD...)
		*/
	/* Second characteristic's UUID */
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8000c2a:	4b9b      	ldr	r3, [pc, #620]	; (8000e98 <GAP_Peripheral_ConfigService+0x2f0>)
 8000c2c:	461d      	mov	r5, r3
 8000c2e:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c34:	6028      	str	r0, [r5, #0]
 8000c36:	6069      	str	r1, [r5, #4]
 8000c38:	60aa      	str	r2, [r5, #8]
 8000c3a:	60eb      	str	r3, [r5, #12]
		* Fixed characteristic value length							: FIXED_LENGTH
		*
		* This characteristic will be used (...TBD...)
		*/
	/* Third characteristic's UUID */
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8000c3c:	4b97      	ldr	r3, [pc, #604]	; (8000e9c <GAP_Peripheral_ConfigService+0x2f4>)
 8000c3e:	461d      	mov	r5, r3
 8000c40:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c46:	6028      	str	r0, [r5, #0]
 8000c48:	6069      	str	r1, [r5, #4]
 8000c4a:	60aa      	str	r2, [r5, #8]
 8000c4c:	60eb      	str	r3, [r5, #12]
		* Fixed characteristic value length							: FIXED_LENGTH
		*
		* This characteristic will be used (...TBD...)
		*/
	/* Fourth characteristic's UUID */
	BLUENRG_memcpy(&char_obj_4.Char_UUID_128, char4_uuid, 16);
 8000c4e:	4b94      	ldr	r3, [pc, #592]	; (8000ea0 <GAP_Peripheral_ConfigService+0x2f8>)
 8000c50:	461d      	mov	r5, r3
 8000c52:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c58:	6028      	str	r0, [r5, #0]
 8000c5a:	6069      	str	r1, [r5, #4]
 8000c5c:	60aa      	str	r2, [r5, #8]
 8000c5e:	60eb      	str	r3, [r5, #12]
		* Fixed characteristic value length							: FIXED_LENGTH
		*
		* This characteristic will be used (...TBD...)
		*/
	/* Third characteristic's UUID */
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8000c60:	4b90      	ldr	r3, [pc, #576]	; (8000ea4 <GAP_Peripheral_ConfigService+0x2fc>)
 8000c62:	461d      	mov	r5, r3
 8000c64:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c6a:	6028      	str	r0, [r5, #0]
 8000c6c:	6069      	str	r1, [r5, #4]
 8000c6e:	60aa      	str	r2, [r5, #8]
 8000c70:	60eb      	str	r3, [r5, #12]

	/* Configure the four characteristic defined above for the GATT server (peripheral) */\
	/* Characteristic will be used to notify if car went above speed limit */
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, 20, CHAR_PROP_NOTIFY,
 8000c72:	4b87      	ldr	r3, [pc, #540]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000c74:	8818      	ldrh	r0, [r3, #0]
 8000c76:	4b8c      	ldr	r3, [pc, #560]	; (8000ea8 <GAP_Peripheral_ConfigService+0x300>)
 8000c78:	9305      	str	r3, [sp, #20]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9304      	str	r3, [sp, #16]
 8000c7e:	2307      	movs	r3, #7
 8000c80:	9303      	str	r3, [sp, #12]
 8000c82:	2300      	movs	r3, #0
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	2300      	movs	r3, #0
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2314      	movs	r3, #20
 8000c90:	4a80      	ldr	r2, [pc, #512]	; (8000e94 <GAP_Peripheral_ConfigService+0x2ec>)
 8000c92:	2102      	movs	r1, #2
 8000c94:	f008 fdae 	bl	80097f4 <aci_gatt_add_char>
											ATTR_PERMISSION_NONE, GATT_DONT_NOTIFY_EVENTS,
											0x07, CHAR_VALUE_LEN_CONSTANT, &hClientNotify_OverSpeed);

	/* Characteristic will be used to notify if car almost crashed */
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_2, 20, CHAR_PROP_NOTIFY,
 8000c98:	4b7d      	ldr	r3, [pc, #500]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000c9a:	8818      	ldrh	r0, [r3, #0]
 8000c9c:	4b83      	ldr	r3, [pc, #524]	; (8000eac <GAP_Peripheral_ConfigService+0x304>)
 8000c9e:	9305      	str	r3, [sp, #20]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	9304      	str	r3, [sp, #16]
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	9303      	str	r3, [sp, #12]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	2300      	movs	r3, #0
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2314      	movs	r3, #20
 8000cb6:	4a78      	ldr	r2, [pc, #480]	; (8000e98 <GAP_Peripheral_ConfigService+0x2f0>)
 8000cb8:	2102      	movs	r1, #2
 8000cba:	f008 fd9b 	bl	80097f4 <aci_gatt_add_char>
											ATTR_PERMISSION_NONE, GATT_DONT_NOTIFY_EVENTS,
											0x07, CHAR_VALUE_LEN_CONSTANT, &hClientNotify_Crash);

	/* Characteristic will be used to read velocity */
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_3, 20, CHAR_PROP_READ,
 8000cbe:	4b74      	ldr	r3, [pc, #464]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000cc0:	8818      	ldrh	r0, [r3, #0]
 8000cc2:	4b7b      	ldr	r3, [pc, #492]	; (8000eb0 <GAP_Peripheral_ConfigService+0x308>)
 8000cc4:	9305      	str	r3, [sp, #20]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9304      	str	r3, [sp, #16]
 8000cca:	2307      	movs	r3, #7
 8000ccc:	9303      	str	r3, [sp, #12]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2314      	movs	r3, #20
 8000cdc:	4a6f      	ldr	r2, [pc, #444]	; (8000e9c <GAP_Peripheral_ConfigService+0x2f4>)
 8000cde:	2102      	movs	r1, #2
 8000ce0:	f008 fd88 	bl	80097f4 <aci_gatt_add_char>
											ATTR_PERMISSION_NONE, GATT_DONT_NOTIFY_EVENTS,
											0x07, CHAR_VALUE_LEN_CONSTANT, &hClientRead_Velocity);

	/* Characteristic will be used to receive input: N(orth), E(ast), S(outh), W(est), or SS (Stop) */
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_4, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP,
 8000ce4:	4b6a      	ldr	r3, [pc, #424]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000ce6:	8818      	ldrh	r0, [r3, #0]
 8000ce8:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <GAP_Peripheral_ConfigService+0x30c>)
 8000cea:	9305      	str	r3, [sp, #20]
 8000cec:	2300      	movs	r3, #0
 8000cee:	9304      	str	r3, [sp, #16]
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	9303      	str	r3, [sp, #12]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2314      	movs	r3, #20
 8000d02:	4a67      	ldr	r2, [pc, #412]	; (8000ea0 <GAP_Peripheral_ConfigService+0x2f8>)
 8000d04:	2102      	movs	r1, #2
 8000d06:	f008 fd75 	bl	80097f4 <aci_gatt_add_char>
											ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
											0x07, CHAR_VALUE_LEN_CONSTANT, &hClientWrite_Direction);

	/* Characteristic will be used to read the direction previously set/configured */
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_5, 20, CHAR_PROP_READ,
 8000d0a:	4b61      	ldr	r3, [pc, #388]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000d0c:	8818      	ldrh	r0, [r3, #0]
 8000d0e:	4b6a      	ldr	r3, [pc, #424]	; (8000eb8 <GAP_Peripheral_ConfigService+0x310>)
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	2300      	movs	r3, #0
 8000d14:	9304      	str	r3, [sp, #16]
 8000d16:	2307      	movs	r3, #7
 8000d18:	9303      	str	r3, [sp, #12]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	9302      	str	r3, [sp, #8]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	2302      	movs	r3, #2
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2314      	movs	r3, #20
 8000d28:	4a5e      	ldr	r2, [pc, #376]	; (8000ea4 <GAP_Peripheral_ConfigService+0x2fc>)
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	f008 fd62 	bl	80097f4 <aci_gatt_add_char>
											ATTR_PERMISSION_NONE, GATT_DONT_NOTIFY_EVENTS,
											0x07, CHAR_VALUE_LEN_CONSTANT, &hClientRead_VerifyDirection);

	/* CCCD value */
	Char_Desc_Uuid_t DescriptorProperty;
	DescriptorProperty.Char_UUID_16 = CHAR_USER_DESC_UUID;
 8000d30:	f642 1301 	movw	r3, #10497	; 0x2901
 8000d34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	const char char1name[] = {'W','R','N','_','S','P','E','E','D'};
 8000d38:	4a60      	ldr	r2, [pc, #384]	; (8000ebc <GAP_Peripheral_ConfigService+0x314>)
 8000d3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d40:	c303      	stmia	r3!, {r0, r1}
 8000d42:	701a      	strb	r2, [r3, #0]
	const char char2name[] = {'W','R','N','_','C','R','A','S','H'};
 8000d44:	4a5e      	ldr	r2, [pc, #376]	; (8000ec0 <GAP_Peripheral_ConfigService+0x318>)
 8000d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d4c:	c303      	stmia	r3!, {r0, r1}
 8000d4e:	701a      	strb	r2, [r3, #0]
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8000d50:	4a5c      	ldr	r2, [pc, #368]	; (8000ec4 <GAP_Peripheral_ConfigService+0x31c>)
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d58:	c303      	stmia	r3!, {r0, r1}
 8000d5a:	801a      	strh	r2, [r3, #0]
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	0c12      	lsrs	r2, r2, #16
 8000d60:	701a      	strb	r2, [r3, #0]
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8000d62:	4a59      	ldr	r2, [pc, #356]	; (8000ec8 <GAP_Peripheral_ConfigService+0x320>)
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8000d6e:	4a57      	ldr	r2, [pc, #348]	; (8000ecc <GAP_Peripheral_ConfigService+0x324>)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	/* Configure CCCD for the characteristics above (associated with characteristic UUIDs). The CCCD's
     might only be necessary for indicate/notify related events, as the CCCD feature in the GATT server
     allows client to configure server to automatically push new data to the client in the notify/indicate
     characteristics.	*/

	aci_gatt_add_char_desc(hService, hClientNotify_OverSpeed, UUID_TYPE_16, &DescriptorProperty,
 8000d78:	4b45      	ldr	r3, [pc, #276]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000d7a:	8818      	ldrh	r0, [r3, #0]
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <GAP_Peripheral_ConfigService+0x300>)
 8000d7e:	8819      	ldrh	r1, [r3, #0]
 8000d80:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000d84:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <GAP_Peripheral_ConfigService+0x328>)
 8000d86:	9308      	str	r3, [sp, #32]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9307      	str	r3, [sp, #28]
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	9306      	str	r3, [sp, #24]
 8000d90:	2300      	movs	r3, #0
 8000d92:	9305      	str	r3, [sp, #20]
 8000d94:	2301      	movs	r3, #1
 8000d96:	9304      	str	r3, [sp, #16]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9303      	str	r3, [sp, #12]
 8000d9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	2309      	movs	r3, #9
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	4613      	mov	r3, r2
 8000dac:	2201      	movs	r2, #1
 8000dae:	f008 fe0b 	bl	80099c8 <aci_gatt_add_char_desc>
														128, 9, (uint8_t*)char1name, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_ONLY,
														GATT_DONT_NOTIFY_EVENTS, 7, CHAR_VALUE_LEN_CONSTANT, &hFirstCharDesc);
	aci_gatt_add_char_desc(hService, hClientNotify_Crash, UUID_TYPE_16, &DescriptorProperty,
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000db4:	8818      	ldrh	r0, [r3, #0]
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <GAP_Peripheral_ConfigService+0x304>)
 8000db8:	8819      	ldrh	r1, [r3, #0]
 8000dba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dbe:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <GAP_Peripheral_ConfigService+0x32c>)
 8000dc0:	9308      	str	r3, [sp, #32]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9307      	str	r3, [sp, #28]
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	9306      	str	r3, [sp, #24]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9305      	str	r3, [sp, #20]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	9304      	str	r3, [sp, #16]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9303      	str	r3, [sp, #12]
 8000dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dda:	9302      	str	r3, [sp, #8]
 8000ddc:	2309      	movs	r3, #9
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	4613      	mov	r3, r2
 8000de6:	2201      	movs	r2, #1
 8000de8:	f008 fdee 	bl	80099c8 <aci_gatt_add_char_desc>
														128, 9, (uint8_t*)char2name, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_ONLY,
														GATT_DONT_NOTIFY_EVENTS, 7, CHAR_VALUE_LEN_CONSTANT, &hSecondCharDesc);
	aci_gatt_add_char_desc(hService, hClientRead_Velocity, UUID_TYPE_16, &DescriptorProperty,
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000dee:	8818      	ldrh	r0, [r3, #0]
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <GAP_Peripheral_ConfigService+0x308>)
 8000df2:	8819      	ldrh	r1, [r3, #0]
 8000df4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000df8:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <GAP_Peripheral_ConfigService+0x330>)
 8000dfa:	9308      	str	r3, [sp, #32]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	9307      	str	r3, [sp, #28]
 8000e00:	2307      	movs	r3, #7
 8000e02:	9306      	str	r3, [sp, #24]
 8000e04:	2300      	movs	r3, #0
 8000e06:	9305      	str	r3, [sp, #20]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	9304      	str	r3, [sp, #16]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	230b      	movs	r3, #11
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	2201      	movs	r2, #1
 8000e22:	f008 fdd1 	bl	80099c8 <aci_gatt_add_char_desc>
														128, 11, (uint8_t*)char3name, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_ONLY,
														GATT_DONT_NOTIFY_EVENTS, 7, CHAR_VALUE_LEN_CONSTANT, &hThirdCharDesc);
	aci_gatt_add_char_desc(hService, hClientWrite_Direction, UUID_TYPE_16, &DescriptorProperty,
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000e28:	8818      	ldrh	r0, [r3, #0]
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <GAP_Peripheral_ConfigService+0x30c>)
 8000e2c:	8819      	ldrh	r1, [r3, #0]
 8000e2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <GAP_Peripheral_ConfigService+0x334>)
 8000e34:	9308      	str	r3, [sp, #32]
 8000e36:	2300      	movs	r3, #0
 8000e38:	9307      	str	r3, [sp, #28]
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	9306      	str	r3, [sp, #24]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9305      	str	r3, [sp, #20]
 8000e42:	2303      	movs	r3, #3
 8000e44:	9304      	str	r3, [sp, #16]
 8000e46:	2300      	movs	r3, #0
 8000e48:	9303      	str	r3, [sp, #12]
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	230a      	movs	r3, #10
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f008 fdb4 	bl	80099c8 <aci_gatt_add_char_desc>
														128, 10, (uint8_t*)char4name, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_WRITE,
														GATT_DONT_NOTIFY_EVENTS, 7, CHAR_VALUE_LEN_CONSTANT, &hFourthCharDesc);
	aci_gatt_add_char_desc(hService, hClientRead_VerifyDirection, UUID_TYPE_16, &DescriptorProperty,
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000e62:	8818      	ldrh	r0, [r3, #0]
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <GAP_Peripheral_ConfigService+0x310>)
 8000e66:	8819      	ldrh	r1, [r3, #0]
 8000e68:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <GAP_Peripheral_ConfigService+0x338>)
 8000e6e:	9308      	str	r3, [sp, #32]
 8000e70:	2300      	movs	r3, #0
 8000e72:	e037      	b.n	8000ee4 <GAP_Peripheral_ConfigService+0x33c>
 8000e74:	0800e53c 	.word	0x0800e53c
 8000e78:	0800e54c 	.word	0x0800e54c
 8000e7c:	0800e55c 	.word	0x0800e55c
 8000e80:	0800e56c 	.word	0x0800e56c
 8000e84:	0800e57c 	.word	0x0800e57c
 8000e88:	0800e58c 	.word	0x0800e58c
 8000e8c:	20009994 	.word	0x20009994
 8000e90:	20000194 	.word	0x20000194
 8000e94:	20009974 	.word	0x20009974
 8000e98:	200099b4 	.word	0x200099b4
 8000e9c:	20009984 	.word	0x20009984
 8000ea0:	20009950 	.word	0x20009950
 8000ea4:	200099a4 	.word	0x200099a4
 8000ea8:	20000196 	.word	0x20000196
 8000eac:	20000198 	.word	0x20000198
 8000eb0:	2000019a 	.word	0x2000019a
 8000eb4:	2000019c 	.word	0x2000019c
 8000eb8:	2000019e 	.word	0x2000019e
 8000ebc:	0800e59c 	.word	0x0800e59c
 8000ec0:	0800e5a8 	.word	0x0800e5a8
 8000ec4:	0800e5b4 	.word	0x0800e5b4
 8000ec8:	0800e5c0 	.word	0x0800e5c0
 8000ecc:	0800e5cc 	.word	0x0800e5cc
 8000ed0:	200001a0 	.word	0x200001a0
 8000ed4:	200001a2 	.word	0x200001a2
 8000ed8:	200001a4 	.word	0x200001a4
 8000edc:	200001a6 	.word	0x200001a6
 8000ee0:	200001a8 	.word	0x200001a8
 8000ee4:	9307      	str	r3, [sp, #28]
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	9306      	str	r3, [sp, #24]
 8000eea:	2300      	movs	r3, #0
 8000eec:	9305      	str	r3, [sp, #20]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	9304      	str	r3, [sp, #16]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9303      	str	r3, [sp, #12]
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	230b      	movs	r3, #11
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	4613      	mov	r3, r2
 8000f04:	2201      	movs	r2, #1
 8000f06:	f008 fd5f 	bl	80099c8 <aci_gatt_add_char_desc>
	uint16_t char_desc_value = 0;
	aci_gatt_add_char_desc(hService, hClientWrite_Direction, UUID_TYPE_16, &DescriptorProperty, 128, 9,
													(uint8_t*)&char_desc_value, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_WRITE,
													GATT_NOTIFY_ATTRIBUTE_WRITE, 7, CHAR_VALUE_LEN_CONSTANT, &hFourthCharDesc);
	*/
}
 8000f0a:	bf00      	nop
 8000f0c:	37b0      	adds	r7, #176	; 0xb0
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bdb0      	pop	{r4, r5, r7, pc}
 8000f12:	bf00      	nop

08000f14 <Server_ResetConnectionStatus>:
/**
  * @brief	Resets/Deletes the entries of the variable holding the details of the connection with
  *			the GATT client
  */
static void Server_ResetConnectionStatus(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af02      	add	r7, sp, #8
	/* Set to unknown/unregistered device role */
	Conn_Details.deviceRole = 0xFF;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <Server_ResetConnectionStatus+0x70>)
 8000f1c:	22ff      	movs	r2, #255	; 0xff
 8000f1e:	719a      	strb	r2, [r3, #6]

	/* Set all fields to MAX_UINT16_T */
	Conn_Details.connectionhandle = 0xFFFF;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <Server_ResetConnectionStatus+0x70>)
 8000f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f26:	811a      	strh	r2, [r3, #8]
	Conn_Details.BLE_ConnInterval = 0xFFFF;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <Server_ResetConnectionStatus+0x70>)
 8000f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2e:	815a      	strh	r2, [r3, #10]
	Conn_Details.BLE_ConnLatency = 0xFFFF;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <Server_ResetConnectionStatus+0x70>)
 8000f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f36:	819a      	strh	r2, [r3, #12]
	Conn_Details.BLE_SupervisionTimeout = 0xFFFF;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <Server_ResetConnectionStatus+0x70>)
 8000f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f3e:	81da      	strh	r2, [r3, #14]

	/* Set status to not connected */
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <Server_ResetConnectionStatus+0x70>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	741a      	strb	r2, [r3, #16]

	/* Reset 6-byte MAC address */
	BLUENRG_memset(&Conn_Details.BLE_Client_Addr[0], 0, 6);
 8000f46:	2206      	movs	r2, #6
 8000f48:	2100      	movs	r1, #0
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <Server_ResetConnectionStatus+0x70>)
 8000f4c:	f00c fb72 	bl	800d634 <memset>

	/* This value becomes pdTRUE if giving the notification caused a task to unblock, and the unblocked task has a
	   higher priority than the currently running task, in which a context switch should occur */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]

	/* Notify task that manages BLE connections that a disconnection just occurred */
	xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <Server_ResetConnectionStatus+0x74>)
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2101      	movs	r1, #1
 8000f62:	f00b fa6d 	bl	800c440 <xTaskGenericNotifyFromISR>

	/* Force context switch if xHigherPriorityTaskWoken == pdTRUE. This does nothing if xHigherPriorityTaskWoken
   	   is pdFALSE */
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <Server_ResetConnectionStatus+0x68>
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <Server_ResetConnectionStatus+0x78>)
 8000f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	f3bf 8f4f 	dsb	sy
 8000f78:	f3bf 8f6f 	isb	sy
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20009960 	.word	0x20009960
 8000f88:	200099c4 	.word	0x200099c4
 8000f8c:	e000ed04 	.word	0xe000ed04

08000f90 <BlueNRG_MakeDeviceDiscoverable>:
  * @brief	Enables BLE Peripheral device to be discoverable by advertising (with certain parameters)
  * @note		When BLE Peripheral adverises, it does so periodically at certain intervals. At these times
  *					power consumption of device will be high.
  */
void BlueNRG_MakeDeviceDiscoverable(void)
{
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b092      	sub	sp, #72	; 0x48
 8000f94:	af08      	add	r7, sp, #32
	uint8_t ret;

	/* Name that will be broadcasted to Central Devices scanning */
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','-','B','L','E','-','C','a','r'};
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <BlueNRG_MakeDeviceDiscoverable+0x88>)
 8000f98:	f107 0418 	add.w	r4, r7, #24
 8000f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f9e:	c407      	stmia	r4!, {r0, r1, r2}
 8000fa0:	7023      	strb	r3, [r4, #0]

	/* Disable scan response: passive scan */
	hci_le_set_scan_response_data(0, NULL);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f008 f940 	bl	800922a <hci_le_set_scan_response_data>
		 Scan Response Message must contain the following in this specific order:
				Length = 0x11
				Service UUID Type = 0x06 (128-bits Service UUID)
				Service UUID = (UUID taken from above)
	 */
	uint8_t uuidscanresponse[18] =
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <BlueNRG_MakeDeviceDiscoverable+0x8c>)
 8000fac:	1d3c      	adds	r4, r7, #4
 8000fae:	461d      	mov	r5, r3
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	8023      	strh	r3, [r4, #0]
				{0x11,0x06,0x5D,0xCE,0xE1,0x5A,0x50,0x51,0x1D,0xB1,0x63,0x4D,0xF9,0x03,0x8B,0x32,0x98,0xA8};
	hci_le_set_scan_response_data(18, uuidscanresponse);
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	2012      	movs	r0, #18
 8000fbe:	f008 f934 	bl	800922a <hci_le_set_scan_response_data>

	/* Place Bluetooth Peripheral Device in Advertising State */
	ret = aci_gap_set_discoverable(ADV_IND, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9306      	str	r3, [sp, #24]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9305      	str	r3, [sp, #20]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9304      	str	r3, [sp, #16]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9303      	str	r3, [sp, #12]
 8000fd2:	f107 0318 	add.w	r3, r7, #24
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	230d      	movs	r3, #13
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fea:	2000      	movs	r0, #0
 8000fec:	f008 f9b9 	bl	8009362 <aci_gap_set_discoverable>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
																	NO_WHITE_LIST_USE, sizeof(local_name), (uint8_t*)local_name,
																	0, NULL, 0, 0);

	assert_param(ret == BLE_STATUS_SUCCESS);
 8000ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <BlueNRG_MakeDeviceDiscoverable+0x78>
 8000ffe:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <BlueNRG_MakeDeviceDiscoverable+0x90>)
 8001004:	f000 fd78 	bl	8001af8 <assert_failed>

	/* Update status */
	Conn_Details.ConnectionStatus = STATE_AWAITING_CONNECTION;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <BlueNRG_MakeDeviceDiscoverable+0x94>)
 800100a:	2211      	movs	r2, #17
 800100c:	741a      	strb	r2, [r3, #16]
}
 800100e:	bf00      	nop
 8001010:	3728      	adds	r7, #40	; 0x28
 8001012:	46bd      	mov	sp, r7
 8001014:	bdb0      	pop	{r4, r5, r7, pc}
 8001016:	bf00      	nop
 8001018:	0800e5d8 	.word	0x0800e5d8
 800101c:	0800e5e8 	.word	0x0800e5e8
 8001020:	0800e518 	.word	0x0800e518
 8001024:	20009960 	.word	0x20009960

08001028 <APP_UserEvtRx>:
  * @brief	Function taken from STM32Cube\Repository\Packs\STMicroelectronics\X-CUBE-BLE2\3.2.0\Projects\...
  *					...\Nucleo-L476RG\Application\SampleApp\...\gatt_db.c
  *					To be used with hci_init() that must be called before using BLE stack
  */
void APP_UserEvtRx(void *pData)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b04      	cmp	r3, #4
 800103a:	d163      	bne.n	8001104 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b3e      	cmp	r3, #62	; 0x3e
 8001048:	d11e      	bne.n	8001088 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3302      	adds	r3, #2
 800104e:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
 8001054:	e014      	b.n	8001080 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b29a      	uxth	r2, r3
 800105c:	492b      	ldr	r1, [pc, #172]	; (800110c <APP_UserEvtRx+0xe4>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001064:	429a      	cmp	r2, r3
 8001066:	d108      	bne.n	800107a <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001068:	4a28      	ldr	r2, [pc, #160]	; (800110c <APP_UserEvtRx+0xe4>)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4413      	add	r3, r2
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	3201      	adds	r2, #1
 8001076:	4610      	mov	r0, r2
 8001078:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b09      	cmp	r3, #9
 8001084:	d9e7      	bls.n	8001056 <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 8001086:	e03d      	b.n	8001104 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2bff      	cmp	r3, #255	; 0xff
 800108e:	d11e      	bne.n	80010ce <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3302      	adds	r3, #2
 8001094:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e014      	b.n	80010c6 <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	491b      	ldr	r1, [pc, #108]	; (8001110 <APP_UserEvtRx+0xe8>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d108      	bne.n	80010c0 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 80010ae:	4a18      	ldr	r2, [pc, #96]	; (8001110 <APP_UserEvtRx+0xe8>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	3202      	adds	r2, #2
 80010bc:	4610      	mov	r0, r2
 80010be:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	3301      	adds	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b2a      	cmp	r3, #42	; 0x2a
 80010ca:	d9e7      	bls.n	800109c <APP_UserEvtRx+0x74>
}
 80010cc:	e01a      	b.n	8001104 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e014      	b.n	80010fe <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	490e      	ldr	r1, [pc, #56]	; (8001114 <APP_UserEvtRx+0xec>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d108      	bne.n	80010f8 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <APP_UserEvtRx+0xec>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	3202      	adds	r2, #2
 80010f4:	4610      	mov	r0, r2
 80010f6:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	3301      	adds	r3, #1
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	2b06      	cmp	r3, #6
 8001102:	d9e7      	bls.n	80010d4 <APP_UserEvtRx+0xac>
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	0800e980 	.word	0x0800e980
 8001110:	0800e9d0 	.word	0x0800e9d0
 8001114:	0800e948 	.word	0x0800e948

08001118 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b087      	sub	sp, #28
 800111c:	af02      	add	r7, sp, #8
 800111e:	4604      	mov	r4, r0
 8001120:	4608      	mov	r0, r1
 8001122:	4611      	mov	r1, r2
 8001124:	461a      	mov	r2, r3
 8001126:	4623      	mov	r3, r4
 8001128:	71fb      	strb	r3, [r7, #7]
 800112a:	4603      	mov	r3, r0
 800112c:	80bb      	strh	r3, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	4613      	mov	r3, r2
 8001134:	70fb      	strb	r3, [r7, #3]
	/* This callback function/event only saves connection handle */
	Conn_Details.connectionhandle = Connection_Handle;
 8001136:	4a19      	ldr	r2, [pc, #100]	; (800119c <hci_le_connection_complete_event+0x84>)
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	8113      	strh	r3, [r2, #8]

	/* Role should be slave: 0x01 (if 0x00, it is master and incorrect in this example project) */
	Conn_Details.deviceRole = Role;
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <hci_le_connection_complete_event+0x84>)
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	7193      	strb	r3, [r2, #6]

	/* Save connection details in memory */
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <hci_le_connection_complete_event+0x84>)
 8001144:	6a3a      	ldr	r2, [r7, #32]
 8001146:	6811      	ldr	r1, [r2, #0]
 8001148:	6019      	str	r1, [r3, #0]
 800114a:	8892      	ldrh	r2, [r2, #4]
 800114c:	809a      	strh	r2, [r3, #4]
	Conn_Details.BLE_ConnInterval = Conn_Interval;
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <hci_le_connection_complete_event+0x84>)
 8001150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001152:	8153      	strh	r3, [r2, #10]
	Conn_Details.BLE_ConnLatency = Conn_Latency;
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <hci_le_connection_complete_event+0x84>)
 8001156:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001158:	8193      	strh	r3, [r2, #12]
	Conn_Details.BLE_SupervisionTimeout = Supervision_Timeout;
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <hci_le_connection_complete_event+0x84>)
 800115c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800115e:	81d3      	strh	r3, [r2, #14]

	/* Update connection status to connected */
	Conn_Details.ConnectionStatus = STATE_CONNECTED;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <hci_le_connection_complete_event+0x84>)
 8001162:	2299      	movs	r2, #153	; 0x99
 8001164:	741a      	strb	r2, [r3, #16]

	/* This value becomes pdTRUE if giving the notification caused a task to unblock, and the unblocked task has a
	   higher priority than the currently running task, in which a context switch should occur */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]

	/* Notify task that manages BLE connections that a connection was successfully created */
	xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <hci_le_connection_complete_event+0x88>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2300      	movs	r3, #0
 8001176:	2201      	movs	r2, #1
 8001178:	2102      	movs	r1, #2
 800117a:	f00b f961 	bl	800c440 <xTaskGenericNotifyFromISR>

	/* Force context switch if xHigherPriorityTaskWoken == pdTRUE. This does nothing if xHigherPriorityTaskWoken
   	   is pdFALSE */
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <hci_le_connection_complete_event+0x7c>
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <hci_le_connection_complete_event+0x8c>)
 8001186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	f3bf 8f4f 	dsb	sy
 8001190:	f3bf 8f6f 	isb	sy

} /* end hci_le_connection_complete_event() */
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	20009960 	.word	0x20009960
 80011a0:	200099c4 	.word	0x200099c4
 80011a4:	e000ed04 	.word	0xe000ed04

080011a8 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	460b      	mov	r3, r1
 80011b4:	80bb      	strh	r3, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	71bb      	strb	r3, [r7, #6]
	/* Resets all connectivity status details */
	Server_ResetConnectionStatus();
 80011ba:	f7ff feab 	bl	8000f14 <Server_ResetConnectionStatus>

} /* end hci_disconnection_complete_event() */
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <aci_gatt_notification_event>:
 *******************************************************************************/
void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{
 80011c6:	b480      	push	{r7}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4603      	mov	r3, r0
 80011d0:	81fb      	strh	r3, [r7, #14]
 80011d2:	460b      	mov	r3, r1
 80011d4:	81bb      	strh	r3, [r7, #12]
 80011d6:	4613      	mov	r3, r2
 80011d8:	72fb      	strb	r3, [r7, #11]


} /* end aci_gatt_notification_event() */
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b08d      	sub	sp, #52	; 0x34
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	4604      	mov	r4, r0
 80011f0:	4608      	mov	r0, r1
 80011f2:	4611      	mov	r1, r2
 80011f4:	461a      	mov	r2, r3
 80011f6:	4623      	mov	r3, r4
 80011f8:	80fb      	strh	r3, [r7, #6]
 80011fa:	4603      	mov	r3, r0
 80011fc:	80bb      	strh	r3, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	807b      	strh	r3, [r7, #2]
 8001202:	4613      	mov	r3, r2
 8001204:	803b      	strh	r3, [r7, #0]

	/* Determine which characteristic was modified by Client (Indicate and Notify characteristics
	   are modified by Client only if Client acknowledges these features on Server) */
	if(Attr_Handle == hClientWrite_Direction+1)
 8001206:	88ba      	ldrh	r2, [r7, #4]
 8001208:	4b3d      	ldr	r3, [pc, #244]	; (8001300 <aci_gatt_attribute_modified_event+0x118>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	429a      	cmp	r2, r3
 8001210:	d172      	bne.n	80012f8 <aci_gatt_attribute_modified_event+0x110>
	{
		if(Attr_Data_Length == 1)
 8001212:	883b      	ldrh	r3, [r7, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d16f      	bne.n	80012f8 <aci_gatt_attribute_modified_event+0x110>
		{
			if((Attr_Data[0] == 0x4E)||((Attr_Data[0] == 0x6E)))
 8001218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b4e      	cmp	r3, #78	; 0x4e
 800121e:	d003      	beq.n	8001228 <aci_gatt_attribute_modified_event+0x40>
 8001220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b6e      	cmp	r3, #110	; 0x6e
 8001226:	d113      	bne.n	8001250 <aci_gatt_attribute_modified_event+0x68>
			{
				/* If input character is 'N' or 'n' representing North or forward */

				/* Notify ACK to master through fifth characteristic (verify direction) printing 'NORTH'*/
				uint8_t buff[6] = {0x4E, 0x4F, 0x52, 0x54, 0x48, 0x00};
 8001228:	4a36      	ldr	r2, [pc, #216]	; (8001304 <aci_gatt_attribute_modified_event+0x11c>)
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001232:	6018      	str	r0, [r3, #0]
 8001234:	3304      	adds	r3, #4
 8001236:	8019      	strh	r1, [r3, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <aci_gatt_attribute_modified_event+0x120>)
 800123a:	8818      	ldrh	r0, [r3, #0]
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <aci_gatt_attribute_modified_event+0x124>)
 800123e:	8819      	ldrh	r1, [r3, #0]
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2306      	movs	r3, #6
 8001248:	2200      	movs	r2, #0
 800124a:	f008 fce3 	bl	8009c14 <aci_gatt_update_char_value>
			{
 800124e:	e053      	b.n	80012f8 <aci_gatt_attribute_modified_event+0x110>
			}
			else if((Attr_Data[0] == 0x45)||((Attr_Data[0] == 0x65)))
 8001250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b45      	cmp	r3, #69	; 0x45
 8001256:	d003      	beq.n	8001260 <aci_gatt_attribute_modified_event+0x78>
 8001258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b65      	cmp	r3, #101	; 0x65
 800125e:	d113      	bne.n	8001288 <aci_gatt_attribute_modified_event+0xa0>
			{
				/* If input character is 'E' or 'e' representing East or right */

				/* Notify ACK to master through fifth characteristic (verify direction) printing 'EAST' */
				uint8_t buff[6] = {0x45, 0x41, 0x53, 0x54, 0x00, 0x00};
 8001260:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <aci_gatt_attribute_modified_event+0x128>)
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126a:	6018      	str	r0, [r3, #0]
 800126c:	3304      	adds	r3, #4
 800126e:	8019      	strh	r1, [r3, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <aci_gatt_attribute_modified_event+0x120>)
 8001272:	8818      	ldrh	r0, [r3, #0]
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <aci_gatt_attribute_modified_event+0x124>)
 8001276:	8819      	ldrh	r1, [r3, #0]
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2306      	movs	r3, #6
 8001280:	2200      	movs	r2, #0
 8001282:	f008 fcc7 	bl	8009c14 <aci_gatt_update_char_value>
			{
 8001286:	e037      	b.n	80012f8 <aci_gatt_attribute_modified_event+0x110>
			}
			else if((Attr_Data[0] == 0x53)||((Attr_Data[0] == 0x73)))
 8001288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b53      	cmp	r3, #83	; 0x53
 800128e:	d003      	beq.n	8001298 <aci_gatt_attribute_modified_event+0xb0>
 8001290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b73      	cmp	r3, #115	; 0x73
 8001296:	d113      	bne.n	80012c0 <aci_gatt_attribute_modified_event+0xd8>
			{
				/* If input character is 'S' or 's' representing South or backwards */

				/* Notify ACK to master through fifth characteristic (verify direction) printing 'SOUTH' */
				uint8_t buff[6] = {0x53, 0x4F, 0x55, 0x54, 0x48, 0x00};
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <aci_gatt_attribute_modified_event+0x12c>)
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a2:	6018      	str	r0, [r3, #0]
 80012a4:	3304      	adds	r3, #4
 80012a6:	8019      	strh	r1, [r3, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <aci_gatt_attribute_modified_event+0x120>)
 80012aa:	8818      	ldrh	r0, [r3, #0]
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <aci_gatt_attribute_modified_event+0x124>)
 80012ae:	8819      	ldrh	r1, [r3, #0]
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2306      	movs	r3, #6
 80012b8:	2200      	movs	r2, #0
 80012ba:	f008 fcab 	bl	8009c14 <aci_gatt_update_char_value>
			{
 80012be:	e01b      	b.n	80012f8 <aci_gatt_attribute_modified_event+0x110>
			}
			else if((Attr_Data[0] == 0x57)||(Attr_Data[0] == 0x77))
 80012c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b57      	cmp	r3, #87	; 0x57
 80012c6:	d003      	beq.n	80012d0 <aci_gatt_attribute_modified_event+0xe8>
 80012c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b77      	cmp	r3, #119	; 0x77
 80012ce:	d113      	bne.n	80012f8 <aci_gatt_attribute_modified_event+0x110>
			{
				/* If input character is 'W' or 'w' representing West or left */

				/* Notify ACK to master through fifth characteristic (verify direction) printing 'WEST' */
				uint8_t buff[6] = {0x57, 0x45, 0x53, 0x54, 0x00, 0x00};
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <aci_gatt_attribute_modified_event+0x130>)
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012da:	6018      	str	r0, [r3, #0]
 80012dc:	3304      	adds	r3, #4
 80012de:	8019      	strh	r1, [r3, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <aci_gatt_attribute_modified_event+0x120>)
 80012e2:	8818      	ldrh	r0, [r3, #0]
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <aci_gatt_attribute_modified_event+0x124>)
 80012e6:	8819      	ldrh	r1, [r3, #0]
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2306      	movs	r3, #6
 80012f0:	2200      	movs	r2, #0
 80012f2:	f008 fc8f 	bl	8009c14 <aci_gatt_update_char_value>


		}
	}

} /* end aci_gatt_attribute_modified_event() */
 80012f6:	e7ff      	b.n	80012f8 <aci_gatt_attribute_modified_event+0x110>
 80012f8:	bf00      	nop
 80012fa:	372c      	adds	r7, #44	; 0x2c
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}
 8001300:	2000019c 	.word	0x2000019c
 8001304:	0800e5fc 	.word	0x0800e5fc
 8001308:	20000194 	.word	0x20000194
 800130c:	2000019e 	.word	0x2000019e
 8001310:	0800e604 	.word	0x0800e604
 8001314:	0800e60c 	.word	0x0800e60c
 8001318:	0800e614 	.word	0x0800e614

0800131c <FRTOS_Init_Tasks>:


}

void FRTOS_Init_Tasks(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af02      	add	r7, sp, #8
	BaseType_t TaskCreationStatus;

	/* Create task that will maintain BLE Connection */
	TaskCreationStatus = xTaskCreate( Task_ManageBLEConnections,
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <FRTOS_Init_Tasks+0x80>)
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	232e      	movs	r3, #46	; 0x2e
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001330:	491b      	ldr	r1, [pc, #108]	; (80013a0 <FRTOS_Init_Tasks+0x84>)
 8001332:	481c      	ldr	r0, [pc, #112]	; (80013a4 <FRTOS_Init_Tasks+0x88>)
 8001334:	f00a f82f 	bl	800b396 <xTaskCreate>
 8001338:	6078      	str	r0, [r7, #4]
										NULL,
										TASK_PRIO_BLE_CONN,
										&h_TaskBLEConn);

	/* Ensure task creation succeeds */
	assert_param(TaskCreationStatus == pdPASS);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d003      	beq.n	8001348 <FRTOS_Init_Tasks+0x2c>
 8001340:	216a      	movs	r1, #106	; 0x6a
 8001342:	4819      	ldr	r0, [pc, #100]	; (80013a8 <FRTOS_Init_Tasks+0x8c>)
 8001344:	f000 fbd8 	bl	8001af8 <assert_failed>

	/* Create task that will parse BLE Message */
	TaskCreationStatus = xTaskCreate( Task_ParseBLEMessage,
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <FRTOS_Init_Tasks+0x90>)
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	232d      	movs	r3, #45	; 0x2d
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001356:	4916      	ldr	r1, [pc, #88]	; (80013b0 <FRTOS_Init_Tasks+0x94>)
 8001358:	4816      	ldr	r0, [pc, #88]	; (80013b4 <FRTOS_Init_Tasks+0x98>)
 800135a:	f00a f81c 	bl	800b396 <xTaskCreate>
 800135e:	6078      	str	r0, [r7, #4]
										NULL,
										TASK_PRIO_BLE_MSG,
										&h_TaskBLEMsg);

	/* Ensure task creation succeeds */
	assert_param(TaskCreationStatus == pdPASS);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d003      	beq.n	800136e <FRTOS_Init_Tasks+0x52>
 8001366:	2175      	movs	r1, #117	; 0x75
 8001368:	480f      	ldr	r0, [pc, #60]	; (80013a8 <FRTOS_Init_Tasks+0x8c>)
 800136a:	f000 fbc5 	bl	8001af8 <assert_failed>

	TaskCreationStatus = xTaskCreate( Task_BlinkLEDIndicator,
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <FRTOS_Init_Tasks+0x9c>)
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	231e      	movs	r3, #30
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137c:	490f      	ldr	r1, [pc, #60]	; (80013bc <FRTOS_Init_Tasks+0xa0>)
 800137e:	4810      	ldr	r0, [pc, #64]	; (80013c0 <FRTOS_Init_Tasks+0xa4>)
 8001380:	f00a f809 	bl	800b396 <xTaskCreate>
 8001384:	6078      	str	r0, [r7, #4]
										NULL,
										TASK_PRIO_MCULED,
										&h_TaskMcuLED);

	/* Ensure task creation succeeds */
	assert_param(TaskCreationStatus == pdPASS);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d003      	beq.n	8001394 <FRTOS_Init_Tasks+0x78>
 800138c:	217f      	movs	r1, #127	; 0x7f
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <FRTOS_Init_Tasks+0x8c>)
 8001390:	f000 fbb2 	bl	8001af8 <assert_failed>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200099c4 	.word	0x200099c4
 80013a0:	0800e61c 	.word	0x0800e61c
 80013a4:	080013c5 	.word	0x080013c5
 80013a8:	0800e634 	.word	0x0800e634
 80013ac:	200001ac 	.word	0x200001ac
 80013b0:	0800e654 	.word	0x0800e654
 80013b4:	0800142d 	.word	0x0800142d
 80013b8:	200001b0 	.word	0x200001b0
 80013bc:	0800e668 	.word	0x0800e668
 80013c0:	08001459 	.word	0x08001459

080013c4 <Task_ManageBLEConnections>:
 * @param
 * @retval
 * @note
 */
static void Task_ManageBLEConnections(void *argument)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	/* Variable declarations */
	uint32_t NotificationValue = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]

	/* Initialize BLE Peripheral and place in advertising mode at startup to allow establishment
	 * of connections with BLE central devices in proximity.
	 */
	BlueNRG_Init();
 80013d0:	f7ff fb56 	bl	8000a80 <BlueNRG_Init>
	BlueNRG_MakeDeviceDiscoverable();
 80013d4:	f7ff fddc 	bl	8000f90 <BlueNRG_MakeDeviceDiscoverable>

	while(1)
	{
		/* This command is used to process BLE events */
		hci_user_evt_proc();
 80013d8:	f008 ff8e 	bl	800a2f8 <hci_user_evt_proc>

		/* Block indefinitely until a notification to this task was obtained/received */
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	2001      	movs	r0, #1
 80013e2:	f00a ffe5 	bl	800c3b0 <ulTaskNotifyTake>
 80013e6:	60f8      	str	r0, [r7, #12]

		Task0_RSS = uxTaskGetStackHighWaterMark(NULL);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f00a fee9 	bl	800c1c0 <uxTaskGetStackHighWaterMark>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a0c      	ldr	r2, [pc, #48]	; (8001424 <Task_ManageBLEConnections+0x60>)
 80013f2:	6013      	str	r3, [r2, #0]

		if(NotificationValue & FRTOS_TASK_NOTIF_BLE_CONNECTED)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <Task_ManageBLEConnections+0x46>
		{
			/* Resume or start the task that parses BLE messages */
			vTaskResume(h_TaskBLEMsg);
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <Task_ManageBLEConnections+0x64>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f00a fa3c 	bl	800b880 <vTaskResume>
 8001408:	e7e6      	b.n	80013d8 <Task_ManageBLEConnections+0x14>
		}
		else if(NotificationValue & FRTOS_TASK_NOTIF_BLE_DISCONNECTED)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0e1      	beq.n	80013d8 <Task_ManageBLEConnections+0x14>
		{
			/* Suspend the task that parses BLE messages */
			vTaskSuspend(h_TaskBLEMsg);
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <Task_ManageBLEConnections+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f00a f989 	bl	800b730 <vTaskSuspend>

			/* Place BLE module in advertising mode to allow new connections */
			BlueNRG_MakeDeviceDiscoverable();
 800141e:	f7ff fdb7 	bl	8000f90 <BlueNRG_MakeDeviceDiscoverable>
		hci_user_evt_proc();
 8001422:	e7d9      	b.n	80013d8 <Task_ManageBLEConnections+0x14>
 8001424:	200001b4 	.word	0x200001b4
 8001428:	200001ac 	.word	0x200001ac

0800142c <Task_ParseBLEMessage>:
 * @param
 * @retval
 * @note
 */
static void Task_ParseBLEMessage(void *argument)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	 */

	while(1)
	{
		/* This command is used to process BLE events */
		hci_user_evt_proc();
 8001434:	f008 ff60 	bl	800a2f8 <hci_user_evt_proc>

		uint32_t NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	2001      	movs	r0, #1
 800143e:	f00a ffb7 	bl	800c3b0 <ulTaskNotifyTake>
 8001442:	60f8      	str	r0, [r7, #12]

		/* Check remaining stack size for this particular task */
		Task1_RSS = uxTaskGetStackHighWaterMark(NULL);
 8001444:	2000      	movs	r0, #0
 8001446:	f00a febb 	bl	800c1c0 <uxTaskGetStackHighWaterMark>
 800144a:	4603      	mov	r3, r0
 800144c:	4a01      	ldr	r2, [pc, #4]	; (8001454 <Task_ParseBLEMessage+0x28>)
 800144e:	6013      	str	r3, [r2, #0]
	{
 8001450:	e7f0      	b.n	8001434 <Task_ParseBLEMessage+0x8>
 8001452:	bf00      	nop
 8001454:	200001b8 	.word	0x200001b8

08001458 <Task_BlinkLEDIndicator>:
 * @param
 * @retval
 * @note
 */
static void Task_BlinkLEDIndicator(void *argument)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	const TickType_t DelayFrequency = pdMS_TO_TICKS(1000);
 8001460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001464:	60fb      	str	r3, [r7, #12]
	TickType_t LastActiveTime;

	while(1)
	{
		/* Check ammount of unused stack. If returned value is 0, stack overflow has occurred */
		Task2_RSS = uxTaskGetStackHighWaterMark(NULL);
 8001466:	2000      	movs	r0, #0
 8001468:	f00a feaa 	bl	800c1c0 <uxTaskGetStackHighWaterMark>
 800146c:	4603      	mov	r3, r0
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <Task_BlinkLEDIndicator+0x38>)
 8001470:	6013      	str	r3, [r2, #0]

		/* Perform accurate blocking delay */
		LastActiveTime = xTaskGetTickCount();
 8001472:	f00a fb77 	bl	800bb64 <xTaskGetTickCount>
 8001476:	4603      	mov	r3, r0
 8001478:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	68f9      	ldr	r1, [r7, #12]
 8001480:	4618      	mov	r0, r3
 8001482:	f00a f8d7 	bl	800b634 <vTaskDelayUntil>

		/* Toggle LED every 1 second */
		HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8001486:	2120      	movs	r1, #32
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <Task_BlinkLEDIndicator+0x3c>)
 800148a:	f002 fc73 	bl	8003d74 <HAL_GPIO_TogglePin>
		Task2_RSS = uxTaskGetStackHighWaterMark(NULL);
 800148e:	e7ea      	b.n	8001466 <Task_BlinkLEDIndicator+0xe>
 8001490:	200001bc 	.word	0x200001bc
 8001494:	40020000 	.word	0x40020000

08001498 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <BSP_SPI1_Init+0x54>)
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <BSP_SPI1_Init+0x58>)
 80014a6:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <BSP_SPI1_Init+0x5c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	4911      	ldr	r1, [pc, #68]	; (80014f4 <BSP_SPI1_Init+0x5c>)
 80014b0:	600a      	str	r2, [r1, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d114      	bne.n	80014e0 <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <BSP_SPI1_Init+0x54>)
 80014b8:	f005 fb1c 	bl	8006af4 <HAL_SPI_GetState>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10e      	bne.n	80014e0 <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 80014c2:	480a      	ldr	r0, [pc, #40]	; (80014ec <BSP_SPI1_Init+0x54>)
 80014c4:	f000 f87c 	bl	80015c0 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d108      	bne.n	80014e0 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <BSP_SPI1_Init+0x54>)
 80014d0:	f000 f83a 	bl	8001548 <MX_SPI1_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 80014da:	f06f 0307 	mvn.w	r3, #7
 80014de:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200099c8 	.word	0x200099c8
 80014f0:	40013000 	.word	0x40013000
 80014f4:	200001c0 	.word	0x200001c0

080014f8 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	4613      	mov	r3, r2
 8001504:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	68f9      	ldr	r1, [r7, #12]
 8001516:	4807      	ldr	r0, [pc, #28]	; (8001534 <BSP_SPI1_SendRecv+0x3c>)
 8001518:	f005 f93e 	bl	8006798 <HAL_SPI_TransmitReceive>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d002      	beq.n	8001528 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001522:	f06f 0305 	mvn.w	r3, #5
 8001526:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001528:	697b      	ldr	r3, [r7, #20]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200099c8 	.word	0x200099c8

08001538 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800153c:	f000 fdc4 	bl	80020c8 <HAL_GetTick>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a19      	ldr	r2, [pc, #100]	; (80015bc <MX_SPI1_Init+0x74>)
 8001558:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001560:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001580:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2230      	movs	r2, #48	; 0x30
 8001586:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	220a      	movs	r2, #10
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f004 ff53 	bl	800644c <HAL_SPI_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40013000 	.word	0x40013000

080015c0 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <SPI1_MspInit+0xc4>)
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <SPI1_MspInit+0xc4>)
 80015d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d6:	6453      	str	r3, [r2, #68]	; 0x44
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <SPI1_MspInit+0xc4>)
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <SPI1_MspInit+0xc4>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4a25      	ldr	r2, [pc, #148]	; (8001684 <SPI1_MspInit+0xc4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6313      	str	r3, [r2, #48]	; 0x30
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <SPI1_MspInit+0xc4>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <SPI1_MspInit+0xc4>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a1e      	ldr	r2, [pc, #120]	; (8001684 <SPI1_MspInit+0xc4>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <SPI1_MspInit+0xc4>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800161c:	2340      	movs	r3, #64	; 0x40
 800161e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800162c:	2305      	movs	r3, #5
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	4814      	ldr	r0, [pc, #80]	; (8001688 <SPI1_MspInit+0xc8>)
 8001638:	f001 ff9a 	bl	8003570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800164c:	2305      	movs	r3, #5
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <SPI1_MspInit+0xc8>)
 8001658:	f001 ff8a 	bl	8003570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800165c:	2308      	movs	r3, #8
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800166c:	2305      	movs	r3, #5
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <SPI1_MspInit+0xcc>)
 8001678:	f001 ff7a 	bl	8003570 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020400 	.word	0x40020400

08001690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_DMA_Init+0x3c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <MX_DMA_Init+0x3c>)
 80016a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_DMA_Init+0x3c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2105      	movs	r1, #5
 80016b6:	2038      	movs	r0, #56	; 0x38
 80016b8:	f001 fa06 	bl	8002ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016bc:	2038      	movs	r0, #56	; 0x38
 80016be:	f001 fa2f 	bl	8002b20 <HAL_NVIC_EnableIRQ>

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <vApplicationMallocFailedHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_EVENTS */

  /* USER CODE END RTOS_EVENTS */

}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b62      	ldr	r3, [pc, #392]	; (80018bc <MX_GPIO_Init+0x1a4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a61      	ldr	r2, [pc, #388]	; (80018bc <MX_GPIO_Init+0x1a4>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <MX_GPIO_Init+0x1a4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b5b      	ldr	r3, [pc, #364]	; (80018bc <MX_GPIO_Init+0x1a4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a5a      	ldr	r2, [pc, #360]	; (80018bc <MX_GPIO_Init+0x1a4>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b58      	ldr	r3, [pc, #352]	; (80018bc <MX_GPIO_Init+0x1a4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b54      	ldr	r3, [pc, #336]	; (80018bc <MX_GPIO_Init+0x1a4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a53      	ldr	r2, [pc, #332]	; (80018bc <MX_GPIO_Init+0x1a4>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b51      	ldr	r3, [pc, #324]	; (80018bc <MX_GPIO_Init+0x1a4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b4d      	ldr	r3, [pc, #308]	; (80018bc <MX_GPIO_Init+0x1a4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <MX_GPIO_Init+0x1a4>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <MX_GPIO_Init+0x1a4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b46      	ldr	r3, [pc, #280]	; (80018bc <MX_GPIO_Init+0x1a4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a45      	ldr	r2, [pc, #276]	; (80018bc <MX_GPIO_Init+0x1a4>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b43      	ldr	r3, [pc, #268]	; (80018bc <MX_GPIO_Init+0x1a4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 7191 	mov.w	r1, #290	; 0x122
 80017c0:	483f      	ldr	r0, [pc, #252]	; (80018c0 <MX_GPIO_Init+0x1a8>)
 80017c2:	f002 faa5 	bl	8003d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
 80017c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017cc:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <MX_GPIO_Init+0x1ac>)
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	483b      	ldr	r0, [pc, #236]	; (80018c8 <MX_GPIO_Init+0x1b0>)
 80017dc:	f001 fec8 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80017e0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80017e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e6:	2303      	movs	r3, #3
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4834      	ldr	r0, [pc, #208]	; (80018c8 <MX_GPIO_Init+0x1b0>)
 80017f6:	f001 febb 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017fa:	2303      	movs	r3, #3
 80017fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fe:	2303      	movs	r3, #3
 8001800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	482f      	ldr	r0, [pc, #188]	; (80018cc <MX_GPIO_Init+0x1b4>)
 800180e:	f001 feaf 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_Pin;
 8001812:	2301      	movs	r3, #1
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <MX_GPIO_Init+0x1ac>)
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4826      	ldr	r0, [pc, #152]	; (80018c0 <MX_GPIO_Init+0x1a8>)
 8001826:	f001 fea3 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 800182a:	f44f 7391 	mov.w	r3, #290	; 0x122
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	481f      	ldr	r0, [pc, #124]	; (80018c0 <MX_GPIO_Init+0x1a8>)
 8001844:	f001 fe94 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10
 8001848:	f649 6318 	movw	r3, #40472	; 0x9e18
 800184c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184e:	2303      	movs	r3, #3
 8001850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4818      	ldr	r0, [pc, #96]	; (80018c0 <MX_GPIO_Init+0x1a8>)
 800185e:	f001 fe87 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001862:	f24f 43f7 	movw	r3, #62711	; 0xf4f7
 8001866:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001868:	2303      	movs	r3, #3
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4816      	ldr	r0, [pc, #88]	; (80018d0 <MX_GPIO_Init+0x1b8>)
 8001878:	f001 fe7a 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800187c:	2304      	movs	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001880:	2303      	movs	r3, #3
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	4811      	ldr	r0, [pc, #68]	; (80018d4 <MX_GPIO_Init+0x1bc>)
 8001890:	f001 fe6e 	bl	8003570 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 1);
 8001894:	2201      	movs	r2, #1
 8001896:	2105      	movs	r1, #5
 8001898:	2006      	movs	r0, #6
 800189a:	f001 f915 	bl	8002ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800189e:	2006      	movs	r0, #6
 80018a0:	f001 f93e 	bl	8002b20 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 2);
 80018a4:	2202      	movs	r2, #2
 80018a6:	2106      	movs	r1, #6
 80018a8:	2028      	movs	r0, #40	; 0x28
 80018aa:	f001 f90d 	bl	8002ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018ae:	2028      	movs	r0, #40	; 0x28
 80018b0:	f001 f936 	bl	8002b20 <HAL_NVIC_EnableIRQ>

}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	10110000 	.word	0x10110000
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40021c00 	.word	0x40021c00
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020c00 	.word	0x40020c00

080018d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <MX_I2C1_Init+0x50>)
 80018de:	4a13      	ldr	r2, [pc, #76]	; (800192c <MX_I2C1_Init+0x54>)
 80018e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_I2C1_Init+0x50>)
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <MX_I2C1_Init+0x58>)
 80018e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_I2C1_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_I2C1_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_I2C1_Init+0x50>)
 80018f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <MX_I2C1_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_I2C1_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_I2C1_Init+0x50>)
 8001916:	f002 fa79 	bl	8003e0c <HAL_I2C_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001920:	f000 f8e4 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20009a20 	.word	0x20009a20
 800192c:	40005400 	.word	0x40005400
 8001930:	000186a0 	.word	0x000186a0

08001934 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_I2C_MspInit+0x94>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d134      	bne.n	80019c0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <HAL_I2C_MspInit+0x98>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a1b      	ldr	r2, [pc, #108]	; (80019cc <HAL_I2C_MspInit+0x98>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_I2C_MspInit+0x98>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001978:	2312      	movs	r3, #18
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197c:	2301      	movs	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001984:	2304      	movs	r3, #4
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4810      	ldr	r0, [pc, #64]	; (80019d0 <HAL_I2C_MspInit+0x9c>)
 8001990:	f001 fdee 	bl	8003570 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <HAL_I2C_MspInit+0x98>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <HAL_I2C_MspInit+0x98>)
 800199e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a2:	6413      	str	r3, [r2, #64]	; 0x40
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_I2C_MspInit+0x98>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2106      	movs	r1, #6
 80019b4:	201f      	movs	r0, #31
 80019b6:	f001 f887 	bl	8002ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019ba:	201f      	movs	r0, #31
 80019bc:	f001 f8b0 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019c0:	bf00      	nop
 80019c2:	3728      	adds	r7, #40	; 0x28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40005400 	.word	0x40005400
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020400 	.word	0x40020400

080019d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d8:	f000 fb40 	bl	800205c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80019dc:	f000 f81e 	bl	8001a1c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e0:	f7ff fe9a 	bl	8001718 <MX_GPIO_Init>
  MX_DMA_Init();
 80019e4:	f7ff fe54 	bl	8001690 <MX_DMA_Init>
  MX_ADC1_Init();
 80019e8:	f7fe ff82 	bl	80008f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80019ec:	f7ff ff74 	bl	80018d8 <MX_I2C1_Init>
  MX_TIM5_Init();
 80019f0:	f000 fa3c 	bl	8001e6c <MX_TIM5_Init>
  MX_TIM9_Init();
 80019f4:	f000 fa88 	bl	8001f08 <MX_TIM9_Init>

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80019f8:	f008 fe52 	bl	800a6a0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80019fc:	f7ff fe85 	bl	800170a <MX_FREERTOS_Init>

  /* Additional FreeRTOS Object Initializations */
  FRTOS_Init_Tasks();
 8001a00:	f7ff fc8c 	bl	800131c <FRTOS_Init_Tasks>

  /* Start scheduler */
  osKernelStart();
 8001a04:	f008 fe70 	bl	800a6e8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1)
  {
	  /* Indication of failed code */
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8001a08:	2120      	movs	r1, #32
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <main+0x44>)
 8001a0c:	f002 f9b2 	bl	8003d74 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001a10:	2064      	movs	r0, #100	; 0x64
 8001a12:	f000 fb65 	bl	80020e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8001a16:	e7f7      	b.n	8001a08 <main+0x34>
 8001a18:	40020000 	.word	0x40020000

08001a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b094      	sub	sp, #80	; 0x50
 8001a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	2230      	movs	r2, #48	; 0x30
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00b fe02 	bl	800d634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <SystemClock_Config+0xc8>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <SystemClock_Config+0xc8>)
 8001a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <SystemClock_Config+0xc8>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <SystemClock_Config+0xcc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <SystemClock_Config+0xcc>)
 8001a66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <SystemClock_Config+0xcc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a80:	2310      	movs	r3, #16
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a84:	2302      	movs	r3, #2
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a8c:	2310      	movs	r3, #16
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001a90:	23c8      	movs	r3, #200	; 0xc8
 8001a92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a94:	2302      	movs	r3, #2
 8001a96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9c:	f107 0320 	add.w	r3, r7, #32
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 ff1d 	bl	80058e0 <HAL_RCC_OscConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001aac:	f000 f81e 	bl	8001aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2103      	movs	r1, #3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 fa2f 	bl	8005f30 <HAL_RCC_ClockConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ad8:	f000 f808 	bl	8001aec <Error_Handler>
  }
}
 8001adc:	bf00      	nop
 8001ade:	3750      	adds	r7, #80	; 0x50
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <Error_Handler+0x8>
	...

08001af8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4802      	ldr	r0, [pc, #8]	; (8001b10 <assert_failed+0x18>)
 8001b08:	f00b fd9c 	bl	800d644 <iprintf>
	for(;;);
 8001b0c:	e7fe      	b.n	8001b0c <assert_failed+0x14>
 8001b0e:	bf00      	nop
 8001b10:	0800e678 	.word	0x0800e678

08001b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_MspInit+0x54>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_MspInit+0x54>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_MspInit+0x54>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_MspInit+0x54>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_MspInit+0x54>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_MspInit+0x54>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	210f      	movs	r1, #15
 8001b56:	f06f 0001 	mvn.w	r0, #1
 8001b5a:	f000 ffb5 	bl	8002ac8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	; 0x30
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	201c      	movs	r0, #28
 8001b82:	f000 ffa1 	bl	8002ac8 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b86:	201c      	movs	r0, #28
 8001b88:	f000 ffca 	bl	8002b20 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_InitTick+0xa8>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <HAL_InitTick+0xa8>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_InitTick+0xa8>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ba8:	f107 0210 	add.w	r2, r7, #16
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fc18 	bl	80063e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001bb8:	f004 fc02 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <HAL_InitTick+0xac>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0c9b      	lsrs	r3, r3, #18
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0xb0>)
 8001bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_InitTick+0xb0>)
 8001bda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bde:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001be0:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_InitTick+0xb0>)
 8001be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_InitTick+0xb0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_InitTick+0xb0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001bf2:	480a      	ldr	r0, [pc, #40]	; (8001c1c <HAL_InitTick+0xb0>)
 8001bf4:	f005 f856 	bl	8006ca4 <HAL_TIM_Base_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d104      	bne.n	8001c08 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001bfe:	4807      	ldr	r0, [pc, #28]	; (8001c1c <HAL_InitTick+0xb0>)
 8001c00:	f005 f916 	bl	8006e30 <HAL_TIM_Base_Start_IT>
 8001c04:	4603      	mov	r3, r0
 8001c06:	e000      	b.n	8001c0a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3730      	adds	r7, #48	; 0x30
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	431bde83 	.word	0x431bde83
 8001c1c:	20009a74 	.word	0x20009a74

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <NMI_Handler+0x4>

08001c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <MemManage_Handler+0x4>

08001c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <EXTI0_IRQHandler+0x10>)
 8001c52:	f001 fc69 	bl	8003528 <HAL_EXTI_IRQHandler>
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200098a0 	.word	0x200098a0

08001c60 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim9);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c66:	f005 f975 	bl	8006f54 <HAL_TIM_IRQHandler>
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20009b04 	.word	0x20009b04

08001c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM2_IRQHandler+0x10>)
 8001c7a:	f005 f96b 	bl	8006f54 <HAL_TIM_IRQHandler>
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20009a74 	.word	0x20009a74

08001c88 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <I2C1_EV_IRQHandler+0x10>)
 8001c8e:	f002 fa89 	bl	80041a4 <HAL_I2C_EV_IRQHandler>
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20009a20 	.word	0x20009a20

08001c9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ca0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ca4:	f002 f88e 	bl	8003dc4 <HAL_GPIO_EXTI_IRQHandler>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim5);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <TIM5_IRQHandler+0x10>)
 8001cb2:	f005 f94f 	bl	8006f54 <HAL_TIM_IRQHandler>
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20009abc 	.word	0x20009abc

08001cc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA2_Stream0_IRQHandler+0x10>)
 8001cc6:	f001 f999 	bl	8002ffc <HAL_DMA_IRQHandler>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200098f0 	.word	0x200098f0

08001cd4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d102      	bne.n	8001cec <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		HAL_IncTick();
 8001ce6:	f000 f9db 	bl	80020a0 <HAL_IncTick>
	}
	else if(htim->Instance == TIM9)
	{

	}
}
 8001cea:	e003      	b.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x20>
	else if(htim->Instance == TIM5)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a02      	ldr	r2, [pc, #8]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001cf2:	4293      	cmp	r3, r2
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40000c00 	.word	0x40000c00

08001d00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	e00a      	b.n	8001d28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d12:	f3af 8000 	nop.w
 8001d16:	4601      	mov	r1, r0
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	60ba      	str	r2, [r7, #8]
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dbf0      	blt.n	8001d12 <_read+0x12>
	}

return len;
 8001d30:	687b      	ldr	r3, [r7, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e009      	b.n	8001d60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	60ba      	str	r2, [r7, #8]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbf1      	blt.n	8001d4c <_write+0x12>
	}
	return len;
 8001d68:	687b      	ldr	r3, [r7, #4]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_close>:

int _close(int file)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	return -1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_isatty>:

int _isatty(int file)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
	return 1;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
	return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f00b fbda 	bl	800d5c4 <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20020000 	.word	0x20020000
 8001e3c:	00000800 	.word	0x00000800
 8001e40:	200001c4 	.word	0x200001c4
 8001e44:	20009bd0 	.word	0x20009bd0

08001e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <SystemInit+0x20>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <SystemInit+0x20>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	463b      	mov	r3, r7
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <MX_TIM5_Init+0x94>)
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <MX_TIM5_Init+0x98>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <MX_TIM5_Init+0x94>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <MX_TIM5_Init+0x94>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <MX_TIM5_Init+0x94>)
 8001e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_TIM5_Init+0x94>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <MX_TIM5_Init+0x94>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001eae:	4814      	ldr	r0, [pc, #80]	; (8001f00 <MX_TIM5_Init+0x94>)
 8001eb0:	f004 fef8 	bl	8006ca4 <HAL_TIM_Base_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001eba:	f7ff fe17 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ec4:	f107 0308 	add.w	r3, r7, #8
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480d      	ldr	r0, [pc, #52]	; (8001f00 <MX_TIM5_Init+0x94>)
 8001ecc:	f005 f94a 	bl	8007164 <HAL_TIM_ConfigClockSource>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001ed6:	f7ff fe09 	bl	8001aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ee2:	463b      	mov	r3, r7
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4806      	ldr	r0, [pc, #24]	; (8001f00 <MX_TIM5_Init+0x94>)
 8001ee8:	f005 fd8a 	bl	8007a00 <HAL_TIMEx_MasterConfigSynchronization>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001ef2:	f7ff fdfb 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20009abc 	.word	0x20009abc
 8001f04:	40000c00 	.word	0x40000c00

08001f08 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f1c:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <MX_TIM9_Init+0x70>)
 8001f1e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f32:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f40:	480c      	ldr	r0, [pc, #48]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f42:	f004 feaf 	bl	8006ca4 <HAL_TIM_Base_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001f4c:	f7ff fdce 	bl	8001aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f54:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001f56:	463b      	mov	r3, r7
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4806      	ldr	r0, [pc, #24]	; (8001f74 <MX_TIM9_Init+0x6c>)
 8001f5c:	f005 f902 	bl	8007164 <HAL_TIM_ConfigClockSource>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001f66:	f7ff fdc1 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20009b04 	.word	0x20009b04
 8001f78:	40014000 	.word	0x40014000

08001f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <HAL_TIM_Base_MspInit+0x80>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d116      	bne.n	8001fbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 7, 1);
 8001faa:	2201      	movs	r2, #1
 8001fac:	2107      	movs	r1, #7
 8001fae:	2032      	movs	r0, #50	; 0x32
 8001fb0:	f000 fd8a 	bl	8002ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001fb4:	2032      	movs	r0, #50	; 0x32
 8001fb6:	f000 fdb3 	bl	8002b20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001fba:	e01a      	b.n	8001ff2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM9)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_TIM_Base_MspInit+0x88>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d115      	bne.n	8001ff2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_TIM_Base_MspInit+0x84>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 2);
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	2107      	movs	r1, #7
 8001fe6:	2018      	movs	r0, #24
 8001fe8:	f000 fd6e 	bl	8002ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001fec:	2018      	movs	r0, #24
 8001fee:	f000 fd97 	bl	8002b20 <HAL_NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40000c00 	.word	0x40000c00
 8002000:	40023800 	.word	0x40023800
 8002004:	40014000 	.word	0x40014000

08002008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8002008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800200e:	490e      	ldr	r1, [pc, #56]	; (8002048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002024:	4c0b      	ldr	r4, [pc, #44]	; (8002054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002032:	f7ff ff09 	bl	8001e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002036:	f00b facb 	bl	800d5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7ff fccb 	bl	80019d4 <main>
  bx  lr    
 800203e:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8002040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002048:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800204c:	0800ebd0 	.word	0x0800ebd0
  ldr r2, =_sbss
 8002050:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002054:	20009bd0 	.word	0x20009bd0

08002058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_Init+0x40>)
 8002066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <HAL_Init+0x40>)
 8002072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_Init+0x40>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002084:	2003      	movs	r0, #3
 8002086:	f000 fcff 	bl	8002a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208a:	2000      	movs	r0, #0
 800208c:	f7ff fd6e 	bl	8001b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002090:	f7ff fd40 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000004 	.word	0x20000004
 80020c4:	20009b4c 	.word	0x20009b4c

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20009b4c 	.word	0x20009b4c

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000004 	.word	0x20000004

08002128 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e147      	b.n	80023ce <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4aa5      	ldr	r2, [pc, #660]	; (80023d8 <HAL_ADC_Init+0x2b0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_ADC_Init+0x2a>
 8002148:	f240 1143 	movw	r1, #323	; 0x143
 800214c:	48a3      	ldr	r0, [pc, #652]	; (80023dc <HAL_ADC_Init+0x2b4>)
 800214e:	f7ff fcd3 	bl	8001af8 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d013      	beq.n	8002182 <HAL_ADC_Init+0x5a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002162:	d00e      	beq.n	8002182 <HAL_ADC_Init+0x5a>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800216c:	d009      	beq.n	8002182 <HAL_ADC_Init+0x5a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002176:	d004      	beq.n	8002182 <HAL_ADC_Init+0x5a>
 8002178:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800217c:	4897      	ldr	r0, [pc, #604]	; (80023dc <HAL_ADC_Init+0x2b4>)
 800217e:	f7ff fcbb 	bl	8001af8 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d013      	beq.n	80021b2 <HAL_ADC_Init+0x8a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002192:	d00e      	beq.n	80021b2 <HAL_ADC_Init+0x8a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800219c:	d009      	beq.n	80021b2 <HAL_ADC_Init+0x8a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_Init+0x8a>
 80021a8:	f240 1145 	movw	r1, #325	; 0x145
 80021ac:	488b      	ldr	r0, [pc, #556]	; (80023dc <HAL_ADC_Init+0x2b4>)
 80021ae:	f7ff fca3 	bl	8001af8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_ADC_Init+0xa4>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d004      	beq.n	80021cc <HAL_ADC_Init+0xa4>
 80021c2:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80021c6:	4885      	ldr	r0, [pc, #532]	; (80023dc <HAL_ADC_Init+0x2b4>)
 80021c8:	f7ff fc96 	bl	8001af8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7e1b      	ldrb	r3, [r3, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_ADC_Init+0xbe>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7e1b      	ldrb	r3, [r3, #24]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d004      	beq.n	80021e6 <HAL_ADC_Init+0xbe>
 80021dc:	f240 1147 	movw	r1, #327	; 0x147
 80021e0:	487e      	ldr	r0, [pc, #504]	; (80023dc <HAL_ADC_Init+0x2b4>)
 80021e2:	f7ff fc89 	bl	8001af8 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d054      	beq.n	8002298 <HAL_ADC_Init+0x170>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f6:	d04f      	beq.n	8002298 <HAL_ADC_Init+0x170>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002200:	d04a      	beq.n	8002298 <HAL_ADC_Init+0x170>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800220a:	d045      	beq.n	8002298 <HAL_ADC_Init+0x170>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002214:	d040      	beq.n	8002298 <HAL_ADC_Init+0x170>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800221e:	d03b      	beq.n	8002298 <HAL_ADC_Init+0x170>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002228:	d036      	beq.n	8002298 <HAL_ADC_Init+0x170>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002232:	d031      	beq.n	8002298 <HAL_ADC_Init+0x170>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800223c:	d02c      	beq.n	8002298 <HAL_ADC_Init+0x170>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002246:	d027      	beq.n	8002298 <HAL_ADC_Init+0x170>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002250:	d022      	beq.n	8002298 <HAL_ADC_Init+0x170>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002256:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800225a:	d01d      	beq.n	8002298 <HAL_ADC_Init+0x170>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002264:	d018      	beq.n	8002298 <HAL_ADC_Init+0x170>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800226e:	d013      	beq.n	8002298 <HAL_ADC_Init+0x170>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002278:	d00e      	beq.n	8002298 <HAL_ADC_Init+0x170>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002282:	d009      	beq.n	8002298 <HAL_ADC_Init+0x170>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	4a55      	ldr	r2, [pc, #340]	; (80023e0 <HAL_ADC_Init+0x2b8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_ADC_Init+0x170>
 800228e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002292:	4852      	ldr	r0, [pc, #328]	; (80023dc <HAL_ADC_Init+0x2b4>)
 8002294:	f7ff fc30 	bl	8001af8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_ADC_Init+0x18c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022a8:	d004      	beq.n	80022b4 <HAL_ADC_Init+0x18c>
 80022aa:	f240 1149 	movw	r1, #329	; 0x149
 80022ae:	484b      	ldr	r0, [pc, #300]	; (80023dc <HAL_ADC_Init+0x2b4>)
 80022b0:	f7ff fc22 	bl	8001af8 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_ADC_Init+0x19c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d904      	bls.n	80022ce <HAL_ADC_Init+0x1a6>
 80022c4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80022c8:	4844      	ldr	r0, [pc, #272]	; (80023dc <HAL_ADC_Init+0x2b4>)
 80022ca:	f7ff fc15 	bl	8001af8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d009      	beq.n	80022ec <HAL_ADC_Init+0x1c4>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d004      	beq.n	80022ec <HAL_ADC_Init+0x1c4>
 80022e2:	f240 114b 	movw	r1, #331	; 0x14b
 80022e6:	483d      	ldr	r0, [pc, #244]	; (80023dc <HAL_ADC_Init+0x2b4>)
 80022e8:	f7ff fc06 	bl	8001af8 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d00c      	beq.n	800230e <HAL_ADC_Init+0x1e6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_ADC_Init+0x1e6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d004      	beq.n	800230e <HAL_ADC_Init+0x1e6>
 8002304:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002308:	4834      	ldr	r0, [pc, #208]	; (80023dc <HAL_ADC_Init+0x2b4>)
 800230a:	f7ff fbf5 	bl	8001af8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_ADC_Init+0x204>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d004      	beq.n	800232c <HAL_ADC_Init+0x204>
 8002322:	f240 114d 	movw	r1, #333	; 0x14d
 8002326:	482d      	ldr	r0, [pc, #180]	; (80023dc <HAL_ADC_Init+0x2b4>)
 8002328:	f7ff fbe6 	bl	8001af8 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	4a2b      	ldr	r2, [pc, #172]	; (80023e0 <HAL_ADC_Init+0x2b8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d017      	beq.n	8002366 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d013      	beq.n	8002366 <HAL_ADC_Init+0x23e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002346:	d00e      	beq.n	8002366 <HAL_ADC_Init+0x23e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002350:	d009      	beq.n	8002366 <HAL_ADC_Init+0x23e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800235a:	d004      	beq.n	8002366 <HAL_ADC_Init+0x23e>
 800235c:	f240 1151 	movw	r1, #337	; 0x151
 8002360:	481e      	ldr	r0, [pc, #120]	; (80023dc <HAL_ADC_Init+0x2b4>)
 8002362:	f7ff fbc9 	bl	8001af8 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fb10 	bl	8000994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d118      	bne.n	80023c0 <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002396:	f023 0302 	bic.w	r3, r3, #2
 800239a:	f043 0202 	orr.w	r2, r3, #2
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f994 	bl	80026d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f023 0303 	bic.w	r3, r3, #3
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
 80023be:	e001      	b.n	80023c4 <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40012000 	.word	0x40012000
 80023dc:	0800e6a8 	.word	0x0800e6a8
 80023e0:	0f000001 	.word	0x0f000001

080023e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b12      	cmp	r3, #18
 80023f8:	d909      	bls.n	800240e <HAL_ADC_ConfigChannel+0x2a>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a72      	ldr	r2, [pc, #456]	; (80025c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d004      	beq.n	800240e <HAL_ADC_ConfigChannel+0x2a>
 8002404:	f240 6189 	movw	r1, #1673	; 0x689
 8002408:	4870      	ldr	r0, [pc, #448]	; (80025cc <HAL_ADC_ConfigChannel+0x1e8>)
 800240a:	f7ff fb75 	bl	8001af8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_ADC_ConfigChannel+0x3a>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b10      	cmp	r3, #16
 800241c:	d904      	bls.n	8002428 <HAL_ADC_ConfigChannel+0x44>
 800241e:	f240 618a 	movw	r1, #1674	; 0x68a
 8002422:	486a      	ldr	r0, [pc, #424]	; (80025cc <HAL_ADC_ConfigChannel+0x1e8>)
 8002424:	f7ff fb68 	bl	8001af8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x8e>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d01c      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x8e>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d018      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x8e>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d014      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x8e>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d010      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x8e>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d00c      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x8e>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b06      	cmp	r3, #6
 800245e:	d008      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x8e>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b07      	cmp	r3, #7
 8002466:	d004      	beq.n	8002472 <HAL_ADC_ConfigChannel+0x8e>
 8002468:	f240 618b 	movw	r1, #1675	; 0x68b
 800246c:	4857      	ldr	r0, [pc, #348]	; (80025cc <HAL_ADC_ConfigChannel+0x1e8>)
 800246e:	f7ff fb43 	bl	8001af8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x9c>
 800247c:	2302      	movs	r3, #2
 800247e:	e118      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x2ce>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b09      	cmp	r3, #9
 800248e:	d925      	bls.n	80024dc <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68d9      	ldr	r1, [r3, #12]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	3b1e      	subs	r3, #30
 80024a6:	2207      	movs	r2, #7
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43da      	mvns	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	400a      	ands	r2, r1
 80024b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68d9      	ldr	r1, [r3, #12]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4618      	mov	r0, r3
 80024c8:	4603      	mov	r3, r0
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4403      	add	r3, r0
 80024ce:	3b1e      	subs	r3, #30
 80024d0:	409a      	lsls	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	e022      	b.n	8002522 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6919      	ldr	r1, [r3, #16]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	2207      	movs	r2, #7
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	400a      	ands	r2, r1
 80024fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6919      	ldr	r1, [r3, #16]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	4603      	mov	r3, r0
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4403      	add	r3, r0
 8002518:	409a      	lsls	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b06      	cmp	r3, #6
 8002528:	d824      	bhi.n	8002574 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	3b05      	subs	r3, #5
 800253c:	221f      	movs	r2, #31
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	400a      	ands	r2, r1
 800254a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	4618      	mov	r0, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	3b05      	subs	r3, #5
 8002566:	fa00 f203 	lsl.w	r2, r0, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	635a      	str	r2, [r3, #52]	; 0x34
 8002572:	e051      	b.n	8002618 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d829      	bhi.n	80025d0 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	3b23      	subs	r3, #35	; 0x23
 800258e:	221f      	movs	r2, #31
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43da      	mvns	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	400a      	ands	r2, r1
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b23      	subs	r3, #35	; 0x23
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
 80025c4:	e028      	b.n	8002618 <HAL_ADC_ConfigChannel+0x234>
 80025c6:	bf00      	nop
 80025c8:	10000012 	.word	0x10000012
 80025cc:	0800e6a8 	.word	0x0800e6a8
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3b41      	subs	r3, #65	; 0x41
 80025e2:	221f      	movs	r2, #31
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43da      	mvns	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	400a      	ands	r2, r1
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4618      	mov	r0, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	3b41      	subs	r3, #65	; 0x41
 800260c:	fa00 f203 	lsl.w	r2, r0, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002618:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_ADC_ConfigChannel+0x2d8>)
 800261a:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a27      	ldr	r2, [pc, #156]	; (80026c0 <HAL_ADC_ConfigChannel+0x2dc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10f      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x262>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b12      	cmp	r3, #18
 800262c:	d10b      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1d      	ldr	r2, [pc, #116]	; (80026c0 <HAL_ADC_ConfigChannel+0x2dc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d12b      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x2c4>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1b      	ldr	r2, [pc, #108]	; (80026c4 <HAL_ADC_ConfigChannel+0x2e0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <HAL_ADC_ConfigChannel+0x27e>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b11      	cmp	r3, #17
 8002660:	d122      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_ADC_ConfigChannel+0x2e0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d111      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_ADC_ConfigChannel+0x2e4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_ADC_ConfigChannel+0x2e8>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9a      	lsrs	r2, r3, #18
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800269a:	e002      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	3b01      	subs	r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f9      	bne.n	800269c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40012300 	.word	0x40012300
 80026c0:	40012000 	.word	0x40012000
 80026c4:	10000012 	.word	0x10000012
 80026c8:	20000000 	.word	0x20000000
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d8:	4b7f      	ldr	r3, [pc, #508]	; (80028d8 <ADC_Init+0x208>)
 80026da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	021a      	lsls	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800274a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	4a5e      	ldr	r2, [pc, #376]	; (80028dc <ADC_Init+0x20c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d022      	beq.n	80027ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002776:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e00f      	b.n	80027ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0202 	bic.w	r2, r2, #2
 80027dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7e1b      	ldrb	r3, [r3, #24]
 80027e8:	005a      	lsls	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d028      	beq.n	800284e <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <ADC_Init+0x13c>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	2b08      	cmp	r3, #8
 800280a:	d904      	bls.n	8002816 <ADC_Init+0x146>
 800280c:	f240 71a6 	movw	r1, #1958	; 0x7a6
 8002810:	4833      	ldr	r0, [pc, #204]	; (80028e0 <ADC_Init+0x210>)
 8002812:	f7ff f971 	bl	8001af8 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002824:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002834:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6859      	ldr	r1, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	3b01      	subs	r3, #1
 8002842:	035a      	lsls	r2, r3, #13
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	e007      	b.n	800285e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800285c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800286c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	3b01      	subs	r3, #1
 800287a:	051a      	lsls	r2, r3, #20
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6899      	ldr	r1, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028a0:	025a      	lsls	r2, r3, #9
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6899      	ldr	r1, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	029a      	lsls	r2, r3, #10
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	609a      	str	r2, [r3, #8]
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40012300 	.word	0x40012300
 80028dc:	0f000001 	.word	0x0f000001
 80028e0:	0800e6a8 	.word	0x0800e6a8

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <__NVIC_EnableIRQ+0x38>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db12      	blt.n	80029bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	490a      	ldr	r1, [pc, #40]	; (80029c8 <__NVIC_DisableIRQ+0x44>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	3320      	adds	r3, #32
 80029ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029b0:	f3bf 8f4f 	dsb	sy
}
 80029b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029b6:	f3bf 8f6f 	isb	sy
}
 80029ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	; (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	; (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
         );
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	; 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b07      	cmp	r3, #7
 8002a94:	d00f      	beq.n	8002ab6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b06      	cmp	r3, #6
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d009      	beq.n	8002ab6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d006      	beq.n	8002ab6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d003      	beq.n	8002ab6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002aae:	2192      	movs	r1, #146	; 0x92
 8002ab0:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002ab2:	f7ff f821 	bl	8001af8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ff14 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	0800e6e0 	.word	0x0800e6e0

08002ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d903      	bls.n	8002ae8 <HAL_NVIC_SetPriority+0x20>
 8002ae0:	21aa      	movs	r1, #170	; 0xaa
 8002ae2:	480e      	ldr	r0, [pc, #56]	; (8002b1c <HAL_NVIC_SetPriority+0x54>)
 8002ae4:	f7ff f808 	bl	8001af8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d903      	bls.n	8002af6 <HAL_NVIC_SetPriority+0x2e>
 8002aee:	21ab      	movs	r1, #171	; 0xab
 8002af0:	480a      	ldr	r0, [pc, #40]	; (8002b1c <HAL_NVIC_SetPriority+0x54>)
 8002af2:	f7ff f801 	bl	8001af8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af6:	f7ff ff19 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002afa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	6978      	ldr	r0, [r7, #20]
 8002b02:	f7ff ff8d 	bl	8002a20 <NVIC_EncodePriority>
 8002b06:	4602      	mov	r2, r0
 8002b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff5c 	bl	80029cc <__NVIC_SetPriority>
}
 8002b14:	bf00      	nop
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	0800e6e0 	.word	0x0800e6e0

08002b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	da03      	bge.n	8002b3a <HAL_NVIC_EnableIRQ+0x1a>
 8002b32:	21be      	movs	r1, #190	; 0xbe
 8002b34:	4805      	ldr	r0, [pc, #20]	; (8002b4c <HAL_NVIC_EnableIRQ+0x2c>)
 8002b36:	f7fe ffdf 	bl	8001af8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff ff02 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	0800e6e0 	.word	0x0800e6e0

08002b50 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	da03      	bge.n	8002b6a <HAL_NVIC_DisableIRQ+0x1a>
 8002b62:	21ce      	movs	r1, #206	; 0xce
 8002b64:	4805      	ldr	r0, [pc, #20]	; (8002b7c <HAL_NVIC_DisableIRQ+0x2c>)
 8002b66:	f7fe ffc7 	bl	8001af8 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff ff08 	bl	8002984 <__NVIC_DisableIRQ>
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	0800e6e0 	.word	0x0800e6e0

08002b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7ff fa9c 	bl	80020c8 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e204      	b.n	8002fa6 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a97      	ldr	r2, [pc, #604]	; (8002e00 <HAL_DMA_Init+0x280>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d04e      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a96      	ldr	r2, [pc, #600]	; (8002e04 <HAL_DMA_Init+0x284>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d049      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a94      	ldr	r2, [pc, #592]	; (8002e08 <HAL_DMA_Init+0x288>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d044      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a93      	ldr	r2, [pc, #588]	; (8002e0c <HAL_DMA_Init+0x28c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d03f      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a91      	ldr	r2, [pc, #580]	; (8002e10 <HAL_DMA_Init+0x290>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d03a      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a90      	ldr	r2, [pc, #576]	; (8002e14 <HAL_DMA_Init+0x294>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d035      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a8e      	ldr	r2, [pc, #568]	; (8002e18 <HAL_DMA_Init+0x298>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d030      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a8d      	ldr	r2, [pc, #564]	; (8002e1c <HAL_DMA_Init+0x29c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d02b      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a8b      	ldr	r2, [pc, #556]	; (8002e20 <HAL_DMA_Init+0x2a0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d026      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a8a      	ldr	r2, [pc, #552]	; (8002e24 <HAL_DMA_Init+0x2a4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d021      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a88      	ldr	r2, [pc, #544]	; (8002e28 <HAL_DMA_Init+0x2a8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01c      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a87      	ldr	r2, [pc, #540]	; (8002e2c <HAL_DMA_Init+0x2ac>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d017      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a85      	ldr	r2, [pc, #532]	; (8002e30 <HAL_DMA_Init+0x2b0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d012      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a84      	ldr	r2, [pc, #528]	; (8002e34 <HAL_DMA_Init+0x2b4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00d      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a82      	ldr	r2, [pc, #520]	; (8002e38 <HAL_DMA_Init+0x2b8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d008      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a81      	ldr	r2, [pc, #516]	; (8002e3c <HAL_DMA_Init+0x2bc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <HAL_DMA_Init+0xc4>
 8002c3c:	21b8      	movs	r1, #184	; 0xb8
 8002c3e:	4880      	ldr	r0, [pc, #512]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002c40:	f7fe ff5a 	bl	8001af8 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d026      	beq.n	8002c9a <HAL_DMA_Init+0x11a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c54:	d021      	beq.n	8002c9a <HAL_DMA_Init+0x11a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c5e:	d01c      	beq.n	8002c9a <HAL_DMA_Init+0x11a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002c68:	d017      	beq.n	8002c9a <HAL_DMA_Init+0x11a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c72:	d012      	beq.n	8002c9a <HAL_DMA_Init+0x11a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002c7c:	d00d      	beq.n	8002c9a <HAL_DMA_Init+0x11a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002c86:	d008      	beq.n	8002c9a <HAL_DMA_Init+0x11a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002c90:	d003      	beq.n	8002c9a <HAL_DMA_Init+0x11a>
 8002c92:	21b9      	movs	r1, #185	; 0xb9
 8002c94:	486a      	ldr	r0, [pc, #424]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002c96:	f7fe ff2f 	bl	8001af8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_DMA_Init+0x13a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d007      	beq.n	8002cba <HAL_DMA_Init+0x13a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b80      	cmp	r3, #128	; 0x80
 8002cb0:	d003      	beq.n	8002cba <HAL_DMA_Init+0x13a>
 8002cb2:	21ba      	movs	r1, #186	; 0xba
 8002cb4:	4862      	ldr	r0, [pc, #392]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002cb6:	f7fe ff1f 	bl	8001af8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc2:	d007      	beq.n	8002cd4 <HAL_DMA_Init+0x154>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_DMA_Init+0x154>
 8002ccc:	21bb      	movs	r1, #187	; 0xbb
 8002cce:	485c      	ldr	r0, [pc, #368]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002cd0:	f7fe ff12 	bl	8001af8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cdc:	d007      	beq.n	8002cee <HAL_DMA_Init+0x16e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_DMA_Init+0x16e>
 8002ce6:	21bc      	movs	r1, #188	; 0xbc
 8002ce8:	4855      	ldr	r0, [pc, #340]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002cea:	f7fe ff05 	bl	8001af8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <HAL_DMA_Init+0x192>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cfe:	d008      	beq.n	8002d12 <HAL_DMA_Init+0x192>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d08:	d003      	beq.n	8002d12 <HAL_DMA_Init+0x192>
 8002d0a:	21bd      	movs	r1, #189	; 0xbd
 8002d0c:	484c      	ldr	r0, [pc, #304]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002d0e:	f7fe fef3 	bl	8001af8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <HAL_DMA_Init+0x1b6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d22:	d008      	beq.n	8002d36 <HAL_DMA_Init+0x1b6>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2c:	d003      	beq.n	8002d36 <HAL_DMA_Init+0x1b6>
 8002d2e:	21be      	movs	r1, #190	; 0xbe
 8002d30:	4843      	ldr	r0, [pc, #268]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002d32:	f7fe fee1 	bl	8001af8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HAL_DMA_Init+0x1d8>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d46:	d007      	beq.n	8002d58 <HAL_DMA_Init+0x1d8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d003      	beq.n	8002d58 <HAL_DMA_Init+0x1d8>
 8002d50:	21bf      	movs	r1, #191	; 0xbf
 8002d52:	483b      	ldr	r0, [pc, #236]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002d54:	f7fe fed0 	bl	8001af8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d012      	beq.n	8002d86 <HAL_DMA_Init+0x206>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d68:	d00d      	beq.n	8002d86 <HAL_DMA_Init+0x206>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d72:	d008      	beq.n	8002d86 <HAL_DMA_Init+0x206>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d7c:	d003      	beq.n	8002d86 <HAL_DMA_Init+0x206>
 8002d7e:	21c0      	movs	r1, #192	; 0xc0
 8002d80:	482f      	ldr	r0, [pc, #188]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002d82:	f7fe feb9 	bl	8001af8 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <HAL_DMA_Init+0x21e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d003      	beq.n	8002d9e <HAL_DMA_Init+0x21e>
 8002d96:	21c1      	movs	r1, #193	; 0xc1
 8002d98:	4829      	ldr	r0, [pc, #164]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002d9a:	f7fe fead 	bl	8001af8 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d065      	beq.n	8002e72 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00f      	beq.n	8002dce <HAL_DMA_Init+0x24e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d00b      	beq.n	8002dce <HAL_DMA_Init+0x24e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d007      	beq.n	8002dce <HAL_DMA_Init+0x24e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d003      	beq.n	8002dce <HAL_DMA_Init+0x24e>
 8002dc6:	21c6      	movs	r1, #198	; 0xc6
 8002dc8:	481d      	ldr	r0, [pc, #116]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002dca:	f7fe fe95 	bl	8001af8 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d036      	beq.n	8002e44 <HAL_DMA_Init+0x2c4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dde:	d031      	beq.n	8002e44 <HAL_DMA_Init+0x2c4>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de8:	d02c      	beq.n	8002e44 <HAL_DMA_Init+0x2c4>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002df2:	d027      	beq.n	8002e44 <HAL_DMA_Init+0x2c4>
 8002df4:	21c7      	movs	r1, #199	; 0xc7
 8002df6:	4812      	ldr	r0, [pc, #72]	; (8002e40 <HAL_DMA_Init+0x2c0>)
 8002df8:	f7fe fe7e 	bl	8001af8 <assert_failed>
 8002dfc:	e022      	b.n	8002e44 <HAL_DMA_Init+0x2c4>
 8002dfe:	bf00      	nop
 8002e00:	40026010 	.word	0x40026010
 8002e04:	40026028 	.word	0x40026028
 8002e08:	40026040 	.word	0x40026040
 8002e0c:	40026058 	.word	0x40026058
 8002e10:	40026070 	.word	0x40026070
 8002e14:	40026088 	.word	0x40026088
 8002e18:	400260a0 	.word	0x400260a0
 8002e1c:	400260b8 	.word	0x400260b8
 8002e20:	40026410 	.word	0x40026410
 8002e24:	40026428 	.word	0x40026428
 8002e28:	40026440 	.word	0x40026440
 8002e2c:	40026458 	.word	0x40026458
 8002e30:	40026470 	.word	0x40026470
 8002e34:	40026488 	.word	0x40026488
 8002e38:	400264a0 	.word	0x400264a0
 8002e3c:	400264b8 	.word	0x400264b8
 8002e40:	0800e71c 	.word	0x0800e71c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <HAL_DMA_Init+0x2f2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e54:	d00d      	beq.n	8002e72 <HAL_DMA_Init+0x2f2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5e:	d008      	beq.n	8002e72 <HAL_DMA_Init+0x2f2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e68:	d003      	beq.n	8002e72 <HAL_DMA_Init+0x2f2>
 8002e6a:	21c8      	movs	r1, #200	; 0xc8
 8002e6c:	4850      	ldr	r0, [pc, #320]	; (8002fb0 <HAL_DMA_Init+0x430>)
 8002e6e:	f7fe fe43 	bl	8001af8 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e92:	e00f      	b.n	8002eb4 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e94:	f7ff f918 	bl	80020c8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d908      	bls.n	8002eb4 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2203      	movs	r2, #3
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e078      	b.n	8002fa6 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1e8      	bne.n	8002e94 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <HAL_DMA_Init+0x434>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d107      	bne.n	8002f1e <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4313      	orrs	r3, r2
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 0307 	bic.w	r3, r3, #7
 8002f34:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d117      	bne.n	8002f78 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00e      	beq.n	8002f78 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa1c 	bl	8003398 <DMA_CheckFifoParam>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2240      	movs	r2, #64	; 0x40
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f74:	2301      	movs	r3, #1
 8002f76:	e016      	b.n	8002fa6 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f9d3 	bl	800332c <DMA_CalcBaseAndBitshift>
 8002f86:	4603      	mov	r3, r0
 8002f88:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	223f      	movs	r2, #63	; 0x3f
 8002f90:	409a      	lsls	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	0800e71c 	.word	0x0800e71c
 8002fb4:	f010803f 	.word	0xf010803f

08002fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00c      	b.n	8002ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2205      	movs	r2, #5
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003008:	4b92      	ldr	r3, [pc, #584]	; (8003254 <HAL_DMA_IRQHandler+0x258>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a92      	ldr	r2, [pc, #584]	; (8003258 <HAL_DMA_IRQHandler+0x25c>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0a9b      	lsrs	r3, r3, #10
 8003014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2208      	movs	r2, #8
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01a      	beq.n	8003068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0204 	bic.w	r2, r2, #4
 800304e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	2208      	movs	r2, #8
 8003056:	409a      	lsls	r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	2201      	movs	r2, #1
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d012      	beq.n	800309e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	2201      	movs	r2, #1
 800308c:	409a      	lsls	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	f043 0202 	orr.w	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	2204      	movs	r2, #4
 80030a4:	409a      	lsls	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	2204      	movs	r2, #4
 80030c2:	409a      	lsls	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d8:	2210      	movs	r2, #16
 80030da:	409a      	lsls	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d043      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d03c      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	2210      	movs	r2, #16
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d018      	beq.n	800313e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d024      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
 800312a:	e01f      	b.n	800316c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01b      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e016      	b.n	800316c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d107      	bne.n	800315c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0208 	bic.w	r2, r2, #8
 800315a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	2220      	movs	r2, #32
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 808e 	beq.w	800329a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8086 	beq.w	800329a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	2220      	movs	r2, #32
 8003194:	409a      	lsls	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d136      	bne.n	8003214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0216 	bic.w	r2, r2, #22
 80031b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x1da>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0208 	bic.w	r2, r2, #8
 80031e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	223f      	movs	r2, #63	; 0x3f
 80031ec:	409a      	lsls	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003206:	2b00      	cmp	r3, #0
 8003208:	d07d      	beq.n	8003306 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
        }
        return;
 8003212:	e078      	b.n	8003306 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01c      	beq.n	800325c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d108      	bne.n	8003242 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	2b00      	cmp	r3, #0
 8003236:	d030      	beq.n	800329a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
 8003240:	e02b      	b.n	800329a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d027      	beq.n	800329a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
 8003252:	e022      	b.n	800329a <HAL_DMA_IRQHandler+0x29e>
 8003254:	20000000 	.word	0x20000000
 8003258:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0210 	bic.w	r2, r2, #16
 8003278:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d032      	beq.n	8003308 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d022      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2205      	movs	r2, #5
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0201 	bic.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d307      	bcc.n	80032e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f2      	bne.n	80032c6 <HAL_DMA_IRQHandler+0x2ca>
 80032e0:	e000      	b.n	80032e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80032e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4798      	blx	r3
 8003304:	e000      	b.n	8003308 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003306:	bf00      	nop
    }
  }
}
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop

08003310 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800331e:	b2db      	uxtb	r3, r3
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	3b10      	subs	r3, #16
 800333c:	4a14      	ldr	r2, [pc, #80]	; (8003390 <DMA_CalcBaseAndBitshift+0x64>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003346:	4a13      	ldr	r2, [pc, #76]	; (8003394 <DMA_CalcBaseAndBitshift+0x68>)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4413      	add	r3, r2
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d909      	bls.n	800336e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	1d1a      	adds	r2, r3, #4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	659a      	str	r2, [r3, #88]	; 0x58
 800336c:	e007      	b.n	800337e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	aaaaaaab 	.word	0xaaaaaaab
 8003394:	0800e940 	.word	0x0800e940

08003398 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d11f      	bne.n	80033f2 <DMA_CheckFifoParam+0x5a>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d856      	bhi.n	8003466 <DMA_CheckFifoParam+0xce>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <DMA_CheckFifoParam+0x28>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033e3 	.word	0x080033e3
 80033c8:	080033d1 	.word	0x080033d1
 80033cc:	08003467 	.word	0x08003467
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d046      	beq.n	800346a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e0:	e043      	b.n	800346a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ea:	d140      	bne.n	800346e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f0:	e03d      	b.n	800346e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fa:	d121      	bne.n	8003440 <DMA_CheckFifoParam+0xa8>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d837      	bhi.n	8003472 <DMA_CheckFifoParam+0xda>
 8003402:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <DMA_CheckFifoParam+0x70>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	08003419 	.word	0x08003419
 800340c:	0800341f 	.word	0x0800341f
 8003410:	08003419 	.word	0x08003419
 8003414:	08003431 	.word	0x08003431
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      break;
 800341c:	e030      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d025      	beq.n	8003476 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800342e:	e022      	b.n	8003476 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003438:	d11f      	bne.n	800347a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800343e:	e01c      	b.n	800347a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d903      	bls.n	800344e <DMA_CheckFifoParam+0xb6>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d003      	beq.n	8003454 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800344c:	e018      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      break;
 8003452:	e015      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00e      	beq.n	800347e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
      break;
 8003464:	e00b      	b.n	800347e <DMA_CheckFifoParam+0xe6>
      break;
 8003466:	bf00      	nop
 8003468:	e00a      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;
 800346a:	bf00      	nop
 800346c:	e008      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;
 800346e:	bf00      	nop
 8003470:	e006      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;
 8003472:	bf00      	nop
 8003474:	e004      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;   
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <DMA_CheckFifoParam+0xe8>
      break;
 800347e:	bf00      	nop
    }
  } 
  
  return status; 
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop

08003490 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	460b      	mov	r3, r1
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80034a2:	7afb      	ldrb	r3, [r7, #11]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	605a      	str	r2, [r3, #4]
      break;
 80034ae:	e002      	b.n	80034b6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	75fb      	strb	r3, [r7, #23]
      break;
 80034b4:	bf00      	nop
  }

  return status;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034d4:	f023 031f 	bic.w	r3, r3, #31
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d110      	bne.n	80034fe <HAL_EXTI_GetHandle+0x3a>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80034e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034e6:	d005      	beq.n	80034f4 <HAL_EXTI_GetHandle+0x30>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80034ee:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80034f2:	d104      	bne.n	80034fe <HAL_EXTI_GetHandle+0x3a>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2b16      	cmp	r3, #22
 80034fc:	d904      	bls.n	8003508 <HAL_EXTI_GetHandle+0x44>
 80034fe:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003502:	4808      	ldr	r0, [pc, #32]	; (8003524 <HAL_EXTI_GetHandle+0x60>)
 8003504:	f7fe faf8 	bl	8001af8 <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_EXTI_GetHandle+0x4e>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e003      	b.n	800351a <HAL_EXTI_GetHandle+0x56>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
  }
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	0800e754 	.word	0x0800e754

08003528 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2201      	movs	r2, #1
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <HAL_EXTI_IRQHandler+0x44>)
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4013      	ands	r3, r2
 8003548:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8003550:	4a06      	ldr	r2, [pc, #24]	; (800356c <HAL_EXTI_IRQHandler+0x44>)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4798      	blx	r3
    }
  }
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40013c00 	.word	0x40013c00

08003570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <HAL_GPIO_Init+0x108>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d017      	beq.n	80035be <HAL_GPIO_Init+0x4e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a3a      	ldr	r2, [pc, #232]	; (800367c <HAL_GPIO_Init+0x10c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_GPIO_Init+0x4e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a39      	ldr	r2, [pc, #228]	; (8003680 <HAL_GPIO_Init+0x110>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00f      	beq.n	80035be <HAL_GPIO_Init+0x4e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a38      	ldr	r2, [pc, #224]	; (8003684 <HAL_GPIO_Init+0x114>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00b      	beq.n	80035be <HAL_GPIO_Init+0x4e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a37      	ldr	r2, [pc, #220]	; (8003688 <HAL_GPIO_Init+0x118>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <HAL_GPIO_Init+0x4e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a36      	ldr	r2, [pc, #216]	; (800368c <HAL_GPIO_Init+0x11c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x4e>
 80035b6:	21ac      	movs	r1, #172	; 0xac
 80035b8:	4835      	ldr	r0, [pc, #212]	; (8003690 <HAL_GPIO_Init+0x120>)
 80035ba:	f7fe fa9d 	bl	8001af8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_GPIO_Init+0x64>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x6c>
 80035d4:	21ad      	movs	r1, #173	; 0xad
 80035d6:	482e      	ldr	r0, [pc, #184]	; (8003690 <HAL_GPIO_Init+0x120>)
 80035d8:	f7fe fa8e 	bl	8001af8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d035      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d031      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b11      	cmp	r3, #17
 80035f2:	d02d      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d029      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b12      	cmp	r3, #18
 8003602:	d025      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4a22      	ldr	r2, [pc, #136]	; (8003694 <HAL_GPIO_Init+0x124>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d020      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4a21      	ldr	r2, [pc, #132]	; (8003698 <HAL_GPIO_Init+0x128>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01b      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4a1f      	ldr	r2, [pc, #124]	; (800369c <HAL_GPIO_Init+0x12c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d016      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <HAL_GPIO_Init+0x130>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d011      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a1c      	ldr	r2, [pc, #112]	; (80036a4 <HAL_GPIO_Init+0x134>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00c      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_GPIO_Init+0x138>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d007      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0xe0>
 8003648:	21ae      	movs	r1, #174	; 0xae
 800364a:	4811      	ldr	r0, [pc, #68]	; (8003690 <HAL_GPIO_Init+0x120>)
 800364c:	f7fe fa54 	bl	8001af8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <HAL_GPIO_Init+0x100>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d007      	beq.n	8003670 <HAL_GPIO_Init+0x100>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x100>
 8003668:	21af      	movs	r1, #175	; 0xaf
 800366a:	4809      	ldr	r0, [pc, #36]	; (8003690 <HAL_GPIO_Init+0x120>)
 800366c:	f7fe fa44 	bl	8001af8 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003670:	2300      	movs	r3, #0
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	e20f      	b.n	8003a96 <HAL_GPIO_Init+0x526>
 8003676:	bf00      	nop
 8003678:	40020000 	.word	0x40020000
 800367c:	40020400 	.word	0x40020400
 8003680:	40020800 	.word	0x40020800
 8003684:	40020c00 	.word	0x40020c00
 8003688:	40021000 	.word	0x40021000
 800368c:	40021c00 	.word	0x40021c00
 8003690:	0800e790 	.word	0x0800e790
 8003694:	10110000 	.word	0x10110000
 8003698:	10210000 	.word	0x10210000
 800369c:	10310000 	.word	0x10310000
 80036a0:	10120000 	.word	0x10120000
 80036a4:	10220000 	.word	0x10220000
 80036a8:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036ac:	2201      	movs	r2, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	f040 81e3 	bne.w	8003a90 <HAL_GPIO_Init+0x520>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d005      	beq.n	80036e2 <HAL_GPIO_Init+0x172>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d144      	bne.n	800376c <HAL_GPIO_Init+0x1fc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00f      	beq.n	800370a <HAL_GPIO_Init+0x19a>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d00b      	beq.n	800370a <HAL_GPIO_Init+0x19a>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d007      	beq.n	800370a <HAL_GPIO_Init+0x19a>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x19a>
 8003702:	21c1      	movs	r1, #193	; 0xc1
 8003704:	489f      	ldr	r0, [pc, #636]	; (8003984 <HAL_GPIO_Init+0x414>)
 8003706:	f7fe f9f7 	bl	8001af8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	2203      	movs	r2, #3
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003740:	2201      	movs	r2, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4013      	ands	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 0201 	and.w	r2, r3, #1
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	2b03      	cmp	r3, #3
 8003776:	d017      	beq.n	80037a8 <HAL_GPIO_Init+0x238>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	2203      	movs	r2, #3
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	f040 80a0 	bne.w	80038f6 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d077      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b09      	cmp	r3, #9
 80037c4:	d073      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d06f      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d06b      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d067      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d063      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d05f      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d05b      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d057      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d053      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d04f      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b04      	cmp	r3, #4
 8003814:	d04b      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b04      	cmp	r3, #4
 800381c:	d047      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d043      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b05      	cmp	r3, #5
 800382c:	d03f      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	2b05      	cmp	r3, #5
 8003834:	d03b      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b05      	cmp	r3, #5
 800383c:	d037      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b06      	cmp	r3, #6
 8003844:	d033      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b06      	cmp	r3, #6
 800384c:	d02f      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b05      	cmp	r3, #5
 8003854:	d02b      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b06      	cmp	r3, #6
 800385c:	d027      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b07      	cmp	r3, #7
 8003864:	d023      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b07      	cmp	r3, #7
 800386c:	d01f      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b07      	cmp	r3, #7
 8003874:	d01b      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b08      	cmp	r3, #8
 800387c:	d017      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b0a      	cmp	r3, #10
 8003884:	d013      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b09      	cmp	r3, #9
 800388c:	d00f      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b09      	cmp	r3, #9
 8003894:	d00b      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d007      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x33e>
 80038a6:	21dc      	movs	r1, #220	; 0xdc
 80038a8:	4836      	ldr	r0, [pc, #216]	; (8003984 <HAL_GPIO_Init+0x414>)
 80038aa:	f7fe f925 	bl	8001af8 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	08da      	lsrs	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3208      	adds	r2, #8
 80038b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	08da      	lsrs	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3208      	adds	r2, #8
 80038f0:	69b9      	ldr	r1, [r7, #24]
 80038f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	2203      	movs	r2, #3
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0203 	and.w	r2, r3, #3
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80ac 	beq.w	8003a90 <HAL_GPIO_Init+0x520>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_GPIO_Init+0x418>)
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <HAL_GPIO_Init+0x418>)
 8003942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003946:	6453      	str	r3, [r2, #68]	; 0x44
 8003948:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <HAL_GPIO_Init+0x418>)
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003954:	4a0d      	ldr	r2, [pc, #52]	; (800398c <HAL_GPIO_Init+0x41c>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	220f      	movs	r2, #15
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <HAL_GPIO_Init+0x420>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d023      	beq.n	80039c8 <HAL_GPIO_Init+0x458>
 8003980:	e008      	b.n	8003994 <HAL_GPIO_Init+0x424>
 8003982:	bf00      	nop
 8003984:	0800e790 	.word	0x0800e790
 8003988:	40023800 	.word	0x40023800
 800398c:	40013800 	.word	0x40013800
 8003990:	40020000 	.word	0x40020000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a44      	ldr	r2, [pc, #272]	; (8003aa8 <HAL_GPIO_Init+0x538>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <HAL_GPIO_Init+0x454>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a43      	ldr	r2, [pc, #268]	; (8003aac <HAL_GPIO_Init+0x53c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00d      	beq.n	80039c0 <HAL_GPIO_Init+0x450>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a42      	ldr	r2, [pc, #264]	; (8003ab0 <HAL_GPIO_Init+0x540>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d007      	beq.n	80039bc <HAL_GPIO_Init+0x44c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a41      	ldr	r2, [pc, #260]	; (8003ab4 <HAL_GPIO_Init+0x544>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d101      	bne.n	80039b8 <HAL_GPIO_Init+0x448>
 80039b4:	2304      	movs	r3, #4
 80039b6:	e008      	b.n	80039ca <HAL_GPIO_Init+0x45a>
 80039b8:	2307      	movs	r3, #7
 80039ba:	e006      	b.n	80039ca <HAL_GPIO_Init+0x45a>
 80039bc:	2303      	movs	r3, #3
 80039be:	e004      	b.n	80039ca <HAL_GPIO_Init+0x45a>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e002      	b.n	80039ca <HAL_GPIO_Init+0x45a>
 80039c4:	2301      	movs	r3, #1
 80039c6:	e000      	b.n	80039ca <HAL_GPIO_Init+0x45a>
 80039c8:	2300      	movs	r3, #0
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	f002 0203 	and.w	r2, r2, #3
 80039d0:	0092      	lsls	r2, r2, #2
 80039d2:	4093      	lsls	r3, r2
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039da:	4937      	ldr	r1, [pc, #220]	; (8003ab8 <HAL_GPIO_Init+0x548>)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	3302      	adds	r3, #2
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039e8:	4b34      	ldr	r3, [pc, #208]	; (8003abc <HAL_GPIO_Init+0x54c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a0c:	4a2b      	ldr	r2, [pc, #172]	; (8003abc <HAL_GPIO_Init+0x54c>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a12:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <HAL_GPIO_Init+0x54c>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a36:	4a21      	ldr	r2, [pc, #132]	; (8003abc <HAL_GPIO_Init+0x54c>)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a3c:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <HAL_GPIO_Init+0x54c>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a60:	4a16      	ldr	r2, [pc, #88]	; (8003abc <HAL_GPIO_Init+0x54c>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_GPIO_Init+0x54c>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x51a>
        {
          temp |= iocurrent;
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <HAL_GPIO_Init+0x54c>)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	f67f ae07 	bls.w	80036ac <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	3720      	adds	r7, #32
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40013800 	.word	0x40013800
 8003abc:	40013c00 	.word	0x40013c00

08003ac0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a71      	ldr	r2, [pc, #452]	; (8003ca0 <HAL_GPIO_DeInit+0x1e0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d018      	beq.n	8003b10 <HAL_GPIO_DeInit+0x50>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a70      	ldr	r2, [pc, #448]	; (8003ca4 <HAL_GPIO_DeInit+0x1e4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d014      	beq.n	8003b10 <HAL_GPIO_DeInit+0x50>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a6f      	ldr	r2, [pc, #444]	; (8003ca8 <HAL_GPIO_DeInit+0x1e8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d010      	beq.n	8003b10 <HAL_GPIO_DeInit+0x50>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a6e      	ldr	r2, [pc, #440]	; (8003cac <HAL_GPIO_DeInit+0x1ec>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00c      	beq.n	8003b10 <HAL_GPIO_DeInit+0x50>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a6d      	ldr	r2, [pc, #436]	; (8003cb0 <HAL_GPIO_DeInit+0x1f0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d008      	beq.n	8003b10 <HAL_GPIO_DeInit+0x50>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a6c      	ldr	r2, [pc, #432]	; (8003cb4 <HAL_GPIO_DeInit+0x1f4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_GPIO_DeInit+0x50>
 8003b06:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003b0a:	486b      	ldr	r0, [pc, #428]	; (8003cb8 <HAL_GPIO_DeInit+0x1f8>)
 8003b0c:	f7fd fff4 	bl	8001af8 <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	e0bb      	b.n	8003c8e <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b16:	2201      	movs	r2, #1
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	f040 80ab 	bne.w	8003c88 <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003b32:	4a62      	ldr	r2, [pc, #392]	; (8003cbc <HAL_GPIO_DeInit+0x1fc>)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	3302      	adds	r3, #2
 8003b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	220f      	movs	r2, #15
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a52      	ldr	r2, [pc, #328]	; (8003ca0 <HAL_GPIO_DeInit+0x1e0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d019      	beq.n	8003b90 <HAL_GPIO_DeInit+0xd0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a51      	ldr	r2, [pc, #324]	; (8003ca4 <HAL_GPIO_DeInit+0x1e4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <HAL_GPIO_DeInit+0xcc>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a50      	ldr	r2, [pc, #320]	; (8003ca8 <HAL_GPIO_DeInit+0x1e8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00d      	beq.n	8003b88 <HAL_GPIO_DeInit+0xc8>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a4f      	ldr	r2, [pc, #316]	; (8003cac <HAL_GPIO_DeInit+0x1ec>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d007      	beq.n	8003b84 <HAL_GPIO_DeInit+0xc4>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a4e      	ldr	r2, [pc, #312]	; (8003cb0 <HAL_GPIO_DeInit+0x1f0>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d101      	bne.n	8003b80 <HAL_GPIO_DeInit+0xc0>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	e008      	b.n	8003b92 <HAL_GPIO_DeInit+0xd2>
 8003b80:	2307      	movs	r3, #7
 8003b82:	e006      	b.n	8003b92 <HAL_GPIO_DeInit+0xd2>
 8003b84:	2303      	movs	r3, #3
 8003b86:	e004      	b.n	8003b92 <HAL_GPIO_DeInit+0xd2>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e002      	b.n	8003b92 <HAL_GPIO_DeInit+0xd2>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <HAL_GPIO_DeInit+0xd2>
 8003b90:	2300      	movs	r3, #0
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	f002 0203 	and.w	r2, r2, #3
 8003b98:	0092      	lsls	r2, r2, #2
 8003b9a:	4093      	lsls	r3, r2
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d132      	bne.n	8003c08 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ba2:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <HAL_GPIO_DeInit+0x200>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	4945      	ldr	r1, [pc, #276]	; (8003cc0 <HAL_GPIO_DeInit+0x200>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003bb0:	4b43      	ldr	r3, [pc, #268]	; (8003cc0 <HAL_GPIO_DeInit+0x200>)
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	4941      	ldr	r1, [pc, #260]	; (8003cc0 <HAL_GPIO_DeInit+0x200>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003bbe:	4b40      	ldr	r3, [pc, #256]	; (8003cc0 <HAL_GPIO_DeInit+0x200>)
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	493e      	ldr	r1, [pc, #248]	; (8003cc0 <HAL_GPIO_DeInit+0x200>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003bcc:	4b3c      	ldr	r3, [pc, #240]	; (8003cc0 <HAL_GPIO_DeInit+0x200>)
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	493a      	ldr	r1, [pc, #232]	; (8003cc0 <HAL_GPIO_DeInit+0x200>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	220f      	movs	r2, #15
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003bea:	4a34      	ldr	r2, [pc, #208]	; (8003cbc <HAL_GPIO_DeInit+0x1fc>)
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	4830      	ldr	r0, [pc, #192]	; (8003cbc <HAL_GPIO_DeInit+0x1fc>)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	400a      	ands	r2, r1
 8003c02:	3302      	adds	r3, #2
 8003c04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	2103      	movs	r1, #3
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	401a      	ands	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	08da      	lsrs	r2, r3, #3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3208      	adds	r2, #8
 8003c26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	220f      	movs	r2, #15
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	08d2      	lsrs	r2, r2, #3
 8003c3e:	4019      	ands	r1, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3208      	adds	r2, #8
 8003c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	2103      	movs	r1, #3
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	401a      	ands	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	2101      	movs	r1, #1
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2103      	movs	r1, #3
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	401a      	ands	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b0f      	cmp	r3, #15
 8003c92:	f67f af40 	bls.w	8003b16 <HAL_GPIO_DeInit+0x56>
    }
  }
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021c00 	.word	0x40021c00
 8003cb8:	0800e790 	.word	0x0800e790
 8003cbc:	40013800 	.word	0x40013800
 8003cc0:	40013c00 	.word	0x40013c00

08003cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <HAL_GPIO_ReadPin+0x1c>
 8003cd6:	887b      	ldrh	r3, [r7, #2]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <HAL_GPIO_ReadPin+0x26>
 8003ce0:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003ce4:	4809      	ldr	r0, [pc, #36]	; (8003d0c <HAL_GPIO_ReadPin+0x48>)
 8003ce6:	f7fd ff07 	bl	8001af8 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	887b      	ldrh	r3, [r7, #2]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	e001      	b.n	8003d00 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	0800e790 	.word	0x0800e790

08003d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	807b      	strh	r3, [r7, #2]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003d20:	887b      	ldrh	r3, [r7, #2]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d004      	beq.n	8003d30 <HAL_GPIO_WritePin+0x20>
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d004      	beq.n	8003d3a <HAL_GPIO_WritePin+0x2a>
 8003d30:	f240 119b 	movw	r1, #411	; 0x19b
 8003d34:	480e      	ldr	r0, [pc, #56]	; (8003d70 <HAL_GPIO_WritePin+0x60>)
 8003d36:	f7fd fedf 	bl	8001af8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003d3a:	787b      	ldrb	r3, [r7, #1]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_GPIO_WritePin+0x40>
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d004      	beq.n	8003d50 <HAL_GPIO_WritePin+0x40>
 8003d46:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003d4a:	4809      	ldr	r0, [pc, #36]	; (8003d70 <HAL_GPIO_WritePin+0x60>)
 8003d4c:	f7fd fed4 	bl	8001af8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003d50:	787b      	ldrb	r3, [r7, #1]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d56:	887a      	ldrh	r2, [r7, #2]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d5c:	e003      	b.n	8003d66 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	041a      	lsls	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	619a      	str	r2, [r3, #24]
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	0800e790 	.word	0x0800e790

08003d74 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003d80:	887b      	ldrh	r3, [r7, #2]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <HAL_GPIO_TogglePin+0x1c>
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <HAL_GPIO_TogglePin+0x26>
 8003d90:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003d94:	480a      	ldr	r0, [pc, #40]	; (8003dc0 <HAL_GPIO_TogglePin+0x4c>)
 8003d96:	f7fd feaf 	bl	8001af8 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003da0:	887a      	ldrh	r2, [r7, #2]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4013      	ands	r3, r2
 8003da6:	041a      	lsls	r2, r3, #16
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	43d9      	mvns	r1, r3
 8003dac:	887b      	ldrh	r3, [r7, #2]
 8003dae:	400b      	ands	r3, r1
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	619a      	str	r2, [r3, #24]
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	0800e790 	.word	0x0800e790

08003dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd0:	695a      	ldr	r2, [r3, #20]
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dda:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f806 	bl	8003df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40013c00 	.word	0x40013c00

08003df4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e1be      	b.n	800419c <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a9f      	ldr	r2, [pc, #636]	; (80040a0 <HAL_I2C_Init+0x294>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_I2C_Init+0x3a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a9d      	ldr	r2, [pc, #628]	; (80040a4 <HAL_I2C_Init+0x298>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_I2C_Init+0x3a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a9c      	ldr	r2, [pc, #624]	; (80040a8 <HAL_I2C_Init+0x29c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_I2C_Init+0x3a>
 8003e3c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003e40:	489a      	ldr	r0, [pc, #616]	; (80040ac <HAL_I2C_Init+0x2a0>)
 8003e42:	f7fd fe59 	bl	8001af8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <HAL_I2C_Init+0x4c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4a97      	ldr	r2, [pc, #604]	; (80040b0 <HAL_I2C_Init+0x2a4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d904      	bls.n	8003e62 <HAL_I2C_Init+0x56>
 8003e58:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003e5c:	4893      	ldr	r0, [pc, #588]	; (80040ac <HAL_I2C_Init+0x2a0>)
 8003e5e:	f7fd fe4b 	bl	8001af8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d009      	beq.n	8003e7e <HAL_I2C_Init+0x72>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e72:	d004      	beq.n	8003e7e <HAL_I2C_Init+0x72>
 8003e74:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003e78:	488c      	ldr	r0, [pc, #560]	; (80040ac <HAL_I2C_Init+0x2a0>)
 8003e7a:	f7fd fe3d 	bl	8001af8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <HAL_I2C_Init+0x8c>
 8003e8e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003e92:	4886      	ldr	r0, [pc, #536]	; (80040ac <HAL_I2C_Init+0x2a0>)
 8003e94:	f7fd fe30 	bl	8001af8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea0:	d009      	beq.n	8003eb6 <HAL_I2C_Init+0xaa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003eaa:	d004      	beq.n	8003eb6 <HAL_I2C_Init+0xaa>
 8003eac:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003eb0:	487e      	ldr	r0, [pc, #504]	; (80040ac <HAL_I2C_Init+0x2a0>)
 8003eb2:	f7fd fe21 	bl	8001af8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_I2C_Init+0xc4>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d004      	beq.n	8003ed0 <HAL_I2C_Init+0xc4>
 8003ec6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003eca:	4878      	ldr	r0, [pc, #480]	; (80040ac <HAL_I2C_Init+0x2a0>)
 8003ecc:	f7fd fe14 	bl	8001af8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <HAL_I2C_Init+0xda>
 8003edc:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003ee0:	4872      	ldr	r0, [pc, #456]	; (80040ac <HAL_I2C_Init+0x2a0>)
 8003ee2:	f7fd fe09 	bl	8001af8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <HAL_I2C_Init+0xf4>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d004      	beq.n	8003f00 <HAL_I2C_Init+0xf4>
 8003ef6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003efa:	486c      	ldr	r0, [pc, #432]	; (80040ac <HAL_I2C_Init+0x2a0>)
 8003efc:	f7fd fdfc 	bl	8001af8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_I2C_Init+0x10e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	2b80      	cmp	r3, #128	; 0x80
 8003f0e:	d004      	beq.n	8003f1a <HAL_I2C_Init+0x10e>
 8003f10:	f240 11c7 	movw	r1, #455	; 0x1c7
 8003f14:	4865      	ldr	r0, [pc, #404]	; (80040ac <HAL_I2C_Init+0x2a0>)
 8003f16:	f7fd fdef 	bl	8001af8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fd fd00 	bl	8001934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	; 0x24
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f6c:	f002 fa28 	bl	80063c0 <HAL_RCC_GetPCLK1Freq>
 8003f70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4a4f      	ldr	r2, [pc, #316]	; (80040b4 <HAL_I2C_Init+0x2a8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d807      	bhi.n	8003f8c <HAL_I2C_Init+0x180>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4a4e      	ldr	r2, [pc, #312]	; (80040b8 <HAL_I2C_Init+0x2ac>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	bf94      	ite	ls
 8003f84:	2301      	movls	r3, #1
 8003f86:	2300      	movhi	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e006      	b.n	8003f9a <HAL_I2C_Init+0x18e>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a4b      	ldr	r2, [pc, #300]	; (80040bc <HAL_I2C_Init+0x2b0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	bf94      	ite	ls
 8003f94:	2301      	movls	r3, #1
 8003f96:	2300      	movhi	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0fc      	b.n	800419c <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a46      	ldr	r2, [pc, #280]	; (80040c0 <HAL_I2C_Init+0x2b4>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	0c9b      	lsrs	r3, r3, #18
 8003fac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a38      	ldr	r2, [pc, #224]	; (80040b4 <HAL_I2C_Init+0x2a8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d802      	bhi.n	8003fdc <HAL_I2C_Init+0x1d0>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	e009      	b.n	8003ff0 <HAL_I2C_Init+0x1e4>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fe2:	fb02 f303 	mul.w	r3, r2, r3
 8003fe6:	4a37      	ldr	r2, [pc, #220]	; (80040c4 <HAL_I2C_Init+0x2b8>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	099b      	lsrs	r3, r3, #6
 8003fee:	3301      	adds	r3, #1
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004002:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	492a      	ldr	r1, [pc, #168]	; (80040b4 <HAL_I2C_Init+0x2a8>)
 800400c:	428b      	cmp	r3, r1
 800400e:	d819      	bhi.n	8004044 <HAL_I2C_Init+0x238>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1e59      	subs	r1, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	fbb1 f3f3 	udiv	r3, r1, r3
 800401e:	1c59      	adds	r1, r3, #1
 8004020:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004024:	400b      	ands	r3, r1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_I2C_Init+0x234>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1e59      	subs	r1, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fbb1 f3f3 	udiv	r3, r1, r3
 8004038:	3301      	adds	r3, #1
 800403a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403e:	e066      	b.n	800410e <HAL_I2C_Init+0x302>
 8004040:	2304      	movs	r3, #4
 8004042:	e064      	b.n	800410e <HAL_I2C_Init+0x302>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <HAL_I2C_Init+0x264>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1e58      	subs	r0, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6859      	ldr	r1, [r3, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	440b      	add	r3, r1
 800405a:	fbb0 f3f3 	udiv	r3, r0, r3
 800405e:	3301      	adds	r3, #1
 8004060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e012      	b.n	8004096 <HAL_I2C_Init+0x28a>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	1e58      	subs	r0, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	0099      	lsls	r1, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	fbb0 f3f3 	udiv	r3, r0, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <HAL_I2C_Init+0x2bc>
 800409a:	2301      	movs	r3, #1
 800409c:	e037      	b.n	800410e <HAL_I2C_Init+0x302>
 800409e:	bf00      	nop
 80040a0:	40005400 	.word	0x40005400
 80040a4:	40005800 	.word	0x40005800
 80040a8:	40005c00 	.word	0x40005c00
 80040ac:	0800e7cc 	.word	0x0800e7cc
 80040b0:	00061a80 	.word	0x00061a80
 80040b4:	000186a0 	.word	0x000186a0
 80040b8:	001e847f 	.word	0x001e847f
 80040bc:	003d08ff 	.word	0x003d08ff
 80040c0:	431bde83 	.word	0x431bde83
 80040c4:	10624dd3 	.word	0x10624dd3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10e      	bne.n	80040ee <HAL_I2C_Init+0x2e2>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1e58      	subs	r0, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	440b      	add	r3, r1
 80040de:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e2:	3301      	adds	r3, #1
 80040e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ec:	e00f      	b.n	800410e <HAL_I2C_Init+0x302>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1e58      	subs	r0, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	0099      	lsls	r1, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	fbb0 f3f3 	udiv	r3, r0, r3
 8004104:	3301      	adds	r3, #1
 8004106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	6809      	ldr	r1, [r1, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800413c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6911      	ldr	r1, [r2, #16]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68d2      	ldr	r2, [r2, #12]
 8004148:	4311      	orrs	r1, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	430b      	orrs	r3, r1
 8004150:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d003      	beq.n	80041dc <HAL_I2C_EV_IRQHandler+0x38>
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	f040 80bd 	bne.w	8004356 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <HAL_I2C_EV_IRQHandler+0x6e>
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80041fc:	d003      	beq.n	8004206 <HAL_I2C_EV_IRQHandler+0x62>
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004204:	d101      	bne.n	800420a <HAL_I2C_EV_IRQHandler+0x66>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_I2C_EV_IRQHandler+0x68>
 800420a:	2300      	movs	r3, #0
 800420c:	2b01      	cmp	r3, #1
 800420e:	f000 812e 	beq.w	800446e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00c      	beq.n	8004236 <HAL_I2C_EV_IRQHandler+0x92>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	0a5b      	lsrs	r3, r3, #9
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d006      	beq.n	8004236 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f001 fb3d 	bl	80058a8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fcbb 	bl	8004baa <I2C_Master_SB>
 8004234:	e08e      	b.n	8004354 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	08db      	lsrs	r3, r3, #3
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0xb2>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	0a5b      	lsrs	r3, r3, #9
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fd31 	bl	8004cb6 <I2C_Master_ADD10>
 8004254:	e07e      	b.n	8004354 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_I2C_EV_IRQHandler+0xd2>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	0a5b      	lsrs	r3, r3, #9
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fd4b 	bl	8004d0a <I2C_Master_ADDR>
 8004274:	e06e      	b.n	8004354 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d037      	beq.n	80042f2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800428c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004290:	f000 80ef 	beq.w	8004472 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	09db      	lsrs	r3, r3, #7
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00f      	beq.n	80042c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	0a9b      	lsrs	r3, r3, #10
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d009      	beq.n	80042c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d103      	bne.n	80042c0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f948 	bl	800454e <I2C_MasterTransmit_TXE>
 80042be:	e049      	b.n	8004354 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	089b      	lsrs	r3, r3, #2
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80d2 	beq.w	8004472 <HAL_I2C_EV_IRQHandler+0x2ce>
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	0a5b      	lsrs	r3, r3, #9
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80cb 	beq.w	8004472 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d103      	bne.n	80042ea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f9cf 	bl	8004686 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042e8:	e0c3      	b.n	8004472 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fa33 	bl	8004756 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f0:	e0bf      	b.n	8004472 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004300:	f000 80b7 	beq.w	8004472 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00f      	beq.n	8004330 <HAL_I2C_EV_IRQHandler+0x18c>
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <HAL_I2C_EV_IRQHandler+0x18c>
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	089b      	lsrs	r3, r3, #2
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 faa3 	bl	8004874 <I2C_MasterReceive_RXNE>
 800432e:	e011      	b.n	8004354 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	089b      	lsrs	r3, r3, #2
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 809a 	beq.w	8004472 <HAL_I2C_EV_IRQHandler+0x2ce>
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	0a5b      	lsrs	r3, r3, #9
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8093 	beq.w	8004472 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fb42 	bl	80049d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004352:	e08e      	b.n	8004472 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004354:	e08d      	b.n	8004472 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e007      	b.n	8004378 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d012      	beq.n	80043aa <HAL_I2C_EV_IRQHandler+0x206>
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	0a5b      	lsrs	r3, r3, #9
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00c      	beq.n	80043aa <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80043a0:	69b9      	ldr	r1, [r7, #24]
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 ff00 	bl	80051a8 <I2C_Slave_ADDR>
 80043a8:	e066      	b.n	8004478 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x226>
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	0a5b      	lsrs	r3, r3, #9
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 ff34 	bl	8005230 <I2C_Slave_STOPF>
 80043c8:	e056      	b.n	8004478 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043ca:	7bbb      	ldrb	r3, [r7, #14]
 80043cc:	2b21      	cmp	r3, #33	; 0x21
 80043ce:	d002      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x232>
 80043d0:	7bbb      	ldrb	r3, [r7, #14]
 80043d2:	2b29      	cmp	r3, #41	; 0x29
 80043d4:	d125      	bne.n	8004422 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	09db      	lsrs	r3, r3, #7
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00f      	beq.n	8004402 <HAL_I2C_EV_IRQHandler+0x25e>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	0a9b      	lsrs	r3, r3, #10
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_I2C_EV_IRQHandler+0x25e>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fe16 	bl	800502c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004400:	e039      	b.n	8004476 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d033      	beq.n	8004476 <HAL_I2C_EV_IRQHandler+0x2d2>
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	0a5b      	lsrs	r3, r3, #9
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d02d      	beq.n	8004476 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fe43 	bl	80050a6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004420:	e029      	b.n	8004476 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	099b      	lsrs	r3, r3, #6
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00f      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x2aa>
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	0a9b      	lsrs	r3, r3, #10
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <HAL_I2C_EV_IRQHandler+0x2aa>
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fe4e 	bl	80050e8 <I2C_SlaveReceive_RXNE>
 800444c:	e014      	b.n	8004478 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	089b      	lsrs	r3, r3, #2
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00e      	beq.n	8004478 <HAL_I2C_EV_IRQHandler+0x2d4>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	0a5b      	lsrs	r3, r3, #9
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fe7c 	bl	8005164 <I2C_SlaveReceive_BTF>
 800446c:	e004      	b.n	8004478 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800446e:	bf00      	nop
 8004470:	e002      	b.n	8004478 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004472:	bf00      	nop
 8004474:	e000      	b.n	8004478 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004476:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	70fb      	strb	r3, [r7, #3]
 80044da:	4613      	mov	r3, r2
 80044dc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004564:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d150      	bne.n	8004616 <I2C_MasterTransmit_TXE+0xc8>
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b21      	cmp	r3, #33	; 0x21
 8004578:	d14d      	bne.n	8004616 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d01d      	beq.n	80045bc <I2C_MasterTransmit_TXE+0x6e>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b20      	cmp	r3, #32
 8004584:	d01a      	beq.n	80045bc <I2C_MasterTransmit_TXE+0x6e>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800458c:	d016      	beq.n	80045bc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800459c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2211      	movs	r2, #17
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ff62 	bl	800447e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045ba:	e060      	b.n	800467e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ca:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045da:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d107      	bne.n	8004606 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ff7d 	bl	80044fe <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004604:	e03b      	b.n	800467e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ff35 	bl	800447e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004614:	e033      	b.n	800467e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	2b21      	cmp	r3, #33	; 0x21
 800461a:	d005      	beq.n	8004628 <I2C_MasterTransmit_TXE+0xda>
 800461c:	7bbb      	ldrb	r3, [r7, #14]
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d12d      	bne.n	800467e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b22      	cmp	r3, #34	; 0x22
 8004626:	d12a      	bne.n	800467e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004640:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004642:	e01c      	b.n	800467e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d103      	bne.n	8004658 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f880 	bl	8004756 <I2C_MemoryTransmit_TXE_BTF>
}
 8004656:	e012      	b.n	800467e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800467c:	e7ff      	b.n	800467e <I2C_MasterTransmit_TXE+0x130>
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b21      	cmp	r3, #33	; 0x21
 800469e:	d156      	bne.n	800474e <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d012      	beq.n	80046d0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	781a      	ldrb	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80046ce:	e03e      	b.n	800474e <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d01d      	beq.n	8004712 <I2C_MasterTransmit_BTF+0x8c>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d01a      	beq.n	8004712 <I2C_MasterTransmit_BTF+0x8c>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046e2:	d016      	beq.n	8004712 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046f2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2211      	movs	r2, #17
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff feb7 	bl	800447e <HAL_I2C_MasterTxCpltCallback>
}
 8004710:	e01d      	b.n	800474e <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004720:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004730:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff fe98 	bl	800447e <HAL_I2C_MasterTxCpltCallback>
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476a:	2b00      	cmp	r3, #0
 800476c:	d11d      	bne.n	80047aa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10b      	bne.n	800478e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477a:	b2da      	uxtb	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800478c:	e06e      	b.n	800486c <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004792:	b29b      	uxth	r3, r3
 8004794:	121b      	asrs	r3, r3, #8
 8004796:	b2da      	uxtb	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047a8:	e060      	b.n	800486c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10b      	bne.n	80047ca <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047c8:	e050      	b.n	800486c <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d14c      	bne.n	800486c <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	2b22      	cmp	r3, #34	; 0x22
 80047d6:	d108      	bne.n	80047ea <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e6:	601a      	str	r2, [r3, #0]
}
 80047e8:	e040      	b.n	800486c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d015      	beq.n	8004820 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b21      	cmp	r3, #33	; 0x21
 80047f8:	d112      	bne.n	8004820 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800481e:	e025      	b.n	800486c <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d120      	bne.n	800486c <I2C_MemoryTransmit_TXE_BTF+0x116>
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2b21      	cmp	r3, #33	; 0x21
 800482e:	d11d      	bne.n	800486c <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800483e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff fe49 	bl	80044fe <HAL_I2C_MemTxCpltCallback>
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b22      	cmp	r3, #34	; 0x22
 8004886:	f040 80a2 	bne.w	80049ce <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d921      	bls.n	80048dc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	f040 8082 	bne.w	80049ce <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80048da:	e078      	b.n	80049ce <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d074      	beq.n	80049ce <I2C_MasterReceive_RXNE+0x15a>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d002      	beq.n	80048f0 <I2C_MasterReceive_RXNE+0x7c>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d16e      	bne.n	80049ce <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 ffa7 	bl	8005844 <I2C_WaitOnSTOPRequestThroughIT>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d142      	bne.n	8004982 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800491a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d10a      	bne.n	800496c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff fdd4 	bl	8004512 <HAL_I2C_MemRxCpltCallback>
}
 800496a:	e030      	b.n	80049ce <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2212      	movs	r2, #18
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fd89 	bl	8004492 <HAL_I2C_MasterRxCpltCallback>
}
 8004980:	e025      	b.n	80049ce <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004990:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2220      	movs	r2, #32
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff fdac 	bl	8004526 <HAL_I2C_ErrorCallback>
}
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d11b      	bne.n	8004a26 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004a24:	e0bd      	b.n	8004ba2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d129      	bne.n	8004a84 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d00a      	beq.n	8004a5c <I2C_MasterReceive_BTF+0x86>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d007      	beq.n	8004a5c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a82:	e08e      	b.n	8004ba2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d176      	bne.n	8004b7c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d002      	beq.n	8004a9a <I2C_MasterReceive_BTF+0xc4>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b10      	cmp	r3, #16
 8004a98:	d108      	bne.n	8004aac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e019      	b.n	8004ae0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d002      	beq.n	8004ab8 <I2C_MasterReceive_BTF+0xe2>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d108      	bne.n	8004aca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e00a      	b.n	8004ae0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d007      	beq.n	8004ae0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ade:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d10a      	bne.n	8004b66 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fcd7 	bl	8004512 <HAL_I2C_MemRxCpltCallback>
}
 8004b64:	e01d      	b.n	8004ba2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2212      	movs	r2, #18
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fc8c 	bl	8004492 <HAL_I2C_MasterRxCpltCallback>
}
 8004b7a:	e012      	b.n	8004ba2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d117      	bne.n	8004bee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bd6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004bd8:	e067      	b.n	8004caa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	611a      	str	r2, [r3, #16]
}
 8004bec:	e05d      	b.n	8004caa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf6:	d133      	bne.n	8004c60 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b21      	cmp	r3, #33	; 0x21
 8004c02:	d109      	bne.n	8004c18 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c14:	611a      	str	r2, [r3, #16]
 8004c16:	e008      	b.n	8004c2a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <I2C_Master_SB+0x92>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d108      	bne.n	8004c4e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d032      	beq.n	8004caa <I2C_Master_SB+0x100>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d02d      	beq.n	8004caa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c5c:	605a      	str	r2, [r3, #4]
}
 8004c5e:	e024      	b.n	8004caa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10e      	bne.n	8004c86 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	11db      	asrs	r3, r3, #7
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f003 0306 	and.w	r3, r3, #6
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f063 030f 	orn	r3, r3, #15
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	611a      	str	r2, [r3, #16]
}
 8004c84:	e011      	b.n	8004caa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d10d      	bne.n	8004caa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	11db      	asrs	r3, r3, #7
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 0306 	and.w	r3, r3, #6
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f063 030e 	orn	r3, r3, #14
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	611a      	str	r2, [r3, #16]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <I2C_Master_ADD10+0x26>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d108      	bne.n	8004cee <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <I2C_Master_ADD10+0x48>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cfc:	605a      	str	r2, [r3, #4]
  }
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b091      	sub	sp, #68	; 0x44
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b22      	cmp	r3, #34	; 0x22
 8004d32:	f040 8169 	bne.w	8005008 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10f      	bne.n	8004d5e <I2C_Master_ADDR+0x54>
 8004d3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d42:	2b40      	cmp	r3, #64	; 0x40
 8004d44:	d10b      	bne.n	8004d5e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d46:	2300      	movs	r3, #0
 8004d48:	633b      	str	r3, [r7, #48]	; 0x30
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	633b      	str	r3, [r7, #48]	; 0x30
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	633b      	str	r3, [r7, #48]	; 0x30
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5c:	e160      	b.n	8005020 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d11d      	bne.n	8004da2 <I2C_Master_ADDR+0x98>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d6e:	d118      	bne.n	8004da2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d70:	2300      	movs	r3, #0
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d94:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	651a      	str	r2, [r3, #80]	; 0x50
 8004da0:	e13e      	b.n	8005020 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d113      	bne.n	8004dd4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dac:	2300      	movs	r3, #0
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	e115      	b.n	8005000 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	f040 808a 	bne.w	8004ef4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004de6:	d137      	bne.n	8004e58 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e06:	d113      	bne.n	8004e30 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e16:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e18:	2300      	movs	r3, #0
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	e0e7      	b.n	8005000 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e30:	2300      	movs	r3, #0
 8004e32:	623b      	str	r3, [r7, #32]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	623b      	str	r3, [r7, #32]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	623b      	str	r3, [r7, #32]
 8004e44:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	e0d3      	b.n	8005000 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d02e      	beq.n	8004ebc <I2C_Master_ADDR+0x1b2>
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d02b      	beq.n	8004ebc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e66:	2b12      	cmp	r3, #18
 8004e68:	d102      	bne.n	8004e70 <I2C_Master_ADDR+0x166>
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d125      	bne.n	8004ebc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d00e      	beq.n	8004e94 <I2C_Master_ADDR+0x18a>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d00b      	beq.n	8004e94 <I2C_Master_ADDR+0x18a>
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d008      	beq.n	8004e94 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	e007      	b.n	8004ea4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ea2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	e0a1      	b.n	8005000 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61bb      	str	r3, [r7, #24]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	61bb      	str	r3, [r7, #24]
 8004ee0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	e085      	b.n	8005000 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d14d      	bne.n	8004f9a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d016      	beq.n	8004f32 <I2C_Master_ADDR+0x228>
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d013      	beq.n	8004f32 <I2C_Master_ADDR+0x228>
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d010      	beq.n	8004f32 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e007      	b.n	8004f42 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f40:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f50:	d117      	bne.n	8004f82 <I2C_Master_ADDR+0x278>
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f58:	d00b      	beq.n	8004f72 <I2C_Master_ADDR+0x268>
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d008      	beq.n	8004f72 <I2C_Master_ADDR+0x268>
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d005      	beq.n	8004f72 <I2C_Master_ADDR+0x268>
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	2b10      	cmp	r3, #16
 8004f6a:	d002      	beq.n	8004f72 <I2C_Master_ADDR+0x268>
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d107      	bne.n	8004f82 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f80:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	e032      	b.n	8005000 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fa8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb8:	d117      	bne.n	8004fea <I2C_Master_ADDR+0x2e0>
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fc0:	d00b      	beq.n	8004fda <I2C_Master_ADDR+0x2d0>
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d008      	beq.n	8004fda <I2C_Master_ADDR+0x2d0>
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d005      	beq.n	8004fda <I2C_Master_ADDR+0x2d0>
 8004fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d002      	beq.n	8004fda <I2C_Master_ADDR+0x2d0>
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d107      	bne.n	8004fea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fe8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fea:	2300      	movs	r3, #0
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005006:	e00b      	b.n	8005020 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
}
 800501e:	e7ff      	b.n	8005020 <I2C_Master_ADDR+0x316>
 8005020:	bf00      	nop
 8005022:	3744      	adds	r7, #68	; 0x44
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d02b      	beq.n	800509e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	781a      	ldrb	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d114      	bne.n	800509e <I2C_SlaveTransmit_TXE+0x72>
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b29      	cmp	r3, #41	; 0x29
 8005078:	d111      	bne.n	800509e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005088:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2221      	movs	r2, #33	; 0x21
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2228      	movs	r2, #40	; 0x28
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff fa04 	bl	80044a6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d011      	beq.n	80050dc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d02c      	beq.n	800515c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d114      	bne.n	800515c <I2C_SlaveReceive_RXNE+0x74>
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2b2a      	cmp	r3, #42	; 0x2a
 8005136:	d111      	bne.n	800515c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005146:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2222      	movs	r2, #34	; 0x22
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2228      	movs	r2, #40	; 0x28
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff f9af 	bl	80044ba <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d012      	beq.n	800519c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051c2:	2b28      	cmp	r3, #40	; 0x28
 80051c4:	d127      	bne.n	8005216 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051e2:	2301      	movs	r3, #1
 80051e4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	09db      	lsrs	r3, r3, #7
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	81bb      	strh	r3, [r7, #12]
 80051f8:	e002      	b.n	8005200 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005208:	89ba      	ldrh	r2, [r7, #12]
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff f95d 	bl	80044ce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005214:	e008      	b.n	8005228 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0202 	mvn.w	r2, #2
 800521e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800524e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005250:	2300      	movs	r3, #0
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528c:	d172      	bne.n	8005374 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	2b22      	cmp	r3, #34	; 0x22
 8005292:	d002      	beq.n	800529a <I2C_Slave_STOPF+0x6a>
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b2a      	cmp	r3, #42	; 0x2a
 8005298:	d135      	bne.n	8005306 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f043 0204 	orr.w	r2, r3, #4
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe f81c 	bl	8003310 <HAL_DMA_GetState>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d049      	beq.n	8005372 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	4a69      	ldr	r2, [pc, #420]	; (8005488 <I2C_Slave_STOPF+0x258>)
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd fe64 	bl	8002fb8 <HAL_DMA_Abort_IT>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d03d      	beq.n	8005372 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005300:	4610      	mov	r0, r2
 8005302:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005304:	e035      	b.n	8005372 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	b29a      	uxth	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f043 0204 	orr.w	r2, r3, #4
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005338:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533e:	4618      	mov	r0, r3
 8005340:	f7fd ffe6 	bl	8003310 <HAL_DMA_GetState>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d014      	beq.n	8005374 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	4a4e      	ldr	r2, [pc, #312]	; (8005488 <I2C_Slave_STOPF+0x258>)
 8005350:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	4618      	mov	r0, r3
 8005358:	f7fd fe2e 	bl	8002fb8 <HAL_DMA_Abort_IT>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800536c:	4610      	mov	r0, r2
 800536e:	4798      	blx	r3
 8005370:	e000      	b.n	8005374 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005372:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d03e      	beq.n	80053fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b04      	cmp	r3, #4
 800538a:	d112      	bne.n	80053b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d112      	bne.n	80053e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f043 0204 	orr.w	r2, r3, #4
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f843 	bl	8005490 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800540a:	e039      	b.n	8005480 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b2a      	cmp	r3, #42	; 0x2a
 8005410:	d109      	bne.n	8005426 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2228      	movs	r2, #40	; 0x28
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff f84a 	bl	80044ba <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b28      	cmp	r3, #40	; 0x28
 8005430:	d111      	bne.n	8005456 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a15      	ldr	r2, [pc, #84]	; (800548c <I2C_Slave_STOPF+0x25c>)
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff f84b 	bl	80044ea <HAL_I2C_ListenCpltCallback>
}
 8005454:	e014      	b.n	8005480 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	2b22      	cmp	r3, #34	; 0x22
 800545c:	d002      	beq.n	8005464 <I2C_Slave_STOPF+0x234>
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	2b22      	cmp	r3, #34	; 0x22
 8005462:	d10d      	bne.n	8005480 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff f81d 	bl	80044ba <HAL_I2C_SlaveRxCpltCallback>
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	080056f5 	.word	0x080056f5
 800548c:	ffff0000 	.word	0xffff0000

08005490 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80054a8:	7bbb      	ldrb	r3, [r7, #14]
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d002      	beq.n	80054b4 <I2C_ITError+0x24>
 80054ae:	7bbb      	ldrb	r3, [r7, #14]
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d10a      	bne.n	80054ca <I2C_ITError+0x3a>
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	2b22      	cmp	r3, #34	; 0x22
 80054b8:	d107      	bne.n	80054ca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054c8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054d0:	2b28      	cmp	r3, #40	; 0x28
 80054d2:	d107      	bne.n	80054e4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2228      	movs	r2, #40	; 0x28
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054e2:	e015      	b.n	8005510 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f2:	d00a      	beq.n	800550a <I2C_ITError+0x7a>
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b60      	cmp	r3, #96	; 0x60
 80054f8:	d007      	beq.n	800550a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551e:	d162      	bne.n	80055e6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800552e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b01      	cmp	r3, #1
 800553c:	d020      	beq.n	8005580 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	4a6a      	ldr	r2, [pc, #424]	; (80056ec <I2C_ITError+0x25c>)
 8005544:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554a:	4618      	mov	r0, r3
 800554c:	f7fd fd34 	bl	8002fb8 <HAL_DMA_Abort_IT>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 8089 	beq.w	800566a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800557a:	4610      	mov	r0, r2
 800557c:	4798      	blx	r3
 800557e:	e074      	b.n	800566a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	4a59      	ldr	r2, [pc, #356]	; (80056ec <I2C_ITError+0x25c>)
 8005586:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	4618      	mov	r0, r3
 800558e:	f7fd fd13 	bl	8002fb8 <HAL_DMA_Abort_IT>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d068      	beq.n	800566a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d10b      	bne.n	80055be <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2220      	movs	r2, #32
 80055d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055e0:	4610      	mov	r0, r2
 80055e2:	4798      	blx	r3
 80055e4:	e041      	b.n	800566a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b60      	cmp	r3, #96	; 0x60
 80055f0:	d125      	bne.n	800563e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b40      	cmp	r3, #64	; 0x40
 800560c:	d10b      	bne.n	8005626 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0201 	bic.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fe ff7f 	bl	800453a <HAL_I2C_AbortCpltCallback>
 800563c:	e015      	b.n	800566a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b40      	cmp	r3, #64	; 0x40
 800564a:	d10b      	bne.n	8005664 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7fe ff5e 	bl	8004526 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10e      	bne.n	8005698 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800568a:	2b00      	cmp	r3, #0
 800568c:	d104      	bne.n	8005698 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d113      	bne.n	80056e4 <I2C_ITError+0x254>
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
 80056be:	2b28      	cmp	r3, #40	; 0x28
 80056c0:	d110      	bne.n	80056e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <I2C_ITError+0x260>)
 80056c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fe ff03 	bl	80044ea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	080056f5 	.word	0x080056f5
 80056f0:	ffff0000 	.word	0xffff0000

080056f4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800570e:	4b4b      	ldr	r3, [pc, #300]	; (800583c <I2C_DMAAbort+0x148>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	08db      	lsrs	r3, r3, #3
 8005714:	4a4a      	ldr	r2, [pc, #296]	; (8005840 <I2C_DMAAbort+0x14c>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	0a1a      	lsrs	r2, r3, #8
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	00da      	lsls	r2, r3, #3
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f043 0220 	orr.w	r2, r3, #32
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800573a:	e00a      	b.n	8005752 <I2C_DMAAbort+0x5e>
    }
    count--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3b01      	subs	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800574c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005750:	d0ea      	beq.n	8005728 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575e:	2200      	movs	r2, #0
 8005760:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	2200      	movs	r2, #0
 8005770:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005780:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	2200      	movs	r2, #0
 8005796:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	2200      	movs	r2, #0
 80057a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b60      	cmp	r3, #96	; 0x60
 80057c2:	d10e      	bne.n	80057e2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2200      	movs	r2, #0
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057da:	6978      	ldr	r0, [r7, #20]
 80057dc:	f7fe fead 	bl	800453a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057e0:	e027      	b.n	8005832 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057e2:	7cfb      	ldrb	r3, [r7, #19]
 80057e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057e8:	2b28      	cmp	r3, #40	; 0x28
 80057ea:	d117      	bne.n	800581c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800580a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2228      	movs	r2, #40	; 0x28
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800581a:	e007      	b.n	800582c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800582c:	6978      	ldr	r0, [r7, #20]
 800582e:	f7fe fe7a 	bl	8004526 <HAL_I2C_ErrorCallback>
}
 8005832:	bf00      	nop
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000000 	.word	0x20000000
 8005840:	14f8b589 	.word	0x14f8b589

08005844 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005850:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	08db      	lsrs	r3, r3, #3
 8005856:	4a13      	ldr	r2, [pc, #76]	; (80058a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	0a1a      	lsrs	r2, r3, #8
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3b01      	subs	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f043 0220 	orr.w	r2, r3, #32
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e008      	b.n	8005894 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800588c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005890:	d0e9      	beq.n	8005866 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	20000000 	.word	0x20000000
 80058a4:	14f8b589 	.word	0x14f8b589

080058a8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80058b8:	d103      	bne.n	80058c2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80058c0:	e007      	b.n	80058d2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80058ca:	d102      	bne.n	80058d2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2208      	movs	r2, #8
 80058d0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e316      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b0f      	cmp	r3, #15
 80058f8:	d903      	bls.n	8005902 <HAL_RCC_OscConfig+0x22>
 80058fa:	21e8      	movs	r1, #232	; 0xe8
 80058fc:	48a3      	ldr	r0, [pc, #652]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 80058fe:	f7fc f8fb 	bl	8001af8 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 8088 	beq.w	8005a20 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <HAL_RCC_OscConfig+0x54>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005920:	d008      	beq.n	8005934 <HAL_RCC_OscConfig+0x54>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800592a:	d003      	beq.n	8005934 <HAL_RCC_OscConfig+0x54>
 800592c:	21ed      	movs	r1, #237	; 0xed
 800592e:	4897      	ldr	r0, [pc, #604]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005930:	f7fc f8e2 	bl	8001af8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005934:	4b96      	ldr	r3, [pc, #600]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b04      	cmp	r3, #4
 800593e:	d00c      	beq.n	800595a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005940:	4b93      	ldr	r3, [pc, #588]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005948:	2b08      	cmp	r3, #8
 800594a:	d112      	bne.n	8005972 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594c:	4b90      	ldr	r3, [pc, #576]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005958:	d10b      	bne.n	8005972 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595a:	4b8d      	ldr	r3, [pc, #564]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d05b      	beq.n	8005a1e <HAL_RCC_OscConfig+0x13e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d157      	bne.n	8005a1e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e2d6      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597a:	d106      	bne.n	800598a <HAL_RCC_OscConfig+0xaa>
 800597c:	4b84      	ldr	r3, [pc, #528]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a83      	ldr	r2, [pc, #524]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	e01d      	b.n	80059c6 <HAL_RCC_OscConfig+0xe6>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005992:	d10c      	bne.n	80059ae <HAL_RCC_OscConfig+0xce>
 8005994:	4b7e      	ldr	r3, [pc, #504]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a7d      	ldr	r2, [pc, #500]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 800599a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	4b7b      	ldr	r3, [pc, #492]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a7a      	ldr	r2, [pc, #488]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 80059a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	e00b      	b.n	80059c6 <HAL_RCC_OscConfig+0xe6>
 80059ae:	4b78      	ldr	r3, [pc, #480]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a77      	ldr	r2, [pc, #476]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 80059b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b75      	ldr	r3, [pc, #468]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a74      	ldr	r2, [pc, #464]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 80059c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d013      	beq.n	80059f6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ce:	f7fc fb7b 	bl	80020c8 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d6:	f7fc fb77 	bl	80020c8 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b64      	cmp	r3, #100	; 0x64
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e29b      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e8:	4b69      	ldr	r3, [pc, #420]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0xf6>
 80059f4:	e014      	b.n	8005a20 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f6:	f7fc fb67 	bl	80020c8 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059fe:	f7fc fb63 	bl	80020c8 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b64      	cmp	r3, #100	; 0x64
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e287      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a10:	4b5f      	ldr	r3, [pc, #380]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f0      	bne.n	80059fe <HAL_RCC_OscConfig+0x11e>
 8005a1c:	e000      	b.n	8005a20 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a1e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d079      	beq.n	8005b20 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_RCC_OscConfig+0x166>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d004      	beq.n	8005a46 <HAL_RCC_OscConfig+0x166>
 8005a3c:	f240 111f 	movw	r1, #287	; 0x11f
 8005a40:	4852      	ldr	r0, [pc, #328]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005a42:	f7fc f859 	bl	8001af8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b1f      	cmp	r3, #31
 8005a4c:	d904      	bls.n	8005a58 <HAL_RCC_OscConfig+0x178>
 8005a4e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8005a52:	484e      	ldr	r0, [pc, #312]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005a54:	f7fc f850 	bl	8001af8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a58:	4b4d      	ldr	r3, [pc, #308]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 030c 	and.w	r3, r3, #12
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00b      	beq.n	8005a7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a64:	4b4a      	ldr	r3, [pc, #296]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d11c      	bne.n	8005aaa <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a70:	4b47      	ldr	r3, [pc, #284]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d116      	bne.n	8005aaa <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7c:	4b44      	ldr	r3, [pc, #272]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_RCC_OscConfig+0x1b4>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e245      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a94:	4b3e      	ldr	r3, [pc, #248]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	493b      	ldr	r1, [pc, #236]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aa8:	e03a      	b.n	8005b20 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d020      	beq.n	8005af4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ab2:	4b38      	ldr	r3, [pc, #224]	; (8005b94 <HAL_RCC_OscConfig+0x2b4>)
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab8:	f7fc fb06 	bl	80020c8 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ac0:	f7fc fb02 	bl	80020c8 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e226      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad2:	4b2f      	ldr	r3, [pc, #188]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ade:	4b2c      	ldr	r3, [pc, #176]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4928      	ldr	r1, [pc, #160]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	600b      	str	r3, [r1, #0]
 8005af2:	e015      	b.n	8005b20 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <HAL_RCC_OscConfig+0x2b4>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afa:	f7fc fae5 	bl	80020c8 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b02:	f7fc fae1 	bl	80020c8 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e205      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b14:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f0      	bne.n	8005b02 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d046      	beq.n	8005bba <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_RCC_OscConfig+0x266>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d004      	beq.n	8005b46 <HAL_RCC_OscConfig+0x266>
 8005b3c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8005b40:	4812      	ldr	r0, [pc, #72]	; (8005b8c <HAL_RCC_OscConfig+0x2ac>)
 8005b42:	f7fb ffd9 	bl	8001af8 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d016      	beq.n	8005b7c <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <HAL_RCC_OscConfig+0x2b8>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b54:	f7fc fab8 	bl	80020c8 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b5c:	f7fc fab4 	bl	80020c8 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e1d8      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b6e:	4b08      	ldr	r3, [pc, #32]	; (8005b90 <HAL_RCC_OscConfig+0x2b0>)
 8005b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0x27c>
 8005b7a:	e01e      	b.n	8005bba <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_RCC_OscConfig+0x2b8>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b82:	f7fc faa1 	bl	80020c8 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b88:	e011      	b.n	8005bae <HAL_RCC_OscConfig+0x2ce>
 8005b8a:	bf00      	nop
 8005b8c:	0800e804 	.word	0x0800e804
 8005b90:	40023800 	.word	0x40023800
 8005b94:	42470000 	.word	0x42470000
 8005b98:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b9c:	f7fc fa94 	bl	80020c8 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e1b8      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bae:	4b97      	ldr	r3, [pc, #604]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80a8 	beq.w	8005d18 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00c      	beq.n	8005bee <HAL_RCC_OscConfig+0x30e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d008      	beq.n	8005bee <HAL_RCC_OscConfig+0x30e>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b05      	cmp	r3, #5
 8005be2:	d004      	beq.n	8005bee <HAL_RCC_OscConfig+0x30e>
 8005be4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005be8:	4889      	ldr	r0, [pc, #548]	; (8005e10 <HAL_RCC_OscConfig+0x530>)
 8005bea:	f7fb ff85 	bl	8001af8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bee:	4b87      	ldr	r3, [pc, #540]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10f      	bne.n	8005c1a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	4b83      	ldr	r3, [pc, #524]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	4a82      	ldr	r2, [pc, #520]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c08:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0a:	4b80      	ldr	r3, [pc, #512]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c12:	60bb      	str	r3, [r7, #8]
 8005c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c16:	2301      	movs	r3, #1
 8005c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1a:	4b7e      	ldr	r3, [pc, #504]	; (8005e14 <HAL_RCC_OscConfig+0x534>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d118      	bne.n	8005c58 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c26:	4b7b      	ldr	r3, [pc, #492]	; (8005e14 <HAL_RCC_OscConfig+0x534>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a7a      	ldr	r2, [pc, #488]	; (8005e14 <HAL_RCC_OscConfig+0x534>)
 8005c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c32:	f7fc fa49 	bl	80020c8 <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c3a:	f7fc fa45 	bl	80020c8 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e169      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4c:	4b71      	ldr	r3, [pc, #452]	; (8005e14 <HAL_RCC_OscConfig+0x534>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d106      	bne.n	8005c6e <HAL_RCC_OscConfig+0x38e>
 8005c60:	4b6a      	ldr	r3, [pc, #424]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	4a69      	ldr	r2, [pc, #420]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6c:	e01c      	b.n	8005ca8 <HAL_RCC_OscConfig+0x3c8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b05      	cmp	r3, #5
 8005c74:	d10c      	bne.n	8005c90 <HAL_RCC_OscConfig+0x3b0>
 8005c76:	4b65      	ldr	r3, [pc, #404]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	4a64      	ldr	r2, [pc, #400]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c7c:	f043 0304 	orr.w	r3, r3, #4
 8005c80:	6713      	str	r3, [r2, #112]	; 0x70
 8005c82:	4b62      	ldr	r3, [pc, #392]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	4a61      	ldr	r2, [pc, #388]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c88:	f043 0301 	orr.w	r3, r3, #1
 8005c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8e:	e00b      	b.n	8005ca8 <HAL_RCC_OscConfig+0x3c8>
 8005c90:	4b5e      	ldr	r3, [pc, #376]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	4a5d      	ldr	r2, [pc, #372]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9c:	4b5b      	ldr	r3, [pc, #364]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	4a5a      	ldr	r2, [pc, #360]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005ca2:	f023 0304 	bic.w	r3, r3, #4
 8005ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d015      	beq.n	8005cdc <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb0:	f7fc fa0a 	bl	80020c8 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f7fc fa06 	bl	80020c8 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e128      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cce:	4b4f      	ldr	r3, [pc, #316]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0ee      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x3d8>
 8005cda:	e014      	b.n	8005d06 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cdc:	f7fc f9f4 	bl	80020c8 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce2:	e00a      	b.n	8005cfa <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ce4:	f7fc f9f0 	bl	80020c8 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e112      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cfa:	4b44      	ldr	r3, [pc, #272]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1ee      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d0c:	4b3f      	ldr	r3, [pc, #252]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	4a3e      	ldr	r2, [pc, #248]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00c      	beq.n	8005d3a <HAL_RCC_OscConfig+0x45a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d008      	beq.n	8005d3a <HAL_RCC_OscConfig+0x45a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d004      	beq.n	8005d3a <HAL_RCC_OscConfig+0x45a>
 8005d30:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005d34:	4836      	ldr	r0, [pc, #216]	; (8005e10 <HAL_RCC_OscConfig+0x530>)
 8005d36:	f7fb fedf 	bl	8001af8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80ed 	beq.w	8005f1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d44:	4b31      	ldr	r3, [pc, #196]	; (8005e0c <HAL_RCC_OscConfig+0x52c>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 030c 	and.w	r3, r3, #12
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	f000 80ae 	beq.w	8005eae <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	f040 8092 	bne.w	8005e80 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <HAL_RCC_OscConfig+0x498>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d6c:	d004      	beq.n	8005d78 <HAL_RCC_OscConfig+0x498>
 8005d6e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005d72:	4827      	ldr	r0, [pc, #156]	; (8005e10 <HAL_RCC_OscConfig+0x530>)
 8005d74:	f7fb fec0 	bl	8001af8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	2b3f      	cmp	r3, #63	; 0x3f
 8005d7e:	d904      	bls.n	8005d8a <HAL_RCC_OscConfig+0x4aa>
 8005d80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005d84:	4822      	ldr	r0, [pc, #136]	; (8005e10 <HAL_RCC_OscConfig+0x530>)
 8005d86:	f7fb feb7 	bl	8001af8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b31      	cmp	r3, #49	; 0x31
 8005d90:	d904      	bls.n	8005d9c <HAL_RCC_OscConfig+0x4bc>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005d9a:	d904      	bls.n	8005da6 <HAL_RCC_OscConfig+0x4c6>
 8005d9c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005da0:	481b      	ldr	r0, [pc, #108]	; (8005e10 <HAL_RCC_OscConfig+0x530>)
 8005da2:	f7fb fea9 	bl	8001af8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d010      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x4f0>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d00c      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x4f0>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	2b06      	cmp	r3, #6
 8005dbc:	d008      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x4f0>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d004      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x4f0>
 8005dc6:	f240 11db 	movw	r1, #475	; 0x1db
 8005dca:	4811      	ldr	r0, [pc, #68]	; (8005e10 <HAL_RCC_OscConfig+0x530>)
 8005dcc:	f7fb fe94 	bl	8001af8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d903      	bls.n	8005de0 <HAL_RCC_OscConfig+0x500>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	2b0f      	cmp	r3, #15
 8005dde:	d904      	bls.n	8005dea <HAL_RCC_OscConfig+0x50a>
 8005de0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8005de4:	480a      	ldr	r0, [pc, #40]	; (8005e10 <HAL_RCC_OscConfig+0x530>)
 8005de6:	f7fb fe87 	bl	8001af8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <HAL_RCC_OscConfig+0x538>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df0:	f7fc f96a 	bl	80020c8 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df6:	e011      	b.n	8005e1c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df8:	f7fc f966 	bl	80020c8 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d90a      	bls.n	8005e1c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e08a      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
 8005e0a:	bf00      	nop
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	0800e804 	.word	0x0800e804
 8005e14:	40007000 	.word	0x40007000
 8005e18:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1c:	4b42      	ldr	r3, [pc, #264]	; (8005f28 <HAL_RCC_OscConfig+0x648>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e7      	bne.n	8005df8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	019b      	lsls	r3, r3, #6
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	085b      	lsrs	r3, r3, #1
 8005e40:	3b01      	subs	r3, #1
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	061b      	lsls	r3, r3, #24
 8005e4c:	4936      	ldr	r1, [pc, #216]	; (8005f28 <HAL_RCC_OscConfig+0x648>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e52:	4b36      	ldr	r3, [pc, #216]	; (8005f2c <HAL_RCC_OscConfig+0x64c>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fc f936 	bl	80020c8 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fc f932 	bl	80020c8 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e056      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e72:	4b2d      	ldr	r3, [pc, #180]	; (8005f28 <HAL_RCC_OscConfig+0x648>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x580>
 8005e7e:	e04e      	b.n	8005f1e <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e80:	4b2a      	ldr	r3, [pc, #168]	; (8005f2c <HAL_RCC_OscConfig+0x64c>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e86:	f7fc f91f 	bl	80020c8 <HAL_GetTick>
 8005e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e8e:	f7fc f91b 	bl	80020c8 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e03f      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea0:	4b21      	ldr	r3, [pc, #132]	; (8005f28 <HAL_RCC_OscConfig+0x648>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f0      	bne.n	8005e8e <HAL_RCC_OscConfig+0x5ae>
 8005eac:	e037      	b.n	8005f1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e032      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005eba:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <HAL_RCC_OscConfig+0x648>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d028      	beq.n	8005f1a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d121      	bne.n	8005f1a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d11a      	bne.n	8005f1a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005eea:	4013      	ands	r3, r2
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ef0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d111      	bne.n	8005f1a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	3b01      	subs	r3, #1
 8005f04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d107      	bne.n	8005f1a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d001      	beq.n	8005f1e <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	42470060 	.word	0x42470060

08005f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e16f      	b.n	8006224 <HAL_RCC_ClockConfig+0x2f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x24>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b0f      	cmp	r3, #15
 8005f52:	d904      	bls.n	8005f5e <HAL_RCC_ClockConfig+0x2e>
 8005f54:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005f58:	487b      	ldr	r0, [pc, #492]	; (8006148 <HAL_RCC_ClockConfig+0x218>)
 8005f5a:	f7fb fdcd 	bl	8001af8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d019      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x68>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d016      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x68>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d013      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x68>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d010      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x68>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d00d      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x68>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2b05      	cmp	r3, #5
 8005f80:	d00a      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x68>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b06      	cmp	r3, #6
 8005f86:	d007      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x68>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2b07      	cmp	r3, #7
 8005f8c:	d004      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x68>
 8005f8e:	f240 215d 	movw	r1, #605	; 0x25d
 8005f92:	486d      	ldr	r0, [pc, #436]	; (8006148 <HAL_RCC_ClockConfig+0x218>)
 8005f94:	f7fb fdb0 	bl	8001af8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f98:	4b6c      	ldr	r3, [pc, #432]	; (800614c <HAL_RCC_ClockConfig+0x21c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d90c      	bls.n	8005fc0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa6:	4b69      	ldr	r3, [pc, #420]	; (800614c <HAL_RCC_ClockConfig+0x21c>)
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fae:	4b67      	ldr	r3, [pc, #412]	; (800614c <HAL_RCC_ClockConfig+0x21c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d001      	beq.n	8005fc0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e131      	b.n	8006224 <HAL_RCC_ClockConfig+0x2f4>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d049      	beq.n	8006060 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fd8:	4b5d      	ldr	r3, [pc, #372]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	4a5c      	ldr	r2, [pc, #368]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 8005fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ff0:	4b57      	ldr	r3, [pc, #348]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4a56      	ldr	r2, [pc, #344]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 8005ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d024      	beq.n	800604e <HAL_RCC_ClockConfig+0x11e>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2b80      	cmp	r3, #128	; 0x80
 800600a:	d020      	beq.n	800604e <HAL_RCC_ClockConfig+0x11e>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	2b90      	cmp	r3, #144	; 0x90
 8006012:	d01c      	beq.n	800604e <HAL_RCC_ClockConfig+0x11e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2ba0      	cmp	r3, #160	; 0xa0
 800601a:	d018      	beq.n	800604e <HAL_RCC_ClockConfig+0x11e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2bb0      	cmp	r3, #176	; 0xb0
 8006022:	d014      	beq.n	800604e <HAL_RCC_ClockConfig+0x11e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2bc0      	cmp	r3, #192	; 0xc0
 800602a:	d010      	beq.n	800604e <HAL_RCC_ClockConfig+0x11e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2bd0      	cmp	r3, #208	; 0xd0
 8006032:	d00c      	beq.n	800604e <HAL_RCC_ClockConfig+0x11e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2be0      	cmp	r3, #224	; 0xe0
 800603a:	d008      	beq.n	800604e <HAL_RCC_ClockConfig+0x11e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2bf0      	cmp	r3, #240	; 0xf0
 8006042:	d004      	beq.n	800604e <HAL_RCC_ClockConfig+0x11e>
 8006044:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006048:	483f      	ldr	r0, [pc, #252]	; (8006148 <HAL_RCC_ClockConfig+0x218>)
 800604a:	f7fb fd55 	bl	8001af8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800604e:	4b40      	ldr	r3, [pc, #256]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	493d      	ldr	r1, [pc, #244]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 800605c:	4313      	orrs	r3, r2
 800605e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d059      	beq.n	8006120 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d010      	beq.n	8006096 <HAL_RCC_ClockConfig+0x166>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d00c      	beq.n	8006096 <HAL_RCC_ClockConfig+0x166>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d008      	beq.n	8006096 <HAL_RCC_ClockConfig+0x166>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d004      	beq.n	8006096 <HAL_RCC_ClockConfig+0x166>
 800608c:	f240 2187 	movw	r1, #647	; 0x287
 8006090:	482d      	ldr	r0, [pc, #180]	; (8006148 <HAL_RCC_ClockConfig+0x218>)
 8006092:	f7fb fd31 	bl	8001af8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d107      	bne.n	80060ae <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800609e:	4b2c      	ldr	r3, [pc, #176]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d119      	bne.n	80060de <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e0ba      	b.n	8006224 <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d003      	beq.n	80060be <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d107      	bne.n	80060ce <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060be:	4b24      	ldr	r3, [pc, #144]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e0aa      	b.n	8006224 <HAL_RCC_ClockConfig+0x2f4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ce:	4b20      	ldr	r3, [pc, #128]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e0a2      	b.n	8006224 <HAL_RCC_ClockConfig+0x2f4>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060de:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f023 0203 	bic.w	r2, r3, #3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4919      	ldr	r1, [pc, #100]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060f0:	f7fb ffea 	bl	80020c8 <HAL_GetTick>
 80060f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f6:	e00a      	b.n	800610e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f8:	f7fb ffe6 	bl	80020c8 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f241 3288 	movw	r2, #5000	; 0x1388
 8006106:	4293      	cmp	r3, r2
 8006108:	d901      	bls.n	800610e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e08a      	b.n	8006224 <HAL_RCC_ClockConfig+0x2f4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800610e:	4b10      	ldr	r3, [pc, #64]	; (8006150 <HAL_RCC_ClockConfig+0x220>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 020c 	and.w	r2, r3, #12
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	429a      	cmp	r2, r3
 800611e:	d1eb      	bne.n	80060f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <HAL_RCC_ClockConfig+0x21c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d212      	bcs.n	8006154 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612e:	4b07      	ldr	r3, [pc, #28]	; (800614c <HAL_RCC_ClockConfig+0x21c>)
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006136:	4b05      	ldr	r3, [pc, #20]	; (800614c <HAL_RCC_ClockConfig+0x21c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d007      	beq.n	8006154 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e06d      	b.n	8006224 <HAL_RCC_ClockConfig+0x2f4>
 8006148:	0800e804 	.word	0x0800e804
 800614c:	40023c00 	.word	0x40023c00
 8006150:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d025      	beq.n	80061ac <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d018      	beq.n	800619a <HAL_RCC_ClockConfig+0x26a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006170:	d013      	beq.n	800619a <HAL_RCC_ClockConfig+0x26a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800617a:	d00e      	beq.n	800619a <HAL_RCC_ClockConfig+0x26a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006184:	d009      	beq.n	800619a <HAL_RCC_ClockConfig+0x26a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800618e:	d004      	beq.n	800619a <HAL_RCC_ClockConfig+0x26a>
 8006190:	f240 21c5 	movw	r1, #709	; 0x2c5
 8006194:	4825      	ldr	r0, [pc, #148]	; (800622c <HAL_RCC_ClockConfig+0x2fc>)
 8006196:	f7fb fcaf 	bl	8001af8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800619a:	4b25      	ldr	r3, [pc, #148]	; (8006230 <HAL_RCC_ClockConfig+0x300>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	4922      	ldr	r1, [pc, #136]	; (8006230 <HAL_RCC_ClockConfig+0x300>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d026      	beq.n	8006206 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d018      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x2c2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d013      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x2c2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061d2:	d00e      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x2c2>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80061dc:	d009      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x2c2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80061e6:	d004      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x2c2>
 80061e8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80061ec:	480f      	ldr	r0, [pc, #60]	; (800622c <HAL_RCC_ClockConfig+0x2fc>)
 80061ee:	f7fb fc83 	bl	8001af8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061f2:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <HAL_RCC_ClockConfig+0x300>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	490b      	ldr	r1, [pc, #44]	; (8006230 <HAL_RCC_ClockConfig+0x300>)
 8006202:	4313      	orrs	r3, r2
 8006204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006206:	f000 f819 	bl	800623c <HAL_RCC_GetSysClockFreq>
 800620a:	4602      	mov	r2, r0
 800620c:	4b08      	ldr	r3, [pc, #32]	; (8006230 <HAL_RCC_ClockConfig+0x300>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	4907      	ldr	r1, [pc, #28]	; (8006234 <HAL_RCC_ClockConfig+0x304>)
 8006218:	5ccb      	ldrb	r3, [r1, r3]
 800621a:	fa22 f303 	lsr.w	r3, r2, r3
 800621e:	4a06      	ldr	r2, [pc, #24]	; (8006238 <HAL_RCC_ClockConfig+0x308>)
 8006220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  // HAL_InitTick (uwTickPrio);

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	0800e804 	.word	0x0800e804
 8006230:	40023800 	.word	0x40023800
 8006234:	0800e928 	.word	0x0800e928
 8006238:	20000000 	.word	0x20000000

0800623c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800623c:	b5b0      	push	{r4, r5, r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006242:	2100      	movs	r1, #0
 8006244:	6079      	str	r1, [r7, #4]
 8006246:	2100      	movs	r1, #0
 8006248:	60f9      	str	r1, [r7, #12]
 800624a:	2100      	movs	r1, #0
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800624e:	2100      	movs	r1, #0
 8006250:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006252:	4952      	ldr	r1, [pc, #328]	; (800639c <HAL_RCC_GetSysClockFreq+0x160>)
 8006254:	6889      	ldr	r1, [r1, #8]
 8006256:	f001 010c 	and.w	r1, r1, #12
 800625a:	2908      	cmp	r1, #8
 800625c:	d00d      	beq.n	800627a <HAL_RCC_GetSysClockFreq+0x3e>
 800625e:	2908      	cmp	r1, #8
 8006260:	f200 8094 	bhi.w	800638c <HAL_RCC_GetSysClockFreq+0x150>
 8006264:	2900      	cmp	r1, #0
 8006266:	d002      	beq.n	800626e <HAL_RCC_GetSysClockFreq+0x32>
 8006268:	2904      	cmp	r1, #4
 800626a:	d003      	beq.n	8006274 <HAL_RCC_GetSysClockFreq+0x38>
 800626c:	e08e      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800626e:	4b4c      	ldr	r3, [pc, #304]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8006270:	60bb      	str	r3, [r7, #8]
       break;
 8006272:	e08e      	b.n	8006392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006274:	4b4b      	ldr	r3, [pc, #300]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8006276:	60bb      	str	r3, [r7, #8]
      break;
 8006278:	e08b      	b.n	8006392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800627a:	4948      	ldr	r1, [pc, #288]	; (800639c <HAL_RCC_GetSysClockFreq+0x160>)
 800627c:	6849      	ldr	r1, [r1, #4]
 800627e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006282:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006284:	4945      	ldr	r1, [pc, #276]	; (800639c <HAL_RCC_GetSysClockFreq+0x160>)
 8006286:	6849      	ldr	r1, [r1, #4]
 8006288:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800628c:	2900      	cmp	r1, #0
 800628e:	d024      	beq.n	80062da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006290:	4942      	ldr	r1, [pc, #264]	; (800639c <HAL_RCC_GetSysClockFreq+0x160>)
 8006292:	6849      	ldr	r1, [r1, #4]
 8006294:	0989      	lsrs	r1, r1, #6
 8006296:	4608      	mov	r0, r1
 8006298:	f04f 0100 	mov.w	r1, #0
 800629c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80062a0:	f04f 0500 	mov.w	r5, #0
 80062a4:	ea00 0204 	and.w	r2, r0, r4
 80062a8:	ea01 0305 	and.w	r3, r1, r5
 80062ac:	493d      	ldr	r1, [pc, #244]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80062ae:	fb01 f003 	mul.w	r0, r1, r3
 80062b2:	2100      	movs	r1, #0
 80062b4:	fb01 f102 	mul.w	r1, r1, r2
 80062b8:	1844      	adds	r4, r0, r1
 80062ba:	493a      	ldr	r1, [pc, #232]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80062bc:	fba2 0101 	umull	r0, r1, r2, r1
 80062c0:	1863      	adds	r3, r4, r1
 80062c2:	4619      	mov	r1, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	f7f9 ffd8 	bl	8000280 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4613      	mov	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e04a      	b.n	8006370 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062da:	4b30      	ldr	r3, [pc, #192]	; (800639c <HAL_RCC_GetSysClockFreq+0x160>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	099b      	lsrs	r3, r3, #6
 80062e0:	461a      	mov	r2, r3
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80062ea:	f04f 0100 	mov.w	r1, #0
 80062ee:	ea02 0400 	and.w	r4, r2, r0
 80062f2:	ea03 0501 	and.w	r5, r3, r1
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	014b      	lsls	r3, r1, #5
 8006304:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006308:	0142      	lsls	r2, r0, #5
 800630a:	4610      	mov	r0, r2
 800630c:	4619      	mov	r1, r3
 800630e:	1b00      	subs	r0, r0, r4
 8006310:	eb61 0105 	sbc.w	r1, r1, r5
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	018b      	lsls	r3, r1, #6
 800631e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006322:	0182      	lsls	r2, r0, #6
 8006324:	1a12      	subs	r2, r2, r0
 8006326:	eb63 0301 	sbc.w	r3, r3, r1
 800632a:	f04f 0000 	mov.w	r0, #0
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	00d9      	lsls	r1, r3, #3
 8006334:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006338:	00d0      	lsls	r0, r2, #3
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	1912      	adds	r2, r2, r4
 8006340:	eb45 0303 	adc.w	r3, r5, r3
 8006344:	f04f 0000 	mov.w	r0, #0
 8006348:	f04f 0100 	mov.w	r1, #0
 800634c:	0299      	lsls	r1, r3, #10
 800634e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006352:	0290      	lsls	r0, r2, #10
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4610      	mov	r0, r2
 800635a:	4619      	mov	r1, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	f7f9 ff8c 	bl	8000280 <__aeabi_uldivmod>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4613      	mov	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <HAL_RCC_GetSysClockFreq+0x160>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	0c1b      	lsrs	r3, r3, #16
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	3301      	adds	r3, #1
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	fbb2 f3f3 	udiv	r3, r2, r3
 8006388:	60bb      	str	r3, [r7, #8]
      break;
 800638a:	e002      	b.n	8006392 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800638c:	4b04      	ldr	r3, [pc, #16]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800638e:	60bb      	str	r3, [r7, #8]
      break;
 8006390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006392:	68bb      	ldr	r3, [r7, #8]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bdb0      	pop	{r4, r5, r7, pc}
 800639c:	40023800 	.word	0x40023800
 80063a0:	00f42400 	.word	0x00f42400
 80063a4:	017d7840 	.word	0x017d7840

080063a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063ac:	4b03      	ldr	r3, [pc, #12]	; (80063bc <HAL_RCC_GetHCLKFreq+0x14>)
 80063ae:	681b      	ldr	r3, [r3, #0]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000000 	.word	0x20000000

080063c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063c4:	f7ff fff0 	bl	80063a8 <HAL_RCC_GetHCLKFreq>
 80063c8:	4602      	mov	r2, r0
 80063ca:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	0a9b      	lsrs	r3, r3, #10
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	4903      	ldr	r1, [pc, #12]	; (80063e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063d6:	5ccb      	ldrb	r3, [r1, r3]
 80063d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063dc:	4618      	mov	r0, r3
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40023800 	.word	0x40023800
 80063e4:	0800e938 	.word	0x0800e938

080063e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	220f      	movs	r2, #15
 80063f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063f8:	4b12      	ldr	r3, [pc, #72]	; (8006444 <HAL_RCC_GetClockConfig+0x5c>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 0203 	and.w	r2, r3, #3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006404:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <HAL_RCC_GetClockConfig+0x5c>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006410:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <HAL_RCC_GetClockConfig+0x5c>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800641c:	4b09      	ldr	r3, [pc, #36]	; (8006444 <HAL_RCC_GetClockConfig+0x5c>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800642a:	4b07      	ldr	r3, [pc, #28]	; (8006448 <HAL_RCC_GetClockConfig+0x60>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0207 	and.w	r2, r3, #7
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	601a      	str	r2, [r3, #0]
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40023800 	.word	0x40023800
 8006448:	40023c00 	.word	0x40023c00

0800644c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e18c      	b.n	8006778 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a75      	ldr	r2, [pc, #468]	; (8006638 <HAL_SPI_Init+0x1ec>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d018      	beq.n	800649a <HAL_SPI_Init+0x4e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a73      	ldr	r2, [pc, #460]	; (800663c <HAL_SPI_Init+0x1f0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d013      	beq.n	800649a <HAL_SPI_Init+0x4e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a72      	ldr	r2, [pc, #456]	; (8006640 <HAL_SPI_Init+0x1f4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d00e      	beq.n	800649a <HAL_SPI_Init+0x4e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a70      	ldr	r2, [pc, #448]	; (8006644 <HAL_SPI_Init+0x1f8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d009      	beq.n	800649a <HAL_SPI_Init+0x4e>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a6f      	ldr	r2, [pc, #444]	; (8006648 <HAL_SPI_Init+0x1fc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d004      	beq.n	800649a <HAL_SPI_Init+0x4e>
 8006490:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006494:	486d      	ldr	r0, [pc, #436]	; (800664c <HAL_SPI_Init+0x200>)
 8006496:	f7fb fb2f 	bl	8001af8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <HAL_SPI_Init+0x6a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064aa:	d004      	beq.n	80064b6 <HAL_SPI_Init+0x6a>
 80064ac:	f240 1143 	movw	r1, #323	; 0x143
 80064b0:	4866      	ldr	r0, [pc, #408]	; (800664c <HAL_SPI_Init+0x200>)
 80064b2:	f7fb fb21 	bl	8001af8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00e      	beq.n	80064dc <HAL_SPI_Init+0x90>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c6:	d009      	beq.n	80064dc <HAL_SPI_Init+0x90>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d0:	d004      	beq.n	80064dc <HAL_SPI_Init+0x90>
 80064d2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80064d6:	485d      	ldr	r0, [pc, #372]	; (800664c <HAL_SPI_Init+0x200>)
 80064d8:	f7fb fb0e 	bl	8001af8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e4:	d008      	beq.n	80064f8 <HAL_SPI_Init+0xac>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <HAL_SPI_Init+0xac>
 80064ee:	f240 1145 	movw	r1, #325	; 0x145
 80064f2:	4856      	ldr	r0, [pc, #344]	; (800664c <HAL_SPI_Init+0x200>)
 80064f4:	f7fb fb00 	bl	8001af8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006500:	d00d      	beq.n	800651e <HAL_SPI_Init+0xd2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <HAL_SPI_Init+0xd2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006512:	d004      	beq.n	800651e <HAL_SPI_Init+0xd2>
 8006514:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006518:	484c      	ldr	r0, [pc, #304]	; (800664c <HAL_SPI_Init+0x200>)
 800651a:	f7fb faed 	bl	8001af8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d020      	beq.n	8006568 <HAL_SPI_Init+0x11c>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	2b08      	cmp	r3, #8
 800652c:	d01c      	beq.n	8006568 <HAL_SPI_Init+0x11c>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	2b10      	cmp	r3, #16
 8006534:	d018      	beq.n	8006568 <HAL_SPI_Init+0x11c>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	2b18      	cmp	r3, #24
 800653c:	d014      	beq.n	8006568 <HAL_SPI_Init+0x11c>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	2b20      	cmp	r3, #32
 8006544:	d010      	beq.n	8006568 <HAL_SPI_Init+0x11c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	2b28      	cmp	r3, #40	; 0x28
 800654c:	d00c      	beq.n	8006568 <HAL_SPI_Init+0x11c>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	2b30      	cmp	r3, #48	; 0x30
 8006554:	d008      	beq.n	8006568 <HAL_SPI_Init+0x11c>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	2b38      	cmp	r3, #56	; 0x38
 800655c:	d004      	beq.n	8006568 <HAL_SPI_Init+0x11c>
 800655e:	f240 1147 	movw	r1, #327	; 0x147
 8006562:	483a      	ldr	r0, [pc, #232]	; (800664c <HAL_SPI_Init+0x200>)
 8006564:	f7fb fac8 	bl	8001af8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_SPI_Init+0x136>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d004      	beq.n	8006582 <HAL_SPI_Init+0x136>
 8006578:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800657c:	4833      	ldr	r0, [pc, #204]	; (800664c <HAL_SPI_Init+0x200>)
 800657e:	f7fb fabb 	bl	8001af8 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	2b00      	cmp	r3, #0
 8006588:	d008      	beq.n	800659c <HAL_SPI_Init+0x150>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	2b10      	cmp	r3, #16
 8006590:	d004      	beq.n	800659c <HAL_SPI_Init+0x150>
 8006592:	f240 1149 	movw	r1, #329	; 0x149
 8006596:	482d      	ldr	r0, [pc, #180]	; (800664c <HAL_SPI_Init+0x200>)
 8006598:	f7fb faae 	bl	8001af8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d155      	bne.n	8006650 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_SPI_Init+0x172>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d004      	beq.n	80065be <HAL_SPI_Init+0x172>
 80065b4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80065b8:	4824      	ldr	r0, [pc, #144]	; (800664c <HAL_SPI_Init+0x200>)
 80065ba:	f7fb fa9d 	bl	8001af8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <HAL_SPI_Init+0x18c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d004      	beq.n	80065d8 <HAL_SPI_Init+0x18c>
 80065ce:	f240 114d 	movw	r1, #333	; 0x14d
 80065d2:	481e      	ldr	r0, [pc, #120]	; (800664c <HAL_SPI_Init+0x200>)
 80065d4:	f7fb fa90 	bl	8001af8 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065e0:	d125      	bne.n	800662e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d05d      	beq.n	80066a6 <HAL_SPI_Init+0x25a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d059      	beq.n	80066a6 <HAL_SPI_Init+0x25a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d055      	beq.n	80066a6 <HAL_SPI_Init+0x25a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	2b18      	cmp	r3, #24
 8006600:	d051      	beq.n	80066a6 <HAL_SPI_Init+0x25a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	2b20      	cmp	r3, #32
 8006608:	d04d      	beq.n	80066a6 <HAL_SPI_Init+0x25a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	2b28      	cmp	r3, #40	; 0x28
 8006610:	d049      	beq.n	80066a6 <HAL_SPI_Init+0x25a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	2b30      	cmp	r3, #48	; 0x30
 8006618:	d045      	beq.n	80066a6 <HAL_SPI_Init+0x25a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	2b38      	cmp	r3, #56	; 0x38
 8006620:	d041      	beq.n	80066a6 <HAL_SPI_Init+0x25a>
 8006622:	f240 1151 	movw	r1, #337	; 0x151
 8006626:	4809      	ldr	r0, [pc, #36]	; (800664c <HAL_SPI_Init+0x200>)
 8006628:	f7fb fa66 	bl	8001af8 <assert_failed>
 800662c:	e03b      	b.n	80066a6 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	61da      	str	r2, [r3, #28]
 8006634:	e037      	b.n	80066a6 <HAL_SPI_Init+0x25a>
 8006636:	bf00      	nop
 8006638:	40013000 	.word	0x40013000
 800663c:	40003800 	.word	0x40003800
 8006640:	40003c00 	.word	0x40003c00
 8006644:	40013400 	.word	0x40013400
 8006648:	40015000 	.word	0x40015000
 800664c:	0800e83c 	.word	0x0800e83c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	69db      	ldr	r3, [r3, #28]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d020      	beq.n	800669a <HAL_SPI_Init+0x24e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d01c      	beq.n	800669a <HAL_SPI_Init+0x24e>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	2b10      	cmp	r3, #16
 8006666:	d018      	beq.n	800669a <HAL_SPI_Init+0x24e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	2b18      	cmp	r3, #24
 800666e:	d014      	beq.n	800669a <HAL_SPI_Init+0x24e>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	2b20      	cmp	r3, #32
 8006676:	d010      	beq.n	800669a <HAL_SPI_Init+0x24e>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	2b28      	cmp	r3, #40	; 0x28
 800667e:	d00c      	beq.n	800669a <HAL_SPI_Init+0x24e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	2b30      	cmp	r3, #48	; 0x30
 8006686:	d008      	beq.n	800669a <HAL_SPI_Init+0x24e>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	2b38      	cmp	r3, #56	; 0x38
 800668e:	d004      	beq.n	800669a <HAL_SPI_Init+0x24e>
 8006690:	f240 115b 	movw	r1, #347	; 0x15b
 8006694:	483a      	ldr	r0, [pc, #232]	; (8006780 <HAL_SPI_Init+0x334>)
 8006696:	f7fb fa2f 	bl	8001af8 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f85f 	bl	8006784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672a:	ea42 0103 	orr.w	r1, r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006732:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	f003 0104 	and.w	r1, r3, #4
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	f003 0210 	and.w	r2, r3, #16
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	69da      	ldr	r2, [r3, #28]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006766:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	0800e83c 	.word	0x0800e83c

08006784 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08c      	sub	sp, #48	; 0x30
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067a6:	2301      	movs	r3, #1
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <HAL_SPI_TransmitReceive+0x2a>
 80067b8:	f240 417e 	movw	r1, #1150	; 0x47e
 80067bc:	4884      	ldr	r0, [pc, #528]	; (80069d0 <HAL_SPI_TransmitReceive+0x238>)
 80067be:	f7fb f99b 	bl	8001af8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_SPI_TransmitReceive+0x38>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e18d      	b.n	8006aec <HAL_SPI_TransmitReceive+0x354>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d8:	f7fb fc76 	bl	80020c8 <HAL_GetTick>
 80067dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80067ee:	887b      	ldrh	r3, [r7, #2]
 80067f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d00f      	beq.n	800681a <HAL_SPI_TransmitReceive+0x82>
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006800:	d107      	bne.n	8006812 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d103      	bne.n	8006812 <HAL_SPI_TransmitReceive+0x7a>
 800680a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800680e:	2b04      	cmp	r3, #4
 8006810:	d003      	beq.n	800681a <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8006812:	2302      	movs	r3, #2
 8006814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006818:	e15e      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <HAL_SPI_TransmitReceive+0x94>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <HAL_SPI_TransmitReceive+0x94>
 8006826:	887b      	ldrh	r3, [r7, #2]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d103      	bne.n	8006834 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006832:	e151      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b04      	cmp	r3, #4
 800683e:	d003      	beq.n	8006848 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2205      	movs	r2, #5
 8006844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	887a      	ldrh	r2, [r7, #2]
 8006858:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	887a      	ldrh	r2, [r7, #2]
 800685e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	887a      	ldrh	r2, [r7, #2]
 800686a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	887a      	ldrh	r2, [r7, #2]
 8006870:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d007      	beq.n	800689c <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800689a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068a4:	d178      	bne.n	8006998 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_SPI_TransmitReceive+0x11c>
 80068ae:	8b7b      	ldrh	r3, [r7, #26]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d166      	bne.n	8006982 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	881a      	ldrh	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	1c9a      	adds	r2, r3, #2
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d8:	e053      	b.n	8006982 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d11b      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x188>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d016      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x188>
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d113      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b01      	cmp	r3, #1
 800692c:	d119      	bne.n	8006962 <HAL_SPI_TransmitReceive+0x1ca>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d014      	beq.n	8006962 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	b292      	uxth	r2, r2
 8006944:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	1c9a      	adds	r2, r3, #2
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800695e:	2301      	movs	r3, #1
 8006960:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006962:	f7fb fbb1 	bl	80020c8 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800696e:	429a      	cmp	r2, r3
 8006970:	d807      	bhi.n	8006982 <HAL_SPI_TransmitReceive+0x1ea>
 8006972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d003      	beq.n	8006982 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006980:	e0aa      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1a6      	bne.n	80068da <HAL_SPI_TransmitReceive+0x142>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1a1      	bne.n	80068da <HAL_SPI_TransmitReceive+0x142>
 8006996:	e07f      	b.n	8006a98 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <HAL_SPI_TransmitReceive+0x20e>
 80069a0:	8b7b      	ldrh	r3, [r7, #26]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d16e      	bne.n	8006a84 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	330c      	adds	r3, #12
 80069b0:	7812      	ldrb	r2, [r2, #0]
 80069b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069cc:	e05a      	b.n	8006a84 <HAL_SPI_TransmitReceive+0x2ec>
 80069ce:	bf00      	nop
 80069d0:	0800e83c 	.word	0x0800e83c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d11c      	bne.n	8006a1c <HAL_SPI_TransmitReceive+0x284>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d017      	beq.n	8006a1c <HAL_SPI_TransmitReceive+0x284>
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d114      	bne.n	8006a1c <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	330c      	adds	r3, #12
 80069fc:	7812      	ldrb	r2, [r2, #0]
 80069fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d119      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x2c6>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d014      	beq.n	8006a5e <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	3b01      	subs	r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a5e:	f7fb fb33 	bl	80020c8 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d803      	bhi.n	8006a76 <HAL_SPI_TransmitReceive+0x2de>
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a74:	d102      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x2e4>
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a82:	e029      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1a2      	bne.n	80069d4 <HAL_SPI_TransmitReceive+0x23c>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d19d      	bne.n	80069d4 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 f8bf 	bl	8006c20 <SPI_EndRxTxTransaction>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d006      	beq.n	8006ab6 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ab4:	e010      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10b      	bne.n	8006ad6 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006abe:	2300      	movs	r3, #0
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	e000      	b.n	8006ad8 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8006ad6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ae8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3730      	adds	r7, #48	; 0x30
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b02:	b2db      	uxtb	r3, r3
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b20:	f7fb fad2 	bl	80020c8 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b30:	f7fb faca 	bl	80020c8 <HAL_GetTick>
 8006b34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b36:	4b39      	ldr	r3, [pc, #228]	; (8006c1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	015b      	lsls	r3, r3, #5
 8006b3c:	0d1b      	lsrs	r3, r3, #20
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	fb02 f303 	mul.w	r3, r2, r3
 8006b44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b46:	e054      	b.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4e:	d050      	beq.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b50:	f7fb faba 	bl	80020c8 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d902      	bls.n	8006b66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d13d      	bne.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b7e:	d111      	bne.n	8006ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b88:	d004      	beq.n	8006b94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b92:	d107      	bne.n	8006ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bac:	d10f      	bne.n	8006bce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e017      	b.n	8006c12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	bf0c      	ite	eq
 8006c02:	2301      	moveq	r3, #1
 8006c04:	2300      	movne	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d19b      	bne.n	8006b48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000000 	.word	0x20000000

08006c20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <SPI_EndRxTxTransaction+0x7c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <SPI_EndRxTxTransaction+0x80>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	0d5b      	lsrs	r3, r3, #21
 8006c38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c4a:	d112      	bne.n	8006c72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	2180      	movs	r1, #128	; 0x80
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7ff ff5a 	bl	8006b10 <SPI_WaitFlagStateUntilTimeout>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d016      	beq.n	8006c90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c66:	f043 0220 	orr.w	r2, r3, #32
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e00f      	b.n	8006c92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c88:	2b80      	cmp	r3, #128	; 0x80
 8006c8a:	d0f2      	beq.n	8006c72 <SPI_EndRxTxTransaction+0x52>
 8006c8c:	e000      	b.n	8006c90 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c8e:	bf00      	nop
  }

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000000 	.word	0x20000000
 8006ca0:	165e9f81 	.word	0x165e9f81

08006ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e0a7      	b.n	8006e06 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a55      	ldr	r2, [pc, #340]	; (8006e10 <HAL_TIM_Base_Init+0x16c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d027      	beq.n	8006d10 <HAL_TIM_Base_Init+0x6c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc8:	d022      	beq.n	8006d10 <HAL_TIM_Base_Init+0x6c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a51      	ldr	r2, [pc, #324]	; (8006e14 <HAL_TIM_Base_Init+0x170>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d01d      	beq.n	8006d10 <HAL_TIM_Base_Init+0x6c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a4f      	ldr	r2, [pc, #316]	; (8006e18 <HAL_TIM_Base_Init+0x174>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d018      	beq.n	8006d10 <HAL_TIM_Base_Init+0x6c>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a4e      	ldr	r2, [pc, #312]	; (8006e1c <HAL_TIM_Base_Init+0x178>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <HAL_TIM_Base_Init+0x6c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a4c      	ldr	r2, [pc, #304]	; (8006e20 <HAL_TIM_Base_Init+0x17c>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d00e      	beq.n	8006d10 <HAL_TIM_Base_Init+0x6c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a4b      	ldr	r2, [pc, #300]	; (8006e24 <HAL_TIM_Base_Init+0x180>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d009      	beq.n	8006d10 <HAL_TIM_Base_Init+0x6c>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a49      	ldr	r2, [pc, #292]	; (8006e28 <HAL_TIM_Base_Init+0x184>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_TIM_Base_Init+0x6c>
 8006d06:	f240 1113 	movw	r1, #275	; 0x113
 8006d0a:	4848      	ldr	r0, [pc, #288]	; (8006e2c <HAL_TIM_Base_Init+0x188>)
 8006d0c:	f7fa fef4 	bl	8001af8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d014      	beq.n	8006d42 <HAL_TIM_Base_Init+0x9e>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d010      	beq.n	8006d42 <HAL_TIM_Base_Init+0x9e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d00c      	beq.n	8006d42 <HAL_TIM_Base_Init+0x9e>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	2b40      	cmp	r3, #64	; 0x40
 8006d2e:	d008      	beq.n	8006d42 <HAL_TIM_Base_Init+0x9e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b60      	cmp	r3, #96	; 0x60
 8006d36:	d004      	beq.n	8006d42 <HAL_TIM_Base_Init+0x9e>
 8006d38:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006d3c:	483b      	ldr	r0, [pc, #236]	; (8006e2c <HAL_TIM_Base_Init+0x188>)
 8006d3e:	f7fa fedb 	bl	8001af8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00e      	beq.n	8006d68 <HAL_TIM_Base_Init+0xc4>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d52:	d009      	beq.n	8006d68 <HAL_TIM_Base_Init+0xc4>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d5c:	d004      	beq.n	8006d68 <HAL_TIM_Base_Init+0xc4>
 8006d5e:	f240 1115 	movw	r1, #277	; 0x115
 8006d62:	4832      	ldr	r0, [pc, #200]	; (8006e2c <HAL_TIM_Base_Init+0x188>)
 8006d64:	f7fa fec8 	bl	8001af8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d008      	beq.n	8006d82 <HAL_TIM_Base_Init+0xde>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	2b80      	cmp	r3, #128	; 0x80
 8006d76:	d004      	beq.n	8006d82 <HAL_TIM_Base_Init+0xde>
 8006d78:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006d7c:	482b      	ldr	r0, [pc, #172]	; (8006e2c <HAL_TIM_Base_Init+0x188>)
 8006d7e:	f7fa febb 	bl	8001af8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fb f8f0 	bl	8001f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3304      	adds	r3, #4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f000 fd0c 	bl	80077cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000c00 	.word	0x40000c00
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800
 8006e2c:	0800e874 	.word	0x0800e874

08006e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a3d      	ldr	r2, [pc, #244]	; (8006f34 <HAL_TIM_Base_Start_IT+0x104>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d027      	beq.n	8006e92 <HAL_TIM_Base_Start_IT+0x62>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4a:	d022      	beq.n	8006e92 <HAL_TIM_Base_Start_IT+0x62>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a39      	ldr	r2, [pc, #228]	; (8006f38 <HAL_TIM_Base_Start_IT+0x108>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01d      	beq.n	8006e92 <HAL_TIM_Base_Start_IT+0x62>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a38      	ldr	r2, [pc, #224]	; (8006f3c <HAL_TIM_Base_Start_IT+0x10c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d018      	beq.n	8006e92 <HAL_TIM_Base_Start_IT+0x62>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a36      	ldr	r2, [pc, #216]	; (8006f40 <HAL_TIM_Base_Start_IT+0x110>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_TIM_Base_Start_IT+0x62>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a35      	ldr	r2, [pc, #212]	; (8006f44 <HAL_TIM_Base_Start_IT+0x114>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00e      	beq.n	8006e92 <HAL_TIM_Base_Start_IT+0x62>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a33      	ldr	r2, [pc, #204]	; (8006f48 <HAL_TIM_Base_Start_IT+0x118>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_TIM_Base_Start_IT+0x62>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a32      	ldr	r2, [pc, #200]	; (8006f4c <HAL_TIM_Base_Start_IT+0x11c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_TIM_Base_Start_IT+0x62>
 8006e88:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006e8c:	4830      	ldr	r0, [pc, #192]	; (8006f50 <HAL_TIM_Base_Start_IT+0x120>)
 8006e8e:	f7fa fe33 	bl	8001af8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d001      	beq.n	8006ea2 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e044      	b.n	8006f2c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0201 	orr.w	r2, r2, #1
 8006eb8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <HAL_TIM_Base_Start_IT+0x104>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d018      	beq.n	8006ef6 <HAL_TIM_Base_Start_IT+0xc6>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ecc:	d013      	beq.n	8006ef6 <HAL_TIM_Base_Start_IT+0xc6>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a19      	ldr	r2, [pc, #100]	; (8006f38 <HAL_TIM_Base_Start_IT+0x108>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_TIM_Base_Start_IT+0xc6>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a17      	ldr	r2, [pc, #92]	; (8006f3c <HAL_TIM_Base_Start_IT+0x10c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d009      	beq.n	8006ef6 <HAL_TIM_Base_Start_IT+0xc6>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a16      	ldr	r2, [pc, #88]	; (8006f40 <HAL_TIM_Base_Start_IT+0x110>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d004      	beq.n	8006ef6 <HAL_TIM_Base_Start_IT+0xc6>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a14      	ldr	r2, [pc, #80]	; (8006f44 <HAL_TIM_Base_Start_IT+0x114>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d111      	bne.n	8006f1a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b06      	cmp	r3, #6
 8006f06:	d010      	beq.n	8006f2a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f18:	e007      	b.n	8006f2a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0201 	orr.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40010000 	.word	0x40010000
 8006f38:	40000400 	.word	0x40000400
 8006f3c:	40000800 	.word	0x40000800
 8006f40:	40000c00 	.word	0x40000c00
 8006f44:	40014000 	.word	0x40014000
 8006f48:	40014400 	.word	0x40014400
 8006f4c:	40014800 	.word	0x40014800
 8006f50:	0800e874 	.word	0x0800e874

08006f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0202 	mvn.w	r2, #2
 8006f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fbfa 	bl	8007790 <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fbec 	bl	800777c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fbfd 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d122      	bne.n	8007004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0304 	and.w	r3, r3, #4
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d11b      	bne.n	8007004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0204 	mvn.w	r2, #4
 8006fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2202      	movs	r2, #2
 8006fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fbd0 	bl	8007790 <HAL_TIM_IC_CaptureCallback>
 8006ff0:	e005      	b.n	8006ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fbc2 	bl	800777c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fbd3 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f003 0308 	and.w	r3, r3, #8
 800700e:	2b08      	cmp	r3, #8
 8007010:	d122      	bne.n	8007058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b08      	cmp	r3, #8
 800701e:	d11b      	bne.n	8007058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f06f 0208 	mvn.w	r2, #8
 8007028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2204      	movs	r2, #4
 800702e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fba6 	bl	8007790 <HAL_TIM_IC_CaptureCallback>
 8007044:	e005      	b.n	8007052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb98 	bl	800777c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fba9 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b10      	cmp	r3, #16
 8007064:	d122      	bne.n	80070ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	2b10      	cmp	r3, #16
 8007072:	d11b      	bne.n	80070ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0210 	mvn.w	r2, #16
 800707c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2208      	movs	r2, #8
 8007082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb7c 	bl	8007790 <HAL_TIM_IC_CaptureCallback>
 8007098:	e005      	b.n	80070a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fb6e 	bl	800777c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fb7f 	bl	80077a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d10e      	bne.n	80070d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d107      	bne.n	80070d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0201 	mvn.w	r2, #1
 80070d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fa fdfe 	bl	8001cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e2:	2b80      	cmp	r3, #128	; 0x80
 80070e4:	d10e      	bne.n	8007104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f0:	2b80      	cmp	r3, #128	; 0x80
 80070f2:	d107      	bne.n	8007104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fd46 	bl	8007b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d10e      	bne.n	8007130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d107      	bne.n	8007130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fb44 	bl	80077b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b20      	cmp	r3, #32
 800713c:	d10e      	bne.n	800715c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b20      	cmp	r3, #32
 800714a:	d107      	bne.n	800715c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0220 	mvn.w	r2, #32
 8007154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fd10 	bl	8007b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_TIM_ConfigClockSource+0x18>
 8007178:	2302      	movs	r3, #2
 800717a:	e2ef      	b.n	800775c <HAL_TIM_ConfigClockSource+0x5f8>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007194:	d029      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x86>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800719e:	d024      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x86>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d020      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x86>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b10      	cmp	r3, #16
 80071ae:	d01c      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x86>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d018      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x86>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b30      	cmp	r3, #48	; 0x30
 80071be:	d014      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x86>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b40      	cmp	r3, #64	; 0x40
 80071c6:	d010      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x86>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b50      	cmp	r3, #80	; 0x50
 80071ce:	d00c      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x86>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b60      	cmp	r3, #96	; 0x60
 80071d6:	d008      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x86>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b70      	cmp	r3, #112	; 0x70
 80071de:	d004      	beq.n	80071ea <HAL_TIM_ConfigClockSource+0x86>
 80071e0:	f241 4122 	movw	r1, #5154	; 0x1422
 80071e4:	487c      	ldr	r0, [pc, #496]	; (80073d8 <HAL_TIM_ConfigClockSource+0x274>)
 80071e6:	f7fa fc87 	bl	8001af8 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007200:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007212:	f000 80f1 	beq.w	80073f8 <HAL_TIM_ConfigClockSource+0x294>
 8007216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800721a:	f200 8293 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x5e0>
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d02d      	beq.n	8007280 <HAL_TIM_ConfigClockSource+0x11c>
 8007224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007228:	f200 828c 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x5e0>
 800722c:	2b70      	cmp	r3, #112	; 0x70
 800722e:	d05d      	beq.n	80072ec <HAL_TIM_ConfigClockSource+0x188>
 8007230:	2b70      	cmp	r3, #112	; 0x70
 8007232:	f200 8287 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x5e0>
 8007236:	2b60      	cmp	r3, #96	; 0x60
 8007238:	f000 81a0 	beq.w	800757c <HAL_TIM_ConfigClockSource+0x418>
 800723c:	2b60      	cmp	r3, #96	; 0x60
 800723e:	f200 8281 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x5e0>
 8007242:	2b50      	cmp	r3, #80	; 0x50
 8007244:	f000 8144 	beq.w	80074d0 <HAL_TIM_ConfigClockSource+0x36c>
 8007248:	2b50      	cmp	r3, #80	; 0x50
 800724a:	f200 827b 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x5e0>
 800724e:	2b40      	cmp	r3, #64	; 0x40
 8007250:	f000 81f6 	beq.w	8007640 <HAL_TIM_ConfigClockSource+0x4dc>
 8007254:	2b40      	cmp	r3, #64	; 0x40
 8007256:	f200 8275 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x5e0>
 800725a:	2b30      	cmp	r3, #48	; 0x30
 800725c:	f000 8246 	beq.w	80076ec <HAL_TIM_ConfigClockSource+0x588>
 8007260:	2b30      	cmp	r3, #48	; 0x30
 8007262:	f200 826f 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x5e0>
 8007266:	2b20      	cmp	r3, #32
 8007268:	f000 8240 	beq.w	80076ec <HAL_TIM_ConfigClockSource+0x588>
 800726c:	2b20      	cmp	r3, #32
 800726e:	f200 8269 	bhi.w	8007744 <HAL_TIM_ConfigClockSource+0x5e0>
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 823a 	beq.w	80076ec <HAL_TIM_ConfigClockSource+0x588>
 8007278:	2b10      	cmp	r3, #16
 800727a:	f000 8237 	beq.w	80076ec <HAL_TIM_ConfigClockSource+0x588>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800727e:	e261      	b.n	8007744 <HAL_TIM_ConfigClockSource+0x5e0>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a55      	ldr	r2, [pc, #340]	; (80073dc <HAL_TIM_ConfigClockSource+0x278>)
 8007286:	4293      	cmp	r3, r2
 8007288:	f000 825e 	beq.w	8007748 <HAL_TIM_ConfigClockSource+0x5e4>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007294:	f000 8258 	beq.w	8007748 <HAL_TIM_ConfigClockSource+0x5e4>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a50      	ldr	r2, [pc, #320]	; (80073e0 <HAL_TIM_ConfigClockSource+0x27c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	f000 8252 	beq.w	8007748 <HAL_TIM_ConfigClockSource+0x5e4>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a4e      	ldr	r2, [pc, #312]	; (80073e4 <HAL_TIM_ConfigClockSource+0x280>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	f000 824c 	beq.w	8007748 <HAL_TIM_ConfigClockSource+0x5e4>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a4c      	ldr	r2, [pc, #304]	; (80073e8 <HAL_TIM_ConfigClockSource+0x284>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	f000 8246 	beq.w	8007748 <HAL_TIM_ConfigClockSource+0x5e4>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a4a      	ldr	r2, [pc, #296]	; (80073ec <HAL_TIM_ConfigClockSource+0x288>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	f000 8240 	beq.w	8007748 <HAL_TIM_ConfigClockSource+0x5e4>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a48      	ldr	r2, [pc, #288]	; (80073f0 <HAL_TIM_ConfigClockSource+0x28c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	f000 823a 	beq.w	8007748 <HAL_TIM_ConfigClockSource+0x5e4>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a46      	ldr	r2, [pc, #280]	; (80073f4 <HAL_TIM_ConfigClockSource+0x290>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f000 8234 	beq.w	8007748 <HAL_TIM_ConfigClockSource+0x5e4>
 80072e0:	f241 412e 	movw	r1, #5166	; 0x142e
 80072e4:	483c      	ldr	r0, [pc, #240]	; (80073d8 <HAL_TIM_ConfigClockSource+0x274>)
 80072e6:	f7fa fc07 	bl	8001af8 <assert_failed>
      break;
 80072ea:	e22d      	b.n	8007748 <HAL_TIM_ConfigClockSource+0x5e4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a3a      	ldr	r2, [pc, #232]	; (80073dc <HAL_TIM_ConfigClockSource+0x278>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d01d      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x1ce>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fe:	d018      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x1ce>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a36      	ldr	r2, [pc, #216]	; (80073e0 <HAL_TIM_ConfigClockSource+0x27c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x1ce>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a35      	ldr	r2, [pc, #212]	; (80073e4 <HAL_TIM_ConfigClockSource+0x280>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x1ce>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a33      	ldr	r2, [pc, #204]	; (80073e8 <HAL_TIM_ConfigClockSource+0x284>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x1ce>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a32      	ldr	r2, [pc, #200]	; (80073ec <HAL_TIM_ConfigClockSource+0x288>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x1ce>
 8007328:	f241 4135 	movw	r1, #5173	; 0x1435
 800732c:	482a      	ldr	r0, [pc, #168]	; (80073d8 <HAL_TIM_ConfigClockSource+0x274>)
 800732e:	f7fa fbe3 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d013      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x1fe>
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007342:	d00e      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x1fe>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800734c:	d009      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x1fe>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007356:	d004      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x1fe>
 8007358:	f241 4138 	movw	r1, #5176	; 0x1438
 800735c:	481e      	ldr	r0, [pc, #120]	; (80073d8 <HAL_TIM_ConfigClockSource+0x274>)
 800735e:	f7fa fbcb 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800736a:	d014      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x232>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d010      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x232>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00c      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x232>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2b02      	cmp	r3, #2
 8007382:	d008      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x232>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b0a      	cmp	r3, #10
 800738a:	d004      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0x232>
 800738c:	f241 4139 	movw	r1, #5177	; 0x1439
 8007390:	4811      	ldr	r0, [pc, #68]	; (80073d8 <HAL_TIM_ConfigClockSource+0x274>)
 8007392:	f7fa fbb1 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2b0f      	cmp	r3, #15
 800739c:	d904      	bls.n	80073a8 <HAL_TIM_ConfigClockSource+0x244>
 800739e:	f241 413a 	movw	r1, #5178	; 0x143a
 80073a2:	480d      	ldr	r0, [pc, #52]	; (80073d8 <HAL_TIM_ConfigClockSource+0x274>)
 80073a4:	f7fa fba8 	bl	8001af8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	6899      	ldr	r1, [r3, #8]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f000 fb02 	bl	80079c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	609a      	str	r2, [r3, #8]
      break;
 80073d4:	e1b9      	b.n	800774a <HAL_TIM_ConfigClockSource+0x5e6>
 80073d6:	bf00      	nop
 80073d8:	0800e874 	.word	0x0800e874
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40000400 	.word	0x40000400
 80073e4:	40000800 	.word	0x40000800
 80073e8:	40000c00 	.word	0x40000c00
 80073ec:	40014000 	.word	0x40014000
 80073f0:	40014400 	.word	0x40014400
 80073f4:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a8a      	ldr	r2, [pc, #552]	; (8007628 <HAL_TIM_ConfigClockSource+0x4c4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d018      	beq.n	8007434 <HAL_TIM_ConfigClockSource+0x2d0>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740a:	d013      	beq.n	8007434 <HAL_TIM_ConfigClockSource+0x2d0>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a86      	ldr	r2, [pc, #536]	; (800762c <HAL_TIM_ConfigClockSource+0x4c8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00e      	beq.n	8007434 <HAL_TIM_ConfigClockSource+0x2d0>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a85      	ldr	r2, [pc, #532]	; (8007630 <HAL_TIM_ConfigClockSource+0x4cc>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d009      	beq.n	8007434 <HAL_TIM_ConfigClockSource+0x2d0>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a83      	ldr	r2, [pc, #524]	; (8007634 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d004      	beq.n	8007434 <HAL_TIM_ConfigClockSource+0x2d0>
 800742a:	f241 414d 	movw	r1, #5197	; 0x144d
 800742e:	4882      	ldr	r0, [pc, #520]	; (8007638 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007430:	f7fa fb62 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d013      	beq.n	8007464 <HAL_TIM_ConfigClockSource+0x300>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007444:	d00e      	beq.n	8007464 <HAL_TIM_ConfigClockSource+0x300>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800744e:	d009      	beq.n	8007464 <HAL_TIM_ConfigClockSource+0x300>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007458:	d004      	beq.n	8007464 <HAL_TIM_ConfigClockSource+0x300>
 800745a:	f241 4150 	movw	r1, #5200	; 0x1450
 800745e:	4876      	ldr	r0, [pc, #472]	; (8007638 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007460:	f7fa fb4a 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746c:	d014      	beq.n	8007498 <HAL_TIM_ConfigClockSource+0x334>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d010      	beq.n	8007498 <HAL_TIM_ConfigClockSource+0x334>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00c      	beq.n	8007498 <HAL_TIM_ConfigClockSource+0x334>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2b02      	cmp	r3, #2
 8007484:	d008      	beq.n	8007498 <HAL_TIM_ConfigClockSource+0x334>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b0a      	cmp	r3, #10
 800748c:	d004      	beq.n	8007498 <HAL_TIM_ConfigClockSource+0x334>
 800748e:	f241 4151 	movw	r1, #5201	; 0x1451
 8007492:	4869      	ldr	r0, [pc, #420]	; (8007638 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007494:	f7fa fb30 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2b0f      	cmp	r3, #15
 800749e:	d904      	bls.n	80074aa <HAL_TIM_ConfigClockSource+0x346>
 80074a0:	f241 4152 	movw	r1, #5202	; 0x1452
 80074a4:	4864      	ldr	r0, [pc, #400]	; (8007638 <HAL_TIM_ConfigClockSource+0x4d4>)
 80074a6:	f7fa fb27 	bl	8001af8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6818      	ldr	r0, [r3, #0]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6899      	ldr	r1, [r3, #8]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f000 fa81 	bl	80079c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074cc:	609a      	str	r2, [r3, #8]
      break;
 80074ce:	e13c      	b.n	800774a <HAL_TIM_ConfigClockSource+0x5e6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a54      	ldr	r2, [pc, #336]	; (8007628 <HAL_TIM_ConfigClockSource+0x4c4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d01d      	beq.n	8007516 <HAL_TIM_ConfigClockSource+0x3b2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e2:	d018      	beq.n	8007516 <HAL_TIM_ConfigClockSource+0x3b2>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a50      	ldr	r2, [pc, #320]	; (800762c <HAL_TIM_ConfigClockSource+0x4c8>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d013      	beq.n	8007516 <HAL_TIM_ConfigClockSource+0x3b2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a4f      	ldr	r2, [pc, #316]	; (8007630 <HAL_TIM_ConfigClockSource+0x4cc>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00e      	beq.n	8007516 <HAL_TIM_ConfigClockSource+0x3b2>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a4d      	ldr	r2, [pc, #308]	; (8007634 <HAL_TIM_ConfigClockSource+0x4d0>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d009      	beq.n	8007516 <HAL_TIM_ConfigClockSource+0x3b2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a4d      	ldr	r2, [pc, #308]	; (800763c <HAL_TIM_ConfigClockSource+0x4d8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d004      	beq.n	8007516 <HAL_TIM_ConfigClockSource+0x3b2>
 800750c:	f241 4161 	movw	r1, #5217	; 0x1461
 8007510:	4849      	ldr	r0, [pc, #292]	; (8007638 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007512:	f7fa faf1 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800751e:	d014      	beq.n	800754a <HAL_TIM_ConfigClockSource+0x3e6>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d010      	beq.n	800754a <HAL_TIM_ConfigClockSource+0x3e6>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00c      	beq.n	800754a <HAL_TIM_ConfigClockSource+0x3e6>
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d008      	beq.n	800754a <HAL_TIM_ConfigClockSource+0x3e6>
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	2b0a      	cmp	r3, #10
 800753e:	d004      	beq.n	800754a <HAL_TIM_ConfigClockSource+0x3e6>
 8007540:	f241 4164 	movw	r1, #5220	; 0x1464
 8007544:	483c      	ldr	r0, [pc, #240]	; (8007638 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007546:	f7fa fad7 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	2b0f      	cmp	r3, #15
 8007550:	d904      	bls.n	800755c <HAL_TIM_ConfigClockSource+0x3f8>
 8007552:	f241 4165 	movw	r1, #5221	; 0x1465
 8007556:	4838      	ldr	r0, [pc, #224]	; (8007638 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007558:	f7fa face 	bl	8001af8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	6859      	ldr	r1, [r3, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	461a      	mov	r2, r3
 800756a:	f000 f9af 	bl	80078cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2150      	movs	r1, #80	; 0x50
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fa08 	bl	800798a <TIM_ITRx_SetConfig>
      break;
 800757a:	e0e6      	b.n	800774a <HAL_TIM_ConfigClockSource+0x5e6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a29      	ldr	r2, [pc, #164]	; (8007628 <HAL_TIM_ConfigClockSource+0x4c4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01d      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x45e>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758e:	d018      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x45e>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a25      	ldr	r2, [pc, #148]	; (800762c <HAL_TIM_ConfigClockSource+0x4c8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x45e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a24      	ldr	r2, [pc, #144]	; (8007630 <HAL_TIM_ConfigClockSource+0x4cc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00e      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x45e>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a22      	ldr	r2, [pc, #136]	; (8007634 <HAL_TIM_ConfigClockSource+0x4d0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d009      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x45e>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a22      	ldr	r2, [pc, #136]	; (800763c <HAL_TIM_ConfigClockSource+0x4d8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d004      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x45e>
 80075b8:	f241 4171 	movw	r1, #5233	; 0x1471
 80075bc:	481e      	ldr	r0, [pc, #120]	; (8007638 <HAL_TIM_ConfigClockSource+0x4d4>)
 80075be:	f7fa fa9b 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ca:	d014      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x492>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d010      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x492>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00c      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x492>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d008      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x492>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2b0a      	cmp	r3, #10
 80075ea:	d004      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x492>
 80075ec:	f241 4174 	movw	r1, #5236	; 0x1474
 80075f0:	4811      	ldr	r0, [pc, #68]	; (8007638 <HAL_TIM_ConfigClockSource+0x4d4>)
 80075f2:	f7fa fa81 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	2b0f      	cmp	r3, #15
 80075fc:	d904      	bls.n	8007608 <HAL_TIM_ConfigClockSource+0x4a4>
 80075fe:	f241 4175 	movw	r1, #5237	; 0x1475
 8007602:	480d      	ldr	r0, [pc, #52]	; (8007638 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007604:	f7fa fa78 	bl	8001af8 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	461a      	mov	r2, r3
 8007616:	f000 f988 	bl	800792a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2160      	movs	r1, #96	; 0x60
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f9b2 	bl	800798a <TIM_ITRx_SetConfig>
      break;
 8007626:	e090      	b.n	800774a <HAL_TIM_ConfigClockSource+0x5e6>
 8007628:	40010000 	.word	0x40010000
 800762c:	40000400 	.word	0x40000400
 8007630:	40000800 	.word	0x40000800
 8007634:	40000c00 	.word	0x40000c00
 8007638:	0800e874 	.word	0x0800e874
 800763c:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a47      	ldr	r2, [pc, #284]	; (8007764 <HAL_TIM_ConfigClockSource+0x600>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d01d      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x522>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007652:	d018      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x522>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a43      	ldr	r2, [pc, #268]	; (8007768 <HAL_TIM_ConfigClockSource+0x604>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d013      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x522>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a42      	ldr	r2, [pc, #264]	; (800776c <HAL_TIM_ConfigClockSource+0x608>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00e      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x522>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a40      	ldr	r2, [pc, #256]	; (8007770 <HAL_TIM_ConfigClockSource+0x60c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d009      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x522>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a3f      	ldr	r2, [pc, #252]	; (8007774 <HAL_TIM_ConfigClockSource+0x610>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d004      	beq.n	8007686 <HAL_TIM_ConfigClockSource+0x522>
 800767c:	f241 4181 	movw	r1, #5249	; 0x1481
 8007680:	483d      	ldr	r0, [pc, #244]	; (8007778 <HAL_TIM_ConfigClockSource+0x614>)
 8007682:	f7fa fa39 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800768e:	d014      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x556>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d010      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x556>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00c      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x556>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d008      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x556>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2b0a      	cmp	r3, #10
 80076ae:	d004      	beq.n	80076ba <HAL_TIM_ConfigClockSource+0x556>
 80076b0:	f241 4184 	movw	r1, #5252	; 0x1484
 80076b4:	4830      	ldr	r0, [pc, #192]	; (8007778 <HAL_TIM_ConfigClockSource+0x614>)
 80076b6:	f7fa fa1f 	bl	8001af8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	2b0f      	cmp	r3, #15
 80076c0:	d904      	bls.n	80076cc <HAL_TIM_ConfigClockSource+0x568>
 80076c2:	f241 4185 	movw	r1, #5253	; 0x1485
 80076c6:	482c      	ldr	r0, [pc, #176]	; (8007778 <HAL_TIM_ConfigClockSource+0x614>)
 80076c8:	f7fa fa16 	bl	8001af8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	6859      	ldr	r1, [r3, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	461a      	mov	r2, r3
 80076da:	f000 f8f7 	bl	80078cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2140      	movs	r1, #64	; 0x40
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 f950 	bl	800798a <TIM_ITRx_SetConfig>
      break;
 80076ea:	e02e      	b.n	800774a <HAL_TIM_ConfigClockSource+0x5e6>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1c      	ldr	r2, [pc, #112]	; (8007764 <HAL_TIM_ConfigClockSource+0x600>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d01d      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x5ce>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076fe:	d018      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x5ce>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a18      	ldr	r2, [pc, #96]	; (8007768 <HAL_TIM_ConfigClockSource+0x604>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d013      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x5ce>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a17      	ldr	r2, [pc, #92]	; (800776c <HAL_TIM_ConfigClockSource+0x608>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00e      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x5ce>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a15      	ldr	r2, [pc, #84]	; (8007770 <HAL_TIM_ConfigClockSource+0x60c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d009      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x5ce>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a14      	ldr	r2, [pc, #80]	; (8007774 <HAL_TIM_ConfigClockSource+0x610>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d004      	beq.n	8007732 <HAL_TIM_ConfigClockSource+0x5ce>
 8007728:	f241 4194 	movw	r1, #5268	; 0x1494
 800772c:	4812      	ldr	r0, [pc, #72]	; (8007778 <HAL_TIM_ConfigClockSource+0x614>)
 800772e:	f7fa f9e3 	bl	8001af8 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4619      	mov	r1, r3
 800773c:	4610      	mov	r0, r2
 800773e:	f000 f924 	bl	800798a <TIM_ITRx_SetConfig>
        break;
 8007742:	e002      	b.n	800774a <HAL_TIM_ConfigClockSource+0x5e6>
      break;
 8007744:	bf00      	nop
 8007746:	e000      	b.n	800774a <HAL_TIM_ConfigClockSource+0x5e6>
      break;
 8007748:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	40010000 	.word	0x40010000
 8007768:	40000400 	.word	0x40000400
 800776c:	40000800 	.word	0x40000800
 8007770:	40000c00 	.word	0x40000c00
 8007774:	40014000 	.word	0x40014000
 8007778:	0800e874 	.word	0x0800e874

0800777c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a34      	ldr	r2, [pc, #208]	; (80078b0 <TIM_Base_SetConfig+0xe4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d00f      	beq.n	8007804 <TIM_Base_SetConfig+0x38>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ea:	d00b      	beq.n	8007804 <TIM_Base_SetConfig+0x38>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a31      	ldr	r2, [pc, #196]	; (80078b4 <TIM_Base_SetConfig+0xe8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d007      	beq.n	8007804 <TIM_Base_SetConfig+0x38>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a30      	ldr	r2, [pc, #192]	; (80078b8 <TIM_Base_SetConfig+0xec>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_Base_SetConfig+0x38>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a2f      	ldr	r2, [pc, #188]	; (80078bc <TIM_Base_SetConfig+0xf0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d108      	bne.n	8007816 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4313      	orrs	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <TIM_Base_SetConfig+0xe4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d01b      	beq.n	8007856 <TIM_Base_SetConfig+0x8a>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007824:	d017      	beq.n	8007856 <TIM_Base_SetConfig+0x8a>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a22      	ldr	r2, [pc, #136]	; (80078b4 <TIM_Base_SetConfig+0xe8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d013      	beq.n	8007856 <TIM_Base_SetConfig+0x8a>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a21      	ldr	r2, [pc, #132]	; (80078b8 <TIM_Base_SetConfig+0xec>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00f      	beq.n	8007856 <TIM_Base_SetConfig+0x8a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a20      	ldr	r2, [pc, #128]	; (80078bc <TIM_Base_SetConfig+0xf0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d00b      	beq.n	8007856 <TIM_Base_SetConfig+0x8a>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <TIM_Base_SetConfig+0xf4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d007      	beq.n	8007856 <TIM_Base_SetConfig+0x8a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a1e      	ldr	r2, [pc, #120]	; (80078c4 <TIM_Base_SetConfig+0xf8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d003      	beq.n	8007856 <TIM_Base_SetConfig+0x8a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a1d      	ldr	r2, [pc, #116]	; (80078c8 <TIM_Base_SetConfig+0xfc>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d108      	bne.n	8007868 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a08      	ldr	r2, [pc, #32]	; (80078b0 <TIM_Base_SetConfig+0xe4>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d103      	bne.n	800789c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	615a      	str	r2, [r3, #20]
}
 80078a2:	bf00      	nop
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40000400 	.word	0x40000400
 80078b8:	40000800 	.word	0x40000800
 80078bc:	40000c00 	.word	0x40000c00
 80078c0:	40014000 	.word	0x40014000
 80078c4:	40014400 	.word	0x40014400
 80078c8:	40014800 	.word	0x40014800

080078cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f023 0201 	bic.w	r2, r3, #1
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f023 030a 	bic.w	r3, r3, #10
 8007908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4313      	orrs	r3, r2
 8007910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800792a:	b480      	push	{r7}
 800792c:	b087      	sub	sp, #28
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	f023 0210 	bic.w	r2, r3, #16
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	031b      	lsls	r3, r3, #12
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007966:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	621a      	str	r2, [r3, #32]
}
 800797e:	bf00      	nop
 8007980:	371c      	adds	r7, #28
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr

0800798a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	f043 0307 	orr.w	r3, r3, #7
 80079ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	609a      	str	r2, [r3, #8]
}
 80079b4:	bf00      	nop
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	021a      	lsls	r2, r3, #8
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	609a      	str	r2, [r3, #8]
}
 80079f4:	bf00      	nop
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a55      	ldr	r2, [pc, #340]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d018      	beq.n	8007a46 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1c:	d013      	beq.n	8007a46 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a51      	ldr	r2, [pc, #324]	; (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d00e      	beq.n	8007a46 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a4f      	ldr	r2, [pc, #316]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d009      	beq.n	8007a46 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a4e      	ldr	r2, [pc, #312]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d004      	beq.n	8007a46 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007a3c:	f240 7177 	movw	r1, #1911	; 0x777
 8007a40:	484c      	ldr	r0, [pc, #304]	; (8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007a42:	f7fa f859 	bl	8001af8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d020      	beq.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b10      	cmp	r3, #16
 8007a54:	d01c      	beq.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	d018      	beq.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b30      	cmp	r3, #48	; 0x30
 8007a64:	d014      	beq.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b40      	cmp	r3, #64	; 0x40
 8007a6c:	d010      	beq.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b50      	cmp	r3, #80	; 0x50
 8007a74:	d00c      	beq.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b60      	cmp	r3, #96	; 0x60
 8007a7c:	d008      	beq.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b70      	cmp	r3, #112	; 0x70
 8007a84:	d004      	beq.n	8007a90 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007a86:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 8007a8a:	483a      	ldr	r0, [pc, #232]	; (8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007a8c:	f7fa f834 	bl	8001af8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	2b80      	cmp	r3, #128	; 0x80
 8007a96:	d008      	beq.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8007aa0:	f240 7179 	movw	r1, #1913	; 0x779
 8007aa4:	4833      	ldr	r0, [pc, #204]	; (8007b74 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007aa6:	f7fa f827 	bl	8001af8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e050      	b.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d018      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b04:	d013      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a17      	ldr	r2, [pc, #92]	; (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00e      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a15      	ldr	r2, [pc, #84]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d009      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a14      	ldr	r2, [pc, #80]	; (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d004      	beq.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a13      	ldr	r2, [pc, #76]	; (8007b78 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d10c      	bne.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	40010000 	.word	0x40010000
 8007b68:	40000400 	.word	0x40000400
 8007b6c:	40000800 	.word	0x40000800
 8007b70:	40000c00 	.word	0x40000c00
 8007b74:	0800e8ac 	.word	0x0800e8ac
 8007b78:	40014000 	.word	0x40014000

08007b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	7818      	ldrb	r0, [r3, #0]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007bbe:	b299      	uxth	r1, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	78db      	ldrb	r3, [r3, #3]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	f7f9 faef 	bl	80011a8 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	7818      	ldrb	r0, [r3, #0]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007bee:	b299      	uxth	r1, r3
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	78db      	ldrb	r3, [r3, #3]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f000 ffd8 	bl	8008baa <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8007c04:	b590      	push	{r4, r7, lr}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	7818      	ldrb	r0, [r3, #0]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c1e:	b299      	uxth	r1, r3
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	78da      	ldrb	r2, [r3, #3]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	889b      	ldrh	r3, [r3, #4]
 8007c28:	b29c      	uxth	r4, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	88db      	ldrh	r3, [r3, #6]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	4623      	mov	r3, r4
 8007c34:	f000 ffc8 	bl	8008bc8 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd90      	pop	{r4, r7, pc}

08007c42 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 ffca 	bl	8008bf0 <hci_hardware_error_event>

  return status;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b0a6      	sub	sp, #152	; 0x98
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007c80:	2300      	movs	r3, #0
 8007c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c86:	e030      	b.n	8007cea <hci_number_of_completed_packets_event_process+0x84>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8007c88:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007c8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8007ca4:	440b      	add	r3, r1
 8007ca6:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8007caa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007cae:	3302      	adds	r3, #2
 8007cb0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8007cb4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8007cd0:	440b      	add	r3, r1
 8007cd2:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8007cd6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007cda:	3302      	adds	r3, #2
 8007cdc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007ce0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	dbc6      	blt.n	8007c88 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8007cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f107 0208 	add.w	r2, r7, #8
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 ff7d 	bl	8008c06 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8007d0c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3798      	adds	r7, #152	; 0x98
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 ff76 	bl	8008c1e <hci_data_buffer_overflow_event>

  return status;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	781a      	ldrb	r2, [r3, #0]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f000 ff6a 	bl	8008c34 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f001 f9dd 	bl	800913e <aci_blue_initialized_event>

  return status;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 f9d7 	bl	8009154 <aci_blue_events_lost_event>

  return status;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8007db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007db4:	b08d      	sub	sp, #52	; 0x34
 8007db6:	af08      	add	r7, sp, #32
 8007db8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f893 c000 	ldrb.w	ip, [r3]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8007de0:	603b      	str	r3, [r7, #0]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8007de8:	68b9      	ldr	r1, [r7, #8]
 8007dea:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8007dee:	68b8      	ldr	r0, [r7, #8]
 8007df0:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8007df4:	68bc      	ldr	r4, [r7, #8]
 8007df6:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8007dfa:	68bd      	ldr	r5, [r7, #8]
 8007dfc:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8007e00:	68be      	ldr	r6, [r7, #8]
 8007e02:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8007e0a:	9307      	str	r3, [sp, #28]
 8007e0c:	9606      	str	r6, [sp, #24]
 8007e0e:	9505      	str	r5, [sp, #20]
 8007e10:	9404      	str	r4, [sp, #16]
 8007e12:	9003      	str	r0, [sp, #12]
 8007e14:	9102      	str	r1, [sp, #8]
 8007e16:	9201      	str	r2, [sp, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	4642      	mov	r2, r8
 8007e20:	4671      	mov	r1, lr
 8007e22:	4660      	mov	r0, ip
 8007e24:	f001 f9a0 	bl	8009168 <aci_blue_crash_info_event>

  return status;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007e34 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	7818      	ldrb	r0, [r3, #0]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	7859      	ldrb	r1, [r3, #1]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f001 f996 	bl	8009184 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	f993 0000 	ldrsb.w	r0, [r3]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8007e80:	461a      	mov	r2, r3
 8007e82:	f001 f98d 	bl	80091a0 <aci_hal_scan_req_report_event>

  return status;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	7818      	ldrb	r0, [r3, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8007eac:	461a      	mov	r2, r3
 8007eae:	f001 f985 	bl	80091bc <aci_hal_fw_error_event>

  return status;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8007ec8:	f000 ff4a 	bl	8008d60 <aci_gap_limited_discoverable_event>

  return status;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	b298      	uxth	r0, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	7899      	ldrb	r1, [r3, #2]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	78db      	ldrb	r3, [r3, #3]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f000 ff3a 	bl	8008d6e <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	881b      	ldrh	r3, [r3, #0]
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 ff36 	bl	8008d8c <aci_gap_pass_key_req_event>

  return status;
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 ff2e 	bl	8008da2 <aci_gap_authorization_req_event>

  return status;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8007f5c:	f000 ff2c 	bl	8008db8 <aci_gap_slave_security_initiated_event>

  return status;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8007f76:	f000 ff26 	bl	8008dc6 <aci_gap_bond_lost_event>

  return status;
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	7818      	ldrb	r0, [r3, #0]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	7859      	ldrb	r1, [r3, #1]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8007fa4:	f000 ff16 	bl	8008dd4 <aci_gap_proc_complete_event>

  return status;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 ff13 	bl	8008df4 <aci_gap_addr_not_resolved_event>

  return status;
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	f000 ff07 	bl	8008e0a <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8007ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29a      	uxth	r2, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	789b      	ldrb	r3, [r3, #2]
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f000 fefd 	bl	8008e22 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8008028:	7bfb      	ldrb	r3, [r7, #15]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800803a:	2300      	movs	r3, #0
 800803c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29a      	uxth	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	885b      	ldrh	r3, [r3, #2]
 800804c:	b29b      	uxth	r3, r3
 800804e:	4619      	mov	r1, r3
 8008050:	4610      	mov	r0, r2
 8008052:	f001 f830 	bl	80090b6 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8008056:	7bfb      	ldrb	r3, [r7, #15]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b298      	uxth	r0, r3
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800807e:	461a      	mov	r2, r3
 8008080:	f001 f827 	bl	80090d2 <aci_l2cap_proc_timeout_event>

  return status;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800808e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008090:	b089      	sub	sp, #36	; 0x24
 8008092:	af04      	add	r7, sp, #16
 8008094:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	b298      	uxth	r0, r3
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	789c      	ldrb	r4, [r3, #2]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80080ae:	b29d      	uxth	r5, r3
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80080b6:	b29e      	uxth	r6, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80080c6:	b292      	uxth	r2, r2
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 80080ce:	b289      	uxth	r1, r1
 80080d0:	9102      	str	r1, [sp, #8]
 80080d2:	9201      	str	r2, [sp, #4]
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	4633      	mov	r3, r6
 80080d8:	462a      	mov	r2, r5
 80080da:	4621      	mov	r1, r4
 80080dc:	f001 f807 	bl	80090ee <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080ea <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 80080ea:	b590      	push	{r4, r7, lr}
 80080ec:	b087      	sub	sp, #28
 80080ee:	af02      	add	r7, sp, #8
 80080f0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b298      	uxth	r0, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	7899      	ldrb	r1, [r3, #2]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800810a:	b29a      	uxth	r2, r3
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	4623      	mov	r3, r4
 8008118:	f000 fffd 	bl	8009116 <aci_l2cap_command_reject_event>

  return status;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	bd90      	pop	{r4, r7, pc}

08008126 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8008126:	b590      	push	{r4, r7, lr}
 8008128:	b087      	sub	sp, #28
 800812a:	af02      	add	r7, sp, #8
 800812c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800812e:	2300      	movs	r3, #0
 8008130:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	b298      	uxth	r0, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	885b      	ldrh	r3, [r3, #2]
 8008140:	b299      	uxth	r1, r3
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	889b      	ldrh	r3, [r3, #4]
 8008146:	b29a      	uxth	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	88db      	ldrh	r3, [r3, #6]
 800814c:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	4623      	mov	r3, r4
 8008156:	f7f9 f847 	bl	80011e8 <aci_gatt_attribute_modified_event>

  return status;
 800815a:	7bfb      	ldrb	r3, [r7, #15]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	bd90      	pop	{r4, r7, pc}

08008164 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29b      	uxth	r3, r3
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fe5f 	bl	8008e3e <aci_gatt_proc_timeout_event>

  return status;
 8008180:	7bfb      	ldrb	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29a      	uxth	r2, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	885b      	ldrh	r3, [r3, #2]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	4619      	mov	r1, r3
 80081a8:	4610      	mov	r0, r2
 80081aa:	f000 fe53 	bl	8008e54 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80081c0:	2300      	movs	r3, #0
 80081c2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	b298      	uxth	r0, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	7899      	ldrb	r1, [r3, #2]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 80081da:	f000 fe49 	bl	8008e70 <aci_att_find_info_resp_event>

  return status;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b0a6      	sub	sp, #152	; 0x98
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80081f0:	2300      	movs	r3, #0
 80081f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 80081fc:	2303      	movs	r3, #3
 80081fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8008202:	2300      	movs	r3, #0
 8008204:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008208:	e030      	b.n	800826c <aci_att_find_by_type_value_resp_event_process+0x84>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800820a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800820e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800821a:	b29a      	uxth	r2, r3
 800821c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008226:	440b      	add	r3, r1
 8008228:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800822c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008230:	3302      	adds	r3, #2
 8008232:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8008236:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800823a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008246:	b29a      	uxth	r2, r3
 8008248:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008252:	440b      	add	r3, r1
 8008254:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8008258:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800825c:	3302      	adds	r3, #2
 800825e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8008262:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008266:	3301      	adds	r3, #1
 8008268:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800826c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008270:	789b      	ldrb	r3, [r3, #2]
 8008272:	461a      	mov	r2, r3
 8008274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008278:	4293      	cmp	r3, r2
 800827a:	dbc6      	blt.n	800820a <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800827c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	b298      	uxth	r0, r3
 8008284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008288:	789b      	ldrb	r3, [r3, #2]
 800828a:	f107 0208 	add.w	r2, r7, #8
 800828e:	4619      	mov	r1, r3
 8008290:	f000 fdfe 	bl	8008e90 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8008294:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8008298:	4618      	mov	r0, r3
 800829a:	3798      	adds	r7, #152	; 0x98
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	b298      	uxth	r0, r3
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	7899      	ldrb	r1, [r3, #2]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 80082c2:	f000 fdf3 	bl	8008eac <aci_att_read_by_type_resp_event>

  return status;
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80082d8:	2300      	movs	r3, #0
 80082da:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b298      	uxth	r0, r3
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 80082ee:	461a      	mov	r2, r3
 80082f0:	f000 fdec 	bl	8008ecc <aci_att_read_resp_event>

  return status;
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	b298      	uxth	r0, r3
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800831c:	461a      	mov	r2, r3
 800831e:	f000 fde3 	bl	8008ee8 <aci_att_read_blob_resp_event>

  return status;
 8008322:	7bfb      	ldrb	r3, [r7, #15]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	b298      	uxth	r0, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800834a:	461a      	mov	r2, r3
 800834c:	f000 fdda 	bl	8008f04 <aci_att_read_multiple_resp_event>

  return status;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b298      	uxth	r0, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	7899      	ldrb	r1, [r3, #2]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800837c:	f000 fdd0 	bl	8008f20 <aci_att_read_by_group_type_resp_event>

  return status;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800838a:	b590      	push	{r4, r7, lr}
 800838c:	b087      	sub	sp, #28
 800838e:	af02      	add	r7, sp, #8
 8008390:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b298      	uxth	r0, r3
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	885b      	ldrh	r3, [r3, #2]
 80083a4:	b299      	uxth	r1, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	889b      	ldrh	r3, [r3, #4]
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	4623      	mov	r3, r4
 80083b8:	f000 fdc2 	bl	8008f40 <aci_att_prepare_write_resp_event>

  return status;
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd90      	pop	{r4, r7, pc}

080083c6 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fdc3 	bl	8008f68 <aci_att_exec_write_resp_event>

  return status;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b298      	uxth	r0, r3
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	885b      	ldrh	r3, [r3, #2]
 8008406:	b299      	uxth	r1, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8008410:	f000 fdb5 	bl	8008f7e <aci_gatt_indication_event>

  return status;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	b298      	uxth	r0, r3
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	885b      	ldrh	r3, [r3, #2]
 8008438:	b299      	uxth	r1, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8008442:	f7f8 fec0 	bl	80011c6 <aci_gatt_notification_event>

  return status;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29a      	uxth	r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	789b      	ldrb	r3, [r3, #2]
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f000 fd96 	bl	8008f9e <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008484:	2300      	movs	r3, #0
 8008486:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	b298      	uxth	r0, r3
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	7899      	ldrb	r1, [r3, #2]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800849c:	b29a      	uxth	r2, r3
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	795b      	ldrb	r3, [r3, #5]
 80084a2:	f000 fd8a 	bl	8008fba <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b298      	uxth	r0, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	885b      	ldrh	r3, [r3, #2]
 80084ca:	b299      	uxth	r1, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 80084d4:	f000 fd85 	bl	8008fe2 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b298      	uxth	r0, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	885b      	ldrh	r3, [r3, #2]
 80084fc:	b299      	uxth	r1, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8008506:	f000 fd7c 	bl	8009002 <aci_gatt_write_permit_req_event>

  return status;
 800850a:	7bfb      	ldrb	r3, [r7, #15]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800851c:	2300      	movs	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b298      	uxth	r0, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	885b      	ldrh	r3, [r3, #2]
 800852e:	b299      	uxth	r1, r3
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	889b      	ldrh	r3, [r3, #4]
 8008534:	b29b      	uxth	r3, r3
 8008536:	461a      	mov	r2, r3
 8008538:	f000 fd73 	bl	8009022 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b0a6      	sub	sp, #152	; 0x98
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800854e:	2300      	movs	r3, #0
 8008550:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 800855a:	2303      	movs	r3, #3
 800855c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8008560:	2300      	movs	r3, #0
 8008562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008566:	e01a      	b.n	800859e <aci_gatt_read_multi_permit_req_event_process+0x58>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8008568:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800856c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	4413      	add	r3, r2
 8008574:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008578:	b29a      	uxth	r2, r3
 800857a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008584:	440b      	add	r3, r1
 8008586:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800858a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800858e:	3302      	adds	r3, #2
 8008590:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8008594:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008598:	3301      	adds	r3, #1
 800859a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800859e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085a2:	789b      	ldrb	r3, [r3, #2]
 80085a4:	461a      	mov	r2, r3
 80085a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085aa:	4293      	cmp	r3, r2
 80085ac:	dbdc      	blt.n	8008568 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 80085ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b298      	uxth	r0, r3
 80085b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085ba:	789b      	ldrb	r3, [r3, #2]
 80085bc:	f107 0208 	add.w	r2, r7, #8
 80085c0:	4619      	mov	r1, r3
 80085c2:	f000 fd3d 	bl	8009040 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 80085c6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3798      	adds	r7, #152	; 0x98
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	885b      	ldrh	r3, [r3, #2]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	4619      	mov	r1, r3
 80085f0:	4610      	mov	r0, r2
 80085f2:	f000 fd33 	bl	800905c <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	881b      	ldrh	r3, [r3, #0]
 8008614:	b29b      	uxth	r3, r3
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fd2e 	bl	8009078 <aci_gatt_server_confirmation_event>

  return status;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8008626:	b590      	push	{r4, r7, lr}
 8008628:	b087      	sub	sp, #28
 800862a:	af02      	add	r7, sp, #8
 800862c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b298      	uxth	r0, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	885b      	ldrh	r3, [r3, #2]
 8008640:	b299      	uxth	r1, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	889b      	ldrh	r3, [r3, #4]
 8008646:	b29a      	uxth	r2, r3
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	4623      	mov	r3, r4
 8008654:	f000 fd1b 	bl	800908e <aci_gatt_prepare_write_permit_req_event>

  return status;
 8008658:	7bfb      	ldrb	r3, [r7, #15]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	bd90      	pop	{r4, r7, pc}

08008662 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8008662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008664:	b08b      	sub	sp, #44	; 0x2c
 8008666:	af06      	add	r7, sp, #24
 8008668:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	781d      	ldrb	r5, [r3, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800867c:	b29e      	uxth	r6, r3
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	f893 c003 	ldrb.w	ip, [r3, #3]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8008694:	b292      	uxth	r2, r2
 8008696:	68b9      	ldr	r1, [r7, #8]
 8008698:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 800869c:	b289      	uxth	r1, r1
 800869e:	68b8      	ldr	r0, [r7, #8]
 80086a0:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 80086a4:	b280      	uxth	r0, r0
 80086a6:	68bc      	ldr	r4, [r7, #8]
 80086a8:	7c64      	ldrb	r4, [r4, #17]
 80086aa:	9404      	str	r4, [sp, #16]
 80086ac:	9003      	str	r0, [sp, #12]
 80086ae:	9102      	str	r1, [sp, #8]
 80086b0:	9201      	str	r2, [sp, #4]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	4673      	mov	r3, lr
 80086b6:	4662      	mov	r2, ip
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	f7f8 fd2c 	bl	8001118 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086ca <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b0a4      	sub	sp, #144	; 0x90
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80086d2:	2300      	movs	r3, #0
 80086d4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 80086de:	2301      	movs	r3, #1
 80086e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80086e4:	2300      	movs	r3, #0
 80086e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086ea:	e0b8      	b.n	800885e <hci_le_advertising_report_event_process+0x194>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 80086ec:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80086f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	4413      	add	r3, r2
 80086fe:	440b      	add	r3, r1
 8008700:	3301      	adds	r3, #1
 8008702:	7819      	ldrb	r1, [r3, #0]
 8008704:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008714:	4413      	add	r3, r2
 8008716:	3b88      	subs	r3, #136	; 0x88
 8008718:	460a      	mov	r2, r1
 800871a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800871c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008720:	3301      	adds	r3, #1
 8008722:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8008726:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800872a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	4413      	add	r3, r2
 8008738:	440b      	add	r3, r1
 800873a:	3302      	adds	r3, #2
 800873c:	7819      	ldrb	r1, [r3, #0]
 800873e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800874e:	4413      	add	r3, r2
 8008750:	3b87      	subs	r3, #135	; 0x87
 8008752:	460a      	mov	r2, r1
 8008754:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008756:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800875a:	3301      	adds	r3, #1
 800875c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8008760:	f107 0108 	add.w	r1, r7, #8
 8008764:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	440b      	add	r3, r1
 8008772:	1c98      	adds	r0, r3, #2
 8008774:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	005b      	lsls	r3, r3, #1
 8008780:	4413      	add	r3, r2
 8008782:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008786:	4413      	add	r3, r2
 8008788:	3303      	adds	r3, #3
 800878a:	2206      	movs	r2, #6
 800878c:	4619      	mov	r1, r3
 800878e:	f004 ff43 	bl	800d618 <memcpy>
    size += 6;
 8008792:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008796:	3306      	adds	r3, #6
 8008798:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800879c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80087a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	4413      	add	r3, r2
 80087ae:	440b      	add	r3, r1
 80087b0:	3309      	adds	r3, #9
 80087b2:	7819      	ldrb	r1, [r3, #0]
 80087b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80087c4:	4413      	add	r3, r2
 80087c6:	3b80      	subs	r3, #128	; 0x80
 80087c8:	460a      	mov	r2, r1
 80087ca:	701a      	strb	r2, [r3, #0]
    size += 1;
 80087cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80087d0:	3301      	adds	r3, #1
 80087d2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 80087d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	4413      	add	r3, r2
 80087e4:	3308      	adds	r3, #8
 80087e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087ea:	4413      	add	r3, r2
 80087ec:	1c99      	adds	r1, r3, #2
 80087ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80087fe:	4413      	add	r3, r2
 8008800:	3b7c      	subs	r3, #124	; 0x7c
 8008802:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8008804:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008808:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	4413      	add	r3, r2
 8008816:	440b      	add	r3, r1
 8008818:	3309      	adds	r3, #9
 800881a:	781a      	ldrb	r2, [r3, #0]
 800881c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008820:	4413      	add	r3, r2
 8008822:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8008826:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	4413      	add	r3, r2
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b259      	sxtb	r1, r3
 8008832:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008842:	4413      	add	r3, r2
 8008844:	3b78      	subs	r3, #120	; 0x78
 8008846:	460a      	mov	r2, r1
 8008848:	701a      	strb	r2, [r3, #0]
    size += 1;
 800884a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800884e:	3301      	adds	r3, #1
 8008850:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008858:	3301      	adds	r3, #1
 800885a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800885e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800886a:	4293      	cmp	r3, r2
 800886c:	f6ff af3e 	blt.w	80086ec <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 8008870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	f107 0208 	add.w	r2, r7, #8
 800887a:	4611      	mov	r1, r2
 800887c:	4618      	mov	r0, r3
 800887e:	f000 f9e7 	bl	8008c50 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 8008882:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8008886:	4618      	mov	r0, r3
 8008888:	3790      	adds	r7, #144	; 0x90
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800888e:	b590      	push	{r4, r7, lr}
 8008890:	b087      	sub	sp, #28
 8008892:	af02      	add	r7, sp, #8
 8008894:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	7818      	ldrb	r0, [r3, #0]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80088a8:	b299      	uxth	r1, r3
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80088b8:	b29c      	uxth	r4, r3
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4623      	mov	r3, r4
 80088c6:	f000 f9cf 	bl	8008c68 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd90      	pop	{r4, r7, pc}

080088d4 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80088dc:	2300      	movs	r3, #0
 80088de:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	7818      	ldrb	r0, [r3, #0]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80088ee:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 80088f4:	461a      	mov	r2, r3
 80088f6:	f000 f9cb 	bl	8008c90 <hci_le_read_remote_used_features_complete_event>

  return status;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800890c:	2300      	movs	r3, #0
 800890e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	895b      	ldrh	r3, [r3, #10]
 8008922:	b29b      	uxth	r3, r3
 8008924:	461a      	mov	r2, r3
 8008926:	f000 f9c1 	bl	8008cac <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 8008934:	b590      	push	{r4, r7, lr}
 8008936:	b087      	sub	sp, #28
 8008938:	af02      	add	r7, sp, #8
 800893a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	b298      	uxth	r0, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	885b      	ldrh	r3, [r3, #2]
 800894e:	b299      	uxth	r1, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	889b      	ldrh	r3, [r3, #4]
 8008954:	b29a      	uxth	r2, r3
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	88db      	ldrh	r3, [r3, #6]
 800895a:	b29c      	uxth	r4, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	891b      	ldrh	r3, [r3, #8]
 8008960:	b29b      	uxth	r3, r3
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	4623      	mov	r3, r4
 8008966:	f000 f9af 	bl	8008cc8 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800896a:	7bfb      	ldrb	r3, [r7, #15]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	bd90      	pop	{r4, r7, pc}

08008974 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800897c:	2300      	movs	r3, #0
 800897e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f000 f9ae 	bl	8008cf0 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 80089b6:	4619      	mov	r1, r3
 80089b8:	4610      	mov	r0, r2
 80089ba:	f000 f9a5 	bl	8008d08 <hci_le_generate_dhkey_complete_event>

  return status;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 80089c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089cc:	b08d      	sub	sp, #52	; 0x34
 80089ce:	af08      	add	r7, sp, #32
 80089d0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	f893 c000 	ldrb.w	ip, [r3]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80089e6:	fa1f fe83 	uxth.w	lr, r3
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f893 8003 	ldrb.w	r8, [r3, #3]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8008a02:	68b8      	ldr	r0, [r7, #8]
 8008a04:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8008a08:	b280      	uxth	r0, r0
 8008a0a:	68bc      	ldr	r4, [r7, #8]
 8008a0c:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 8008a10:	b2a4      	uxth	r4, r4
 8008a12:	68bd      	ldr	r5, [r7, #8]
 8008a14:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8008a18:	b2ad      	uxth	r5, r5
 8008a1a:	68be      	ldr	r6, [r7, #8]
 8008a1c:	7f76      	ldrb	r6, [r6, #29]
 8008a1e:	9606      	str	r6, [sp, #24]
 8008a20:	9505      	str	r5, [sp, #20]
 8008a22:	9404      	str	r4, [sp, #16]
 8008a24:	9003      	str	r0, [sp, #12]
 8008a26:	9102      	str	r1, [sp, #8]
 8008a28:	9201      	str	r2, [sp, #4]
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	464b      	mov	r3, r9
 8008a2e:	4642      	mov	r2, r8
 8008a30:	4671      	mov	r1, lr
 8008a32:	4660      	mov	r0, ip
 8008a34:	f000 f974 	bl	8008d20 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008a44 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b0a6      	sub	sp, #152	; 0x98
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a64:	e089      	b.n	8008b7a <hci_le_direct_advertising_report_event_process+0x136>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 8008a66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a6e:	011b      	lsls	r3, r3, #4
 8008a70:	4413      	add	r3, r2
 8008a72:	3301      	adds	r3, #1
 8008a74:	781a      	ldrb	r2, [r3, #0]
 8008a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a7a:	011b      	lsls	r3, r3, #4
 8008a7c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008a80:	440b      	add	r3, r1
 8008a82:	3b90      	subs	r3, #144	; 0x90
 8008a84:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008a86:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8008a90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a98:	011b      	lsls	r3, r3, #4
 8008a9a:	4413      	add	r3, r2
 8008a9c:	3302      	adds	r3, #2
 8008a9e:	781a      	ldrb	r2, [r3, #0]
 8008aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008aaa:	440b      	add	r3, r1
 8008aac:	3b8f      	subs	r3, #143	; 0x8f
 8008aae:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008ab0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8008aba:	f107 0208 	add.w	r2, r7, #8
 8008abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	4413      	add	r3, r2
 8008ac6:	1c98      	adds	r0, r3, #2
 8008ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008acc:	011b      	lsls	r3, r3, #4
 8008ace:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008ad2:	4413      	add	r3, r2
 8008ad4:	3303      	adds	r3, #3
 8008ad6:	2206      	movs	r2, #6
 8008ad8:	4619      	mov	r1, r3
 8008ada:	f004 fd9d 	bl	800d618 <memcpy>
    size += 6;
 8008ade:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008ae2:	3306      	adds	r3, #6
 8008ae4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8008ae8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	4413      	add	r3, r2
 8008af4:	3309      	adds	r3, #9
 8008af6:	781a      	ldrb	r2, [r3, #0]
 8008af8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008afc:	011b      	lsls	r3, r3, #4
 8008afe:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008b02:	440b      	add	r3, r1
 8008b04:	3b88      	subs	r3, #136	; 0x88
 8008b06:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008b08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8008b12:	f107 0208 	add.w	r2, r7, #8
 8008b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b1a:	011b      	lsls	r3, r3, #4
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	4413      	add	r3, r2
 8008b20:	1c58      	adds	r0, r3, #1
 8008b22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	3308      	adds	r3, #8
 8008b2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b2e:	4413      	add	r3, r2
 8008b30:	3302      	adds	r3, #2
 8008b32:	2206      	movs	r2, #6
 8008b34:	4619      	mov	r1, r3
 8008b36:	f004 fd6f 	bl	800d618 <memcpy>
    size += 6;
 8008b3a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008b3e:	3306      	adds	r3, #6
 8008b40:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8008b44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b4c:	011b      	lsls	r3, r3, #4
 8008b4e:	4413      	add	r3, r2
 8008b50:	3310      	adds	r3, #16
 8008b52:	f993 2000 	ldrsb.w	r2, [r3]
 8008b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b5a:	011b      	lsls	r3, r3, #4
 8008b5c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008b60:	440b      	add	r3, r1
 8008b62:	3b81      	subs	r3, #129	; 0x81
 8008b64:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008b66:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b74:	3301      	adds	r3, #1
 8008b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	461a      	mov	r2, r3
 8008b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b86:	4293      	cmp	r3, r2
 8008b88:	f6ff af6d 	blt.w	8008a66 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8008b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	f107 0208 	add.w	r2, r7, #8
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 f8d5 	bl	8008d48 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 8008b9e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3798      	adds	r7, #152	; 0x98
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	71fb      	strb	r3, [r7, #7]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	80bb      	strh	r3, [r7, #4]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8008bc8:	b490      	push	{r4, r7}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	4623      	mov	r3, r4
 8008bd8:	71fb      	strb	r3, [r7, #7]
 8008bda:	4603      	mov	r3, r0
 8008bdc:	80bb      	strh	r3, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	71bb      	strb	r3, [r7, #6]
 8008be2:	4613      	mov	r3, r2
 8008be4:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8008be6:	bf00      	nop
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc90      	pop	{r4, r7}
 8008bee:	4770      	bx	lr

08008bf0 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8008bfa:	bf00      	nop
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	6039      	str	r1, [r7, #0]
 8008c10:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	4603      	mov	r3, r0
 8008c26:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	460a      	mov	r2, r1
 8008c3e:	71fb      	strb	r3, [r7, #7]
 8008c40:	4613      	mov	r3, r2
 8008c42:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	6039      	str	r1, [r7, #0]
 8008c5a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8008c68:	b490      	push	{r4, r7}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	4611      	mov	r1, r2
 8008c74:	461a      	mov	r2, r3
 8008c76:	4623      	mov	r3, r4
 8008c78:	71fb      	strb	r3, [r7, #7]
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	80bb      	strh	r3, [r7, #4]
 8008c7e:	460b      	mov	r3, r1
 8008c80:	807b      	strh	r3, [r7, #2]
 8008c82:	4613      	mov	r3, r2
 8008c84:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc90      	pop	{r4, r7}
 8008c8e:	4770      	bx	lr

08008c90 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	603a      	str	r2, [r7, #0]
 8008c9a:	71fb      	strb	r3, [r7, #7]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6039      	str	r1, [r7, #0]
 8008cb6:	80fb      	strh	r3, [r7, #6]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8008cc8:	b490      	push	{r4, r7}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4604      	mov	r4, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	80fb      	strh	r3, [r7, #6]
 8008cda:	4603      	mov	r3, r0
 8008cdc:	80bb      	strh	r3, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	807b      	strh	r3, [r7, #2]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8008ce6:	bf00      	nop
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bc90      	pop	{r4, r7}
 8008cee:	4770      	bx	lr

08008cf0 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	6039      	str	r1, [r7, #0]
 8008cfa:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	4603      	mov	r3, r0
 8008d10:	6039      	str	r1, [r7, #0]
 8008d12:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8008d20:	b490      	push	{r4, r7}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	4623      	mov	r3, r4
 8008d30:	71fb      	strb	r3, [r7, #7]
 8008d32:	4603      	mov	r3, r0
 8008d34:	80bb      	strh	r3, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	71bb      	strb	r3, [r7, #6]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc90      	pop	{r4, r7}
 8008d46:	4770      	bx	lr

08008d48 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	6039      	str	r1, [r7, #0]
 8008d52:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8008d60:	b480      	push	{r7}
 8008d62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8008d64:	bf00      	nop
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	4603      	mov	r3, r0
 8008d76:	80fb      	strh	r3, [r7, #6]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	717b      	strb	r3, [r7, #5]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	4603      	mov	r3, r0
 8008daa:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8008db8:	b480      	push	{r7}
 8008dba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8008dbc:	bf00      	nop
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8008dca:	bf00      	nop
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	4603      	mov	r3, r0
 8008dde:	71fb      	strb	r3, [r7, #7]
 8008de0:	460b      	mov	r3, r1
 8008de2:	71bb      	strb	r3, [r7, #6]
 8008de4:	4613      	mov	r3, r2
 8008de6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8008dfe:	bf00      	nop
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b083      	sub	sp, #12
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	4603      	mov	r3, r0
 8008e12:	6039      	str	r1, [r7, #0]
 8008e14:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8008e22:	b480      	push	{r7}
 8008e24:	b083      	sub	sp, #12
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	4603      	mov	r3, r0
 8008e2a:	460a      	mov	r2, r1
 8008e2c:	80fb      	strh	r3, [r7, #6]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b083      	sub	sp, #12
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	4603      	mov	r3, r0
 8008e46:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	460a      	mov	r2, r1
 8008e5e:	80fb      	strh	r3, [r7, #6]
 8008e60:	4613      	mov	r3, r2
 8008e62:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	603b      	str	r3, [r7, #0]
 8008e78:	4603      	mov	r3, r0
 8008e7a:	80fb      	strh	r3, [r7, #6]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	717b      	strb	r3, [r7, #5]
 8008e80:	4613      	mov	r3, r2
 8008e82:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	603a      	str	r2, [r7, #0]
 8008e9a:	80fb      	strh	r3, [r7, #6]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	80fb      	strh	r3, [r7, #6]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	717b      	strb	r3, [r7, #5]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	603a      	str	r2, [r7, #0]
 8008ed6:	80fb      	strh	r3, [r7, #6]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	603a      	str	r2, [r7, #0]
 8008ef2:	80fb      	strh	r3, [r7, #6]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	603a      	str	r2, [r7, #0]
 8008f0e:	80fb      	strh	r3, [r7, #6]
 8008f10:	460b      	mov	r3, r1
 8008f12:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	603b      	str	r3, [r7, #0]
 8008f28:	4603      	mov	r3, r0
 8008f2a:	80fb      	strh	r3, [r7, #6]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	717b      	strb	r3, [r7, #5]
 8008f30:	4613      	mov	r3, r2
 8008f32:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8008f40:	b490      	push	{r4, r7}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4604      	mov	r4, r0
 8008f48:	4608      	mov	r0, r1
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4623      	mov	r3, r4
 8008f50:	80fb      	strh	r3, [r7, #6]
 8008f52:	4603      	mov	r3, r0
 8008f54:	80bb      	strh	r3, [r7, #4]
 8008f56:	460b      	mov	r3, r1
 8008f58:	807b      	strh	r3, [r7, #2]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bc90      	pop	{r4, r7}
 8008f66:	4770      	bx	lr

08008f68 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	607b      	str	r3, [r7, #4]
 8008f86:	4603      	mov	r3, r0
 8008f88:	81fb      	strh	r3, [r7, #14]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	81bb      	strh	r3, [r7, #12]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8008f92:	bf00      	nop
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	460a      	mov	r2, r1
 8008fa8:	80fb      	strh	r3, [r7, #6]
 8008faa:	4613      	mov	r3, r2
 8008fac:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8008fba:	b490      	push	{r4, r7}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	4608      	mov	r0, r1
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4623      	mov	r3, r4
 8008fca:	80fb      	strh	r3, [r7, #6]
 8008fcc:	4603      	mov	r3, r0
 8008fce:	717b      	strb	r3, [r7, #5]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	807b      	strh	r3, [r7, #2]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc90      	pop	{r4, r7}
 8008fe0:	4770      	bx	lr

08008fe2 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b085      	sub	sp, #20
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	607b      	str	r3, [r7, #4]
 8008fea:	4603      	mov	r3, r0
 8008fec:	81fb      	strh	r3, [r7, #14]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	81bb      	strh	r3, [r7, #12]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 8008ff6:	bf00      	nop
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8009002:	b480      	push	{r7}
 8009004:	b085      	sub	sp, #20
 8009006:	af00      	add	r7, sp, #0
 8009008:	607b      	str	r3, [r7, #4]
 800900a:	4603      	mov	r3, r0
 800900c:	81fb      	strh	r3, [r7, #14]
 800900e:	460b      	mov	r3, r1
 8009010:	81bb      	strh	r3, [r7, #12]
 8009012:	4613      	mov	r3, r2
 8009014:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	4603      	mov	r3, r0
 800902a:	80fb      	strh	r3, [r7, #6]
 800902c:	460b      	mov	r3, r1
 800902e:	80bb      	strh	r3, [r7, #4]
 8009030:	4613      	mov	r3, r2
 8009032:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	4603      	mov	r3, r0
 8009048:	603a      	str	r2, [r7, #0]
 800904a:	80fb      	strh	r3, [r7, #6]
 800904c:	460b      	mov	r3, r1
 800904e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	460a      	mov	r2, r1
 8009066:	80fb      	strh	r3, [r7, #6]
 8009068:	4613      	mov	r3, r2
 800906a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800908e:	b490      	push	{r4, r7}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	4604      	mov	r4, r0
 8009096:	4608      	mov	r0, r1
 8009098:	4611      	mov	r1, r2
 800909a:	461a      	mov	r2, r3
 800909c:	4623      	mov	r3, r4
 800909e:	80fb      	strh	r3, [r7, #6]
 80090a0:	4603      	mov	r3, r0
 80090a2:	80bb      	strh	r3, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	807b      	strh	r3, [r7, #2]
 80090a8:	4613      	mov	r3, r2
 80090aa:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bc90      	pop	{r4, r7}
 80090b4:	4770      	bx	lr

080090b6 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	4603      	mov	r3, r0
 80090be:	460a      	mov	r2, r1
 80090c0:	80fb      	strh	r3, [r7, #6]
 80090c2:	4613      	mov	r3, r2
 80090c4:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	4603      	mov	r3, r0
 80090da:	603a      	str	r2, [r7, #0]
 80090dc:	80fb      	strh	r3, [r7, #6]
 80090de:	460b      	mov	r3, r1
 80090e0:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 80090e2:	bf00      	nop
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 80090ee:	b490      	push	{r4, r7}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	4604      	mov	r4, r0
 80090f6:	4608      	mov	r0, r1
 80090f8:	4611      	mov	r1, r2
 80090fa:	461a      	mov	r2, r3
 80090fc:	4623      	mov	r3, r4
 80090fe:	80fb      	strh	r3, [r7, #6]
 8009100:	4603      	mov	r3, r0
 8009102:	717b      	strb	r3, [r7, #5]
 8009104:	460b      	mov	r3, r1
 8009106:	807b      	strh	r3, [r7, #2]
 8009108:	4613      	mov	r3, r2
 800910a:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bc90      	pop	{r4, r7}
 8009114:	4770      	bx	lr

08009116 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8009116:	b490      	push	{r4, r7}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	4604      	mov	r4, r0
 800911e:	4608      	mov	r0, r1
 8009120:	4611      	mov	r1, r2
 8009122:	461a      	mov	r2, r3
 8009124:	4623      	mov	r3, r4
 8009126:	80fb      	strh	r3, [r7, #6]
 8009128:	4603      	mov	r3, r0
 800912a:	717b      	strb	r3, [r7, #5]
 800912c:	460b      	mov	r3, r1
 800912e:	807b      	strh	r3, [r7, #2]
 8009130:	4613      	mov	r3, r2
 8009132:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bc90      	pop	{r4, r7}
 800913c:	4770      	bx	lr

0800913e <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	4603      	mov	r3, r0
 8009146:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	60b9      	str	r1, [r7, #8]
 8009170:	607a      	str	r2, [r7, #4]
 8009172:	603b      	str	r3, [r7, #0]
 8009174:	4603      	mov	r3, r0
 8009176:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8009178:	bf00      	nop
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	603a      	str	r2, [r7, #0]
 800918e:	71fb      	strb	r3, [r7, #7]
 8009190:	460b      	mov	r3, r1
 8009192:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	603a      	str	r2, [r7, #0]
 80091aa:	71fb      	strb	r3, [r7, #7]
 80091ac:	460b      	mov	r3, r1
 80091ae:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	603a      	str	r2, [r7, #0]
 80091c6:	71fb      	strb	r3, [r7, #7]
 80091c8:	460b      	mov	r3, r1
 80091ca:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80091e2:	f107 0308 	add.w	r3, r7, #8
 80091e6:	2218      	movs	r2, #24
 80091e8:	2100      	movs	r1, #0
 80091ea:	4618      	mov	r0, r3
 80091ec:	f004 fa22 	bl	800d634 <memset>
  rq.ogf = 0x03;
 80091f0:	2303      	movs	r3, #3
 80091f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80091f4:	2303      	movs	r3, #3
 80091f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80091f8:	1dfb      	adds	r3, r7, #7
 80091fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80091fc:	2301      	movs	r3, #1
 80091fe:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8009200:	f107 0308 	add.w	r3, r7, #8
 8009204:	2100      	movs	r1, #0
 8009206:	4618      	mov	r0, r3
 8009208:	f000 ff5c 	bl	800a0c4 <hci_send_req>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	da01      	bge.n	8009216 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009212:	23ff      	movs	r3, #255	; 0xff
 8009214:	e005      	b.n	8009222 <hci_reset+0x4a>
  if (status) {
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <hci_reset+0x48>
    return status;
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	e000      	b.n	8009222 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3720      	adds	r7, #32
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b0cc      	sub	sp, #304	; 0x130
 800922e:	af00      	add	r7, sp, #0
 8009230:	4602      	mov	r2, r0
 8009232:	463b      	mov	r3, r7
 8009234:	6019      	str	r1, [r3, #0]
 8009236:	1dfb      	adds	r3, r7, #7
 8009238:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800923a:	f107 030c 	add.w	r3, r7, #12
 800923e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009242:	f107 030b 	add.w	r3, r7, #11
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 8009250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009254:	1dfa      	adds	r2, r7, #7
 8009256:	7812      	ldrb	r2, [r2, #0]
 8009258:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800925a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800925e:	3301      	adds	r3, #1
 8009260:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 8009264:	463b      	mov	r3, r7
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d007      	beq.n	800927c <hci_le_set_scan_response_data+0x52>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800926c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009270:	1c58      	adds	r0, r3, #1
 8009272:	463b      	mov	r3, r7
 8009274:	221f      	movs	r2, #31
 8009276:	6819      	ldr	r1, [r3, #0]
 8009278:	f004 f9ce 	bl	800d618 <memcpy>
  }
  index_input += 31;
 800927c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009280:	331f      	adds	r3, #31
 8009282:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009286:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800928a:	2218      	movs	r2, #24
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f004 f9d0 	bl	800d634 <memset>
  rq.ogf = 0x08;
 8009294:	2308      	movs	r3, #8
 8009296:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 800929a:	2309      	movs	r3, #9
 800929c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80092a0:	f107 030c 	add.w	r3, r7, #12
 80092a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80092a8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80092ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80092b0:	f107 030b 	add.w	r3, r7, #11
 80092b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80092b8:	2301      	movs	r3, #1
 80092ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80092be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092c2:	2100      	movs	r1, #0
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 fefd 	bl	800a0c4 <hci_send_req>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	da01      	bge.n	80092d4 <hci_le_set_scan_response_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 80092d0:	23ff      	movs	r3, #255	; 0xff
 80092d2:	e009      	b.n	80092e8 <hci_le_set_scan_response_data+0xbe>
  if (status) {
 80092d4:	f107 030b 	add.w	r3, r7, #11
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <hci_le_set_scan_response_data+0xbc>
    return status;
 80092de:	f107 030b 	add.w	r3, r7, #11
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	e000      	b.n	80092e8 <hci_le_set_scan_response_data+0xbe>
  }
  return BLE_STATUS_SUCCESS;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b08c      	sub	sp, #48	; 0x30
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80092fa:	f107 030c 	add.w	r3, r7, #12
 80092fe:	2209      	movs	r2, #9
 8009300:	2100      	movs	r1, #0
 8009302:	4618      	mov	r0, r3
 8009304:	f004 f996 	bl	800d634 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009308:	f107 0318 	add.w	r3, r7, #24
 800930c:	2218      	movs	r2, #24
 800930e:	2100      	movs	r1, #0
 8009310:	4618      	mov	r0, r3
 8009312:	f004 f98f 	bl	800d634 <memset>
  rq.ogf = 0x08;
 8009316:	2308      	movs	r3, #8
 8009318:	833b      	strh	r3, [r7, #24]
  rq.ocf = 0x018;
 800931a:	2318      	movs	r3, #24
 800931c:	837b      	strh	r3, [r7, #26]
  rq.rparam = &resp;
 800931e:	f107 030c 	add.w	r3, r7, #12
 8009322:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = sizeof(resp);
 8009324:	2309      	movs	r3, #9
 8009326:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8009328:	f107 0318 	add.w	r3, r7, #24
 800932c:	2100      	movs	r1, #0
 800932e:	4618      	mov	r0, r3
 8009330:	f000 fec8 	bl	800a0c4 <hci_send_req>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	da01      	bge.n	800933e <hci_le_rand+0x4c>
    return BLE_STATUS_TIMEOUT;
 800933a:	23ff      	movs	r3, #255	; 0xff
 800933c:	e00d      	b.n	800935a <hci_le_rand+0x68>
  if (resp.Status) {
 800933e:	7b3b      	ldrb	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <hci_le_rand+0x56>
    return resp.Status;
 8009344:	7b3b      	ldrb	r3, [r7, #12]
 8009346:	e008      	b.n	800935a <hci_le_rand+0x68>
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	461a      	mov	r2, r3
 800934c:	f107 030d 	add.w	r3, r7, #13
 8009350:	6819      	ldr	r1, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	6011      	str	r1, [r2, #0]
 8009356:	6053      	str	r3, [r2, #4]
  return BLE_STATUS_SUCCESS;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3730      	adds	r7, #48	; 0x30
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8009362:	b5b0      	push	{r4, r5, r7, lr}
 8009364:	b0ce      	sub	sp, #312	; 0x138
 8009366:	af00      	add	r7, sp, #0
 8009368:	4605      	mov	r5, r0
 800936a:	460c      	mov	r4, r1
 800936c:	4610      	mov	r0, r2
 800936e:	4619      	mov	r1, r3
 8009370:	1dfb      	adds	r3, r7, #7
 8009372:	462a      	mov	r2, r5
 8009374:	701a      	strb	r2, [r3, #0]
 8009376:	1d3b      	adds	r3, r7, #4
 8009378:	4622      	mov	r2, r4
 800937a:	801a      	strh	r2, [r3, #0]
 800937c:	1cbb      	adds	r3, r7, #2
 800937e:	4602      	mov	r2, r0
 8009380:	801a      	strh	r2, [r3, #0]
 8009382:	1dbb      	adds	r3, r7, #6
 8009384:	460a      	mov	r2, r1
 8009386:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8009388:	f107 030c 	add.w	r3, r7, #12
 800938c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009390:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009394:	3308      	adds	r3, #8
 8009396:	f107 020c 	add.w	r2, r7, #12
 800939a:	4413      	add	r3, r2
 800939c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80093a0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80093a4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80093a8:	4413      	add	r3, r2
 80093aa:	3309      	adds	r3, #9
 80093ac:	f107 020c 	add.w	r2, r7, #12
 80093b0:	4413      	add	r3, r2
 80093b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80093b6:	f107 030b 	add.w	r3, r7, #11
 80093ba:	2200      	movs	r2, #0
 80093bc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 80093c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093c8:	1dfa      	adds	r2, r7, #7
 80093ca:	7812      	ldrb	r2, [r2, #0]
 80093cc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80093ce:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80093d2:	3301      	adds	r3, #1
 80093d4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 80093d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093dc:	1d3a      	adds	r2, r7, #4
 80093de:	8812      	ldrh	r2, [r2, #0]
 80093e0:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80093e4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80093e8:	3302      	adds	r3, #2
 80093ea:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 80093ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80093f2:	1cba      	adds	r2, r7, #2
 80093f4:	8812      	ldrh	r2, [r2, #0]
 80093f6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80093fa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80093fe:	3302      	adds	r3, #2
 8009400:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8009404:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009408:	1dba      	adds	r2, r7, #6
 800940a:	7812      	ldrb	r2, [r2, #0]
 800940c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800940e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009412:	3301      	adds	r3, #1
 8009414:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8009418:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800941c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009420:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009422:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009426:	3301      	adds	r3, #1
 8009428:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800942c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009430:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009434:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009436:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800943a:	3301      	adds	r3, #1
 800943c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8009440:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009444:	3308      	adds	r3, #8
 8009446:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800944a:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800944e:	4618      	mov	r0, r3
 8009450:	f004 f8e2 	bl	800d618 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8009454:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8009458:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800945c:	4413      	add	r3, r2
 800945e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8009462:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009466:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800946a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800946c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009470:	3301      	adds	r3, #1
 8009472:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8009476:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800947a:	3301      	adds	r3, #1
 800947c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009480:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8009484:	4618      	mov	r0, r3
 8009486:	f004 f8c7 	bl	800d618 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800948a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800948e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009492:	4413      	add	r3, r2
 8009494:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8009498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800949c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80094a0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80094a2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80094a6:	3302      	adds	r3, #2
 80094a8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80094ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b0:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80094b4:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80094b6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80094ba:	3302      	adds	r3, #2
 80094bc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80094c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094c4:	2218      	movs	r2, #24
 80094c6:	2100      	movs	r1, #0
 80094c8:	4618      	mov	r0, r3
 80094ca:	f004 f8b3 	bl	800d634 <memset>
  rq.ogf = 0x3f;
 80094ce:	233f      	movs	r3, #63	; 0x3f
 80094d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80094d4:	2383      	movs	r3, #131	; 0x83
 80094d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094da:	f107 030c 	add.w	r3, r7, #12
 80094de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094e2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80094e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094ea:	f107 030b 	add.w	r3, r7, #11
 80094ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80094f2:	2301      	movs	r3, #1
 80094f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80094f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094fc:	2100      	movs	r1, #0
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fde0 	bl	800a0c4 <hci_send_req>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	da01      	bge.n	800950e <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800950a:	23ff      	movs	r3, #255	; 0xff
 800950c:	e009      	b.n	8009522 <aci_gap_set_discoverable+0x1c0>
  if (status) {
 800950e:	f107 030b 	add.w	r3, r7, #11
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <aci_gap_set_discoverable+0x1be>
    return status;
 8009518:	f107 030b 	add.w	r3, r7, #11
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	e000      	b.n	8009522 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009528:	46bd      	mov	sp, r7
 800952a:	bdb0      	pop	{r4, r5, r7, pc}

0800952c <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800952c:	b590      	push	{r4, r7, lr}
 800952e:	b0cf      	sub	sp, #316	; 0x13c
 8009530:	af00      	add	r7, sp, #0
 8009532:	4604      	mov	r4, r0
 8009534:	4608      	mov	r0, r1
 8009536:	4611      	mov	r1, r2
 8009538:	463a      	mov	r2, r7
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	1dfb      	adds	r3, r7, #7
 800953e:	4622      	mov	r2, r4
 8009540:	701a      	strb	r2, [r3, #0]
 8009542:	1dbb      	adds	r3, r7, #6
 8009544:	4602      	mov	r2, r0
 8009546:	701a      	strb	r2, [r3, #0]
 8009548:	1d7b      	adds	r3, r7, #5
 800954a:	460a      	mov	r2, r1
 800954c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800954e:	f107 0314 	add.w	r3, r7, #20
 8009552:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009556:	f107 030c 	add.w	r3, r7, #12
 800955a:	2207      	movs	r2, #7
 800955c:	2100      	movs	r1, #0
 800955e:	4618      	mov	r0, r3
 8009560:	f004 f868 	bl	800d634 <memset>
  uint8_t index_input = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 800956a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800956e:	1dfa      	adds	r2, r7, #7
 8009570:	7812      	ldrb	r2, [r2, #0]
 8009572:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009574:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009578:	3301      	adds	r3, #1
 800957a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800957e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009582:	1dba      	adds	r2, r7, #6
 8009584:	7812      	ldrb	r2, [r2, #0]
 8009586:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009588:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800958c:	3301      	adds	r3, #1
 800958e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8009592:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009596:	1d7a      	adds	r2, r7, #5
 8009598:	7812      	ldrb	r2, [r2, #0]
 800959a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800959c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80095a0:	3301      	adds	r3, #1
 80095a2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80095a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095aa:	2218      	movs	r2, #24
 80095ac:	2100      	movs	r1, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f004 f840 	bl	800d634 <memset>
  rq.ogf = 0x3f;
 80095b4:	233f      	movs	r3, #63	; 0x3f
 80095b6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 80095ba:	238a      	movs	r3, #138	; 0x8a
 80095bc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80095c0:	f107 0314 	add.w	r3, r7, #20
 80095c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80095c8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80095cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80095d0:	f107 030c 	add.w	r3, r7, #12
 80095d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80095d8:	2307      	movs	r3, #7
 80095da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80095de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095e2:	2100      	movs	r1, #0
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fd6d 	bl	800a0c4 <hci_send_req>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	da01      	bge.n	80095f4 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80095f0:	23ff      	movs	r3, #255	; 0xff
 80095f2:	e021      	b.n	8009638 <aci_gap_init+0x10c>
  if (resp.Status) {
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <aci_gap_init+0xda>
    return resp.Status;
 80095fe:	f107 030c 	add.w	r3, r7, #12
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	e018      	b.n	8009638 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8009606:	f107 030c 	add.w	r3, r7, #12
 800960a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800960e:	b29a      	uxth	r2, r3
 8009610:	463b      	mov	r3, r7
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8009616:	f107 030c 	add.w	r3, r7, #12
 800961a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800961e:	b29a      	uxth	r2, r3
 8009620:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009624:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8009626:	f107 030c 	add.w	r3, r7, #12
 800962a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800962e:	b29a      	uxth	r2, r3
 8009630:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009634:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800963e:	46bd      	mov	sp, r7
 8009640:	bd90      	pop	{r4, r7, pc}

08009642 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b088      	sub	sp, #32
 8009646:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800964c:	f107 0308 	add.w	r3, r7, #8
 8009650:	2218      	movs	r2, #24
 8009652:	2100      	movs	r1, #0
 8009654:	4618      	mov	r0, r3
 8009656:	f003 ffed 	bl	800d634 <memset>
  rq.ogf = 0x3f;
 800965a:	233f      	movs	r3, #63	; 0x3f
 800965c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800965e:	f240 1301 	movw	r3, #257	; 0x101
 8009662:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009664:	1dfb      	adds	r3, r7, #7
 8009666:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009668:	2301      	movs	r3, #1
 800966a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800966c:	f107 0308 	add.w	r3, r7, #8
 8009670:	2100      	movs	r1, #0
 8009672:	4618      	mov	r0, r3
 8009674:	f000 fd26 	bl	800a0c4 <hci_send_req>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	da01      	bge.n	8009682 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800967e:	23ff      	movs	r3, #255	; 0xff
 8009680:	e005      	b.n	800968e <aci_gatt_init+0x4c>
  if (status) {
 8009682:	79fb      	ldrb	r3, [r7, #7]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <aci_gatt_init+0x4a>
    return status;
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	e000      	b.n	800968e <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3720      	adds	r7, #32
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8009696:	b590      	push	{r4, r7, lr}
 8009698:	b0cf      	sub	sp, #316	; 0x13c
 800969a:	af00      	add	r7, sp, #0
 800969c:	4604      	mov	r4, r0
 800969e:	4638      	mov	r0, r7
 80096a0:	6001      	str	r1, [r0, #0]
 80096a2:	4610      	mov	r0, r2
 80096a4:	4619      	mov	r1, r3
 80096a6:	1dfb      	adds	r3, r7, #7
 80096a8:	4622      	mov	r2, r4
 80096aa:	701a      	strb	r2, [r3, #0]
 80096ac:	1dbb      	adds	r3, r7, #6
 80096ae:	4602      	mov	r2, r0
 80096b0:	701a      	strb	r2, [r3, #0]
 80096b2:	1d7b      	adds	r3, r7, #5
 80096b4:	460a      	mov	r2, r1
 80096b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80096b8:	f107 030c 	add.w	r3, r7, #12
 80096bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80096c0:	1dfb      	adds	r3, r7, #7
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d007      	beq.n	80096d8 <aci_gatt_add_service+0x42>
 80096c8:	1dfb      	adds	r3, r7, #7
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d101      	bne.n	80096d4 <aci_gatt_add_service+0x3e>
 80096d0:	2311      	movs	r3, #17
 80096d2:	e002      	b.n	80096da <aci_gatt_add_service+0x44>
 80096d4:	2301      	movs	r3, #1
 80096d6:	e000      	b.n	80096da <aci_gatt_add_service+0x44>
 80096d8:	2303      	movs	r3, #3
 80096da:	f107 020c 	add.w	r2, r7, #12
 80096de:	4413      	add	r3, r2
 80096e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80096e4:	f107 0308 	add.w	r3, r7, #8
 80096e8:	2203      	movs	r2, #3
 80096ea:	2100      	movs	r1, #0
 80096ec:	4618      	mov	r0, r3
 80096ee:	f003 ffa1 	bl	800d634 <memset>
  uint8_t index_input = 0;
 80096f2:	2300      	movs	r3, #0
 80096f4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80096f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80096fc:	1dfa      	adds	r2, r7, #7
 80096fe:	7812      	ldrb	r2, [r2, #0]
 8009700:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009702:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009706:	3301      	adds	r3, #1
 8009708:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800970c:	1dfb      	adds	r3, r7, #7
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d002      	beq.n	800971a <aci_gatt_add_service+0x84>
 8009714:	2b02      	cmp	r3, #2
 8009716:	d004      	beq.n	8009722 <aci_gatt_add_service+0x8c>
 8009718:	e007      	b.n	800972a <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800971a:	2302      	movs	r3, #2
 800971c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009720:	e005      	b.n	800972e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8009722:	2310      	movs	r3, #16
 8009724:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009728:	e001      	b.n	800972e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800972a:	2347      	movs	r3, #71	; 0x47
 800972c:	e05d      	b.n	80097ea <aci_gatt_add_service+0x154>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800972e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009732:	1c58      	adds	r0, r3, #1
 8009734:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009738:	463b      	mov	r3, r7
 800973a:	6819      	ldr	r1, [r3, #0]
 800973c:	f003 ff6c 	bl	800d618 <memcpy>
    index_input += size;
 8009740:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8009744:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009748:	4413      	add	r3, r2
 800974a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800974e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009752:	1dba      	adds	r2, r7, #6
 8009754:	7812      	ldrb	r2, [r2, #0]
 8009756:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009758:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800975c:	3301      	adds	r3, #1
 800975e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8009762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009766:	1d7a      	adds	r2, r7, #5
 8009768:	7812      	ldrb	r2, [r2, #0]
 800976a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800976c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009770:	3301      	adds	r3, #1
 8009772:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009776:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800977a:	2218      	movs	r2, #24
 800977c:	2100      	movs	r1, #0
 800977e:	4618      	mov	r0, r3
 8009780:	f003 ff58 	bl	800d634 <memset>
  rq.ogf = 0x3f;
 8009784:	233f      	movs	r3, #63	; 0x3f
 8009786:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800978a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800978e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009792:	f107 030c 	add.w	r3, r7, #12
 8009796:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800979a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800979e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80097a2:	f107 0308 	add.w	r3, r7, #8
 80097a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80097aa:	2303      	movs	r3, #3
 80097ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80097b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fc84 	bl	800a0c4 <hci_send_req>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	da01      	bge.n	80097c6 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80097c2:	23ff      	movs	r3, #255	; 0xff
 80097c4:	e011      	b.n	80097ea <aci_gatt_add_service+0x154>
  if (resp.Status) {
 80097c6:	f107 0308 	add.w	r3, r7, #8
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <aci_gatt_add_service+0x142>
    return resp.Status;
 80097d0:	f107 0308 	add.w	r3, r7, #8
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	e008      	b.n	80097ea <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80097d8:	f107 0308 	add.w	r3, r7, #8
 80097dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80097e6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd90      	pop	{r4, r7, pc}

080097f4 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 80097f4:	b590      	push	{r4, r7, lr}
 80097f6:	b0d1      	sub	sp, #324	; 0x144
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	f107 0108 	add.w	r1, r7, #8
 8009802:	600a      	str	r2, [r1, #0]
 8009804:	4619      	mov	r1, r3
 8009806:	f107 030e 	add.w	r3, r7, #14
 800980a:	4622      	mov	r2, r4
 800980c:	801a      	strh	r2, [r3, #0]
 800980e:	f107 030d 	add.w	r3, r7, #13
 8009812:	4602      	mov	r2, r0
 8009814:	701a      	strb	r2, [r3, #0]
 8009816:	1dbb      	adds	r3, r7, #6
 8009818:	460a      	mov	r2, r1
 800981a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800981c:	f107 0314 	add.w	r3, r7, #20
 8009820:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009824:	f107 030d 	add.w	r3, r7, #13
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d008      	beq.n	8009840 <aci_gatt_add_char+0x4c>
 800982e:	f107 030d 	add.w	r3, r7, #13
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b02      	cmp	r3, #2
 8009836:	d101      	bne.n	800983c <aci_gatt_add_char+0x48>
 8009838:	2313      	movs	r3, #19
 800983a:	e002      	b.n	8009842 <aci_gatt_add_char+0x4e>
 800983c:	2303      	movs	r3, #3
 800983e:	e000      	b.n	8009842 <aci_gatt_add_char+0x4e>
 8009840:	2305      	movs	r3, #5
 8009842:	f107 0214 	add.w	r2, r7, #20
 8009846:	4413      	add	r3, r2
 8009848:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800984c:	f107 0310 	add.w	r3, r7, #16
 8009850:	2203      	movs	r2, #3
 8009852:	2100      	movs	r1, #0
 8009854:	4618      	mov	r0, r3
 8009856:	f003 feed 	bl	800d634 <memset>
  uint8_t index_input = 0;
 800985a:	2300      	movs	r3, #0
 800985c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009860:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009864:	f107 020e 	add.w	r2, r7, #14
 8009868:	8812      	ldrh	r2, [r2, #0]
 800986a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800986c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009870:	3302      	adds	r3, #2
 8009872:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8009876:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800987a:	f107 020d 	add.w	r2, r7, #13
 800987e:	7812      	ldrb	r2, [r2, #0]
 8009880:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009882:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009886:	3301      	adds	r3, #1
 8009888:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800988c:	f107 030d 	add.w	r3, r7, #13
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d002      	beq.n	800989c <aci_gatt_add_char+0xa8>
 8009896:	2b02      	cmp	r3, #2
 8009898:	d004      	beq.n	80098a4 <aci_gatt_add_char+0xb0>
 800989a:	e007      	b.n	80098ac <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800989c:	2302      	movs	r3, #2
 800989e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80098a2:	e005      	b.n	80098b0 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80098a4:	2310      	movs	r3, #16
 80098a6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80098aa:	e001      	b.n	80098b0 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80098ac:	2347      	movs	r3, #71	; 0x47
 80098ae:	e086      	b.n	80099be <aci_gatt_add_char+0x1ca>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 80098b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80098b4:	1cd8      	adds	r0, r3, #3
 80098b6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80098ba:	f107 0308 	add.w	r3, r7, #8
 80098be:	6819      	ldr	r1, [r3, #0]
 80098c0:	f003 feaa 	bl	800d618 <memcpy>
    index_input += size;
 80098c4:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80098c8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80098cc:	4413      	add	r3, r2
 80098ce:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 80098d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098d6:	1dba      	adds	r2, r7, #6
 80098d8:	8812      	ldrh	r2, [r2, #0]
 80098da:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80098dc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80098e0:	3302      	adds	r3, #2
 80098e2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 80098e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098ea:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80098ee:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80098f0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80098f4:	3301      	adds	r3, #1
 80098f6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 80098fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80098fe:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009902:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009904:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009908:	3301      	adds	r3, #1
 800990a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800990e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009912:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009916:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009918:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800991c:	3301      	adds	r3, #1
 800991e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8009922:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009926:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800992a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800992c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009930:	3301      	adds	r3, #1
 8009932:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8009936:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800993a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800993e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009940:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009944:	3301      	adds	r3, #1
 8009946:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800994a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800994e:	2218      	movs	r2, #24
 8009950:	2100      	movs	r1, #0
 8009952:	4618      	mov	r0, r3
 8009954:	f003 fe6e 	bl	800d634 <memset>
  rq.ogf = 0x3f;
 8009958:	233f      	movs	r3, #63	; 0x3f
 800995a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800995e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009962:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009966:	f107 0314 	add.w	r3, r7, #20
 800996a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800996e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009972:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009976:	f107 0310 	add.w	r3, r7, #16
 800997a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800997e:	2303      	movs	r3, #3
 8009980:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8009984:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009988:	2100      	movs	r1, #0
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fb9a 	bl	800a0c4 <hci_send_req>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	da01      	bge.n	800999a <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8009996:	23ff      	movs	r3, #255	; 0xff
 8009998:	e011      	b.n	80099be <aci_gatt_add_char+0x1ca>
  if (resp.Status) {
 800999a:	f107 0310 	add.w	r3, r7, #16
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80099a4:	f107 0310 	add.w	r3, r7, #16
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	e008      	b.n	80099be <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80099ac:	f107 0310 	add.w	r3, r7, #16
 80099b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80099ba:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd90      	pop	{r4, r7, pc}

080099c8 <aci_gatt_add_char_desc>:
                                  uint8_t Access_Permissions,
                                  uint8_t GATT_Evt_Mask,
                                  uint8_t Enc_Key_Size,
                                  uint8_t Is_Variable,
                                  uint16_t *Char_Desc_Handle)
{
 80099c8:	b590      	push	{r4, r7, lr}
 80099ca:	b0d3      	sub	sp, #332	; 0x14c
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4604      	mov	r4, r0
 80099d0:	4608      	mov	r0, r1
 80099d2:	4611      	mov	r1, r2
 80099d4:	1d3a      	adds	r2, r7, #4
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	f107 030e 	add.w	r3, r7, #14
 80099dc:	4622      	mov	r2, r4
 80099de:	801a      	strh	r2, [r3, #0]
 80099e0:	f107 030c 	add.w	r3, r7, #12
 80099e4:	4602      	mov	r2, r0
 80099e6:	801a      	strh	r2, [r3, #0]
 80099e8:	f107 030b 	add.w	r3, r7, #11
 80099ec:	460a      	mov	r2, r1
 80099ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_desc_cp0 *cp0 = (aci_gatt_add_char_desc_cp0*)(cmd_buffer);
 80099f0:	f107 0318 	add.w	r3, r7, #24
 80099f4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 80099f8:	f107 030b 	add.w	r3, r7, #11
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d008      	beq.n	8009a14 <aci_gatt_add_char_desc+0x4c>
 8009a02:	f107 030b 	add.w	r3, r7, #11
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d101      	bne.n	8009a10 <aci_gatt_add_char_desc+0x48>
 8009a0c:	2315      	movs	r3, #21
 8009a0e:	e002      	b.n	8009a16 <aci_gatt_add_char_desc+0x4e>
 8009a10:	2305      	movs	r3, #5
 8009a12:	e000      	b.n	8009a16 <aci_gatt_add_char_desc+0x4e>
 8009a14:	2307      	movs	r3, #7
 8009a16:	f107 0218 	add.w	r2, r7, #24
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8009a20:	f107 030b 	add.w	r3, r7, #11
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d008      	beq.n	8009a3c <aci_gatt_add_char_desc+0x74>
 8009a2a:	f107 030b 	add.w	r3, r7, #11
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d101      	bne.n	8009a38 <aci_gatt_add_char_desc+0x70>
 8009a34:	2317      	movs	r3, #23
 8009a36:	e002      	b.n	8009a3e <aci_gatt_add_char_desc+0x76>
 8009a38:	2307      	movs	r3, #7
 8009a3a:	e000      	b.n	8009a3e <aci_gatt_add_char_desc+0x76>
 8009a3c:	2309      	movs	r3, #9
 8009a3e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009a42:	4413      	add	r3, r2
 8009a44:	f107 0218 	add.w	r2, r7, #24
 8009a48:	4413      	add	r3, r2
 8009a4a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_desc_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009a4e:	f107 0314 	add.w	r3, r7, #20
 8009a52:	2203      	movs	r2, #3
 8009a54:	2100      	movs	r1, #0
 8009a56:	4618      	mov	r0, r3
 8009a58:	f003 fdec 	bl	800d634 <memset>
  uint8_t index_input = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009a62:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009a66:	f107 020e 	add.w	r2, r7, #14
 8009a6a:	8812      	ldrh	r2, [r2, #0]
 8009a6c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009a6e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009a72:	3302      	adds	r3, #2
 8009a74:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  cp0->Char_Handle = htob(Char_Handle, 2);
 8009a78:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009a7c:	f107 020c 	add.w	r2, r7, #12
 8009a80:	8812      	ldrh	r2, [r2, #0]
 8009a82:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009a84:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009a88:	3302      	adds	r3, #2
 8009a8a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 8009a8e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009a92:	f107 020b 	add.w	r2, r7, #11
 8009a96:	7812      	ldrb	r2, [r2, #0]
 8009a98:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009a9a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_Desc_Uuid_Type) {
 8009aa4:	f107 030b 	add.w	r3, r7, #11
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d002      	beq.n	8009ab4 <aci_gatt_add_char_desc+0xec>
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d004      	beq.n	8009abc <aci_gatt_add_char_desc+0xf4>
 8009ab2:	e007      	b.n	8009ac4 <aci_gatt_add_char_desc+0xfc>
      case 1: size = 2; break;
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8009aba:	e005      	b.n	8009ac8 <aci_gatt_add_char_desc+0x100>
      case 2: size = 16; break;
 8009abc:	2310      	movs	r3, #16
 8009abe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8009ac2:	e001      	b.n	8009ac8 <aci_gatt_add_char_desc+0x100>
      default: return BLE_STATUS_ERROR;
 8009ac4:	2347      	movs	r3, #71	; 0x47
 8009ac6:	e0a0      	b.n	8009c0a <aci_gatt_add_char_desc+0x242>
    }
    BLUENRG_memcpy((void *) &cp0->Char_Desc_Uuid, (const void *) Char_Desc_Uuid, size);
 8009ac8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009acc:	1d58      	adds	r0, r3, #5
 8009ace:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8009ad2:	1d3b      	adds	r3, r7, #4
 8009ad4:	6819      	ldr	r1, [r3, #0]
 8009ad6:	f003 fd9f 	bl	800d618 <memcpy>
    index_input += size;
 8009ada:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009ade:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp1->Char_Desc_Value_Max_Len = htob(Char_Desc_Value_Max_Len, 1);
 8009ae8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009aec:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009af0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009af2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009af6:	3301      	adds	r3, #1
 8009af8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp1->Char_Desc_Value_Length = htob(Char_Desc_Value_Length, 1);
 8009afc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009b00:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009b04:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009b06:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8009b10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009b14:	3302      	adds	r3, #2
 8009b16:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009b1a:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f003 fd7a 	bl	800d618 <memcpy>
    index_input += Char_Desc_Value_Length*sizeof(uint8_t);
 8009b24:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009b28:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8009b32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009b36:	f897 2164 	ldrb.w	r2, [r7, #356]	; 0x164
 8009b3a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009b3c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009b40:	3301      	adds	r3, #1
 8009b42:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp2->Access_Permissions = htob(Access_Permissions, 1);
 8009b46:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009b4a:	f897 2168 	ldrb.w	r2, [r7, #360]	; 0x168
 8009b4e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009b50:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009b54:	3301      	adds	r3, #1
 8009b56:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp2->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8009b5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009b5e:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8009b62:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009b64:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009b68:	3301      	adds	r3, #1
 8009b6a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp2->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8009b6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009b72:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
 8009b76:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009b78:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp2->Is_Variable = htob(Is_Variable, 1);
 8009b82:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009b86:	f897 2174 	ldrb.w	r2, [r7, #372]	; 0x174
 8009b8a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009b8c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009b90:	3301      	adds	r3, #1
 8009b92:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009b96:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8009b9a:	2218      	movs	r2, #24
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f003 fd48 	bl	800d634 <memset>
  rq.ogf = 0x3f;
 8009ba4:	233f      	movs	r3, #63	; 0x3f
 8009ba6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
  rq.ocf = 0x105;
 8009baa:	f240 1305 	movw	r3, #261	; 0x105
 8009bae:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
  rq.cparam = cmd_buffer;
 8009bb2:	f107 0318 	add.w	r3, r7, #24
 8009bb6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.clen = index_input;
 8009bba:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009bbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rparam = &resp;
 8009bc2:	f107 0314 	add.w	r3, r7, #20
 8009bc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  rq.rlen = sizeof(resp);
 8009bca:	2303      	movs	r3, #3
 8009bcc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  if (hci_send_req(&rq, FALSE) < 0)
 8009bd0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fa74 	bl	800a0c4 <hci_send_req>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	da01      	bge.n	8009be6 <aci_gatt_add_char_desc+0x21e>
    return BLE_STATUS_TIMEOUT;
 8009be2:	23ff      	movs	r3, #255	; 0xff
 8009be4:	e011      	b.n	8009c0a <aci_gatt_add_char_desc+0x242>
  if (resp.Status) {
 8009be6:	f107 0314 	add.w	r3, r7, #20
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d003      	beq.n	8009bf8 <aci_gatt_add_char_desc+0x230>
    return resp.Status;
 8009bf0:	f107 0314 	add.w	r3, r7, #20
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	e008      	b.n	8009c0a <aci_gatt_add_char_desc+0x242>
  }
  *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
 8009bf8:	f107 0314 	add.w	r3, r7, #20
 8009bfc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009c06:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd90      	pop	{r4, r7, pc}

08009c14 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8009c14:	b5b0      	push	{r4, r5, r7, lr}
 8009c16:	b0cc      	sub	sp, #304	; 0x130
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	4610      	mov	r0, r2
 8009c20:	4619      	mov	r1, r3
 8009c22:	1dbb      	adds	r3, r7, #6
 8009c24:	462a      	mov	r2, r5
 8009c26:	801a      	strh	r2, [r3, #0]
 8009c28:	1d3b      	adds	r3, r7, #4
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	801a      	strh	r2, [r3, #0]
 8009c2e:	1cfb      	adds	r3, r7, #3
 8009c30:	4602      	mov	r2, r0
 8009c32:	701a      	strb	r2, [r3, #0]
 8009c34:	1cbb      	adds	r3, r7, #2
 8009c36:	460a      	mov	r2, r1
 8009c38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009c3a:	f107 030c 	add.w	r3, r7, #12
 8009c3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009c42:	f107 030b 	add.w	r3, r7, #11
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c54:	1dba      	adds	r2, r7, #6
 8009c56:	8812      	ldrh	r2, [r2, #0]
 8009c58:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c5a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009c5e:	3302      	adds	r3, #2
 8009c60:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8009c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c68:	1d3a      	adds	r2, r7, #4
 8009c6a:	8812      	ldrh	r2, [r2, #0]
 8009c6c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009c6e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009c72:	3302      	adds	r3, #2
 8009c74:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 8009c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c7c:	1cfa      	adds	r2, r7, #3
 8009c7e:	7812      	ldrb	r2, [r2, #0]
 8009c80:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009c82:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009c86:	3301      	adds	r3, #1
 8009c88:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8009c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c90:	1cba      	adds	r2, r7, #2
 8009c92:	7812      	ldrb	r2, [r2, #0]
 8009c94:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009c96:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8009ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ca4:	1d98      	adds	r0, r3, #6
 8009ca6:	1cbb      	adds	r3, r7, #2
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009cb0:	f003 fcb2 	bl	800d618 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8009cb4:	1cbb      	adds	r3, r7, #2
 8009cb6:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009cc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009cc6:	2218      	movs	r2, #24
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f003 fcb2 	bl	800d634 <memset>
  rq.ogf = 0x3f;
 8009cd0:	233f      	movs	r3, #63	; 0x3f
 8009cd2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009cd6:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009cda:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009cde:	f107 030c 	add.w	r3, r7, #12
 8009ce2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009ce6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009cea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009cee:	f107 030b 	add.w	r3, r7, #11
 8009cf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009cfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d00:	2100      	movs	r1, #0
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f9de 	bl	800a0c4 <hci_send_req>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	da01      	bge.n	8009d12 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8009d0e:	23ff      	movs	r3, #255	; 0xff
 8009d10:	e009      	b.n	8009d26 <aci_gatt_update_char_value+0x112>
  if (status) {
 8009d12:	f107 030b 	add.w	r3, r7, #11
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d003      	beq.n	8009d24 <aci_gatt_update_char_value+0x110>
    return status;
 8009d1c:	f107 030b 	add.w	r3, r7, #11
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	e000      	b.n	8009d26 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bdb0      	pop	{r4, r5, r7, pc}

08009d30 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b0cc      	sub	sp, #304	; 0x130
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	463b      	mov	r3, r7
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	1dfb      	adds	r3, r7, #7
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	701a      	strb	r2, [r3, #0]
 8009d40:	1dbb      	adds	r3, r7, #6
 8009d42:	460a      	mov	r2, r1
 8009d44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009d46:	f107 030c 	add.w	r3, r7, #12
 8009d4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009d4e:	f107 030b 	add.w	r3, r7, #11
 8009d52:	2200      	movs	r2, #0
 8009d54:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 8009d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d60:	1dfa      	adds	r2, r7, #7
 8009d62:	7812      	ldrb	r2, [r2, #0]
 8009d64:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d66:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8009d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d74:	1dba      	adds	r2, r7, #6
 8009d76:	7812      	ldrb	r2, [r2, #0]
 8009d78:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009d7a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009d7e:	3301      	adds	r3, #1
 8009d80:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8009d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d88:	1c98      	adds	r0, r3, #2
 8009d8a:	1dbb      	adds	r3, r7, #6
 8009d8c:	781a      	ldrb	r2, [r3, #0]
 8009d8e:	463b      	mov	r3, r7
 8009d90:	6819      	ldr	r1, [r3, #0]
 8009d92:	f003 fc41 	bl	800d618 <memcpy>
    index_input += Length*sizeof(uint8_t);
 8009d96:	1dbb      	adds	r3, r7, #6
 8009d98:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009da4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009da8:	2218      	movs	r2, #24
 8009daa:	2100      	movs	r1, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f003 fc41 	bl	800d634 <memset>
  rq.ogf = 0x3f;
 8009db2:	233f      	movs	r3, #63	; 0x3f
 8009db4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009db8:	230c      	movs	r3, #12
 8009dba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009dbe:	f107 030c 	add.w	r3, r7, #12
 8009dc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009dc6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009dca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009dce:	f107 030b 	add.w	r3, r7, #11
 8009dd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009ddc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009de0:	2100      	movs	r1, #0
 8009de2:	4618      	mov	r0, r3
 8009de4:	f000 f96e 	bl	800a0c4 <hci_send_req>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	da01      	bge.n	8009df2 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8009dee:	23ff      	movs	r3, #255	; 0xff
 8009df0:	e009      	b.n	8009e06 <aci_hal_write_config_data+0xd6>
  if (status) {
 8009df2:	f107 030b 	add.w	r3, r7, #11
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <aci_hal_write_config_data+0xd4>
    return status;
 8009dfc:	f107 030b 	add.w	r3, r7, #11
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	e000      	b.n	8009e06 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b0cc      	sub	sp, #304	; 0x130
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4602      	mov	r2, r0
 8009e18:	1dfb      	adds	r3, r7, #7
 8009e1a:	701a      	strb	r2, [r3, #0]
 8009e1c:	1dbb      	adds	r3, r7, #6
 8009e1e:	460a      	mov	r2, r1
 8009e20:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009e22:	f107 030c 	add.w	r3, r7, #12
 8009e26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009e2a:	f107 030b 	add.w	r3, r7, #11
 8009e2e:	2200      	movs	r2, #0
 8009e30:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 8009e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e3c:	1dfa      	adds	r2, r7, #7
 8009e3e:	7812      	ldrb	r2, [r2, #0]
 8009e40:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009e42:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009e46:	3301      	adds	r3, #1
 8009e48:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 8009e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e50:	1dba      	adds	r2, r7, #6
 8009e52:	7812      	ldrb	r2, [r2, #0]
 8009e54:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009e56:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009e60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e64:	2218      	movs	r2, #24
 8009e66:	2100      	movs	r1, #0
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f003 fbe3 	bl	800d634 <memset>
  rq.ogf = 0x3f;
 8009e6e:	233f      	movs	r3, #63	; 0x3f
 8009e70:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009e74:	230f      	movs	r3, #15
 8009e76:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009e7a:	f107 030c 	add.w	r3, r7, #12
 8009e7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009e82:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009e86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009e8a:	f107 030b 	add.w	r3, r7, #11
 8009e8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009e92:	2301      	movs	r3, #1
 8009e94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009e98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f000 f910 	bl	800a0c4 <hci_send_req>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	da01      	bge.n	8009eae <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8009eaa:	23ff      	movs	r3, #255	; 0xff
 8009eac:	e009      	b.n	8009ec2 <aci_hal_set_tx_power_level+0xb2>
  if (status) {
 8009eae:	f107 030b 	add.w	r3, r7, #11
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d003      	beq.n	8009ec0 <aci_hal_set_tx_power_level+0xb0>
    return status;
 8009eb8:	f107 030b 	add.w	r3, r7, #11
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	e000      	b.n	8009ec2 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d001      	beq.n	8009ee6 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e00c      	b.n	8009f00 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3302      	adds	r3, #2
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	461a      	mov	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009ef4:	3b03      	subs	r3, #3
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d001      	beq.n	8009efe <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8009efa:	2302      	movs	r3, #2
 8009efc:	e000      	b.n	8009f00 <verify_packet+0x34>
  
  return 0;      
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b0a6      	sub	sp, #152	; 0x98
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	607b      	str	r3, [r7, #4]
 8009f14:	4603      	mov	r3, r0
 8009f16:	81fb      	strh	r3, [r7, #14]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	81bb      	strh	r3, [r7, #12]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009f20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f28:	b21a      	sxth	r2, r3
 8009f2a:	89fb      	ldrh	r3, [r7, #14]
 8009f2c:	029b      	lsls	r3, r3, #10
 8009f2e:	b21b      	sxth	r3, r3
 8009f30:	4313      	orrs	r3, r2
 8009f32:	b21b      	sxth	r3, r3
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009f40:	f107 0318 	add.w	r3, r7, #24
 8009f44:	3301      	adds	r3, #1
 8009f46:	461a      	mov	r2, r3
 8009f48:	f107 0314 	add.w	r3, r7, #20
 8009f4c:	8819      	ldrh	r1, [r3, #0]
 8009f4e:	789b      	ldrb	r3, [r3, #2]
 8009f50:	8011      	strh	r1, [r2, #0]
 8009f52:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009f54:	f107 0318 	add.w	r3, r7, #24
 8009f58:	3304      	adds	r3, #4
 8009f5a:	7afa      	ldrb	r2, [r7, #11]
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f003 fb5a 	bl	800d618 <memcpy>
  
  if (hciContext.io.Send)
 8009f64:	4b08      	ldr	r3, [pc, #32]	; (8009f88 <send_cmd+0x7c>)
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d009      	beq.n	8009f80 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009f6c:	4b06      	ldr	r3, [pc, #24]	; (8009f88 <send_cmd+0x7c>)
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	7afa      	ldrb	r2, [r7, #11]
 8009f72:	b292      	uxth	r2, r2
 8009f74:	3204      	adds	r2, #4
 8009f76:	b291      	uxth	r1, r2
 8009f78:	f107 0218 	add.w	r2, r7, #24
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4798      	blx	r3
  }
}
 8009f80:	bf00      	nop
 8009f82:	3798      	adds	r7, #152	; 0x98
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20000740 	.word	0x20000740

08009f8c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8009f96:	e00a      	b.n	8009fae <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8009f98:	f107 030c 	add.w	r3, r7, #12
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6838      	ldr	r0, [r7, #0]
 8009fa0:	f000 faea 	bl	800a578 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fa51 	bl	800a450 <list_insert_head>
  while (!list_is_empty(src_list))
 8009fae:	6838      	ldr	r0, [r7, #0]
 8009fb0:	f000 fa2c 	bl	800a40c <list_is_empty>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d0ee      	beq.n	8009f98 <move_list+0xc>
  }
}
 8009fba:	bf00      	nop
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009fca:	e009      	b.n	8009fe0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009fcc:	1d3b      	adds	r3, r7, #4
 8009fce:	4619      	mov	r1, r3
 8009fd0:	4809      	ldr	r0, [pc, #36]	; (8009ff8 <free_event_list+0x34>)
 8009fd2:	f000 faaa 	bl	800a52a <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4808      	ldr	r0, [pc, #32]	; (8009ffc <free_event_list+0x38>)
 8009fdc:	f000 fa5e 	bl	800a49c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009fe0:	4806      	ldr	r0, [pc, #24]	; (8009ffc <free_event_list+0x38>)
 8009fe2:	f000 faf0 	bl	800a5c6 <list_get_size>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b04      	cmp	r3, #4
 8009fea:	ddef      	ble.n	8009fcc <free_event_list+0x8>
  }
}
 8009fec:	bf00      	nop
 8009fee:	bf00      	nop
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20009b58 	.word	0x20009b58
 8009ffc:	20009b50 	.word	0x20009b50

0800a000 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800a010:	4a18      	ldr	r2, [pc, #96]	; (800a074 <hci_init+0x74>)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800a016:	4818      	ldr	r0, [pc, #96]	; (800a078 <hci_init+0x78>)
 800a018:	f000 f9e8 	bl	800a3ec <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800a01c:	4817      	ldr	r0, [pc, #92]	; (800a07c <hci_init+0x7c>)
 800a01e:	f000 f9e5 	bl	800a3ec <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800a022:	f7f6 fc19 	bl	8000858 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a026:	2300      	movs	r3, #0
 800a028:	73fb      	strb	r3, [r7, #15]
 800a02a:	e00c      	b.n	800a046 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	228c      	movs	r2, #140	; 0x8c
 800a030:	fb02 f303 	mul.w	r3, r2, r3
 800a034:	4a12      	ldr	r2, [pc, #72]	; (800a080 <hci_init+0x80>)
 800a036:	4413      	add	r3, r2
 800a038:	4619      	mov	r1, r3
 800a03a:	480f      	ldr	r0, [pc, #60]	; (800a078 <hci_init+0x78>)
 800a03c:	f000 fa2e 	bl	800a49c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	3301      	adds	r3, #1
 800a044:	73fb      	strb	r3, [r7, #15]
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	2b09      	cmp	r3, #9
 800a04a:	d9ef      	bls.n	800a02c <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800a04c:	4b09      	ldr	r3, [pc, #36]	; (800a074 <hci_init+0x74>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <hci_init+0x5c>
 800a054:	4b07      	ldr	r3, [pc, #28]	; (800a074 <hci_init+0x74>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2000      	movs	r0, #0
 800a05a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800a05c:	4b05      	ldr	r3, [pc, #20]	; (800a074 <hci_init+0x74>)
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <hci_init+0x6a>
 800a064:	4b03      	ldr	r3, [pc, #12]	; (800a074 <hci_init+0x74>)
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	4798      	blx	r3
}
 800a06a:	bf00      	nop
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20000740 	.word	0x20000740
 800a078:	20009b50 	.word	0x20009b50
 800a07c:	20009b58 	.word	0x20009b58
 800a080:	200001c8 	.word	0x200001c8

0800a084 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a0b      	ldr	r2, [pc, #44]	; (800a0c0 <hci_register_io_bus+0x3c>)
 800a092:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	4a09      	ldr	r2, [pc, #36]	; (800a0c0 <hci_register_io_bus+0x3c>)
 800a09a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	4a07      	ldr	r2, [pc, #28]	; (800a0c0 <hci_register_io_bus+0x3c>)
 800a0a2:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	4a05      	ldr	r2, [pc, #20]	; (800a0c0 <hci_register_io_bus+0x3c>)
 800a0aa:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	4a03      	ldr	r2, [pc, #12]	; (800a0c0 <hci_register_io_bus+0x3c>)
 800a0b2:	6093      	str	r3, [r2, #8]
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	20000740 	.word	0x20000740

0800a0c4 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08e      	sub	sp, #56	; 0x38
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	885b      	ldrh	r3, [r3, #2]
 800a0d4:	b21b      	sxth	r3, r3
 800a0d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0da:	b21a      	sxth	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	881b      	ldrh	r3, [r3, #0]
 800a0e0:	029b      	lsls	r3, r3, #10
 800a0e2:	b21b      	sxth	r3, r3
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	b21b      	sxth	r3, r3
 800a0e8:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a0ee:	f107 0308 	add.w	r3, r7, #8
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 f97a 	bl	800a3ec <list_init_head>

  free_event_list();
 800a0f8:	f7ff ff64 	bl	8009fc4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	8818      	ldrh	r0, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	8859      	ldrh	r1, [r3, #2]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	f7ff fefd 	bl	8009f0c <send_cmd>
  
  if (async)
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <hci_send_req+0x58>
  {
    return 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	e0e5      	b.n	800a2e8 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a11c:	f7f7 ffd4 	bl	80020c8 <HAL_GetTick>
 800a120:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a122:	f7f7 ffd1 	bl	80020c8 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a130:	f200 80b6 	bhi.w	800a2a0 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a134:	486e      	ldr	r0, [pc, #440]	; (800a2f0 <hci_send_req+0x22c>)
 800a136:	f000 f969 	bl	800a40c <list_is_empty>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d000      	beq.n	800a142 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a140:	e7ef      	b.n	800a122 <hci_send_req+0x5e>
      {
        break;
 800a142:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a144:	f107 0310 	add.w	r3, r7, #16
 800a148:	4619      	mov	r1, r3
 800a14a:	4869      	ldr	r0, [pc, #420]	; (800a2f0 <hci_send_req+0x22c>)
 800a14c:	f000 f9ed 	bl	800a52a <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	3308      	adds	r3, #8
 800a154:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	d17b      	bne.n	800a256 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800a15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a160:	3301      	adds	r3, #1
 800a162:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	3308      	adds	r3, #8
 800a168:	3303      	adds	r3, #3
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a172:	3b03      	subs	r3, #3
 800a174:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	2b3e      	cmp	r3, #62	; 0x3e
 800a17c:	d04d      	beq.n	800a21a <hci_send_req+0x156>
 800a17e:	2b3e      	cmp	r3, #62	; 0x3e
 800a180:	dc6b      	bgt.n	800a25a <hci_send_req+0x196>
 800a182:	2b10      	cmp	r3, #16
 800a184:	f000 808e 	beq.w	800a2a4 <hci_send_req+0x1e0>
 800a188:	2b10      	cmp	r3, #16
 800a18a:	dc66      	bgt.n	800a25a <hci_send_req+0x196>
 800a18c:	2b0e      	cmp	r3, #14
 800a18e:	d024      	beq.n	800a1da <hci_send_req+0x116>
 800a190:	2b0f      	cmp	r3, #15
 800a192:	d162      	bne.n	800a25a <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	885b      	ldrh	r3, [r3, #2]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	f040 8081 	bne.w	800a2a8 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	2b0f      	cmp	r3, #15
 800a1ac:	d004      	beq.n	800a1b8 <hci_send_req+0xf4>
          if (cs->status) {
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d053      	beq.n	800a25e <hci_send_req+0x19a>
            goto failed;
 800a1b6:	e07a      	b.n	800a2ae <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	695a      	ldr	r2, [r3, #20]
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	bf28      	it	cs
 800a1c2:	461a      	movcs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6918      	ldr	r0, [r3, #16]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1d4:	f003 fa20 	bl	800d618 <memcpy>
        goto done;
 800a1d8:	e07a      	b.n	800a2d0 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d15f      	bne.n	800a2ac <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	3303      	adds	r3, #3
 800a1f0:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	3b03      	subs	r3, #3
 800a1f6:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	695a      	ldr	r2, [r3, #20]
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	bf28      	it	cs
 800a202:	461a      	movcs	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6918      	ldr	r0, [r3, #16]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	461a      	mov	r2, r3
 800a212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a214:	f003 fa00 	bl	800d618 <memcpy>
        goto done;
 800a218:	e05a      	b.n	800a2d0 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d11a      	bne.n	800a262 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	3b01      	subs	r3, #1
 800a230:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	695a      	ldr	r2, [r3, #20]
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	429a      	cmp	r2, r3
 800a23a:	bf28      	it	cs
 800a23c:	461a      	movcs	r2, r3
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6918      	ldr	r0, [r3, #16]
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	1c59      	adds	r1, r3, #1
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	461a      	mov	r2, r3
 800a250:	f003 f9e2 	bl	800d618 <memcpy>
        goto done;
 800a254:	e03c      	b.n	800a2d0 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800a256:	bf00      	nop
 800a258:	e004      	b.n	800a264 <hci_send_req+0x1a0>
        break;
 800a25a:	bf00      	nop
 800a25c:	e002      	b.n	800a264 <hci_send_req+0x1a0>
          break;
 800a25e:	bf00      	nop
 800a260:	e000      	b.n	800a264 <hci_send_req+0x1a0>
          break;
 800a262:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a264:	4823      	ldr	r0, [pc, #140]	; (800a2f4 <hci_send_req+0x230>)
 800a266:	f000 f8d1 	bl	800a40c <list_is_empty>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00d      	beq.n	800a28c <hci_send_req+0x1c8>
 800a270:	481f      	ldr	r0, [pc, #124]	; (800a2f0 <hci_send_req+0x22c>)
 800a272:	f000 f8cb 	bl	800a40c <list_is_empty>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d007      	beq.n	800a28c <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	4619      	mov	r1, r3
 800a280:	481c      	ldr	r0, [pc, #112]	; (800a2f4 <hci_send_req+0x230>)
 800a282:	f000 f90b 	bl	800a49c <list_insert_tail>
      hciReadPacket=NULL;
 800a286:	2300      	movs	r3, #0
 800a288:	613b      	str	r3, [r7, #16]
 800a28a:	e008      	b.n	800a29e <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	f107 0308 	add.w	r3, r7, #8
 800a292:	4611      	mov	r1, r2
 800a294:	4618      	mov	r0, r3
 800a296:	f000 f901 	bl	800a49c <list_insert_tail>
      hciReadPacket=NULL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	613b      	str	r3, [r7, #16]
  {
 800a29e:	e73d      	b.n	800a11c <hci_send_req+0x58>
        goto failed;
 800a2a0:	bf00      	nop
 800a2a2:	e004      	b.n	800a2ae <hci_send_req+0x1ea>
        goto failed;
 800a2a4:	bf00      	nop
 800a2a6:	e002      	b.n	800a2ae <hci_send_req+0x1ea>
          goto failed;
 800a2a8:	bf00      	nop
 800a2aa:	e000      	b.n	800a2ae <hci_send_req+0x1ea>
          goto failed;
 800a2ac:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d004      	beq.n	800a2be <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	480e      	ldr	r0, [pc, #56]	; (800a2f4 <hci_send_req+0x230>)
 800a2ba:	f000 f8c9 	bl	800a450 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a2be:	f107 0308 	add.w	r3, r7, #8
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	480a      	ldr	r0, [pc, #40]	; (800a2f0 <hci_send_req+0x22c>)
 800a2c6:	f7ff fe61 	bl	8009f8c <move_list>

  return -1;
 800a2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ce:	e00b      	b.n	800a2e8 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4807      	ldr	r0, [pc, #28]	; (800a2f4 <hci_send_req+0x230>)
 800a2d6:	f000 f8bb 	bl	800a450 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a2da:	f107 0308 	add.w	r3, r7, #8
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4803      	ldr	r0, [pc, #12]	; (800a2f0 <hci_send_req+0x22c>)
 800a2e2:	f7ff fe53 	bl	8009f8c <move_list>

  return 0;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3738      	adds	r7, #56	; 0x38
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	20009b58 	.word	0x20009b58
 800a2f4:	20009b50 	.word	0x20009b50

0800a2f8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a302:	e013      	b.n	800a32c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800a304:	1d3b      	adds	r3, r7, #4
 800a306:	4619      	mov	r1, r3
 800a308:	480e      	ldr	r0, [pc, #56]	; (800a344 <hci_user_evt_proc+0x4c>)
 800a30a:	f000 f90e 	bl	800a52a <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a30e:	4b0e      	ldr	r3, [pc, #56]	; (800a348 <hci_user_evt_proc+0x50>)
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d005      	beq.n	800a322 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800a316:	4b0c      	ldr	r3, [pc, #48]	; (800a348 <hci_user_evt_proc+0x50>)
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	3208      	adds	r2, #8
 800a31e:	4610      	mov	r0, r2
 800a320:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4619      	mov	r1, r3
 800a326:	4809      	ldr	r0, [pc, #36]	; (800a34c <hci_user_evt_proc+0x54>)
 800a328:	f000 f8b8 	bl	800a49c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800a32c:	4805      	ldr	r0, [pc, #20]	; (800a344 <hci_user_evt_proc+0x4c>)
 800a32e:	f000 f86d 	bl	800a40c <list_is_empty>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d0e5      	beq.n	800a304 <hci_user_evt_proc+0xc>
  }
}
 800a338:	bf00      	nop
 800a33a:	bf00      	nop
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20009b58 	.word	0x20009b58
 800a348:	20000740 	.word	0x20000740
 800a34c:	20009b50 	.word	0x20009b50

0800a350 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800a358:	2300      	movs	r3, #0
 800a35a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a360:	481f      	ldr	r0, [pc, #124]	; (800a3e0 <hci_notify_asynch_evt+0x90>)
 800a362:	f000 f853 	bl	800a40c <list_is_empty>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d132      	bne.n	800a3d2 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a36c:	f107 030c 	add.w	r3, r7, #12
 800a370:	4619      	mov	r1, r3
 800a372:	481b      	ldr	r0, [pc, #108]	; (800a3e0 <hci_notify_asynch_evt+0x90>)
 800a374:	f000 f8d9 	bl	800a52a <list_remove_head>
    
    if (hciContext.io.Receive)
 800a378:	4b1a      	ldr	r3, [pc, #104]	; (800a3e4 <hci_notify_asynch_evt+0x94>)
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d02a      	beq.n	800a3d6 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a380:	4b18      	ldr	r3, [pc, #96]	; (800a3e4 <hci_notify_asynch_evt+0x94>)
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	3208      	adds	r2, #8
 800a388:	2180      	movs	r1, #128	; 0x80
 800a38a:	4610      	mov	r0, r2
 800a38c:	4798      	blx	r3
 800a38e:	4603      	mov	r3, r0
 800a390:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800a392:	7cfb      	ldrb	r3, [r7, #19]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d016      	beq.n	800a3c6 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	7cfa      	ldrb	r2, [r7, #19]
 800a39c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff fd92 	bl	8009ecc <verify_packet>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d105      	bne.n	800a3ba <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	480d      	ldr	r0, [pc, #52]	; (800a3e8 <hci_notify_asynch_evt+0x98>)
 800a3b4:	f000 f872 	bl	800a49c <list_insert_tail>
 800a3b8:	e00d      	b.n	800a3d6 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4808      	ldr	r0, [pc, #32]	; (800a3e0 <hci_notify_asynch_evt+0x90>)
 800a3c0:	f000 f846 	bl	800a450 <list_insert_head>
 800a3c4:	e007      	b.n	800a3d6 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <hci_notify_asynch_evt+0x90>)
 800a3cc:	f000 f840 	bl	800a450 <list_insert_head>
 800a3d0:	e001      	b.n	800a3d6 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a3d6:	697b      	ldr	r3, [r7, #20]
  
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	20009b50 	.word	0x20009b50
 800a3e4:	20000740 	.word	0x20000740
 800a3e8:	20009b58 	.word	0x20009b58

0800a3ec <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	605a      	str	r2, [r3, #4]
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a414:	f3ef 8310 	mrs	r3, PRIMASK
 800a418:	60fb      	str	r3, [r7, #12]
  return(result);
 800a41a:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a41c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a41e:	b672      	cpsid	i
}
 800a420:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d102      	bne.n	800a432 <list_is_empty+0x26>
  {
    return_value = 1;
 800a42c:	2301      	movs	r3, #1
 800a42e:	75fb      	strb	r3, [r7, #23]
 800a430:	e001      	b.n	800a436 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	75fb      	strb	r3, [r7, #23]
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	f383 8810 	msr	PRIMASK, r3
}
 800a440:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
}
 800a444:	4618      	mov	r0, r3
 800a446:	371c      	adds	r7, #28
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a45a:	f3ef 8310 	mrs	r3, PRIMASK
 800a45e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a460:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a462:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a464:	b672      	cpsid	i
}
 800a466:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	605a      	str	r2, [r3, #4]
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	f383 8810 	msr	PRIMASK, r3
}
 800a48e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a490:	bf00      	nop
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a6:	f3ef 8310 	mrs	r3, PRIMASK
 800a4aa:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4b0:	b672      	cpsid	i
}
 800a4b2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	601a      	str	r2, [r3, #0]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	f383 8810 	msr	PRIMASK, r3
}
 800a4da:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a4dc:	bf00      	nop
 800a4de:	371c      	adds	r7, #28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a4f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4fa:	b672      	cpsid	i
}
 800a4fc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	6812      	ldr	r2, [r2, #0]
 800a506:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	6852      	ldr	r2, [r2, #4]
 800a510:	605a      	str	r2, [r3, #4]
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f383 8810 	msr	PRIMASK, r3
}
 800a51c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a51e:	bf00      	nop
 800a520:	371c      	adds	r7, #28
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b086      	sub	sp, #24
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a534:	f3ef 8310 	mrs	r3, PRIMASK
 800a538:	60fb      	str	r3, [r7, #12]
  return(result);
 800a53a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a53c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a53e:	b672      	cpsid	i
}
 800a540:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4618      	mov	r0, r3
 800a550:	f7ff ffca 	bl	800a4e8 <list_remove_node>
  (*node)->next = NULL;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2200      	movs	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2200      	movs	r2, #0
 800a562:	605a      	str	r2, [r3, #4]
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f383 8810 	msr	PRIMASK, r3
}
 800a56e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a570:	bf00      	nop
 800a572:	3718      	adds	r7, #24
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a582:	f3ef 8310 	mrs	r3, PRIMASK
 800a586:	60fb      	str	r3, [r7, #12]
  return(result);
 800a588:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a58a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a58c:	b672      	cpsid	i
}
 800a58e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff ffa3 	bl	800a4e8 <list_remove_node>
  (*node)->next = NULL;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	605a      	str	r2, [r3, #4]
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f383 8810 	msr	PRIMASK, r3
}
 800a5bc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a5be:	bf00      	nop
 800a5c0:	3718      	adds	r7, #24
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b089      	sub	sp, #36	; 0x24
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  int size = 0;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5d6:	613b      	str	r3, [r7, #16]
  return(result);
 800a5d8:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a5da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5dc:	b672      	cpsid	i
}
 800a5de:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a5e6:	e005      	b.n	800a5f4 <list_get_size+0x2e>
  {
    size++;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d1f5      	bne.n	800a5e8 <list_get_size+0x22>
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f383 8810 	msr	PRIMASK, r3
}
 800a606:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800a608:	69fb      	ldr	r3, [r7, #28]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3724      	adds	r7, #36	; 0x24
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
	...

0800a618 <__NVIC_SetPriority>:
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	4603      	mov	r3, r0
 800a620:	6039      	str	r1, [r7, #0]
 800a622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	db0a      	blt.n	800a642 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	490c      	ldr	r1, [pc, #48]	; (800a664 <__NVIC_SetPriority+0x4c>)
 800a632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a636:	0112      	lsls	r2, r2, #4
 800a638:	b2d2      	uxtb	r2, r2
 800a63a:	440b      	add	r3, r1
 800a63c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a640:	e00a      	b.n	800a658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	b2da      	uxtb	r2, r3
 800a646:	4908      	ldr	r1, [pc, #32]	; (800a668 <__NVIC_SetPriority+0x50>)
 800a648:	79fb      	ldrb	r3, [r7, #7]
 800a64a:	f003 030f 	and.w	r3, r3, #15
 800a64e:	3b04      	subs	r3, #4
 800a650:	0112      	lsls	r2, r2, #4
 800a652:	b2d2      	uxtb	r2, r2
 800a654:	440b      	add	r3, r1
 800a656:	761a      	strb	r2, [r3, #24]
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	e000e100 	.word	0xe000e100
 800a668:	e000ed00 	.word	0xe000ed00

0800a66c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a670:	4b05      	ldr	r3, [pc, #20]	; (800a688 <SysTick_Handler+0x1c>)
 800a672:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a674:	f001 fe10 	bl	800c298 <xTaskGetSchedulerState>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d001      	beq.n	800a682 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a67e:	f002 fd23 	bl	800d0c8 <xPortSysTickHandler>
  }
}
 800a682:	bf00      	nop
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	e000e010 	.word	0xe000e010

0800a68c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a68c:	b580      	push	{r7, lr}
 800a68e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a690:	2100      	movs	r1, #0
 800a692:	f06f 0004 	mvn.w	r0, #4
 800a696:	f7ff ffbf 	bl	800a618 <__NVIC_SetPriority>
#endif
}
 800a69a:	bf00      	nop
 800a69c:	bd80      	pop	{r7, pc}
	...

0800a6a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6a6:	f3ef 8305 	mrs	r3, IPSR
 800a6aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a6ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a6b2:	f06f 0305 	mvn.w	r3, #5
 800a6b6:	607b      	str	r3, [r7, #4]
 800a6b8:	e00c      	b.n	800a6d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a6ba:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <osKernelInitialize+0x44>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d105      	bne.n	800a6ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a6c2:	4b08      	ldr	r3, [pc, #32]	; (800a6e4 <osKernelInitialize+0x44>)
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	607b      	str	r3, [r7, #4]
 800a6cc:	e002      	b.n	800a6d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6d4:	687b      	ldr	r3, [r7, #4]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	20000760 	.word	0x20000760

0800a6e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6ee:	f3ef 8305 	mrs	r3, IPSR
 800a6f2:	603b      	str	r3, [r7, #0]
  return(result);
 800a6f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6fa:	f06f 0305 	mvn.w	r3, #5
 800a6fe:	607b      	str	r3, [r7, #4]
 800a700:	e010      	b.n	800a724 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a702:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <osKernelStart+0x48>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d109      	bne.n	800a71e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a70a:	f7ff ffbf 	bl	800a68c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a70e:	4b08      	ldr	r3, [pc, #32]	; (800a730 <osKernelStart+0x48>)
 800a710:	2202      	movs	r2, #2
 800a712:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a714:	f001 f912 	bl	800b93c <vTaskStartScheduler>
      stat = osOK;
 800a718:	2300      	movs	r3, #0
 800a71a:	607b      	str	r3, [r7, #4]
 800a71c:	e002      	b.n	800a724 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a71e:	f04f 33ff 	mov.w	r3, #4294967295
 800a722:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a724:	687b      	ldr	r3, [r7, #4]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20000760 	.word	0x20000760

0800a734 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4a07      	ldr	r2, [pc, #28]	; (800a760 <vApplicationGetIdleTaskMemory+0x2c>)
 800a744:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	4a06      	ldr	r2, [pc, #24]	; (800a764 <vApplicationGetIdleTaskMemory+0x30>)
 800a74a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2280      	movs	r2, #128	; 0x80
 800a750:	601a      	str	r2, [r3, #0]
}
 800a752:	bf00      	nop
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	20000764 	.word	0x20000764
 800a764:	200007d0 	.word	0x200007d0

0800a768 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4a07      	ldr	r2, [pc, #28]	; (800a794 <vApplicationGetTimerTaskMemory+0x2c>)
 800a778:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	4a06      	ldr	r2, [pc, #24]	; (800a798 <vApplicationGetTimerTaskMemory+0x30>)
 800a77e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a786:	601a      	str	r2, [r3, #0]
}
 800a788:	bf00      	nop
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	200009d0 	.word	0x200009d0
 800a798:	20000a3c 	.word	0x20000a3c

0800a79c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f103 0208 	add.w	r2, r3, #8
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f103 0208 	add.w	r2, r3, #8
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f103 0208 	add.w	r2, r3, #8
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b085      	sub	sp, #20
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	1c5a      	adds	r2, r3, #1
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	601a      	str	r2, [r3, #0]
}
 800a832:	bf00      	nop
 800a834:	3714      	adds	r7, #20
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr

0800a83e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a854:	d103      	bne.n	800a85e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	60fb      	str	r3, [r7, #12]
 800a85c:	e00c      	b.n	800a878 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	3308      	adds	r3, #8
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e002      	b.n	800a86c <vListInsert+0x2e>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68ba      	ldr	r2, [r7, #8]
 800a874:	429a      	cmp	r2, r3
 800a876:	d2f6      	bcs.n	800a866 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]
}
 800a8a4:	bf00      	nop
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	6892      	ldr	r2, [r2, #8]
 800a8c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	6852      	ldr	r2, [r2, #4]
 800a8d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d103      	bne.n	800a8e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	1e5a      	subs	r2, r3, #1
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d10a      	bne.n	800a92e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a92a:	bf00      	nop
 800a92c:	e7fe      	b.n	800a92c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a92e:	f002 fb39 	bl	800cfa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a93a:	68f9      	ldr	r1, [r7, #12]
 800a93c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a93e:	fb01 f303 	mul.w	r3, r1, r3
 800a942:	441a      	add	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a95e:	3b01      	subs	r3, #1
 800a960:	68f9      	ldr	r1, [r7, #12]
 800a962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a964:	fb01 f303 	mul.w	r3, r1, r3
 800a968:	441a      	add	r2, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	22ff      	movs	r2, #255	; 0xff
 800a972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	22ff      	movs	r2, #255	; 0xff
 800a97a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d114      	bne.n	800a9ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d01a      	beq.n	800a9c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	3310      	adds	r3, #16
 800a990:	4618      	mov	r0, r3
 800a992:	f001 fa79 	bl	800be88 <xTaskRemoveFromEventList>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d012      	beq.n	800a9c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a99c:	4b0c      	ldr	r3, [pc, #48]	; (800a9d0 <xQueueGenericReset+0xcc>)
 800a99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	e009      	b.n	800a9c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	3310      	adds	r3, #16
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7ff fef2 	bl	800a79c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	3324      	adds	r3, #36	; 0x24
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff feed 	bl	800a79c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a9c2:	f002 fb1f 	bl	800d004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a9c6:	2301      	movs	r3, #1
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	e000ed04 	.word	0xe000ed04

0800a9d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08e      	sub	sp, #56	; 0x38
 800a9d8:	af02      	add	r7, sp, #8
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10a      	bne.n	800a9fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9fa:	bf00      	nop
 800a9fc:	e7fe      	b.n	800a9fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10a      	bne.n	800aa1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa16:	bf00      	nop
 800aa18:	e7fe      	b.n	800aa18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <xQueueGenericCreateStatic+0x52>
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d001      	beq.n	800aa2a <xQueueGenericCreateStatic+0x56>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e000      	b.n	800aa2c <xQueueGenericCreateStatic+0x58>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	623b      	str	r3, [r7, #32]
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d102      	bne.n	800aa52 <xQueueGenericCreateStatic+0x7e>
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <xQueueGenericCreateStatic+0x82>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e000      	b.n	800aa58 <xQueueGenericCreateStatic+0x84>
 800aa56:	2300      	movs	r3, #0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	61fb      	str	r3, [r7, #28]
}
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa72:	2350      	movs	r3, #80	; 0x50
 800aa74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b50      	cmp	r3, #80	; 0x50
 800aa7a:	d00a      	beq.n	800aa92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	61bb      	str	r3, [r7, #24]
}
 800aa8e:	bf00      	nop
 800aa90:	e7fe      	b.n	800aa90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00d      	beq.n	800aaba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aaa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	4613      	mov	r3, r2
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	68b9      	ldr	r1, [r7, #8]
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 f805 	bl	800aac4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3730      	adds	r7, #48	; 0x30
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d103      	bne.n	800aae0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	e002      	b.n	800aae6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	69b8      	ldr	r0, [r7, #24]
 800aaf6:	f7ff ff05 	bl	800a904 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	78fa      	ldrb	r2, [r7, #3]
 800aafe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab02:	bf00      	nop
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08e      	sub	sp, #56	; 0x38
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10a      	bne.n	800ab3e <xQueueGenericSend+0x32>
	__asm volatile
 800ab28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab3a:	bf00      	nop
 800ab3c:	e7fe      	b.n	800ab3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d103      	bne.n	800ab4c <xQueueGenericSend+0x40>
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <xQueueGenericSend+0x44>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e000      	b.n	800ab52 <xQueueGenericSend+0x46>
 800ab50:	2300      	movs	r3, #0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10a      	bne.n	800ab6c <xQueueGenericSend+0x60>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab68:	bf00      	nop
 800ab6a:	e7fe      	b.n	800ab6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d103      	bne.n	800ab7a <xQueueGenericSend+0x6e>
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d101      	bne.n	800ab7e <xQueueGenericSend+0x72>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e000      	b.n	800ab80 <xQueueGenericSend+0x74>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10a      	bne.n	800ab9a <xQueueGenericSend+0x8e>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	623b      	str	r3, [r7, #32]
}
 800ab96:	bf00      	nop
 800ab98:	e7fe      	b.n	800ab98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab9a:	f001 fb7d 	bl	800c298 <xTaskGetSchedulerState>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <xQueueGenericSend+0x9e>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <xQueueGenericSend+0xa2>
 800abaa:	2301      	movs	r3, #1
 800abac:	e000      	b.n	800abb0 <xQueueGenericSend+0xa4>
 800abae:	2300      	movs	r3, #0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <xQueueGenericSend+0xbe>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	61fb      	str	r3, [r7, #28]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abca:	f002 f9eb 	bl	800cfa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d302      	bcc.n	800abe0 <xQueueGenericSend+0xd4>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d129      	bne.n	800ac34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	68b9      	ldr	r1, [r7, #8]
 800abe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abe6:	f000 fa0b 	bl	800b000 <prvCopyDataToQueue>
 800abea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d010      	beq.n	800ac16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf6:	3324      	adds	r3, #36	; 0x24
 800abf8:	4618      	mov	r0, r3
 800abfa:	f001 f945 	bl	800be88 <xTaskRemoveFromEventList>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d013      	beq.n	800ac2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac04:	4b3f      	ldr	r3, [pc, #252]	; (800ad04 <xQueueGenericSend+0x1f8>)
 800ac06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac0a:	601a      	str	r2, [r3, #0]
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	e00a      	b.n	800ac2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d007      	beq.n	800ac2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac1c:	4b39      	ldr	r3, [pc, #228]	; (800ad04 <xQueueGenericSend+0x1f8>)
 800ac1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac2c:	f002 f9ea 	bl	800d004 <vPortExitCritical>
				return pdPASS;
 800ac30:	2301      	movs	r3, #1
 800ac32:	e063      	b.n	800acfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d103      	bne.n	800ac42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac3a:	f002 f9e3 	bl	800d004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e05c      	b.n	800acfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d106      	bne.n	800ac56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac48:	f107 0314 	add.w	r3, r7, #20
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f001 f97f 	bl	800bf50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac52:	2301      	movs	r3, #1
 800ac54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac56:	f002 f9d5 	bl	800d004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac5a:	f000 fed7 	bl	800ba0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac5e:	f002 f9a1 	bl	800cfa4 <vPortEnterCritical>
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac68:	b25b      	sxtb	r3, r3
 800ac6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6e:	d103      	bne.n	800ac78 <xQueueGenericSend+0x16c>
 800ac70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac7e:	b25b      	sxtb	r3, r3
 800ac80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac84:	d103      	bne.n	800ac8e <xQueueGenericSend+0x182>
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac8e:	f002 f9b9 	bl	800d004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac92:	1d3a      	adds	r2, r7, #4
 800ac94:	f107 0314 	add.w	r3, r7, #20
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 f96e 	bl	800bf7c <xTaskCheckForTimeOut>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d124      	bne.n	800acf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aca8:	f000 faa2 	bl	800b1f0 <prvIsQueueFull>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d018      	beq.n	800ace4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	3310      	adds	r3, #16
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	4611      	mov	r1, r2
 800acba:	4618      	mov	r0, r3
 800acbc:	f001 f894 	bl	800bde8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800acc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acc2:	f000 fa2d 	bl	800b120 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800acc6:	f000 feaf 	bl	800ba28 <xTaskResumeAll>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	f47f af7c 	bne.w	800abca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800acd2:	4b0c      	ldr	r3, [pc, #48]	; (800ad04 <xQueueGenericSend+0x1f8>)
 800acd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	e772      	b.n	800abca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ace4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ace6:	f000 fa1b 	bl	800b120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acea:	f000 fe9d 	bl	800ba28 <xTaskResumeAll>
 800acee:	e76c      	b.n	800abca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800acf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acf2:	f000 fa15 	bl	800b120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acf6:	f000 fe97 	bl	800ba28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800acfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3738      	adds	r7, #56	; 0x38
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	e000ed04 	.word	0xe000ed04

0800ad08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b090      	sub	sp, #64	; 0x40
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10a      	bne.n	800ad36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d103      	bne.n	800ad44 <xQueueGenericSendFromISR+0x3c>
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <xQueueGenericSendFromISR+0x40>
 800ad44:	2301      	movs	r3, #1
 800ad46:	e000      	b.n	800ad4a <xQueueGenericSendFromISR+0x42>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10a      	bne.n	800ad64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad60:	bf00      	nop
 800ad62:	e7fe      	b.n	800ad62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d103      	bne.n	800ad72 <xQueueGenericSendFromISR+0x6a>
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d101      	bne.n	800ad76 <xQueueGenericSendFromISR+0x6e>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e000      	b.n	800ad78 <xQueueGenericSendFromISR+0x70>
 800ad76:	2300      	movs	r3, #0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10a      	bne.n	800ad92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	623b      	str	r3, [r7, #32]
}
 800ad8e:	bf00      	nop
 800ad90:	e7fe      	b.n	800ad90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad92:	f002 f9e9 	bl	800d168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad96:	f3ef 8211 	mrs	r2, BASEPRI
 800ad9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9e:	f383 8811 	msr	BASEPRI, r3
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	f3bf 8f4f 	dsb	sy
 800adaa:	61fa      	str	r2, [r7, #28]
 800adac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800adae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adba:	429a      	cmp	r2, r3
 800adbc:	d302      	bcc.n	800adc4 <xQueueGenericSendFromISR+0xbc>
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d12f      	bne.n	800ae24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800adc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adda:	f000 f911 	bl	800b000 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800adde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ade2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade6:	d112      	bne.n	800ae0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adec:	2b00      	cmp	r3, #0
 800adee:	d016      	beq.n	800ae1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf2:	3324      	adds	r3, #36	; 0x24
 800adf4:	4618      	mov	r0, r3
 800adf6:	f001 f847 	bl	800be88 <xTaskRemoveFromEventList>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00e      	beq.n	800ae1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00b      	beq.n	800ae1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2201      	movs	r2, #1
 800ae0a:	601a      	str	r2, [r3, #0]
 800ae0c:	e007      	b.n	800ae1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae12:	3301      	adds	r3, #1
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	b25a      	sxtb	r2, r3
 800ae18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ae22:	e001      	b.n	800ae28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae24:	2300      	movs	r3, #0
 800ae26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3740      	adds	r7, #64	; 0x40
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
	...

0800ae40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08c      	sub	sp, #48	; 0x30
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10a      	bne.n	800ae70 <xQueueReceive+0x30>
	__asm volatile
 800ae5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	623b      	str	r3, [r7, #32]
}
 800ae6c:	bf00      	nop
 800ae6e:	e7fe      	b.n	800ae6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d103      	bne.n	800ae7e <xQueueReceive+0x3e>
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d101      	bne.n	800ae82 <xQueueReceive+0x42>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e000      	b.n	800ae84 <xQueueReceive+0x44>
 800ae82:	2300      	movs	r3, #0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <xQueueReceive+0x5e>
	__asm volatile
 800ae88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	61fb      	str	r3, [r7, #28]
}
 800ae9a:	bf00      	nop
 800ae9c:	e7fe      	b.n	800ae9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae9e:	f001 f9fb 	bl	800c298 <xTaskGetSchedulerState>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d102      	bne.n	800aeae <xQueueReceive+0x6e>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <xQueueReceive+0x72>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e000      	b.n	800aeb4 <xQueueReceive+0x74>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10a      	bne.n	800aece <xQueueReceive+0x8e>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	61bb      	str	r3, [r7, #24]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aece:	f002 f869 	bl	800cfa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d01f      	beq.n	800af1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aede:	68b9      	ldr	r1, [r7, #8]
 800aee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aee2:	f000 f8f7 	bl	800b0d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	1e5a      	subs	r2, r3, #1
 800aeea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00f      	beq.n	800af16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef8:	3310      	adds	r3, #16
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 ffc4 	bl	800be88 <xTaskRemoveFromEventList>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d007      	beq.n	800af16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af06:	4b3d      	ldr	r3, [pc, #244]	; (800affc <xQueueReceive+0x1bc>)
 800af08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af16:	f002 f875 	bl	800d004 <vPortExitCritical>
				return pdPASS;
 800af1a:	2301      	movs	r3, #1
 800af1c:	e069      	b.n	800aff2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d103      	bne.n	800af2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af24:	f002 f86e 	bl	800d004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af28:	2300      	movs	r3, #0
 800af2a:	e062      	b.n	800aff2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d106      	bne.n	800af40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af32:	f107 0310 	add.w	r3, r7, #16
 800af36:	4618      	mov	r0, r3
 800af38:	f001 f80a 	bl	800bf50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af3c:	2301      	movs	r3, #1
 800af3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af40:	f002 f860 	bl	800d004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af44:	f000 fd62 	bl	800ba0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af48:	f002 f82c 	bl	800cfa4 <vPortEnterCritical>
 800af4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af52:	b25b      	sxtb	r3, r3
 800af54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af58:	d103      	bne.n	800af62 <xQueueReceive+0x122>
 800af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af68:	b25b      	sxtb	r3, r3
 800af6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6e:	d103      	bne.n	800af78 <xQueueReceive+0x138>
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af78:	f002 f844 	bl	800d004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af7c:	1d3a      	adds	r2, r7, #4
 800af7e:	f107 0310 	add.w	r3, r7, #16
 800af82:	4611      	mov	r1, r2
 800af84:	4618      	mov	r0, r3
 800af86:	f000 fff9 	bl	800bf7c <xTaskCheckForTimeOut>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d123      	bne.n	800afd8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af92:	f000 f917 	bl	800b1c4 <prvIsQueueEmpty>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d017      	beq.n	800afcc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	3324      	adds	r3, #36	; 0x24
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	4611      	mov	r1, r2
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 ff1f 	bl	800bde8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afac:	f000 f8b8 	bl	800b120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afb0:	f000 fd3a 	bl	800ba28 <xTaskResumeAll>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d189      	bne.n	800aece <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800afba:	4b10      	ldr	r3, [pc, #64]	; (800affc <xQueueReceive+0x1bc>)
 800afbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	e780      	b.n	800aece <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800afcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afce:	f000 f8a7 	bl	800b120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afd2:	f000 fd29 	bl	800ba28 <xTaskResumeAll>
 800afd6:	e77a      	b.n	800aece <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800afd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afda:	f000 f8a1 	bl	800b120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afde:	f000 fd23 	bl	800ba28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afe4:	f000 f8ee 	bl	800b1c4 <prvIsQueueEmpty>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	f43f af6f 	beq.w	800aece <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aff0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3730      	adds	r7, #48	; 0x30
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	e000ed04 	.word	0xe000ed04

0800b000 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b00c:	2300      	movs	r3, #0
 800b00e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b014:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10d      	bne.n	800b03a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d14d      	bne.n	800b0c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f001 f952 	bl	800c2d4 <xTaskPriorityDisinherit>
 800b030:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	609a      	str	r2, [r3, #8]
 800b038:	e043      	b.n	800b0c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d119      	bne.n	800b074 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6858      	ldr	r0, [r3, #4]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b048:	461a      	mov	r2, r3
 800b04a:	68b9      	ldr	r1, [r7, #8]
 800b04c:	f002 fae4 	bl	800d618 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b058:	441a      	add	r2, r3
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	429a      	cmp	r2, r3
 800b068:	d32b      	bcc.n	800b0c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	605a      	str	r2, [r3, #4]
 800b072:	e026      	b.n	800b0c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68d8      	ldr	r0, [r3, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07c:	461a      	mov	r2, r3
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	f002 faca 	bl	800d618 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08c:	425b      	negs	r3, r3
 800b08e:	441a      	add	r2, r3
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	68da      	ldr	r2, [r3, #12]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d207      	bcs.n	800b0b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a8:	425b      	negs	r3, r3
 800b0aa:	441a      	add	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d105      	bne.n	800b0c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	1c5a      	adds	r2, r3, #1
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0ca:	697b      	ldr	r3, [r7, #20]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d018      	beq.n	800b118 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68da      	ldr	r2, [r3, #12]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ee:	441a      	add	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68da      	ldr	r2, [r3, #12]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d303      	bcc.n	800b108 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	68d9      	ldr	r1, [r3, #12]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b110:	461a      	mov	r2, r3
 800b112:	6838      	ldr	r0, [r7, #0]
 800b114:	f002 fa80 	bl	800d618 <memcpy>
	}
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b128:	f001 ff3c 	bl	800cfa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b132:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b134:	e011      	b.n	800b15a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d012      	beq.n	800b164 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	3324      	adds	r3, #36	; 0x24
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fea0 	bl	800be88 <xTaskRemoveFromEventList>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b14e:	f000 ff87 	bl	800c060 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	3b01      	subs	r3, #1
 800b156:	b2db      	uxtb	r3, r3
 800b158:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	dce9      	bgt.n	800b136 <prvUnlockQueue+0x16>
 800b162:	e000      	b.n	800b166 <prvUnlockQueue+0x46>
					break;
 800b164:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	22ff      	movs	r2, #255	; 0xff
 800b16a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b16e:	f001 ff49 	bl	800d004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b172:	f001 ff17 	bl	800cfa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b17c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b17e:	e011      	b.n	800b1a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d012      	beq.n	800b1ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3310      	adds	r3, #16
 800b18c:	4618      	mov	r0, r3
 800b18e:	f000 fe7b 	bl	800be88 <xTaskRemoveFromEventList>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b198:	f000 ff62 	bl	800c060 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b19c:	7bbb      	ldrb	r3, [r7, #14]
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b1a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	dce9      	bgt.n	800b180 <prvUnlockQueue+0x60>
 800b1ac:	e000      	b.n	800b1b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	22ff      	movs	r2, #255	; 0xff
 800b1b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1b8:	f001 ff24 	bl	800d004 <vPortExitCritical>
}
 800b1bc:	bf00      	nop
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b084      	sub	sp, #16
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1cc:	f001 feea 	bl	800cfa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d102      	bne.n	800b1de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	60fb      	str	r3, [r7, #12]
 800b1dc:	e001      	b.n	800b1e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1e2:	f001 ff0f 	bl	800d004 <vPortExitCritical>

	return xReturn;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1f8:	f001 fed4 	bl	800cfa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b204:	429a      	cmp	r2, r3
 800b206:	d102      	bne.n	800b20e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b208:	2301      	movs	r3, #1
 800b20a:	60fb      	str	r3, [r7, #12]
 800b20c:	e001      	b.n	800b212 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b212:	f001 fef7 	bl	800d004 <vPortExitCritical>

	return xReturn;
 800b216:	68fb      	ldr	r3, [r7, #12]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
 800b22e:	e014      	b.n	800b25a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b230:	4a0f      	ldr	r2, [pc, #60]	; (800b270 <vQueueAddToRegistry+0x50>)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10b      	bne.n	800b254 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b23c:	490c      	ldr	r1, [pc, #48]	; (800b270 <vQueueAddToRegistry+0x50>)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b246:	4a0a      	ldr	r2, [pc, #40]	; (800b270 <vQueueAddToRegistry+0x50>)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	00db      	lsls	r3, r3, #3
 800b24c:	4413      	add	r3, r2
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b252:	e006      	b.n	800b262 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3301      	adds	r3, #1
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2b0b      	cmp	r3, #11
 800b25e:	d9e7      	bls.n	800b230 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b260:	bf00      	nop
 800b262:	bf00      	nop
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20009b60 	.word	0x20009b60

0800b274 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b284:	f001 fe8e 	bl	800cfa4 <vPortEnterCritical>
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b28e:	b25b      	sxtb	r3, r3
 800b290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b294:	d103      	bne.n	800b29e <vQueueWaitForMessageRestricted+0x2a>
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2a4:	b25b      	sxtb	r3, r3
 800b2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2aa:	d103      	bne.n	800b2b4 <vQueueWaitForMessageRestricted+0x40>
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2b4:	f001 fea6 	bl	800d004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d106      	bne.n	800b2ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	3324      	adds	r3, #36	; 0x24
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	68b9      	ldr	r1, [r7, #8]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 fdb1 	bl	800be30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b2ce:	6978      	ldr	r0, [r7, #20]
 800b2d0:	f7ff ff26 	bl	800b120 <prvUnlockQueue>
	}
 800b2d4:	bf00      	nop
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b08e      	sub	sp, #56	; 0x38
 800b2e0:	af04      	add	r7, sp, #16
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d10a      	bne.n	800b306 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	623b      	str	r3, [r7, #32]
}
 800b302:	bf00      	nop
 800b304:	e7fe      	b.n	800b304 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10a      	bne.n	800b322 <xTaskCreateStatic+0x46>
	__asm volatile
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	61fb      	str	r3, [r7, #28]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b322:	236c      	movs	r3, #108	; 0x6c
 800b324:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	2b6c      	cmp	r3, #108	; 0x6c
 800b32a:	d00a      	beq.n	800b342 <xTaskCreateStatic+0x66>
	__asm volatile
 800b32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	61bb      	str	r3, [r7, #24]
}
 800b33e:	bf00      	nop
 800b340:	e7fe      	b.n	800b340 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b342:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b346:	2b00      	cmp	r3, #0
 800b348:	d01e      	beq.n	800b388 <xTaskCreateStatic+0xac>
 800b34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d01b      	beq.n	800b388 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b358:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	2202      	movs	r2, #2
 800b35e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b362:	2300      	movs	r3, #0
 800b364:	9303      	str	r3, [sp, #12]
 800b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b368:	9302      	str	r3, [sp, #8]
 800b36a:	f107 0314 	add.w	r3, r7, #20
 800b36e:	9301      	str	r3, [sp, #4]
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	68b9      	ldr	r1, [r7, #8]
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 f850 	bl	800b420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b382:	f000 f8e7 	bl	800b554 <prvAddNewTaskToReadyList>
 800b386:	e001      	b.n	800b38c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b388:	2300      	movs	r3, #0
 800b38a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b38c:	697b      	ldr	r3, [r7, #20]
	}
 800b38e:	4618      	mov	r0, r3
 800b390:	3728      	adds	r7, #40	; 0x28
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b396:	b580      	push	{r7, lr}
 800b398:	b08c      	sub	sp, #48	; 0x30
 800b39a:	af04      	add	r7, sp, #16
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	603b      	str	r3, [r7, #0]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b3a6:	88fb      	ldrh	r3, [r7, #6]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 ff1c 	bl	800d1e8 <pvPortMalloc>
 800b3b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00e      	beq.n	800b3d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b3b8:	206c      	movs	r0, #108	; 0x6c
 800b3ba:	f001 ff15 	bl	800d1e8 <pvPortMalloc>
 800b3be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	697a      	ldr	r2, [r7, #20]
 800b3ca:	631a      	str	r2, [r3, #48]	; 0x30
 800b3cc:	e005      	b.n	800b3da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3ce:	6978      	ldr	r0, [r7, #20]
 800b3d0:	f001 ffda 	bl	800d388 <vPortFree>
 800b3d4:	e001      	b.n	800b3da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d017      	beq.n	800b410 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3e8:	88fa      	ldrh	r2, [r7, #6]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	9302      	str	r3, [sp, #8]
 800b3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	68b9      	ldr	r1, [r7, #8]
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f000 f80e 	bl	800b420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b404:	69f8      	ldr	r0, [r7, #28]
 800b406:	f000 f8a5 	bl	800b554 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b40a:	2301      	movs	r3, #1
 800b40c:	61bb      	str	r3, [r7, #24]
 800b40e:	e002      	b.n	800b416 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b410:	f04f 33ff 	mov.w	r3, #4294967295
 800b414:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b416:	69bb      	ldr	r3, [r7, #24]
	}
 800b418:	4618      	mov	r0, r3
 800b41a:	3720      	adds	r7, #32
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b430:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	461a      	mov	r2, r3
 800b438:	21a5      	movs	r1, #165	; 0xa5
 800b43a:	f002 f8fb 	bl	800d634 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b448:	3b01      	subs	r3, #1
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	f023 0307 	bic.w	r3, r3, #7
 800b456:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00a      	beq.n	800b478 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	617b      	str	r3, [r7, #20]
}
 800b474:	bf00      	nop
 800b476:	e7fe      	b.n	800b476 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d01f      	beq.n	800b4be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b47e:	2300      	movs	r3, #0
 800b480:	61fb      	str	r3, [r7, #28]
 800b482:	e012      	b.n	800b4aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	4413      	add	r3, r2
 800b48a:	7819      	ldrb	r1, [r3, #0]
 800b48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	4413      	add	r3, r2
 800b492:	3334      	adds	r3, #52	; 0x34
 800b494:	460a      	mov	r2, r1
 800b496:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b498:	68ba      	ldr	r2, [r7, #8]
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	4413      	add	r3, r2
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d006      	beq.n	800b4b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	61fb      	str	r3, [r7, #28]
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	2b17      	cmp	r3, #23
 800b4ae:	d9e9      	bls.n	800b484 <prvInitialiseNewTask+0x64>
 800b4b0:	e000      	b.n	800b4b4 <prvInitialiseNewTask+0x94>
			{
				break;
 800b4b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800b4bc:	e003      	b.n	800b4c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c8:	2b37      	cmp	r3, #55	; 0x37
 800b4ca:	d901      	bls.n	800b4d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b4cc:	2337      	movs	r3, #55	; 0x37
 800b4ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	2200      	movs	r2, #0
 800b4e0:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7ff f978 	bl	800a7dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	3318      	adds	r3, #24
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff f973 	bl	800a7dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b50a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50e:	2200      	movs	r2, #0
 800b510:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b514:	2200      	movs	r2, #0
 800b516:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	2200      	movs	r2, #0
 800b51c:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	2200      	movs	r2, #0
 800b522:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	68f9      	ldr	r1, [r7, #12]
 800b532:	69b8      	ldr	r0, [r7, #24]
 800b534:	f001 fc08 	bl	800cd48 <pxPortInitialiseStack>
 800b538:	4602      	mov	r2, r0
 800b53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b548:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b54a:	bf00      	nop
 800b54c:	3720      	adds	r7, #32
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
	...

0800b554 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b55c:	f001 fd22 	bl	800cfa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b560:	4b2d      	ldr	r3, [pc, #180]	; (800b618 <prvAddNewTaskToReadyList+0xc4>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	4a2c      	ldr	r2, [pc, #176]	; (800b618 <prvAddNewTaskToReadyList+0xc4>)
 800b568:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b56a:	4b2c      	ldr	r3, [pc, #176]	; (800b61c <prvAddNewTaskToReadyList+0xc8>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d109      	bne.n	800b586 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b572:	4a2a      	ldr	r2, [pc, #168]	; (800b61c <prvAddNewTaskToReadyList+0xc8>)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b578:	4b27      	ldr	r3, [pc, #156]	; (800b618 <prvAddNewTaskToReadyList+0xc4>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d110      	bne.n	800b5a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b580:	f000 fd94 	bl	800c0ac <prvInitialiseTaskLists>
 800b584:	e00d      	b.n	800b5a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b586:	4b26      	ldr	r3, [pc, #152]	; (800b620 <prvAddNewTaskToReadyList+0xcc>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d109      	bne.n	800b5a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b58e:	4b23      	ldr	r3, [pc, #140]	; (800b61c <prvAddNewTaskToReadyList+0xc8>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b598:	429a      	cmp	r2, r3
 800b59a:	d802      	bhi.n	800b5a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b59c:	4a1f      	ldr	r2, [pc, #124]	; (800b61c <prvAddNewTaskToReadyList+0xc8>)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5a2:	4b20      	ldr	r3, [pc, #128]	; (800b624 <prvAddNewTaskToReadyList+0xd0>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	4a1e      	ldr	r2, [pc, #120]	; (800b624 <prvAddNewTaskToReadyList+0xd0>)
 800b5aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b5ac:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <prvAddNewTaskToReadyList+0xd0>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b8:	4b1b      	ldr	r3, [pc, #108]	; (800b628 <prvAddNewTaskToReadyList+0xd4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d903      	bls.n	800b5c8 <prvAddNewTaskToReadyList+0x74>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	4a18      	ldr	r2, [pc, #96]	; (800b628 <prvAddNewTaskToReadyList+0xd4>)
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4413      	add	r3, r2
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4a15      	ldr	r2, [pc, #84]	; (800b62c <prvAddNewTaskToReadyList+0xd8>)
 800b5d6:	441a      	add	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4610      	mov	r0, r2
 800b5e0:	f7ff f909 	bl	800a7f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5e4:	f001 fd0e 	bl	800d004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5e8:	4b0d      	ldr	r3, [pc, #52]	; (800b620 <prvAddNewTaskToReadyList+0xcc>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00e      	beq.n	800b60e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5f0:	4b0a      	ldr	r3, [pc, #40]	; (800b61c <prvAddNewTaskToReadyList+0xc8>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d207      	bcs.n	800b60e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5fe:	4b0c      	ldr	r3, [pc, #48]	; (800b630 <prvAddNewTaskToReadyList+0xdc>)
 800b600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b604:	601a      	str	r2, [r3, #0]
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	20001710 	.word	0x20001710
 800b61c:	2000123c 	.word	0x2000123c
 800b620:	2000171c 	.word	0x2000171c
 800b624:	2000172c 	.word	0x2000172c
 800b628:	20001718 	.word	0x20001718
 800b62c:	20001240 	.word	0x20001240
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b634:	b580      	push	{r7, lr}
 800b636:	b08a      	sub	sp, #40	; 0x28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b63e:	2300      	movs	r3, #0
 800b640:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10a      	bne.n	800b65e <vTaskDelayUntil+0x2a>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	617b      	str	r3, [r7, #20]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10a      	bne.n	800b67a <vTaskDelayUntil+0x46>
	__asm volatile
 800b664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b668:	f383 8811 	msr	BASEPRI, r3
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f3bf 8f4f 	dsb	sy
 800b674:	613b      	str	r3, [r7, #16]
}
 800b676:	bf00      	nop
 800b678:	e7fe      	b.n	800b678 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b67a:	4b2a      	ldr	r3, [pc, #168]	; (800b724 <vTaskDelayUntil+0xf0>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00a      	beq.n	800b698 <vTaskDelayUntil+0x64>
	__asm volatile
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	60fb      	str	r3, [r7, #12]
}
 800b694:	bf00      	nop
 800b696:	e7fe      	b.n	800b696 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b698:	f000 f9b8 	bl	800ba0c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b69c:	4b22      	ldr	r3, [pc, #136]	; (800b728 <vTaskDelayUntil+0xf4>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6a3a      	ldr	r2, [r7, #32]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d20b      	bcs.n	800b6ce <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	69fa      	ldr	r2, [r7, #28]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d211      	bcs.n	800b6e4 <vTaskDelayUntil+0xb0>
 800b6c0:	69fa      	ldr	r2, [r7, #28]
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d90d      	bls.n	800b6e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b6cc:	e00a      	b.n	800b6e4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	69fa      	ldr	r2, [r7, #28]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d303      	bcc.n	800b6e0 <vTaskDelayUntil+0xac>
 800b6d8:	69fa      	ldr	r2, [r7, #28]
 800b6da:	6a3b      	ldr	r3, [r7, #32]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d901      	bls.n	800b6e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	69fa      	ldr	r2, [r7, #28]
 800b6e8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d006      	beq.n	800b6fe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b6f0:	69fa      	ldr	r2, [r7, #28]
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 ff7d 	bl	800c5f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b6fe:	f000 f993 	bl	800ba28 <xTaskResumeAll>
 800b702:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d107      	bne.n	800b71a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b70a:	4b08      	ldr	r3, [pc, #32]	; (800b72c <vTaskDelayUntil+0xf8>)
 800b70c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b710:	601a      	str	r2, [r3, #0]
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b71a:	bf00      	nop
 800b71c:	3728      	adds	r7, #40	; 0x28
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	20001738 	.word	0x20001738
 800b728:	20001714 	.word	0x20001714
 800b72c:	e000ed04 	.word	0xe000ed04

0800b730 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b738:	f001 fc34 	bl	800cfa4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d102      	bne.n	800b748 <vTaskSuspend+0x18>
 800b742:	4b30      	ldr	r3, [pc, #192]	; (800b804 <vTaskSuspend+0xd4>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	e000      	b.n	800b74a <vTaskSuspend+0x1a>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3304      	adds	r3, #4
 800b750:	4618      	mov	r0, r3
 800b752:	f7ff f8ad 	bl	800a8b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d004      	beq.n	800b768 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3318      	adds	r3, #24
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff f8a4 	bl	800a8b0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	3304      	adds	r3, #4
 800b76c:	4619      	mov	r1, r3
 800b76e:	4826      	ldr	r0, [pc, #152]	; (800b808 <vTaskSuspend+0xd8>)
 800b770:	f7ff f841 	bl	800a7f6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d103      	bne.n	800b788 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b788:	f001 fc3c 	bl	800d004 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b78c:	4b1f      	ldr	r3, [pc, #124]	; (800b80c <vTaskSuspend+0xdc>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d005      	beq.n	800b7a0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b794:	f001 fc06 	bl	800cfa4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b798:	f000 fd5e 	bl	800c258 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b79c:	f001 fc32 	bl	800d004 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b7a0:	4b18      	ldr	r3, [pc, #96]	; (800b804 <vTaskSuspend+0xd4>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d127      	bne.n	800b7fa <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b7aa:	4b18      	ldr	r3, [pc, #96]	; (800b80c <vTaskSuspend+0xdc>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d017      	beq.n	800b7e2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b7b2:	4b17      	ldr	r3, [pc, #92]	; (800b810 <vTaskSuspend+0xe0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00a      	beq.n	800b7d0 <vTaskSuspend+0xa0>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	60bb      	str	r3, [r7, #8]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b7d0:	4b10      	ldr	r3, [pc, #64]	; (800b814 <vTaskSuspend+0xe4>)
 800b7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7d6:	601a      	str	r2, [r3, #0]
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7e0:	e00b      	b.n	800b7fa <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b7e2:	4b09      	ldr	r3, [pc, #36]	; (800b808 <vTaskSuspend+0xd8>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	4b0c      	ldr	r3, [pc, #48]	; (800b818 <vTaskSuspend+0xe8>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d103      	bne.n	800b7f6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b7ee:	4b05      	ldr	r3, [pc, #20]	; (800b804 <vTaskSuspend+0xd4>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	601a      	str	r2, [r3, #0]
	}
 800b7f4:	e001      	b.n	800b7fa <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b7f6:	f000 fa7f 	bl	800bcf8 <vTaskSwitchContext>
	}
 800b7fa:	bf00      	nop
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	2000123c 	.word	0x2000123c
 800b808:	200016fc 	.word	0x200016fc
 800b80c:	2000171c 	.word	0x2000171c
 800b810:	20001738 	.word	0x20001738
 800b814:	e000ed04 	.word	0xe000ed04
 800b818:	20001710 	.word	0x20001710

0800b81c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b81c:	b480      	push	{r7}
 800b81e:	b087      	sub	sp, #28
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b824:	2300      	movs	r3, #0
 800b826:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10a      	bne.n	800b848 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	60fb      	str	r3, [r7, #12]
}
 800b844:	bf00      	nop
 800b846:	e7fe      	b.n	800b846 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	695b      	ldr	r3, [r3, #20]
 800b84c:	4a0a      	ldr	r2, [pc, #40]	; (800b878 <prvTaskIsTaskSuspended+0x5c>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d10a      	bne.n	800b868 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b856:	4a09      	ldr	r2, [pc, #36]	; (800b87c <prvTaskIsTaskSuspended+0x60>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d005      	beq.n	800b868 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800b864:	2301      	movs	r3, #1
 800b866:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b868:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b86a:	4618      	mov	r0, r3
 800b86c:	371c      	adds	r7, #28
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	200016fc 	.word	0x200016fc
 800b87c:	200016d0 	.word	0x200016d0

0800b880 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d10a      	bne.n	800b8a8 <vTaskResume+0x28>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	60bb      	str	r3, [r7, #8]
}
 800b8a4:	bf00      	nop
 800b8a6:	e7fe      	b.n	800b8a6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800b8a8:	4b20      	ldr	r3, [pc, #128]	; (800b92c <vTaskResume+0xac>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d038      	beq.n	800b924 <vTaskResume+0xa4>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d035      	beq.n	800b924 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800b8b8:	f001 fb74 	bl	800cfa4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f7ff ffad 	bl	800b81c <prvTaskIsTaskSuspended>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d02b      	beq.n	800b920 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fe ffef 	bl	800a8b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d6:	4b16      	ldr	r3, [pc, #88]	; (800b930 <vTaskResume+0xb0>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d903      	bls.n	800b8e6 <vTaskResume+0x66>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e2:	4a13      	ldr	r2, [pc, #76]	; (800b930 <vTaskResume+0xb0>)
 800b8e4:	6013      	str	r3, [r2, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4a10      	ldr	r2, [pc, #64]	; (800b934 <vTaskResume+0xb4>)
 800b8f4:	441a      	add	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	f7fe ff7a 	bl	800a7f6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b906:	4b09      	ldr	r3, [pc, #36]	; (800b92c <vTaskResume+0xac>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d307      	bcc.n	800b920 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b910:	4b09      	ldr	r3, [pc, #36]	; (800b938 <vTaskResume+0xb8>)
 800b912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b916:	601a      	str	r2, [r3, #0]
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b920:	f001 fb70 	bl	800d004 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b924:	bf00      	nop
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	2000123c 	.word	0x2000123c
 800b930:	20001718 	.word	0x20001718
 800b934:	20001240 	.word	0x20001240
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08a      	sub	sp, #40	; 0x28
 800b940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b942:	2300      	movs	r3, #0
 800b944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b946:	2300      	movs	r3, #0
 800b948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b94a:	463a      	mov	r2, r7
 800b94c:	1d39      	adds	r1, r7, #4
 800b94e:	f107 0308 	add.w	r3, r7, #8
 800b952:	4618      	mov	r0, r3
 800b954:	f7fe feee 	bl	800a734 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	9202      	str	r2, [sp, #8]
 800b960:	9301      	str	r3, [sp, #4]
 800b962:	2300      	movs	r3, #0
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	2300      	movs	r3, #0
 800b968:	460a      	mov	r2, r1
 800b96a:	4922      	ldr	r1, [pc, #136]	; (800b9f4 <vTaskStartScheduler+0xb8>)
 800b96c:	4822      	ldr	r0, [pc, #136]	; (800b9f8 <vTaskStartScheduler+0xbc>)
 800b96e:	f7ff fcb5 	bl	800b2dc <xTaskCreateStatic>
 800b972:	4603      	mov	r3, r0
 800b974:	4a21      	ldr	r2, [pc, #132]	; (800b9fc <vTaskStartScheduler+0xc0>)
 800b976:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b978:	4b20      	ldr	r3, [pc, #128]	; (800b9fc <vTaskStartScheduler+0xc0>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b980:	2301      	movs	r3, #1
 800b982:	617b      	str	r3, [r7, #20]
 800b984:	e001      	b.n	800b98a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b986:	2300      	movs	r3, #0
 800b988:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d102      	bne.n	800b996 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b990:	f000 fe8c 	bl	800c6ac <xTimerCreateTimerTask>
 800b994:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d118      	bne.n	800b9ce <vTaskStartScheduler+0x92>
	__asm volatile
 800b99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	613b      	str	r3, [r7, #16]
}
 800b9ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9b0:	4b13      	ldr	r3, [pc, #76]	; (800ba00 <vTaskStartScheduler+0xc4>)
 800b9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9b8:	4b12      	ldr	r3, [pc, #72]	; (800ba04 <vTaskStartScheduler+0xc8>)
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b9be:	4b12      	ldr	r3, [pc, #72]	; (800ba08 <vTaskStartScheduler+0xcc>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b9c4:	f7f5 fe84 	bl	80016d0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b9c8:	f001 fa4a 	bl	800ce60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b9cc:	e00e      	b.n	800b9ec <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9d4:	d10a      	bne.n	800b9ec <vTaskStartScheduler+0xb0>
	__asm volatile
 800b9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9da:	f383 8811 	msr	BASEPRI, r3
 800b9de:	f3bf 8f6f 	isb	sy
 800b9e2:	f3bf 8f4f 	dsb	sy
 800b9e6:	60fb      	str	r3, [r7, #12]
}
 800b9e8:	bf00      	nop
 800b9ea:	e7fe      	b.n	800b9ea <vTaskStartScheduler+0xae>
}
 800b9ec:	bf00      	nop
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	0800e8e8 	.word	0x0800e8e8
 800b9f8:	0800c079 	.word	0x0800c079
 800b9fc:	20001734 	.word	0x20001734
 800ba00:	20001730 	.word	0x20001730
 800ba04:	2000171c 	.word	0x2000171c
 800ba08:	20001714 	.word	0x20001714

0800ba0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba10:	4b04      	ldr	r3, [pc, #16]	; (800ba24 <vTaskSuspendAll+0x18>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3301      	adds	r3, #1
 800ba16:	4a03      	ldr	r2, [pc, #12]	; (800ba24 <vTaskSuspendAll+0x18>)
 800ba18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba1a:	bf00      	nop
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	20001738 	.word	0x20001738

0800ba28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba32:	2300      	movs	r3, #0
 800ba34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba36:	4b42      	ldr	r3, [pc, #264]	; (800bb40 <xTaskResumeAll+0x118>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10a      	bne.n	800ba54 <xTaskResumeAll+0x2c>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	603b      	str	r3, [r7, #0]
}
 800ba50:	bf00      	nop
 800ba52:	e7fe      	b.n	800ba52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba54:	f001 faa6 	bl	800cfa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba58:	4b39      	ldr	r3, [pc, #228]	; (800bb40 <xTaskResumeAll+0x118>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	4a38      	ldr	r2, [pc, #224]	; (800bb40 <xTaskResumeAll+0x118>)
 800ba60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba62:	4b37      	ldr	r3, [pc, #220]	; (800bb40 <xTaskResumeAll+0x118>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d162      	bne.n	800bb30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba6a:	4b36      	ldr	r3, [pc, #216]	; (800bb44 <xTaskResumeAll+0x11c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d05e      	beq.n	800bb30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba72:	e02f      	b.n	800bad4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba74:	4b34      	ldr	r3, [pc, #208]	; (800bb48 <xTaskResumeAll+0x120>)
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3318      	adds	r3, #24
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe ff15 	bl	800a8b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fe ff10 	bl	800a8b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba94:	4b2d      	ldr	r3, [pc, #180]	; (800bb4c <xTaskResumeAll+0x124>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d903      	bls.n	800baa4 <xTaskResumeAll+0x7c>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa0:	4a2a      	ldr	r2, [pc, #168]	; (800bb4c <xTaskResumeAll+0x124>)
 800baa2:	6013      	str	r3, [r2, #0]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa8:	4613      	mov	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	4413      	add	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4a27      	ldr	r2, [pc, #156]	; (800bb50 <xTaskResumeAll+0x128>)
 800bab2:	441a      	add	r2, r3
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3304      	adds	r3, #4
 800bab8:	4619      	mov	r1, r3
 800baba:	4610      	mov	r0, r2
 800babc:	f7fe fe9b 	bl	800a7f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac4:	4b23      	ldr	r3, [pc, #140]	; (800bb54 <xTaskResumeAll+0x12c>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baca:	429a      	cmp	r2, r3
 800bacc:	d302      	bcc.n	800bad4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bace:	4b22      	ldr	r3, [pc, #136]	; (800bb58 <xTaskResumeAll+0x130>)
 800bad0:	2201      	movs	r2, #1
 800bad2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bad4:	4b1c      	ldr	r3, [pc, #112]	; (800bb48 <xTaskResumeAll+0x120>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1cb      	bne.n	800ba74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d001      	beq.n	800bae6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bae2:	f000 fbb9 	bl	800c258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bae6:	4b1d      	ldr	r3, [pc, #116]	; (800bb5c <xTaskResumeAll+0x134>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d010      	beq.n	800bb14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800baf2:	f000 f847 	bl	800bb84 <xTaskIncrementTick>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bafc:	4b16      	ldr	r3, [pc, #88]	; (800bb58 <xTaskResumeAll+0x130>)
 800bafe:	2201      	movs	r2, #1
 800bb00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	3b01      	subs	r3, #1
 800bb06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1f1      	bne.n	800baf2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bb0e:	4b13      	ldr	r3, [pc, #76]	; (800bb5c <xTaskResumeAll+0x134>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb14:	4b10      	ldr	r3, [pc, #64]	; (800bb58 <xTaskResumeAll+0x130>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d009      	beq.n	800bb30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb20:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <xTaskResumeAll+0x138>)
 800bb22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb26:	601a      	str	r2, [r3, #0]
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb30:	f001 fa68 	bl	800d004 <vPortExitCritical>

	return xAlreadyYielded;
 800bb34:	68bb      	ldr	r3, [r7, #8]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	20001738 	.word	0x20001738
 800bb44:	20001710 	.word	0x20001710
 800bb48:	200016d0 	.word	0x200016d0
 800bb4c:	20001718 	.word	0x20001718
 800bb50:	20001240 	.word	0x20001240
 800bb54:	2000123c 	.word	0x2000123c
 800bb58:	20001724 	.word	0x20001724
 800bb5c:	20001720 	.word	0x20001720
 800bb60:	e000ed04 	.word	0xe000ed04

0800bb64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb6a:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <xTaskGetTickCount+0x1c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb70:	687b      	ldr	r3, [r7, #4]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	370c      	adds	r7, #12
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	20001714 	.word	0x20001714

0800bb84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb8e:	4b4f      	ldr	r3, [pc, #316]	; (800bccc <xTaskIncrementTick+0x148>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f040 808f 	bne.w	800bcb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb98:	4b4d      	ldr	r3, [pc, #308]	; (800bcd0 <xTaskIncrementTick+0x14c>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bba0:	4a4b      	ldr	r2, [pc, #300]	; (800bcd0 <xTaskIncrementTick+0x14c>)
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d120      	bne.n	800bbee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbac:	4b49      	ldr	r3, [pc, #292]	; (800bcd4 <xTaskIncrementTick+0x150>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00a      	beq.n	800bbcc <xTaskIncrementTick+0x48>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbba:	f383 8811 	msr	BASEPRI, r3
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f3bf 8f4f 	dsb	sy
 800bbc6:	603b      	str	r3, [r7, #0]
}
 800bbc8:	bf00      	nop
 800bbca:	e7fe      	b.n	800bbca <xTaskIncrementTick+0x46>
 800bbcc:	4b41      	ldr	r3, [pc, #260]	; (800bcd4 <xTaskIncrementTick+0x150>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	4b41      	ldr	r3, [pc, #260]	; (800bcd8 <xTaskIncrementTick+0x154>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a3f      	ldr	r2, [pc, #252]	; (800bcd4 <xTaskIncrementTick+0x150>)
 800bbd8:	6013      	str	r3, [r2, #0]
 800bbda:	4a3f      	ldr	r2, [pc, #252]	; (800bcd8 <xTaskIncrementTick+0x154>)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6013      	str	r3, [r2, #0]
 800bbe0:	4b3e      	ldr	r3, [pc, #248]	; (800bcdc <xTaskIncrementTick+0x158>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	4a3d      	ldr	r2, [pc, #244]	; (800bcdc <xTaskIncrementTick+0x158>)
 800bbe8:	6013      	str	r3, [r2, #0]
 800bbea:	f000 fb35 	bl	800c258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbee:	4b3c      	ldr	r3, [pc, #240]	; (800bce0 <xTaskIncrementTick+0x15c>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	693a      	ldr	r2, [r7, #16]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d349      	bcc.n	800bc8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbf8:	4b36      	ldr	r3, [pc, #216]	; (800bcd4 <xTaskIncrementTick+0x150>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d104      	bne.n	800bc0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc02:	4b37      	ldr	r3, [pc, #220]	; (800bce0 <xTaskIncrementTick+0x15c>)
 800bc04:	f04f 32ff 	mov.w	r2, #4294967295
 800bc08:	601a      	str	r2, [r3, #0]
					break;
 800bc0a:	e03f      	b.n	800bc8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc0c:	4b31      	ldr	r3, [pc, #196]	; (800bcd4 <xTaskIncrementTick+0x150>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc1c:	693a      	ldr	r2, [r7, #16]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d203      	bcs.n	800bc2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc24:	4a2e      	ldr	r2, [pc, #184]	; (800bce0 <xTaskIncrementTick+0x15c>)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc2a:	e02f      	b.n	800bc8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7fe fe3d 	bl	800a8b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d004      	beq.n	800bc48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	3318      	adds	r3, #24
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fe fe34 	bl	800a8b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc4c:	4b25      	ldr	r3, [pc, #148]	; (800bce4 <xTaskIncrementTick+0x160>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d903      	bls.n	800bc5c <xTaskIncrementTick+0xd8>
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc58:	4a22      	ldr	r2, [pc, #136]	; (800bce4 <xTaskIncrementTick+0x160>)
 800bc5a:	6013      	str	r3, [r2, #0]
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc60:	4613      	mov	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4413      	add	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4a1f      	ldr	r2, [pc, #124]	; (800bce8 <xTaskIncrementTick+0x164>)
 800bc6a:	441a      	add	r2, r3
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	4619      	mov	r1, r3
 800bc72:	4610      	mov	r0, r2
 800bc74:	f7fe fdbf 	bl	800a7f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc7c:	4b1b      	ldr	r3, [pc, #108]	; (800bcec <xTaskIncrementTick+0x168>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d3b8      	bcc.n	800bbf8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc86:	2301      	movs	r3, #1
 800bc88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc8a:	e7b5      	b.n	800bbf8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc8c:	4b17      	ldr	r3, [pc, #92]	; (800bcec <xTaskIncrementTick+0x168>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc92:	4915      	ldr	r1, [pc, #84]	; (800bce8 <xTaskIncrementTick+0x164>)
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	440b      	add	r3, r1
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d901      	bls.n	800bca8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bca4:	2301      	movs	r3, #1
 800bca6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bca8:	4b11      	ldr	r3, [pc, #68]	; (800bcf0 <xTaskIncrementTick+0x16c>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d007      	beq.n	800bcc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	617b      	str	r3, [r7, #20]
 800bcb4:	e004      	b.n	800bcc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bcb6:	4b0f      	ldr	r3, [pc, #60]	; (800bcf4 <xTaskIncrementTick+0x170>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	4a0d      	ldr	r2, [pc, #52]	; (800bcf4 <xTaskIncrementTick+0x170>)
 800bcbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bcc0:	697b      	ldr	r3, [r7, #20]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	20001738 	.word	0x20001738
 800bcd0:	20001714 	.word	0x20001714
 800bcd4:	200016c8 	.word	0x200016c8
 800bcd8:	200016cc 	.word	0x200016cc
 800bcdc:	20001728 	.word	0x20001728
 800bce0:	20001730 	.word	0x20001730
 800bce4:	20001718 	.word	0x20001718
 800bce8:	20001240 	.word	0x20001240
 800bcec:	2000123c 	.word	0x2000123c
 800bcf0:	20001724 	.word	0x20001724
 800bcf4:	20001720 	.word	0x20001720

0800bcf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcfe:	4b33      	ldr	r3, [pc, #204]	; (800bdcc <vTaskSwitchContext+0xd4>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d003      	beq.n	800bd0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd06:	4b32      	ldr	r3, [pc, #200]	; (800bdd0 <vTaskSwitchContext+0xd8>)
 800bd08:	2201      	movs	r2, #1
 800bd0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd0c:	e05a      	b.n	800bdc4 <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800bd0e:	4b30      	ldr	r3, [pc, #192]	; (800bdd0 <vTaskSwitchContext+0xd8>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800bd14:	f7f5 fce3 	bl	80016de <getRunTimeCounterValue>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	4a2e      	ldr	r2, [pc, #184]	; (800bdd4 <vTaskSwitchContext+0xdc>)
 800bd1c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800bd1e:	4b2d      	ldr	r3, [pc, #180]	; (800bdd4 <vTaskSwitchContext+0xdc>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b2d      	ldr	r3, [pc, #180]	; (800bdd8 <vTaskSwitchContext+0xe0>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d909      	bls.n	800bd3e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800bd2a:	4b2c      	ldr	r3, [pc, #176]	; (800bddc <vTaskSwitchContext+0xe4>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800bd30:	4a28      	ldr	r2, [pc, #160]	; (800bdd4 <vTaskSwitchContext+0xdc>)
 800bd32:	6810      	ldr	r0, [r2, #0]
 800bd34:	4a28      	ldr	r2, [pc, #160]	; (800bdd8 <vTaskSwitchContext+0xe0>)
 800bd36:	6812      	ldr	r2, [r2, #0]
 800bd38:	1a82      	subs	r2, r0, r2
 800bd3a:	440a      	add	r2, r1
 800bd3c:	661a      	str	r2, [r3, #96]	; 0x60
			ulTaskSwitchedInTime = ulTotalRunTime;
 800bd3e:	4b25      	ldr	r3, [pc, #148]	; (800bdd4 <vTaskSwitchContext+0xdc>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a25      	ldr	r2, [pc, #148]	; (800bdd8 <vTaskSwitchContext+0xe0>)
 800bd44:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd46:	4b26      	ldr	r3, [pc, #152]	; (800bde0 <vTaskSwitchContext+0xe8>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	60fb      	str	r3, [r7, #12]
 800bd4c:	e010      	b.n	800bd70 <vTaskSwitchContext+0x78>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <vTaskSwitchContext+0x72>
	__asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	607b      	str	r3, [r7, #4]
}
 800bd66:	bf00      	nop
 800bd68:	e7fe      	b.n	800bd68 <vTaskSwitchContext+0x70>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	60fb      	str	r3, [r7, #12]
 800bd70:	491c      	ldr	r1, [pc, #112]	; (800bde4 <vTaskSwitchContext+0xec>)
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	4613      	mov	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	440b      	add	r3, r1
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d0e4      	beq.n	800bd4e <vTaskSwitchContext+0x56>
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	4613      	mov	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4a15      	ldr	r2, [pc, #84]	; (800bde4 <vTaskSwitchContext+0xec>)
 800bd90:	4413      	add	r3, r2
 800bd92:	60bb      	str	r3, [r7, #8]
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	685a      	ldr	r2, [r3, #4]
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	605a      	str	r2, [r3, #4]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	685a      	ldr	r2, [r3, #4]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	3308      	adds	r3, #8
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d104      	bne.n	800bdb4 <vTaskSwitchContext+0xbc>
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	605a      	str	r2, [r3, #4]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	68db      	ldr	r3, [r3, #12]
 800bdba:	4a08      	ldr	r2, [pc, #32]	; (800bddc <vTaskSwitchContext+0xe4>)
 800bdbc:	6013      	str	r3, [r2, #0]
 800bdbe:	4a08      	ldr	r2, [pc, #32]	; (800bde0 <vTaskSwitchContext+0xe8>)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6013      	str	r3, [r2, #0]
}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	20001738 	.word	0x20001738
 800bdd0:	20001724 	.word	0x20001724
 800bdd4:	20001740 	.word	0x20001740
 800bdd8:	2000173c 	.word	0x2000173c
 800bddc:	2000123c 	.word	0x2000123c
 800bde0:	20001718 	.word	0x20001718
 800bde4:	20001240 	.word	0x20001240

0800bde8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10a      	bne.n	800be0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfc:	f383 8811 	msr	BASEPRI, r3
 800be00:	f3bf 8f6f 	isb	sy
 800be04:	f3bf 8f4f 	dsb	sy
 800be08:	60fb      	str	r3, [r7, #12]
}
 800be0a:	bf00      	nop
 800be0c:	e7fe      	b.n	800be0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be0e:	4b07      	ldr	r3, [pc, #28]	; (800be2c <vTaskPlaceOnEventList+0x44>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3318      	adds	r3, #24
 800be14:	4619      	mov	r1, r3
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7fe fd11 	bl	800a83e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be1c:	2101      	movs	r1, #1
 800be1e:	6838      	ldr	r0, [r7, #0]
 800be20:	f000 fbea 	bl	800c5f8 <prvAddCurrentTaskToDelayedList>
}
 800be24:	bf00      	nop
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	2000123c 	.word	0x2000123c

0800be30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10a      	bne.n	800be58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	617b      	str	r3, [r7, #20]
}
 800be54:	bf00      	nop
 800be56:	e7fe      	b.n	800be56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be58:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <vTaskPlaceOnEventListRestricted+0x54>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3318      	adds	r3, #24
 800be5e:	4619      	mov	r1, r3
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f7fe fcc8 	bl	800a7f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be6c:	f04f 33ff 	mov.w	r3, #4294967295
 800be70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	68b8      	ldr	r0, [r7, #8]
 800be76:	f000 fbbf 	bl	800c5f8 <prvAddCurrentTaskToDelayedList>
	}
 800be7a:	bf00      	nop
 800be7c:	3718      	adds	r7, #24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	2000123c 	.word	0x2000123c

0800be88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10a      	bne.n	800beb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	60fb      	str	r3, [r7, #12]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	3318      	adds	r3, #24
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fe fcf9 	bl	800a8b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bebe:	4b1e      	ldr	r3, [pc, #120]	; (800bf38 <xTaskRemoveFromEventList+0xb0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d11d      	bne.n	800bf02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	3304      	adds	r3, #4
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe fcf0 	bl	800a8b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed4:	4b19      	ldr	r3, [pc, #100]	; (800bf3c <xTaskRemoveFromEventList+0xb4>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d903      	bls.n	800bee4 <xTaskRemoveFromEventList+0x5c>
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee0:	4a16      	ldr	r2, [pc, #88]	; (800bf3c <xTaskRemoveFromEventList+0xb4>)
 800bee2:	6013      	str	r3, [r2, #0]
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee8:	4613      	mov	r3, r2
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4a13      	ldr	r2, [pc, #76]	; (800bf40 <xTaskRemoveFromEventList+0xb8>)
 800bef2:	441a      	add	r2, r3
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	3304      	adds	r3, #4
 800bef8:	4619      	mov	r1, r3
 800befa:	4610      	mov	r0, r2
 800befc:	f7fe fc7b 	bl	800a7f6 <vListInsertEnd>
 800bf00:	e005      	b.n	800bf0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	3318      	adds	r3, #24
 800bf06:	4619      	mov	r1, r3
 800bf08:	480e      	ldr	r0, [pc, #56]	; (800bf44 <xTaskRemoveFromEventList+0xbc>)
 800bf0a:	f7fe fc74 	bl	800a7f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf12:	4b0d      	ldr	r3, [pc, #52]	; (800bf48 <xTaskRemoveFromEventList+0xc0>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d905      	bls.n	800bf28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf20:	4b0a      	ldr	r3, [pc, #40]	; (800bf4c <xTaskRemoveFromEventList+0xc4>)
 800bf22:	2201      	movs	r2, #1
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	e001      	b.n	800bf2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf2c:	697b      	ldr	r3, [r7, #20]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	20001738 	.word	0x20001738
 800bf3c:	20001718 	.word	0x20001718
 800bf40:	20001240 	.word	0x20001240
 800bf44:	200016d0 	.word	0x200016d0
 800bf48:	2000123c 	.word	0x2000123c
 800bf4c:	20001724 	.word	0x20001724

0800bf50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf58:	4b06      	ldr	r3, [pc, #24]	; (800bf74 <vTaskInternalSetTimeOutState+0x24>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf60:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <vTaskInternalSetTimeOutState+0x28>)
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	605a      	str	r2, [r3, #4]
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	20001728 	.word	0x20001728
 800bf78:	20001714 	.word	0x20001714

0800bf7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	613b      	str	r3, [r7, #16]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10a      	bne.n	800bfbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	60fb      	str	r3, [r7, #12]
}
 800bfba:	bf00      	nop
 800bfbc:	e7fe      	b.n	800bfbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bfbe:	f000 fff1 	bl	800cfa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bfc2:	4b24      	ldr	r3, [pc, #144]	; (800c054 <xTaskCheckForTimeOut+0xd8>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	69ba      	ldr	r2, [r7, #24]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800bfd2:	4b21      	ldr	r3, [pc, #132]	; (800c058 <xTaskCheckForTimeOut+0xdc>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d007      	beq.n	800bfee <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800bfde:	4b1e      	ldr	r3, [pc, #120]	; (800c058 <xTaskCheckForTimeOut+0xdc>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	61fb      	str	r3, [r7, #28]
 800bfec:	e02b      	b.n	800c046 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff6:	d102      	bne.n	800bffe <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bff8:	2300      	movs	r3, #0
 800bffa:	61fb      	str	r3, [r7, #28]
 800bffc:	e023      	b.n	800c046 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	4b16      	ldr	r3, [pc, #88]	; (800c05c <xTaskCheckForTimeOut+0xe0>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	429a      	cmp	r2, r3
 800c008:	d007      	beq.n	800c01a <xTaskCheckForTimeOut+0x9e>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	429a      	cmp	r2, r3
 800c012:	d302      	bcc.n	800c01a <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c014:	2301      	movs	r3, #1
 800c016:	61fb      	str	r3, [r7, #28]
 800c018:	e015      	b.n	800c046 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	429a      	cmp	r2, r3
 800c022:	d20b      	bcs.n	800c03c <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	1ad2      	subs	r2, r2, r3
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7ff ff8d 	bl	800bf50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c036:	2300      	movs	r3, #0
 800c038:	61fb      	str	r3, [r7, #28]
 800c03a:	e004      	b.n	800c046 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	2200      	movs	r2, #0
 800c040:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c042:	2301      	movs	r3, #1
 800c044:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c046:	f000 ffdd 	bl	800d004 <vPortExitCritical>

	return xReturn;
 800c04a:	69fb      	ldr	r3, [r7, #28]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3720      	adds	r7, #32
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	20001714 	.word	0x20001714
 800c058:	2000123c 	.word	0x2000123c
 800c05c:	20001728 	.word	0x20001728

0800c060 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c060:	b480      	push	{r7}
 800c062:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c064:	4b03      	ldr	r3, [pc, #12]	; (800c074 <vTaskMissedYield+0x14>)
 800c066:	2201      	movs	r2, #1
 800c068:	601a      	str	r2, [r3, #0]
}
 800c06a:	bf00      	nop
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr
 800c074:	20001724 	.word	0x20001724

0800c078 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c080:	f000 f854 	bl	800c12c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c084:	4b07      	ldr	r3, [pc, #28]	; (800c0a4 <prvIdleTask+0x2c>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d907      	bls.n	800c09c <prvIdleTask+0x24>
			{
				taskYIELD();
 800c08c:	4b06      	ldr	r3, [pc, #24]	; (800c0a8 <prvIdleTask+0x30>)
 800c08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c09c:	f7f5 fb27 	bl	80016ee <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c0a0:	e7ee      	b.n	800c080 <prvIdleTask+0x8>
 800c0a2:	bf00      	nop
 800c0a4:	20001240 	.word	0x20001240
 800c0a8:	e000ed04 	.word	0xe000ed04

0800c0ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	607b      	str	r3, [r7, #4]
 800c0b6:	e00c      	b.n	800c0d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4a12      	ldr	r2, [pc, #72]	; (800c10c <prvInitialiseTaskLists+0x60>)
 800c0c4:	4413      	add	r3, r2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe fb68 	bl	800a79c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	607b      	str	r3, [r7, #4]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2b37      	cmp	r3, #55	; 0x37
 800c0d6:	d9ef      	bls.n	800c0b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0d8:	480d      	ldr	r0, [pc, #52]	; (800c110 <prvInitialiseTaskLists+0x64>)
 800c0da:	f7fe fb5f 	bl	800a79c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0de:	480d      	ldr	r0, [pc, #52]	; (800c114 <prvInitialiseTaskLists+0x68>)
 800c0e0:	f7fe fb5c 	bl	800a79c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c0e4:	480c      	ldr	r0, [pc, #48]	; (800c118 <prvInitialiseTaskLists+0x6c>)
 800c0e6:	f7fe fb59 	bl	800a79c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c0ea:	480c      	ldr	r0, [pc, #48]	; (800c11c <prvInitialiseTaskLists+0x70>)
 800c0ec:	f7fe fb56 	bl	800a79c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c0f0:	480b      	ldr	r0, [pc, #44]	; (800c120 <prvInitialiseTaskLists+0x74>)
 800c0f2:	f7fe fb53 	bl	800a79c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c0f6:	4b0b      	ldr	r3, [pc, #44]	; (800c124 <prvInitialiseTaskLists+0x78>)
 800c0f8:	4a05      	ldr	r2, [pc, #20]	; (800c110 <prvInitialiseTaskLists+0x64>)
 800c0fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <prvInitialiseTaskLists+0x7c>)
 800c0fe:	4a05      	ldr	r2, [pc, #20]	; (800c114 <prvInitialiseTaskLists+0x68>)
 800c100:	601a      	str	r2, [r3, #0]
}
 800c102:	bf00      	nop
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	20001240 	.word	0x20001240
 800c110:	200016a0 	.word	0x200016a0
 800c114:	200016b4 	.word	0x200016b4
 800c118:	200016d0 	.word	0x200016d0
 800c11c:	200016e4 	.word	0x200016e4
 800c120:	200016fc 	.word	0x200016fc
 800c124:	200016c8 	.word	0x200016c8
 800c128:	200016cc 	.word	0x200016cc

0800c12c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c132:	e019      	b.n	800c168 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c134:	f000 ff36 	bl	800cfa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c138:	4b10      	ldr	r3, [pc, #64]	; (800c17c <prvCheckTasksWaitingTermination+0x50>)
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3304      	adds	r3, #4
 800c144:	4618      	mov	r0, r3
 800c146:	f7fe fbb3 	bl	800a8b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c14a:	4b0d      	ldr	r3, [pc, #52]	; (800c180 <prvCheckTasksWaitingTermination+0x54>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	3b01      	subs	r3, #1
 800c150:	4a0b      	ldr	r2, [pc, #44]	; (800c180 <prvCheckTasksWaitingTermination+0x54>)
 800c152:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c154:	4b0b      	ldr	r3, [pc, #44]	; (800c184 <prvCheckTasksWaitingTermination+0x58>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	3b01      	subs	r3, #1
 800c15a:	4a0a      	ldr	r2, [pc, #40]	; (800c184 <prvCheckTasksWaitingTermination+0x58>)
 800c15c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c15e:	f000 ff51 	bl	800d004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f848 	bl	800c1f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c168:	4b06      	ldr	r3, [pc, #24]	; (800c184 <prvCheckTasksWaitingTermination+0x58>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d1e1      	bne.n	800c134 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c170:	bf00      	nop
 800c172:	bf00      	nop
 800c174:	3708      	adds	r7, #8
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	200016e4 	.word	0x200016e4
 800c180:	20001710 	.word	0x20001710
 800c184:	200016f8 	.word	0x200016f8

0800c188 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c190:	2300      	movs	r3, #0
 800c192:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c194:	e005      	b.n	800c1a2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	3301      	adds	r3, #1
 800c19a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	2ba5      	cmp	r3, #165	; 0xa5
 800c1a8:	d0f5      	beq.n	800c196 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	089b      	lsrs	r3, r3, #2
 800c1ae:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	b29b      	uxth	r3, r3
	}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d102      	bne.n	800c1d4 <uxTaskGetStackHighWaterMark+0x14>
 800c1ce:	4b09      	ldr	r3, [pc, #36]	; (800c1f4 <uxTaskGetStackHighWaterMark+0x34>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	e000      	b.n	800c1d6 <uxTaskGetStackHighWaterMark+0x16>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1dc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800c1de:	6938      	ldr	r0, [r7, #16]
 800c1e0:	f7ff ffd2 	bl	800c188 <prvTaskCheckFreeStackSpace>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
	}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3718      	adds	r7, #24
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	2000123c 	.word	0x2000123c

0800c1f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c206:	2b00      	cmp	r3, #0
 800c208:	d108      	bne.n	800c21c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c20e:	4618      	mov	r0, r3
 800c210:	f001 f8ba 	bl	800d388 <vPortFree>
				vPortFree( pxTCB );
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f001 f8b7 	bl	800d388 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c21a:	e018      	b.n	800c24e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c222:	2b01      	cmp	r3, #1
 800c224:	d103      	bne.n	800c22e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f001 f8ae 	bl	800d388 <vPortFree>
	}
 800c22c:	e00f      	b.n	800c24e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c234:	2b02      	cmp	r3, #2
 800c236:	d00a      	beq.n	800c24e <prvDeleteTCB+0x56>
	__asm volatile
 800c238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23c:	f383 8811 	msr	BASEPRI, r3
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	60fb      	str	r3, [r7, #12]
}
 800c24a:	bf00      	nop
 800c24c:	e7fe      	b.n	800c24c <prvDeleteTCB+0x54>
	}
 800c24e:	bf00      	nop
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c25e:	4b0c      	ldr	r3, [pc, #48]	; (800c290 <prvResetNextTaskUnblockTime+0x38>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d104      	bne.n	800c272 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c268:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <prvResetNextTaskUnblockTime+0x3c>)
 800c26a:	f04f 32ff 	mov.w	r2, #4294967295
 800c26e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c270:	e008      	b.n	800c284 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c272:	4b07      	ldr	r3, [pc, #28]	; (800c290 <prvResetNextTaskUnblockTime+0x38>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	4a04      	ldr	r2, [pc, #16]	; (800c294 <prvResetNextTaskUnblockTime+0x3c>)
 800c282:	6013      	str	r3, [r2, #0]
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	200016c8 	.word	0x200016c8
 800c294:	20001730 	.word	0x20001730

0800c298 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c29e:	4b0b      	ldr	r3, [pc, #44]	; (800c2cc <xTaskGetSchedulerState+0x34>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d102      	bne.n	800c2ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	607b      	str	r3, [r7, #4]
 800c2aa:	e008      	b.n	800c2be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2ac:	4b08      	ldr	r3, [pc, #32]	; (800c2d0 <xTaskGetSchedulerState+0x38>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d102      	bne.n	800c2ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	607b      	str	r3, [r7, #4]
 800c2b8:	e001      	b.n	800c2be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c2be:	687b      	ldr	r3, [r7, #4]
	}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	2000171c 	.word	0x2000171c
 800c2d0:	20001738 	.word	0x20001738

0800c2d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d056      	beq.n	800c398 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2ea:	4b2e      	ldr	r3, [pc, #184]	; (800c3a4 <xTaskPriorityDisinherit+0xd0>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	693a      	ldr	r2, [r7, #16]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d00a      	beq.n	800c30a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	60fb      	str	r3, [r7, #12]
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10a      	bne.n	800c328 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	60bb      	str	r3, [r7, #8]
}
 800c324:	bf00      	nop
 800c326:	e7fe      	b.n	800c326 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c32c:	1e5a      	subs	r2, r3, #1
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d02c      	beq.n	800c398 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c342:	2b00      	cmp	r3, #0
 800c344:	d128      	bne.n	800c398 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	3304      	adds	r3, #4
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fe fab0 	bl	800a8b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c368:	4b0f      	ldr	r3, [pc, #60]	; (800c3a8 <xTaskPriorityDisinherit+0xd4>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d903      	bls.n	800c378 <xTaskPriorityDisinherit+0xa4>
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c374:	4a0c      	ldr	r2, [pc, #48]	; (800c3a8 <xTaskPriorityDisinherit+0xd4>)
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4a09      	ldr	r2, [pc, #36]	; (800c3ac <xTaskPriorityDisinherit+0xd8>)
 800c386:	441a      	add	r2, r3
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	3304      	adds	r3, #4
 800c38c:	4619      	mov	r1, r3
 800c38e:	4610      	mov	r0, r2
 800c390:	f7fe fa31 	bl	800a7f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c394:	2301      	movs	r3, #1
 800c396:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c398:	697b      	ldr	r3, [r7, #20]
	}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3718      	adds	r7, #24
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	2000123c 	.word	0x2000123c
 800c3a8:	20001718 	.word	0x20001718
 800c3ac:	20001240 	.word	0x20001240

0800c3b0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c3ba:	f000 fdf3 	bl	800cfa4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c3be:	4b1e      	ldr	r3, [pc, #120]	; (800c438 <ulTaskNotifyTake+0x88>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d113      	bne.n	800c3f0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c3c8:	4b1b      	ldr	r3, [pc, #108]	; (800c438 <ulTaskNotifyTake+0x88>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

				if( xTicksToWait > ( TickType_t ) 0 )
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3d8:	2101      	movs	r1, #1
 800c3da:	6838      	ldr	r0, [r7, #0]
 800c3dc:	f000 f90c 	bl	800c5f8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c3e0:	4b16      	ldr	r3, [pc, #88]	; (800c43c <ulTaskNotifyTake+0x8c>)
 800c3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e6:	601a      	str	r2, [r3, #0]
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c3f0:	f000 fe08 	bl	800d004 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c3f4:	f000 fdd6 	bl	800cfa4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c3f8:	4b0f      	ldr	r3, [pc, #60]	; (800c438 <ulTaskNotifyTake+0x88>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3fe:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00c      	beq.n	800c420 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d004      	beq.n	800c416 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c40c:	4b0a      	ldr	r3, [pc, #40]	; (800c438 <ulTaskNotifyTake+0x88>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2200      	movs	r2, #0
 800c412:	665a      	str	r2, [r3, #100]	; 0x64
 800c414:	e004      	b.n	800c420 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c416:	4b08      	ldr	r3, [pc, #32]	; (800c438 <ulTaskNotifyTake+0x88>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	3a01      	subs	r2, #1
 800c41e:	665a      	str	r2, [r3, #100]	; 0x64
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c420:	4b05      	ldr	r3, [pc, #20]	; (800c438 <ulTaskNotifyTake+0x88>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2200      	movs	r2, #0
 800c426:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		}
		taskEXIT_CRITICAL();
 800c42a:	f000 fdeb 	bl	800d004 <vPortExitCritical>

		return ulReturn;
 800c42e:	68fb      	ldr	r3, [r7, #12]
	}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	2000123c 	.word	0x2000123c
 800c43c:	e000ed04 	.word	0xe000ed04

0800c440 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c440:	b580      	push	{r7, lr}
 800c442:	b08e      	sub	sp, #56	; 0x38
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	603b      	str	r3, [r7, #0]
 800c44c:	4613      	mov	r3, r2
 800c44e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c450:	2301      	movs	r3, #1
 800c452:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10a      	bne.n	800c470 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c46c:	bf00      	nop
 800c46e:	e7fe      	b.n	800c46e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c470:	f000 fe7a 	bl	800d168 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c478:	f3ef 8211 	mrs	r2, BASEPRI
 800c47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c480:	f383 8811 	msr	BASEPRI, r3
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	623a      	str	r2, [r7, #32]
 800c48e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c490:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c492:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800c4a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ae:	2202      	movs	r2, #2
 800c4b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

			switch( eAction )
 800c4b4:	79fb      	ldrb	r3, [r7, #7]
 800c4b6:	2b04      	cmp	r3, #4
 800c4b8:	d828      	bhi.n	800c50c <xTaskGenericNotifyFromISR+0xcc>
 800c4ba:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <xTaskGenericNotifyFromISR+0x80>)
 800c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c0:	0800c52d 	.word	0x0800c52d
 800c4c4:	0800c4d5 	.word	0x0800c4d5
 800c4c8:	0800c4e3 	.word	0x0800c4e3
 800c4cc:	0800c4ef 	.word	0x0800c4ef
 800c4d0:	0800c4f7 	.word	0x0800c4f7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	431a      	orrs	r2, r3
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 800c4e0:	e027      	b.n	800c532 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ea:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 800c4ec:	e021      	b.n	800c532 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	665a      	str	r2, [r3, #100]	; 0x64
					break;
 800c4f4:	e01d      	b.n	800c532 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c4f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d003      	beq.n	800c506 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	665a      	str	r2, [r3, #100]	; 0x64
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c504:	e015      	b.n	800c532 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c506:	2300      	movs	r3, #0
 800c508:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c50a:	e012      	b.n	800c532 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c514:	d00c      	beq.n	800c530 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	61bb      	str	r3, [r7, #24]
}
 800c528:	bf00      	nop
 800c52a:	e7fe      	b.n	800c52a <xTaskGenericNotifyFromISR+0xea>
					break;
 800c52c:	bf00      	nop
 800c52e:	e000      	b.n	800c532 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c530:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c536:	2b01      	cmp	r3, #1
 800c538:	d146      	bne.n	800c5c8 <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00a      	beq.n	800c558 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c546:	f383 8811 	msr	BASEPRI, r3
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	f3bf 8f4f 	dsb	sy
 800c552:	617b      	str	r3, [r7, #20]
}
 800c554:	bf00      	nop
 800c556:	e7fe      	b.n	800c556 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c558:	4b21      	ldr	r3, [pc, #132]	; (800c5e0 <xTaskGenericNotifyFromISR+0x1a0>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d11d      	bne.n	800c59c <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	3304      	adds	r3, #4
 800c564:	4618      	mov	r0, r3
 800c566:	f7fe f9a3 	bl	800a8b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c56e:	4b1d      	ldr	r3, [pc, #116]	; (800c5e4 <xTaskGenericNotifyFromISR+0x1a4>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	429a      	cmp	r2, r3
 800c574:	d903      	bls.n	800c57e <xTaskGenericNotifyFromISR+0x13e>
 800c576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57a:	4a1a      	ldr	r2, [pc, #104]	; (800c5e4 <xTaskGenericNotifyFromISR+0x1a4>)
 800c57c:	6013      	str	r3, [r2, #0]
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c582:	4613      	mov	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4413      	add	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4a17      	ldr	r2, [pc, #92]	; (800c5e8 <xTaskGenericNotifyFromISR+0x1a8>)
 800c58c:	441a      	add	r2, r3
 800c58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c590:	3304      	adds	r3, #4
 800c592:	4619      	mov	r1, r3
 800c594:	4610      	mov	r0, r2
 800c596:	f7fe f92e 	bl	800a7f6 <vListInsertEnd>
 800c59a:	e005      	b.n	800c5a8 <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	3318      	adds	r3, #24
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	4812      	ldr	r0, [pc, #72]	; (800c5ec <xTaskGenericNotifyFromISR+0x1ac>)
 800c5a4:	f7fe f927 	bl	800a7f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ac:	4b10      	ldr	r3, [pc, #64]	; (800c5f0 <xTaskGenericNotifyFromISR+0x1b0>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d908      	bls.n	800c5c8 <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c5b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5be:	2201      	movs	r2, #1
 800c5c0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c5c2:	4b0c      	ldr	r3, [pc, #48]	; (800c5f4 <xTaskGenericNotifyFromISR+0x1b4>)
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	601a      	str	r2, [r3, #0]
 800c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ca:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	f383 8811 	msr	BASEPRI, r3
}
 800c5d2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3738      	adds	r7, #56	; 0x38
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	20001738 	.word	0x20001738
 800c5e4:	20001718 	.word	0x20001718
 800c5e8:	20001240 	.word	0x20001240
 800c5ec:	200016d0 	.word	0x200016d0
 800c5f0:	2000123c 	.word	0x2000123c
 800c5f4:	20001724 	.word	0x20001724

0800c5f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c602:	4b24      	ldr	r3, [pc, #144]	; (800c694 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c608:	4b23      	ldr	r3, [pc, #140]	; (800c698 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2200      	movs	r2, #0
 800c60e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c612:	4b21      	ldr	r3, [pc, #132]	; (800c698 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	3304      	adds	r3, #4
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe f949 	bl	800a8b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c624:	d10a      	bne.n	800c63c <prvAddCurrentTaskToDelayedList+0x44>
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d007      	beq.n	800c63c <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c62c:	4b1a      	ldr	r3, [pc, #104]	; (800c698 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3304      	adds	r3, #4
 800c632:	4619      	mov	r1, r3
 800c634:	4819      	ldr	r0, [pc, #100]	; (800c69c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c636:	f7fe f8de 	bl	800a7f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c63a:	e026      	b.n	800c68a <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4413      	add	r3, r2
 800c642:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c644:	4b14      	ldr	r3, [pc, #80]	; (800c698 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	429a      	cmp	r2, r3
 800c652:	d209      	bcs.n	800c668 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c654:	4b12      	ldr	r3, [pc, #72]	; (800c6a0 <prvAddCurrentTaskToDelayedList+0xa8>)
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	4b0f      	ldr	r3, [pc, #60]	; (800c698 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3304      	adds	r3, #4
 800c65e:	4619      	mov	r1, r3
 800c660:	4610      	mov	r0, r2
 800c662:	f7fe f8ec 	bl	800a83e <vListInsert>
}
 800c666:	e010      	b.n	800c68a <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c668:	4b0e      	ldr	r3, [pc, #56]	; (800c6a4 <prvAddCurrentTaskToDelayedList+0xac>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	4b0a      	ldr	r3, [pc, #40]	; (800c698 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	3304      	adds	r3, #4
 800c672:	4619      	mov	r1, r3
 800c674:	4610      	mov	r0, r2
 800c676:	f7fe f8e2 	bl	800a83e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c67a:	4b0b      	ldr	r3, [pc, #44]	; (800c6a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68ba      	ldr	r2, [r7, #8]
 800c680:	429a      	cmp	r2, r3
 800c682:	d202      	bcs.n	800c68a <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800c684:	4a08      	ldr	r2, [pc, #32]	; (800c6a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	6013      	str	r3, [r2, #0]
}
 800c68a:	bf00      	nop
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	20001714 	.word	0x20001714
 800c698:	2000123c 	.word	0x2000123c
 800c69c:	200016fc 	.word	0x200016fc
 800c6a0:	200016cc 	.word	0x200016cc
 800c6a4:	200016c8 	.word	0x200016c8
 800c6a8:	20001730 	.word	0x20001730

0800c6ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b08a      	sub	sp, #40	; 0x28
 800c6b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c6b6:	f000 fb07 	bl	800ccc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c6ba:	4b1c      	ldr	r3, [pc, #112]	; (800c72c <xTimerCreateTimerTask+0x80>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d021      	beq.n	800c706 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c6ca:	1d3a      	adds	r2, r7, #4
 800c6cc:	f107 0108 	add.w	r1, r7, #8
 800c6d0:	f107 030c 	add.w	r3, r7, #12
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fe f847 	bl	800a768 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c6da:	6879      	ldr	r1, [r7, #4]
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	9202      	str	r2, [sp, #8]
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	460a      	mov	r2, r1
 800c6ec:	4910      	ldr	r1, [pc, #64]	; (800c730 <xTimerCreateTimerTask+0x84>)
 800c6ee:	4811      	ldr	r0, [pc, #68]	; (800c734 <xTimerCreateTimerTask+0x88>)
 800c6f0:	f7fe fdf4 	bl	800b2dc <xTaskCreateStatic>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	4a10      	ldr	r2, [pc, #64]	; (800c738 <xTimerCreateTimerTask+0x8c>)
 800c6f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c6fa:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <xTimerCreateTimerTask+0x8c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c702:	2301      	movs	r3, #1
 800c704:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10a      	bne.n	800c722 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c710:	f383 8811 	msr	BASEPRI, r3
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	613b      	str	r3, [r7, #16]
}
 800c71e:	bf00      	nop
 800c720:	e7fe      	b.n	800c720 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c722:	697b      	ldr	r3, [r7, #20]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20001774 	.word	0x20001774
 800c730:	0800e918 	.word	0x0800e918
 800c734:	0800c871 	.word	0x0800c871
 800c738:	20001778 	.word	0x20001778

0800c73c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b08a      	sub	sp, #40	; 0x28
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
 800c748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c74a:	2300      	movs	r3, #0
 800c74c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10a      	bne.n	800c76a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	623b      	str	r3, [r7, #32]
}
 800c766:	bf00      	nop
 800c768:	e7fe      	b.n	800c768 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c76a:	4b1a      	ldr	r3, [pc, #104]	; (800c7d4 <xTimerGenericCommand+0x98>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d02a      	beq.n	800c7c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	2b05      	cmp	r3, #5
 800c782:	dc18      	bgt.n	800c7b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c784:	f7ff fd88 	bl	800c298 <xTaskGetSchedulerState>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b02      	cmp	r3, #2
 800c78c:	d109      	bne.n	800c7a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c78e:	4b11      	ldr	r3, [pc, #68]	; (800c7d4 <xTimerGenericCommand+0x98>)
 800c790:	6818      	ldr	r0, [r3, #0]
 800c792:	f107 0110 	add.w	r1, r7, #16
 800c796:	2300      	movs	r3, #0
 800c798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c79a:	f7fe f9b7 	bl	800ab0c <xQueueGenericSend>
 800c79e:	6278      	str	r0, [r7, #36]	; 0x24
 800c7a0:	e012      	b.n	800c7c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c7a2:	4b0c      	ldr	r3, [pc, #48]	; (800c7d4 <xTimerGenericCommand+0x98>)
 800c7a4:	6818      	ldr	r0, [r3, #0]
 800c7a6:	f107 0110 	add.w	r1, r7, #16
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f7fe f9ad 	bl	800ab0c <xQueueGenericSend>
 800c7b2:	6278      	str	r0, [r7, #36]	; 0x24
 800c7b4:	e008      	b.n	800c7c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c7b6:	4b07      	ldr	r3, [pc, #28]	; (800c7d4 <xTimerGenericCommand+0x98>)
 800c7b8:	6818      	ldr	r0, [r3, #0]
 800c7ba:	f107 0110 	add.w	r1, r7, #16
 800c7be:	2300      	movs	r3, #0
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	f7fe faa1 	bl	800ad08 <xQueueGenericSendFromISR>
 800c7c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3728      	adds	r7, #40	; 0x28
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20001774 	.word	0x20001774

0800c7d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b088      	sub	sp, #32
 800c7dc:	af02      	add	r7, sp, #8
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7e2:	4b22      	ldr	r3, [pc, #136]	; (800c86c <prvProcessExpiredTimer+0x94>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe f85d 	bl	800a8b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7fc:	f003 0304 	and.w	r3, r3, #4
 800c800:	2b00      	cmp	r3, #0
 800c802:	d022      	beq.n	800c84a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	699a      	ldr	r2, [r3, #24]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	18d1      	adds	r1, r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	6978      	ldr	r0, [r7, #20]
 800c812:	f000 f8d1 	bl	800c9b8 <prvInsertTimerInActiveList>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d01f      	beq.n	800c85c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c81c:	2300      	movs	r3, #0
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	2300      	movs	r3, #0
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	2100      	movs	r1, #0
 800c826:	6978      	ldr	r0, [r7, #20]
 800c828:	f7ff ff88 	bl	800c73c <xTimerGenericCommand>
 800c82c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d113      	bne.n	800c85c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	60fb      	str	r3, [r7, #12]
}
 800c846:	bf00      	nop
 800c848:	e7fe      	b.n	800c848 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c850:	f023 0301 	bic.w	r3, r3, #1
 800c854:	b2da      	uxtb	r2, r3
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	6a1b      	ldr	r3, [r3, #32]
 800c860:	6978      	ldr	r0, [r7, #20]
 800c862:	4798      	blx	r3
}
 800c864:	bf00      	nop
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	2000176c 	.word	0x2000176c

0800c870 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c878:	f107 0308 	add.w	r3, r7, #8
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 f857 	bl	800c930 <prvGetNextExpireTime>
 800c882:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	4619      	mov	r1, r3
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f000 f803 	bl	800c894 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c88e:	f000 f8d5 	bl	800ca3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c892:	e7f1      	b.n	800c878 <prvTimerTask+0x8>

0800c894 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c89e:	f7ff f8b5 	bl	800ba0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8a2:	f107 0308 	add.w	r3, r7, #8
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f000 f866 	bl	800c978 <prvSampleTimeNow>
 800c8ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d130      	bne.n	800c916 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10a      	bne.n	800c8d0 <prvProcessTimerOrBlockTask+0x3c>
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d806      	bhi.n	800c8d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c8c2:	f7ff f8b1 	bl	800ba28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c8c6:	68f9      	ldr	r1, [r7, #12]
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f7ff ff85 	bl	800c7d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c8ce:	e024      	b.n	800c91a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d008      	beq.n	800c8e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c8d6:	4b13      	ldr	r3, [pc, #76]	; (800c924 <prvProcessTimerOrBlockTask+0x90>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d101      	bne.n	800c8e4 <prvProcessTimerOrBlockTask+0x50>
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e000      	b.n	800c8e6 <prvProcessTimerOrBlockTask+0x52>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c8e8:	4b0f      	ldr	r3, [pc, #60]	; (800c928 <prvProcessTimerOrBlockTask+0x94>)
 800c8ea:	6818      	ldr	r0, [r3, #0]
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	683a      	ldr	r2, [r7, #0]
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f7fe fcbd 	bl	800b274 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8fa:	f7ff f895 	bl	800ba28 <xTaskResumeAll>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10a      	bne.n	800c91a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c904:	4b09      	ldr	r3, [pc, #36]	; (800c92c <prvProcessTimerOrBlockTask+0x98>)
 800c906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	f3bf 8f6f 	isb	sy
}
 800c914:	e001      	b.n	800c91a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c916:	f7ff f887 	bl	800ba28 <xTaskResumeAll>
}
 800c91a:	bf00      	nop
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	20001770 	.word	0x20001770
 800c928:	20001774 	.word	0x20001774
 800c92c:	e000ed04 	.word	0xe000ed04

0800c930 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c938:	4b0e      	ldr	r3, [pc, #56]	; (800c974 <prvGetNextExpireTime+0x44>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d101      	bne.n	800c946 <prvGetNextExpireTime+0x16>
 800c942:	2201      	movs	r2, #1
 800c944:	e000      	b.n	800c948 <prvGetNextExpireTime+0x18>
 800c946:	2200      	movs	r2, #0
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d105      	bne.n	800c960 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c954:	4b07      	ldr	r3, [pc, #28]	; (800c974 <prvGetNextExpireTime+0x44>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	60fb      	str	r3, [r7, #12]
 800c95e:	e001      	b.n	800c964 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c960:	2300      	movs	r3, #0
 800c962:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c964:	68fb      	ldr	r3, [r7, #12]
}
 800c966:	4618      	mov	r0, r3
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	2000176c 	.word	0x2000176c

0800c978 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c980:	f7ff f8f0 	bl	800bb64 <xTaskGetTickCount>
 800c984:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c986:	4b0b      	ldr	r3, [pc, #44]	; (800c9b4 <prvSampleTimeNow+0x3c>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68fa      	ldr	r2, [r7, #12]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d205      	bcs.n	800c99c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c990:	f000 f936 	bl	800cc00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	601a      	str	r2, [r3, #0]
 800c99a:	e002      	b.n	800c9a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c9a2:	4a04      	ldr	r2, [pc, #16]	; (800c9b4 <prvSampleTimeNow+0x3c>)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	2000177c 	.word	0x2000177c

0800c9b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b086      	sub	sp, #24
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
 800c9c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d812      	bhi.n	800ca04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	1ad2      	subs	r2, r2, r3
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d302      	bcc.n	800c9f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	617b      	str	r3, [r7, #20]
 800c9f0:	e01b      	b.n	800ca2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c9f2:	4b10      	ldr	r3, [pc, #64]	; (800ca34 <prvInsertTimerInActiveList+0x7c>)
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	4610      	mov	r0, r2
 800c9fe:	f7fd ff1e 	bl	800a83e <vListInsert>
 800ca02:	e012      	b.n	800ca2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d206      	bcs.n	800ca1a <prvInsertTimerInActiveList+0x62>
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d302      	bcc.n	800ca1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ca14:	2301      	movs	r3, #1
 800ca16:	617b      	str	r3, [r7, #20]
 800ca18:	e007      	b.n	800ca2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca1a:	4b07      	ldr	r3, [pc, #28]	; (800ca38 <prvInsertTimerInActiveList+0x80>)
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	3304      	adds	r3, #4
 800ca22:	4619      	mov	r1, r3
 800ca24:	4610      	mov	r0, r2
 800ca26:	f7fd ff0a 	bl	800a83e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ca2a:	697b      	ldr	r3, [r7, #20]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	20001770 	.word	0x20001770
 800ca38:	2000176c 	.word	0x2000176c

0800ca3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b08e      	sub	sp, #56	; 0x38
 800ca40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca42:	e0ca      	b.n	800cbda <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	da18      	bge.n	800ca7c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca4a:	1d3b      	adds	r3, r7, #4
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10a      	bne.n	800ca6c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	61fb      	str	r3, [r7, #28]
}
 800ca68:	bf00      	nop
 800ca6a:	e7fe      	b.n	800ca6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca72:	6850      	ldr	r0, [r2, #4]
 800ca74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca76:	6892      	ldr	r2, [r2, #8]
 800ca78:	4611      	mov	r1, r2
 800ca7a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f2c0 80aa 	blt.w	800cbd8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	695b      	ldr	r3, [r3, #20]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d004      	beq.n	800ca9a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca92:	3304      	adds	r3, #4
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fd ff0b 	bl	800a8b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca9a:	463b      	mov	r3, r7
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff ff6b 	bl	800c978 <prvSampleTimeNow>
 800caa2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b09      	cmp	r3, #9
 800caa8:	f200 8097 	bhi.w	800cbda <prvProcessReceivedCommands+0x19e>
 800caac:	a201      	add	r2, pc, #4	; (adr r2, 800cab4 <prvProcessReceivedCommands+0x78>)
 800caae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab2:	bf00      	nop
 800cab4:	0800cadd 	.word	0x0800cadd
 800cab8:	0800cadd 	.word	0x0800cadd
 800cabc:	0800cadd 	.word	0x0800cadd
 800cac0:	0800cb51 	.word	0x0800cb51
 800cac4:	0800cb65 	.word	0x0800cb65
 800cac8:	0800cbaf 	.word	0x0800cbaf
 800cacc:	0800cadd 	.word	0x0800cadd
 800cad0:	0800cadd 	.word	0x0800cadd
 800cad4:	0800cb51 	.word	0x0800cb51
 800cad8:	0800cb65 	.word	0x0800cb65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cae2:	f043 0301 	orr.w	r3, r3, #1
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf2:	699b      	ldr	r3, [r3, #24]
 800caf4:	18d1      	adds	r1, r2, r3
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cafc:	f7ff ff5c 	bl	800c9b8 <prvInsertTimerInActiveList>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d069      	beq.n	800cbda <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb08:	6a1b      	ldr	r3, [r3, #32]
 800cb0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb14:	f003 0304 	and.w	r3, r3, #4
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d05e      	beq.n	800cbda <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	441a      	add	r2, r3
 800cb24:	2300      	movs	r3, #0
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	2300      	movs	r3, #0
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb2e:	f7ff fe05 	bl	800c73c <xTimerGenericCommand>
 800cb32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d14f      	bne.n	800cbda <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	61bb      	str	r3, [r7, #24]
}
 800cb4c:	bf00      	nop
 800cb4e:	e7fe      	b.n	800cb4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb56:	f023 0301 	bic.w	r3, r3, #1
 800cb5a:	b2da      	uxtb	r2, r3
 800cb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cb62:	e03a      	b.n	800cbda <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb6a:	f043 0301 	orr.w	r3, r3, #1
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10a      	bne.n	800cb9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	617b      	str	r3, [r7, #20]
}
 800cb96:	bf00      	nop
 800cb98:	e7fe      	b.n	800cb98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9c:	699a      	ldr	r2, [r3, #24]
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba0:	18d1      	adds	r1, r2, r3
 800cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cba8:	f7ff ff06 	bl	800c9b8 <prvInsertTimerInActiveList>
					break;
 800cbac:	e015      	b.n	800cbda <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbb4:	f003 0302 	and.w	r3, r3, #2
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d103      	bne.n	800cbc4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cbbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbbe:	f000 fbe3 	bl	800d388 <vPortFree>
 800cbc2:	e00a      	b.n	800cbda <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cbca:	f023 0301 	bic.w	r3, r3, #1
 800cbce:	b2da      	uxtb	r2, r3
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cbd6:	e000      	b.n	800cbda <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cbd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbda:	4b08      	ldr	r3, [pc, #32]	; (800cbfc <prvProcessReceivedCommands+0x1c0>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	1d39      	adds	r1, r7, #4
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe f92c 	bl	800ae40 <xQueueReceive>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f47f af2a 	bne.w	800ca44 <prvProcessReceivedCommands+0x8>
	}
}
 800cbf0:	bf00      	nop
 800cbf2:	bf00      	nop
 800cbf4:	3730      	adds	r7, #48	; 0x30
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20001774 	.word	0x20001774

0800cc00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc06:	e048      	b.n	800cc9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc08:	4b2d      	ldr	r3, [pc, #180]	; (800ccc0 <prvSwitchTimerLists+0xc0>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc12:	4b2b      	ldr	r3, [pc, #172]	; (800ccc0 <prvSwitchTimerLists+0xc0>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3304      	adds	r3, #4
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fd fe45 	bl	800a8b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc34:	f003 0304 	and.w	r3, r3, #4
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d02e      	beq.n	800cc9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	699b      	ldr	r3, [r3, #24]
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	4413      	add	r3, r2
 800cc44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc46:	68ba      	ldr	r2, [r7, #8]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d90e      	bls.n	800cc6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	68fa      	ldr	r2, [r7, #12]
 800cc58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc5a:	4b19      	ldr	r3, [pc, #100]	; (800ccc0 <prvSwitchTimerLists+0xc0>)
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3304      	adds	r3, #4
 800cc62:	4619      	mov	r1, r3
 800cc64:	4610      	mov	r0, r2
 800cc66:	f7fd fdea 	bl	800a83e <vListInsert>
 800cc6a:	e016      	b.n	800cc9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	2300      	movs	r3, #0
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	2100      	movs	r1, #0
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f7ff fd60 	bl	800c73c <xTimerGenericCommand>
 800cc7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10a      	bne.n	800cc9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	603b      	str	r3, [r7, #0]
}
 800cc96:	bf00      	nop
 800cc98:	e7fe      	b.n	800cc98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc9a:	4b09      	ldr	r3, [pc, #36]	; (800ccc0 <prvSwitchTimerLists+0xc0>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1b1      	bne.n	800cc08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cca4:	4b06      	ldr	r3, [pc, #24]	; (800ccc0 <prvSwitchTimerLists+0xc0>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ccaa:	4b06      	ldr	r3, [pc, #24]	; (800ccc4 <prvSwitchTimerLists+0xc4>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a04      	ldr	r2, [pc, #16]	; (800ccc0 <prvSwitchTimerLists+0xc0>)
 800ccb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ccb2:	4a04      	ldr	r2, [pc, #16]	; (800ccc4 <prvSwitchTimerLists+0xc4>)
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	6013      	str	r3, [r2, #0]
}
 800ccb8:	bf00      	nop
 800ccba:	3718      	adds	r7, #24
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	2000176c 	.word	0x2000176c
 800ccc4:	20001770 	.word	0x20001770

0800ccc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ccce:	f000 f969 	bl	800cfa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ccd2:	4b15      	ldr	r3, [pc, #84]	; (800cd28 <prvCheckForValidListAndQueue+0x60>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d120      	bne.n	800cd1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ccda:	4814      	ldr	r0, [pc, #80]	; (800cd2c <prvCheckForValidListAndQueue+0x64>)
 800ccdc:	f7fd fd5e 	bl	800a79c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cce0:	4813      	ldr	r0, [pc, #76]	; (800cd30 <prvCheckForValidListAndQueue+0x68>)
 800cce2:	f7fd fd5b 	bl	800a79c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cce6:	4b13      	ldr	r3, [pc, #76]	; (800cd34 <prvCheckForValidListAndQueue+0x6c>)
 800cce8:	4a10      	ldr	r2, [pc, #64]	; (800cd2c <prvCheckForValidListAndQueue+0x64>)
 800ccea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ccec:	4b12      	ldr	r3, [pc, #72]	; (800cd38 <prvCheckForValidListAndQueue+0x70>)
 800ccee:	4a10      	ldr	r2, [pc, #64]	; (800cd30 <prvCheckForValidListAndQueue+0x68>)
 800ccf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	4b11      	ldr	r3, [pc, #68]	; (800cd3c <prvCheckForValidListAndQueue+0x74>)
 800ccf8:	4a11      	ldr	r2, [pc, #68]	; (800cd40 <prvCheckForValidListAndQueue+0x78>)
 800ccfa:	2110      	movs	r1, #16
 800ccfc:	200a      	movs	r0, #10
 800ccfe:	f7fd fe69 	bl	800a9d4 <xQueueGenericCreateStatic>
 800cd02:	4603      	mov	r3, r0
 800cd04:	4a08      	ldr	r2, [pc, #32]	; (800cd28 <prvCheckForValidListAndQueue+0x60>)
 800cd06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd08:	4b07      	ldr	r3, [pc, #28]	; (800cd28 <prvCheckForValidListAndQueue+0x60>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d005      	beq.n	800cd1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd10:	4b05      	ldr	r3, [pc, #20]	; (800cd28 <prvCheckForValidListAndQueue+0x60>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	490b      	ldr	r1, [pc, #44]	; (800cd44 <prvCheckForValidListAndQueue+0x7c>)
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fe fa82 	bl	800b220 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd1c:	f000 f972 	bl	800d004 <vPortExitCritical>
}
 800cd20:	bf00      	nop
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	20001774 	.word	0x20001774
 800cd2c:	20001744 	.word	0x20001744
 800cd30:	20001758 	.word	0x20001758
 800cd34:	2000176c 	.word	0x2000176c
 800cd38:	20001770 	.word	0x20001770
 800cd3c:	20001820 	.word	0x20001820
 800cd40:	20001780 	.word	0x20001780
 800cd44:	0800e920 	.word	0x0800e920

0800cd48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	3b04      	subs	r3, #4
 800cd58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cd60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3b04      	subs	r3, #4
 800cd66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	f023 0201 	bic.w	r2, r3, #1
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3b04      	subs	r3, #4
 800cd76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd78:	4a0c      	ldr	r2, [pc, #48]	; (800cdac <pxPortInitialiseStack+0x64>)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3b14      	subs	r3, #20
 800cd82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	3b04      	subs	r3, #4
 800cd8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f06f 0202 	mvn.w	r2, #2
 800cd96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	3b20      	subs	r3, #32
 800cd9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	0800cdb1 	.word	0x0800cdb1

0800cdb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cdba:	4b12      	ldr	r3, [pc, #72]	; (800ce04 <prvTaskExitError+0x54>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc2:	d00a      	beq.n	800cdda <prvTaskExitError+0x2a>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	60fb      	str	r3, [r7, #12]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <prvTaskExitError+0x28>
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	60bb      	str	r3, [r7, #8]
}
 800cdec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cdee:	bf00      	nop
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d0fc      	beq.n	800cdf0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cdf6:	bf00      	nop
 800cdf8:	bf00      	nop
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr
 800ce04:	20000008 	.word	0x20000008
	...

0800ce10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce10:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <pxCurrentTCBConst2>)
 800ce12:	6819      	ldr	r1, [r3, #0]
 800ce14:	6808      	ldr	r0, [r1, #0]
 800ce16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1a:	f380 8809 	msr	PSP, r0
 800ce1e:	f3bf 8f6f 	isb	sy
 800ce22:	f04f 0000 	mov.w	r0, #0
 800ce26:	f380 8811 	msr	BASEPRI, r0
 800ce2a:	4770      	bx	lr
 800ce2c:	f3af 8000 	nop.w

0800ce30 <pxCurrentTCBConst2>:
 800ce30:	2000123c 	.word	0x2000123c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop

0800ce38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce38:	4808      	ldr	r0, [pc, #32]	; (800ce5c <prvPortStartFirstTask+0x24>)
 800ce3a:	6800      	ldr	r0, [r0, #0]
 800ce3c:	6800      	ldr	r0, [r0, #0]
 800ce3e:	f380 8808 	msr	MSP, r0
 800ce42:	f04f 0000 	mov.w	r0, #0
 800ce46:	f380 8814 	msr	CONTROL, r0
 800ce4a:	b662      	cpsie	i
 800ce4c:	b661      	cpsie	f
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	df00      	svc	0
 800ce58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ce5a:	bf00      	nop
 800ce5c:	e000ed08 	.word	0xe000ed08

0800ce60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ce66:	4b46      	ldr	r3, [pc, #280]	; (800cf80 <xPortStartScheduler+0x120>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a46      	ldr	r2, [pc, #280]	; (800cf84 <xPortStartScheduler+0x124>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d10a      	bne.n	800ce86 <xPortStartScheduler+0x26>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	613b      	str	r3, [r7, #16]
}
 800ce82:	bf00      	nop
 800ce84:	e7fe      	b.n	800ce84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce86:	4b3e      	ldr	r3, [pc, #248]	; (800cf80 <xPortStartScheduler+0x120>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a3f      	ldr	r2, [pc, #252]	; (800cf88 <xPortStartScheduler+0x128>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d10a      	bne.n	800cea6 <xPortStartScheduler+0x46>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	60fb      	str	r3, [r7, #12]
}
 800cea2:	bf00      	nop
 800cea4:	e7fe      	b.n	800cea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cea6:	4b39      	ldr	r3, [pc, #228]	; (800cf8c <xPortStartScheduler+0x12c>)
 800cea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	22ff      	movs	r2, #255	; 0xff
 800ceb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cec0:	78fb      	ldrb	r3, [r7, #3]
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	4b31      	ldr	r3, [pc, #196]	; (800cf90 <xPortStartScheduler+0x130>)
 800cecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cece:	4b31      	ldr	r3, [pc, #196]	; (800cf94 <xPortStartScheduler+0x134>)
 800ced0:	2207      	movs	r2, #7
 800ced2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ced4:	e009      	b.n	800ceea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ced6:	4b2f      	ldr	r3, [pc, #188]	; (800cf94 <xPortStartScheduler+0x134>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	3b01      	subs	r3, #1
 800cedc:	4a2d      	ldr	r2, [pc, #180]	; (800cf94 <xPortStartScheduler+0x134>)
 800cede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cee0:	78fb      	ldrb	r3, [r7, #3]
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ceea:	78fb      	ldrb	r3, [r7, #3]
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cef2:	2b80      	cmp	r3, #128	; 0x80
 800cef4:	d0ef      	beq.n	800ced6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cef6:	4b27      	ldr	r3, [pc, #156]	; (800cf94 <xPortStartScheduler+0x134>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f1c3 0307 	rsb	r3, r3, #7
 800cefe:	2b04      	cmp	r3, #4
 800cf00:	d00a      	beq.n	800cf18 <xPortStartScheduler+0xb8>
	__asm volatile
 800cf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf06:	f383 8811 	msr	BASEPRI, r3
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	f3bf 8f4f 	dsb	sy
 800cf12:	60bb      	str	r3, [r7, #8]
}
 800cf14:	bf00      	nop
 800cf16:	e7fe      	b.n	800cf16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf18:	4b1e      	ldr	r3, [pc, #120]	; (800cf94 <xPortStartScheduler+0x134>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	021b      	lsls	r3, r3, #8
 800cf1e:	4a1d      	ldr	r2, [pc, #116]	; (800cf94 <xPortStartScheduler+0x134>)
 800cf20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf22:	4b1c      	ldr	r3, [pc, #112]	; (800cf94 <xPortStartScheduler+0x134>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cf2a:	4a1a      	ldr	r2, [pc, #104]	; (800cf94 <xPortStartScheduler+0x134>)
 800cf2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf36:	4b18      	ldr	r3, [pc, #96]	; (800cf98 <xPortStartScheduler+0x138>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a17      	ldr	r2, [pc, #92]	; (800cf98 <xPortStartScheduler+0x138>)
 800cf3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cf42:	4b15      	ldr	r3, [pc, #84]	; (800cf98 <xPortStartScheduler+0x138>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a14      	ldr	r2, [pc, #80]	; (800cf98 <xPortStartScheduler+0x138>)
 800cf48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cf4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cf4e:	f000 f8dd 	bl	800d10c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cf52:	4b12      	ldr	r3, [pc, #72]	; (800cf9c <xPortStartScheduler+0x13c>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cf58:	f000 f8fc 	bl	800d154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cf5c:	4b10      	ldr	r3, [pc, #64]	; (800cfa0 <xPortStartScheduler+0x140>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a0f      	ldr	r2, [pc, #60]	; (800cfa0 <xPortStartScheduler+0x140>)
 800cf62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cf66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cf68:	f7ff ff66 	bl	800ce38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cf6c:	f7fe fec4 	bl	800bcf8 <vTaskSwitchContext>
	prvTaskExitError();
 800cf70:	f7ff ff1e 	bl	800cdb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	e000ed00 	.word	0xe000ed00
 800cf84:	410fc271 	.word	0x410fc271
 800cf88:	410fc270 	.word	0x410fc270
 800cf8c:	e000e400 	.word	0xe000e400
 800cf90:	20001870 	.word	0x20001870
 800cf94:	20001874 	.word	0x20001874
 800cf98:	e000ed20 	.word	0xe000ed20
 800cf9c:	20000008 	.word	0x20000008
 800cfa0:	e000ef34 	.word	0xe000ef34

0800cfa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
	__asm volatile
 800cfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	607b      	str	r3, [r7, #4]
}
 800cfbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cfbe:	4b0f      	ldr	r3, [pc, #60]	; (800cffc <vPortEnterCritical+0x58>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	4a0d      	ldr	r2, [pc, #52]	; (800cffc <vPortEnterCritical+0x58>)
 800cfc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cfc8:	4b0c      	ldr	r3, [pc, #48]	; (800cffc <vPortEnterCritical+0x58>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d10f      	bne.n	800cff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cfd0:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <vPortEnterCritical+0x5c>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00a      	beq.n	800cff0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	603b      	str	r3, [r7, #0]
}
 800cfec:	bf00      	nop
 800cfee:	e7fe      	b.n	800cfee <vPortEnterCritical+0x4a>
	}
}
 800cff0:	bf00      	nop
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr
 800cffc:	20000008 	.word	0x20000008
 800d000:	e000ed04 	.word	0xe000ed04

0800d004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d00a:	4b12      	ldr	r3, [pc, #72]	; (800d054 <vPortExitCritical+0x50>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d10a      	bne.n	800d028 <vPortExitCritical+0x24>
	__asm volatile
 800d012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d016:	f383 8811 	msr	BASEPRI, r3
 800d01a:	f3bf 8f6f 	isb	sy
 800d01e:	f3bf 8f4f 	dsb	sy
 800d022:	607b      	str	r3, [r7, #4]
}
 800d024:	bf00      	nop
 800d026:	e7fe      	b.n	800d026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d028:	4b0a      	ldr	r3, [pc, #40]	; (800d054 <vPortExitCritical+0x50>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	4a09      	ldr	r2, [pc, #36]	; (800d054 <vPortExitCritical+0x50>)
 800d030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d032:	4b08      	ldr	r3, [pc, #32]	; (800d054 <vPortExitCritical+0x50>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d105      	bne.n	800d046 <vPortExitCritical+0x42>
 800d03a:	2300      	movs	r3, #0
 800d03c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	f383 8811 	msr	BASEPRI, r3
}
 800d044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d046:	bf00      	nop
 800d048:	370c      	adds	r7, #12
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	20000008 	.word	0x20000008
	...

0800d060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d060:	f3ef 8009 	mrs	r0, PSP
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	4b15      	ldr	r3, [pc, #84]	; (800d0c0 <pxCurrentTCBConst>)
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	f01e 0f10 	tst.w	lr, #16
 800d070:	bf08      	it	eq
 800d072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07a:	6010      	str	r0, [r2, #0]
 800d07c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d080:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d084:	f380 8811 	msr	BASEPRI, r0
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f7fe fe32 	bl	800bcf8 <vTaskSwitchContext>
 800d094:	f04f 0000 	mov.w	r0, #0
 800d098:	f380 8811 	msr	BASEPRI, r0
 800d09c:	bc09      	pop	{r0, r3}
 800d09e:	6819      	ldr	r1, [r3, #0]
 800d0a0:	6808      	ldr	r0, [r1, #0]
 800d0a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a6:	f01e 0f10 	tst.w	lr, #16
 800d0aa:	bf08      	it	eq
 800d0ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d0b0:	f380 8809 	msr	PSP, r0
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	f3af 8000 	nop.w

0800d0c0 <pxCurrentTCBConst>:
 800d0c0:	2000123c 	.word	0x2000123c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d0c4:	bf00      	nop
 800d0c6:	bf00      	nop

0800d0c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	607b      	str	r3, [r7, #4]
}
 800d0e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d0e2:	f7fe fd4f 	bl	800bb84 <xTaskIncrementTick>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d003      	beq.n	800d0f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d0ec:	4b06      	ldr	r3, [pc, #24]	; (800d108 <xPortSysTickHandler+0x40>)
 800d0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0f2:	601a      	str	r2, [r3, #0]
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	f383 8811 	msr	BASEPRI, r3
}
 800d0fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d100:	bf00      	nop
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	e000ed04 	.word	0xe000ed04

0800d10c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d10c:	b480      	push	{r7}
 800d10e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d110:	4b0b      	ldr	r3, [pc, #44]	; (800d140 <vPortSetupTimerInterrupt+0x34>)
 800d112:	2200      	movs	r2, #0
 800d114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d116:	4b0b      	ldr	r3, [pc, #44]	; (800d144 <vPortSetupTimerInterrupt+0x38>)
 800d118:	2200      	movs	r2, #0
 800d11a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d11c:	4b0a      	ldr	r3, [pc, #40]	; (800d148 <vPortSetupTimerInterrupt+0x3c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a0a      	ldr	r2, [pc, #40]	; (800d14c <vPortSetupTimerInterrupt+0x40>)
 800d122:	fba2 2303 	umull	r2, r3, r2, r3
 800d126:	099b      	lsrs	r3, r3, #6
 800d128:	4a09      	ldr	r2, [pc, #36]	; (800d150 <vPortSetupTimerInterrupt+0x44>)
 800d12a:	3b01      	subs	r3, #1
 800d12c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d12e:	4b04      	ldr	r3, [pc, #16]	; (800d140 <vPortSetupTimerInterrupt+0x34>)
 800d130:	2207      	movs	r2, #7
 800d132:	601a      	str	r2, [r3, #0]
}
 800d134:	bf00      	nop
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop
 800d140:	e000e010 	.word	0xe000e010
 800d144:	e000e018 	.word	0xe000e018
 800d148:	20000000 	.word	0x20000000
 800d14c:	10624dd3 	.word	0x10624dd3
 800d150:	e000e014 	.word	0xe000e014

0800d154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d164 <vPortEnableVFP+0x10>
 800d158:	6801      	ldr	r1, [r0, #0]
 800d15a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d15e:	6001      	str	r1, [r0, #0]
 800d160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d162:	bf00      	nop
 800d164:	e000ed88 	.word	0xe000ed88

0800d168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d168:	b480      	push	{r7}
 800d16a:	b085      	sub	sp, #20
 800d16c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d16e:	f3ef 8305 	mrs	r3, IPSR
 800d172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2b0f      	cmp	r3, #15
 800d178:	d914      	bls.n	800d1a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d17a:	4a17      	ldr	r2, [pc, #92]	; (800d1d8 <vPortValidateInterruptPriority+0x70>)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	4413      	add	r3, r2
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d184:	4b15      	ldr	r3, [pc, #84]	; (800d1dc <vPortValidateInterruptPriority+0x74>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	7afa      	ldrb	r2, [r7, #11]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d20a      	bcs.n	800d1a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	607b      	str	r3, [r7, #4]
}
 800d1a0:	bf00      	nop
 800d1a2:	e7fe      	b.n	800d1a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d1a4:	4b0e      	ldr	r3, [pc, #56]	; (800d1e0 <vPortValidateInterruptPriority+0x78>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d1ac:	4b0d      	ldr	r3, [pc, #52]	; (800d1e4 <vPortValidateInterruptPriority+0x7c>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d90a      	bls.n	800d1ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b8:	f383 8811 	msr	BASEPRI, r3
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	603b      	str	r3, [r7, #0]
}
 800d1c6:	bf00      	nop
 800d1c8:	e7fe      	b.n	800d1c8 <vPortValidateInterruptPriority+0x60>
	}
 800d1ca:	bf00      	nop
 800d1cc:	3714      	adds	r7, #20
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop
 800d1d8:	e000e3f0 	.word	0xe000e3f0
 800d1dc:	20001870 	.word	0x20001870
 800d1e0:	e000ed0c 	.word	0xe000ed0c
 800d1e4:	20001874 	.word	0x20001874

0800d1e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b08a      	sub	sp, #40	; 0x28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d1f4:	f7fe fc0a 	bl	800ba0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d1f8:	4b5d      	ldr	r3, [pc, #372]	; (800d370 <pvPortMalloc+0x188>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d101      	bne.n	800d204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d200:	f000 f924 	bl	800d44c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d204:	4b5b      	ldr	r3, [pc, #364]	; (800d374 <pvPortMalloc+0x18c>)
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4013      	ands	r3, r2
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f040 8093 	bne.w	800d338 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d01d      	beq.n	800d254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d218:	2208      	movs	r2, #8
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	4413      	add	r3, r2
 800d21e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f003 0307 	and.w	r3, r3, #7
 800d226:	2b00      	cmp	r3, #0
 800d228:	d014      	beq.n	800d254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f023 0307 	bic.w	r3, r3, #7
 800d230:	3308      	adds	r3, #8
 800d232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f003 0307 	and.w	r3, r3, #7
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00a      	beq.n	800d254 <pvPortMalloc+0x6c>
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	617b      	str	r3, [r7, #20]
}
 800d250:	bf00      	nop
 800d252:	e7fe      	b.n	800d252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d06e      	beq.n	800d338 <pvPortMalloc+0x150>
 800d25a:	4b47      	ldr	r3, [pc, #284]	; (800d378 <pvPortMalloc+0x190>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	429a      	cmp	r2, r3
 800d262:	d869      	bhi.n	800d338 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d264:	4b45      	ldr	r3, [pc, #276]	; (800d37c <pvPortMalloc+0x194>)
 800d266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d268:	4b44      	ldr	r3, [pc, #272]	; (800d37c <pvPortMalloc+0x194>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d26e:	e004      	b.n	800d27a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	429a      	cmp	r2, r3
 800d282:	d903      	bls.n	800d28c <pvPortMalloc+0xa4>
 800d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1f1      	bne.n	800d270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d28c:	4b38      	ldr	r3, [pc, #224]	; (800d370 <pvPortMalloc+0x188>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d292:	429a      	cmp	r2, r3
 800d294:	d050      	beq.n	800d338 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d296:	6a3b      	ldr	r3, [r7, #32]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2208      	movs	r2, #8
 800d29c:	4413      	add	r3, r2
 800d29e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	6a3b      	ldr	r3, [r7, #32]
 800d2a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2aa:	685a      	ldr	r2, [r3, #4]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	1ad2      	subs	r2, r2, r3
 800d2b0:	2308      	movs	r3, #8
 800d2b2:	005b      	lsls	r3, r3, #1
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d91f      	bls.n	800d2f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4413      	add	r3, r2
 800d2be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	f003 0307 	and.w	r3, r3, #7
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00a      	beq.n	800d2e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	613b      	str	r3, [r7, #16]
}
 800d2dc:	bf00      	nop
 800d2de:	e7fe      	b.n	800d2de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e2:	685a      	ldr	r2, [r3, #4]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	1ad2      	subs	r2, r2, r3
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d2f2:	69b8      	ldr	r0, [r7, #24]
 800d2f4:	f000 f90c 	bl	800d510 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d2f8:	4b1f      	ldr	r3, [pc, #124]	; (800d378 <pvPortMalloc+0x190>)
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	4a1d      	ldr	r2, [pc, #116]	; (800d378 <pvPortMalloc+0x190>)
 800d304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d306:	4b1c      	ldr	r3, [pc, #112]	; (800d378 <pvPortMalloc+0x190>)
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	4b1d      	ldr	r3, [pc, #116]	; (800d380 <pvPortMalloc+0x198>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d203      	bcs.n	800d31a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d312:	4b19      	ldr	r3, [pc, #100]	; (800d378 <pvPortMalloc+0x190>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a1a      	ldr	r2, [pc, #104]	; (800d380 <pvPortMalloc+0x198>)
 800d318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31c:	685a      	ldr	r2, [r3, #4]
 800d31e:	4b15      	ldr	r3, [pc, #84]	; (800d374 <pvPortMalloc+0x18c>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	431a      	orrs	r2, r3
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32a:	2200      	movs	r2, #0
 800d32c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d32e:	4b15      	ldr	r3, [pc, #84]	; (800d384 <pvPortMalloc+0x19c>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	3301      	adds	r3, #1
 800d334:	4a13      	ldr	r2, [pc, #76]	; (800d384 <pvPortMalloc+0x19c>)
 800d336:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d338:	f7fe fb76 	bl	800ba28 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d33c:	69fb      	ldr	r3, [r7, #28]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d342:	f7f4 f9db 	bl	80016fc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	f003 0307 	and.w	r3, r3, #7
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00a      	beq.n	800d366 <pvPortMalloc+0x17e>
	__asm volatile
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	60fb      	str	r3, [r7, #12]
}
 800d362:	bf00      	nop
 800d364:	e7fe      	b.n	800d364 <pvPortMalloc+0x17c>
	return pvReturn;
 800d366:	69fb      	ldr	r3, [r7, #28]
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3728      	adds	r7, #40	; 0x28
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	20009880 	.word	0x20009880
 800d374:	20009894 	.word	0x20009894
 800d378:	20009884 	.word	0x20009884
 800d37c:	20009878 	.word	0x20009878
 800d380:	20009888 	.word	0x20009888
 800d384:	2000988c 	.word	0x2000988c

0800d388 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d04d      	beq.n	800d436 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d39a:	2308      	movs	r3, #8
 800d39c:	425b      	negs	r3, r3
 800d39e:	697a      	ldr	r2, [r7, #20]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	4b24      	ldr	r3, [pc, #144]	; (800d440 <vPortFree+0xb8>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10a      	bne.n	800d3cc <vPortFree+0x44>
	__asm volatile
 800d3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	60fb      	str	r3, [r7, #12]
}
 800d3c8:	bf00      	nop
 800d3ca:	e7fe      	b.n	800d3ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00a      	beq.n	800d3ea <vPortFree+0x62>
	__asm volatile
 800d3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	60bb      	str	r3, [r7, #8]
}
 800d3e6:	bf00      	nop
 800d3e8:	e7fe      	b.n	800d3e8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	4b14      	ldr	r3, [pc, #80]	; (800d440 <vPortFree+0xb8>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d01e      	beq.n	800d436 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d11a      	bne.n	800d436 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	685a      	ldr	r2, [r3, #4]
 800d404:	4b0e      	ldr	r3, [pc, #56]	; (800d440 <vPortFree+0xb8>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	43db      	mvns	r3, r3
 800d40a:	401a      	ands	r2, r3
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d410:	f7fe fafc 	bl	800ba0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	685a      	ldr	r2, [r3, #4]
 800d418:	4b0a      	ldr	r3, [pc, #40]	; (800d444 <vPortFree+0xbc>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4413      	add	r3, r2
 800d41e:	4a09      	ldr	r2, [pc, #36]	; (800d444 <vPortFree+0xbc>)
 800d420:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d422:	6938      	ldr	r0, [r7, #16]
 800d424:	f000 f874 	bl	800d510 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d428:	4b07      	ldr	r3, [pc, #28]	; (800d448 <vPortFree+0xc0>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	3301      	adds	r3, #1
 800d42e:	4a06      	ldr	r2, [pc, #24]	; (800d448 <vPortFree+0xc0>)
 800d430:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d432:	f7fe faf9 	bl	800ba28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d436:	bf00      	nop
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	20009894 	.word	0x20009894
 800d444:	20009884 	.word	0x20009884
 800d448:	20009890 	.word	0x20009890

0800d44c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d44c:	b480      	push	{r7}
 800d44e:	b085      	sub	sp, #20
 800d450:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d456:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d458:	4b27      	ldr	r3, [pc, #156]	; (800d4f8 <prvHeapInit+0xac>)
 800d45a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f003 0307 	and.w	r3, r3, #7
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00c      	beq.n	800d480 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	3307      	adds	r3, #7
 800d46a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f023 0307 	bic.w	r3, r3, #7
 800d472:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	1ad3      	subs	r3, r2, r3
 800d47a:	4a1f      	ldr	r2, [pc, #124]	; (800d4f8 <prvHeapInit+0xac>)
 800d47c:	4413      	add	r3, r2
 800d47e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d484:	4a1d      	ldr	r2, [pc, #116]	; (800d4fc <prvHeapInit+0xb0>)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d48a:	4b1c      	ldr	r3, [pc, #112]	; (800d4fc <prvHeapInit+0xb0>)
 800d48c:	2200      	movs	r2, #0
 800d48e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	68ba      	ldr	r2, [r7, #8]
 800d494:	4413      	add	r3, r2
 800d496:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d498:	2208      	movs	r2, #8
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	1a9b      	subs	r3, r3, r2
 800d49e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f023 0307 	bic.w	r3, r3, #7
 800d4a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	4a15      	ldr	r2, [pc, #84]	; (800d500 <prvHeapInit+0xb4>)
 800d4ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d4ae:	4b14      	ldr	r3, [pc, #80]	; (800d500 <prvHeapInit+0xb4>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d4b6:	4b12      	ldr	r3, [pc, #72]	; (800d500 <prvHeapInit+0xb4>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	1ad2      	subs	r2, r2, r3
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d4cc:	4b0c      	ldr	r3, [pc, #48]	; (800d500 <prvHeapInit+0xb4>)
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	4a0a      	ldr	r2, [pc, #40]	; (800d504 <prvHeapInit+0xb8>)
 800d4da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	4a09      	ldr	r2, [pc, #36]	; (800d508 <prvHeapInit+0xbc>)
 800d4e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d4e4:	4b09      	ldr	r3, [pc, #36]	; (800d50c <prvHeapInit+0xc0>)
 800d4e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4ea:	601a      	str	r2, [r3, #0]
}
 800d4ec:	bf00      	nop
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	20001878 	.word	0x20001878
 800d4fc:	20009878 	.word	0x20009878
 800d500:	20009880 	.word	0x20009880
 800d504:	20009888 	.word	0x20009888
 800d508:	20009884 	.word	0x20009884
 800d50c:	20009894 	.word	0x20009894

0800d510 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d510:	b480      	push	{r7}
 800d512:	b085      	sub	sp, #20
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d518:	4b28      	ldr	r3, [pc, #160]	; (800d5bc <prvInsertBlockIntoFreeList+0xac>)
 800d51a:	60fb      	str	r3, [r7, #12]
 800d51c:	e002      	b.n	800d524 <prvInsertBlockIntoFreeList+0x14>
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d8f7      	bhi.n	800d51e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	4413      	add	r3, r2
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d108      	bne.n	800d552 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	441a      	add	r2, r3
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	441a      	add	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	429a      	cmp	r2, r3
 800d564:	d118      	bne.n	800d598 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	4b15      	ldr	r3, [pc, #84]	; (800d5c0 <prvInsertBlockIntoFreeList+0xb0>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d00d      	beq.n	800d58e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	685a      	ldr	r2, [r3, #4]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	441a      	add	r2, r3
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	601a      	str	r2, [r3, #0]
 800d58c:	e008      	b.n	800d5a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d58e:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <prvInsertBlockIntoFreeList+0xb0>)
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	601a      	str	r2, [r3, #0]
 800d596:	e003      	b.n	800d5a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d002      	beq.n	800d5ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5ae:	bf00      	nop
 800d5b0:	3714      	adds	r7, #20
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	20009878 	.word	0x20009878
 800d5c0:	20009880 	.word	0x20009880

0800d5c4 <__errno>:
 800d5c4:	4b01      	ldr	r3, [pc, #4]	; (800d5cc <__errno+0x8>)
 800d5c6:	6818      	ldr	r0, [r3, #0]
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	2000000c 	.word	0x2000000c

0800d5d0 <__libc_init_array>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	4d0d      	ldr	r5, [pc, #52]	; (800d608 <__libc_init_array+0x38>)
 800d5d4:	4c0d      	ldr	r4, [pc, #52]	; (800d60c <__libc_init_array+0x3c>)
 800d5d6:	1b64      	subs	r4, r4, r5
 800d5d8:	10a4      	asrs	r4, r4, #2
 800d5da:	2600      	movs	r6, #0
 800d5dc:	42a6      	cmp	r6, r4
 800d5de:	d109      	bne.n	800d5f4 <__libc_init_array+0x24>
 800d5e0:	4d0b      	ldr	r5, [pc, #44]	; (800d610 <__libc_init_array+0x40>)
 800d5e2:	4c0c      	ldr	r4, [pc, #48]	; (800d614 <__libc_init_array+0x44>)
 800d5e4:	f000 ff84 	bl	800e4f0 <_init>
 800d5e8:	1b64      	subs	r4, r4, r5
 800d5ea:	10a4      	asrs	r4, r4, #2
 800d5ec:	2600      	movs	r6, #0
 800d5ee:	42a6      	cmp	r6, r4
 800d5f0:	d105      	bne.n	800d5fe <__libc_init_array+0x2e>
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5f8:	4798      	blx	r3
 800d5fa:	3601      	adds	r6, #1
 800d5fc:	e7ee      	b.n	800d5dc <__libc_init_array+0xc>
 800d5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800d602:	4798      	blx	r3
 800d604:	3601      	adds	r6, #1
 800d606:	e7f2      	b.n	800d5ee <__libc_init_array+0x1e>
 800d608:	0800ebc8 	.word	0x0800ebc8
 800d60c:	0800ebc8 	.word	0x0800ebc8
 800d610:	0800ebc8 	.word	0x0800ebc8
 800d614:	0800ebcc 	.word	0x0800ebcc

0800d618 <memcpy>:
 800d618:	440a      	add	r2, r1
 800d61a:	4291      	cmp	r1, r2
 800d61c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d620:	d100      	bne.n	800d624 <memcpy+0xc>
 800d622:	4770      	bx	lr
 800d624:	b510      	push	{r4, lr}
 800d626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d62a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d62e:	4291      	cmp	r1, r2
 800d630:	d1f9      	bne.n	800d626 <memcpy+0xe>
 800d632:	bd10      	pop	{r4, pc}

0800d634 <memset>:
 800d634:	4402      	add	r2, r0
 800d636:	4603      	mov	r3, r0
 800d638:	4293      	cmp	r3, r2
 800d63a:	d100      	bne.n	800d63e <memset+0xa>
 800d63c:	4770      	bx	lr
 800d63e:	f803 1b01 	strb.w	r1, [r3], #1
 800d642:	e7f9      	b.n	800d638 <memset+0x4>

0800d644 <iprintf>:
 800d644:	b40f      	push	{r0, r1, r2, r3}
 800d646:	4b0a      	ldr	r3, [pc, #40]	; (800d670 <iprintf+0x2c>)
 800d648:	b513      	push	{r0, r1, r4, lr}
 800d64a:	681c      	ldr	r4, [r3, #0]
 800d64c:	b124      	cbz	r4, 800d658 <iprintf+0x14>
 800d64e:	69a3      	ldr	r3, [r4, #24]
 800d650:	b913      	cbnz	r3, 800d658 <iprintf+0x14>
 800d652:	4620      	mov	r0, r4
 800d654:	f000 f866 	bl	800d724 <__sinit>
 800d658:	ab05      	add	r3, sp, #20
 800d65a:	9a04      	ldr	r2, [sp, #16]
 800d65c:	68a1      	ldr	r1, [r4, #8]
 800d65e:	9301      	str	r3, [sp, #4]
 800d660:	4620      	mov	r0, r4
 800d662:	f000 f983 	bl	800d96c <_vfiprintf_r>
 800d666:	b002      	add	sp, #8
 800d668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d66c:	b004      	add	sp, #16
 800d66e:	4770      	bx	lr
 800d670:	2000000c 	.word	0x2000000c

0800d674 <std>:
 800d674:	2300      	movs	r3, #0
 800d676:	b510      	push	{r4, lr}
 800d678:	4604      	mov	r4, r0
 800d67a:	e9c0 3300 	strd	r3, r3, [r0]
 800d67e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d682:	6083      	str	r3, [r0, #8]
 800d684:	8181      	strh	r1, [r0, #12]
 800d686:	6643      	str	r3, [r0, #100]	; 0x64
 800d688:	81c2      	strh	r2, [r0, #14]
 800d68a:	6183      	str	r3, [r0, #24]
 800d68c:	4619      	mov	r1, r3
 800d68e:	2208      	movs	r2, #8
 800d690:	305c      	adds	r0, #92	; 0x5c
 800d692:	f7ff ffcf 	bl	800d634 <memset>
 800d696:	4b05      	ldr	r3, [pc, #20]	; (800d6ac <std+0x38>)
 800d698:	6263      	str	r3, [r4, #36]	; 0x24
 800d69a:	4b05      	ldr	r3, [pc, #20]	; (800d6b0 <std+0x3c>)
 800d69c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d69e:	4b05      	ldr	r3, [pc, #20]	; (800d6b4 <std+0x40>)
 800d6a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6a2:	4b05      	ldr	r3, [pc, #20]	; (800d6b8 <std+0x44>)
 800d6a4:	6224      	str	r4, [r4, #32]
 800d6a6:	6323      	str	r3, [r4, #48]	; 0x30
 800d6a8:	bd10      	pop	{r4, pc}
 800d6aa:	bf00      	nop
 800d6ac:	0800df15 	.word	0x0800df15
 800d6b0:	0800df37 	.word	0x0800df37
 800d6b4:	0800df6f 	.word	0x0800df6f
 800d6b8:	0800df93 	.word	0x0800df93

0800d6bc <_cleanup_r>:
 800d6bc:	4901      	ldr	r1, [pc, #4]	; (800d6c4 <_cleanup_r+0x8>)
 800d6be:	f000 b8af 	b.w	800d820 <_fwalk_reent>
 800d6c2:	bf00      	nop
 800d6c4:	0800e26d 	.word	0x0800e26d

0800d6c8 <__sfmoreglue>:
 800d6c8:	b570      	push	{r4, r5, r6, lr}
 800d6ca:	1e4a      	subs	r2, r1, #1
 800d6cc:	2568      	movs	r5, #104	; 0x68
 800d6ce:	4355      	muls	r5, r2
 800d6d0:	460e      	mov	r6, r1
 800d6d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d6d6:	f000 f8c5 	bl	800d864 <_malloc_r>
 800d6da:	4604      	mov	r4, r0
 800d6dc:	b140      	cbz	r0, 800d6f0 <__sfmoreglue+0x28>
 800d6de:	2100      	movs	r1, #0
 800d6e0:	e9c0 1600 	strd	r1, r6, [r0]
 800d6e4:	300c      	adds	r0, #12
 800d6e6:	60a0      	str	r0, [r4, #8]
 800d6e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d6ec:	f7ff ffa2 	bl	800d634 <memset>
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}

0800d6f4 <__sfp_lock_acquire>:
 800d6f4:	4801      	ldr	r0, [pc, #4]	; (800d6fc <__sfp_lock_acquire+0x8>)
 800d6f6:	f000 b8b3 	b.w	800d860 <__retarget_lock_acquire_recursive>
 800d6fa:	bf00      	nop
 800d6fc:	20009bc8 	.word	0x20009bc8

0800d700 <__sfp_lock_release>:
 800d700:	4801      	ldr	r0, [pc, #4]	; (800d708 <__sfp_lock_release+0x8>)
 800d702:	f000 b8ae 	b.w	800d862 <__retarget_lock_release_recursive>
 800d706:	bf00      	nop
 800d708:	20009bc8 	.word	0x20009bc8

0800d70c <__sinit_lock_acquire>:
 800d70c:	4801      	ldr	r0, [pc, #4]	; (800d714 <__sinit_lock_acquire+0x8>)
 800d70e:	f000 b8a7 	b.w	800d860 <__retarget_lock_acquire_recursive>
 800d712:	bf00      	nop
 800d714:	20009bc3 	.word	0x20009bc3

0800d718 <__sinit_lock_release>:
 800d718:	4801      	ldr	r0, [pc, #4]	; (800d720 <__sinit_lock_release+0x8>)
 800d71a:	f000 b8a2 	b.w	800d862 <__retarget_lock_release_recursive>
 800d71e:	bf00      	nop
 800d720:	20009bc3 	.word	0x20009bc3

0800d724 <__sinit>:
 800d724:	b510      	push	{r4, lr}
 800d726:	4604      	mov	r4, r0
 800d728:	f7ff fff0 	bl	800d70c <__sinit_lock_acquire>
 800d72c:	69a3      	ldr	r3, [r4, #24]
 800d72e:	b11b      	cbz	r3, 800d738 <__sinit+0x14>
 800d730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d734:	f7ff bff0 	b.w	800d718 <__sinit_lock_release>
 800d738:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d73c:	6523      	str	r3, [r4, #80]	; 0x50
 800d73e:	4b13      	ldr	r3, [pc, #76]	; (800d78c <__sinit+0x68>)
 800d740:	4a13      	ldr	r2, [pc, #76]	; (800d790 <__sinit+0x6c>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	62a2      	str	r2, [r4, #40]	; 0x28
 800d746:	42a3      	cmp	r3, r4
 800d748:	bf04      	itt	eq
 800d74a:	2301      	moveq	r3, #1
 800d74c:	61a3      	streq	r3, [r4, #24]
 800d74e:	4620      	mov	r0, r4
 800d750:	f000 f820 	bl	800d794 <__sfp>
 800d754:	6060      	str	r0, [r4, #4]
 800d756:	4620      	mov	r0, r4
 800d758:	f000 f81c 	bl	800d794 <__sfp>
 800d75c:	60a0      	str	r0, [r4, #8]
 800d75e:	4620      	mov	r0, r4
 800d760:	f000 f818 	bl	800d794 <__sfp>
 800d764:	2200      	movs	r2, #0
 800d766:	60e0      	str	r0, [r4, #12]
 800d768:	2104      	movs	r1, #4
 800d76a:	6860      	ldr	r0, [r4, #4]
 800d76c:	f7ff ff82 	bl	800d674 <std>
 800d770:	68a0      	ldr	r0, [r4, #8]
 800d772:	2201      	movs	r2, #1
 800d774:	2109      	movs	r1, #9
 800d776:	f7ff ff7d 	bl	800d674 <std>
 800d77a:	68e0      	ldr	r0, [r4, #12]
 800d77c:	2202      	movs	r2, #2
 800d77e:	2112      	movs	r1, #18
 800d780:	f7ff ff78 	bl	800d674 <std>
 800d784:	2301      	movs	r3, #1
 800d786:	61a3      	str	r3, [r4, #24]
 800d788:	e7d2      	b.n	800d730 <__sinit+0xc>
 800d78a:	bf00      	nop
 800d78c:	0800eb28 	.word	0x0800eb28
 800d790:	0800d6bd 	.word	0x0800d6bd

0800d794 <__sfp>:
 800d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d796:	4607      	mov	r7, r0
 800d798:	f7ff ffac 	bl	800d6f4 <__sfp_lock_acquire>
 800d79c:	4b1e      	ldr	r3, [pc, #120]	; (800d818 <__sfp+0x84>)
 800d79e:	681e      	ldr	r6, [r3, #0]
 800d7a0:	69b3      	ldr	r3, [r6, #24]
 800d7a2:	b913      	cbnz	r3, 800d7aa <__sfp+0x16>
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	f7ff ffbd 	bl	800d724 <__sinit>
 800d7aa:	3648      	adds	r6, #72	; 0x48
 800d7ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	d503      	bpl.n	800d7bc <__sfp+0x28>
 800d7b4:	6833      	ldr	r3, [r6, #0]
 800d7b6:	b30b      	cbz	r3, 800d7fc <__sfp+0x68>
 800d7b8:	6836      	ldr	r6, [r6, #0]
 800d7ba:	e7f7      	b.n	800d7ac <__sfp+0x18>
 800d7bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d7c0:	b9d5      	cbnz	r5, 800d7f8 <__sfp+0x64>
 800d7c2:	4b16      	ldr	r3, [pc, #88]	; (800d81c <__sfp+0x88>)
 800d7c4:	60e3      	str	r3, [r4, #12]
 800d7c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d7ca:	6665      	str	r5, [r4, #100]	; 0x64
 800d7cc:	f000 f847 	bl	800d85e <__retarget_lock_init_recursive>
 800d7d0:	f7ff ff96 	bl	800d700 <__sfp_lock_release>
 800d7d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d7d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d7dc:	6025      	str	r5, [r4, #0]
 800d7de:	61a5      	str	r5, [r4, #24]
 800d7e0:	2208      	movs	r2, #8
 800d7e2:	4629      	mov	r1, r5
 800d7e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d7e8:	f7ff ff24 	bl	800d634 <memset>
 800d7ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d7f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7f8:	3468      	adds	r4, #104	; 0x68
 800d7fa:	e7d9      	b.n	800d7b0 <__sfp+0x1c>
 800d7fc:	2104      	movs	r1, #4
 800d7fe:	4638      	mov	r0, r7
 800d800:	f7ff ff62 	bl	800d6c8 <__sfmoreglue>
 800d804:	4604      	mov	r4, r0
 800d806:	6030      	str	r0, [r6, #0]
 800d808:	2800      	cmp	r0, #0
 800d80a:	d1d5      	bne.n	800d7b8 <__sfp+0x24>
 800d80c:	f7ff ff78 	bl	800d700 <__sfp_lock_release>
 800d810:	230c      	movs	r3, #12
 800d812:	603b      	str	r3, [r7, #0]
 800d814:	e7ee      	b.n	800d7f4 <__sfp+0x60>
 800d816:	bf00      	nop
 800d818:	0800eb28 	.word	0x0800eb28
 800d81c:	ffff0001 	.word	0xffff0001

0800d820 <_fwalk_reent>:
 800d820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d824:	4606      	mov	r6, r0
 800d826:	4688      	mov	r8, r1
 800d828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d82c:	2700      	movs	r7, #0
 800d82e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d832:	f1b9 0901 	subs.w	r9, r9, #1
 800d836:	d505      	bpl.n	800d844 <_fwalk_reent+0x24>
 800d838:	6824      	ldr	r4, [r4, #0]
 800d83a:	2c00      	cmp	r4, #0
 800d83c:	d1f7      	bne.n	800d82e <_fwalk_reent+0xe>
 800d83e:	4638      	mov	r0, r7
 800d840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d844:	89ab      	ldrh	r3, [r5, #12]
 800d846:	2b01      	cmp	r3, #1
 800d848:	d907      	bls.n	800d85a <_fwalk_reent+0x3a>
 800d84a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d84e:	3301      	adds	r3, #1
 800d850:	d003      	beq.n	800d85a <_fwalk_reent+0x3a>
 800d852:	4629      	mov	r1, r5
 800d854:	4630      	mov	r0, r6
 800d856:	47c0      	blx	r8
 800d858:	4307      	orrs	r7, r0
 800d85a:	3568      	adds	r5, #104	; 0x68
 800d85c:	e7e9      	b.n	800d832 <_fwalk_reent+0x12>

0800d85e <__retarget_lock_init_recursive>:
 800d85e:	4770      	bx	lr

0800d860 <__retarget_lock_acquire_recursive>:
 800d860:	4770      	bx	lr

0800d862 <__retarget_lock_release_recursive>:
 800d862:	4770      	bx	lr

0800d864 <_malloc_r>:
 800d864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d866:	1ccd      	adds	r5, r1, #3
 800d868:	f025 0503 	bic.w	r5, r5, #3
 800d86c:	3508      	adds	r5, #8
 800d86e:	2d0c      	cmp	r5, #12
 800d870:	bf38      	it	cc
 800d872:	250c      	movcc	r5, #12
 800d874:	2d00      	cmp	r5, #0
 800d876:	4606      	mov	r6, r0
 800d878:	db01      	blt.n	800d87e <_malloc_r+0x1a>
 800d87a:	42a9      	cmp	r1, r5
 800d87c:	d903      	bls.n	800d886 <_malloc_r+0x22>
 800d87e:	230c      	movs	r3, #12
 800d880:	6033      	str	r3, [r6, #0]
 800d882:	2000      	movs	r0, #0
 800d884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d886:	f000 fda3 	bl	800e3d0 <__malloc_lock>
 800d88a:	4921      	ldr	r1, [pc, #132]	; (800d910 <_malloc_r+0xac>)
 800d88c:	680a      	ldr	r2, [r1, #0]
 800d88e:	4614      	mov	r4, r2
 800d890:	b99c      	cbnz	r4, 800d8ba <_malloc_r+0x56>
 800d892:	4f20      	ldr	r7, [pc, #128]	; (800d914 <_malloc_r+0xb0>)
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	b923      	cbnz	r3, 800d8a2 <_malloc_r+0x3e>
 800d898:	4621      	mov	r1, r4
 800d89a:	4630      	mov	r0, r6
 800d89c:	f000 fb2a 	bl	800def4 <_sbrk_r>
 800d8a0:	6038      	str	r0, [r7, #0]
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f000 fb25 	bl	800def4 <_sbrk_r>
 800d8aa:	1c43      	adds	r3, r0, #1
 800d8ac:	d123      	bne.n	800d8f6 <_malloc_r+0x92>
 800d8ae:	230c      	movs	r3, #12
 800d8b0:	6033      	str	r3, [r6, #0]
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	f000 fd92 	bl	800e3dc <__malloc_unlock>
 800d8b8:	e7e3      	b.n	800d882 <_malloc_r+0x1e>
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	1b5b      	subs	r3, r3, r5
 800d8be:	d417      	bmi.n	800d8f0 <_malloc_r+0x8c>
 800d8c0:	2b0b      	cmp	r3, #11
 800d8c2:	d903      	bls.n	800d8cc <_malloc_r+0x68>
 800d8c4:	6023      	str	r3, [r4, #0]
 800d8c6:	441c      	add	r4, r3
 800d8c8:	6025      	str	r5, [r4, #0]
 800d8ca:	e004      	b.n	800d8d6 <_malloc_r+0x72>
 800d8cc:	6863      	ldr	r3, [r4, #4]
 800d8ce:	42a2      	cmp	r2, r4
 800d8d0:	bf0c      	ite	eq
 800d8d2:	600b      	streq	r3, [r1, #0]
 800d8d4:	6053      	strne	r3, [r2, #4]
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	f000 fd80 	bl	800e3dc <__malloc_unlock>
 800d8dc:	f104 000b 	add.w	r0, r4, #11
 800d8e0:	1d23      	adds	r3, r4, #4
 800d8e2:	f020 0007 	bic.w	r0, r0, #7
 800d8e6:	1ac2      	subs	r2, r0, r3
 800d8e8:	d0cc      	beq.n	800d884 <_malloc_r+0x20>
 800d8ea:	1a1b      	subs	r3, r3, r0
 800d8ec:	50a3      	str	r3, [r4, r2]
 800d8ee:	e7c9      	b.n	800d884 <_malloc_r+0x20>
 800d8f0:	4622      	mov	r2, r4
 800d8f2:	6864      	ldr	r4, [r4, #4]
 800d8f4:	e7cc      	b.n	800d890 <_malloc_r+0x2c>
 800d8f6:	1cc4      	adds	r4, r0, #3
 800d8f8:	f024 0403 	bic.w	r4, r4, #3
 800d8fc:	42a0      	cmp	r0, r4
 800d8fe:	d0e3      	beq.n	800d8c8 <_malloc_r+0x64>
 800d900:	1a21      	subs	r1, r4, r0
 800d902:	4630      	mov	r0, r6
 800d904:	f000 faf6 	bl	800def4 <_sbrk_r>
 800d908:	3001      	adds	r0, #1
 800d90a:	d1dd      	bne.n	800d8c8 <_malloc_r+0x64>
 800d90c:	e7cf      	b.n	800d8ae <_malloc_r+0x4a>
 800d90e:	bf00      	nop
 800d910:	20009898 	.word	0x20009898
 800d914:	2000989c 	.word	0x2000989c

0800d918 <__sfputc_r>:
 800d918:	6893      	ldr	r3, [r2, #8]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	b410      	push	{r4}
 800d920:	6093      	str	r3, [r2, #8]
 800d922:	da08      	bge.n	800d936 <__sfputc_r+0x1e>
 800d924:	6994      	ldr	r4, [r2, #24]
 800d926:	42a3      	cmp	r3, r4
 800d928:	db01      	blt.n	800d92e <__sfputc_r+0x16>
 800d92a:	290a      	cmp	r1, #10
 800d92c:	d103      	bne.n	800d936 <__sfputc_r+0x1e>
 800d92e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d932:	f000 bb33 	b.w	800df9c <__swbuf_r>
 800d936:	6813      	ldr	r3, [r2, #0]
 800d938:	1c58      	adds	r0, r3, #1
 800d93a:	6010      	str	r0, [r2, #0]
 800d93c:	7019      	strb	r1, [r3, #0]
 800d93e:	4608      	mov	r0, r1
 800d940:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d944:	4770      	bx	lr

0800d946 <__sfputs_r>:
 800d946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d948:	4606      	mov	r6, r0
 800d94a:	460f      	mov	r7, r1
 800d94c:	4614      	mov	r4, r2
 800d94e:	18d5      	adds	r5, r2, r3
 800d950:	42ac      	cmp	r4, r5
 800d952:	d101      	bne.n	800d958 <__sfputs_r+0x12>
 800d954:	2000      	movs	r0, #0
 800d956:	e007      	b.n	800d968 <__sfputs_r+0x22>
 800d958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d95c:	463a      	mov	r2, r7
 800d95e:	4630      	mov	r0, r6
 800d960:	f7ff ffda 	bl	800d918 <__sfputc_r>
 800d964:	1c43      	adds	r3, r0, #1
 800d966:	d1f3      	bne.n	800d950 <__sfputs_r+0xa>
 800d968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d96c <_vfiprintf_r>:
 800d96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d970:	460d      	mov	r5, r1
 800d972:	b09d      	sub	sp, #116	; 0x74
 800d974:	4614      	mov	r4, r2
 800d976:	4698      	mov	r8, r3
 800d978:	4606      	mov	r6, r0
 800d97a:	b118      	cbz	r0, 800d984 <_vfiprintf_r+0x18>
 800d97c:	6983      	ldr	r3, [r0, #24]
 800d97e:	b90b      	cbnz	r3, 800d984 <_vfiprintf_r+0x18>
 800d980:	f7ff fed0 	bl	800d724 <__sinit>
 800d984:	4b89      	ldr	r3, [pc, #548]	; (800dbac <_vfiprintf_r+0x240>)
 800d986:	429d      	cmp	r5, r3
 800d988:	d11b      	bne.n	800d9c2 <_vfiprintf_r+0x56>
 800d98a:	6875      	ldr	r5, [r6, #4]
 800d98c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d98e:	07d9      	lsls	r1, r3, #31
 800d990:	d405      	bmi.n	800d99e <_vfiprintf_r+0x32>
 800d992:	89ab      	ldrh	r3, [r5, #12]
 800d994:	059a      	lsls	r2, r3, #22
 800d996:	d402      	bmi.n	800d99e <_vfiprintf_r+0x32>
 800d998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d99a:	f7ff ff61 	bl	800d860 <__retarget_lock_acquire_recursive>
 800d99e:	89ab      	ldrh	r3, [r5, #12]
 800d9a0:	071b      	lsls	r3, r3, #28
 800d9a2:	d501      	bpl.n	800d9a8 <_vfiprintf_r+0x3c>
 800d9a4:	692b      	ldr	r3, [r5, #16]
 800d9a6:	b9eb      	cbnz	r3, 800d9e4 <_vfiprintf_r+0x78>
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	f000 fb5a 	bl	800e064 <__swsetup_r>
 800d9b0:	b1c0      	cbz	r0, 800d9e4 <_vfiprintf_r+0x78>
 800d9b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9b4:	07dc      	lsls	r4, r3, #31
 800d9b6:	d50e      	bpl.n	800d9d6 <_vfiprintf_r+0x6a>
 800d9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9bc:	b01d      	add	sp, #116	; 0x74
 800d9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c2:	4b7b      	ldr	r3, [pc, #492]	; (800dbb0 <_vfiprintf_r+0x244>)
 800d9c4:	429d      	cmp	r5, r3
 800d9c6:	d101      	bne.n	800d9cc <_vfiprintf_r+0x60>
 800d9c8:	68b5      	ldr	r5, [r6, #8]
 800d9ca:	e7df      	b.n	800d98c <_vfiprintf_r+0x20>
 800d9cc:	4b79      	ldr	r3, [pc, #484]	; (800dbb4 <_vfiprintf_r+0x248>)
 800d9ce:	429d      	cmp	r5, r3
 800d9d0:	bf08      	it	eq
 800d9d2:	68f5      	ldreq	r5, [r6, #12]
 800d9d4:	e7da      	b.n	800d98c <_vfiprintf_r+0x20>
 800d9d6:	89ab      	ldrh	r3, [r5, #12]
 800d9d8:	0598      	lsls	r0, r3, #22
 800d9da:	d4ed      	bmi.n	800d9b8 <_vfiprintf_r+0x4c>
 800d9dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9de:	f7ff ff40 	bl	800d862 <__retarget_lock_release_recursive>
 800d9e2:	e7e9      	b.n	800d9b8 <_vfiprintf_r+0x4c>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e8:	2320      	movs	r3, #32
 800d9ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9f2:	2330      	movs	r3, #48	; 0x30
 800d9f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dbb8 <_vfiprintf_r+0x24c>
 800d9f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9fc:	f04f 0901 	mov.w	r9, #1
 800da00:	4623      	mov	r3, r4
 800da02:	469a      	mov	sl, r3
 800da04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da08:	b10a      	cbz	r2, 800da0e <_vfiprintf_r+0xa2>
 800da0a:	2a25      	cmp	r2, #37	; 0x25
 800da0c:	d1f9      	bne.n	800da02 <_vfiprintf_r+0x96>
 800da0e:	ebba 0b04 	subs.w	fp, sl, r4
 800da12:	d00b      	beq.n	800da2c <_vfiprintf_r+0xc0>
 800da14:	465b      	mov	r3, fp
 800da16:	4622      	mov	r2, r4
 800da18:	4629      	mov	r1, r5
 800da1a:	4630      	mov	r0, r6
 800da1c:	f7ff ff93 	bl	800d946 <__sfputs_r>
 800da20:	3001      	adds	r0, #1
 800da22:	f000 80aa 	beq.w	800db7a <_vfiprintf_r+0x20e>
 800da26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da28:	445a      	add	r2, fp
 800da2a:	9209      	str	r2, [sp, #36]	; 0x24
 800da2c:	f89a 3000 	ldrb.w	r3, [sl]
 800da30:	2b00      	cmp	r3, #0
 800da32:	f000 80a2 	beq.w	800db7a <_vfiprintf_r+0x20e>
 800da36:	2300      	movs	r3, #0
 800da38:	f04f 32ff 	mov.w	r2, #4294967295
 800da3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da40:	f10a 0a01 	add.w	sl, sl, #1
 800da44:	9304      	str	r3, [sp, #16]
 800da46:	9307      	str	r3, [sp, #28]
 800da48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da4c:	931a      	str	r3, [sp, #104]	; 0x68
 800da4e:	4654      	mov	r4, sl
 800da50:	2205      	movs	r2, #5
 800da52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da56:	4858      	ldr	r0, [pc, #352]	; (800dbb8 <_vfiprintf_r+0x24c>)
 800da58:	f7f2 fbc2 	bl	80001e0 <memchr>
 800da5c:	9a04      	ldr	r2, [sp, #16]
 800da5e:	b9d8      	cbnz	r0, 800da98 <_vfiprintf_r+0x12c>
 800da60:	06d1      	lsls	r1, r2, #27
 800da62:	bf44      	itt	mi
 800da64:	2320      	movmi	r3, #32
 800da66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da6a:	0713      	lsls	r3, r2, #28
 800da6c:	bf44      	itt	mi
 800da6e:	232b      	movmi	r3, #43	; 0x2b
 800da70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da74:	f89a 3000 	ldrb.w	r3, [sl]
 800da78:	2b2a      	cmp	r3, #42	; 0x2a
 800da7a:	d015      	beq.n	800daa8 <_vfiprintf_r+0x13c>
 800da7c:	9a07      	ldr	r2, [sp, #28]
 800da7e:	4654      	mov	r4, sl
 800da80:	2000      	movs	r0, #0
 800da82:	f04f 0c0a 	mov.w	ip, #10
 800da86:	4621      	mov	r1, r4
 800da88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da8c:	3b30      	subs	r3, #48	; 0x30
 800da8e:	2b09      	cmp	r3, #9
 800da90:	d94e      	bls.n	800db30 <_vfiprintf_r+0x1c4>
 800da92:	b1b0      	cbz	r0, 800dac2 <_vfiprintf_r+0x156>
 800da94:	9207      	str	r2, [sp, #28]
 800da96:	e014      	b.n	800dac2 <_vfiprintf_r+0x156>
 800da98:	eba0 0308 	sub.w	r3, r0, r8
 800da9c:	fa09 f303 	lsl.w	r3, r9, r3
 800daa0:	4313      	orrs	r3, r2
 800daa2:	9304      	str	r3, [sp, #16]
 800daa4:	46a2      	mov	sl, r4
 800daa6:	e7d2      	b.n	800da4e <_vfiprintf_r+0xe2>
 800daa8:	9b03      	ldr	r3, [sp, #12]
 800daaa:	1d19      	adds	r1, r3, #4
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	9103      	str	r1, [sp, #12]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	bfbb      	ittet	lt
 800dab4:	425b      	neglt	r3, r3
 800dab6:	f042 0202 	orrlt.w	r2, r2, #2
 800daba:	9307      	strge	r3, [sp, #28]
 800dabc:	9307      	strlt	r3, [sp, #28]
 800dabe:	bfb8      	it	lt
 800dac0:	9204      	strlt	r2, [sp, #16]
 800dac2:	7823      	ldrb	r3, [r4, #0]
 800dac4:	2b2e      	cmp	r3, #46	; 0x2e
 800dac6:	d10c      	bne.n	800dae2 <_vfiprintf_r+0x176>
 800dac8:	7863      	ldrb	r3, [r4, #1]
 800daca:	2b2a      	cmp	r3, #42	; 0x2a
 800dacc:	d135      	bne.n	800db3a <_vfiprintf_r+0x1ce>
 800dace:	9b03      	ldr	r3, [sp, #12]
 800dad0:	1d1a      	adds	r2, r3, #4
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	9203      	str	r2, [sp, #12]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	bfb8      	it	lt
 800dada:	f04f 33ff 	movlt.w	r3, #4294967295
 800dade:	3402      	adds	r4, #2
 800dae0:	9305      	str	r3, [sp, #20]
 800dae2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dbc8 <_vfiprintf_r+0x25c>
 800dae6:	7821      	ldrb	r1, [r4, #0]
 800dae8:	2203      	movs	r2, #3
 800daea:	4650      	mov	r0, sl
 800daec:	f7f2 fb78 	bl	80001e0 <memchr>
 800daf0:	b140      	cbz	r0, 800db04 <_vfiprintf_r+0x198>
 800daf2:	2340      	movs	r3, #64	; 0x40
 800daf4:	eba0 000a 	sub.w	r0, r0, sl
 800daf8:	fa03 f000 	lsl.w	r0, r3, r0
 800dafc:	9b04      	ldr	r3, [sp, #16]
 800dafe:	4303      	orrs	r3, r0
 800db00:	3401      	adds	r4, #1
 800db02:	9304      	str	r3, [sp, #16]
 800db04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db08:	482c      	ldr	r0, [pc, #176]	; (800dbbc <_vfiprintf_r+0x250>)
 800db0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db0e:	2206      	movs	r2, #6
 800db10:	f7f2 fb66 	bl	80001e0 <memchr>
 800db14:	2800      	cmp	r0, #0
 800db16:	d03f      	beq.n	800db98 <_vfiprintf_r+0x22c>
 800db18:	4b29      	ldr	r3, [pc, #164]	; (800dbc0 <_vfiprintf_r+0x254>)
 800db1a:	bb1b      	cbnz	r3, 800db64 <_vfiprintf_r+0x1f8>
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	3307      	adds	r3, #7
 800db20:	f023 0307 	bic.w	r3, r3, #7
 800db24:	3308      	adds	r3, #8
 800db26:	9303      	str	r3, [sp, #12]
 800db28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db2a:	443b      	add	r3, r7
 800db2c:	9309      	str	r3, [sp, #36]	; 0x24
 800db2e:	e767      	b.n	800da00 <_vfiprintf_r+0x94>
 800db30:	fb0c 3202 	mla	r2, ip, r2, r3
 800db34:	460c      	mov	r4, r1
 800db36:	2001      	movs	r0, #1
 800db38:	e7a5      	b.n	800da86 <_vfiprintf_r+0x11a>
 800db3a:	2300      	movs	r3, #0
 800db3c:	3401      	adds	r4, #1
 800db3e:	9305      	str	r3, [sp, #20]
 800db40:	4619      	mov	r1, r3
 800db42:	f04f 0c0a 	mov.w	ip, #10
 800db46:	4620      	mov	r0, r4
 800db48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db4c:	3a30      	subs	r2, #48	; 0x30
 800db4e:	2a09      	cmp	r2, #9
 800db50:	d903      	bls.n	800db5a <_vfiprintf_r+0x1ee>
 800db52:	2b00      	cmp	r3, #0
 800db54:	d0c5      	beq.n	800dae2 <_vfiprintf_r+0x176>
 800db56:	9105      	str	r1, [sp, #20]
 800db58:	e7c3      	b.n	800dae2 <_vfiprintf_r+0x176>
 800db5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800db5e:	4604      	mov	r4, r0
 800db60:	2301      	movs	r3, #1
 800db62:	e7f0      	b.n	800db46 <_vfiprintf_r+0x1da>
 800db64:	ab03      	add	r3, sp, #12
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	462a      	mov	r2, r5
 800db6a:	4b16      	ldr	r3, [pc, #88]	; (800dbc4 <_vfiprintf_r+0x258>)
 800db6c:	a904      	add	r1, sp, #16
 800db6e:	4630      	mov	r0, r6
 800db70:	f3af 8000 	nop.w
 800db74:	4607      	mov	r7, r0
 800db76:	1c78      	adds	r0, r7, #1
 800db78:	d1d6      	bne.n	800db28 <_vfiprintf_r+0x1bc>
 800db7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db7c:	07d9      	lsls	r1, r3, #31
 800db7e:	d405      	bmi.n	800db8c <_vfiprintf_r+0x220>
 800db80:	89ab      	ldrh	r3, [r5, #12]
 800db82:	059a      	lsls	r2, r3, #22
 800db84:	d402      	bmi.n	800db8c <_vfiprintf_r+0x220>
 800db86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db88:	f7ff fe6b 	bl	800d862 <__retarget_lock_release_recursive>
 800db8c:	89ab      	ldrh	r3, [r5, #12]
 800db8e:	065b      	lsls	r3, r3, #25
 800db90:	f53f af12 	bmi.w	800d9b8 <_vfiprintf_r+0x4c>
 800db94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db96:	e711      	b.n	800d9bc <_vfiprintf_r+0x50>
 800db98:	ab03      	add	r3, sp, #12
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	462a      	mov	r2, r5
 800db9e:	4b09      	ldr	r3, [pc, #36]	; (800dbc4 <_vfiprintf_r+0x258>)
 800dba0:	a904      	add	r1, sp, #16
 800dba2:	4630      	mov	r0, r6
 800dba4:	f000 f880 	bl	800dca8 <_printf_i>
 800dba8:	e7e4      	b.n	800db74 <_vfiprintf_r+0x208>
 800dbaa:	bf00      	nop
 800dbac:	0800eb4c 	.word	0x0800eb4c
 800dbb0:	0800eb6c 	.word	0x0800eb6c
 800dbb4:	0800eb2c 	.word	0x0800eb2c
 800dbb8:	0800eb8c 	.word	0x0800eb8c
 800dbbc:	0800eb96 	.word	0x0800eb96
 800dbc0:	00000000 	.word	0x00000000
 800dbc4:	0800d947 	.word	0x0800d947
 800dbc8:	0800eb92 	.word	0x0800eb92

0800dbcc <_printf_common>:
 800dbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbd0:	4616      	mov	r6, r2
 800dbd2:	4699      	mov	r9, r3
 800dbd4:	688a      	ldr	r2, [r1, #8]
 800dbd6:	690b      	ldr	r3, [r1, #16]
 800dbd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	bfb8      	it	lt
 800dbe0:	4613      	movlt	r3, r2
 800dbe2:	6033      	str	r3, [r6, #0]
 800dbe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dbe8:	4607      	mov	r7, r0
 800dbea:	460c      	mov	r4, r1
 800dbec:	b10a      	cbz	r2, 800dbf2 <_printf_common+0x26>
 800dbee:	3301      	adds	r3, #1
 800dbf0:	6033      	str	r3, [r6, #0]
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	0699      	lsls	r1, r3, #26
 800dbf6:	bf42      	ittt	mi
 800dbf8:	6833      	ldrmi	r3, [r6, #0]
 800dbfa:	3302      	addmi	r3, #2
 800dbfc:	6033      	strmi	r3, [r6, #0]
 800dbfe:	6825      	ldr	r5, [r4, #0]
 800dc00:	f015 0506 	ands.w	r5, r5, #6
 800dc04:	d106      	bne.n	800dc14 <_printf_common+0x48>
 800dc06:	f104 0a19 	add.w	sl, r4, #25
 800dc0a:	68e3      	ldr	r3, [r4, #12]
 800dc0c:	6832      	ldr	r2, [r6, #0]
 800dc0e:	1a9b      	subs	r3, r3, r2
 800dc10:	42ab      	cmp	r3, r5
 800dc12:	dc26      	bgt.n	800dc62 <_printf_common+0x96>
 800dc14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc18:	1e13      	subs	r3, r2, #0
 800dc1a:	6822      	ldr	r2, [r4, #0]
 800dc1c:	bf18      	it	ne
 800dc1e:	2301      	movne	r3, #1
 800dc20:	0692      	lsls	r2, r2, #26
 800dc22:	d42b      	bmi.n	800dc7c <_printf_common+0xb0>
 800dc24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc28:	4649      	mov	r1, r9
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	47c0      	blx	r8
 800dc2e:	3001      	adds	r0, #1
 800dc30:	d01e      	beq.n	800dc70 <_printf_common+0xa4>
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	68e5      	ldr	r5, [r4, #12]
 800dc36:	6832      	ldr	r2, [r6, #0]
 800dc38:	f003 0306 	and.w	r3, r3, #6
 800dc3c:	2b04      	cmp	r3, #4
 800dc3e:	bf08      	it	eq
 800dc40:	1aad      	subeq	r5, r5, r2
 800dc42:	68a3      	ldr	r3, [r4, #8]
 800dc44:	6922      	ldr	r2, [r4, #16]
 800dc46:	bf0c      	ite	eq
 800dc48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc4c:	2500      	movne	r5, #0
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	bfc4      	itt	gt
 800dc52:	1a9b      	subgt	r3, r3, r2
 800dc54:	18ed      	addgt	r5, r5, r3
 800dc56:	2600      	movs	r6, #0
 800dc58:	341a      	adds	r4, #26
 800dc5a:	42b5      	cmp	r5, r6
 800dc5c:	d11a      	bne.n	800dc94 <_printf_common+0xc8>
 800dc5e:	2000      	movs	r0, #0
 800dc60:	e008      	b.n	800dc74 <_printf_common+0xa8>
 800dc62:	2301      	movs	r3, #1
 800dc64:	4652      	mov	r2, sl
 800dc66:	4649      	mov	r1, r9
 800dc68:	4638      	mov	r0, r7
 800dc6a:	47c0      	blx	r8
 800dc6c:	3001      	adds	r0, #1
 800dc6e:	d103      	bne.n	800dc78 <_printf_common+0xac>
 800dc70:	f04f 30ff 	mov.w	r0, #4294967295
 800dc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc78:	3501      	adds	r5, #1
 800dc7a:	e7c6      	b.n	800dc0a <_printf_common+0x3e>
 800dc7c:	18e1      	adds	r1, r4, r3
 800dc7e:	1c5a      	adds	r2, r3, #1
 800dc80:	2030      	movs	r0, #48	; 0x30
 800dc82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc86:	4422      	add	r2, r4
 800dc88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc90:	3302      	adds	r3, #2
 800dc92:	e7c7      	b.n	800dc24 <_printf_common+0x58>
 800dc94:	2301      	movs	r3, #1
 800dc96:	4622      	mov	r2, r4
 800dc98:	4649      	mov	r1, r9
 800dc9a:	4638      	mov	r0, r7
 800dc9c:	47c0      	blx	r8
 800dc9e:	3001      	adds	r0, #1
 800dca0:	d0e6      	beq.n	800dc70 <_printf_common+0xa4>
 800dca2:	3601      	adds	r6, #1
 800dca4:	e7d9      	b.n	800dc5a <_printf_common+0x8e>
	...

0800dca8 <_printf_i>:
 800dca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcac:	460c      	mov	r4, r1
 800dcae:	4691      	mov	r9, r2
 800dcb0:	7e27      	ldrb	r7, [r4, #24]
 800dcb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dcb4:	2f78      	cmp	r7, #120	; 0x78
 800dcb6:	4680      	mov	r8, r0
 800dcb8:	469a      	mov	sl, r3
 800dcba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcbe:	d807      	bhi.n	800dcd0 <_printf_i+0x28>
 800dcc0:	2f62      	cmp	r7, #98	; 0x62
 800dcc2:	d80a      	bhi.n	800dcda <_printf_i+0x32>
 800dcc4:	2f00      	cmp	r7, #0
 800dcc6:	f000 80d8 	beq.w	800de7a <_printf_i+0x1d2>
 800dcca:	2f58      	cmp	r7, #88	; 0x58
 800dccc:	f000 80a3 	beq.w	800de16 <_printf_i+0x16e>
 800dcd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dcd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dcd8:	e03a      	b.n	800dd50 <_printf_i+0xa8>
 800dcda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dcde:	2b15      	cmp	r3, #21
 800dce0:	d8f6      	bhi.n	800dcd0 <_printf_i+0x28>
 800dce2:	a001      	add	r0, pc, #4	; (adr r0, 800dce8 <_printf_i+0x40>)
 800dce4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dce8:	0800dd41 	.word	0x0800dd41
 800dcec:	0800dd55 	.word	0x0800dd55
 800dcf0:	0800dcd1 	.word	0x0800dcd1
 800dcf4:	0800dcd1 	.word	0x0800dcd1
 800dcf8:	0800dcd1 	.word	0x0800dcd1
 800dcfc:	0800dcd1 	.word	0x0800dcd1
 800dd00:	0800dd55 	.word	0x0800dd55
 800dd04:	0800dcd1 	.word	0x0800dcd1
 800dd08:	0800dcd1 	.word	0x0800dcd1
 800dd0c:	0800dcd1 	.word	0x0800dcd1
 800dd10:	0800dcd1 	.word	0x0800dcd1
 800dd14:	0800de61 	.word	0x0800de61
 800dd18:	0800dd85 	.word	0x0800dd85
 800dd1c:	0800de43 	.word	0x0800de43
 800dd20:	0800dcd1 	.word	0x0800dcd1
 800dd24:	0800dcd1 	.word	0x0800dcd1
 800dd28:	0800de83 	.word	0x0800de83
 800dd2c:	0800dcd1 	.word	0x0800dcd1
 800dd30:	0800dd85 	.word	0x0800dd85
 800dd34:	0800dcd1 	.word	0x0800dcd1
 800dd38:	0800dcd1 	.word	0x0800dcd1
 800dd3c:	0800de4b 	.word	0x0800de4b
 800dd40:	680b      	ldr	r3, [r1, #0]
 800dd42:	1d1a      	adds	r2, r3, #4
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	600a      	str	r2, [r1, #0]
 800dd48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dd4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd50:	2301      	movs	r3, #1
 800dd52:	e0a3      	b.n	800de9c <_printf_i+0x1f4>
 800dd54:	6825      	ldr	r5, [r4, #0]
 800dd56:	6808      	ldr	r0, [r1, #0]
 800dd58:	062e      	lsls	r6, r5, #24
 800dd5a:	f100 0304 	add.w	r3, r0, #4
 800dd5e:	d50a      	bpl.n	800dd76 <_printf_i+0xce>
 800dd60:	6805      	ldr	r5, [r0, #0]
 800dd62:	600b      	str	r3, [r1, #0]
 800dd64:	2d00      	cmp	r5, #0
 800dd66:	da03      	bge.n	800dd70 <_printf_i+0xc8>
 800dd68:	232d      	movs	r3, #45	; 0x2d
 800dd6a:	426d      	negs	r5, r5
 800dd6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd70:	485e      	ldr	r0, [pc, #376]	; (800deec <_printf_i+0x244>)
 800dd72:	230a      	movs	r3, #10
 800dd74:	e019      	b.n	800ddaa <_printf_i+0x102>
 800dd76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dd7a:	6805      	ldr	r5, [r0, #0]
 800dd7c:	600b      	str	r3, [r1, #0]
 800dd7e:	bf18      	it	ne
 800dd80:	b22d      	sxthne	r5, r5
 800dd82:	e7ef      	b.n	800dd64 <_printf_i+0xbc>
 800dd84:	680b      	ldr	r3, [r1, #0]
 800dd86:	6825      	ldr	r5, [r4, #0]
 800dd88:	1d18      	adds	r0, r3, #4
 800dd8a:	6008      	str	r0, [r1, #0]
 800dd8c:	0628      	lsls	r0, r5, #24
 800dd8e:	d501      	bpl.n	800dd94 <_printf_i+0xec>
 800dd90:	681d      	ldr	r5, [r3, #0]
 800dd92:	e002      	b.n	800dd9a <_printf_i+0xf2>
 800dd94:	0669      	lsls	r1, r5, #25
 800dd96:	d5fb      	bpl.n	800dd90 <_printf_i+0xe8>
 800dd98:	881d      	ldrh	r5, [r3, #0]
 800dd9a:	4854      	ldr	r0, [pc, #336]	; (800deec <_printf_i+0x244>)
 800dd9c:	2f6f      	cmp	r7, #111	; 0x6f
 800dd9e:	bf0c      	ite	eq
 800dda0:	2308      	moveq	r3, #8
 800dda2:	230a      	movne	r3, #10
 800dda4:	2100      	movs	r1, #0
 800dda6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ddaa:	6866      	ldr	r6, [r4, #4]
 800ddac:	60a6      	str	r6, [r4, #8]
 800ddae:	2e00      	cmp	r6, #0
 800ddb0:	bfa2      	ittt	ge
 800ddb2:	6821      	ldrge	r1, [r4, #0]
 800ddb4:	f021 0104 	bicge.w	r1, r1, #4
 800ddb8:	6021      	strge	r1, [r4, #0]
 800ddba:	b90d      	cbnz	r5, 800ddc0 <_printf_i+0x118>
 800ddbc:	2e00      	cmp	r6, #0
 800ddbe:	d04d      	beq.n	800de5c <_printf_i+0x1b4>
 800ddc0:	4616      	mov	r6, r2
 800ddc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddc6:	fb03 5711 	mls	r7, r3, r1, r5
 800ddca:	5dc7      	ldrb	r7, [r0, r7]
 800ddcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ddd0:	462f      	mov	r7, r5
 800ddd2:	42bb      	cmp	r3, r7
 800ddd4:	460d      	mov	r5, r1
 800ddd6:	d9f4      	bls.n	800ddc2 <_printf_i+0x11a>
 800ddd8:	2b08      	cmp	r3, #8
 800ddda:	d10b      	bne.n	800ddf4 <_printf_i+0x14c>
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	07df      	lsls	r7, r3, #31
 800dde0:	d508      	bpl.n	800ddf4 <_printf_i+0x14c>
 800dde2:	6923      	ldr	r3, [r4, #16]
 800dde4:	6861      	ldr	r1, [r4, #4]
 800dde6:	4299      	cmp	r1, r3
 800dde8:	bfde      	ittt	le
 800ddea:	2330      	movle	r3, #48	; 0x30
 800ddec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ddf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ddf4:	1b92      	subs	r2, r2, r6
 800ddf6:	6122      	str	r2, [r4, #16]
 800ddf8:	f8cd a000 	str.w	sl, [sp]
 800ddfc:	464b      	mov	r3, r9
 800ddfe:	aa03      	add	r2, sp, #12
 800de00:	4621      	mov	r1, r4
 800de02:	4640      	mov	r0, r8
 800de04:	f7ff fee2 	bl	800dbcc <_printf_common>
 800de08:	3001      	adds	r0, #1
 800de0a:	d14c      	bne.n	800dea6 <_printf_i+0x1fe>
 800de0c:	f04f 30ff 	mov.w	r0, #4294967295
 800de10:	b004      	add	sp, #16
 800de12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de16:	4835      	ldr	r0, [pc, #212]	; (800deec <_printf_i+0x244>)
 800de18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800de1c:	6823      	ldr	r3, [r4, #0]
 800de1e:	680e      	ldr	r6, [r1, #0]
 800de20:	061f      	lsls	r7, r3, #24
 800de22:	f856 5b04 	ldr.w	r5, [r6], #4
 800de26:	600e      	str	r6, [r1, #0]
 800de28:	d514      	bpl.n	800de54 <_printf_i+0x1ac>
 800de2a:	07d9      	lsls	r1, r3, #31
 800de2c:	bf44      	itt	mi
 800de2e:	f043 0320 	orrmi.w	r3, r3, #32
 800de32:	6023      	strmi	r3, [r4, #0]
 800de34:	b91d      	cbnz	r5, 800de3e <_printf_i+0x196>
 800de36:	6823      	ldr	r3, [r4, #0]
 800de38:	f023 0320 	bic.w	r3, r3, #32
 800de3c:	6023      	str	r3, [r4, #0]
 800de3e:	2310      	movs	r3, #16
 800de40:	e7b0      	b.n	800dda4 <_printf_i+0xfc>
 800de42:	6823      	ldr	r3, [r4, #0]
 800de44:	f043 0320 	orr.w	r3, r3, #32
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	2378      	movs	r3, #120	; 0x78
 800de4c:	4828      	ldr	r0, [pc, #160]	; (800def0 <_printf_i+0x248>)
 800de4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de52:	e7e3      	b.n	800de1c <_printf_i+0x174>
 800de54:	065e      	lsls	r6, r3, #25
 800de56:	bf48      	it	mi
 800de58:	b2ad      	uxthmi	r5, r5
 800de5a:	e7e6      	b.n	800de2a <_printf_i+0x182>
 800de5c:	4616      	mov	r6, r2
 800de5e:	e7bb      	b.n	800ddd8 <_printf_i+0x130>
 800de60:	680b      	ldr	r3, [r1, #0]
 800de62:	6826      	ldr	r6, [r4, #0]
 800de64:	6960      	ldr	r0, [r4, #20]
 800de66:	1d1d      	adds	r5, r3, #4
 800de68:	600d      	str	r5, [r1, #0]
 800de6a:	0635      	lsls	r5, r6, #24
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	d501      	bpl.n	800de74 <_printf_i+0x1cc>
 800de70:	6018      	str	r0, [r3, #0]
 800de72:	e002      	b.n	800de7a <_printf_i+0x1d2>
 800de74:	0671      	lsls	r1, r6, #25
 800de76:	d5fb      	bpl.n	800de70 <_printf_i+0x1c8>
 800de78:	8018      	strh	r0, [r3, #0]
 800de7a:	2300      	movs	r3, #0
 800de7c:	6123      	str	r3, [r4, #16]
 800de7e:	4616      	mov	r6, r2
 800de80:	e7ba      	b.n	800ddf8 <_printf_i+0x150>
 800de82:	680b      	ldr	r3, [r1, #0]
 800de84:	1d1a      	adds	r2, r3, #4
 800de86:	600a      	str	r2, [r1, #0]
 800de88:	681e      	ldr	r6, [r3, #0]
 800de8a:	6862      	ldr	r2, [r4, #4]
 800de8c:	2100      	movs	r1, #0
 800de8e:	4630      	mov	r0, r6
 800de90:	f7f2 f9a6 	bl	80001e0 <memchr>
 800de94:	b108      	cbz	r0, 800de9a <_printf_i+0x1f2>
 800de96:	1b80      	subs	r0, r0, r6
 800de98:	6060      	str	r0, [r4, #4]
 800de9a:	6863      	ldr	r3, [r4, #4]
 800de9c:	6123      	str	r3, [r4, #16]
 800de9e:	2300      	movs	r3, #0
 800dea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dea4:	e7a8      	b.n	800ddf8 <_printf_i+0x150>
 800dea6:	6923      	ldr	r3, [r4, #16]
 800dea8:	4632      	mov	r2, r6
 800deaa:	4649      	mov	r1, r9
 800deac:	4640      	mov	r0, r8
 800deae:	47d0      	blx	sl
 800deb0:	3001      	adds	r0, #1
 800deb2:	d0ab      	beq.n	800de0c <_printf_i+0x164>
 800deb4:	6823      	ldr	r3, [r4, #0]
 800deb6:	079b      	lsls	r3, r3, #30
 800deb8:	d413      	bmi.n	800dee2 <_printf_i+0x23a>
 800deba:	68e0      	ldr	r0, [r4, #12]
 800debc:	9b03      	ldr	r3, [sp, #12]
 800debe:	4298      	cmp	r0, r3
 800dec0:	bfb8      	it	lt
 800dec2:	4618      	movlt	r0, r3
 800dec4:	e7a4      	b.n	800de10 <_printf_i+0x168>
 800dec6:	2301      	movs	r3, #1
 800dec8:	4632      	mov	r2, r6
 800deca:	4649      	mov	r1, r9
 800decc:	4640      	mov	r0, r8
 800dece:	47d0      	blx	sl
 800ded0:	3001      	adds	r0, #1
 800ded2:	d09b      	beq.n	800de0c <_printf_i+0x164>
 800ded4:	3501      	adds	r5, #1
 800ded6:	68e3      	ldr	r3, [r4, #12]
 800ded8:	9903      	ldr	r1, [sp, #12]
 800deda:	1a5b      	subs	r3, r3, r1
 800dedc:	42ab      	cmp	r3, r5
 800dede:	dcf2      	bgt.n	800dec6 <_printf_i+0x21e>
 800dee0:	e7eb      	b.n	800deba <_printf_i+0x212>
 800dee2:	2500      	movs	r5, #0
 800dee4:	f104 0619 	add.w	r6, r4, #25
 800dee8:	e7f5      	b.n	800ded6 <_printf_i+0x22e>
 800deea:	bf00      	nop
 800deec:	0800eb9d 	.word	0x0800eb9d
 800def0:	0800ebae 	.word	0x0800ebae

0800def4 <_sbrk_r>:
 800def4:	b538      	push	{r3, r4, r5, lr}
 800def6:	4d06      	ldr	r5, [pc, #24]	; (800df10 <_sbrk_r+0x1c>)
 800def8:	2300      	movs	r3, #0
 800defa:	4604      	mov	r4, r0
 800defc:	4608      	mov	r0, r1
 800defe:	602b      	str	r3, [r5, #0]
 800df00:	f7f3 ff6c 	bl	8001ddc <_sbrk>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d102      	bne.n	800df0e <_sbrk_r+0x1a>
 800df08:	682b      	ldr	r3, [r5, #0]
 800df0a:	b103      	cbz	r3, 800df0e <_sbrk_r+0x1a>
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	bd38      	pop	{r3, r4, r5, pc}
 800df10:	20009bcc 	.word	0x20009bcc

0800df14 <__sread>:
 800df14:	b510      	push	{r4, lr}
 800df16:	460c      	mov	r4, r1
 800df18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df1c:	f000 fab4 	bl	800e488 <_read_r>
 800df20:	2800      	cmp	r0, #0
 800df22:	bfab      	itete	ge
 800df24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df26:	89a3      	ldrhlt	r3, [r4, #12]
 800df28:	181b      	addge	r3, r3, r0
 800df2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df2e:	bfac      	ite	ge
 800df30:	6563      	strge	r3, [r4, #84]	; 0x54
 800df32:	81a3      	strhlt	r3, [r4, #12]
 800df34:	bd10      	pop	{r4, pc}

0800df36 <__swrite>:
 800df36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df3a:	461f      	mov	r7, r3
 800df3c:	898b      	ldrh	r3, [r1, #12]
 800df3e:	05db      	lsls	r3, r3, #23
 800df40:	4605      	mov	r5, r0
 800df42:	460c      	mov	r4, r1
 800df44:	4616      	mov	r6, r2
 800df46:	d505      	bpl.n	800df54 <__swrite+0x1e>
 800df48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df4c:	2302      	movs	r3, #2
 800df4e:	2200      	movs	r2, #0
 800df50:	f000 f9c8 	bl	800e2e4 <_lseek_r>
 800df54:	89a3      	ldrh	r3, [r4, #12]
 800df56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df5e:	81a3      	strh	r3, [r4, #12]
 800df60:	4632      	mov	r2, r6
 800df62:	463b      	mov	r3, r7
 800df64:	4628      	mov	r0, r5
 800df66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df6a:	f000 b869 	b.w	800e040 <_write_r>

0800df6e <__sseek>:
 800df6e:	b510      	push	{r4, lr}
 800df70:	460c      	mov	r4, r1
 800df72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df76:	f000 f9b5 	bl	800e2e4 <_lseek_r>
 800df7a:	1c43      	adds	r3, r0, #1
 800df7c:	89a3      	ldrh	r3, [r4, #12]
 800df7e:	bf15      	itete	ne
 800df80:	6560      	strne	r0, [r4, #84]	; 0x54
 800df82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df8a:	81a3      	strheq	r3, [r4, #12]
 800df8c:	bf18      	it	ne
 800df8e:	81a3      	strhne	r3, [r4, #12]
 800df90:	bd10      	pop	{r4, pc}

0800df92 <__sclose>:
 800df92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df96:	f000 b8d3 	b.w	800e140 <_close_r>
	...

0800df9c <__swbuf_r>:
 800df9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df9e:	460e      	mov	r6, r1
 800dfa0:	4614      	mov	r4, r2
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	b118      	cbz	r0, 800dfae <__swbuf_r+0x12>
 800dfa6:	6983      	ldr	r3, [r0, #24]
 800dfa8:	b90b      	cbnz	r3, 800dfae <__swbuf_r+0x12>
 800dfaa:	f7ff fbbb 	bl	800d724 <__sinit>
 800dfae:	4b21      	ldr	r3, [pc, #132]	; (800e034 <__swbuf_r+0x98>)
 800dfb0:	429c      	cmp	r4, r3
 800dfb2:	d12b      	bne.n	800e00c <__swbuf_r+0x70>
 800dfb4:	686c      	ldr	r4, [r5, #4]
 800dfb6:	69a3      	ldr	r3, [r4, #24]
 800dfb8:	60a3      	str	r3, [r4, #8]
 800dfba:	89a3      	ldrh	r3, [r4, #12]
 800dfbc:	071a      	lsls	r2, r3, #28
 800dfbe:	d52f      	bpl.n	800e020 <__swbuf_r+0x84>
 800dfc0:	6923      	ldr	r3, [r4, #16]
 800dfc2:	b36b      	cbz	r3, 800e020 <__swbuf_r+0x84>
 800dfc4:	6923      	ldr	r3, [r4, #16]
 800dfc6:	6820      	ldr	r0, [r4, #0]
 800dfc8:	1ac0      	subs	r0, r0, r3
 800dfca:	6963      	ldr	r3, [r4, #20]
 800dfcc:	b2f6      	uxtb	r6, r6
 800dfce:	4283      	cmp	r3, r0
 800dfd0:	4637      	mov	r7, r6
 800dfd2:	dc04      	bgt.n	800dfde <__swbuf_r+0x42>
 800dfd4:	4621      	mov	r1, r4
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	f000 f948 	bl	800e26c <_fflush_r>
 800dfdc:	bb30      	cbnz	r0, 800e02c <__swbuf_r+0x90>
 800dfde:	68a3      	ldr	r3, [r4, #8]
 800dfe0:	3b01      	subs	r3, #1
 800dfe2:	60a3      	str	r3, [r4, #8]
 800dfe4:	6823      	ldr	r3, [r4, #0]
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	6022      	str	r2, [r4, #0]
 800dfea:	701e      	strb	r6, [r3, #0]
 800dfec:	6963      	ldr	r3, [r4, #20]
 800dfee:	3001      	adds	r0, #1
 800dff0:	4283      	cmp	r3, r0
 800dff2:	d004      	beq.n	800dffe <__swbuf_r+0x62>
 800dff4:	89a3      	ldrh	r3, [r4, #12]
 800dff6:	07db      	lsls	r3, r3, #31
 800dff8:	d506      	bpl.n	800e008 <__swbuf_r+0x6c>
 800dffa:	2e0a      	cmp	r6, #10
 800dffc:	d104      	bne.n	800e008 <__swbuf_r+0x6c>
 800dffe:	4621      	mov	r1, r4
 800e000:	4628      	mov	r0, r5
 800e002:	f000 f933 	bl	800e26c <_fflush_r>
 800e006:	b988      	cbnz	r0, 800e02c <__swbuf_r+0x90>
 800e008:	4638      	mov	r0, r7
 800e00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e00c:	4b0a      	ldr	r3, [pc, #40]	; (800e038 <__swbuf_r+0x9c>)
 800e00e:	429c      	cmp	r4, r3
 800e010:	d101      	bne.n	800e016 <__swbuf_r+0x7a>
 800e012:	68ac      	ldr	r4, [r5, #8]
 800e014:	e7cf      	b.n	800dfb6 <__swbuf_r+0x1a>
 800e016:	4b09      	ldr	r3, [pc, #36]	; (800e03c <__swbuf_r+0xa0>)
 800e018:	429c      	cmp	r4, r3
 800e01a:	bf08      	it	eq
 800e01c:	68ec      	ldreq	r4, [r5, #12]
 800e01e:	e7ca      	b.n	800dfb6 <__swbuf_r+0x1a>
 800e020:	4621      	mov	r1, r4
 800e022:	4628      	mov	r0, r5
 800e024:	f000 f81e 	bl	800e064 <__swsetup_r>
 800e028:	2800      	cmp	r0, #0
 800e02a:	d0cb      	beq.n	800dfc4 <__swbuf_r+0x28>
 800e02c:	f04f 37ff 	mov.w	r7, #4294967295
 800e030:	e7ea      	b.n	800e008 <__swbuf_r+0x6c>
 800e032:	bf00      	nop
 800e034:	0800eb4c 	.word	0x0800eb4c
 800e038:	0800eb6c 	.word	0x0800eb6c
 800e03c:	0800eb2c 	.word	0x0800eb2c

0800e040 <_write_r>:
 800e040:	b538      	push	{r3, r4, r5, lr}
 800e042:	4d07      	ldr	r5, [pc, #28]	; (800e060 <_write_r+0x20>)
 800e044:	4604      	mov	r4, r0
 800e046:	4608      	mov	r0, r1
 800e048:	4611      	mov	r1, r2
 800e04a:	2200      	movs	r2, #0
 800e04c:	602a      	str	r2, [r5, #0]
 800e04e:	461a      	mov	r2, r3
 800e050:	f7f3 fe73 	bl	8001d3a <_write>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	d102      	bne.n	800e05e <_write_r+0x1e>
 800e058:	682b      	ldr	r3, [r5, #0]
 800e05a:	b103      	cbz	r3, 800e05e <_write_r+0x1e>
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	bd38      	pop	{r3, r4, r5, pc}
 800e060:	20009bcc 	.word	0x20009bcc

0800e064 <__swsetup_r>:
 800e064:	4b32      	ldr	r3, [pc, #200]	; (800e130 <__swsetup_r+0xcc>)
 800e066:	b570      	push	{r4, r5, r6, lr}
 800e068:	681d      	ldr	r5, [r3, #0]
 800e06a:	4606      	mov	r6, r0
 800e06c:	460c      	mov	r4, r1
 800e06e:	b125      	cbz	r5, 800e07a <__swsetup_r+0x16>
 800e070:	69ab      	ldr	r3, [r5, #24]
 800e072:	b913      	cbnz	r3, 800e07a <__swsetup_r+0x16>
 800e074:	4628      	mov	r0, r5
 800e076:	f7ff fb55 	bl	800d724 <__sinit>
 800e07a:	4b2e      	ldr	r3, [pc, #184]	; (800e134 <__swsetup_r+0xd0>)
 800e07c:	429c      	cmp	r4, r3
 800e07e:	d10f      	bne.n	800e0a0 <__swsetup_r+0x3c>
 800e080:	686c      	ldr	r4, [r5, #4]
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e088:	0719      	lsls	r1, r3, #28
 800e08a:	d42c      	bmi.n	800e0e6 <__swsetup_r+0x82>
 800e08c:	06dd      	lsls	r5, r3, #27
 800e08e:	d411      	bmi.n	800e0b4 <__swsetup_r+0x50>
 800e090:	2309      	movs	r3, #9
 800e092:	6033      	str	r3, [r6, #0]
 800e094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e098:	81a3      	strh	r3, [r4, #12]
 800e09a:	f04f 30ff 	mov.w	r0, #4294967295
 800e09e:	e03e      	b.n	800e11e <__swsetup_r+0xba>
 800e0a0:	4b25      	ldr	r3, [pc, #148]	; (800e138 <__swsetup_r+0xd4>)
 800e0a2:	429c      	cmp	r4, r3
 800e0a4:	d101      	bne.n	800e0aa <__swsetup_r+0x46>
 800e0a6:	68ac      	ldr	r4, [r5, #8]
 800e0a8:	e7eb      	b.n	800e082 <__swsetup_r+0x1e>
 800e0aa:	4b24      	ldr	r3, [pc, #144]	; (800e13c <__swsetup_r+0xd8>)
 800e0ac:	429c      	cmp	r4, r3
 800e0ae:	bf08      	it	eq
 800e0b0:	68ec      	ldreq	r4, [r5, #12]
 800e0b2:	e7e6      	b.n	800e082 <__swsetup_r+0x1e>
 800e0b4:	0758      	lsls	r0, r3, #29
 800e0b6:	d512      	bpl.n	800e0de <__swsetup_r+0x7a>
 800e0b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0ba:	b141      	cbz	r1, 800e0ce <__swsetup_r+0x6a>
 800e0bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0c0:	4299      	cmp	r1, r3
 800e0c2:	d002      	beq.n	800e0ca <__swsetup_r+0x66>
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	f000 f98f 	bl	800e3e8 <_free_r>
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	6363      	str	r3, [r4, #52]	; 0x34
 800e0ce:	89a3      	ldrh	r3, [r4, #12]
 800e0d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0d4:	81a3      	strh	r3, [r4, #12]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	6063      	str	r3, [r4, #4]
 800e0da:	6923      	ldr	r3, [r4, #16]
 800e0dc:	6023      	str	r3, [r4, #0]
 800e0de:	89a3      	ldrh	r3, [r4, #12]
 800e0e0:	f043 0308 	orr.w	r3, r3, #8
 800e0e4:	81a3      	strh	r3, [r4, #12]
 800e0e6:	6923      	ldr	r3, [r4, #16]
 800e0e8:	b94b      	cbnz	r3, 800e0fe <__swsetup_r+0x9a>
 800e0ea:	89a3      	ldrh	r3, [r4, #12]
 800e0ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0f4:	d003      	beq.n	800e0fe <__swsetup_r+0x9a>
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f000 f929 	bl	800e350 <__smakebuf_r>
 800e0fe:	89a0      	ldrh	r0, [r4, #12]
 800e100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e104:	f010 0301 	ands.w	r3, r0, #1
 800e108:	d00a      	beq.n	800e120 <__swsetup_r+0xbc>
 800e10a:	2300      	movs	r3, #0
 800e10c:	60a3      	str	r3, [r4, #8]
 800e10e:	6963      	ldr	r3, [r4, #20]
 800e110:	425b      	negs	r3, r3
 800e112:	61a3      	str	r3, [r4, #24]
 800e114:	6923      	ldr	r3, [r4, #16]
 800e116:	b943      	cbnz	r3, 800e12a <__swsetup_r+0xc6>
 800e118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e11c:	d1ba      	bne.n	800e094 <__swsetup_r+0x30>
 800e11e:	bd70      	pop	{r4, r5, r6, pc}
 800e120:	0781      	lsls	r1, r0, #30
 800e122:	bf58      	it	pl
 800e124:	6963      	ldrpl	r3, [r4, #20]
 800e126:	60a3      	str	r3, [r4, #8]
 800e128:	e7f4      	b.n	800e114 <__swsetup_r+0xb0>
 800e12a:	2000      	movs	r0, #0
 800e12c:	e7f7      	b.n	800e11e <__swsetup_r+0xba>
 800e12e:	bf00      	nop
 800e130:	2000000c 	.word	0x2000000c
 800e134:	0800eb4c 	.word	0x0800eb4c
 800e138:	0800eb6c 	.word	0x0800eb6c
 800e13c:	0800eb2c 	.word	0x0800eb2c

0800e140 <_close_r>:
 800e140:	b538      	push	{r3, r4, r5, lr}
 800e142:	4d06      	ldr	r5, [pc, #24]	; (800e15c <_close_r+0x1c>)
 800e144:	2300      	movs	r3, #0
 800e146:	4604      	mov	r4, r0
 800e148:	4608      	mov	r0, r1
 800e14a:	602b      	str	r3, [r5, #0]
 800e14c:	f7f3 fe11 	bl	8001d72 <_close>
 800e150:	1c43      	adds	r3, r0, #1
 800e152:	d102      	bne.n	800e15a <_close_r+0x1a>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	b103      	cbz	r3, 800e15a <_close_r+0x1a>
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	20009bcc 	.word	0x20009bcc

0800e160 <__sflush_r>:
 800e160:	898a      	ldrh	r2, [r1, #12]
 800e162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e166:	4605      	mov	r5, r0
 800e168:	0710      	lsls	r0, r2, #28
 800e16a:	460c      	mov	r4, r1
 800e16c:	d458      	bmi.n	800e220 <__sflush_r+0xc0>
 800e16e:	684b      	ldr	r3, [r1, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	dc05      	bgt.n	800e180 <__sflush_r+0x20>
 800e174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e176:	2b00      	cmp	r3, #0
 800e178:	dc02      	bgt.n	800e180 <__sflush_r+0x20>
 800e17a:	2000      	movs	r0, #0
 800e17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e182:	2e00      	cmp	r6, #0
 800e184:	d0f9      	beq.n	800e17a <__sflush_r+0x1a>
 800e186:	2300      	movs	r3, #0
 800e188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e18c:	682f      	ldr	r7, [r5, #0]
 800e18e:	602b      	str	r3, [r5, #0]
 800e190:	d032      	beq.n	800e1f8 <__sflush_r+0x98>
 800e192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e194:	89a3      	ldrh	r3, [r4, #12]
 800e196:	075a      	lsls	r2, r3, #29
 800e198:	d505      	bpl.n	800e1a6 <__sflush_r+0x46>
 800e19a:	6863      	ldr	r3, [r4, #4]
 800e19c:	1ac0      	subs	r0, r0, r3
 800e19e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1a0:	b10b      	cbz	r3, 800e1a6 <__sflush_r+0x46>
 800e1a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1a4:	1ac0      	subs	r0, r0, r3
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1ac:	6a21      	ldr	r1, [r4, #32]
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	47b0      	blx	r6
 800e1b2:	1c43      	adds	r3, r0, #1
 800e1b4:	89a3      	ldrh	r3, [r4, #12]
 800e1b6:	d106      	bne.n	800e1c6 <__sflush_r+0x66>
 800e1b8:	6829      	ldr	r1, [r5, #0]
 800e1ba:	291d      	cmp	r1, #29
 800e1bc:	d82c      	bhi.n	800e218 <__sflush_r+0xb8>
 800e1be:	4a2a      	ldr	r2, [pc, #168]	; (800e268 <__sflush_r+0x108>)
 800e1c0:	40ca      	lsrs	r2, r1
 800e1c2:	07d6      	lsls	r6, r2, #31
 800e1c4:	d528      	bpl.n	800e218 <__sflush_r+0xb8>
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	6062      	str	r2, [r4, #4]
 800e1ca:	04d9      	lsls	r1, r3, #19
 800e1cc:	6922      	ldr	r2, [r4, #16]
 800e1ce:	6022      	str	r2, [r4, #0]
 800e1d0:	d504      	bpl.n	800e1dc <__sflush_r+0x7c>
 800e1d2:	1c42      	adds	r2, r0, #1
 800e1d4:	d101      	bne.n	800e1da <__sflush_r+0x7a>
 800e1d6:	682b      	ldr	r3, [r5, #0]
 800e1d8:	b903      	cbnz	r3, 800e1dc <__sflush_r+0x7c>
 800e1da:	6560      	str	r0, [r4, #84]	; 0x54
 800e1dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1de:	602f      	str	r7, [r5, #0]
 800e1e0:	2900      	cmp	r1, #0
 800e1e2:	d0ca      	beq.n	800e17a <__sflush_r+0x1a>
 800e1e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1e8:	4299      	cmp	r1, r3
 800e1ea:	d002      	beq.n	800e1f2 <__sflush_r+0x92>
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	f000 f8fb 	bl	800e3e8 <_free_r>
 800e1f2:	2000      	movs	r0, #0
 800e1f4:	6360      	str	r0, [r4, #52]	; 0x34
 800e1f6:	e7c1      	b.n	800e17c <__sflush_r+0x1c>
 800e1f8:	6a21      	ldr	r1, [r4, #32]
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	47b0      	blx	r6
 800e200:	1c41      	adds	r1, r0, #1
 800e202:	d1c7      	bne.n	800e194 <__sflush_r+0x34>
 800e204:	682b      	ldr	r3, [r5, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d0c4      	beq.n	800e194 <__sflush_r+0x34>
 800e20a:	2b1d      	cmp	r3, #29
 800e20c:	d001      	beq.n	800e212 <__sflush_r+0xb2>
 800e20e:	2b16      	cmp	r3, #22
 800e210:	d101      	bne.n	800e216 <__sflush_r+0xb6>
 800e212:	602f      	str	r7, [r5, #0]
 800e214:	e7b1      	b.n	800e17a <__sflush_r+0x1a>
 800e216:	89a3      	ldrh	r3, [r4, #12]
 800e218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e21c:	81a3      	strh	r3, [r4, #12]
 800e21e:	e7ad      	b.n	800e17c <__sflush_r+0x1c>
 800e220:	690f      	ldr	r7, [r1, #16]
 800e222:	2f00      	cmp	r7, #0
 800e224:	d0a9      	beq.n	800e17a <__sflush_r+0x1a>
 800e226:	0793      	lsls	r3, r2, #30
 800e228:	680e      	ldr	r6, [r1, #0]
 800e22a:	bf08      	it	eq
 800e22c:	694b      	ldreq	r3, [r1, #20]
 800e22e:	600f      	str	r7, [r1, #0]
 800e230:	bf18      	it	ne
 800e232:	2300      	movne	r3, #0
 800e234:	eba6 0807 	sub.w	r8, r6, r7
 800e238:	608b      	str	r3, [r1, #8]
 800e23a:	f1b8 0f00 	cmp.w	r8, #0
 800e23e:	dd9c      	ble.n	800e17a <__sflush_r+0x1a>
 800e240:	6a21      	ldr	r1, [r4, #32]
 800e242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e244:	4643      	mov	r3, r8
 800e246:	463a      	mov	r2, r7
 800e248:	4628      	mov	r0, r5
 800e24a:	47b0      	blx	r6
 800e24c:	2800      	cmp	r0, #0
 800e24e:	dc06      	bgt.n	800e25e <__sflush_r+0xfe>
 800e250:	89a3      	ldrh	r3, [r4, #12]
 800e252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e256:	81a3      	strh	r3, [r4, #12]
 800e258:	f04f 30ff 	mov.w	r0, #4294967295
 800e25c:	e78e      	b.n	800e17c <__sflush_r+0x1c>
 800e25e:	4407      	add	r7, r0
 800e260:	eba8 0800 	sub.w	r8, r8, r0
 800e264:	e7e9      	b.n	800e23a <__sflush_r+0xda>
 800e266:	bf00      	nop
 800e268:	20400001 	.word	0x20400001

0800e26c <_fflush_r>:
 800e26c:	b538      	push	{r3, r4, r5, lr}
 800e26e:	690b      	ldr	r3, [r1, #16]
 800e270:	4605      	mov	r5, r0
 800e272:	460c      	mov	r4, r1
 800e274:	b913      	cbnz	r3, 800e27c <_fflush_r+0x10>
 800e276:	2500      	movs	r5, #0
 800e278:	4628      	mov	r0, r5
 800e27a:	bd38      	pop	{r3, r4, r5, pc}
 800e27c:	b118      	cbz	r0, 800e286 <_fflush_r+0x1a>
 800e27e:	6983      	ldr	r3, [r0, #24]
 800e280:	b90b      	cbnz	r3, 800e286 <_fflush_r+0x1a>
 800e282:	f7ff fa4f 	bl	800d724 <__sinit>
 800e286:	4b14      	ldr	r3, [pc, #80]	; (800e2d8 <_fflush_r+0x6c>)
 800e288:	429c      	cmp	r4, r3
 800e28a:	d11b      	bne.n	800e2c4 <_fflush_r+0x58>
 800e28c:	686c      	ldr	r4, [r5, #4]
 800e28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d0ef      	beq.n	800e276 <_fflush_r+0xa>
 800e296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e298:	07d0      	lsls	r0, r2, #31
 800e29a:	d404      	bmi.n	800e2a6 <_fflush_r+0x3a>
 800e29c:	0599      	lsls	r1, r3, #22
 800e29e:	d402      	bmi.n	800e2a6 <_fflush_r+0x3a>
 800e2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2a2:	f7ff fadd 	bl	800d860 <__retarget_lock_acquire_recursive>
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	4621      	mov	r1, r4
 800e2aa:	f7ff ff59 	bl	800e160 <__sflush_r>
 800e2ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2b0:	07da      	lsls	r2, r3, #31
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	d4e0      	bmi.n	800e278 <_fflush_r+0xc>
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	059b      	lsls	r3, r3, #22
 800e2ba:	d4dd      	bmi.n	800e278 <_fflush_r+0xc>
 800e2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2be:	f7ff fad0 	bl	800d862 <__retarget_lock_release_recursive>
 800e2c2:	e7d9      	b.n	800e278 <_fflush_r+0xc>
 800e2c4:	4b05      	ldr	r3, [pc, #20]	; (800e2dc <_fflush_r+0x70>)
 800e2c6:	429c      	cmp	r4, r3
 800e2c8:	d101      	bne.n	800e2ce <_fflush_r+0x62>
 800e2ca:	68ac      	ldr	r4, [r5, #8]
 800e2cc:	e7df      	b.n	800e28e <_fflush_r+0x22>
 800e2ce:	4b04      	ldr	r3, [pc, #16]	; (800e2e0 <_fflush_r+0x74>)
 800e2d0:	429c      	cmp	r4, r3
 800e2d2:	bf08      	it	eq
 800e2d4:	68ec      	ldreq	r4, [r5, #12]
 800e2d6:	e7da      	b.n	800e28e <_fflush_r+0x22>
 800e2d8:	0800eb4c 	.word	0x0800eb4c
 800e2dc:	0800eb6c 	.word	0x0800eb6c
 800e2e0:	0800eb2c 	.word	0x0800eb2c

0800e2e4 <_lseek_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	4d07      	ldr	r5, [pc, #28]	; (800e304 <_lseek_r+0x20>)
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	4608      	mov	r0, r1
 800e2ec:	4611      	mov	r1, r2
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	602a      	str	r2, [r5, #0]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	f7f3 fd64 	bl	8001dc0 <_lseek>
 800e2f8:	1c43      	adds	r3, r0, #1
 800e2fa:	d102      	bne.n	800e302 <_lseek_r+0x1e>
 800e2fc:	682b      	ldr	r3, [r5, #0]
 800e2fe:	b103      	cbz	r3, 800e302 <_lseek_r+0x1e>
 800e300:	6023      	str	r3, [r4, #0]
 800e302:	bd38      	pop	{r3, r4, r5, pc}
 800e304:	20009bcc 	.word	0x20009bcc

0800e308 <__swhatbuf_r>:
 800e308:	b570      	push	{r4, r5, r6, lr}
 800e30a:	460e      	mov	r6, r1
 800e30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e310:	2900      	cmp	r1, #0
 800e312:	b096      	sub	sp, #88	; 0x58
 800e314:	4614      	mov	r4, r2
 800e316:	461d      	mov	r5, r3
 800e318:	da07      	bge.n	800e32a <__swhatbuf_r+0x22>
 800e31a:	2300      	movs	r3, #0
 800e31c:	602b      	str	r3, [r5, #0]
 800e31e:	89b3      	ldrh	r3, [r6, #12]
 800e320:	061a      	lsls	r2, r3, #24
 800e322:	d410      	bmi.n	800e346 <__swhatbuf_r+0x3e>
 800e324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e328:	e00e      	b.n	800e348 <__swhatbuf_r+0x40>
 800e32a:	466a      	mov	r2, sp
 800e32c:	f000 f8be 	bl	800e4ac <_fstat_r>
 800e330:	2800      	cmp	r0, #0
 800e332:	dbf2      	blt.n	800e31a <__swhatbuf_r+0x12>
 800e334:	9a01      	ldr	r2, [sp, #4]
 800e336:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e33a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e33e:	425a      	negs	r2, r3
 800e340:	415a      	adcs	r2, r3
 800e342:	602a      	str	r2, [r5, #0]
 800e344:	e7ee      	b.n	800e324 <__swhatbuf_r+0x1c>
 800e346:	2340      	movs	r3, #64	; 0x40
 800e348:	2000      	movs	r0, #0
 800e34a:	6023      	str	r3, [r4, #0]
 800e34c:	b016      	add	sp, #88	; 0x58
 800e34e:	bd70      	pop	{r4, r5, r6, pc}

0800e350 <__smakebuf_r>:
 800e350:	898b      	ldrh	r3, [r1, #12]
 800e352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e354:	079d      	lsls	r5, r3, #30
 800e356:	4606      	mov	r6, r0
 800e358:	460c      	mov	r4, r1
 800e35a:	d507      	bpl.n	800e36c <__smakebuf_r+0x1c>
 800e35c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	6123      	str	r3, [r4, #16]
 800e364:	2301      	movs	r3, #1
 800e366:	6163      	str	r3, [r4, #20]
 800e368:	b002      	add	sp, #8
 800e36a:	bd70      	pop	{r4, r5, r6, pc}
 800e36c:	ab01      	add	r3, sp, #4
 800e36e:	466a      	mov	r2, sp
 800e370:	f7ff ffca 	bl	800e308 <__swhatbuf_r>
 800e374:	9900      	ldr	r1, [sp, #0]
 800e376:	4605      	mov	r5, r0
 800e378:	4630      	mov	r0, r6
 800e37a:	f7ff fa73 	bl	800d864 <_malloc_r>
 800e37e:	b948      	cbnz	r0, 800e394 <__smakebuf_r+0x44>
 800e380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e384:	059a      	lsls	r2, r3, #22
 800e386:	d4ef      	bmi.n	800e368 <__smakebuf_r+0x18>
 800e388:	f023 0303 	bic.w	r3, r3, #3
 800e38c:	f043 0302 	orr.w	r3, r3, #2
 800e390:	81a3      	strh	r3, [r4, #12]
 800e392:	e7e3      	b.n	800e35c <__smakebuf_r+0xc>
 800e394:	4b0d      	ldr	r3, [pc, #52]	; (800e3cc <__smakebuf_r+0x7c>)
 800e396:	62b3      	str	r3, [r6, #40]	; 0x28
 800e398:	89a3      	ldrh	r3, [r4, #12]
 800e39a:	6020      	str	r0, [r4, #0]
 800e39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3a0:	81a3      	strh	r3, [r4, #12]
 800e3a2:	9b00      	ldr	r3, [sp, #0]
 800e3a4:	6163      	str	r3, [r4, #20]
 800e3a6:	9b01      	ldr	r3, [sp, #4]
 800e3a8:	6120      	str	r0, [r4, #16]
 800e3aa:	b15b      	cbz	r3, 800e3c4 <__smakebuf_r+0x74>
 800e3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	f000 f88d 	bl	800e4d0 <_isatty_r>
 800e3b6:	b128      	cbz	r0, 800e3c4 <__smakebuf_r+0x74>
 800e3b8:	89a3      	ldrh	r3, [r4, #12]
 800e3ba:	f023 0303 	bic.w	r3, r3, #3
 800e3be:	f043 0301 	orr.w	r3, r3, #1
 800e3c2:	81a3      	strh	r3, [r4, #12]
 800e3c4:	89a0      	ldrh	r0, [r4, #12]
 800e3c6:	4305      	orrs	r5, r0
 800e3c8:	81a5      	strh	r5, [r4, #12]
 800e3ca:	e7cd      	b.n	800e368 <__smakebuf_r+0x18>
 800e3cc:	0800d6bd 	.word	0x0800d6bd

0800e3d0 <__malloc_lock>:
 800e3d0:	4801      	ldr	r0, [pc, #4]	; (800e3d8 <__malloc_lock+0x8>)
 800e3d2:	f7ff ba45 	b.w	800d860 <__retarget_lock_acquire_recursive>
 800e3d6:	bf00      	nop
 800e3d8:	20009bc4 	.word	0x20009bc4

0800e3dc <__malloc_unlock>:
 800e3dc:	4801      	ldr	r0, [pc, #4]	; (800e3e4 <__malloc_unlock+0x8>)
 800e3de:	f7ff ba40 	b.w	800d862 <__retarget_lock_release_recursive>
 800e3e2:	bf00      	nop
 800e3e4:	20009bc4 	.word	0x20009bc4

0800e3e8 <_free_r>:
 800e3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3ea:	2900      	cmp	r1, #0
 800e3ec:	d048      	beq.n	800e480 <_free_r+0x98>
 800e3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3f2:	9001      	str	r0, [sp, #4]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f1a1 0404 	sub.w	r4, r1, #4
 800e3fa:	bfb8      	it	lt
 800e3fc:	18e4      	addlt	r4, r4, r3
 800e3fe:	f7ff ffe7 	bl	800e3d0 <__malloc_lock>
 800e402:	4a20      	ldr	r2, [pc, #128]	; (800e484 <_free_r+0x9c>)
 800e404:	9801      	ldr	r0, [sp, #4]
 800e406:	6813      	ldr	r3, [r2, #0]
 800e408:	4615      	mov	r5, r2
 800e40a:	b933      	cbnz	r3, 800e41a <_free_r+0x32>
 800e40c:	6063      	str	r3, [r4, #4]
 800e40e:	6014      	str	r4, [r2, #0]
 800e410:	b003      	add	sp, #12
 800e412:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e416:	f7ff bfe1 	b.w	800e3dc <__malloc_unlock>
 800e41a:	42a3      	cmp	r3, r4
 800e41c:	d90b      	bls.n	800e436 <_free_r+0x4e>
 800e41e:	6821      	ldr	r1, [r4, #0]
 800e420:	1862      	adds	r2, r4, r1
 800e422:	4293      	cmp	r3, r2
 800e424:	bf04      	itt	eq
 800e426:	681a      	ldreq	r2, [r3, #0]
 800e428:	685b      	ldreq	r3, [r3, #4]
 800e42a:	6063      	str	r3, [r4, #4]
 800e42c:	bf04      	itt	eq
 800e42e:	1852      	addeq	r2, r2, r1
 800e430:	6022      	streq	r2, [r4, #0]
 800e432:	602c      	str	r4, [r5, #0]
 800e434:	e7ec      	b.n	800e410 <_free_r+0x28>
 800e436:	461a      	mov	r2, r3
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	b10b      	cbz	r3, 800e440 <_free_r+0x58>
 800e43c:	42a3      	cmp	r3, r4
 800e43e:	d9fa      	bls.n	800e436 <_free_r+0x4e>
 800e440:	6811      	ldr	r1, [r2, #0]
 800e442:	1855      	adds	r5, r2, r1
 800e444:	42a5      	cmp	r5, r4
 800e446:	d10b      	bne.n	800e460 <_free_r+0x78>
 800e448:	6824      	ldr	r4, [r4, #0]
 800e44a:	4421      	add	r1, r4
 800e44c:	1854      	adds	r4, r2, r1
 800e44e:	42a3      	cmp	r3, r4
 800e450:	6011      	str	r1, [r2, #0]
 800e452:	d1dd      	bne.n	800e410 <_free_r+0x28>
 800e454:	681c      	ldr	r4, [r3, #0]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	6053      	str	r3, [r2, #4]
 800e45a:	4421      	add	r1, r4
 800e45c:	6011      	str	r1, [r2, #0]
 800e45e:	e7d7      	b.n	800e410 <_free_r+0x28>
 800e460:	d902      	bls.n	800e468 <_free_r+0x80>
 800e462:	230c      	movs	r3, #12
 800e464:	6003      	str	r3, [r0, #0]
 800e466:	e7d3      	b.n	800e410 <_free_r+0x28>
 800e468:	6825      	ldr	r5, [r4, #0]
 800e46a:	1961      	adds	r1, r4, r5
 800e46c:	428b      	cmp	r3, r1
 800e46e:	bf04      	itt	eq
 800e470:	6819      	ldreq	r1, [r3, #0]
 800e472:	685b      	ldreq	r3, [r3, #4]
 800e474:	6063      	str	r3, [r4, #4]
 800e476:	bf04      	itt	eq
 800e478:	1949      	addeq	r1, r1, r5
 800e47a:	6021      	streq	r1, [r4, #0]
 800e47c:	6054      	str	r4, [r2, #4]
 800e47e:	e7c7      	b.n	800e410 <_free_r+0x28>
 800e480:	b003      	add	sp, #12
 800e482:	bd30      	pop	{r4, r5, pc}
 800e484:	20009898 	.word	0x20009898

0800e488 <_read_r>:
 800e488:	b538      	push	{r3, r4, r5, lr}
 800e48a:	4d07      	ldr	r5, [pc, #28]	; (800e4a8 <_read_r+0x20>)
 800e48c:	4604      	mov	r4, r0
 800e48e:	4608      	mov	r0, r1
 800e490:	4611      	mov	r1, r2
 800e492:	2200      	movs	r2, #0
 800e494:	602a      	str	r2, [r5, #0]
 800e496:	461a      	mov	r2, r3
 800e498:	f7f3 fc32 	bl	8001d00 <_read>
 800e49c:	1c43      	adds	r3, r0, #1
 800e49e:	d102      	bne.n	800e4a6 <_read_r+0x1e>
 800e4a0:	682b      	ldr	r3, [r5, #0]
 800e4a2:	b103      	cbz	r3, 800e4a6 <_read_r+0x1e>
 800e4a4:	6023      	str	r3, [r4, #0]
 800e4a6:	bd38      	pop	{r3, r4, r5, pc}
 800e4a8:	20009bcc 	.word	0x20009bcc

0800e4ac <_fstat_r>:
 800e4ac:	b538      	push	{r3, r4, r5, lr}
 800e4ae:	4d07      	ldr	r5, [pc, #28]	; (800e4cc <_fstat_r+0x20>)
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	4608      	mov	r0, r1
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	602b      	str	r3, [r5, #0]
 800e4ba:	f7f3 fc66 	bl	8001d8a <_fstat>
 800e4be:	1c43      	adds	r3, r0, #1
 800e4c0:	d102      	bne.n	800e4c8 <_fstat_r+0x1c>
 800e4c2:	682b      	ldr	r3, [r5, #0]
 800e4c4:	b103      	cbz	r3, 800e4c8 <_fstat_r+0x1c>
 800e4c6:	6023      	str	r3, [r4, #0]
 800e4c8:	bd38      	pop	{r3, r4, r5, pc}
 800e4ca:	bf00      	nop
 800e4cc:	20009bcc 	.word	0x20009bcc

0800e4d0 <_isatty_r>:
 800e4d0:	b538      	push	{r3, r4, r5, lr}
 800e4d2:	4d06      	ldr	r5, [pc, #24]	; (800e4ec <_isatty_r+0x1c>)
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	4608      	mov	r0, r1
 800e4da:	602b      	str	r3, [r5, #0]
 800e4dc:	f7f3 fc65 	bl	8001daa <_isatty>
 800e4e0:	1c43      	adds	r3, r0, #1
 800e4e2:	d102      	bne.n	800e4ea <_isatty_r+0x1a>
 800e4e4:	682b      	ldr	r3, [r5, #0]
 800e4e6:	b103      	cbz	r3, 800e4ea <_isatty_r+0x1a>
 800e4e8:	6023      	str	r3, [r4, #0]
 800e4ea:	bd38      	pop	{r3, r4, r5, pc}
 800e4ec:	20009bcc 	.word	0x20009bcc

0800e4f0 <_init>:
 800e4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f2:	bf00      	nop
 800e4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4f6:	bc08      	pop	{r3}
 800e4f8:	469e      	mov	lr, r3
 800e4fa:	4770      	bx	lr

0800e4fc <_fini>:
 800e4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fe:	bf00      	nop
 800e500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e502:	bc08      	pop	{r3}
 800e504:	469e      	mov	lr, r3
 800e506:	4770      	bx	lr
