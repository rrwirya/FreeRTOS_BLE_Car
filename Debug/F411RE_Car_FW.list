
F411RE_Car_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800e028  0800e028  0001e028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6e0  0800e6e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6e0  0800e6e0  0001e6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6e8  0800e6e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6e8  0800e6e8  0001e6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6ec  0800e6ec  0001e6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800e6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009b5c  20000070  0800e760  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20009bcc  0800e760  00029bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000439e7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000691f  00000000  00000000  00063a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002610  00000000  00000000  0006a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023b8  00000000  00000000  0006c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d2a  00000000  00000000  0006ed70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000301c0  00000000  00000000  0008fa9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3cc5  00000000  00000000  000bfc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017391f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a978  00000000  00000000  00173974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e010 	.word	0x0800e010

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800e010 	.word	0x0800e010

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800057c:	2006      	movs	r0, #6
 800057e:	f002 fa6d 	bl	8002a5c <HAL_NVIC_EnableIRQ>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}

08000586 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800058a:	2006      	movs	r0, #6
 800058c:	f002 fa7e 	bl	8002a8c <HAL_NVIC_DisableIRQ>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}

08000594 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <HCI_TL_SPI_Init+0x90>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a1f      	ldr	r2, [pc, #124]	; (8000624 <HCI_TL_SPI_Init+0x90>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <HCI_TL_SPI_Init+0x90>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005b8:	2301      	movs	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <HCI_TL_SPI_Init+0x94>)
 80005be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	4619      	mov	r1, r3
 80005ca:	4818      	ldr	r0, [pc, #96]	; (800062c <HCI_TL_SPI_Init+0x98>)
 80005cc:	f002 ff6e 	bl	80034ac <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	4810      	ldr	r0, [pc, #64]	; (800062c <HCI_TL_SPI_Init+0x98>)
 80005ea:	f002 ff5f 	bl	80034ac <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005ee:	2302      	movs	r3, #2
 80005f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4619      	mov	r1, r3
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <HCI_TL_SPI_Init+0x98>)
 8000606:	f002 ff51 	bl	80034ac <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2102      	movs	r1, #2
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <HCI_TL_SPI_Init+0x98>)
 8000610:	f003 fb1c 	bl	8003c4c <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8000614:	f000 fede 	bl	80013d4 <BSP_SPI1_Init>
 8000618:	4603      	mov	r3, r0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	10110000 	.word	0x10110000
 800062c:	40020000 	.word	0x40020000

08000630 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000634:	2101      	movs	r1, #1
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <HCI_TL_SPI_DeInit+0x24>)
 8000638:	f003 f9e0 	bl	80039fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800063c:	2102      	movs	r1, #2
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <HCI_TL_SPI_DeInit+0x24>)
 8000640:	f003 f9dc 	bl	80039fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <HCI_TL_SPI_DeInit+0x24>)
 800064a:	f003 f9d7 	bl	80039fc <HAL_GPIO_DeInit>
  return 0;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020000 	.word	0x40020000

08000658 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2102      	movs	r1, #2
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <HCI_TL_SPI_Reset+0x38>)
 8000662:	f003 faf3 	bl	8003c4c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4808      	ldr	r0, [pc, #32]	; (8000690 <HCI_TL_SPI_Reset+0x38>)
 800066e:	f003 faed 	bl	8003c4c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000672:	2005      	movs	r0, #5
 8000674:	f001 fcd2 	bl	800201c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <HCI_TL_SPI_Reset+0x38>)
 8000680:	f003 fae4 	bl	8003c4c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000684:	2005      	movs	r0, #5
 8000686:	f001 fcc9 	bl	800201c <HAL_Delay>
  return 0;
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40020000 	.word	0x40020000

08000694 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80006a4:	2300      	movs	r3, #0
 80006a6:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006a8:	4a26      	ldr	r2, [pc, #152]	; (8000744 <HCI_TL_SPI_Receive+0xb0>)
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b2:	6018      	str	r0, [r3, #0]
 80006b4:	3304      	adds	r3, #4
 80006b6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80006b8:	f7ff ff65 	bl	8000586 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2102      	movs	r1, #2
 80006c0:	4821      	ldr	r0, [pc, #132]	; (8000748 <HCI_TL_SPI_Receive+0xb4>)
 80006c2:	f003 fac3 	bl	8003c4c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006c6:	f107 010c 	add.w	r1, r7, #12
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2205      	movs	r2, #5
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 feaf 	bl	8001434 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80006d6:	7c3b      	ldrb	r3, [r7, #16]
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	b21a      	sxth	r2, r3
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b21b      	sxth	r3, r3
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b21b      	sxth	r3, r3
 80006e4:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80006e6:	8bfb      	ldrh	r3, [r7, #30]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d01e      	beq.n	800072a <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80006ec:	8bfa      	ldrh	r2, [r7, #30]
 80006ee:	887b      	ldrh	r3, [r7, #2]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d901      	bls.n	80006f8 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 80006f4:	887b      	ldrh	r3, [r7, #2]
 80006f6:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	777b      	strb	r3, [r7, #29]
 80006fc:	e010      	b.n	8000720 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80006fe:	f107 011b 	add.w	r1, r7, #27
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2201      	movs	r2, #1
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fe93 	bl	8001434 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 800070e:	7f7b      	ldrb	r3, [r7, #29]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	7efa      	ldrb	r2, [r7, #27]
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 800071a:	7f7b      	ldrb	r3, [r7, #29]
 800071c:	3301      	adds	r3, #1
 800071e:	777b      	strb	r3, [r7, #29]
 8000720:	7f7b      	ldrb	r3, [r7, #29]
 8000722:	b29b      	uxth	r3, r3
 8000724:	8bfa      	ldrh	r2, [r7, #30]
 8000726:	429a      	cmp	r2, r3
 8000728:	d8e9      	bhi.n	80006fe <HCI_TL_SPI_Receive+0x6a>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2102      	movs	r1, #2
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <HCI_TL_SPI_Receive+0xb4>)
 8000730:	f003 fa8c 	bl	8003c4c <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 8000734:	f7ff ff20 	bl	8000578 <HCI_TL_SPI_Enable_IRQ>

  return len;
 8000738:	7f7b      	ldrb	r3, [r7, #29]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3720      	adds	r7, #32
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	0800e028 	.word	0x0800e028
 8000748:	40020000 	.word	0x40020000

0800074c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000758:	4a34      	ldr	r2, [pc, #208]	; (800082c <HCI_TL_SPI_Send+0xe0>)
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000762:	6018      	str	r0, [r3, #0]
 8000764:	3304      	adds	r3, #4
 8000766:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000768:	f001 fc4c 	bl	8002004 <HAL_GetTick>
 800076c:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 800076e:	f7ff ff0a 	bl	8000586 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8000772:	f001 fc47 	bl	8002004 <HAL_GetTick>
 8000776:	61f8      	str	r0, [r7, #28]

    result = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2102      	movs	r1, #2
 8000780:	482b      	ldr	r0, [pc, #172]	; (8000830 <HCI_TL_SPI_Send+0xe4>)
 8000782:	f003 fa63 	bl	8003c4c <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8000786:	e00a      	b.n	800079e <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8000788:	f001 fc3c 	bl	8002004 <HAL_GetTick>
 800078c:	4602      	mov	r2, r0
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	2b0f      	cmp	r3, #15
 8000794:	d903      	bls.n	800079e <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 8000796:	f06f 0302 	mvn.w	r3, #2
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800079c:	e004      	b.n	80007a8 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 800079e:	f000 f84b 	bl	8000838 <IsDataAvailable>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0ef      	beq.n	8000788 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 80007a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007aa:	f113 0f03 	cmn.w	r3, #3
 80007ae:	d105      	bne.n	80007bc <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2102      	movs	r1, #2
 80007b4:	481e      	ldr	r0, [pc, #120]	; (8000830 <HCI_TL_SPI_Send+0xe4>)
 80007b6:	f003 fa49 	bl	8003c4c <HAL_GPIO_WritePin>
      break;
 80007ba:	e030      	b.n	800081e <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007bc:	f107 010c 	add.w	r1, r7, #12
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2205      	movs	r2, #5
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fe34 	bl	8001434 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	7b7b      	ldrb	r3, [r7, #13]
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b21b      	sxth	r3, r3
 80007da:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80007dc:	8b7a      	ldrh	r2, [r7, #26]
 80007de:	887b      	ldrh	r3, [r7, #2]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d306      	bcc.n	80007f2 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80007e4:	887b      	ldrh	r3, [r7, #2]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4912      	ldr	r1, [pc, #72]	; (8000834 <HCI_TL_SPI_Send+0xe8>)
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 fe22 	bl	8001434 <BSP_SPI1_SendRecv>
 80007f0:	e002      	b.n	80007f8 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80007f2:	f06f 0301 	mvn.w	r3, #1
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2102      	movs	r1, #2
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <HCI_TL_SPI_Send+0xe4>)
 80007fe:	f003 fa25 	bl	8003c4c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000802:	f001 fbff 	bl	8002004 <HAL_GetTick>
 8000806:	4602      	mov	r2, r0
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d903      	bls.n	8000818 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000810:	f06f 0302 	mvn.w	r3, #2
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000816:	e002      	b.n	800081e <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	2b00      	cmp	r3, #0
 800081c:	dba9      	blt.n	8000772 <HCI_TL_SPI_Send+0x26>

  HCI_TL_SPI_Enable_IRQ();
 800081e:	f7ff feab 	bl	8000578 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8000822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000824:	4618      	mov	r0, r3
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0800e030 	.word	0x0800e030
 8000830:	40020000 	.word	0x40020000
 8000834:	2000008c 	.word	0x2000008c

08000838 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800083c:	2101      	movs	r1, #1
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <IsDataAvailable+0x1c>)
 8000840:	f003 f9de 	bl	8003c00 <HAL_GPIO_ReadPin>
 8000844:	4603      	mov	r3, r0
 8000846:	2b01      	cmp	r3, #1
 8000848:	bf0c      	ite	eq
 800084a:	2301      	moveq	r3, #1
 800084c:	2300      	movne	r3, #0
 800084e:	b2db      	uxtb	r3, r3
}
 8000850:	4618      	mov	r0, r3
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020000 	.word	0x40020000

08000858 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <hci_tl_lowlevel_init+0x54>)
 8000860:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <hci_tl_lowlevel_init+0x58>)
 8000864:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <hci_tl_lowlevel_init+0x5c>)
 8000868:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <hci_tl_lowlevel_init+0x60>)
 800086c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <hci_tl_lowlevel_init+0x64>)
 8000870:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <hci_tl_lowlevel_init+0x68>)
 8000874:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4618      	mov	r0, r3
 800087a:	f009 fba1 	bl	8009fc0 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800087e:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000882:	4810      	ldr	r0, [pc, #64]	; (80008c4 <hci_tl_lowlevel_init+0x6c>)
 8000884:	f002 fdbc 	bl	8003400 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <hci_tl_lowlevel_init+0x70>)
 800088a:	2100      	movs	r1, #0
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <hci_tl_lowlevel_init+0x6c>)
 800088e:	f002 fd9d 	bl	80033cc <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2006      	movs	r0, #6
 8000898:	f002 f8b4 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800089c:	2006      	movs	r0, #6
 800089e:	f002 f8dd 	bl	8002a5c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80008a2:	bf00      	nop
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	08000595 	.word	0x08000595
 80008b0:	08000631 	.word	0x08000631
 80008b4:	0800074d 	.word	0x0800074d
 80008b8:	08000695 	.word	0x08000695
 80008bc:	08000659 	.word	0x08000659
 80008c0:	08001475 	.word	0x08001475
 80008c4:	200098b4 	.word	0x200098b4
 80008c8:	080008cd 	.word	0x080008cd

080008cc <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80008d0:	e005      	b.n	80008de <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80008d2:	2000      	movs	r0, #0
 80008d4:	f009 fcae 	bl	800a234 <hci_notify_asynch_evt>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d105      	bne.n	80008ea <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80008de:	f7ff ffab 	bl	8000838 <IsDataAvailable>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1f4      	bne.n	80008d2 <hci_tl_lowlevel_isr+0x6>
 80008e8:	e000      	b.n	80008ec <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80008ea:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_ADC1_Init+0x98>)
 8000904:	4a21      	ldr	r2, [pc, #132]	; (800098c <MX_ADC1_Init+0x9c>)
 8000906:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_ADC1_Init+0x98>)
 800090a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800090e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_ADC1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_ADC1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_ADC1_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_ADC1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_ADC1_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_ADC1_Init+0x98>)
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <MX_ADC1_Init+0xa0>)
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_ADC1_Init+0x98>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_ADC1_Init+0x98>)
 800093e:	2201      	movs	r2, #1
 8000940:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_ADC1_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_ADC1_Init+0x98>)
 800094c:	2201      	movs	r2, #1
 800094e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_ADC1_Init+0x98>)
 8000952:	f001 fb87 	bl	8002064 <HAL_ADC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800095c:	f001 f864 	bl	8001a28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000960:	2302      	movs	r3, #2
 8000962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000964:	2301      	movs	r3, #1
 8000966:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_ADC1_Init+0x98>)
 8000972:	f001 fcd5 	bl	8002320 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800097c:	f001 f854 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200098bc 	.word	0x200098bc
 800098c:	40012000 	.word	0x40012000
 8000990:	0f000001 	.word	0x0f000001

08000994 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <HAL_ADC_MspInit+0xd8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d156      	bne.n	8000a64 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b2d      	ldr	r3, [pc, #180]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a2c      	ldr	r2, [pc, #176]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a25      	ldr	r2, [pc, #148]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <HAL_ADC_MspInit+0xdc>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ee:	2304      	movs	r3, #4
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f2:	2303      	movs	r3, #3
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	481c      	ldr	r0, [pc, #112]	; (8000a74 <HAL_ADC_MspInit+0xe0>)
 8000a02:	f002 fd53 	bl	80034ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a08:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <HAL_ADC_MspInit+0xe8>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a4a:	f002 f837 	bl	8002abc <HAL_DMA_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000a54:	f000 ffe8 	bl	8001a28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a5e:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_ADC_MspInit+0xe4>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40012000 	.word	0x40012000
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	20009904 	.word	0x20009904
 8000a7c:	40026410 	.word	0x40026410

08000a80 <BlueNRG_Init>:
/**
  * @brief	Main initialization function. To be called at system startup
  * @note		Initializes BlueNRG-2 SPI Interface, HCI application, GAP and GATT layers
  */
void BlueNRG_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af02      	add	r7, sp, #8
	uint8_t ret;

	/* Initialize SPI1 Peripheral and Bluetooth Host Controller Interface */
	hci_init(APP_UserEvtRx, NULL);
 8000a86:	2100      	movs	r1, #0
 8000a88:	481a      	ldr	r0, [pc, #104]	; (8000af4 <BlueNRG_Init+0x74>)
 8000a8a:	f009 fa57 	bl	8009f3c <hci_init>

	/* SAMPLEAPP EXAMPLE - Software reset of device and required 2 second delay */
	hci_reset();
 8000a8e:	f008 fb41 	bl	8009114 <hci_reset>
	HAL_Delay(2000);
 8000a92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a96:	f001 fac1 	bl	800201c <HAL_Delay>

	/* Configure transmit power to high power at -2dBm */
	ret = aci_hal_set_tx_power_level(1, 4);
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f009 f955 	bl	8009d4c <aci_hal_set_tx_power_level>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <BlueNRG_Init+0x34>
 8000aac:	215e      	movs	r1, #94	; 0x5e
 8000aae:	4812      	ldr	r0, [pc, #72]	; (8000af8 <BlueNRG_Init+0x78>)
 8000ab0:	f000 ffc0 	bl	8001a34 <assert_failed>

	/* Configure BLE device public address if it will be used */
	Setup_DeviceAddress();
 8000ab4:	f000 f828 	bl	8000b08 <Setup_DeviceAddress>

	/* Initialize BLE GATT layer */
	ret = aci_gatt_init();
 8000ab8:	f008 fd61 	bl	800957e <aci_gatt_init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	71fb      	strb	r3, [r7, #7]
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <BlueNRG_Init+0x4e>
 8000ac6:	2165      	movs	r1, #101	; 0x65
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <BlueNRG_Init+0x78>)
 8000aca:	f000 ffb3 	bl	8001a34 <assert_failed>
	/** Initialize BLE GAP layer with the following characteristics:
	 * 		+ role = 0x01 -> BLE-FreeRTOS Car is Peripheral device
	 *		+ privacy_enabled = 0x00 -> Privacy disabled
	 *		+ device_name_char_len = 8
	 */
	aci_gap_init(GAP_PERIPHERAL_ROLE, GAP_PRIVACY_DISABLED, 0x08, &hGAPService, &hDevNameChar, &hAppearanceChar);
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <BlueNRG_Init+0x7c>)
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <BlueNRG_Init+0x80>)
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <BlueNRG_Init+0x84>)
 8000ad8:	2208      	movs	r2, #8
 8000ada:	2100      	movs	r1, #0
 8000adc:	2001      	movs	r0, #1
 8000ade:	f008 fcc3 	bl	8009468 <aci_gap_init>

	/* Configure further the services and characteristics to be included in the GATT database */
	GAP_Peripheral_ConfigService();
 8000ae2:	f000 f861 	bl	8000ba8 <GAP_Peripheral_ConfigService>

	Server_ResetConnectionStatus();
 8000ae6:	f000 fa15 	bl	8000f14 <Server_ResetConnectionStatus>
     */
	aci_gap_init(GAP_CENTRAL_ROLE, GAP_PRIVACY_DISABLED, 0x08, &hGAPService, &hDevNameChar, &hAppearanceChar);

#endif

}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	08000ff1 	.word	0x08000ff1
 8000af8:	0800e038 	.word	0x0800e038
 8000afc:	20000192 	.word	0x20000192
 8000b00:	20000190 	.word	0x20000190
 8000b04:	2000018e 	.word	0x2000018e

08000b08 <Setup_DeviceAddress>:
  * @note		This MAC address will only be used to connect with other (Central devices). Central devices
  *					will see this MAC address and use it to connect with this peripheral device. Peripheral will
  *					include the MAC address in the advertisement data.
  */
static void Setup_DeviceAddress(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
	tBleStatus ret;
	uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000b0e:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <Setup_DeviceAddress+0x98>)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b18:	6018      	str	r0, [r3, #0]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	8019      	strh	r1, [r3, #0]
	uint8_t random_number[8];

	/* get a random number from BlueNRG */
	ret = hci_le_rand(random_number);
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4618      	mov	r0, r3
 8000b22:	f008 fb84 	bl	800922e <hci_le_rand>
 8000b26:	4603      	mov	r3, r0
 8000b28:	757b      	strb	r3, [r7, #21]
	if(ret != BLE_STATUS_SUCCESS)
	{
		PRINT_DBG("hci_le_rand() call failed: 0x%02x\r\n", ret);
	}

	discovery_time = 3000; /* at least 3 seconds */
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <Setup_DeviceAddress+0x9c>)
 8000b2c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b30:	801a      	strh	r2, [r3, #0]
	/* setup discovery time with random number */
	for (uint8_t i=0; i<8; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	75fb      	strb	r3, [r7, #23]
 8000b36:	e011      	b.n	8000b5c <Setup_DeviceAddress+0x54>
	{
		discovery_time += (2*random_number[i]);
 8000b38:	7dfb      	ldrb	r3, [r7, #23]
 8000b3a:	f107 0218 	add.w	r2, r7, #24
 8000b3e:	4413      	add	r3, r2
 8000b40:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <Setup_DeviceAddress+0x9c>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <Setup_DeviceAddress+0x9c>)
 8000b54:	801a      	strh	r2, [r3, #0]
	for (uint8_t i=0; i<8; i++)
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	75fb      	strb	r3, [r7, #23]
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	d9ea      	bls.n	8000b38 <Setup_DeviceAddress+0x30>
	}

	/* Setup last 3 bytes of public address with random number */
	bdaddr[0] = (uint8_t) (random_number[0]);
 8000b62:	793b      	ldrb	r3, [r7, #4]
 8000b64:	733b      	strb	r3, [r7, #12]
	bdaddr[1] = (uint8_t) (random_number[3]);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	737b      	strb	r3, [r7, #13]
	bdaddr[2] = (uint8_t) (random_number[6]);
 8000b6a:	7abb      	ldrb	r3, [r7, #10]
 8000b6c:	73bb      	strb	r3, [r7, #14]

	/* Configure public MAC address (bdaddr[3:5] is company specific, while bdaddr[0:2] is device specific) */
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	461a      	mov	r2, r3
 8000b74:	2106      	movs	r1, #6
 8000b76:	2000      	movs	r0, #0
 8000b78:	f009 f878 	bl	8009c6c <aci_hal_write_config_data>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	757b      	strb	r3, [r7, #21]
	if(ret != BLE_STATUS_SUCCESS)
 8000b80:	7d7b      	ldrb	r3, [r7, #21]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d108      	bne.n	8000b98 <Setup_DeviceAddress+0x90>
	  PRINT_DBG("Setting BD_ADDR failed 0x%02x\r\n", ret);
	}
	else
	{
		PRINT_DBG("Public address: ");
		for (uint8_t i=5; i>0; i--)
 8000b86:	2305      	movs	r3, #5
 8000b88:	75bb      	strb	r3, [r7, #22]
 8000b8a:	e002      	b.n	8000b92 <Setup_DeviceAddress+0x8a>
 8000b8c:	7dbb      	ldrb	r3, [r7, #22]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	75bb      	strb	r3, [r7, #22]
 8000b92:	7dbb      	ldrb	r3, [r7, #22]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f9      	bne.n	8000b8c <Setup_DeviceAddress+0x84>
		  PRINT_DBG("%02X-", bdaddr[i]);
		}
		PRINT_DBG("%02X\r\n", bdaddr[0]);
	}

}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	0800e054 	.word	0x0800e054
 8000ba4:	2000018c 	.word	0x2000018c

08000ba8 <GAP_Peripheral_ConfigService>:
  * @brief	Configure Services and associated Characteristics in GATT Server
  * @note		Must be called as these characteristics are involved with data flow and data
  *					transfer via BLE protocol. Values will be exchanged through characteristics.
  */
static void GAP_Peripheral_ConfigService(void)
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b0b6      	sub	sp, #216	; 0xd8
 8000bac:	af0a      	add	r7, sp, #40	; 0x28
	/* 128-bit UUID Declarations for 1 Service and the 4 Characteristics underneath that Service */

	/* Configure 128-bit Service UUID since Sciton does not have dedicated 16-bit Service
	   UUID with Bluetooth SIG. Service UUID obtained through UUID generator.
	   UUID (uuidgenerator.net): a898328b-03f9-4d63-b11d-51505ae1ce5d */
	const uint8_t service_uuid[16] =
 8000bae:	4bb1      	ldr	r3, [pc, #708]	; (8000e74 <GAP_Peripheral_ConfigService+0x2cc>)
 8000bb0:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000bb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x5D,0xCE,0xE1,0x5A,0x50,0x51,0x1D,0xB1,0x63,0x4D,0xF9,0x03,0x8B,0x32,0x98,0xA8};
	const uint8_t char1_uuid[16] =
 8000bba:	4baf      	ldr	r3, [pc, #700]	; (8000e78 <GAP_Peripheral_ConfigService+0x2d0>)
 8000bbc:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000bc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x96,0xF7,0x4E,0xBF,0xB3,0x8E,0xB7,0x82,0x36,0x4B,0x7E,0x8B,0x00,0x00,0x00,0x01};
	const uint8_t char2_uuid[16] =
 8000bc6:	4bad      	ldr	r3, [pc, #692]	; (8000e7c <GAP_Peripheral_ConfigService+0x2d4>)
 8000bc8:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000bcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x96,0xF7,0x4E,0xBF,0xB3,0x8E,0xB7,0x82,0x36,0x4B,0x7E,0x8B,0x00,0x00,0x00,0x02};
	const uint8_t char3_uuid[16] =
 8000bd2:	4bab      	ldr	r3, [pc, #684]	; (8000e80 <GAP_Peripheral_ConfigService+0x2d8>)
 8000bd4:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000bd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x96,0xF7,0x4E,0xBF,0xB3,0x8E,0xB7,0x82,0x36,0x4B,0x7E,0x8B,0x00,0x00,0x00,0x03};
	const uint8_t char4_uuid[16] =
 8000bde:	4ba9      	ldr	r3, [pc, #676]	; (8000e84 <GAP_Peripheral_ConfigService+0x2dc>)
 8000be0:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000be4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000be6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x96,0xF7,0x4E,0xBF,0xB3,0x8E,0xB7,0x82,0x36,0x4B,0x7E,0x8B,0x00,0x00,0x00,0x04};
	const uint8_t char5_uuid[16] =
 8000bea:	4ba7      	ldr	r3, [pc, #668]	; (8000e88 <GAP_Peripheral_ConfigService+0x2e0>)
 8000bec:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000bf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{0x96,0xF7,0x4E,0xBF,0xB3,0x8E,0xB7,0x82,0x36,0x4B,0x7E,0x8B,0x00,0x00,0x00,0x05};

	BLUENRG_memcpy(&suuid_object.Service_UUID_128, service_uuid, 16);
 8000bf6:	4ba5      	ldr	r3, [pc, #660]	; (8000e8c <GAP_Peripheral_ConfigService+0x2e4>)
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c00:	6028      	str	r0, [r5, #0]
 8000c02:	6069      	str	r1, [r5, #4]
 8000c04:	60aa      	str	r2, [r5, #8]
 8000c06:	60eb      	str	r3, [r5, #12]

	/* Add the Bluetooth Service based on the configuration above */
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8000c08:	4ba1      	ldr	r3, [pc, #644]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	2201      	movs	r2, #1
 8000c10:	499e      	ldr	r1, [pc, #632]	; (8000e8c <GAP_Peripheral_ConfigService+0x2e4>)
 8000c12:	2002      	movs	r0, #2
 8000c14:	f008 fcdd 	bl	80095d2 <aci_gatt_add_service>
		* Fixed characteristic value length							: FIXED_LENGTH
		*
		* This characteristic will be used (...TBD...)
		*/
	/* First characteristic's UUID */
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8000c18:	4b9e      	ldr	r3, [pc, #632]	; (8000e94 <GAP_Peripheral_ConfigService+0x2ec>)
 8000c1a:	461d      	mov	r5, r3
 8000c1c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c22:	6028      	str	r0, [r5, #0]
 8000c24:	6069      	str	r1, [r5, #4]
 8000c26:	60aa      	str	r2, [r5, #8]
 8000c28:	60eb      	str	r3, [r5, #12]
		* Fixed characteristic value length							: FIXED_LENGTH
		*
		* This characteristic will be used (...TBD...)
		*/
	/* Second characteristic's UUID */
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8000c2a:	4b9b      	ldr	r3, [pc, #620]	; (8000e98 <GAP_Peripheral_ConfigService+0x2f0>)
 8000c2c:	461d      	mov	r5, r3
 8000c2e:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c34:	6028      	str	r0, [r5, #0]
 8000c36:	6069      	str	r1, [r5, #4]
 8000c38:	60aa      	str	r2, [r5, #8]
 8000c3a:	60eb      	str	r3, [r5, #12]
		* Fixed characteristic value length							: FIXED_LENGTH
		*
		* This characteristic will be used (...TBD...)
		*/
	/* Third characteristic's UUID */
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8000c3c:	4b97      	ldr	r3, [pc, #604]	; (8000e9c <GAP_Peripheral_ConfigService+0x2f4>)
 8000c3e:	461d      	mov	r5, r3
 8000c40:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c46:	6028      	str	r0, [r5, #0]
 8000c48:	6069      	str	r1, [r5, #4]
 8000c4a:	60aa      	str	r2, [r5, #8]
 8000c4c:	60eb      	str	r3, [r5, #12]
		* Fixed characteristic value length							: FIXED_LENGTH
		*
		* This characteristic will be used (...TBD...)
		*/
	/* Fourth characteristic's UUID */
	BLUENRG_memcpy(&char_obj_4.Char_UUID_128, char4_uuid, 16);
 8000c4e:	4b94      	ldr	r3, [pc, #592]	; (8000ea0 <GAP_Peripheral_ConfigService+0x2f8>)
 8000c50:	461d      	mov	r5, r3
 8000c52:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c58:	6028      	str	r0, [r5, #0]
 8000c5a:	6069      	str	r1, [r5, #4]
 8000c5c:	60aa      	str	r2, [r5, #8]
 8000c5e:	60eb      	str	r3, [r5, #12]
		* Fixed characteristic value length							: FIXED_LENGTH
		*
		* This characteristic will be used (...TBD...)
		*/
	/* Third characteristic's UUID */
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8000c60:	4b90      	ldr	r3, [pc, #576]	; (8000ea4 <GAP_Peripheral_ConfigService+0x2fc>)
 8000c62:	461d      	mov	r5, r3
 8000c64:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c6a:	6028      	str	r0, [r5, #0]
 8000c6c:	6069      	str	r1, [r5, #4]
 8000c6e:	60aa      	str	r2, [r5, #8]
 8000c70:	60eb      	str	r3, [r5, #12]

	/* Configure the four characteristic defined above for the GATT server (peripheral) */\
	/* Characteristic will be used to notify if car went above speed limit */
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, 20, CHAR_PROP_NOTIFY,
 8000c72:	4b87      	ldr	r3, [pc, #540]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000c74:	8818      	ldrh	r0, [r3, #0]
 8000c76:	4b8c      	ldr	r3, [pc, #560]	; (8000ea8 <GAP_Peripheral_ConfigService+0x300>)
 8000c78:	9305      	str	r3, [sp, #20]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9304      	str	r3, [sp, #16]
 8000c7e:	2307      	movs	r3, #7
 8000c80:	9303      	str	r3, [sp, #12]
 8000c82:	2300      	movs	r3, #0
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	2300      	movs	r3, #0
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2314      	movs	r3, #20
 8000c90:	4a80      	ldr	r2, [pc, #512]	; (8000e94 <GAP_Peripheral_ConfigService+0x2ec>)
 8000c92:	2102      	movs	r1, #2
 8000c94:	f008 fd4c 	bl	8009730 <aci_gatt_add_char>
											ATTR_PERMISSION_NONE, GATT_DONT_NOTIFY_EVENTS,
											0x07, CHAR_VALUE_LEN_CONSTANT, &hClientNotify_OverSpeed);

	/* Characteristic will be used to notify if car almost crashed */
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_2, 20, CHAR_PROP_NOTIFY,
 8000c98:	4b7d      	ldr	r3, [pc, #500]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000c9a:	8818      	ldrh	r0, [r3, #0]
 8000c9c:	4b83      	ldr	r3, [pc, #524]	; (8000eac <GAP_Peripheral_ConfigService+0x304>)
 8000c9e:	9305      	str	r3, [sp, #20]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	9304      	str	r3, [sp, #16]
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	9303      	str	r3, [sp, #12]
 8000ca8:	2300      	movs	r3, #0
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	2300      	movs	r3, #0
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	2314      	movs	r3, #20
 8000cb6:	4a78      	ldr	r2, [pc, #480]	; (8000e98 <GAP_Peripheral_ConfigService+0x2f0>)
 8000cb8:	2102      	movs	r1, #2
 8000cba:	f008 fd39 	bl	8009730 <aci_gatt_add_char>
											ATTR_PERMISSION_NONE, GATT_DONT_NOTIFY_EVENTS,
											0x07, CHAR_VALUE_LEN_CONSTANT, &hClientNotify_Crash);

	/* Characteristic will be used to read velocity */
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_3, 20, CHAR_PROP_READ,
 8000cbe:	4b74      	ldr	r3, [pc, #464]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000cc0:	8818      	ldrh	r0, [r3, #0]
 8000cc2:	4b7b      	ldr	r3, [pc, #492]	; (8000eb0 <GAP_Peripheral_ConfigService+0x308>)
 8000cc4:	9305      	str	r3, [sp, #20]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9304      	str	r3, [sp, #16]
 8000cca:	2307      	movs	r3, #7
 8000ccc:	9303      	str	r3, [sp, #12]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2314      	movs	r3, #20
 8000cdc:	4a6f      	ldr	r2, [pc, #444]	; (8000e9c <GAP_Peripheral_ConfigService+0x2f4>)
 8000cde:	2102      	movs	r1, #2
 8000ce0:	f008 fd26 	bl	8009730 <aci_gatt_add_char>
											ATTR_PERMISSION_NONE, GATT_DONT_NOTIFY_EVENTS,
											0x07, CHAR_VALUE_LEN_CONSTANT, &hClientRead_Velocity);

	/* Characteristic will be used to receive input: N(orth), E(ast), S(outh), W(est), or SS (Stop) */
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_4, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP,
 8000ce4:	4b6a      	ldr	r3, [pc, #424]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000ce6:	8818      	ldrh	r0, [r3, #0]
 8000ce8:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <GAP_Peripheral_ConfigService+0x30c>)
 8000cea:	9305      	str	r3, [sp, #20]
 8000cec:	2300      	movs	r3, #0
 8000cee:	9304      	str	r3, [sp, #16]
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	9303      	str	r3, [sp, #12]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	9302      	str	r3, [sp, #8]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	230c      	movs	r3, #12
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2314      	movs	r3, #20
 8000d02:	4a67      	ldr	r2, [pc, #412]	; (8000ea0 <GAP_Peripheral_ConfigService+0x2f8>)
 8000d04:	2102      	movs	r1, #2
 8000d06:	f008 fd13 	bl	8009730 <aci_gatt_add_char>
											ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
											0x07, CHAR_VALUE_LEN_CONSTANT, &hClientWrite_Direction);

	/* Characteristic will be used to read the direction previously set/configured */
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_5, 20, CHAR_PROP_READ,
 8000d0a:	4b61      	ldr	r3, [pc, #388]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000d0c:	8818      	ldrh	r0, [r3, #0]
 8000d0e:	4b6a      	ldr	r3, [pc, #424]	; (8000eb8 <GAP_Peripheral_ConfigService+0x310>)
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	2300      	movs	r3, #0
 8000d14:	9304      	str	r3, [sp, #16]
 8000d16:	2307      	movs	r3, #7
 8000d18:	9303      	str	r3, [sp, #12]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	9302      	str	r3, [sp, #8]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	2302      	movs	r3, #2
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2314      	movs	r3, #20
 8000d28:	4a5e      	ldr	r2, [pc, #376]	; (8000ea4 <GAP_Peripheral_ConfigService+0x2fc>)
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	f008 fd00 	bl	8009730 <aci_gatt_add_char>
											ATTR_PERMISSION_NONE, GATT_DONT_NOTIFY_EVENTS,
											0x07, CHAR_VALUE_LEN_CONSTANT, &hClientRead_VerifyDirection);

	/* CCCD value */
	Char_Desc_Uuid_t DescriptorProperty;
	DescriptorProperty.Char_UUID_16 = CHAR_USER_DESC_UUID;
 8000d30:	f642 1301 	movw	r3, #10497	; 0x2901
 8000d34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	const char char1name[] = {'W','R','N','_','S','P','E','E','D'};
 8000d38:	4a60      	ldr	r2, [pc, #384]	; (8000ebc <GAP_Peripheral_ConfigService+0x314>)
 8000d3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d40:	c303      	stmia	r3!, {r0, r1}
 8000d42:	701a      	strb	r2, [r3, #0]
	const char char2name[] = {'W','R','N','_','C','R','A','S','H'};
 8000d44:	4a5e      	ldr	r2, [pc, #376]	; (8000ec0 <GAP_Peripheral_ConfigService+0x318>)
 8000d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d4c:	c303      	stmia	r3!, {r0, r1}
 8000d4e:	701a      	strb	r2, [r3, #0]
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8000d50:	4a5c      	ldr	r2, [pc, #368]	; (8000ec4 <GAP_Peripheral_ConfigService+0x31c>)
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d58:	c303      	stmia	r3!, {r0, r1}
 8000d5a:	801a      	strh	r2, [r3, #0]
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	0c12      	lsrs	r2, r2, #16
 8000d60:	701a      	strb	r2, [r3, #0]
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8000d62:	4a59      	ldr	r2, [pc, #356]	; (8000ec8 <GAP_Peripheral_ConfigService+0x320>)
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8000d6e:	4a57      	ldr	r2, [pc, #348]	; (8000ecc <GAP_Peripheral_ConfigService+0x324>)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	/* Configure CCCD for the characteristics above (associated with characteristic UUIDs). The CCCD's
     might only be necessary for indicate/notify related events, as the CCCD feature in the GATT server
     allows client to configure server to automatically push new data to the client in the notify/indicate
     characteristics.	*/

	aci_gatt_add_char_desc(hService, hClientNotify_OverSpeed, UUID_TYPE_16, &DescriptorProperty,
 8000d78:	4b45      	ldr	r3, [pc, #276]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000d7a:	8818      	ldrh	r0, [r3, #0]
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <GAP_Peripheral_ConfigService+0x300>)
 8000d7e:	8819      	ldrh	r1, [r3, #0]
 8000d80:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000d84:	4b52      	ldr	r3, [pc, #328]	; (8000ed0 <GAP_Peripheral_ConfigService+0x328>)
 8000d86:	9308      	str	r3, [sp, #32]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	9307      	str	r3, [sp, #28]
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	9306      	str	r3, [sp, #24]
 8000d90:	2300      	movs	r3, #0
 8000d92:	9305      	str	r3, [sp, #20]
 8000d94:	2301      	movs	r3, #1
 8000d96:	9304      	str	r3, [sp, #16]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9303      	str	r3, [sp, #12]
 8000d9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000da0:	9302      	str	r3, [sp, #8]
 8000da2:	2309      	movs	r3, #9
 8000da4:	9301      	str	r3, [sp, #4]
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	4613      	mov	r3, r2
 8000dac:	2201      	movs	r2, #1
 8000dae:	f008 fda9 	bl	8009904 <aci_gatt_add_char_desc>
														128, 9, (uint8_t*)char1name, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_ONLY,
														GATT_DONT_NOTIFY_EVENTS, 7, CHAR_VALUE_LEN_CONSTANT, &hFirstCharDesc);
	aci_gatt_add_char_desc(hService, hClientNotify_Crash, UUID_TYPE_16, &DescriptorProperty,
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000db4:	8818      	ldrh	r0, [r3, #0]
 8000db6:	4b3d      	ldr	r3, [pc, #244]	; (8000eac <GAP_Peripheral_ConfigService+0x304>)
 8000db8:	8819      	ldrh	r1, [r3, #0]
 8000dba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000dbe:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <GAP_Peripheral_ConfigService+0x32c>)
 8000dc0:	9308      	str	r3, [sp, #32]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9307      	str	r3, [sp, #28]
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	9306      	str	r3, [sp, #24]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9305      	str	r3, [sp, #20]
 8000dce:	2301      	movs	r3, #1
 8000dd0:	9304      	str	r3, [sp, #16]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9303      	str	r3, [sp, #12]
 8000dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dda:	9302      	str	r3, [sp, #8]
 8000ddc:	2309      	movs	r3, #9
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	4613      	mov	r3, r2
 8000de6:	2201      	movs	r2, #1
 8000de8:	f008 fd8c 	bl	8009904 <aci_gatt_add_char_desc>
														128, 9, (uint8_t*)char2name, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_ONLY,
														GATT_DONT_NOTIFY_EVENTS, 7, CHAR_VALUE_LEN_CONSTANT, &hSecondCharDesc);
	aci_gatt_add_char_desc(hService, hClientRead_Velocity, UUID_TYPE_16, &DescriptorProperty,
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000dee:	8818      	ldrh	r0, [r3, #0]
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <GAP_Peripheral_ConfigService+0x308>)
 8000df2:	8819      	ldrh	r1, [r3, #0]
 8000df4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000df8:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <GAP_Peripheral_ConfigService+0x330>)
 8000dfa:	9308      	str	r3, [sp, #32]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	9307      	str	r3, [sp, #28]
 8000e00:	2307      	movs	r3, #7
 8000e02:	9306      	str	r3, [sp, #24]
 8000e04:	2300      	movs	r3, #0
 8000e06:	9305      	str	r3, [sp, #20]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	9304      	str	r3, [sp, #16]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	230b      	movs	r3, #11
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	2201      	movs	r2, #1
 8000e22:	f008 fd6f 	bl	8009904 <aci_gatt_add_char_desc>
														128, 11, (uint8_t*)char3name, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_ONLY,
														GATT_DONT_NOTIFY_EVENTS, 7, CHAR_VALUE_LEN_CONSTANT, &hThirdCharDesc);
	aci_gatt_add_char_desc(hService, hClientWrite_Direction, UUID_TYPE_16, &DescriptorProperty,
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000e28:	8818      	ldrh	r0, [r3, #0]
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <GAP_Peripheral_ConfigService+0x30c>)
 8000e2c:	8819      	ldrh	r1, [r3, #0]
 8000e2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e32:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <GAP_Peripheral_ConfigService+0x334>)
 8000e34:	9308      	str	r3, [sp, #32]
 8000e36:	2300      	movs	r3, #0
 8000e38:	9307      	str	r3, [sp, #28]
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	9306      	str	r3, [sp, #24]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9305      	str	r3, [sp, #20]
 8000e42:	2303      	movs	r3, #3
 8000e44:	9304      	str	r3, [sp, #16]
 8000e46:	2300      	movs	r3, #0
 8000e48:	9303      	str	r3, [sp, #12]
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	230a      	movs	r3, #10
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f008 fd52 	bl	8009904 <aci_gatt_add_char_desc>
														128, 10, (uint8_t*)char4name, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_WRITE,
														GATT_DONT_NOTIFY_EVENTS, 7, CHAR_VALUE_LEN_CONSTANT, &hFourthCharDesc);
	aci_gatt_add_char_desc(hService, hClientRead_VerifyDirection, UUID_TYPE_16, &DescriptorProperty,
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <GAP_Peripheral_ConfigService+0x2e8>)
 8000e62:	8818      	ldrh	r0, [r3, #0]
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <GAP_Peripheral_ConfigService+0x310>)
 8000e66:	8819      	ldrh	r1, [r3, #0]
 8000e68:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <GAP_Peripheral_ConfigService+0x338>)
 8000e6e:	9308      	str	r3, [sp, #32]
 8000e70:	2300      	movs	r3, #0
 8000e72:	e037      	b.n	8000ee4 <GAP_Peripheral_ConfigService+0x33c>
 8000e74:	0800e05c 	.word	0x0800e05c
 8000e78:	0800e06c 	.word	0x0800e06c
 8000e7c:	0800e07c 	.word	0x0800e07c
 8000e80:	0800e08c 	.word	0x0800e08c
 8000e84:	0800e09c 	.word	0x0800e09c
 8000e88:	0800e0ac 	.word	0x0800e0ac
 8000e8c:	20009994 	.word	0x20009994
 8000e90:	20000194 	.word	0x20000194
 8000e94:	20009974 	.word	0x20009974
 8000e98:	200099b4 	.word	0x200099b4
 8000e9c:	20009984 	.word	0x20009984
 8000ea0:	20009964 	.word	0x20009964
 8000ea4:	200099a4 	.word	0x200099a4
 8000ea8:	20000196 	.word	0x20000196
 8000eac:	20000198 	.word	0x20000198
 8000eb0:	2000019a 	.word	0x2000019a
 8000eb4:	2000019c 	.word	0x2000019c
 8000eb8:	2000019e 	.word	0x2000019e
 8000ebc:	0800e0bc 	.word	0x0800e0bc
 8000ec0:	0800e0c8 	.word	0x0800e0c8
 8000ec4:	0800e0d4 	.word	0x0800e0d4
 8000ec8:	0800e0e0 	.word	0x0800e0e0
 8000ecc:	0800e0ec 	.word	0x0800e0ec
 8000ed0:	200001a0 	.word	0x200001a0
 8000ed4:	200001a2 	.word	0x200001a2
 8000ed8:	200001a4 	.word	0x200001a4
 8000edc:	200001a6 	.word	0x200001a6
 8000ee0:	200001a8 	.word	0x200001a8
 8000ee4:	9307      	str	r3, [sp, #28]
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	9306      	str	r3, [sp, #24]
 8000eea:	2300      	movs	r3, #0
 8000eec:	9305      	str	r3, [sp, #20]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	9304      	str	r3, [sp, #16]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9303      	str	r3, [sp, #12]
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	230b      	movs	r3, #11
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	4613      	mov	r3, r2
 8000f04:	2201      	movs	r2, #1
 8000f06:	f008 fcfd 	bl	8009904 <aci_gatt_add_char_desc>
	uint16_t char_desc_value = 0;
	aci_gatt_add_char_desc(hService, hClientWrite_Direction, UUID_TYPE_16, &DescriptorProperty, 128, 9,
													(uint8_t*)&char_desc_value, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_WRITE,
													GATT_NOTIFY_ATTRIBUTE_WRITE, 7, CHAR_VALUE_LEN_CONSTANT, &hFourthCharDesc);
	*/
}
 8000f0a:	bf00      	nop
 8000f0c:	37b0      	adds	r7, #176	; 0xb0
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bdb0      	pop	{r4, r5, r7, pc}
 8000f12:	bf00      	nop

08000f14 <Server_ResetConnectionStatus>:
/**
  * @brief	Resets/Deletes the entries of the variable holding the details of the connection with
  *					the GATT client
  */
static void Server_ResetConnectionStatus(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	/* Set to unknown/unregistered device role */
	Conn_Details.deviceRole = 0xFF;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <Server_ResetConnectionStatus+0x40>)
 8000f1a:	22ff      	movs	r2, #255	; 0xff
 8000f1c:	719a      	strb	r2, [r3, #6]

	/* Set all fields to MAX_UINT16_T */
	Conn_Details.connectionhandle = 0xFFFF;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <Server_ResetConnectionStatus+0x40>)
 8000f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f24:	811a      	strh	r2, [r3, #8]
	Conn_Details.BLE_ConnInterval = 0xFFFF;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <Server_ResetConnectionStatus+0x40>)
 8000f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2c:	815a      	strh	r2, [r3, #10]
	Conn_Details.BLE_ConnLatency = 0xFFFF;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <Server_ResetConnectionStatus+0x40>)
 8000f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f34:	819a      	strh	r2, [r3, #12]
	Conn_Details.BLE_SupervisionTimeout = 0xFFFF;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <Server_ResetConnectionStatus+0x40>)
 8000f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f3c:	81da      	strh	r2, [r3, #14]

	/* Set status to not connected */
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <Server_ResetConnectionStatus+0x40>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	741a      	strb	r2, [r3, #16]

	/* Reset 6-byte MAC address */
	BLUENRG_memset(&Conn_Details.BLE_Client_Addr[0], 0, 6);
 8000f44:	2206      	movs	r2, #6
 8000f46:	2100      	movs	r1, #0
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <Server_ResetConnectionStatus+0x40>)
 8000f4a:	f00c f903 	bl	800d154 <memset>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001ac 	.word	0x200001ac

08000f58 <BlueNRG_MakeDeviceDiscoverable>:
  * @brief	Enables BLE Peripheral device to be discoverable by advertising (with certain parameters)
  * @note		When BLE Peripheral adverises, it does so periodically at certain intervals. At these times
  *					power consumption of device will be high.
  */
void BlueNRG_MakeDeviceDiscoverable(void)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b092      	sub	sp, #72	; 0x48
 8000f5c:	af08      	add	r7, sp, #32
	uint8_t ret;

	/* Name that will be broadcasted to Central Devices scanning */
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','-','B','L','E','-','C','a','r'};
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <BlueNRG_MakeDeviceDiscoverable+0x88>)
 8000f60:	f107 0418 	add.w	r4, r7, #24
 8000f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f66:	c407      	stmia	r4!, {r0, r1, r2}
 8000f68:	7023      	strb	r3, [r4, #0]

	/* Disable scan response: passive scan */
	hci_le_set_scan_response_data(0, NULL);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f008 f8fa 	bl	8009166 <hci_le_set_scan_response_data>
		 Scan Response Message must contain the following in this specific order:
				Length = 0x11
				Service UUID Type = 0x06 (128-bits Service UUID)
				Service UUID = (UUID taken from above)
	 */
	uint8_t uuidscanresponse[18] =
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <BlueNRG_MakeDeviceDiscoverable+0x8c>)
 8000f74:	1d3c      	adds	r4, r7, #4
 8000f76:	461d      	mov	r5, r3
 8000f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	8023      	strh	r3, [r4, #0]
				{0x11,0x06,0x5D,0xCE,0xE1,0x5A,0x50,0x51,0x1D,0xB1,0x63,0x4D,0xF9,0x03,0x8B,0x32,0x98,0xA8};
	hci_le_set_scan_response_data(18, uuidscanresponse);
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4619      	mov	r1, r3
 8000f84:	2012      	movs	r0, #18
 8000f86:	f008 f8ee 	bl	8009166 <hci_le_set_scan_response_data>

	/* Place Bluetooth Peripheral Device in Advertising State */
	ret = aci_gap_set_discoverable(ADV_IND, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9306      	str	r3, [sp, #24]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9305      	str	r3, [sp, #20]
 8000f92:	2300      	movs	r3, #0
 8000f94:	9304      	str	r3, [sp, #16]
 8000f96:	2300      	movs	r3, #0
 8000f98:	9303      	str	r3, [sp, #12]
 8000f9a:	f107 0318 	add.w	r3, r7, #24
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	230d      	movs	r3, #13
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f008 f973 	bl	800929e <aci_gap_set_discoverable>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
																	NO_WHITE_LIST_USE, sizeof(local_name), (uint8_t*)local_name,
																	0, NULL, 0, 0);

	assert_param(ret == BLE_STATUS_SUCCESS);
 8000fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <BlueNRG_MakeDeviceDiscoverable+0x78>
 8000fc6:	f240 11b9 	movw	r1, #441	; 0x1b9
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <BlueNRG_MakeDeviceDiscoverable+0x90>)
 8000fcc:	f000 fd32 	bl	8001a34 <assert_failed>

	/* Update status */
	Conn_Details.ConnectionStatus = STATE_AWAITING_CONNECTION;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <BlueNRG_MakeDeviceDiscoverable+0x94>)
 8000fd2:	2211      	movs	r2, #17
 8000fd4:	741a      	strb	r2, [r3, #16]
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	0800e0f8 	.word	0x0800e0f8
 8000fe4:	0800e108 	.word	0x0800e108
 8000fe8:	0800e038 	.word	0x0800e038
 8000fec:	200001ac 	.word	0x200001ac

08000ff0 <APP_UserEvtRx>:
  * @brief	Function taken from STM32Cube\Repository\Packs\STMicroelectronics\X-CUBE-BLE2\3.2.0\Projects\...
  *					...\Nucleo-L476RG\Application\SampleApp\...\gatt_db.c
  *					To be used with hci_init() that must be called before using BLE stack
  */
void APP_UserEvtRx(void *pData)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d163      	bne.n	80010cc <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b3e      	cmp	r3, #62	; 0x3e
 8001010:	d11e      	bne.n	8001050 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3302      	adds	r3, #2
 8001016:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	e014      	b.n	8001048 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b29a      	uxth	r2, r3
 8001024:	492b      	ldr	r1, [pc, #172]	; (80010d4 <APP_UserEvtRx+0xe4>)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800102c:	429a      	cmp	r2, r3
 800102e:	d108      	bne.n	8001042 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001030:	4a28      	ldr	r2, [pc, #160]	; (80010d4 <APP_UserEvtRx+0xe4>)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	3201      	adds	r2, #1
 800103e:	4610      	mov	r0, r2
 8001040:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b09      	cmp	r3, #9
 800104c:	d9e7      	bls.n	800101e <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 800104e:	e03d      	b.n	80010cc <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2bff      	cmp	r3, #255	; 0xff
 8001056:	d11e      	bne.n	8001096 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3302      	adds	r3, #2
 800105c:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e014      	b.n	800108e <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29a      	uxth	r2, r3
 800106a:	491b      	ldr	r1, [pc, #108]	; (80010d8 <APP_UserEvtRx+0xe8>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001072:	429a      	cmp	r2, r3
 8001074:	d108      	bne.n	8001088 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <APP_UserEvtRx+0xe8>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	4413      	add	r3, r2
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	3202      	adds	r2, #2
 8001084:	4610      	mov	r0, r2
 8001086:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	3301      	adds	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	2b2a      	cmp	r3, #42	; 0x2a
 8001092:	d9e7      	bls.n	8001064 <APP_UserEvtRx+0x74>
}
 8001094:	e01a      	b.n	80010cc <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e014      	b.n	80010c6 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	490e      	ldr	r1, [pc, #56]	; (80010dc <APP_UserEvtRx+0xec>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d108      	bne.n	80010c0 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <APP_UserEvtRx+0xec>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	3202      	adds	r2, #2
 80010bc:	4610      	mov	r0, r2
 80010be:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	3301      	adds	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b06      	cmp	r3, #6
 80010ca:	d9e7      	bls.n	800109c <APP_UserEvtRx+0xac>
}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	0800e4a0 	.word	0x0800e4a0
 80010d8:	0800e4f0 	.word	0x0800e4f0
 80010dc:	0800e468 	.word	0x0800e468

080010e0 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 80010e0:	b490      	push	{r4, r7}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4604      	mov	r4, r0
 80010e8:	4608      	mov	r0, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	4623      	mov	r3, r4
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	4603      	mov	r3, r0
 80010f4:	80bb      	strh	r3, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	71bb      	strb	r3, [r7, #6]
 80010fa:	4613      	mov	r3, r2
 80010fc:	70fb      	strb	r3, [r7, #3]
	/* This callback function/event only saves connection handle */
	Conn_Details.connectionhandle = Connection_Handle;
 80010fe:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <hci_le_connection_complete_event+0x58>)
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	8113      	strh	r3, [r2, #8]

	/* Role should be slave: 0x01 (if 0x00, it is master and incorrect in this example project) */
	Conn_Details.deviceRole = Role;
 8001104:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <hci_le_connection_complete_event+0x58>)
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	7193      	strb	r3, [r2, #6]

	/* Save connection details in memory */
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <hci_le_connection_complete_event+0x58>)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	6810      	ldr	r0, [r2, #0]
 8001110:	6018      	str	r0, [r3, #0]
 8001112:	8892      	ldrh	r2, [r2, #4]
 8001114:	809a      	strh	r2, [r3, #4]
	Conn_Details.BLE_ConnInterval = Conn_Interval;
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <hci_le_connection_complete_event+0x58>)
 8001118:	8abb      	ldrh	r3, [r7, #20]
 800111a:	8153      	strh	r3, [r2, #10]
	Conn_Details.BLE_ConnLatency = Conn_Latency;
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <hci_le_connection_complete_event+0x58>)
 800111e:	8b3b      	ldrh	r3, [r7, #24]
 8001120:	8193      	strh	r3, [r2, #12]
	Conn_Details.BLE_SupervisionTimeout = Supervision_Timeout;
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <hci_le_connection_complete_event+0x58>)
 8001124:	8bbb      	ldrh	r3, [r7, #28]
 8001126:	81d3      	strh	r3, [r2, #14]

	/* Update connection status to connected */
	Conn_Details.ConnectionStatus = STATE_CONNECTED;
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <hci_le_connection_complete_event+0x58>)
 800112a:	2299      	movs	r2, #153	; 0x99
 800112c:	741a      	strb	r2, [r3, #16]

} /* end hci_le_connection_complete_event() */
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bc90      	pop	{r4, r7}
 8001136:	4770      	bx	lr
 8001138:	200001ac 	.word	0x200001ac

0800113c <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
 8001146:	460b      	mov	r3, r1
 8001148:	80bb      	strh	r3, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	71bb      	strb	r3, [r7, #6]
	/* Resets all connectivity status details */
	Server_ResetConnectionStatus();
 800114e:	f7ff fee1 	bl	8000f14 <Server_ResetConnectionStatus>

} /* end hci_disconnection_complete_event() */
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <aci_gatt_notification_event>:
 *******************************************************************************/
void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{
 800115a:	b480      	push	{r7}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4603      	mov	r3, r0
 8001164:	81fb      	strh	r3, [r7, #14]
 8001166:	460b      	mov	r3, r1
 8001168:	81bb      	strh	r3, [r7, #12]
 800116a:	4613      	mov	r3, r2
 800116c:	72fb      	strb	r3, [r7, #11]


} /* end aci_gatt_notification_event() */
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b08d      	sub	sp, #52	; 0x34
 8001180:	af02      	add	r7, sp, #8
 8001182:	4604      	mov	r4, r0
 8001184:	4608      	mov	r0, r1
 8001186:	4611      	mov	r1, r2
 8001188:	461a      	mov	r2, r3
 800118a:	4623      	mov	r3, r4
 800118c:	80fb      	strh	r3, [r7, #6]
 800118e:	4603      	mov	r3, r0
 8001190:	80bb      	strh	r3, [r7, #4]
 8001192:	460b      	mov	r3, r1
 8001194:	807b      	strh	r3, [r7, #2]
 8001196:	4613      	mov	r3, r2
 8001198:	803b      	strh	r3, [r7, #0]

	/* Determine which characteristic was modified by Client (Indicate and Notify characteristics
	   are modified by Client only if Client acknowledges these features on Server) */
	if(Attr_Handle == hClientWrite_Direction+1)
 800119a:	88ba      	ldrh	r2, [r7, #4]
 800119c:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <aci_gatt_attribute_modified_event+0x118>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d172      	bne.n	800128c <aci_gatt_attribute_modified_event+0x110>
	{
		if(Attr_Data_Length == 1)
 80011a6:	883b      	ldrh	r3, [r7, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d16f      	bne.n	800128c <aci_gatt_attribute_modified_event+0x110>
		{
			if((Attr_Data[0] == 0x4E)||((Attr_Data[0] == 0x6E)))
 80011ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b4e      	cmp	r3, #78	; 0x4e
 80011b2:	d003      	beq.n	80011bc <aci_gatt_attribute_modified_event+0x40>
 80011b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b6e      	cmp	r3, #110	; 0x6e
 80011ba:	d113      	bne.n	80011e4 <aci_gatt_attribute_modified_event+0x68>
			{
				/* If input character is 'N' or 'n' representing North or forward */

				/* Notify ACK to master through fifth characteristic (verify direction) printing 'NORTH'*/
				uint8_t buff[6] = {0x4E, 0x4F, 0x52, 0x54, 0x48, 0x00};
 80011bc:	4a36      	ldr	r2, [pc, #216]	; (8001298 <aci_gatt_attribute_modified_event+0x11c>)
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c6:	6018      	str	r0, [r3, #0]
 80011c8:	3304      	adds	r3, #4
 80011ca:	8019      	strh	r1, [r3, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <aci_gatt_attribute_modified_event+0x120>)
 80011ce:	8818      	ldrh	r0, [r3, #0]
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <aci_gatt_attribute_modified_event+0x124>)
 80011d2:	8819      	ldrh	r1, [r3, #0]
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2306      	movs	r3, #6
 80011dc:	2200      	movs	r2, #0
 80011de:	f008 fcb7 	bl	8009b50 <aci_gatt_update_char_value>
			{
 80011e2:	e053      	b.n	800128c <aci_gatt_attribute_modified_event+0x110>
			}
			else if((Attr_Data[0] == 0x45)||((Attr_Data[0] == 0x65)))
 80011e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b45      	cmp	r3, #69	; 0x45
 80011ea:	d003      	beq.n	80011f4 <aci_gatt_attribute_modified_event+0x78>
 80011ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b65      	cmp	r3, #101	; 0x65
 80011f2:	d113      	bne.n	800121c <aci_gatt_attribute_modified_event+0xa0>
			{
				/* If input character is 'E' or 'e' representing East or right */

				/* Notify ACK to master through fifth characteristic (verify direction) printing 'EAST' */
				uint8_t buff[6] = {0x45, 0x41, 0x53, 0x54, 0x00, 0x00};
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <aci_gatt_attribute_modified_event+0x128>)
 80011f6:	f107 0318 	add.w	r3, r7, #24
 80011fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011fe:	6018      	str	r0, [r3, #0]
 8001200:	3304      	adds	r3, #4
 8001202:	8019      	strh	r1, [r3, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <aci_gatt_attribute_modified_event+0x120>)
 8001206:	8818      	ldrh	r0, [r3, #0]
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <aci_gatt_attribute_modified_event+0x124>)
 800120a:	8819      	ldrh	r1, [r3, #0]
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2306      	movs	r3, #6
 8001214:	2200      	movs	r2, #0
 8001216:	f008 fc9b 	bl	8009b50 <aci_gatt_update_char_value>
			{
 800121a:	e037      	b.n	800128c <aci_gatt_attribute_modified_event+0x110>
			}
			else if((Attr_Data[0] == 0x53)||((Attr_Data[0] == 0x73)))
 800121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b53      	cmp	r3, #83	; 0x53
 8001222:	d003      	beq.n	800122c <aci_gatt_attribute_modified_event+0xb0>
 8001224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b73      	cmp	r3, #115	; 0x73
 800122a:	d113      	bne.n	8001254 <aci_gatt_attribute_modified_event+0xd8>
			{
				/* If input character is 'S' or 's' representing South or backwards */

				/* Notify ACK to master through fifth characteristic (verify direction) printing 'SOUTH' */
				uint8_t buff[6] = {0x53, 0x4F, 0x55, 0x54, 0x48, 0x00};
 800122c:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <aci_gatt_attribute_modified_event+0x12c>)
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001236:	6018      	str	r0, [r3, #0]
 8001238:	3304      	adds	r3, #4
 800123a:	8019      	strh	r1, [r3, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <aci_gatt_attribute_modified_event+0x120>)
 800123e:	8818      	ldrh	r0, [r3, #0]
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <aci_gatt_attribute_modified_event+0x124>)
 8001242:	8819      	ldrh	r1, [r3, #0]
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2306      	movs	r3, #6
 800124c:	2200      	movs	r2, #0
 800124e:	f008 fc7f 	bl	8009b50 <aci_gatt_update_char_value>
			{
 8001252:	e01b      	b.n	800128c <aci_gatt_attribute_modified_event+0x110>
			}
			else if((Attr_Data[0] == 0x57)||(Attr_Data[0] == 0x77))
 8001254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b57      	cmp	r3, #87	; 0x57
 800125a:	d003      	beq.n	8001264 <aci_gatt_attribute_modified_event+0xe8>
 800125c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b77      	cmp	r3, #119	; 0x77
 8001262:	d113      	bne.n	800128c <aci_gatt_attribute_modified_event+0x110>
			{
				/* If input character is 'W' or 'w' representing West or left */

				/* Notify ACK to master through fifth characteristic (verify direction) printing 'WEST' */
				uint8_t buff[6] = {0x57, 0x45, 0x53, 0x54, 0x00, 0x00};
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <aci_gatt_attribute_modified_event+0x130>)
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126e:	6018      	str	r0, [r3, #0]
 8001270:	3304      	adds	r3, #4
 8001272:	8019      	strh	r1, [r3, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, 6, buff);
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <aci_gatt_attribute_modified_event+0x120>)
 8001276:	8818      	ldrh	r0, [r3, #0]
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <aci_gatt_attribute_modified_event+0x124>)
 800127a:	8819      	ldrh	r1, [r3, #0]
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2306      	movs	r3, #6
 8001284:	2200      	movs	r2, #0
 8001286:	f008 fc63 	bl	8009b50 <aci_gatt_update_char_value>


		}
	}

} /* end aci_gatt_attribute_modified_event() */
 800128a:	e7ff      	b.n	800128c <aci_gatt_attribute_modified_event+0x110>
 800128c:	bf00      	nop
 800128e:	372c      	adds	r7, #44	; 0x2c
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}
 8001294:	2000019c 	.word	0x2000019c
 8001298:	0800e11c 	.word	0x0800e11c
 800129c:	20000194 	.word	0x20000194
 80012a0:	2000019e 	.word	0x2000019e
 80012a4:	0800e124 	.word	0x0800e124
 80012a8:	0800e12c 	.word	0x0800e12c
 80012ac:	0800e134 	.word	0x0800e134

080012b0 <FRTOS_Init_Tasks>:


}

void FRTOS_Init_Tasks(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af02      	add	r7, sp, #8
	BaseType_t TaskCreationStatus;

	/* Create task that will maintain BLE Connection */
	TaskCreationStatus = xTaskCreate( Task_ManageBLEConnections,
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <FRTOS_Init_Tasks+0x80>)
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	232e      	movs	r3, #46	; 0x2e
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2300      	movs	r3, #0
 80012c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c4:	491b      	ldr	r1, [pc, #108]	; (8001334 <FRTOS_Init_Tasks+0x84>)
 80012c6:	481c      	ldr	r0, [pc, #112]	; (8001338 <FRTOS_Init_Tasks+0x88>)
 80012c8:	f009 ffd7 	bl	800b27a <xTaskCreate>
 80012cc:	6078      	str	r0, [r7, #4]
										NULL,
										TASK_PRIO_BLE_CONN,
										&h_TaskBLEConn);

	/* Ensure task creation succeeds */
	assert_param(TaskCreationStatus == pdPASS);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d003      	beq.n	80012dc <FRTOS_Init_Tasks+0x2c>
 80012d4:	2165      	movs	r1, #101	; 0x65
 80012d6:	4819      	ldr	r0, [pc, #100]	; (800133c <FRTOS_Init_Tasks+0x8c>)
 80012d8:	f000 fbac 	bl	8001a34 <assert_failed>

	/* Create task that will parse BLE Message */
	TaskCreationStatus = xTaskCreate( Task_ParseBLEMessage,
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <FRTOS_Init_Tasks+0x90>)
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	232d      	movs	r3, #45	; 0x2d
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2300      	movs	r3, #0
 80012e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ea:	4916      	ldr	r1, [pc, #88]	; (8001344 <FRTOS_Init_Tasks+0x94>)
 80012ec:	4816      	ldr	r0, [pc, #88]	; (8001348 <FRTOS_Init_Tasks+0x98>)
 80012ee:	f009 ffc4 	bl	800b27a <xTaskCreate>
 80012f2:	6078      	str	r0, [r7, #4]
										NULL,
										TASK_PRIO_BLE_MSG,
										&h_TaskBLEMsg);

	/* Ensure task creation succeeds */
	assert_param(TaskCreationStatus == pdPASS);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d003      	beq.n	8001302 <FRTOS_Init_Tasks+0x52>
 80012fa:	2170      	movs	r1, #112	; 0x70
 80012fc:	480f      	ldr	r0, [pc, #60]	; (800133c <FRTOS_Init_Tasks+0x8c>)
 80012fe:	f000 fb99 	bl	8001a34 <assert_failed>

	TaskCreationStatus = xTaskCreate( Task_BlinkLEDIndicator,
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <FRTOS_Init_Tasks+0x9c>)
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	231e      	movs	r3, #30
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2300      	movs	r3, #0
 800130c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001310:	490f      	ldr	r1, [pc, #60]	; (8001350 <FRTOS_Init_Tasks+0xa0>)
 8001312:	4810      	ldr	r0, [pc, #64]	; (8001354 <FRTOS_Init_Tasks+0xa4>)
 8001314:	f009 ffb1 	bl	800b27a <xTaskCreate>
 8001318:	6078      	str	r0, [r7, #4]
										NULL,
										TASK_PRIO_MCULED,
										&h_TaskMcuLED);

	/* Ensure task creation succeeds */
	assert_param(TaskCreationStatus == pdPASS);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d003      	beq.n	8001328 <FRTOS_Init_Tasks+0x78>
 8001320:	217a      	movs	r1, #122	; 0x7a
 8001322:	4806      	ldr	r0, [pc, #24]	; (800133c <FRTOS_Init_Tasks+0x8c>)
 8001324:	f000 fb86 	bl	8001a34 <assert_failed>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200001c0 	.word	0x200001c0
 8001334:	0800e13c 	.word	0x0800e13c
 8001338:	08001359 	.word	0x08001359
 800133c:	0800e154 	.word	0x0800e154
 8001340:	200001c4 	.word	0x200001c4
 8001344:	0800e174 	.word	0x0800e174
 8001348:	0800136d 	.word	0x0800136d
 800134c:	200001c8 	.word	0x200001c8
 8001350:	0800e188 	.word	0x0800e188
 8001354:	08001395 	.word	0x08001395

08001358 <Task_ManageBLEConnections>:
 * @param
 * @retval
 * @note
 */
static void Task_ManageBLEConnections(void *argument)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	/* Initialize BLE Peripheral and place in advertising mode at startup to allow establishment
	 * of connections with BLE central devices in proximity.
	 */
	BlueNRG_Init();
 8001360:	f7ff fb8e 	bl	8000a80 <BlueNRG_Init>
	BlueNRG_MakeDeviceDiscoverable();
 8001364:	f7ff fdf8 	bl	8000f58 <BlueNRG_MakeDeviceDiscoverable>

	while(1)
 8001368:	e7fe      	b.n	8001368 <Task_ManageBLEConnections+0x10>
	...

0800136c <Task_ParseBLEMessage>:
 * @param
 * @retval
 * @note
 */
static void Task_ParseBLEMessage(void *argument)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	 * of connections with BLE central devices in proximity.
	 */

	while(1)
	{
		Task1_RSS = uxTaskGetStackHighWaterMark(NULL);
 8001374:	2000      	movs	r0, #0
 8001376:	f00a fd8f 	bl	800be98 <uxTaskGetStackHighWaterMark>
 800137a:	4603      	mov	r3, r0
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <Task_ParseBLEMessage+0x24>)
 800137e:	6013      	str	r3, [r2, #0]

		uint32_t NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	2001      	movs	r0, #1
 8001386:	f00a fe7f 	bl	800c088 <ulTaskNotifyTake>
 800138a:	60f8      	str	r0, [r7, #12]
	{
 800138c:	e7f2      	b.n	8001374 <Task_ParseBLEMessage+0x8>
 800138e:	bf00      	nop
 8001390:	200001cc 	.word	0x200001cc

08001394 <Task_BlinkLEDIndicator>:
 * @param
 * @retval
 * @note
 */
static void Task_BlinkLEDIndicator(void *argument)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	const TickType_t DelayFrequency = pdMS_TO_TICKS(1000);
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	60fb      	str	r3, [r7, #12]
	TickType_t LastActiveTime;

	while(1)
	{
		/* Check ammount of unused stack. If returned value is 0, stack overflow has occurred */
		Task2_RSS = uxTaskGetStackHighWaterMark(NULL);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f00a fd78 	bl	800be98 <uxTaskGetStackHighWaterMark>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <Task_BlinkLEDIndicator+0x38>)
 80013ac:	6013      	str	r3, [r2, #0]

		/* Perform accurate blocking delay */
		LastActiveTime = xTaskGetTickCount();
 80013ae:	f00a fa45 	bl	800b83c <xTaskGetTickCount>
 80013b2:	4603      	mov	r3, r0
 80013b4:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	4618      	mov	r0, r3
 80013be:	f00a f8ab 	bl	800b518 <vTaskDelayUntil>

		/* Toggle LED every 1 second */
		HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 80013c2:	2120      	movs	r1, #32
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <Task_BlinkLEDIndicator+0x3c>)
 80013c6:	f002 fc73 	bl	8003cb0 <HAL_GPIO_TogglePin>
		Task2_RSS = uxTaskGetStackHighWaterMark(NULL);
 80013ca:	e7ea      	b.n	80013a2 <Task_BlinkLEDIndicator+0xe>
 80013cc:	200001d0 	.word	0x200001d0
 80013d0:	40020000 	.word	0x40020000

080013d4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <BSP_SPI1_Init+0x54>)
 80013e0:	4a12      	ldr	r2, [pc, #72]	; (800142c <BSP_SPI1_Init+0x58>)
 80013e2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <BSP_SPI1_Init+0x5c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	4911      	ldr	r1, [pc, #68]	; (8001430 <BSP_SPI1_Init+0x5c>)
 80013ec:	600a      	str	r2, [r1, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d114      	bne.n	800141c <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <BSP_SPI1_Init+0x54>)
 80013f4:	f005 fb1c 	bl	8006a30 <HAL_SPI_GetState>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10e      	bne.n	800141c <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 80013fe:	480a      	ldr	r0, [pc, #40]	; (8001428 <BSP_SPI1_Init+0x54>)
 8001400:	f000 f87c 	bl	80014fc <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d108      	bne.n	800141c <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <BSP_SPI1_Init+0x54>)
 800140c:	f000 f83a 	bl	8001484 <MX_SPI1_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8001416:	f06f 0307 	mvn.w	r3, #7
 800141a:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200099c4 	.word	0x200099c4
 800142c:	40013000 	.word	0x40013000
 8001430:	200001d4 	.word	0x200001d4

08001434 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af02      	add	r7, sp, #8
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	4613      	mov	r3, r2
 8001440:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144c:	9200      	str	r2, [sp, #0]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	68f9      	ldr	r1, [r7, #12]
 8001452:	4807      	ldr	r0, [pc, #28]	; (8001470 <BSP_SPI1_SendRecv+0x3c>)
 8001454:	f005 f93e 	bl	80066d4 <HAL_SPI_TransmitReceive>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800145e:	f06f 0305 	mvn.w	r3, #5
 8001462:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001464:	697b      	ldr	r3, [r7, #20]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200099c4 	.word	0x200099c4

08001474 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001478:	f000 fdc4 	bl	8002004 <HAL_GetTick>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <MX_SPI1_Init+0x74>)
 8001494:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f44f 7282 	mov.w	r2, #260	; 0x104
 800149c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014bc:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2230      	movs	r2, #48	; 0x30
 80014c2:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	220a      	movs	r2, #10
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f004 ff53 	bl	8006388 <HAL_SPI_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40013000 	.word	0x40013000

080014fc <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <SPI1_MspInit+0xc4>)
 800150a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150c:	4a2c      	ldr	r2, [pc, #176]	; (80015c0 <SPI1_MspInit+0xc4>)
 800150e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001512:	6453      	str	r3, [r2, #68]	; 0x44
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <SPI1_MspInit+0xc4>)
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <SPI1_MspInit+0xc4>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a25      	ldr	r2, [pc, #148]	; (80015c0 <SPI1_MspInit+0xc4>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <SPI1_MspInit+0xc4>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <SPI1_MspInit+0xc4>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <SPI1_MspInit+0xc4>)
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <SPI1_MspInit+0xc4>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001558:	2340      	movs	r3, #64	; 0x40
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001568:	2305      	movs	r3, #5
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4814      	ldr	r0, [pc, #80]	; (80015c4 <SPI1_MspInit+0xc8>)
 8001574:	f001 ff9a 	bl	80034ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001588:	2305      	movs	r3, #5
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	480c      	ldr	r0, [pc, #48]	; (80015c4 <SPI1_MspInit+0xc8>)
 8001594:	f001 ff8a 	bl	80034ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001598:	2308      	movs	r3, #8
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80015a8:	2305      	movs	r3, #5
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <SPI1_MspInit+0xcc>)
 80015b4:	f001 ff7a 	bl	80034ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400

080015cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_DMA_Init+0x3c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <MX_DMA_Init+0x3c>)
 80015dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_DMA_Init+0x3c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2105      	movs	r1, #5
 80015f2:	2038      	movs	r0, #56	; 0x38
 80015f4:	f001 fa06 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015f8:	2038      	movs	r0, #56	; 0x38
 80015fa:	f001 fa2f 	bl	8002a5c <HAL_NVIC_EnableIRQ>

}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <vApplicationMallocFailedHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_EVENTS */

  /* USER CODE END RTOS_EVENTS */

}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b62      	ldr	r3, [pc, #392]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a61      	ldr	r2, [pc, #388]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b5b      	ldr	r3, [pc, #364]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a5a      	ldr	r2, [pc, #360]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b58      	ldr	r3, [pc, #352]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b54      	ldr	r3, [pc, #336]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a53      	ldr	r2, [pc, #332]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a4c      	ldr	r2, [pc, #304]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a45      	ldr	r2, [pc, #276]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b43      	ldr	r3, [pc, #268]	; (80017f8 <MX_GPIO_Init+0x1a4>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 7191 	mov.w	r1, #290	; 0x122
 80016fc:	483f      	ldr	r0, [pc, #252]	; (80017fc <MX_GPIO_Init+0x1a8>)
 80016fe:	f002 faa5 	bl	8003c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
 8001702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001708:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <MX_GPIO_Init+0x1ac>)
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	483b      	ldr	r0, [pc, #236]	; (8001804 <MX_GPIO_Init+0x1b0>)
 8001718:	f001 fec8 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800171c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001720:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001722:	2303      	movs	r3, #3
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4834      	ldr	r0, [pc, #208]	; (8001804 <MX_GPIO_Init+0x1b0>)
 8001732:	f001 febb 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001736:	2303      	movs	r3, #3
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173a:	2303      	movs	r3, #3
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	482f      	ldr	r0, [pc, #188]	; (8001808 <MX_GPIO_Init+0x1b4>)
 800174a:	f001 feaf 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_Pin;
 800174e:	2301      	movs	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001752:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <MX_GPIO_Init+0x1ac>)
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4826      	ldr	r0, [pc, #152]	; (80017fc <MX_GPIO_Init+0x1a8>)
 8001762:	f001 fea3 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 8001766:	f44f 7391 	mov.w	r3, #290	; 0x122
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	481f      	ldr	r0, [pc, #124]	; (80017fc <MX_GPIO_Init+0x1a8>)
 8001780:	f001 fe94 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10
 8001784:	f649 6318 	movw	r3, #40472	; 0x9e18
 8001788:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178a:	2303      	movs	r3, #3
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4818      	ldr	r0, [pc, #96]	; (80017fc <MX_GPIO_Init+0x1a8>)
 800179a:	f001 fe87 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800179e:	f24f 43f7 	movw	r3, #62711	; 0xf4f7
 80017a2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a4:	2303      	movs	r3, #3
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4816      	ldr	r0, [pc, #88]	; (800180c <MX_GPIO_Init+0x1b8>)
 80017b4:	f001 fe7a 	bl	80034ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017b8:	2304      	movs	r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017bc:	2303      	movs	r3, #3
 80017be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4811      	ldr	r0, [pc, #68]	; (8001810 <MX_GPIO_Init+0x1bc>)
 80017cc:	f001 fe6e 	bl	80034ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2105      	movs	r1, #5
 80017d4:	2006      	movs	r0, #6
 80017d6:	f001 f915 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017da:	2006      	movs	r0, #6
 80017dc:	f001 f93e 	bl	8002a5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 2);
 80017e0:	2202      	movs	r2, #2
 80017e2:	2106      	movs	r1, #6
 80017e4:	2028      	movs	r0, #40	; 0x28
 80017e6:	f001 f90d 	bl	8002a04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ea:	2028      	movs	r0, #40	; 0x28
 80017ec:	f001 f936 	bl	8002a5c <HAL_NVIC_EnableIRQ>

}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	10110000 	.word	0x10110000
 8001804:	40020800 	.word	0x40020800
 8001808:	40021c00 	.word	0x40021c00
 800180c:	40020400 	.word	0x40020400
 8001810:	40020c00 	.word	0x40020c00

08001814 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <MX_I2C1_Init+0x50>)
 800181a:	4a13      	ldr	r2, [pc, #76]	; (8001868 <MX_I2C1_Init+0x54>)
 800181c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_I2C1_Init+0x50>)
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <MX_I2C1_Init+0x58>)
 8001822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MX_I2C1_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_I2C1_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_I2C1_Init+0x50>)
 8001832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001836:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <MX_I2C1_Init+0x50>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_I2C1_Init+0x50>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <MX_I2C1_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_I2C1_Init+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_I2C1_Init+0x50>)
 8001852:	f002 fa79 	bl	8003d48 <HAL_I2C_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800185c:	f000 f8e4 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20009a1c 	.word	0x20009a1c
 8001868:	40005400 	.word	0x40005400
 800186c:	000186a0 	.word	0x000186a0

08001870 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_I2C_MspInit+0x94>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d134      	bne.n	80018fc <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_I2C_MspInit+0x98>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <HAL_I2C_MspInit+0x98>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_I2C_MspInit+0x98>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b4:	2312      	movs	r3, #18
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018c0:	2304      	movs	r3, #4
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4810      	ldr	r0, [pc, #64]	; (800190c <HAL_I2C_MspInit+0x9c>)
 80018cc:	f001 fdee 	bl	80034ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_I2C_MspInit+0x98>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <HAL_I2C_MspInit+0x98>)
 80018da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018de:	6413      	str	r3, [r2, #64]	; 0x40
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_I2C_MspInit+0x98>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 1);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2106      	movs	r1, #6
 80018f0:	201f      	movs	r0, #31
 80018f2:	f001 f887 	bl	8002a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018f6:	201f      	movs	r0, #31
 80018f8:	f001 f8b0 	bl	8002a5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	; 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40005400 	.word	0x40005400
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001914:	f000 fb40 	bl	8001f98 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001918:	f000 f81e 	bl	8001958 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191c:	f7ff fe9a 	bl	8001654 <MX_GPIO_Init>
  MX_DMA_Init();
 8001920:	f7ff fe54 	bl	80015cc <MX_DMA_Init>
  MX_ADC1_Init();
 8001924:	f7fe ffe4 	bl	80008f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001928:	f7ff ff74 	bl	8001814 <MX_I2C1_Init>
  MX_TIM5_Init();
 800192c:	f000 fa3c 	bl	8001da8 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001930:	f000 fa88 	bl	8001e44 <MX_TIM9_Init>

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001934:	f008 fe26 	bl	800a584 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001938:	f7ff fe85 	bl	8001646 <MX_FREERTOS_Init>

  /* Additional FreeRTOS Object Initializations */
  FRTOS_Init_Tasks();
 800193c:	f7ff fcb8 	bl	80012b0 <FRTOS_Init_Tasks>

  /* Start scheduler */
  osKernelStart();
 8001940:	f008 fe44 	bl	800a5cc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1)
  {
	  /* Indication of failed code */
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8001944:	2120      	movs	r1, #32
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <main+0x44>)
 8001948:	f002 f9b2 	bl	8003cb0 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800194c:	2064      	movs	r0, #100	; 0x64
 800194e:	f000 fb65 	bl	800201c <HAL_Delay>
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8001952:	e7f7      	b.n	8001944 <main+0x34>
 8001954:	40020000 	.word	0x40020000

08001958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b094      	sub	sp, #80	; 0x50
 800195c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	2230      	movs	r2, #48	; 0x30
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f00b fbf4 	bl	800d154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <SystemClock_Config+0xc8>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <SystemClock_Config+0xc8>)
 8001986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198a:	6413      	str	r3, [r2, #64]	; 0x40
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <SystemClock_Config+0xc8>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <SystemClock_Config+0xcc>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <SystemClock_Config+0xcc>)
 80019a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <SystemClock_Config+0xcc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b4:	2302      	movs	r3, #2
 80019b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b8:	2301      	movs	r3, #1
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019bc:	2310      	movs	r3, #16
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c0:	2302      	movs	r3, #2
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019c4:	2300      	movs	r3, #0
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019c8:	2310      	movs	r3, #16
 80019ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80019cc:	23c8      	movs	r3, #200	; 0xc8
 80019ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019d0:	2302      	movs	r3, #2
 80019d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019d4:	2304      	movs	r3, #4
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d8:	f107 0320 	add.w	r3, r7, #32
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 ff1d 	bl	800581c <HAL_RCC_OscConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019e8:	f000 f81e 	bl	8001a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ec:	230f      	movs	r3, #15
 80019ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f0:	2302      	movs	r3, #2
 80019f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	2103      	movs	r1, #3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f004 fa2f 	bl	8005e6c <HAL_RCC_ClockConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a14:	f000 f808 	bl	8001a28 <Error_Handler>
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3750      	adds	r7, #80	; 0x50
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <Error_Handler+0x8>
	...

08001a34 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4802      	ldr	r0, [pc, #8]	; (8001a4c <assert_failed+0x18>)
 8001a44:	f00b fb8e 	bl	800d164 <iprintf>
	for(;;);
 8001a48:	e7fe      	b.n	8001a48 <assert_failed+0x14>
 8001a4a:	bf00      	nop
 8001a4c:	0800e198 	.word	0x0800e198

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_MspInit+0x54>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	210f      	movs	r1, #15
 8001a92:	f06f 0001 	mvn.w	r0, #1
 8001a96:	f000 ffb5 	bl	8002a04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	; 0x30
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	201c      	movs	r0, #28
 8001abe:	f000 ffa1 	bl	8002a04 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac2:	201c      	movs	r0, #28
 8001ac4:	f000 ffca 	bl	8002a5c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_InitTick+0xa8>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_InitTick+0xa8>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_InitTick+0xa8>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ae4:	f107 0210 	add.w	r2, r7, #16
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 fc18 	bl	8006324 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001af4:	f004 fc02 	bl	80062fc <HAL_RCC_GetPCLK1Freq>
 8001af8:	4603      	mov	r3, r0
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_InitTick+0xac>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0c9b      	lsrs	r3, r3, #18
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_InitTick+0xb0>)
 8001b0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <HAL_InitTick+0xb0>)
 8001b16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b1a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_InitTick+0xb0>)
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_InitTick+0xb0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_InitTick+0xb0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001b2e:	480a      	ldr	r0, [pc, #40]	; (8001b58 <HAL_InitTick+0xb0>)
 8001b30:	f005 f856 	bl	8006be0 <HAL_TIM_Base_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d104      	bne.n	8001b44 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <HAL_InitTick+0xb0>)
 8001b3c:	f005 f916 	bl	8006d6c <HAL_TIM_Base_Start_IT>
 8001b40:	4603      	mov	r3, r0
 8001b42:	e000      	b.n	8001b46 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3730      	adds	r7, #48	; 0x30
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	431bde83 	.word	0x431bde83
 8001b58:	20009a70 	.word	0x20009a70

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <EXTI0_IRQHandler+0x10>)
 8001b8e:	f001 fc69 	bl	8003464 <HAL_EXTI_IRQHandler>
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200098b4 	.word	0x200098b4

08001b9c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim9);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001ba2:	f005 f975 	bl	8006e90 <HAL_TIM_IRQHandler>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20009b00 	.word	0x20009b00

08001bb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim2);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <TIM2_IRQHandler+0x10>)
 8001bb6:	f005 f96b 	bl	8006e90 <HAL_TIM_IRQHandler>
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20009a70 	.word	0x20009a70

08001bc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <I2C1_EV_IRQHandler+0x10>)
 8001bca:	f002 fa89 	bl	80040e0 <HAL_I2C_EV_IRQHandler>
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20009a1c 	.word	0x20009a1c

08001bd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001be0:	f002 f88e 	bl	8003d00 <HAL_GPIO_EXTI_IRQHandler>
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim5);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM5_IRQHandler+0x10>)
 8001bee:	f005 f94f 	bl	8006e90 <HAL_TIM_IRQHandler>
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20009ab8 	.word	0x20009ab8

08001bfc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <DMA2_Stream0_IRQHandler+0x10>)
 8001c02:	f001 f999 	bl	8002f38 <HAL_DMA_IRQHandler>
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20009904 	.word	0x20009904

08001c10 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c20:	d102      	bne.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		HAL_IncTick();
 8001c22:	f000 f9db 	bl	8001fdc <HAL_IncTick>
	}
	else if(htim->Instance == TIM9)
	{

	}
}
 8001c26:	e003      	b.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0x20>
	else if(htim->Instance == TIM5)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a02      	ldr	r2, [pc, #8]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001c2e:	4293      	cmp	r3, r2
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40000c00 	.word	0x40000c00

08001c3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e00a      	b.n	8001c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c4e:	f3af 8000 	nop.w
 8001c52:	4601      	mov	r1, r0
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	60ba      	str	r2, [r7, #8]
 8001c5a:	b2ca      	uxtb	r2, r1
 8001c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbf0      	blt.n	8001c4e <_read+0x12>
	}

return len;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e009      	b.n	8001c9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	60ba      	str	r2, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	dbf1      	blt.n	8001c88 <_write+0x12>
	}
	return len;
 8001ca4:	687b      	ldr	r3, [r7, #4]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <_close>:

int _close(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <_isatty>:

int _isatty(int file)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
	return 1;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
	return 0;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <_sbrk+0x5c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <_sbrk+0x60>)
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <_sbrk+0x64>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <_sbrk+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d207      	bcs.n	8001d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d48:	f00b f9cc 	bl	800d0e4 <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	220c      	movs	r2, #12
 8001d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <_sbrk+0x64>)
 8001d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20020000 	.word	0x20020000
 8001d78:	00000800 	.word	0x00000800
 8001d7c:	200001d8 	.word	0x200001d8
 8001d80:	20009bd0 	.word	0x20009bd0

08001d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <SystemInit+0x20>)
 8001d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <SystemInit+0x20>)
 8001d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <MX_TIM5_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <MX_TIM5_Init+0x94>)
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	; (8001e40 <MX_TIM5_Init+0x98>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <MX_TIM5_Init+0x94>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <MX_TIM5_Init+0x94>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <MX_TIM5_Init+0x94>)
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_TIM5_Init+0x94>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <MX_TIM5_Init+0x94>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dea:	4814      	ldr	r0, [pc, #80]	; (8001e3c <MX_TIM5_Init+0x94>)
 8001dec:	f004 fef8 	bl	8006be0 <HAL_TIM_Base_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001df6:	f7ff fe17 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	; (8001e3c <MX_TIM5_Init+0x94>)
 8001e08:	f005 f94a 	bl	80070a0 <HAL_TIM_ConfigClockSource>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001e12:	f7ff fe09 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4619      	mov	r1, r3
 8001e22:	4806      	ldr	r0, [pc, #24]	; (8001e3c <MX_TIM5_Init+0x94>)
 8001e24:	f005 fd8a 	bl	800793c <HAL_TIMEx_MasterConfigSynchronization>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001e2e:	f7ff fdfb 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20009ab8 	.word	0x20009ab8
 8001e40:	40000c00 	.word	0x40000c00

08001e44 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <MX_TIM9_Init+0x6c>)
 8001e58:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <MX_TIM9_Init+0x70>)
 8001e5a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_TIM9_Init+0x6c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_TIM9_Init+0x6c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_TIM9_Init+0x6c>)
 8001e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e6e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_TIM9_Init+0x6c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_TIM9_Init+0x6c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e7c:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <MX_TIM9_Init+0x6c>)
 8001e7e:	f004 feaf 	bl	8006be0 <HAL_TIM_Base_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001e88:	f7ff fdce 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e90:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e92:	463b      	mov	r3, r7
 8001e94:	4619      	mov	r1, r3
 8001e96:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <MX_TIM9_Init+0x6c>)
 8001e98:	f005 f902 	bl	80070a0 <HAL_TIM_ConfigClockSource>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001ea2:	f7ff fdc1 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20009b00 	.word	0x20009b00
 8001eb4:	40014000 	.word	0x40014000

08001eb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_TIM_Base_MspInit+0x80>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d116      	bne.n	8001ef8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_TIM_Base_MspInit+0x84>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_TIM_Base_MspInit+0x84>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_TIM_Base_MspInit+0x84>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 7, 1);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2107      	movs	r1, #7
 8001eea:	2032      	movs	r0, #50	; 0x32
 8001eec:	f000 fd8a 	bl	8002a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ef0:	2032      	movs	r0, #50	; 0x32
 8001ef2:	f000 fdb3 	bl	8002a5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001ef6:	e01a      	b.n	8001f2e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM9)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_TIM_Base_MspInit+0x88>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d115      	bne.n	8001f2e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_TIM_Base_MspInit+0x84>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <HAL_TIM_Base_MspInit+0x84>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_TIM_Base_MspInit+0x84>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 2);
 8001f1e:	2202      	movs	r2, #2
 8001f20:	2107      	movs	r1, #7
 8001f22:	2018      	movs	r0, #24
 8001f24:	f000 fd6e 	bl	8002a04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f28:	2018      	movs	r0, #24
 8001f2a:	f000 fd97 	bl	8002a5c <HAL_NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40014000 	.word	0x40014000

08001f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8001f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f4a:	490e      	ldr	r1, [pc, #56]	; (8001f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	; (8001f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f50:	e002      	b.n	8001f58 <LoopCopyDataInit>

08001f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f56:	3304      	adds	r3, #4

08001f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f5c:	d3f9      	bcc.n	8001f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f60:	4c0b      	ldr	r4, [pc, #44]	; (8001f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f64:	e001      	b.n	8001f6a <LoopFillZerobss>

08001f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f68:	3204      	adds	r2, #4

08001f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f6c:	d3fb      	bcc.n	8001f66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f6e:	f7ff ff09 	bl	8001d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f72:	f00b f8bd 	bl	800d0f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f76:	f7ff fccb 	bl	8001910 <main>
  bx  lr    
 8001f7a:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8001f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f88:	0800e6f0 	.word	0x0800e6f0
  ldr r2, =_sbss
 8001f8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f90:	20009bcc 	.word	0x20009bcc

08001f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC_IRQHandler>
	...

08001f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_Init+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <HAL_Init+0x40>)
 8001fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_Init+0x40>)
 8001fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_Init+0x40>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f000 fcff 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fd6e 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fcc:	f7ff fd40 	bl	8001a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023c00 	.word	0x40023c00

08001fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x20>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_IncTick+0x24>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000004 	.word	0x20000004
 8002000:	20009b48 	.word	0x20009b48

08002004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <HAL_GetTick+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20009b48 	.word	0x20009b48

0800201c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff ffee 	bl	8002004 <HAL_GetTick>
 8002028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d005      	beq.n	8002042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_Delay+0x44>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002042:	bf00      	nop
 8002044:	f7ff ffde 	bl	8002004 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8f7      	bhi.n	8002044 <HAL_Delay+0x28>
  {
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000004 	.word	0x20000004

08002064 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e147      	b.n	800230a <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4aa5      	ldr	r2, [pc, #660]	; (8002314 <HAL_ADC_Init+0x2b0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d004      	beq.n	800208e <HAL_ADC_Init+0x2a>
 8002084:	f240 1143 	movw	r1, #323	; 0x143
 8002088:	48a3      	ldr	r0, [pc, #652]	; (8002318 <HAL_ADC_Init+0x2b4>)
 800208a:	f7ff fcd3 	bl	8001a34 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d013      	beq.n	80020be <HAL_ADC_Init+0x5a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209e:	d00e      	beq.n	80020be <HAL_ADC_Init+0x5a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020a8:	d009      	beq.n	80020be <HAL_ADC_Init+0x5a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020b2:	d004      	beq.n	80020be <HAL_ADC_Init+0x5a>
 80020b4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80020b8:	4897      	ldr	r0, [pc, #604]	; (8002318 <HAL_ADC_Init+0x2b4>)
 80020ba:	f7ff fcbb 	bl	8001a34 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d013      	beq.n	80020ee <HAL_ADC_Init+0x8a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ce:	d00e      	beq.n	80020ee <HAL_ADC_Init+0x8a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020d8:	d009      	beq.n	80020ee <HAL_ADC_Init+0x8a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020e2:	d004      	beq.n	80020ee <HAL_ADC_Init+0x8a>
 80020e4:	f240 1145 	movw	r1, #325	; 0x145
 80020e8:	488b      	ldr	r0, [pc, #556]	; (8002318 <HAL_ADC_Init+0x2b4>)
 80020ea:	f7ff fca3 	bl	8001a34 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_ADC_Init+0xa4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d004      	beq.n	8002108 <HAL_ADC_Init+0xa4>
 80020fe:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002102:	4885      	ldr	r0, [pc, #532]	; (8002318 <HAL_ADC_Init+0x2b4>)
 8002104:	f7ff fc96 	bl	8001a34 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7e1b      	ldrb	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_ADC_Init+0xbe>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7e1b      	ldrb	r3, [r3, #24]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d004      	beq.n	8002122 <HAL_ADC_Init+0xbe>
 8002118:	f240 1147 	movw	r1, #327	; 0x147
 800211c:	487e      	ldr	r0, [pc, #504]	; (8002318 <HAL_ADC_Init+0x2b4>)
 800211e:	f7ff fc89 	bl	8001a34 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	2b00      	cmp	r3, #0
 8002128:	d054      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002132:	d04f      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800213c:	d04a      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002146:	d045      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002150:	d040      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800215a:	d03b      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002164:	d036      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800216e:	d031      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002178:	d02c      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002182:	d027      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800218c:	d022      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8002196:	d01d      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80021a0:	d018      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80021aa:	d013      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80021b4:	d00e      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80021be:	d009      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	4a55      	ldr	r2, [pc, #340]	; (800231c <HAL_ADC_Init+0x2b8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <HAL_ADC_Init+0x170>
 80021ca:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80021ce:	4852      	ldr	r0, [pc, #328]	; (8002318 <HAL_ADC_Init+0x2b4>)
 80021d0:	f7ff fc30 	bl	8001a34 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d009      	beq.n	80021f0 <HAL_ADC_Init+0x18c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021e4:	d004      	beq.n	80021f0 <HAL_ADC_Init+0x18c>
 80021e6:	f240 1149 	movw	r1, #329	; 0x149
 80021ea:	484b      	ldr	r0, [pc, #300]	; (8002318 <HAL_ADC_Init+0x2b4>)
 80021ec:	f7ff fc22 	bl	8001a34 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_ADC_Init+0x19c>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d904      	bls.n	800220a <HAL_ADC_Init+0x1a6>
 8002200:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002204:	4844      	ldr	r0, [pc, #272]	; (8002318 <HAL_ADC_Init+0x2b4>)
 8002206:	f7ff fc15 	bl	8001a34 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002210:	2b00      	cmp	r3, #0
 8002212:	d009      	beq.n	8002228 <HAL_ADC_Init+0x1c4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800221a:	2b01      	cmp	r3, #1
 800221c:	d004      	beq.n	8002228 <HAL_ADC_Init+0x1c4>
 800221e:	f240 114b 	movw	r1, #331	; 0x14b
 8002222:	483d      	ldr	r0, [pc, #244]	; (8002318 <HAL_ADC_Init+0x2b4>)
 8002224:	f7ff fc06 	bl	8001a34 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d00c      	beq.n	800224a <HAL_ADC_Init+0x1e6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_ADC_Init+0x1e6>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d004      	beq.n	800224a <HAL_ADC_Init+0x1e6>
 8002240:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002244:	4834      	ldr	r0, [pc, #208]	; (8002318 <HAL_ADC_Init+0x2b4>)
 8002246:	f7ff fbf5 	bl	8001a34 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <HAL_ADC_Init+0x204>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d004      	beq.n	8002268 <HAL_ADC_Init+0x204>
 800225e:	f240 114d 	movw	r1, #333	; 0x14d
 8002262:	482d      	ldr	r0, [pc, #180]	; (8002318 <HAL_ADC_Init+0x2b4>)
 8002264:	f7ff fbe6 	bl	8001a34 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	4a2b      	ldr	r2, [pc, #172]	; (800231c <HAL_ADC_Init+0x2b8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d017      	beq.n	80022a2 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d013      	beq.n	80022a2 <HAL_ADC_Init+0x23e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002282:	d00e      	beq.n	80022a2 <HAL_ADC_Init+0x23e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800228c:	d009      	beq.n	80022a2 <HAL_ADC_Init+0x23e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002296:	d004      	beq.n	80022a2 <HAL_ADC_Init+0x23e>
 8002298:	f240 1151 	movw	r1, #337	; 0x151
 800229c:	481e      	ldr	r0, [pc, #120]	; (8002318 <HAL_ADC_Init+0x2b4>)
 800229e:	f7ff fbc9 	bl	8001a34 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fb72 	bl	8000994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022d2:	f023 0302 	bic.w	r3, r3, #2
 80022d6:	f043 0202 	orr.w	r2, r3, #2
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f994 	bl	800260c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
 80022fa:	e001      	b.n	8002300 <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40012000 	.word	0x40012000
 8002318:	0800e1c8 	.word	0x0800e1c8
 800231c:	0f000001 	.word	0x0f000001

08002320 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b12      	cmp	r3, #18
 8002334:	d909      	bls.n	800234a <HAL_ADC_ConfigChannel+0x2a>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a72      	ldr	r2, [pc, #456]	; (8002504 <HAL_ADC_ConfigChannel+0x1e4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d004      	beq.n	800234a <HAL_ADC_ConfigChannel+0x2a>
 8002340:	f240 6189 	movw	r1, #1673	; 0x689
 8002344:	4870      	ldr	r0, [pc, #448]	; (8002508 <HAL_ADC_ConfigChannel+0x1e8>)
 8002346:	f7ff fb75 	bl	8001a34 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_ADC_ConfigChannel+0x3a>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b10      	cmp	r3, #16
 8002358:	d904      	bls.n	8002364 <HAL_ADC_ConfigChannel+0x44>
 800235a:	f240 618a 	movw	r1, #1674	; 0x68a
 800235e:	486a      	ldr	r0, [pc, #424]	; (8002508 <HAL_ADC_ConfigChannel+0x1e8>)
 8002360:	f7ff fb68 	bl	8001a34 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x8e>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d01c      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x8e>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d018      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x8e>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d014      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x8e>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b04      	cmp	r3, #4
 800238a:	d010      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x8e>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d00c      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x8e>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b06      	cmp	r3, #6
 800239a:	d008      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x8e>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b07      	cmp	r3, #7
 80023a2:	d004      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x8e>
 80023a4:	f240 618b 	movw	r1, #1675	; 0x68b
 80023a8:	4857      	ldr	r0, [pc, #348]	; (8002508 <HAL_ADC_ConfigChannel+0x1e8>)
 80023aa:	f7ff fb43 	bl	8001a34 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x9c>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e118      	b.n	80025ee <HAL_ADC_ConfigChannel+0x2ce>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b09      	cmp	r3, #9
 80023ca:	d925      	bls.n	8002418 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68d9      	ldr	r1, [r3, #12]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	3b1e      	subs	r3, #30
 80023e2:	2207      	movs	r2, #7
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43da      	mvns	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	400a      	ands	r2, r1
 80023f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68d9      	ldr	r1, [r3, #12]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	4618      	mov	r0, r3
 8002404:	4603      	mov	r3, r0
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4403      	add	r3, r0
 800240a:	3b1e      	subs	r3, #30
 800240c:	409a      	lsls	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	e022      	b.n	800245e <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6919      	ldr	r1, [r3, #16]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	2207      	movs	r2, #7
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	400a      	ands	r2, r1
 800243a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6919      	ldr	r1, [r3, #16]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	4603      	mov	r3, r0
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4403      	add	r3, r0
 8002454:	409a      	lsls	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b06      	cmp	r3, #6
 8002464:	d824      	bhi.n	80024b0 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	3b05      	subs	r3, #5
 8002478:	221f      	movs	r2, #31
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	400a      	ands	r2, r1
 8002486:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	3b05      	subs	r3, #5
 80024a2:	fa00 f203 	lsl.w	r2, r0, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	635a      	str	r2, [r3, #52]	; 0x34
 80024ae:	e051      	b.n	8002554 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d829      	bhi.n	800250c <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	3b23      	subs	r3, #35	; 0x23
 80024ca:	221f      	movs	r2, #31
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43da      	mvns	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	400a      	ands	r2, r1
 80024d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b23      	subs	r3, #35	; 0x23
 80024f4:	fa00 f203 	lsl.w	r2, r0, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002500:	e028      	b.n	8002554 <HAL_ADC_ConfigChannel+0x234>
 8002502:	bf00      	nop
 8002504:	10000012 	.word	0x10000012
 8002508:	0800e1c8 	.word	0x0800e1c8
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	3b41      	subs	r3, #65	; 0x41
 800251e:	221f      	movs	r2, #31
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43da      	mvns	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	400a      	ands	r2, r1
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	4618      	mov	r0, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	3b41      	subs	r3, #65	; 0x41
 8002548:	fa00 f203 	lsl.w	r2, r0, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002554:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <HAL_ADC_ConfigChannel+0x2d8>)
 8002556:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <HAL_ADC_ConfigChannel+0x2dc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10f      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x262>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b12      	cmp	r3, #18
 8002568:	d10b      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <HAL_ADC_ConfigChannel+0x2dc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d12b      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x2c4>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_ADC_ConfigChannel+0x2e0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <HAL_ADC_ConfigChannel+0x27e>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b11      	cmp	r3, #17
 800259c:	d122      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a11      	ldr	r2, [pc, #68]	; (8002600 <HAL_ADC_ConfigChannel+0x2e0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d111      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_ADC_ConfigChannel+0x2e4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a10      	ldr	r2, [pc, #64]	; (8002608 <HAL_ADC_ConfigChannel+0x2e8>)
 80025c6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ca:	0c9a      	lsrs	r2, r3, #18
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025d6:	e002      	b.n	80025de <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	3b01      	subs	r3, #1
 80025dc:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f9      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40012300 	.word	0x40012300
 80025fc:	40012000 	.word	0x40012000
 8002600:	10000012 	.word	0x10000012
 8002604:	20000000 	.word	0x20000000
 8002608:	431bde83 	.word	0x431bde83

0800260c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002614:	4b7f      	ldr	r3, [pc, #508]	; (8002814 <ADC_Init+0x208>)
 8002616:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	431a      	orrs	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	021a      	lsls	r2, r3, #8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6899      	ldr	r1, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	4a5e      	ldr	r2, [pc, #376]	; (8002818 <ADC_Init+0x20c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d022      	beq.n	80026ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e00f      	b.n	800270a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002708:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0202 	bic.w	r2, r2, #2
 8002718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6899      	ldr	r1, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7e1b      	ldrb	r3, [r3, #24]
 8002724:	005a      	lsls	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d028      	beq.n	800278a <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <ADC_Init+0x13c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2b08      	cmp	r3, #8
 8002746:	d904      	bls.n	8002752 <ADC_Init+0x146>
 8002748:	f240 71a6 	movw	r1, #1958	; 0x7a6
 800274c:	4833      	ldr	r0, [pc, #204]	; (800281c <ADC_Init+0x210>)
 800274e:	f7ff f971 	bl	8001a34 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002760:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002770:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	3b01      	subs	r3, #1
 800277e:	035a      	lsls	r2, r3, #13
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	e007      	b.n	800279a <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002798:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	3b01      	subs	r3, #1
 80027b6:	051a      	lsls	r2, r3, #20
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6899      	ldr	r1, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027dc:	025a      	lsls	r2, r3, #9
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6899      	ldr	r1, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	029a      	lsls	r2, r3, #10
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40012300 	.word	0x40012300
 8002818:	0f000001 	.word	0x0f000001
 800281c:	0800e1c8 	.word	0x0800e1c8

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4907      	ldr	r1, [pc, #28]	; (80028bc <__NVIC_EnableIRQ+0x38>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	db12      	blt.n	80028f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	490a      	ldr	r1, [pc, #40]	; (8002904 <__NVIC_DisableIRQ+0x44>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2001      	movs	r0, #1
 80028e2:	fa00 f202 	lsl.w	r2, r0, r2
 80028e6:	3320      	adds	r3, #32
 80028e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80028ec:	f3bf 8f4f 	dsb	sy
}
 80028f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028f2:	f3bf 8f6f 	isb	sy
}
 80028f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000e100 	.word	0xe000e100

08002908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	2b00      	cmp	r3, #0
 800291a:	db0a      	blt.n	8002932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	490c      	ldr	r1, [pc, #48]	; (8002954 <__NVIC_SetPriority+0x4c>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	0112      	lsls	r2, r2, #4
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	440b      	add	r3, r1
 800292c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002930:	e00a      	b.n	8002948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4908      	ldr	r1, [pc, #32]	; (8002958 <__NVIC_SetPriority+0x50>)
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	3b04      	subs	r3, #4
 8002940:	0112      	lsls	r2, r2, #4
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	440b      	add	r3, r1
 8002946:	761a      	strb	r2, [r3, #24]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000e100 	.word	0xe000e100
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f1c3 0307 	rsb	r3, r3, #7
 8002976:	2b04      	cmp	r3, #4
 8002978:	bf28      	it	cs
 800297a:	2304      	movcs	r3, #4
 800297c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3304      	adds	r3, #4
 8002982:	2b06      	cmp	r3, #6
 8002984:	d902      	bls.n	800298c <NVIC_EncodePriority+0x30>
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3b03      	subs	r3, #3
 800298a:	e000      	b.n	800298e <NVIC_EncodePriority+0x32>
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	f04f 32ff 	mov.w	r2, #4294967295
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	401a      	ands	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a4:	f04f 31ff 	mov.w	r1, #4294967295
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43d9      	mvns	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	4313      	orrs	r3, r2
         );
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3724      	adds	r7, #36	; 0x24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b07      	cmp	r3, #7
 80029d0:	d00f      	beq.n	80029f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b06      	cmp	r3, #6
 80029d6:	d00c      	beq.n	80029f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b05      	cmp	r3, #5
 80029dc:	d009      	beq.n	80029f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d006      	beq.n	80029f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d003      	beq.n	80029f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80029ea:	2192      	movs	r1, #146	; 0x92
 80029ec:	4804      	ldr	r0, [pc, #16]	; (8002a00 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80029ee:	f7ff f821 	bl	8001a34 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ff14 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	0800e200 	.word	0x0800e200

08002a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b0f      	cmp	r3, #15
 8002a1a:	d903      	bls.n	8002a24 <HAL_NVIC_SetPriority+0x20>
 8002a1c:	21aa      	movs	r1, #170	; 0xaa
 8002a1e:	480e      	ldr	r0, [pc, #56]	; (8002a58 <HAL_NVIC_SetPriority+0x54>)
 8002a20:	f7ff f808 	bl	8001a34 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	d903      	bls.n	8002a32 <HAL_NVIC_SetPriority+0x2e>
 8002a2a:	21ab      	movs	r1, #171	; 0xab
 8002a2c:	480a      	ldr	r0, [pc, #40]	; (8002a58 <HAL_NVIC_SetPriority+0x54>)
 8002a2e:	f7ff f801 	bl	8001a34 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a32:	f7ff ff19 	bl	8002868 <__NVIC_GetPriorityGrouping>
 8002a36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	6978      	ldr	r0, [r7, #20]
 8002a3e:	f7ff ff8d 	bl	800295c <NVIC_EncodePriority>
 8002a42:	4602      	mov	r2, r0
 8002a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff5c 	bl	8002908 <__NVIC_SetPriority>
}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	0800e200 	.word	0x0800e200

08002a5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da03      	bge.n	8002a76 <HAL_NVIC_EnableIRQ+0x1a>
 8002a6e:	21be      	movs	r1, #190	; 0xbe
 8002a70:	4805      	ldr	r0, [pc, #20]	; (8002a88 <HAL_NVIC_EnableIRQ+0x2c>)
 8002a72:	f7fe ffdf 	bl	8001a34 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ff02 	bl	8002884 <__NVIC_EnableIRQ>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	0800e200 	.word	0x0800e200

08002a8c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	da03      	bge.n	8002aa6 <HAL_NVIC_DisableIRQ+0x1a>
 8002a9e:	21ce      	movs	r1, #206	; 0xce
 8002aa0:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <HAL_NVIC_DisableIRQ+0x2c>)
 8002aa2:	f7fe ffc7 	bl	8001a34 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff08 	bl	80028c0 <__NVIC_DisableIRQ>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	0800e200 	.word	0x0800e200

08002abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff fa9c 	bl	8002004 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e204      	b.n	8002ee2 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a97      	ldr	r2, [pc, #604]	; (8002d3c <HAL_DMA_Init+0x280>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d04e      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a96      	ldr	r2, [pc, #600]	; (8002d40 <HAL_DMA_Init+0x284>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d049      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a94      	ldr	r2, [pc, #592]	; (8002d44 <HAL_DMA_Init+0x288>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d044      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a93      	ldr	r2, [pc, #588]	; (8002d48 <HAL_DMA_Init+0x28c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d03f      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a91      	ldr	r2, [pc, #580]	; (8002d4c <HAL_DMA_Init+0x290>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d03a      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a90      	ldr	r2, [pc, #576]	; (8002d50 <HAL_DMA_Init+0x294>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d035      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a8e      	ldr	r2, [pc, #568]	; (8002d54 <HAL_DMA_Init+0x298>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d030      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a8d      	ldr	r2, [pc, #564]	; (8002d58 <HAL_DMA_Init+0x29c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d02b      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a8b      	ldr	r2, [pc, #556]	; (8002d5c <HAL_DMA_Init+0x2a0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d026      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a8a      	ldr	r2, [pc, #552]	; (8002d60 <HAL_DMA_Init+0x2a4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d021      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a88      	ldr	r2, [pc, #544]	; (8002d64 <HAL_DMA_Init+0x2a8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01c      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a87      	ldr	r2, [pc, #540]	; (8002d68 <HAL_DMA_Init+0x2ac>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d017      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a85      	ldr	r2, [pc, #532]	; (8002d6c <HAL_DMA_Init+0x2b0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d012      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a84      	ldr	r2, [pc, #528]	; (8002d70 <HAL_DMA_Init+0x2b4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00d      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a82      	ldr	r2, [pc, #520]	; (8002d74 <HAL_DMA_Init+0x2b8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d008      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a81      	ldr	r2, [pc, #516]	; (8002d78 <HAL_DMA_Init+0x2bc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d003      	beq.n	8002b80 <HAL_DMA_Init+0xc4>
 8002b78:	21b8      	movs	r1, #184	; 0xb8
 8002b7a:	4880      	ldr	r0, [pc, #512]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002b7c:	f7fe ff5a 	bl	8001a34 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d026      	beq.n	8002bd6 <HAL_DMA_Init+0x11a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b90:	d021      	beq.n	8002bd6 <HAL_DMA_Init+0x11a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b9a:	d01c      	beq.n	8002bd6 <HAL_DMA_Init+0x11a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002ba4:	d017      	beq.n	8002bd6 <HAL_DMA_Init+0x11a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bae:	d012      	beq.n	8002bd6 <HAL_DMA_Init+0x11a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_DMA_Init+0x11a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002bc2:	d008      	beq.n	8002bd6 <HAL_DMA_Init+0x11a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002bcc:	d003      	beq.n	8002bd6 <HAL_DMA_Init+0x11a>
 8002bce:	21b9      	movs	r1, #185	; 0xb9
 8002bd0:	486a      	ldr	r0, [pc, #424]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002bd2:	f7fe ff2f 	bl	8001a34 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_DMA_Init+0x13a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	d007      	beq.n	8002bf6 <HAL_DMA_Init+0x13a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d003      	beq.n	8002bf6 <HAL_DMA_Init+0x13a>
 8002bee:	21ba      	movs	r1, #186	; 0xba
 8002bf0:	4862      	ldr	r0, [pc, #392]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002bf2:	f7fe ff1f 	bl	8001a34 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfe:	d007      	beq.n	8002c10 <HAL_DMA_Init+0x154>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_DMA_Init+0x154>
 8002c08:	21bb      	movs	r1, #187	; 0xbb
 8002c0a:	485c      	ldr	r0, [pc, #368]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002c0c:	f7fe ff12 	bl	8001a34 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	d007      	beq.n	8002c2a <HAL_DMA_Init+0x16e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_DMA_Init+0x16e>
 8002c22:	21bc      	movs	r1, #188	; 0xbc
 8002c24:	4855      	ldr	r0, [pc, #340]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002c26:	f7fe ff05 	bl	8001a34 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00d      	beq.n	8002c4e <HAL_DMA_Init+0x192>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3a:	d008      	beq.n	8002c4e <HAL_DMA_Init+0x192>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c44:	d003      	beq.n	8002c4e <HAL_DMA_Init+0x192>
 8002c46:	21bd      	movs	r1, #189	; 0xbd
 8002c48:	484c      	ldr	r0, [pc, #304]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002c4a:	f7fe fef3 	bl	8001a34 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <HAL_DMA_Init+0x1b6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5e:	d008      	beq.n	8002c72 <HAL_DMA_Init+0x1b6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c68:	d003      	beq.n	8002c72 <HAL_DMA_Init+0x1b6>
 8002c6a:	21be      	movs	r1, #190	; 0xbe
 8002c6c:	4843      	ldr	r0, [pc, #268]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002c6e:	f7fe fee1 	bl	8001a34 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00c      	beq.n	8002c94 <HAL_DMA_Init+0x1d8>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c82:	d007      	beq.n	8002c94 <HAL_DMA_Init+0x1d8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d003      	beq.n	8002c94 <HAL_DMA_Init+0x1d8>
 8002c8c:	21bf      	movs	r1, #191	; 0xbf
 8002c8e:	483b      	ldr	r0, [pc, #236]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002c90:	f7fe fed0 	bl	8001a34 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d012      	beq.n	8002cc2 <HAL_DMA_Init+0x206>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca4:	d00d      	beq.n	8002cc2 <HAL_DMA_Init+0x206>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cae:	d008      	beq.n	8002cc2 <HAL_DMA_Init+0x206>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cb8:	d003      	beq.n	8002cc2 <HAL_DMA_Init+0x206>
 8002cba:	21c0      	movs	r1, #192	; 0xc0
 8002cbc:	482f      	ldr	r0, [pc, #188]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002cbe:	f7fe feb9 	bl	8001a34 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_DMA_Init+0x21e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d003      	beq.n	8002cda <HAL_DMA_Init+0x21e>
 8002cd2:	21c1      	movs	r1, #193	; 0xc1
 8002cd4:	4829      	ldr	r0, [pc, #164]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002cd6:	f7fe fead 	bl	8001a34 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d065      	beq.n	8002dae <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00f      	beq.n	8002d0a <HAL_DMA_Init+0x24e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d00b      	beq.n	8002d0a <HAL_DMA_Init+0x24e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d007      	beq.n	8002d0a <HAL_DMA_Init+0x24e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d003      	beq.n	8002d0a <HAL_DMA_Init+0x24e>
 8002d02:	21c6      	movs	r1, #198	; 0xc6
 8002d04:	481d      	ldr	r0, [pc, #116]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002d06:	f7fe fe95 	bl	8001a34 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d036      	beq.n	8002d80 <HAL_DMA_Init+0x2c4>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d1a:	d031      	beq.n	8002d80 <HAL_DMA_Init+0x2c4>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d24:	d02c      	beq.n	8002d80 <HAL_DMA_Init+0x2c4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d2e:	d027      	beq.n	8002d80 <HAL_DMA_Init+0x2c4>
 8002d30:	21c7      	movs	r1, #199	; 0xc7
 8002d32:	4812      	ldr	r0, [pc, #72]	; (8002d7c <HAL_DMA_Init+0x2c0>)
 8002d34:	f7fe fe7e 	bl	8001a34 <assert_failed>
 8002d38:	e022      	b.n	8002d80 <HAL_DMA_Init+0x2c4>
 8002d3a:	bf00      	nop
 8002d3c:	40026010 	.word	0x40026010
 8002d40:	40026028 	.word	0x40026028
 8002d44:	40026040 	.word	0x40026040
 8002d48:	40026058 	.word	0x40026058
 8002d4c:	40026070 	.word	0x40026070
 8002d50:	40026088 	.word	0x40026088
 8002d54:	400260a0 	.word	0x400260a0
 8002d58:	400260b8 	.word	0x400260b8
 8002d5c:	40026410 	.word	0x40026410
 8002d60:	40026428 	.word	0x40026428
 8002d64:	40026440 	.word	0x40026440
 8002d68:	40026458 	.word	0x40026458
 8002d6c:	40026470 	.word	0x40026470
 8002d70:	40026488 	.word	0x40026488
 8002d74:	400264a0 	.word	0x400264a0
 8002d78:	400264b8 	.word	0x400264b8
 8002d7c:	0800e23c 	.word	0x0800e23c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <HAL_DMA_Init+0x2f2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d90:	d00d      	beq.n	8002dae <HAL_DMA_Init+0x2f2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9a:	d008      	beq.n	8002dae <HAL_DMA_Init+0x2f2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002da4:	d003      	beq.n	8002dae <HAL_DMA_Init+0x2f2>
 8002da6:	21c8      	movs	r1, #200	; 0xc8
 8002da8:	4850      	ldr	r0, [pc, #320]	; (8002eec <HAL_DMA_Init+0x430>)
 8002daa:	f7fe fe43 	bl	8001a34 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dce:	e00f      	b.n	8002df0 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd0:	f7ff f918 	bl	8002004 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d908      	bls.n	8002df0 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2203      	movs	r2, #3
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e078      	b.n	8002ee2 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1e8      	bne.n	8002dd0 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <HAL_DMA_Init+0x434>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d107      	bne.n	8002e5a <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4313      	orrs	r3, r2
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f023 0307 	bic.w	r3, r3, #7
 8002e70:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d117      	bne.n	8002eb4 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00e      	beq.n	8002eb4 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fa1c 	bl	80032d4 <DMA_CheckFifoParam>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2240      	movs	r2, #64	; 0x40
 8002ea6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e016      	b.n	8002ee2 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f9d3 	bl	8003268 <DMA_CalcBaseAndBitshift>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	223f      	movs	r2, #63	; 0x3f
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	0800e23c 	.word	0x0800e23c
 8002ef0:	f010803f 	.word	0xf010803f

08002ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d004      	beq.n	8002f12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e00c      	b.n	8002f2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2205      	movs	r2, #5
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f44:	4b92      	ldr	r3, [pc, #584]	; (8003190 <HAL_DMA_IRQHandler+0x258>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a92      	ldr	r2, [pc, #584]	; (8003194 <HAL_DMA_IRQHandler+0x25c>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0a9b      	lsrs	r3, r3, #10
 8002f50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	2208      	movs	r2, #8
 8002f64:	409a      	lsls	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01a      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d013      	beq.n	8002fa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0204 	bic.w	r2, r2, #4
 8002f8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f90:	2208      	movs	r2, #8
 8002f92:	409a      	lsls	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9c:	f043 0201 	orr.w	r2, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa8:	2201      	movs	r2, #1
 8002faa:	409a      	lsls	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d012      	beq.n	8002fda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f043 0202 	orr.w	r2, r3, #2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	2204      	movs	r2, #4
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d012      	beq.n	8003010 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00b      	beq.n	8003010 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	409a      	lsls	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003008:	f043 0204 	orr.w	r2, r3, #4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	2210      	movs	r2, #16
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d043      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d03c      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	2210      	movs	r2, #16
 8003034:	409a      	lsls	r2, r3
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d018      	beq.n	800307a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d108      	bne.n	8003068 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d024      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
 8003066:	e01f      	b.n	80030a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01b      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
 8003078:	e016      	b.n	80030a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d107      	bne.n	8003098 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0208 	bic.w	r2, r2, #8
 8003096:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	2220      	movs	r2, #32
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 808e 	beq.w	80031d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8086 	beq.w	80031d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	2220      	movs	r2, #32
 80030d0:	409a      	lsls	r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b05      	cmp	r3, #5
 80030e0:	d136      	bne.n	8003150 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0216 	bic.w	r2, r2, #22
 80030f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003100:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <HAL_DMA_IRQHandler+0x1da>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0208 	bic.w	r2, r2, #8
 8003120:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	223f      	movs	r2, #63	; 0x3f
 8003128:	409a      	lsls	r2, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003142:	2b00      	cmp	r3, #0
 8003144:	d07d      	beq.n	8003242 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
        }
        return;
 800314e:	e078      	b.n	8003242 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01c      	beq.n	8003198 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d108      	bne.n	800317e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003170:	2b00      	cmp	r3, #0
 8003172:	d030      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
 800317c:	e02b      	b.n	80031d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d027      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
 800318e:	e022      	b.n	80031d6 <HAL_DMA_IRQHandler+0x29e>
 8003190:	20000000 	.word	0x20000000
 8003194:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10f      	bne.n	80031c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0210 	bic.w	r2, r2, #16
 80031b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d032      	beq.n	8003244 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d022      	beq.n	8003230 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2205      	movs	r2, #5
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3301      	adds	r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	429a      	cmp	r2, r3
 800320c:	d307      	bcc.n	800321e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f2      	bne.n	8003202 <HAL_DMA_IRQHandler+0x2ca>
 800321c:	e000      	b.n	8003220 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800321e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
 8003240:	e000      	b.n	8003244 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003242:	bf00      	nop
    }
  }
}
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop

0800324c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800325a:	b2db      	uxtb	r3, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3b10      	subs	r3, #16
 8003278:	4a14      	ldr	r2, [pc, #80]	; (80032cc <DMA_CalcBaseAndBitshift+0x64>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003282:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <DMA_CalcBaseAndBitshift+0x68>)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d909      	bls.n	80032aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	1d1a      	adds	r2, r3, #4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	659a      	str	r2, [r3, #88]	; 0x58
 80032a8:	e007      	b.n	80032ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	aaaaaaab 	.word	0xaaaaaaab
 80032d0:	0800e460 	.word	0x0800e460

080032d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d11f      	bne.n	800332e <DMA_CheckFifoParam+0x5a>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d856      	bhi.n	80033a2 <DMA_CheckFifoParam+0xce>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <DMA_CheckFifoParam+0x28>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	0800331f 	.word	0x0800331f
 8003304:	0800330d 	.word	0x0800330d
 8003308:	080033a3 	.word	0x080033a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d046      	beq.n	80033a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331c:	e043      	b.n	80033a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003326:	d140      	bne.n	80033aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332c:	e03d      	b.n	80033aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003336:	d121      	bne.n	800337c <DMA_CheckFifoParam+0xa8>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b03      	cmp	r3, #3
 800333c:	d837      	bhi.n	80033ae <DMA_CheckFifoParam+0xda>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <DMA_CheckFifoParam+0x70>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	08003355 	.word	0x08003355
 8003348:	0800335b 	.word	0x0800335b
 800334c:	08003355 	.word	0x08003355
 8003350:	0800336d 	.word	0x0800336d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e030      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d025      	beq.n	80033b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336a:	e022      	b.n	80033b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003374:	d11f      	bne.n	80033b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800337a:	e01c      	b.n	80033b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d903      	bls.n	800338a <DMA_CheckFifoParam+0xb6>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d003      	beq.n	8003390 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003388:	e018      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
      break;
 800338e:	e015      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00e      	beq.n	80033ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      break;
 80033a0:	e00b      	b.n	80033ba <DMA_CheckFifoParam+0xe6>
      break;
 80033a2:	bf00      	nop
 80033a4:	e00a      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;
 80033a6:	bf00      	nop
 80033a8:	e008      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;
 80033aa:	bf00      	nop
 80033ac:	e006      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;
 80033ae:	bf00      	nop
 80033b0:	e004      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;
 80033b2:	bf00      	nop
 80033b4:	e002      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;   
 80033b6:	bf00      	nop
 80033b8:	e000      	b.n	80033bc <DMA_CheckFifoParam+0xe8>
      break;
 80033ba:	bf00      	nop
    }
  } 
  
  return status; 
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop

080033cc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	460b      	mov	r3, r1
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	605a      	str	r2, [r3, #4]
      break;
 80033ea:	e002      	b.n	80033f2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	75fb      	strb	r3, [r7, #23]
      break;
 80033f0:	bf00      	nop
  }

  return status;
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003410:	f023 031f 	bic.w	r3, r3, #31
 8003414:	2b00      	cmp	r3, #0
 8003416:	d110      	bne.n	800343a <HAL_EXTI_GetHandle+0x3a>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800341e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003422:	d005      	beq.n	8003430 <HAL_EXTI_GetHandle+0x30>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800342a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800342e:	d104      	bne.n	800343a <HAL_EXTI_GetHandle+0x3a>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2b16      	cmp	r3, #22
 8003438:	d904      	bls.n	8003444 <HAL_EXTI_GetHandle+0x44>
 800343a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800343e:	4808      	ldr	r0, [pc, #32]	; (8003460 <HAL_EXTI_GetHandle+0x60>)
 8003440:	f7fe faf8 	bl	8001a34 <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_EXTI_GetHandle+0x4e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e003      	b.n	8003456 <HAL_EXTI_GetHandle+0x56>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003454:	2300      	movs	r3, #0
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	0800e274 	.word	0x0800e274

08003464 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 031f 	and.w	r3, r3, #31
 8003474:	2201      	movs	r2, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_EXTI_IRQHandler+0x44>)
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4013      	ands	r3, r2
 8003484:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d009      	beq.n	80034a0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800348c:	4a06      	ldr	r2, [pc, #24]	; (80034a8 <HAL_EXTI_IRQHandler+0x44>)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4798      	blx	r3
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40013c00 	.word	0x40013c00

080034ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a3b      	ldr	r2, [pc, #236]	; (80035b4 <HAL_GPIO_Init+0x108>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d017      	beq.n	80034fa <HAL_GPIO_Init+0x4e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a3a      	ldr	r2, [pc, #232]	; (80035b8 <HAL_GPIO_Init+0x10c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_GPIO_Init+0x4e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a39      	ldr	r2, [pc, #228]	; (80035bc <HAL_GPIO_Init+0x110>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00f      	beq.n	80034fa <HAL_GPIO_Init+0x4e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a38      	ldr	r2, [pc, #224]	; (80035c0 <HAL_GPIO_Init+0x114>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00b      	beq.n	80034fa <HAL_GPIO_Init+0x4e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a37      	ldr	r2, [pc, #220]	; (80035c4 <HAL_GPIO_Init+0x118>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <HAL_GPIO_Init+0x4e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a36      	ldr	r2, [pc, #216]	; (80035c8 <HAL_GPIO_Init+0x11c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x4e>
 80034f2:	21ac      	movs	r1, #172	; 0xac
 80034f4:	4835      	ldr	r0, [pc, #212]	; (80035cc <HAL_GPIO_Init+0x120>)
 80034f6:	f7fe fa9d 	bl	8001a34 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_GPIO_Init+0x64>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x6c>
 8003510:	21ad      	movs	r1, #173	; 0xad
 8003512:	482e      	ldr	r0, [pc, #184]	; (80035cc <HAL_GPIO_Init+0x120>)
 8003514:	f7fe fa8e 	bl	8001a34 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d035      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d031      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b11      	cmp	r3, #17
 800352e:	d02d      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d029      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b12      	cmp	r3, #18
 800353e:	d025      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <HAL_GPIO_Init+0x124>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d020      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4a21      	ldr	r2, [pc, #132]	; (80035d4 <HAL_GPIO_Init+0x128>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d01b      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_GPIO_Init+0x12c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d016      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <HAL_GPIO_Init+0x130>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d011      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_GPIO_Init+0x134>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00c      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_GPIO_Init+0x138>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d007      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0xe0>
 8003584:	21ae      	movs	r1, #174	; 0xae
 8003586:	4811      	ldr	r0, [pc, #68]	; (80035cc <HAL_GPIO_Init+0x120>)
 8003588:	f7fe fa54 	bl	8001a34 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <HAL_GPIO_Init+0x100>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d007      	beq.n	80035ac <HAL_GPIO_Init+0x100>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x100>
 80035a4:	21af      	movs	r1, #175	; 0xaf
 80035a6:	4809      	ldr	r0, [pc, #36]	; (80035cc <HAL_GPIO_Init+0x120>)
 80035a8:	f7fe fa44 	bl	8001a34 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	e20f      	b.n	80039d2 <HAL_GPIO_Init+0x526>
 80035b2:	bf00      	nop
 80035b4:	40020000 	.word	0x40020000
 80035b8:	40020400 	.word	0x40020400
 80035bc:	40020800 	.word	0x40020800
 80035c0:	40020c00 	.word	0x40020c00
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40021c00 	.word	0x40021c00
 80035cc:	0800e2b0 	.word	0x0800e2b0
 80035d0:	10110000 	.word	0x10110000
 80035d4:	10210000 	.word	0x10210000
 80035d8:	10310000 	.word	0x10310000
 80035dc:	10120000 	.word	0x10120000
 80035e0:	10220000 	.word	0x10220000
 80035e4:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035e8:	2201      	movs	r2, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4013      	ands	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	429a      	cmp	r2, r3
 8003602:	f040 81e3 	bne.w	80039cc <HAL_GPIO_Init+0x520>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d005      	beq.n	800361e <HAL_GPIO_Init+0x172>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800361a:	2b02      	cmp	r3, #2
 800361c:	d144      	bne.n	80036a8 <HAL_GPIO_Init+0x1fc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00f      	beq.n	8003646 <HAL_GPIO_Init+0x19a>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d00b      	beq.n	8003646 <HAL_GPIO_Init+0x19a>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d007      	beq.n	8003646 <HAL_GPIO_Init+0x19a>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b03      	cmp	r3, #3
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x19a>
 800363e:	21c1      	movs	r1, #193	; 0xc1
 8003640:	489f      	ldr	r0, [pc, #636]	; (80038c0 <HAL_GPIO_Init+0x414>)
 8003642:	f7fe f9f7 	bl	8001a34 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800367c:	2201      	movs	r2, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 0201 	and.w	r2, r3, #1
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d017      	beq.n	80036e4 <HAL_GPIO_Init+0x238>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	2203      	movs	r2, #3
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4313      	orrs	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	f040 80a0 	bne.w	8003832 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d077      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b09      	cmp	r3, #9
 8003700:	d073      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d06f      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d06b      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d067      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d063      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d05f      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d05b      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d057      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d053      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d04f      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d04b      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b04      	cmp	r3, #4
 8003758:	d047      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b04      	cmp	r3, #4
 8003760:	d043      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b05      	cmp	r3, #5
 8003768:	d03f      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b05      	cmp	r3, #5
 8003770:	d03b      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	2b05      	cmp	r3, #5
 8003778:	d037      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b06      	cmp	r3, #6
 8003780:	d033      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b06      	cmp	r3, #6
 8003788:	d02f      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b05      	cmp	r3, #5
 8003790:	d02b      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b06      	cmp	r3, #6
 8003798:	d027      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b07      	cmp	r3, #7
 80037a0:	d023      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	d01f      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b07      	cmp	r3, #7
 80037b0:	d01b      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d017      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b0a      	cmp	r3, #10
 80037c0:	d013      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b09      	cmp	r3, #9
 80037c8:	d00f      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b09      	cmp	r3, #9
 80037d0:	d00b      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d007      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b0f      	cmp	r3, #15
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_Init+0x33e>
 80037e2:	21dc      	movs	r1, #220	; 0xdc
 80037e4:	4836      	ldr	r0, [pc, #216]	; (80038c0 <HAL_GPIO_Init+0x414>)
 80037e6:	f7fe f925 	bl	8001a34 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	08da      	lsrs	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3208      	adds	r2, #8
 80037f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	220f      	movs	r2, #15
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	08da      	lsrs	r2, r3, #3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3208      	adds	r2, #8
 800382c:	69b9      	ldr	r1, [r7, #24]
 800382e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	2203      	movs	r2, #3
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0203 	and.w	r2, r3, #3
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80ac 	beq.w	80039cc <HAL_GPIO_Init+0x520>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_GPIO_Init+0x418>)
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	4a11      	ldr	r2, [pc, #68]	; (80038c4 <HAL_GPIO_Init+0x418>)
 800387e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003882:	6453      	str	r3, [r2, #68]	; 0x44
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_GPIO_Init+0x418>)
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003890:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <HAL_GPIO_Init+0x41c>)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	3302      	adds	r3, #2
 8003898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	220f      	movs	r2, #15
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a05      	ldr	r2, [pc, #20]	; (80038cc <HAL_GPIO_Init+0x420>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d023      	beq.n	8003904 <HAL_GPIO_Init+0x458>
 80038bc:	e008      	b.n	80038d0 <HAL_GPIO_Init+0x424>
 80038be:	bf00      	nop
 80038c0:	0800e2b0 	.word	0x0800e2b0
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40013800 	.word	0x40013800
 80038cc:	40020000 	.word	0x40020000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a44      	ldr	r2, [pc, #272]	; (80039e4 <HAL_GPIO_Init+0x538>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_GPIO_Init+0x454>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a43      	ldr	r2, [pc, #268]	; (80039e8 <HAL_GPIO_Init+0x53c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00d      	beq.n	80038fc <HAL_GPIO_Init+0x450>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a42      	ldr	r2, [pc, #264]	; (80039ec <HAL_GPIO_Init+0x540>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <HAL_GPIO_Init+0x44c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a41      	ldr	r2, [pc, #260]	; (80039f0 <HAL_GPIO_Init+0x544>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d101      	bne.n	80038f4 <HAL_GPIO_Init+0x448>
 80038f0:	2304      	movs	r3, #4
 80038f2:	e008      	b.n	8003906 <HAL_GPIO_Init+0x45a>
 80038f4:	2307      	movs	r3, #7
 80038f6:	e006      	b.n	8003906 <HAL_GPIO_Init+0x45a>
 80038f8:	2303      	movs	r3, #3
 80038fa:	e004      	b.n	8003906 <HAL_GPIO_Init+0x45a>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e002      	b.n	8003906 <HAL_GPIO_Init+0x45a>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_GPIO_Init+0x45a>
 8003904:	2300      	movs	r3, #0
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	f002 0203 	and.w	r2, r2, #3
 800390c:	0092      	lsls	r2, r2, #2
 800390e:	4093      	lsls	r3, r2
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003916:	4937      	ldr	r1, [pc, #220]	; (80039f4 <HAL_GPIO_Init+0x548>)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	3302      	adds	r3, #2
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003924:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_GPIO_Init+0x54c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x49c>
        {
          temp |= iocurrent;
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003948:	4a2b      	ldr	r2, [pc, #172]	; (80039f8 <HAL_GPIO_Init+0x54c>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800394e:	4b2a      	ldr	r3, [pc, #168]	; (80039f8 <HAL_GPIO_Init+0x54c>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x4c6>
        {
          temp |= iocurrent;
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003972:	4a21      	ldr	r2, [pc, #132]	; (80039f8 <HAL_GPIO_Init+0x54c>)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003978:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_GPIO_Init+0x54c>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x4f0>
        {
          temp |= iocurrent;
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800399c:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <HAL_GPIO_Init+0x54c>)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_GPIO_Init+0x54c>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x51a>
        {
          temp |= iocurrent;
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c6:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <HAL_GPIO_Init+0x54c>)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	f67f ae07 	bls.w	80035e8 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40020400 	.word	0x40020400
 80039e8:	40020800 	.word	0x40020800
 80039ec:	40020c00 	.word	0x40020c00
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40013800 	.word	0x40013800
 80039f8:	40013c00 	.word	0x40013c00

080039fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a71      	ldr	r2, [pc, #452]	; (8003bdc <HAL_GPIO_DeInit+0x1e0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d018      	beq.n	8003a4c <HAL_GPIO_DeInit+0x50>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a70      	ldr	r2, [pc, #448]	; (8003be0 <HAL_GPIO_DeInit+0x1e4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d014      	beq.n	8003a4c <HAL_GPIO_DeInit+0x50>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a6f      	ldr	r2, [pc, #444]	; (8003be4 <HAL_GPIO_DeInit+0x1e8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d010      	beq.n	8003a4c <HAL_GPIO_DeInit+0x50>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <HAL_GPIO_DeInit+0x1ec>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00c      	beq.n	8003a4c <HAL_GPIO_DeInit+0x50>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a6d      	ldr	r2, [pc, #436]	; (8003bec <HAL_GPIO_DeInit+0x1f0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d008      	beq.n	8003a4c <HAL_GPIO_DeInit+0x50>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a6c      	ldr	r2, [pc, #432]	; (8003bf0 <HAL_GPIO_DeInit+0x1f4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_GPIO_DeInit+0x50>
 8003a42:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a46:	486b      	ldr	r0, [pc, #428]	; (8003bf4 <HAL_GPIO_DeInit+0x1f8>)
 8003a48:	f7fd fff4 	bl	8001a34 <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e0bb      	b.n	8003bca <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a52:	2201      	movs	r2, #1
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	f040 80ab 	bne.w	8003bc4 <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a6e:	4a62      	ldr	r2, [pc, #392]	; (8003bf8 <HAL_GPIO_DeInit+0x1fc>)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	3302      	adds	r3, #2
 8003a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	220f      	movs	r2, #15
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <HAL_GPIO_DeInit+0x1e0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d019      	beq.n	8003acc <HAL_GPIO_DeInit+0xd0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a51      	ldr	r2, [pc, #324]	; (8003be0 <HAL_GPIO_DeInit+0x1e4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_GPIO_DeInit+0xcc>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a50      	ldr	r2, [pc, #320]	; (8003be4 <HAL_GPIO_DeInit+0x1e8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00d      	beq.n	8003ac4 <HAL_GPIO_DeInit+0xc8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a4f      	ldr	r2, [pc, #316]	; (8003be8 <HAL_GPIO_DeInit+0x1ec>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <HAL_GPIO_DeInit+0xc4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a4e      	ldr	r2, [pc, #312]	; (8003bec <HAL_GPIO_DeInit+0x1f0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_GPIO_DeInit+0xc0>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	e008      	b.n	8003ace <HAL_GPIO_DeInit+0xd2>
 8003abc:	2307      	movs	r3, #7
 8003abe:	e006      	b.n	8003ace <HAL_GPIO_DeInit+0xd2>
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e004      	b.n	8003ace <HAL_GPIO_DeInit+0xd2>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e002      	b.n	8003ace <HAL_GPIO_DeInit+0xd2>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <HAL_GPIO_DeInit+0xd2>
 8003acc:	2300      	movs	r3, #0
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	f002 0203 	and.w	r2, r2, #3
 8003ad4:	0092      	lsls	r2, r2, #2
 8003ad6:	4093      	lsls	r3, r2
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d132      	bne.n	8003b44 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ade:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_GPIO_DeInit+0x200>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	4945      	ldr	r1, [pc, #276]	; (8003bfc <HAL_GPIO_DeInit+0x200>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003aec:	4b43      	ldr	r3, [pc, #268]	; (8003bfc <HAL_GPIO_DeInit+0x200>)
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	4941      	ldr	r1, [pc, #260]	; (8003bfc <HAL_GPIO_DeInit+0x200>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003afa:	4b40      	ldr	r3, [pc, #256]	; (8003bfc <HAL_GPIO_DeInit+0x200>)
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	493e      	ldr	r1, [pc, #248]	; (8003bfc <HAL_GPIO_DeInit+0x200>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003b08:	4b3c      	ldr	r3, [pc, #240]	; (8003bfc <HAL_GPIO_DeInit+0x200>)
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	493a      	ldr	r1, [pc, #232]	; (8003bfc <HAL_GPIO_DeInit+0x200>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b26:	4a34      	ldr	r2, [pc, #208]	; (8003bf8 <HAL_GPIO_DeInit+0x1fc>)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	43da      	mvns	r2, r3
 8003b36:	4830      	ldr	r0, [pc, #192]	; (8003bf8 <HAL_GPIO_DeInit+0x1fc>)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	3302      	adds	r3, #2
 8003b40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2103      	movs	r1, #3
 8003b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	401a      	ands	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	08da      	lsrs	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3208      	adds	r2, #8
 8003b62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	220f      	movs	r2, #15
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	08d2      	lsrs	r2, r2, #3
 8003b7a:	4019      	ands	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3208      	adds	r2, #8
 8003b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2103      	movs	r1, #3
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	401a      	ands	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	401a      	ands	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2103      	movs	r1, #3
 8003bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b0f      	cmp	r3, #15
 8003bce:	f67f af40 	bls.w	8003a52 <HAL_GPIO_DeInit+0x56>
    }
  }
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40020000 	.word	0x40020000
 8003be0:	40020400 	.word	0x40020400
 8003be4:	40020800 	.word	0x40020800
 8003be8:	40020c00 	.word	0x40020c00
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40021c00 	.word	0x40021c00
 8003bf4:	0800e2b0 	.word	0x0800e2b0
 8003bf8:	40013800 	.word	0x40013800
 8003bfc:	40013c00 	.word	0x40013c00

08003c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003c0c:	887b      	ldrh	r3, [r7, #2]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <HAL_GPIO_ReadPin+0x1c>
 8003c12:	887b      	ldrh	r3, [r7, #2]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <HAL_GPIO_ReadPin+0x26>
 8003c1c:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003c20:	4809      	ldr	r0, [pc, #36]	; (8003c48 <HAL_GPIO_ReadPin+0x48>)
 8003c22:	f7fd ff07 	bl	8001a34 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	e001      	b.n	8003c3c <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	0800e2b0 	.word	0x0800e2b0

08003c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	807b      	strh	r3, [r7, #2]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003c5c:	887b      	ldrh	r3, [r7, #2]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <HAL_GPIO_WritePin+0x20>
 8003c62:	887b      	ldrh	r3, [r7, #2]
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <HAL_GPIO_WritePin+0x2a>
 8003c6c:	f240 119b 	movw	r1, #411	; 0x19b
 8003c70:	480e      	ldr	r0, [pc, #56]	; (8003cac <HAL_GPIO_WritePin+0x60>)
 8003c72:	f7fd fedf 	bl	8001a34 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003c76:	787b      	ldrb	r3, [r7, #1]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_GPIO_WritePin+0x40>
 8003c7c:	787b      	ldrb	r3, [r7, #1]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d004      	beq.n	8003c8c <HAL_GPIO_WritePin+0x40>
 8003c82:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003c86:	4809      	ldr	r0, [pc, #36]	; (8003cac <HAL_GPIO_WritePin+0x60>)
 8003c88:	f7fd fed4 	bl	8001a34 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003c8c:	787b      	ldrb	r3, [r7, #1]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c92:	887a      	ldrh	r2, [r7, #2]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c98:	e003      	b.n	8003ca2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c9a:	887b      	ldrh	r3, [r7, #2]
 8003c9c:	041a      	lsls	r2, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	619a      	str	r2, [r3, #24]
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	0800e2b0 	.word	0x0800e2b0

08003cb0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <HAL_GPIO_TogglePin+0x1c>
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	041b      	lsls	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_GPIO_TogglePin+0x26>
 8003ccc:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003cd0:	480a      	ldr	r0, [pc, #40]	; (8003cfc <HAL_GPIO_TogglePin+0x4c>)
 8003cd2:	f7fd feaf 	bl	8001a34 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cdc:	887a      	ldrh	r2, [r7, #2]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	041a      	lsls	r2, r3, #16
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	43d9      	mvns	r1, r3
 8003ce8:	887b      	ldrh	r3, [r7, #2]
 8003cea:	400b      	ands	r3, r1
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	619a      	str	r2, [r3, #24]
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	0800e2b0 	.word	0x0800e2b0

08003d00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d006      	beq.n	8003d24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d16:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d1c:	88fb      	ldrh	r3, [r7, #6]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f806 	bl	8003d30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40013c00 	.word	0x40013c00

08003d30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e1be      	b.n	80040d8 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a9f      	ldr	r2, [pc, #636]	; (8003fdc <HAL_I2C_Init+0x294>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_I2C_Init+0x3a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a9d      	ldr	r2, [pc, #628]	; (8003fe0 <HAL_I2C_Init+0x298>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d009      	beq.n	8003d82 <HAL_I2C_Init+0x3a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a9c      	ldr	r2, [pc, #624]	; (8003fe4 <HAL_I2C_Init+0x29c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d004      	beq.n	8003d82 <HAL_I2C_Init+0x3a>
 8003d78:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003d7c:	489a      	ldr	r0, [pc, #616]	; (8003fe8 <HAL_I2C_Init+0x2a0>)
 8003d7e:	f7fd fe59 	bl	8001a34 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d004      	beq.n	8003d94 <HAL_I2C_Init+0x4c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4a97      	ldr	r2, [pc, #604]	; (8003fec <HAL_I2C_Init+0x2a4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d904      	bls.n	8003d9e <HAL_I2C_Init+0x56>
 8003d94:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003d98:	4893      	ldr	r0, [pc, #588]	; (8003fe8 <HAL_I2C_Init+0x2a0>)
 8003d9a:	f7fd fe4b 	bl	8001a34 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_I2C_Init+0x72>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dae:	d004      	beq.n	8003dba <HAL_I2C_Init+0x72>
 8003db0:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003db4:	488c      	ldr	r0, [pc, #560]	; (8003fe8 <HAL_I2C_Init+0x2a0>)
 8003db6:	f7fd fe3d 	bl	8001a34 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <HAL_I2C_Init+0x8c>
 8003dca:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003dce:	4886      	ldr	r0, [pc, #536]	; (8003fe8 <HAL_I2C_Init+0x2a0>)
 8003dd0:	f7fd fe30 	bl	8001a34 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ddc:	d009      	beq.n	8003df2 <HAL_I2C_Init+0xaa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003de6:	d004      	beq.n	8003df2 <HAL_I2C_Init+0xaa>
 8003de8:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003dec:	487e      	ldr	r0, [pc, #504]	; (8003fe8 <HAL_I2C_Init+0x2a0>)
 8003dee:	f7fd fe21 	bl	8001a34 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_I2C_Init+0xc4>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d004      	beq.n	8003e0c <HAL_I2C_Init+0xc4>
 8003e02:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003e06:	4878      	ldr	r0, [pc, #480]	; (8003fe8 <HAL_I2C_Init+0x2a0>)
 8003e08:	f7fd fe14 	bl	8001a34 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d004      	beq.n	8003e22 <HAL_I2C_Init+0xda>
 8003e18:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003e1c:	4872      	ldr	r0, [pc, #456]	; (8003fe8 <HAL_I2C_Init+0x2a0>)
 8003e1e:	f7fd fe09 	bl	8001a34 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_I2C_Init+0xf4>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	2b40      	cmp	r3, #64	; 0x40
 8003e30:	d004      	beq.n	8003e3c <HAL_I2C_Init+0xf4>
 8003e32:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003e36:	486c      	ldr	r0, [pc, #432]	; (8003fe8 <HAL_I2C_Init+0x2a0>)
 8003e38:	f7fd fdfc 	bl	8001a34 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_I2C_Init+0x10e>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	2b80      	cmp	r3, #128	; 0x80
 8003e4a:	d004      	beq.n	8003e56 <HAL_I2C_Init+0x10e>
 8003e4c:	f240 11c7 	movw	r1, #455	; 0x1c7
 8003e50:	4865      	ldr	r0, [pc, #404]	; (8003fe8 <HAL_I2C_Init+0x2a0>)
 8003e52:	f7fd fdef 	bl	8001a34 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd fd00 	bl	8001870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2224      	movs	r2, #36	; 0x24
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f002 fa28 	bl	80062fc <HAL_RCC_GetPCLK1Freq>
 8003eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a4f      	ldr	r2, [pc, #316]	; (8003ff0 <HAL_I2C_Init+0x2a8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d807      	bhi.n	8003ec8 <HAL_I2C_Init+0x180>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a4e      	ldr	r2, [pc, #312]	; (8003ff4 <HAL_I2C_Init+0x2ac>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bf94      	ite	ls
 8003ec0:	2301      	movls	r3, #1
 8003ec2:	2300      	movhi	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e006      	b.n	8003ed6 <HAL_I2C_Init+0x18e>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a4b      	ldr	r2, [pc, #300]	; (8003ff8 <HAL_I2C_Init+0x2b0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	bf94      	ite	ls
 8003ed0:	2301      	movls	r3, #1
 8003ed2:	2300      	movhi	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0fc      	b.n	80040d8 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a46      	ldr	r2, [pc, #280]	; (8003ffc <HAL_I2C_Init+0x2b4>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0c9b      	lsrs	r3, r3, #18
 8003ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a38      	ldr	r2, [pc, #224]	; (8003ff0 <HAL_I2C_Init+0x2a8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d802      	bhi.n	8003f18 <HAL_I2C_Init+0x1d0>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3301      	adds	r3, #1
 8003f16:	e009      	b.n	8003f2c <HAL_I2C_Init+0x1e4>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	4a37      	ldr	r2, [pc, #220]	; (8004000 <HAL_I2C_Init+0x2b8>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	492a      	ldr	r1, [pc, #168]	; (8003ff0 <HAL_I2C_Init+0x2a8>)
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	d819      	bhi.n	8003f80 <HAL_I2C_Init+0x238>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1e59      	subs	r1, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f60:	400b      	ands	r3, r1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_I2C_Init+0x234>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1e59      	subs	r1, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7a:	e066      	b.n	800404a <HAL_I2C_Init+0x302>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	e064      	b.n	800404a <HAL_I2C_Init+0x302>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d111      	bne.n	8003fac <HAL_I2C_Init+0x264>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1e58      	subs	r0, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	440b      	add	r3, r1
 8003f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e012      	b.n	8003fd2 <HAL_I2C_Init+0x28a>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1e58      	subs	r0, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6859      	ldr	r1, [r3, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	0099      	lsls	r1, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_I2C_Init+0x2bc>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e037      	b.n	800404a <HAL_I2C_Init+0x302>
 8003fda:	bf00      	nop
 8003fdc:	40005400 	.word	0x40005400
 8003fe0:	40005800 	.word	0x40005800
 8003fe4:	40005c00 	.word	0x40005c00
 8003fe8:	0800e2ec 	.word	0x0800e2ec
 8003fec:	00061a80 	.word	0x00061a80
 8003ff0:	000186a0 	.word	0x000186a0
 8003ff4:	001e847f 	.word	0x001e847f
 8003ff8:	003d08ff 	.word	0x003d08ff
 8003ffc:	431bde83 	.word	0x431bde83
 8004000:	10624dd3 	.word	0x10624dd3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10e      	bne.n	800402a <HAL_I2C_Init+0x2e2>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	440b      	add	r3, r1
 800401a:	fbb0 f3f3 	udiv	r3, r0, r3
 800401e:	3301      	adds	r3, #1
 8004020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004028:	e00f      	b.n	800404a <HAL_I2C_Init+0x302>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1e58      	subs	r0, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6859      	ldr	r1, [r3, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	0099      	lsls	r1, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004040:	3301      	adds	r3, #1
 8004042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	6809      	ldr	r1, [r1, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004078:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6911      	ldr	r1, [r2, #16]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68d2      	ldr	r2, [r2, #12]
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	430b      	orrs	r3, r1
 800408c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004100:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b10      	cmp	r3, #16
 800410e:	d003      	beq.n	8004118 <HAL_I2C_EV_IRQHandler+0x38>
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	f040 80bd 	bne.w	8004292 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10d      	bne.n	800414e <HAL_I2C_EV_IRQHandler+0x6e>
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004138:	d003      	beq.n	8004142 <HAL_I2C_EV_IRQHandler+0x62>
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004140:	d101      	bne.n	8004146 <HAL_I2C_EV_IRQHandler+0x66>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_I2C_EV_IRQHandler+0x68>
 8004146:	2300      	movs	r3, #0
 8004148:	2b01      	cmp	r3, #1
 800414a:	f000 812e 	beq.w	80043aa <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00c      	beq.n	8004172 <HAL_I2C_EV_IRQHandler+0x92>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	0a5b      	lsrs	r3, r3, #9
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d006      	beq.n	8004172 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f001 fb3d 	bl	80057e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fcbb 	bl	8004ae6 <I2C_Master_SB>
 8004170:	e08e      	b.n	8004290 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	08db      	lsrs	r3, r3, #3
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_I2C_EV_IRQHandler+0xb2>
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	0a5b      	lsrs	r3, r3, #9
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fd31 	bl	8004bf2 <I2C_Master_ADD10>
 8004190:	e07e      	b.n	8004290 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_I2C_EV_IRQHandler+0xd2>
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	0a5b      	lsrs	r3, r3, #9
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fd4b 	bl	8004c46 <I2C_Master_ADDR>
 80041b0:	e06e      	b.n	8004290 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d037      	beq.n	800422e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041cc:	f000 80ef 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	09db      	lsrs	r3, r3, #7
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00f      	beq.n	80041fc <HAL_I2C_EV_IRQHandler+0x11c>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	0a9b      	lsrs	r3, r3, #10
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <HAL_I2C_EV_IRQHandler+0x11c>
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	089b      	lsrs	r3, r3, #2
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f948 	bl	800448a <I2C_MasterTransmit_TXE>
 80041fa:	e049      	b.n	8004290 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	089b      	lsrs	r3, r3, #2
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80d2 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x2ce>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	0a5b      	lsrs	r3, r3, #9
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80cb 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b10      	cmp	r3, #16
 800421c:	d103      	bne.n	8004226 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f9cf 	bl	80045c2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004224:	e0c3      	b.n	80043ae <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa33 	bl	8004692 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800422c:	e0bf      	b.n	80043ae <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423c:	f000 80b7 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	099b      	lsrs	r3, r3, #6
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00f      	beq.n	800426c <HAL_I2C_EV_IRQHandler+0x18c>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	0a9b      	lsrs	r3, r3, #10
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d009      	beq.n	800426c <HAL_I2C_EV_IRQHandler+0x18c>
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	089b      	lsrs	r3, r3, #2
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d103      	bne.n	800426c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 faa3 	bl	80047b0 <I2C_MasterReceive_RXNE>
 800426a:	e011      	b.n	8004290 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 809a 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x2ce>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	0a5b      	lsrs	r3, r3, #9
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8093 	beq.w	80043ae <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fb42 	bl	8004912 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800428e:	e08e      	b.n	80043ae <HAL_I2C_EV_IRQHandler+0x2ce>
 8004290:	e08d      	b.n	80043ae <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	e007      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <HAL_I2C_EV_IRQHandler+0x206>
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	0a5b      	lsrs	r3, r3, #9
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80042dc:	69b9      	ldr	r1, [r7, #24]
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 ff00 	bl	80050e4 <I2C_Slave_ADDR>
 80042e4:	e066      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <HAL_I2C_EV_IRQHandler+0x226>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	0a5b      	lsrs	r3, r3, #9
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 ff34 	bl	800516c <I2C_Slave_STOPF>
 8004304:	e056      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004306:	7bbb      	ldrb	r3, [r7, #14]
 8004308:	2b21      	cmp	r3, #33	; 0x21
 800430a:	d002      	beq.n	8004312 <HAL_I2C_EV_IRQHandler+0x232>
 800430c:	7bbb      	ldrb	r3, [r7, #14]
 800430e:	2b29      	cmp	r3, #41	; 0x29
 8004310:	d125      	bne.n	800435e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	09db      	lsrs	r3, r3, #7
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00f      	beq.n	800433e <HAL_I2C_EV_IRQHandler+0x25e>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	0a9b      	lsrs	r3, r3, #10
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_I2C_EV_IRQHandler+0x25e>
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	089b      	lsrs	r3, r3, #2
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fe16 	bl	8004f68 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800433c:	e039      	b.n	80043b2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	089b      	lsrs	r3, r3, #2
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d033      	beq.n	80043b2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	0a5b      	lsrs	r3, r3, #9
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02d      	beq.n	80043b2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fe43 	bl	8004fe2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800435c:	e029      	b.n	80043b2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00f      	beq.n	800438a <HAL_I2C_EV_IRQHandler+0x2aa>
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	0a9b      	lsrs	r3, r3, #10
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_I2C_EV_IRQHandler+0x2aa>
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	089b      	lsrs	r3, r3, #2
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fe4e 	bl	8005024 <I2C_SlaveReceive_RXNE>
 8004388:	e014      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	089b      	lsrs	r3, r3, #2
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	0a5b      	lsrs	r3, r3, #9
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fe7c 	bl	80050a0 <I2C_SlaveReceive_BTF>
 80043a8:	e004      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80043aa:	bf00      	nop
 80043ac:	e002      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	70fb      	strb	r3, [r7, #3]
 8004416:	4613      	mov	r3, r2
 8004418:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d150      	bne.n	8004552 <I2C_MasterTransmit_TXE+0xc8>
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	2b21      	cmp	r3, #33	; 0x21
 80044b4:	d14d      	bne.n	8004552 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d01d      	beq.n	80044f8 <I2C_MasterTransmit_TXE+0x6e>
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d01a      	beq.n	80044f8 <I2C_MasterTransmit_TXE+0x6e>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044c8:	d016      	beq.n	80044f8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044d8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2211      	movs	r2, #17
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff62 	bl	80043ba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044f6:	e060      	b.n	80045ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004506:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004516:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	d107      	bne.n	8004542 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ff7d 	bl	800443a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004540:	e03b      	b.n	80045ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ff35 	bl	80043ba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004550:	e033      	b.n	80045ba <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b21      	cmp	r3, #33	; 0x21
 8004556:	d005      	beq.n	8004564 <I2C_MasterTransmit_TXE+0xda>
 8004558:	7bbb      	ldrb	r3, [r7, #14]
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d12d      	bne.n	80045ba <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b22      	cmp	r3, #34	; 0x22
 8004562:	d12a      	bne.n	80045ba <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d108      	bne.n	8004580 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800457e:	e01c      	b.n	80045ba <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d103      	bne.n	8004594 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f880 	bl	8004692 <I2C_MemoryTransmit_TXE_BTF>
}
 8004592:	e012      	b.n	80045ba <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045b8:	e7ff      	b.n	80045ba <I2C_MasterTransmit_TXE+0x130>
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b21      	cmp	r3, #33	; 0x21
 80045da:	d156      	bne.n	800468a <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d012      	beq.n	800460c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	781a      	ldrb	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800460a:	e03e      	b.n	800468a <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b08      	cmp	r3, #8
 8004610:	d01d      	beq.n	800464e <I2C_MasterTransmit_BTF+0x8c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b20      	cmp	r3, #32
 8004616:	d01a      	beq.n	800464e <I2C_MasterTransmit_BTF+0x8c>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800461e:	d016      	beq.n	800464e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800462e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2211      	movs	r2, #17
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff feb7 	bl	80043ba <HAL_I2C_MasterTxCpltCallback>
}
 800464c:	e01d      	b.n	800468a <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800465c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff fe98 	bl	80043ba <HAL_I2C_MasterTxCpltCallback>
}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11d      	bne.n	80046e6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d10b      	bne.n	80046ca <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c2:	1c9a      	adds	r2, r3, #2
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80046c8:	e06e      	b.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	121b      	asrs	r3, r3, #8
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80046e4:	e060      	b.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d10b      	bne.n	8004706 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004704:	e050      	b.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470a:	2b02      	cmp	r3, #2
 800470c:	d14c      	bne.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	2b22      	cmp	r3, #34	; 0x22
 8004712:	d108      	bne.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004722:	601a      	str	r2, [r3, #0]
}
 8004724:	e040      	b.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d015      	beq.n	800475c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b21      	cmp	r3, #33	; 0x21
 8004734:	d112      	bne.n	800475c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	781a      	ldrb	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800475a:	e025      	b.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d120      	bne.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b21      	cmp	r3, #33	; 0x21
 800476a:	d11d      	bne.n	80047a8 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800477a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fe49 	bl	800443a <HAL_I2C_MemTxCpltCallback>
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b22      	cmp	r3, #34	; 0x22
 80047c2:	f040 80a2 	bne.w	800490a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d921      	bls.n	8004818 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b03      	cmp	r3, #3
 8004802:	f040 8082 	bne.w	800490a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004814:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004816:	e078      	b.n	800490a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	2b02      	cmp	r3, #2
 800481e:	d074      	beq.n	800490a <I2C_MasterReceive_RXNE+0x15a>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d002      	beq.n	800482c <I2C_MasterReceive_RXNE+0x7c>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d16e      	bne.n	800490a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 ffa7 	bl	8005780 <I2C_WaitOnSTOPRequestThroughIT>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d142      	bne.n	80048be <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004846:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004856:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d10a      	bne.n	80048a8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff fdd4 	bl	800444e <HAL_I2C_MemRxCpltCallback>
}
 80048a6:	e030      	b.n	800490a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2212      	movs	r2, #18
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fd89 	bl	80043ce <HAL_I2C_MasterRxCpltCallback>
}
 80048bc:	e025      	b.n	800490a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff fdac 	bl	8004462 <HAL_I2C_ErrorCallback>
}
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b04      	cmp	r3, #4
 8004928:	d11b      	bne.n	8004962 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004938:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004960:	e0bd      	b.n	8004ade <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b03      	cmp	r3, #3
 800496a:	d129      	bne.n	80049c0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b04      	cmp	r3, #4
 8004980:	d00a      	beq.n	8004998 <I2C_MasterReceive_BTF+0x86>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d007      	beq.n	8004998 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004996:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049be:	e08e      	b.n	8004ade <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d176      	bne.n	8004ab8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d002      	beq.n	80049d6 <I2C_MasterReceive_BTF+0xc4>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d108      	bne.n	80049e8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e019      	b.n	8004a1c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d002      	beq.n	80049f4 <I2C_MasterReceive_BTF+0xe2>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d108      	bne.n	8004a06 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	e00a      	b.n	8004a1c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d007      	beq.n	8004a1c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a76:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d10a      	bne.n	8004aa2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7ff fcd7 	bl	800444e <HAL_I2C_MemRxCpltCallback>
}
 8004aa0:	e01d      	b.n	8004ade <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2212      	movs	r2, #18
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff fc8c 	bl	80043ce <HAL_I2C_MasterRxCpltCallback>
}
 8004ab6:	e012      	b.n	8004ade <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d117      	bne.n	8004b2a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b12:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b14:	e067      	b.n	8004be6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]
}
 8004b28:	e05d      	b.n	8004be6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b32:	d133      	bne.n	8004b9c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b21      	cmp	r3, #33	; 0x21
 8004b3e:	d109      	bne.n	8004b54 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b50:	611a      	str	r2, [r3, #16]
 8004b52:	e008      	b.n	8004b66 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <I2C_Master_SB+0x92>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d108      	bne.n	8004b8a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d032      	beq.n	8004be6 <I2C_Master_SB+0x100>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d02d      	beq.n	8004be6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b98:	605a      	str	r2, [r3, #4]
}
 8004b9a:	e024      	b.n	8004be6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10e      	bne.n	8004bc2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	11db      	asrs	r3, r3, #7
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f003 0306 	and.w	r3, r3, #6
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f063 030f 	orn	r3, r3, #15
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	611a      	str	r2, [r3, #16]
}
 8004bc0:	e011      	b.n	8004be6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d10d      	bne.n	8004be6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	11db      	asrs	r3, r3, #7
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 0306 	and.w	r3, r3, #6
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	f063 030e 	orn	r3, r3, #14
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	611a      	str	r2, [r3, #16]
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d004      	beq.n	8004c18 <I2C_Master_ADD10+0x26>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d108      	bne.n	8004c2a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00c      	beq.n	8004c3a <I2C_Master_ADD10+0x48>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c38:	605a      	str	r2, [r3, #4]
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b091      	sub	sp, #68	; 0x44
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b22      	cmp	r3, #34	; 0x22
 8004c6e:	f040 8169 	bne.w	8004f44 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10f      	bne.n	8004c9a <I2C_Master_ADDR+0x54>
 8004c7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d10b      	bne.n	8004c9a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c82:	2300      	movs	r3, #0
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	e160      	b.n	8004f5c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d11d      	bne.n	8004cde <I2C_Master_ADDR+0x98>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004caa:	d118      	bne.n	8004cde <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cac:	2300      	movs	r3, #0
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cd0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	651a      	str	r2, [r3, #80]	; 0x50
 8004cdc:	e13e      	b.n	8004f5c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d113      	bne.n	8004d10 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce8:	2300      	movs	r3, #0
 8004cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e115      	b.n	8004f3c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	f040 808a 	bne.w	8004e30 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d22:	d137      	bne.n	8004d94 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d32:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d42:	d113      	bne.n	8004d6c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d52:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d54:	2300      	movs	r3, #0
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	e0e7      	b.n	8004f3c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	623b      	str	r3, [r7, #32]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	623b      	str	r3, [r7, #32]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	623b      	str	r3, [r7, #32]
 8004d80:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e0d3      	b.n	8004f3c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d02e      	beq.n	8004df8 <I2C_Master_ADDR+0x1b2>
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d02b      	beq.n	8004df8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	2b12      	cmp	r3, #18
 8004da4:	d102      	bne.n	8004dac <I2C_Master_ADDR+0x166>
 8004da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d125      	bne.n	8004df8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d00e      	beq.n	8004dd0 <I2C_Master_ADDR+0x18a>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d00b      	beq.n	8004dd0 <I2C_Master_ADDR+0x18a>
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d008      	beq.n	8004dd0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e007      	b.n	8004de0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dde:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	e0a1      	b.n	8004f3c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e06:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	e085      	b.n	8004f3c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d14d      	bne.n	8004ed6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d016      	beq.n	8004e6e <I2C_Master_ADDR+0x228>
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d013      	beq.n	8004e6e <I2C_Master_ADDR+0x228>
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d010      	beq.n	8004e6e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e007      	b.n	8004e7e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e7c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e8c:	d117      	bne.n	8004ebe <I2C_Master_ADDR+0x278>
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e94:	d00b      	beq.n	8004eae <I2C_Master_ADDR+0x268>
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d008      	beq.n	8004eae <I2C_Master_ADDR+0x268>
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d005      	beq.n	8004eae <I2C_Master_ADDR+0x268>
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d002      	beq.n	8004eae <I2C_Master_ADDR+0x268>
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d107      	bne.n	8004ebe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ebc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	e032      	b.n	8004f3c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ee4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef4:	d117      	bne.n	8004f26 <I2C_Master_ADDR+0x2e0>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004efc:	d00b      	beq.n	8004f16 <I2C_Master_ADDR+0x2d0>
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d008      	beq.n	8004f16 <I2C_Master_ADDR+0x2d0>
 8004f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d005      	beq.n	8004f16 <I2C_Master_ADDR+0x2d0>
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d002      	beq.n	8004f16 <I2C_Master_ADDR+0x2d0>
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d107      	bne.n	8004f26 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f24:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f42:	e00b      	b.n	8004f5c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
}
 8004f5a:	e7ff      	b.n	8004f5c <I2C_Master_ADDR+0x316>
 8004f5c:	bf00      	nop
 8004f5e:	3744      	adds	r7, #68	; 0x44
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f76:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d02b      	beq.n	8004fda <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	781a      	ldrb	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d114      	bne.n	8004fda <I2C_SlaveTransmit_TXE+0x72>
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b29      	cmp	r3, #41	; 0x29
 8004fb4:	d111      	bne.n	8004fda <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2221      	movs	r2, #33	; 0x21
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2228      	movs	r2, #40	; 0x28
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fa04 	bl	80043e2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d011      	beq.n	8005018 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	781a      	ldrb	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005032:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d02c      	beq.n	8005098 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d114      	bne.n	8005098 <I2C_SlaveReceive_RXNE+0x74>
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b2a      	cmp	r3, #42	; 0x2a
 8005072:	d111      	bne.n	8005098 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005082:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2222      	movs	r2, #34	; 0x22
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2228      	movs	r2, #40	; 0x28
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff f9af 	bl	80043f6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d012      	beq.n	80050d8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050fe:	2b28      	cmp	r3, #40	; 0x28
 8005100:	d127      	bne.n	8005152 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005110:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	089b      	lsrs	r3, r3, #2
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800511e:	2301      	movs	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	09db      	lsrs	r3, r3, #7
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	81bb      	strh	r3, [r7, #12]
 8005134:	e002      	b.n	800513c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005144:	89ba      	ldrh	r2, [r7, #12]
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff f95d 	bl	800440a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005150:	e008      	b.n	8005164 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f06f 0202 	mvn.w	r2, #2
 800515a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800518a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c8:	d172      	bne.n	80052b0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b22      	cmp	r3, #34	; 0x22
 80051ce:	d002      	beq.n	80051d6 <I2C_Slave_STOPF+0x6a>
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	2b2a      	cmp	r3, #42	; 0x2a
 80051d4:	d135      	bne.n	8005242 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	b29a      	uxth	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f043 0204 	orr.w	r2, r3, #4
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005208:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe f81c 	bl	800324c <HAL_DMA_GetState>
 8005214:	4603      	mov	r3, r0
 8005216:	2b01      	cmp	r3, #1
 8005218:	d049      	beq.n	80052ae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	4a69      	ldr	r2, [pc, #420]	; (80053c4 <I2C_Slave_STOPF+0x258>)
 8005220:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	4618      	mov	r0, r3
 8005228:	f7fd fe64 	bl	8002ef4 <HAL_DMA_Abort_IT>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d03d      	beq.n	80052ae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800523c:	4610      	mov	r0, r2
 800523e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005240:	e035      	b.n	80052ae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	b29a      	uxth	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f043 0204 	orr.w	r2, r3, #4
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005274:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	4618      	mov	r0, r3
 800527c:	f7fd ffe6 	bl	800324c <HAL_DMA_GetState>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d014      	beq.n	80052b0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528a:	4a4e      	ldr	r2, [pc, #312]	; (80053c4 <I2C_Slave_STOPF+0x258>)
 800528c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	4618      	mov	r0, r3
 8005294:	f7fd fe2e 	bl	8002ef4 <HAL_DMA_Abort_IT>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052a8:	4610      	mov	r0, r2
 80052aa:	4798      	blx	r3
 80052ac:	e000      	b.n	80052b0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052ae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d03e      	beq.n	8005338 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d112      	bne.n	80052ee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d112      	bne.n	8005322 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	f043 0204 	orr.w	r2, r3, #4
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f843 	bl	80053cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005346:	e039      	b.n	80053bc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b2a      	cmp	r3, #42	; 0x2a
 800534c:	d109      	bne.n	8005362 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2228      	movs	r2, #40	; 0x28
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff f84a 	bl	80043f6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b28      	cmp	r3, #40	; 0x28
 800536c:	d111      	bne.n	8005392 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <I2C_Slave_STOPF+0x25c>)
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff f84b 	bl	8004426 <HAL_I2C_ListenCpltCallback>
}
 8005390:	e014      	b.n	80053bc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	2b22      	cmp	r3, #34	; 0x22
 8005398:	d002      	beq.n	80053a0 <I2C_Slave_STOPF+0x234>
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	2b22      	cmp	r3, #34	; 0x22
 800539e:	d10d      	bne.n	80053bc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff f81d 	bl	80043f6 <HAL_I2C_SlaveRxCpltCallback>
}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	08005631 	.word	0x08005631
 80053c8:	ffff0000 	.word	0xffff0000

080053cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053e4:	7bbb      	ldrb	r3, [r7, #14]
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	d002      	beq.n	80053f0 <I2C_ITError+0x24>
 80053ea:	7bbb      	ldrb	r3, [r7, #14]
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d10a      	bne.n	8005406 <I2C_ITError+0x3a>
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	2b22      	cmp	r3, #34	; 0x22
 80053f4:	d107      	bne.n	8005406 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005404:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800540c:	2b28      	cmp	r3, #40	; 0x28
 800540e:	d107      	bne.n	8005420 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2228      	movs	r2, #40	; 0x28
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800541e:	e015      	b.n	800544c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800542a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542e:	d00a      	beq.n	8005446 <I2C_ITError+0x7a>
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b60      	cmp	r3, #96	; 0x60
 8005434:	d007      	beq.n	8005446 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545a:	d162      	bne.n	8005522 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800546a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	d020      	beq.n	80054bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547e:	4a6a      	ldr	r2, [pc, #424]	; (8005628 <I2C_ITError+0x25c>)
 8005480:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	4618      	mov	r0, r3
 8005488:	f7fd fd34 	bl	8002ef4 <HAL_DMA_Abort_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8089 	beq.w	80055a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0201 	bic.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054b6:	4610      	mov	r0, r2
 80054b8:	4798      	blx	r3
 80054ba:	e074      	b.n	80055a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	4a59      	ldr	r2, [pc, #356]	; (8005628 <I2C_ITError+0x25c>)
 80054c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fd fd13 	bl	8002ef4 <HAL_DMA_Abort_IT>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d068      	beq.n	80055a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d10b      	bne.n	80054fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800551c:	4610      	mov	r0, r2
 800551e:	4798      	blx	r3
 8005520:	e041      	b.n	80055a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b60      	cmp	r3, #96	; 0x60
 800552c:	d125      	bne.n	800557a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b40      	cmp	r3, #64	; 0x40
 8005548:	d10b      	bne.n	8005562 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fe ff7f 	bl	8004476 <HAL_I2C_AbortCpltCallback>
 8005578:	e015      	b.n	80055a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d10b      	bne.n	80055a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fe ff5e 	bl	8004462 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10e      	bne.n	80055d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d113      	bne.n	8005620 <I2C_ITError+0x254>
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b28      	cmp	r3, #40	; 0x28
 80055fc:	d110      	bne.n	8005620 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <I2C_ITError+0x260>)
 8005602:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fe ff03 	bl	8004426 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	08005631 	.word	0x08005631
 800562c:	ffff0000 	.word	0xffff0000

08005630 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005648:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800564a:	4b4b      	ldr	r3, [pc, #300]	; (8005778 <I2C_DMAAbort+0x148>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	08db      	lsrs	r3, r3, #3
 8005650:	4a4a      	ldr	r2, [pc, #296]	; (800577c <I2C_DMAAbort+0x14c>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0a1a      	lsrs	r2, r3, #8
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	00da      	lsls	r2, r3, #3
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f043 0220 	orr.w	r2, r3, #32
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005676:	e00a      	b.n	800568e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3b01      	subs	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568c:	d0ea      	beq.n	8005664 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	2200      	movs	r2, #0
 800569c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	2200      	movs	r2, #0
 80056ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2200      	movs	r2, #0
 80056c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d0:	2200      	movs	r2, #0
 80056d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	2200      	movs	r2, #0
 80056e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0201 	bic.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b60      	cmp	r3, #96	; 0x60
 80056fe:	d10e      	bne.n	800571e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2200      	movs	r2, #0
 8005714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005716:	6978      	ldr	r0, [r7, #20]
 8005718:	f7fe fead 	bl	8004476 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800571c:	e027      	b.n	800576e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005724:	2b28      	cmp	r3, #40	; 0x28
 8005726:	d117      	bne.n	8005758 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005746:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2228      	movs	r2, #40	; 0x28
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005756:	e007      	b.n	8005768 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005768:	6978      	ldr	r0, [r7, #20]
 800576a:	f7fe fe7a 	bl	8004462 <HAL_I2C_ErrorCallback>
}
 800576e:	bf00      	nop
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000000 	.word	0x20000000
 800577c:	14f8b589 	.word	0x14f8b589

08005780 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800578c:	4b13      	ldr	r3, [pc, #76]	; (80057dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	08db      	lsrs	r3, r3, #3
 8005792:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005794:	fba2 2303 	umull	r2, r3, r2, r3
 8005798:	0a1a      	lsrs	r2, r3, #8
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3b01      	subs	r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d107      	bne.n	80057be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e008      	b.n	80057d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057cc:	d0e9      	beq.n	80057a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000000 	.word	0x20000000
 80057e0:	14f8b589 	.word	0x14f8b589

080057e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057f4:	d103      	bne.n	80057fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80057fc:	e007      	b.n	800580e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005806:	d102      	bne.n	800580e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2208      	movs	r2, #8
 800580c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e316      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b0f      	cmp	r3, #15
 8005834:	d903      	bls.n	800583e <HAL_RCC_OscConfig+0x22>
 8005836:	21e8      	movs	r1, #232	; 0xe8
 8005838:	48a3      	ldr	r0, [pc, #652]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800583a:	f7fc f8fb 	bl	8001a34 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8088 	beq.w	800595c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <HAL_RCC_OscConfig+0x54>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585c:	d008      	beq.n	8005870 <HAL_RCC_OscConfig+0x54>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005866:	d003      	beq.n	8005870 <HAL_RCC_OscConfig+0x54>
 8005868:	21ed      	movs	r1, #237	; 0xed
 800586a:	4897      	ldr	r0, [pc, #604]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800586c:	f7fc f8e2 	bl	8001a34 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005870:	4b96      	ldr	r3, [pc, #600]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 030c 	and.w	r3, r3, #12
 8005878:	2b04      	cmp	r3, #4
 800587a:	d00c      	beq.n	8005896 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800587c:	4b93      	ldr	r3, [pc, #588]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005884:	2b08      	cmp	r3, #8
 8005886:	d112      	bne.n	80058ae <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005888:	4b90      	ldr	r3, [pc, #576]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005894:	d10b      	bne.n	80058ae <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005896:	4b8d      	ldr	r3, [pc, #564]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d05b      	beq.n	800595a <HAL_RCC_OscConfig+0x13e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d157      	bne.n	800595a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e2d6      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b6:	d106      	bne.n	80058c6 <HAL_RCC_OscConfig+0xaa>
 80058b8:	4b84      	ldr	r3, [pc, #528]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a83      	ldr	r2, [pc, #524]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80058be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	e01d      	b.n	8005902 <HAL_RCC_OscConfig+0xe6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058ce:	d10c      	bne.n	80058ea <HAL_RCC_OscConfig+0xce>
 80058d0:	4b7e      	ldr	r3, [pc, #504]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a7d      	ldr	r2, [pc, #500]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80058d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b7b      	ldr	r3, [pc, #492]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a7a      	ldr	r2, [pc, #488]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80058e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	e00b      	b.n	8005902 <HAL_RCC_OscConfig+0xe6>
 80058ea:	4b78      	ldr	r3, [pc, #480]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a77      	ldr	r2, [pc, #476]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80058f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	4b75      	ldr	r3, [pc, #468]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a74      	ldr	r2, [pc, #464]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80058fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005900:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d013      	beq.n	8005932 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590a:	f7fc fb7b 	bl	8002004 <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005912:	f7fc fb77 	bl	8002004 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b64      	cmp	r3, #100	; 0x64
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e29b      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005924:	4b69      	ldr	r3, [pc, #420]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0f0      	beq.n	8005912 <HAL_RCC_OscConfig+0xf6>
 8005930:	e014      	b.n	800595c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005932:	f7fc fb67 	bl	8002004 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800593a:	f7fc fb63 	bl	8002004 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b64      	cmp	r3, #100	; 0x64
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e287      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800594c:	4b5f      	ldr	r3, [pc, #380]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCC_OscConfig+0x11e>
 8005958:	e000      	b.n	800595c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d079      	beq.n	8005a5c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <HAL_RCC_OscConfig+0x166>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d004      	beq.n	8005982 <HAL_RCC_OscConfig+0x166>
 8005978:	f240 111f 	movw	r1, #287	; 0x11f
 800597c:	4852      	ldr	r0, [pc, #328]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 800597e:	f7fc f859 	bl	8001a34 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b1f      	cmp	r3, #31
 8005988:	d904      	bls.n	8005994 <HAL_RCC_OscConfig+0x178>
 800598a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800598e:	484e      	ldr	r0, [pc, #312]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005990:	f7fc f850 	bl	8001a34 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005994:	4b4d      	ldr	r3, [pc, #308]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 030c 	and.w	r3, r3, #12
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059a0:	4b4a      	ldr	r3, [pc, #296]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d11c      	bne.n	80059e6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ac:	4b47      	ldr	r3, [pc, #284]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d116      	bne.n	80059e6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059b8:	4b44      	ldr	r3, [pc, #272]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <HAL_RCC_OscConfig+0x1b4>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e245      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d0:	4b3e      	ldr	r3, [pc, #248]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	493b      	ldr	r1, [pc, #236]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059e4:	e03a      	b.n	8005a5c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d020      	beq.n	8005a30 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059ee:	4b38      	ldr	r3, [pc, #224]	; (8005ad0 <HAL_RCC_OscConfig+0x2b4>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fc fb06 	bl	8002004 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059fc:	f7fc fb02 	bl	8002004 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e226      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0e:	4b2f      	ldr	r3, [pc, #188]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a1a:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4928      	ldr	r1, [pc, #160]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]
 8005a2e:	e015      	b.n	8005a5c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a30:	4b27      	ldr	r3, [pc, #156]	; (8005ad0 <HAL_RCC_OscConfig+0x2b4>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fc fae5 	bl	8002004 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a3e:	f7fc fae1 	bl	8002004 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e205      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a50:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f0      	bne.n	8005a3e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d046      	beq.n	8005af6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_RCC_OscConfig+0x266>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d004      	beq.n	8005a82 <HAL_RCC_OscConfig+0x266>
 8005a78:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8005a7c:	4812      	ldr	r0, [pc, #72]	; (8005ac8 <HAL_RCC_OscConfig+0x2ac>)
 8005a7e:	f7fb ffd9 	bl	8001a34 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d016      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <HAL_RCC_OscConfig+0x2b8>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a90:	f7fc fab8 	bl	8002004 <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a98:	f7fc fab4 	bl	8002004 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e1d8      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aaa:	4b08      	ldr	r3, [pc, #32]	; (8005acc <HAL_RCC_OscConfig+0x2b0>)
 8005aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0f0      	beq.n	8005a98 <HAL_RCC_OscConfig+0x27c>
 8005ab6:	e01e      	b.n	8005af6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ab8:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <HAL_RCC_OscConfig+0x2b8>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005abe:	f7fc faa1 	bl	8002004 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac4:	e011      	b.n	8005aea <HAL_RCC_OscConfig+0x2ce>
 8005ac6:	bf00      	nop
 8005ac8:	0800e324 	.word	0x0800e324
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	42470000 	.word	0x42470000
 8005ad4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ad8:	f7fc fa94 	bl	8002004 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e1b8      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aea:	4b97      	ldr	r3, [pc, #604]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f0      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80a8 	beq.w	8005c54 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b04:	2300      	movs	r3, #0
 8005b06:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00c      	beq.n	8005b2a <HAL_RCC_OscConfig+0x30e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d008      	beq.n	8005b2a <HAL_RCC_OscConfig+0x30e>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2b05      	cmp	r3, #5
 8005b1e:	d004      	beq.n	8005b2a <HAL_RCC_OscConfig+0x30e>
 8005b20:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005b24:	4889      	ldr	r0, [pc, #548]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005b26:	f7fb ff85 	bl	8001a34 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b2a:	4b87      	ldr	r3, [pc, #540]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	4b83      	ldr	r3, [pc, #524]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	4a82      	ldr	r2, [pc, #520]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b44:	6413      	str	r3, [r2, #64]	; 0x40
 8005b46:	4b80      	ldr	r3, [pc, #512]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	60bb      	str	r3, [r7, #8]
 8005b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b56:	4b7e      	ldr	r3, [pc, #504]	; (8005d50 <HAL_RCC_OscConfig+0x534>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d118      	bne.n	8005b94 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b62:	4b7b      	ldr	r3, [pc, #492]	; (8005d50 <HAL_RCC_OscConfig+0x534>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a7a      	ldr	r2, [pc, #488]	; (8005d50 <HAL_RCC_OscConfig+0x534>)
 8005b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b6e:	f7fc fa49 	bl	8002004 <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b76:	f7fc fa45 	bl	8002004 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e169      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b88:	4b71      	ldr	r3, [pc, #452]	; (8005d50 <HAL_RCC_OscConfig+0x534>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f0      	beq.n	8005b76 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d106      	bne.n	8005baa <HAL_RCC_OscConfig+0x38e>
 8005b9c:	4b6a      	ldr	r3, [pc, #424]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba0:	4a69      	ldr	r2, [pc, #420]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005ba2:	f043 0301 	orr.w	r3, r3, #1
 8005ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba8:	e01c      	b.n	8005be4 <HAL_RCC_OscConfig+0x3c8>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCC_OscConfig+0x3b0>
 8005bb2:	4b65      	ldr	r3, [pc, #404]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	4a64      	ldr	r2, [pc, #400]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005bb8:	f043 0304 	orr.w	r3, r3, #4
 8005bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005bbe:	4b62      	ldr	r3, [pc, #392]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	4a61      	ldr	r2, [pc, #388]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bca:	e00b      	b.n	8005be4 <HAL_RCC_OscConfig+0x3c8>
 8005bcc:	4b5e      	ldr	r3, [pc, #376]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd0:	4a5d      	ldr	r2, [pc, #372]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd8:	4b5b      	ldr	r3, [pc, #364]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	4a5a      	ldr	r2, [pc, #360]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005bde:	f023 0304 	bic.w	r3, r3, #4
 8005be2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d015      	beq.n	8005c18 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bec:	f7fc fa0a 	bl	8002004 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf2:	e00a      	b.n	8005c0a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bf4:	f7fc fa06 	bl	8002004 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e128      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c0a:	4b4f      	ldr	r3, [pc, #316]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0ee      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x3d8>
 8005c16:	e014      	b.n	8005c42 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c18:	f7fc f9f4 	bl	8002004 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c20:	f7fc f9f0 	bl	8002004 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e112      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c36:	4b44      	ldr	r3, [pc, #272]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1ee      	bne.n	8005c20 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d105      	bne.n	8005c54 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c48:	4b3f      	ldr	r3, [pc, #252]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	4a3e      	ldr	r2, [pc, #248]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00c      	beq.n	8005c76 <HAL_RCC_OscConfig+0x45a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d008      	beq.n	8005c76 <HAL_RCC_OscConfig+0x45a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d004      	beq.n	8005c76 <HAL_RCC_OscConfig+0x45a>
 8005c6c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005c70:	4836      	ldr	r0, [pc, #216]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005c72:	f7fb fedf 	bl	8001a34 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 80ed 	beq.w	8005e5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c80:	4b31      	ldr	r3, [pc, #196]	; (8005d48 <HAL_RCC_OscConfig+0x52c>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 030c 	and.w	r3, r3, #12
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	f000 80ae 	beq.w	8005dea <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	f040 8092 	bne.w	8005dbc <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x498>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca8:	d004      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x498>
 8005caa:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8005cae:	4827      	ldr	r0, [pc, #156]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cb0:	f7fb fec0 	bl	8001a34 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	2b3f      	cmp	r3, #63	; 0x3f
 8005cba:	d904      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x4aa>
 8005cbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cc0:	4822      	ldr	r0, [pc, #136]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cc2:	f7fb feb7 	bl	8001a34 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b31      	cmp	r3, #49	; 0x31
 8005ccc:	d904      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x4bc>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005cd6:	d904      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x4c6>
 8005cd8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8005cdc:	481b      	ldr	r0, [pc, #108]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005cde:	f7fb fea9 	bl	8001a34 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d010      	beq.n	8005d0c <HAL_RCC_OscConfig+0x4f0>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d00c      	beq.n	8005d0c <HAL_RCC_OscConfig+0x4f0>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	2b06      	cmp	r3, #6
 8005cf8:	d008      	beq.n	8005d0c <HAL_RCC_OscConfig+0x4f0>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	2b08      	cmp	r3, #8
 8005d00:	d004      	beq.n	8005d0c <HAL_RCC_OscConfig+0x4f0>
 8005d02:	f240 11db 	movw	r1, #475	; 0x1db
 8005d06:	4811      	ldr	r0, [pc, #68]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005d08:	f7fb fe94 	bl	8001a34 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d903      	bls.n	8005d1c <HAL_RCC_OscConfig+0x500>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	2b0f      	cmp	r3, #15
 8005d1a:	d904      	bls.n	8005d26 <HAL_RCC_OscConfig+0x50a>
 8005d1c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8005d20:	480a      	ldr	r0, [pc, #40]	; (8005d4c <HAL_RCC_OscConfig+0x530>)
 8005d22:	f7fb fe87 	bl	8001a34 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <HAL_RCC_OscConfig+0x538>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2c:	f7fc f96a 	bl	8002004 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d32:	e011      	b.n	8005d58 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d34:	f7fc f966 	bl	8002004 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d90a      	bls.n	8005d58 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e08a      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
 8005d46:	bf00      	nop
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	0800e324 	.word	0x0800e324
 8005d50:	40007000 	.word	0x40007000
 8005d54:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d58:	4b42      	ldr	r3, [pc, #264]	; (8005e64 <HAL_RCC_OscConfig+0x648>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e7      	bne.n	8005d34 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	019b      	lsls	r3, r3, #6
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	041b      	lsls	r3, r3, #16
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d86:	061b      	lsls	r3, r3, #24
 8005d88:	4936      	ldr	r1, [pc, #216]	; (8005e64 <HAL_RCC_OscConfig+0x648>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d8e:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <HAL_RCC_OscConfig+0x64c>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d94:	f7fc f936 	bl	8002004 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fc f932 	bl	8002004 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e056      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dae:	4b2d      	ldr	r3, [pc, #180]	; (8005e64 <HAL_RCC_OscConfig+0x648>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x580>
 8005dba:	e04e      	b.n	8005e5a <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dbc:	4b2a      	ldr	r3, [pc, #168]	; (8005e68 <HAL_RCC_OscConfig+0x64c>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc2:	f7fc f91f 	bl	8002004 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dca:	f7fc f91b 	bl	8002004 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e03f      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ddc:	4b21      	ldr	r3, [pc, #132]	; (8005e64 <HAL_RCC_OscConfig+0x648>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f0      	bne.n	8005dca <HAL_RCC_OscConfig+0x5ae>
 8005de8:	e037      	b.n	8005e5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e032      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005df6:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <HAL_RCC_OscConfig+0x648>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d028      	beq.n	8005e56 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d121      	bne.n	8005e56 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d11a      	bne.n	8005e56 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e26:	4013      	ands	r3, r2
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d111      	bne.n	8005e56 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d001      	beq.n	8005e5a <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40023800 	.word	0x40023800
 8005e68:	42470060 	.word	0x42470060

08005e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e16f      	b.n	8006160 <HAL_RCC_ClockConfig+0x2f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x24>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b0f      	cmp	r3, #15
 8005e8e:	d904      	bls.n	8005e9a <HAL_RCC_ClockConfig+0x2e>
 8005e90:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005e94:	487b      	ldr	r0, [pc, #492]	; (8006084 <HAL_RCC_ClockConfig+0x218>)
 8005e96:	f7fb fdcd 	bl	8001a34 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d019      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x68>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d016      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x68>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d013      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x68>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d010      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x68>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d00d      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x68>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d00a      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x68>
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b06      	cmp	r3, #6
 8005ec2:	d007      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x68>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b07      	cmp	r3, #7
 8005ec8:	d004      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x68>
 8005eca:	f240 215d 	movw	r1, #605	; 0x25d
 8005ece:	486d      	ldr	r0, [pc, #436]	; (8006084 <HAL_RCC_ClockConfig+0x218>)
 8005ed0:	f7fb fdb0 	bl	8001a34 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed4:	4b6c      	ldr	r3, [pc, #432]	; (8006088 <HAL_RCC_ClockConfig+0x21c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0307 	and.w	r3, r3, #7
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d90c      	bls.n	8005efc <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee2:	4b69      	ldr	r3, [pc, #420]	; (8006088 <HAL_RCC_ClockConfig+0x21c>)
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eea:	4b67      	ldr	r3, [pc, #412]	; (8006088 <HAL_RCC_ClockConfig+0x21c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d001      	beq.n	8005efc <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e131      	b.n	8006160 <HAL_RCC_ClockConfig+0x2f4>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d049      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f14:	4b5d      	ldr	r3, [pc, #372]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4a5c      	ldr	r2, [pc, #368]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 8005f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f2c:	4b57      	ldr	r3, [pc, #348]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4a56      	ldr	r2, [pc, #344]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 8005f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d024      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x11e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	d020      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x11e>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b90      	cmp	r3, #144	; 0x90
 8005f4e:	d01c      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x11e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2ba0      	cmp	r3, #160	; 0xa0
 8005f56:	d018      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x11e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2bb0      	cmp	r3, #176	; 0xb0
 8005f5e:	d014      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x11e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	2bc0      	cmp	r3, #192	; 0xc0
 8005f66:	d010      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x11e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2bd0      	cmp	r3, #208	; 0xd0
 8005f6e:	d00c      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x11e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2be0      	cmp	r3, #224	; 0xe0
 8005f76:	d008      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x11e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2bf0      	cmp	r3, #240	; 0xf0
 8005f7e:	d004      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x11e>
 8005f80:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005f84:	483f      	ldr	r0, [pc, #252]	; (8006084 <HAL_RCC_ClockConfig+0x218>)
 8005f86:	f7fb fd55 	bl	8001a34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f8a:	4b40      	ldr	r3, [pc, #256]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	493d      	ldr	r1, [pc, #244]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d059      	beq.n	800605c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d010      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x166>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d00c      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x166>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d008      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x166>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d004      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x166>
 8005fc8:	f240 2187 	movw	r1, #647	; 0x287
 8005fcc:	482d      	ldr	r0, [pc, #180]	; (8006084 <HAL_RCC_ClockConfig+0x218>)
 8005fce:	f7fb fd31 	bl	8001a34 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d107      	bne.n	8005fea <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fda:	4b2c      	ldr	r3, [pc, #176]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d119      	bne.n	800601a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e0ba      	b.n	8006160 <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d003      	beq.n	8005ffa <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d107      	bne.n	800600a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ffa:	4b24      	ldr	r3, [pc, #144]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e0aa      	b.n	8006160 <HAL_RCC_ClockConfig+0x2f4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800600a:	4b20      	ldr	r3, [pc, #128]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0a2      	b.n	8006160 <HAL_RCC_ClockConfig+0x2f4>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800601a:	4b1c      	ldr	r3, [pc, #112]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f023 0203 	bic.w	r2, r3, #3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4919      	ldr	r1, [pc, #100]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 8006028:	4313      	orrs	r3, r2
 800602a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800602c:	f7fb ffea 	bl	8002004 <HAL_GetTick>
 8006030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006032:	e00a      	b.n	800604a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006034:	f7fb ffe6 	bl	8002004 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006042:	4293      	cmp	r3, r2
 8006044:	d901      	bls.n	800604a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e08a      	b.n	8006160 <HAL_RCC_ClockConfig+0x2f4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604a:	4b10      	ldr	r3, [pc, #64]	; (800608c <HAL_RCC_ClockConfig+0x220>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 020c 	and.w	r2, r3, #12
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	429a      	cmp	r2, r3
 800605a:	d1eb      	bne.n	8006034 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <HAL_RCC_ClockConfig+0x21c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d212      	bcs.n	8006090 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <HAL_RCC_ClockConfig+0x21c>)
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006072:	4b05      	ldr	r3, [pc, #20]	; (8006088 <HAL_RCC_ClockConfig+0x21c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d007      	beq.n	8006090 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e06d      	b.n	8006160 <HAL_RCC_ClockConfig+0x2f4>
 8006084:	0800e324 	.word	0x0800e324
 8006088:	40023c00 	.word	0x40023c00
 800608c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b00      	cmp	r3, #0
 800609a:	d025      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d018      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x26a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ac:	d013      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x26a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060b6:	d00e      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x26a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80060c0:	d009      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x26a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80060ca:	d004      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x26a>
 80060cc:	f240 21c5 	movw	r1, #709	; 0x2c5
 80060d0:	4825      	ldr	r0, [pc, #148]	; (8006168 <HAL_RCC_ClockConfig+0x2fc>)
 80060d2:	f7fb fcaf 	bl	8001a34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060d6:	4b25      	ldr	r3, [pc, #148]	; (800616c <HAL_RCC_ClockConfig+0x300>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	4922      	ldr	r1, [pc, #136]	; (800616c <HAL_RCC_ClockConfig+0x300>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d026      	beq.n	8006142 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d018      	beq.n	800612e <HAL_RCC_ClockConfig+0x2c2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006104:	d013      	beq.n	800612e <HAL_RCC_ClockConfig+0x2c2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800610e:	d00e      	beq.n	800612e <HAL_RCC_ClockConfig+0x2c2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006118:	d009      	beq.n	800612e <HAL_RCC_ClockConfig+0x2c2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8006122:	d004      	beq.n	800612e <HAL_RCC_ClockConfig+0x2c2>
 8006124:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8006128:	480f      	ldr	r0, [pc, #60]	; (8006168 <HAL_RCC_ClockConfig+0x2fc>)
 800612a:	f7fb fc83 	bl	8001a34 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <HAL_RCC_ClockConfig+0x300>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	490b      	ldr	r1, [pc, #44]	; (800616c <HAL_RCC_ClockConfig+0x300>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006142:	f000 f819 	bl	8006178 <HAL_RCC_GetSysClockFreq>
 8006146:	4602      	mov	r2, r0
 8006148:	4b08      	ldr	r3, [pc, #32]	; (800616c <HAL_RCC_ClockConfig+0x300>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	4907      	ldr	r1, [pc, #28]	; (8006170 <HAL_RCC_ClockConfig+0x304>)
 8006154:	5ccb      	ldrb	r3, [r1, r3]
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	4a06      	ldr	r2, [pc, #24]	; (8006174 <HAL_RCC_ClockConfig+0x308>)
 800615c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  // HAL_InitTick (uwTickPrio);

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	0800e324 	.word	0x0800e324
 800616c:	40023800 	.word	0x40023800
 8006170:	0800e448 	.word	0x0800e448
 8006174:	20000000 	.word	0x20000000

08006178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006178:	b5b0      	push	{r4, r5, r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800617e:	2100      	movs	r1, #0
 8006180:	6079      	str	r1, [r7, #4]
 8006182:	2100      	movs	r1, #0
 8006184:	60f9      	str	r1, [r7, #12]
 8006186:	2100      	movs	r1, #0
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800618a:	2100      	movs	r1, #0
 800618c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800618e:	4952      	ldr	r1, [pc, #328]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006190:	6889      	ldr	r1, [r1, #8]
 8006192:	f001 010c 	and.w	r1, r1, #12
 8006196:	2908      	cmp	r1, #8
 8006198:	d00d      	beq.n	80061b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800619a:	2908      	cmp	r1, #8
 800619c:	f200 8094 	bhi.w	80062c8 <HAL_RCC_GetSysClockFreq+0x150>
 80061a0:	2900      	cmp	r1, #0
 80061a2:	d002      	beq.n	80061aa <HAL_RCC_GetSysClockFreq+0x32>
 80061a4:	2904      	cmp	r1, #4
 80061a6:	d003      	beq.n	80061b0 <HAL_RCC_GetSysClockFreq+0x38>
 80061a8:	e08e      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061aa:	4b4c      	ldr	r3, [pc, #304]	; (80062dc <HAL_RCC_GetSysClockFreq+0x164>)
 80061ac:	60bb      	str	r3, [r7, #8]
       break;
 80061ae:	e08e      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061b0:	4b4b      	ldr	r3, [pc, #300]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80061b2:	60bb      	str	r3, [r7, #8]
      break;
 80061b4:	e08b      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061b6:	4948      	ldr	r1, [pc, #288]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80061b8:	6849      	ldr	r1, [r1, #4]
 80061ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80061be:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061c0:	4945      	ldr	r1, [pc, #276]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80061c2:	6849      	ldr	r1, [r1, #4]
 80061c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80061c8:	2900      	cmp	r1, #0
 80061ca:	d024      	beq.n	8006216 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061cc:	4942      	ldr	r1, [pc, #264]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80061ce:	6849      	ldr	r1, [r1, #4]
 80061d0:	0989      	lsrs	r1, r1, #6
 80061d2:	4608      	mov	r0, r1
 80061d4:	f04f 0100 	mov.w	r1, #0
 80061d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80061dc:	f04f 0500 	mov.w	r5, #0
 80061e0:	ea00 0204 	and.w	r2, r0, r4
 80061e4:	ea01 0305 	and.w	r3, r1, r5
 80061e8:	493d      	ldr	r1, [pc, #244]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80061ea:	fb01 f003 	mul.w	r0, r1, r3
 80061ee:	2100      	movs	r1, #0
 80061f0:	fb01 f102 	mul.w	r1, r1, r2
 80061f4:	1844      	adds	r4, r0, r1
 80061f6:	493a      	ldr	r1, [pc, #232]	; (80062e0 <HAL_RCC_GetSysClockFreq+0x168>)
 80061f8:	fba2 0101 	umull	r0, r1, r2, r1
 80061fc:	1863      	adds	r3, r4, r1
 80061fe:	4619      	mov	r1, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	461a      	mov	r2, r3
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	f7fa f83a 	bl	8000280 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4613      	mov	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e04a      	b.n	80062ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006216:	4b30      	ldr	r3, [pc, #192]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	099b      	lsrs	r3, r3, #6
 800621c:	461a      	mov	r2, r3
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006226:	f04f 0100 	mov.w	r1, #0
 800622a:	ea02 0400 	and.w	r4, r2, r0
 800622e:	ea03 0501 	and.w	r5, r3, r1
 8006232:	4620      	mov	r0, r4
 8006234:	4629      	mov	r1, r5
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	f04f 0300 	mov.w	r3, #0
 800623e:	014b      	lsls	r3, r1, #5
 8006240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006244:	0142      	lsls	r2, r0, #5
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	1b00      	subs	r0, r0, r4
 800624c:	eb61 0105 	sbc.w	r1, r1, r5
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	018b      	lsls	r3, r1, #6
 800625a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800625e:	0182      	lsls	r2, r0, #6
 8006260:	1a12      	subs	r2, r2, r0
 8006262:	eb63 0301 	sbc.w	r3, r3, r1
 8006266:	f04f 0000 	mov.w	r0, #0
 800626a:	f04f 0100 	mov.w	r1, #0
 800626e:	00d9      	lsls	r1, r3, #3
 8006270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006274:	00d0      	lsls	r0, r2, #3
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	1912      	adds	r2, r2, r4
 800627c:	eb45 0303 	adc.w	r3, r5, r3
 8006280:	f04f 0000 	mov.w	r0, #0
 8006284:	f04f 0100 	mov.w	r1, #0
 8006288:	0299      	lsls	r1, r3, #10
 800628a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800628e:	0290      	lsls	r0, r2, #10
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4610      	mov	r0, r2
 8006296:	4619      	mov	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	461a      	mov	r2, r3
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	f7f9 ffee 	bl	8000280 <__aeabi_uldivmod>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4613      	mov	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062ac:	4b0a      	ldr	r3, [pc, #40]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	3301      	adds	r3, #1
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c4:	60bb      	str	r3, [r7, #8]
      break;
 80062c6:	e002      	b.n	80062ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062c8:	4b04      	ldr	r3, [pc, #16]	; (80062dc <HAL_RCC_GetSysClockFreq+0x164>)
 80062ca:	60bb      	str	r3, [r7, #8]
      break;
 80062cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062ce:	68bb      	ldr	r3, [r7, #8]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bdb0      	pop	{r4, r5, r7, pc}
 80062d8:	40023800 	.word	0x40023800
 80062dc:	00f42400 	.word	0x00f42400
 80062e0:	017d7840 	.word	0x017d7840

080062e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e8:	4b03      	ldr	r3, [pc, #12]	; (80062f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80062ea:	681b      	ldr	r3, [r3, #0]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000000 	.word	0x20000000

080062fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006300:	f7ff fff0 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 8006304:	4602      	mov	r2, r0
 8006306:	4b05      	ldr	r3, [pc, #20]	; (800631c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	0a9b      	lsrs	r3, r3, #10
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	4903      	ldr	r1, [pc, #12]	; (8006320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006312:	5ccb      	ldrb	r3, [r1, r3]
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006318:	4618      	mov	r0, r3
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40023800 	.word	0x40023800
 8006320:	0800e458 	.word	0x0800e458

08006324 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	220f      	movs	r2, #15
 8006332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006334:	4b12      	ldr	r3, [pc, #72]	; (8006380 <HAL_RCC_GetClockConfig+0x5c>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0203 	and.w	r2, r3, #3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006340:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <HAL_RCC_GetClockConfig+0x5c>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800634c:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <HAL_RCC_GetClockConfig+0x5c>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006358:	4b09      	ldr	r3, [pc, #36]	; (8006380 <HAL_RCC_GetClockConfig+0x5c>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	08db      	lsrs	r3, r3, #3
 800635e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006366:	4b07      	ldr	r3, [pc, #28]	; (8006384 <HAL_RCC_GetClockConfig+0x60>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0207 	and.w	r2, r3, #7
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	601a      	str	r2, [r3, #0]
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40023800 	.word	0x40023800
 8006384:	40023c00 	.word	0x40023c00

08006388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e18c      	b.n	80066b4 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a75      	ldr	r2, [pc, #468]	; (8006574 <HAL_SPI_Init+0x1ec>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d018      	beq.n	80063d6 <HAL_SPI_Init+0x4e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a73      	ldr	r2, [pc, #460]	; (8006578 <HAL_SPI_Init+0x1f0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <HAL_SPI_Init+0x4e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a72      	ldr	r2, [pc, #456]	; (800657c <HAL_SPI_Init+0x1f4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00e      	beq.n	80063d6 <HAL_SPI_Init+0x4e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a70      	ldr	r2, [pc, #448]	; (8006580 <HAL_SPI_Init+0x1f8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d009      	beq.n	80063d6 <HAL_SPI_Init+0x4e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6f      	ldr	r2, [pc, #444]	; (8006584 <HAL_SPI_Init+0x1fc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d004      	beq.n	80063d6 <HAL_SPI_Init+0x4e>
 80063cc:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80063d0:	486d      	ldr	r0, [pc, #436]	; (8006588 <HAL_SPI_Init+0x200>)
 80063d2:	f7fb fb2f 	bl	8001a34 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d009      	beq.n	80063f2 <HAL_SPI_Init+0x6a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063e6:	d004      	beq.n	80063f2 <HAL_SPI_Init+0x6a>
 80063e8:	f240 1143 	movw	r1, #323	; 0x143
 80063ec:	4866      	ldr	r0, [pc, #408]	; (8006588 <HAL_SPI_Init+0x200>)
 80063ee:	f7fb fb21 	bl	8001a34 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00e      	beq.n	8006418 <HAL_SPI_Init+0x90>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006402:	d009      	beq.n	8006418 <HAL_SPI_Init+0x90>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800640c:	d004      	beq.n	8006418 <HAL_SPI_Init+0x90>
 800640e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006412:	485d      	ldr	r0, [pc, #372]	; (8006588 <HAL_SPI_Init+0x200>)
 8006414:	f7fb fb0e 	bl	8001a34 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006420:	d008      	beq.n	8006434 <HAL_SPI_Init+0xac>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d004      	beq.n	8006434 <HAL_SPI_Init+0xac>
 800642a:	f240 1145 	movw	r1, #325	; 0x145
 800642e:	4856      	ldr	r0, [pc, #344]	; (8006588 <HAL_SPI_Init+0x200>)
 8006430:	f7fb fb00 	bl	8001a34 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643c:	d00d      	beq.n	800645a <HAL_SPI_Init+0xd2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <HAL_SPI_Init+0xd2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800644e:	d004      	beq.n	800645a <HAL_SPI_Init+0xd2>
 8006450:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006454:	484c      	ldr	r0, [pc, #304]	; (8006588 <HAL_SPI_Init+0x200>)
 8006456:	f7fb faed 	bl	8001a34 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d020      	beq.n	80064a4 <HAL_SPI_Init+0x11c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	2b08      	cmp	r3, #8
 8006468:	d01c      	beq.n	80064a4 <HAL_SPI_Init+0x11c>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	2b10      	cmp	r3, #16
 8006470:	d018      	beq.n	80064a4 <HAL_SPI_Init+0x11c>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	2b18      	cmp	r3, #24
 8006478:	d014      	beq.n	80064a4 <HAL_SPI_Init+0x11c>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	2b20      	cmp	r3, #32
 8006480:	d010      	beq.n	80064a4 <HAL_SPI_Init+0x11c>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	2b28      	cmp	r3, #40	; 0x28
 8006488:	d00c      	beq.n	80064a4 <HAL_SPI_Init+0x11c>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	2b30      	cmp	r3, #48	; 0x30
 8006490:	d008      	beq.n	80064a4 <HAL_SPI_Init+0x11c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	2b38      	cmp	r3, #56	; 0x38
 8006498:	d004      	beq.n	80064a4 <HAL_SPI_Init+0x11c>
 800649a:	f240 1147 	movw	r1, #327	; 0x147
 800649e:	483a      	ldr	r0, [pc, #232]	; (8006588 <HAL_SPI_Init+0x200>)
 80064a0:	f7fb fac8 	bl	8001a34 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d008      	beq.n	80064be <HAL_SPI_Init+0x136>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	2b80      	cmp	r3, #128	; 0x80
 80064b2:	d004      	beq.n	80064be <HAL_SPI_Init+0x136>
 80064b4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80064b8:	4833      	ldr	r0, [pc, #204]	; (8006588 <HAL_SPI_Init+0x200>)
 80064ba:	f7fb fabb 	bl	8001a34 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <HAL_SPI_Init+0x150>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	2b10      	cmp	r3, #16
 80064cc:	d004      	beq.n	80064d8 <HAL_SPI_Init+0x150>
 80064ce:	f240 1149 	movw	r1, #329	; 0x149
 80064d2:	482d      	ldr	r0, [pc, #180]	; (8006588 <HAL_SPI_Init+0x200>)
 80064d4:	f7fb faae 	bl	8001a34 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d155      	bne.n	800658c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_SPI_Init+0x172>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d004      	beq.n	80064fa <HAL_SPI_Init+0x172>
 80064f0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80064f4:	4824      	ldr	r0, [pc, #144]	; (8006588 <HAL_SPI_Init+0x200>)
 80064f6:	f7fb fa9d 	bl	8001a34 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <HAL_SPI_Init+0x18c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d004      	beq.n	8006514 <HAL_SPI_Init+0x18c>
 800650a:	f240 114d 	movw	r1, #333	; 0x14d
 800650e:	481e      	ldr	r0, [pc, #120]	; (8006588 <HAL_SPI_Init+0x200>)
 8006510:	f7fb fa90 	bl	8001a34 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800651c:	d125      	bne.n	800656a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d05d      	beq.n	80065e2 <HAL_SPI_Init+0x25a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	2b08      	cmp	r3, #8
 800652c:	d059      	beq.n	80065e2 <HAL_SPI_Init+0x25a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	2b10      	cmp	r3, #16
 8006534:	d055      	beq.n	80065e2 <HAL_SPI_Init+0x25a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	2b18      	cmp	r3, #24
 800653c:	d051      	beq.n	80065e2 <HAL_SPI_Init+0x25a>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	2b20      	cmp	r3, #32
 8006544:	d04d      	beq.n	80065e2 <HAL_SPI_Init+0x25a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	2b28      	cmp	r3, #40	; 0x28
 800654c:	d049      	beq.n	80065e2 <HAL_SPI_Init+0x25a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	2b30      	cmp	r3, #48	; 0x30
 8006554:	d045      	beq.n	80065e2 <HAL_SPI_Init+0x25a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	2b38      	cmp	r3, #56	; 0x38
 800655c:	d041      	beq.n	80065e2 <HAL_SPI_Init+0x25a>
 800655e:	f240 1151 	movw	r1, #337	; 0x151
 8006562:	4809      	ldr	r0, [pc, #36]	; (8006588 <HAL_SPI_Init+0x200>)
 8006564:	f7fb fa66 	bl	8001a34 <assert_failed>
 8006568:	e03b      	b.n	80065e2 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	61da      	str	r2, [r3, #28]
 8006570:	e037      	b.n	80065e2 <HAL_SPI_Init+0x25a>
 8006572:	bf00      	nop
 8006574:	40013000 	.word	0x40013000
 8006578:	40003800 	.word	0x40003800
 800657c:	40003c00 	.word	0x40003c00
 8006580:	40013400 	.word	0x40013400
 8006584:	40015000 	.word	0x40015000
 8006588:	0800e35c 	.word	0x0800e35c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d020      	beq.n	80065d6 <HAL_SPI_Init+0x24e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d01c      	beq.n	80065d6 <HAL_SPI_Init+0x24e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d018      	beq.n	80065d6 <HAL_SPI_Init+0x24e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	69db      	ldr	r3, [r3, #28]
 80065a8:	2b18      	cmp	r3, #24
 80065aa:	d014      	beq.n	80065d6 <HAL_SPI_Init+0x24e>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d010      	beq.n	80065d6 <HAL_SPI_Init+0x24e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	2b28      	cmp	r3, #40	; 0x28
 80065ba:	d00c      	beq.n	80065d6 <HAL_SPI_Init+0x24e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	2b30      	cmp	r3, #48	; 0x30
 80065c2:	d008      	beq.n	80065d6 <HAL_SPI_Init+0x24e>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	2b38      	cmp	r3, #56	; 0x38
 80065ca:	d004      	beq.n	80065d6 <HAL_SPI_Init+0x24e>
 80065cc:	f240 115b 	movw	r1, #347	; 0x15b
 80065d0:	483a      	ldr	r0, [pc, #232]	; (80066bc <HAL_SPI_Init+0x334>)
 80065d2:	f7fb fa2f 	bl	8001a34 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f85f 	bl	80066c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2202      	movs	r2, #2
 8006606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006618:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006666:	ea42 0103 	orr.w	r1, r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	0c1b      	lsrs	r3, r3, #16
 8006680:	f003 0104 	and.w	r1, r3, #4
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0210 	and.w	r2, r3, #16
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69da      	ldr	r2, [r3, #28]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	0800e35c 	.word	0x0800e35c

080066c0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08c      	sub	sp, #48	; 0x30
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066e2:	2301      	movs	r3, #1
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d004      	beq.n	80066fe <HAL_SPI_TransmitReceive+0x2a>
 80066f4:	f240 417e 	movw	r1, #1150	; 0x47e
 80066f8:	4884      	ldr	r0, [pc, #528]	; (800690c <HAL_SPI_TransmitReceive+0x238>)
 80066fa:	f7fb f99b 	bl	8001a34 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_SPI_TransmitReceive+0x38>
 8006708:	2302      	movs	r3, #2
 800670a:	e18d      	b.n	8006a28 <HAL_SPI_TransmitReceive+0x354>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006714:	f7fb fc76 	bl	8002004 <HAL_GetTick>
 8006718:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800672a:	887b      	ldrh	r3, [r7, #2]
 800672c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800672e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006732:	2b01      	cmp	r3, #1
 8006734:	d00f      	beq.n	8006756 <HAL_SPI_TransmitReceive+0x82>
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800673c:	d107      	bne.n	800674e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d103      	bne.n	800674e <HAL_SPI_TransmitReceive+0x7a>
 8006746:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800674a:	2b04      	cmp	r3, #4
 800674c:	d003      	beq.n	8006756 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800674e:	2302      	movs	r3, #2
 8006750:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006754:	e15e      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_SPI_TransmitReceive+0x94>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <HAL_SPI_TransmitReceive+0x94>
 8006762:	887b      	ldrh	r3, [r7, #2]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d103      	bne.n	8006770 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800676e:	e151      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b04      	cmp	r3, #4
 800677a:	d003      	beq.n	8006784 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2205      	movs	r2, #5
 8006780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	887a      	ldrh	r2, [r7, #2]
 8006794:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	887a      	ldrh	r2, [r7, #2]
 800679a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	887a      	ldrh	r2, [r7, #2]
 80067a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	887a      	ldrh	r2, [r7, #2]
 80067ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	d007      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067e0:	d178      	bne.n	80068d4 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_SPI_TransmitReceive+0x11c>
 80067ea:	8b7b      	ldrh	r3, [r7, #26]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d166      	bne.n	80068be <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	881a      	ldrh	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	1c9a      	adds	r2, r3, #2
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006814:	e053      	b.n	80068be <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b02      	cmp	r3, #2
 8006822:	d11b      	bne.n	800685c <HAL_SPI_TransmitReceive+0x188>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006828:	b29b      	uxth	r3, r3
 800682a:	2b00      	cmp	r3, #0
 800682c:	d016      	beq.n	800685c <HAL_SPI_TransmitReceive+0x188>
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	2b01      	cmp	r3, #1
 8006832:	d113      	bne.n	800685c <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	881a      	ldrh	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	1c9a      	adds	r2, r3, #2
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b01      	cmp	r3, #1
 8006868:	d119      	bne.n	800689e <HAL_SPI_TransmitReceive+0x1ca>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d014      	beq.n	800689e <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	b292      	uxth	r2, r2
 8006880:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	1c9a      	adds	r2, r3, #2
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800689a:	2301      	movs	r3, #1
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800689e:	f7fb fbb1 	bl	8002004 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d807      	bhi.n	80068be <HAL_SPI_TransmitReceive+0x1ea>
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b4:	d003      	beq.n	80068be <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068bc:	e0aa      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1a6      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x142>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1a1      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x142>
 80068d2:	e07f      	b.n	80069d4 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <HAL_SPI_TransmitReceive+0x20e>
 80068dc:	8b7b      	ldrh	r3, [r7, #26]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d16e      	bne.n	80069c0 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	330c      	adds	r3, #12
 80068ec:	7812      	ldrb	r2, [r2, #0]
 80068ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068fe:	b29b      	uxth	r3, r3
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006908:	e05a      	b.n	80069c0 <HAL_SPI_TransmitReceive+0x2ec>
 800690a:	bf00      	nop
 800690c:	0800e35c 	.word	0x0800e35c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d11c      	bne.n	8006958 <HAL_SPI_TransmitReceive+0x284>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d017      	beq.n	8006958 <HAL_SPI_TransmitReceive+0x284>
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	2b01      	cmp	r3, #1
 800692c:	d114      	bne.n	8006958 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	7812      	ldrb	r2, [r2, #0]
 800693a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b01      	cmp	r3, #1
 8006964:	d119      	bne.n	800699a <HAL_SPI_TransmitReceive+0x2c6>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d014      	beq.n	800699a <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698c:	b29b      	uxth	r3, r3
 800698e:	3b01      	subs	r3, #1
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006996:	2301      	movs	r3, #1
 8006998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800699a:	f7fb fb33 	bl	8002004 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d803      	bhi.n	80069b2 <HAL_SPI_TransmitReceive+0x2de>
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d102      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x2e4>
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d103      	bne.n	80069c0 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069be:	e029      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d1a2      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x23c>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d19d      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f8bf 	bl	8006b5c <SPI_EndRxTxTransaction>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d006      	beq.n	80069f2 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80069f0:	e010      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10b      	bne.n	8006a12 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069fa:	2300      	movs	r3, #0
 80069fc:	617b      	str	r3, [r7, #20]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	e000      	b.n	8006a14 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8006a12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3730      	adds	r7, #48	; 0x30
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a3e:	b2db      	uxtb	r3, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a5c:	f7fb fad2 	bl	8002004 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	1a9b      	subs	r3, r3, r2
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	4413      	add	r3, r2
 8006a6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a6c:	f7fb faca 	bl	8002004 <HAL_GetTick>
 8006a70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a72:	4b39      	ldr	r3, [pc, #228]	; (8006b58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	015b      	lsls	r3, r3, #5
 8006a78:	0d1b      	lsrs	r3, r3, #20
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	fb02 f303 	mul.w	r3, r2, r3
 8006a80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a82:	e054      	b.n	8006b2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d050      	beq.n	8006b2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a8c:	f7fb faba 	bl	8002004 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d902      	bls.n	8006aa2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d13d      	bne.n	8006b1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ab0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aba:	d111      	bne.n	8006ae0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac4:	d004      	beq.n	8006ad0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ace:	d107      	bne.n	8006ae0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ade:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae8:	d10f      	bne.n	8006b0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e017      	b.n	8006b4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4013      	ands	r3, r2
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	bf0c      	ite	eq
 8006b3e:	2301      	moveq	r3, #1
 8006b40:	2300      	movne	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d19b      	bne.n	8006a84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3720      	adds	r7, #32
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000000 	.word	0x20000000

08006b5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b088      	sub	sp, #32
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b68:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <SPI_EndRxTxTransaction+0x7c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <SPI_EndRxTxTransaction+0x80>)
 8006b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b72:	0d5b      	lsrs	r3, r3, #21
 8006b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b78:	fb02 f303 	mul.w	r3, r2, r3
 8006b7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b86:	d112      	bne.n	8006bae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2180      	movs	r1, #128	; 0x80
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff ff5a 	bl	8006a4c <SPI_WaitFlagStateUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d016      	beq.n	8006bcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba2:	f043 0220 	orr.w	r2, r3, #32
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e00f      	b.n	8006bce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc4:	2b80      	cmp	r3, #128	; 0x80
 8006bc6:	d0f2      	beq.n	8006bae <SPI_EndRxTxTransaction+0x52>
 8006bc8:	e000      	b.n	8006bcc <SPI_EndRxTxTransaction+0x70>
        break;
 8006bca:	bf00      	nop
  }

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000000 	.word	0x20000000
 8006bdc:	165e9f81 	.word	0x165e9f81

08006be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e0a7      	b.n	8006d42 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a55      	ldr	r2, [pc, #340]	; (8006d4c <HAL_TIM_Base_Init+0x16c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d027      	beq.n	8006c4c <HAL_TIM_Base_Init+0x6c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c04:	d022      	beq.n	8006c4c <HAL_TIM_Base_Init+0x6c>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a51      	ldr	r2, [pc, #324]	; (8006d50 <HAL_TIM_Base_Init+0x170>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d01d      	beq.n	8006c4c <HAL_TIM_Base_Init+0x6c>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a4f      	ldr	r2, [pc, #316]	; (8006d54 <HAL_TIM_Base_Init+0x174>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d018      	beq.n	8006c4c <HAL_TIM_Base_Init+0x6c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a4e      	ldr	r2, [pc, #312]	; (8006d58 <HAL_TIM_Base_Init+0x178>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d013      	beq.n	8006c4c <HAL_TIM_Base_Init+0x6c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a4c      	ldr	r2, [pc, #304]	; (8006d5c <HAL_TIM_Base_Init+0x17c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d00e      	beq.n	8006c4c <HAL_TIM_Base_Init+0x6c>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a4b      	ldr	r2, [pc, #300]	; (8006d60 <HAL_TIM_Base_Init+0x180>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d009      	beq.n	8006c4c <HAL_TIM_Base_Init+0x6c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a49      	ldr	r2, [pc, #292]	; (8006d64 <HAL_TIM_Base_Init+0x184>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d004      	beq.n	8006c4c <HAL_TIM_Base_Init+0x6c>
 8006c42:	f240 1113 	movw	r1, #275	; 0x113
 8006c46:	4848      	ldr	r0, [pc, #288]	; (8006d68 <HAL_TIM_Base_Init+0x188>)
 8006c48:	f7fa fef4 	bl	8001a34 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d014      	beq.n	8006c7e <HAL_TIM_Base_Init+0x9e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d010      	beq.n	8006c7e <HAL_TIM_Base_Init+0x9e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d00c      	beq.n	8006c7e <HAL_TIM_Base_Init+0x9e>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	d008      	beq.n	8006c7e <HAL_TIM_Base_Init+0x9e>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	2b60      	cmp	r3, #96	; 0x60
 8006c72:	d004      	beq.n	8006c7e <HAL_TIM_Base_Init+0x9e>
 8006c74:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006c78:	483b      	ldr	r0, [pc, #236]	; (8006d68 <HAL_TIM_Base_Init+0x188>)
 8006c7a:	f7fa fedb 	bl	8001a34 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00e      	beq.n	8006ca4 <HAL_TIM_Base_Init+0xc4>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c8e:	d009      	beq.n	8006ca4 <HAL_TIM_Base_Init+0xc4>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c98:	d004      	beq.n	8006ca4 <HAL_TIM_Base_Init+0xc4>
 8006c9a:	f240 1115 	movw	r1, #277	; 0x115
 8006c9e:	4832      	ldr	r0, [pc, #200]	; (8006d68 <HAL_TIM_Base_Init+0x188>)
 8006ca0:	f7fa fec8 	bl	8001a34 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <HAL_TIM_Base_Init+0xde>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	2b80      	cmp	r3, #128	; 0x80
 8006cb2:	d004      	beq.n	8006cbe <HAL_TIM_Base_Init+0xde>
 8006cb4:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006cb8:	482b      	ldr	r0, [pc, #172]	; (8006d68 <HAL_TIM_Base_Init+0x188>)
 8006cba:	f7fa febb 	bl	8001a34 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fb f8f0 	bl	8001eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f000 fd0c 	bl	8007708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40000c00 	.word	0x40000c00
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400
 8006d64:	40014800 	.word	0x40014800
 8006d68:	0800e394 	.word	0x0800e394

08006d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a3d      	ldr	r2, [pc, #244]	; (8006e70 <HAL_TIM_Base_Start_IT+0x104>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d027      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x62>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d86:	d022      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x62>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a39      	ldr	r2, [pc, #228]	; (8006e74 <HAL_TIM_Base_Start_IT+0x108>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d01d      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x62>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a38      	ldr	r2, [pc, #224]	; (8006e78 <HAL_TIM_Base_Start_IT+0x10c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d018      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x62>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a36      	ldr	r2, [pc, #216]	; (8006e7c <HAL_TIM_Base_Start_IT+0x110>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x62>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a35      	ldr	r2, [pc, #212]	; (8006e80 <HAL_TIM_Base_Start_IT+0x114>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00e      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x62>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a33      	ldr	r2, [pc, #204]	; (8006e84 <HAL_TIM_Base_Start_IT+0x118>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d009      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x62>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a32      	ldr	r2, [pc, #200]	; (8006e88 <HAL_TIM_Base_Start_IT+0x11c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d004      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x62>
 8006dc4:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006dc8:	4830      	ldr	r0, [pc, #192]	; (8006e8c <HAL_TIM_Base_Start_IT+0x120>)
 8006dca:	f7fa fe33 	bl	8001a34 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d001      	beq.n	8006dde <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e044      	b.n	8006e68 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0201 	orr.w	r2, r2, #1
 8006df4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1d      	ldr	r2, [pc, #116]	; (8006e70 <HAL_TIM_Base_Start_IT+0x104>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d018      	beq.n	8006e32 <HAL_TIM_Base_Start_IT+0xc6>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e08:	d013      	beq.n	8006e32 <HAL_TIM_Base_Start_IT+0xc6>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a19      	ldr	r2, [pc, #100]	; (8006e74 <HAL_TIM_Base_Start_IT+0x108>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00e      	beq.n	8006e32 <HAL_TIM_Base_Start_IT+0xc6>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <HAL_TIM_Base_Start_IT+0x10c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d009      	beq.n	8006e32 <HAL_TIM_Base_Start_IT+0xc6>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <HAL_TIM_Base_Start_IT+0x110>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_TIM_Base_Start_IT+0xc6>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a14      	ldr	r2, [pc, #80]	; (8006e80 <HAL_TIM_Base_Start_IT+0x114>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d111      	bne.n	8006e56 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b06      	cmp	r3, #6
 8006e42:	d010      	beq.n	8006e66 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e54:	e007      	b.n	8006e66 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0201 	orr.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40010000 	.word	0x40010000
 8006e74:	40000400 	.word	0x40000400
 8006e78:	40000800 	.word	0x40000800
 8006e7c:	40000c00 	.word	0x40000c00
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40014400 	.word	0x40014400
 8006e88:	40014800 	.word	0x40014800
 8006e8c:	0800e394 	.word	0x0800e394

08006e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d122      	bne.n	8006eec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d11b      	bne.n	8006eec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f06f 0202 	mvn.w	r2, #2
 8006ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fbfa 	bl	80076cc <HAL_TIM_IC_CaptureCallback>
 8006ed8:	e005      	b.n	8006ee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fbec 	bl	80076b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fbfd 	bl	80076e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0304 	and.w	r3, r3, #4
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d122      	bne.n	8006f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d11b      	bne.n	8006f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0204 	mvn.w	r2, #4
 8006f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fbd0 	bl	80076cc <HAL_TIM_IC_CaptureCallback>
 8006f2c:	e005      	b.n	8006f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fbc2 	bl	80076b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fbd3 	bl	80076e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d122      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d11b      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0208 	mvn.w	r2, #8
 8006f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fba6 	bl	80076cc <HAL_TIM_IC_CaptureCallback>
 8006f80:	e005      	b.n	8006f8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fb98 	bl	80076b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fba9 	bl	80076e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0310 	and.w	r3, r3, #16
 8006f9e:	2b10      	cmp	r3, #16
 8006fa0:	d122      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d11b      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0210 	mvn.w	r2, #16
 8006fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fb7c 	bl	80076cc <HAL_TIM_IC_CaptureCallback>
 8006fd4:	e005      	b.n	8006fe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fb6e 	bl	80076b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fb7f 	bl	80076e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10e      	bne.n	8007014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b01      	cmp	r3, #1
 8007002:	d107      	bne.n	8007014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0201 	mvn.w	r2, #1
 800700c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7fa fdfe 	bl	8001c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d10e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702c:	2b80      	cmp	r3, #128	; 0x80
 800702e:	d107      	bne.n	8007040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fd46 	bl	8007acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704a:	2b40      	cmp	r3, #64	; 0x40
 800704c:	d10e      	bne.n	800706c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007058:	2b40      	cmp	r3, #64	; 0x40
 800705a:	d107      	bne.n	800706c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fb44 	bl	80076f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b20      	cmp	r3, #32
 8007078:	d10e      	bne.n	8007098 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b20      	cmp	r3, #32
 8007086:	d107      	bne.n	8007098 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0220 	mvn.w	r2, #32
 8007090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fd10 	bl	8007ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_TIM_ConfigClockSource+0x18>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e2ef      	b.n	8007698 <HAL_TIM_ConfigClockSource+0x5f8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d0:	d029      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x86>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070da:	d024      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x86>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d020      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x86>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d01c      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x86>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d018      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x86>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b30      	cmp	r3, #48	; 0x30
 80070fa:	d014      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x86>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2b40      	cmp	r3, #64	; 0x40
 8007102:	d010      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x86>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b50      	cmp	r3, #80	; 0x50
 800710a:	d00c      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x86>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b60      	cmp	r3, #96	; 0x60
 8007112:	d008      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x86>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b70      	cmp	r3, #112	; 0x70
 800711a:	d004      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x86>
 800711c:	f241 4122 	movw	r1, #5154	; 0x1422
 8007120:	487c      	ldr	r0, [pc, #496]	; (8007314 <HAL_TIM_ConfigClockSource+0x274>)
 8007122:	f7fa fc87 	bl	8001a34 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007134:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800713c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714e:	f000 80f1 	beq.w	8007334 <HAL_TIM_ConfigClockSource+0x294>
 8007152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007156:	f200 8293 	bhi.w	8007680 <HAL_TIM_ConfigClockSource+0x5e0>
 800715a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715e:	d02d      	beq.n	80071bc <HAL_TIM_ConfigClockSource+0x11c>
 8007160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007164:	f200 828c 	bhi.w	8007680 <HAL_TIM_ConfigClockSource+0x5e0>
 8007168:	2b70      	cmp	r3, #112	; 0x70
 800716a:	d05d      	beq.n	8007228 <HAL_TIM_ConfigClockSource+0x188>
 800716c:	2b70      	cmp	r3, #112	; 0x70
 800716e:	f200 8287 	bhi.w	8007680 <HAL_TIM_ConfigClockSource+0x5e0>
 8007172:	2b60      	cmp	r3, #96	; 0x60
 8007174:	f000 81a0 	beq.w	80074b8 <HAL_TIM_ConfigClockSource+0x418>
 8007178:	2b60      	cmp	r3, #96	; 0x60
 800717a:	f200 8281 	bhi.w	8007680 <HAL_TIM_ConfigClockSource+0x5e0>
 800717e:	2b50      	cmp	r3, #80	; 0x50
 8007180:	f000 8144 	beq.w	800740c <HAL_TIM_ConfigClockSource+0x36c>
 8007184:	2b50      	cmp	r3, #80	; 0x50
 8007186:	f200 827b 	bhi.w	8007680 <HAL_TIM_ConfigClockSource+0x5e0>
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	f000 81f6 	beq.w	800757c <HAL_TIM_ConfigClockSource+0x4dc>
 8007190:	2b40      	cmp	r3, #64	; 0x40
 8007192:	f200 8275 	bhi.w	8007680 <HAL_TIM_ConfigClockSource+0x5e0>
 8007196:	2b30      	cmp	r3, #48	; 0x30
 8007198:	f000 8246 	beq.w	8007628 <HAL_TIM_ConfigClockSource+0x588>
 800719c:	2b30      	cmp	r3, #48	; 0x30
 800719e:	f200 826f 	bhi.w	8007680 <HAL_TIM_ConfigClockSource+0x5e0>
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	f000 8240 	beq.w	8007628 <HAL_TIM_ConfigClockSource+0x588>
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	f200 8269 	bhi.w	8007680 <HAL_TIM_ConfigClockSource+0x5e0>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 823a 	beq.w	8007628 <HAL_TIM_ConfigClockSource+0x588>
 80071b4:	2b10      	cmp	r3, #16
 80071b6:	f000 8237 	beq.w	8007628 <HAL_TIM_ConfigClockSource+0x588>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80071ba:	e261      	b.n	8007680 <HAL_TIM_ConfigClockSource+0x5e0>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a55      	ldr	r2, [pc, #340]	; (8007318 <HAL_TIM_ConfigClockSource+0x278>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	f000 825e 	beq.w	8007684 <HAL_TIM_ConfigClockSource+0x5e4>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d0:	f000 8258 	beq.w	8007684 <HAL_TIM_ConfigClockSource+0x5e4>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a50      	ldr	r2, [pc, #320]	; (800731c <HAL_TIM_ConfigClockSource+0x27c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	f000 8252 	beq.w	8007684 <HAL_TIM_ConfigClockSource+0x5e4>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a4e      	ldr	r2, [pc, #312]	; (8007320 <HAL_TIM_ConfigClockSource+0x280>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	f000 824c 	beq.w	8007684 <HAL_TIM_ConfigClockSource+0x5e4>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a4c      	ldr	r2, [pc, #304]	; (8007324 <HAL_TIM_ConfigClockSource+0x284>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	f000 8246 	beq.w	8007684 <HAL_TIM_ConfigClockSource+0x5e4>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a4a      	ldr	r2, [pc, #296]	; (8007328 <HAL_TIM_ConfigClockSource+0x288>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	f000 8240 	beq.w	8007684 <HAL_TIM_ConfigClockSource+0x5e4>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a48      	ldr	r2, [pc, #288]	; (800732c <HAL_TIM_ConfigClockSource+0x28c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	f000 823a 	beq.w	8007684 <HAL_TIM_ConfigClockSource+0x5e4>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a46      	ldr	r2, [pc, #280]	; (8007330 <HAL_TIM_ConfigClockSource+0x290>)
 8007216:	4293      	cmp	r3, r2
 8007218:	f000 8234 	beq.w	8007684 <HAL_TIM_ConfigClockSource+0x5e4>
 800721c:	f241 412e 	movw	r1, #5166	; 0x142e
 8007220:	483c      	ldr	r0, [pc, #240]	; (8007314 <HAL_TIM_ConfigClockSource+0x274>)
 8007222:	f7fa fc07 	bl	8001a34 <assert_failed>
      break;
 8007226:	e22d      	b.n	8007684 <HAL_TIM_ConfigClockSource+0x5e4>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a3a      	ldr	r2, [pc, #232]	; (8007318 <HAL_TIM_ConfigClockSource+0x278>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x1ce>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723a:	d018      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x1ce>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a36      	ldr	r2, [pc, #216]	; (800731c <HAL_TIM_ConfigClockSource+0x27c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x1ce>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a35      	ldr	r2, [pc, #212]	; (8007320 <HAL_TIM_ConfigClockSource+0x280>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x1ce>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a33      	ldr	r2, [pc, #204]	; (8007324 <HAL_TIM_ConfigClockSource+0x284>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x1ce>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a32      	ldr	r2, [pc, #200]	; (8007328 <HAL_TIM_ConfigClockSource+0x288>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_TIM_ConfigClockSource+0x1ce>
 8007264:	f241 4135 	movw	r1, #5173	; 0x1435
 8007268:	482a      	ldr	r0, [pc, #168]	; (8007314 <HAL_TIM_ConfigClockSource+0x274>)
 800726a:	f7fa fbe3 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d013      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x1fe>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727e:	d00e      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x1fe>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007288:	d009      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x1fe>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007292:	d004      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x1fe>
 8007294:	f241 4138 	movw	r1, #5176	; 0x1438
 8007298:	481e      	ldr	r0, [pc, #120]	; (8007314 <HAL_TIM_ConfigClockSource+0x274>)
 800729a:	f7fa fbcb 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a6:	d014      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x232>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d010      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x232>
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00c      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x232>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d008      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x232>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	2b0a      	cmp	r3, #10
 80072c6:	d004      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x232>
 80072c8:	f241 4139 	movw	r1, #5177	; 0x1439
 80072cc:	4811      	ldr	r0, [pc, #68]	; (8007314 <HAL_TIM_ConfigClockSource+0x274>)
 80072ce:	f7fa fbb1 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	2b0f      	cmp	r3, #15
 80072d8:	d904      	bls.n	80072e4 <HAL_TIM_ConfigClockSource+0x244>
 80072da:	f241 413a 	movw	r1, #5178	; 0x143a
 80072de:	480d      	ldr	r0, [pc, #52]	; (8007314 <HAL_TIM_ConfigClockSource+0x274>)
 80072e0:	f7fa fba8 	bl	8001a34 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	6899      	ldr	r1, [r3, #8]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f000 fb02 	bl	80078fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007306:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	609a      	str	r2, [r3, #8]
      break;
 8007310:	e1b9      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x5e6>
 8007312:	bf00      	nop
 8007314:	0800e394 	.word	0x0800e394
 8007318:	40010000 	.word	0x40010000
 800731c:	40000400 	.word	0x40000400
 8007320:	40000800 	.word	0x40000800
 8007324:	40000c00 	.word	0x40000c00
 8007328:	40014000 	.word	0x40014000
 800732c:	40014400 	.word	0x40014400
 8007330:	40014800 	.word	0x40014800
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a8a      	ldr	r2, [pc, #552]	; (8007564 <HAL_TIM_ConfigClockSource+0x4c4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d018      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x2d0>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007346:	d013      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x2d0>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a86      	ldr	r2, [pc, #536]	; (8007568 <HAL_TIM_ConfigClockSource+0x4c8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00e      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x2d0>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a85      	ldr	r2, [pc, #532]	; (800756c <HAL_TIM_ConfigClockSource+0x4cc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d009      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x2d0>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a83      	ldr	r2, [pc, #524]	; (8007570 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <HAL_TIM_ConfigClockSource+0x2d0>
 8007366:	f241 414d 	movw	r1, #5197	; 0x144d
 800736a:	4882      	ldr	r0, [pc, #520]	; (8007574 <HAL_TIM_ConfigClockSource+0x4d4>)
 800736c:	f7fa fb62 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d013      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x300>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007380:	d00e      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x300>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738a:	d009      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x300>
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007394:	d004      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x300>
 8007396:	f241 4150 	movw	r1, #5200	; 0x1450
 800739a:	4876      	ldr	r0, [pc, #472]	; (8007574 <HAL_TIM_ConfigClockSource+0x4d4>)
 800739c:	f7fa fb4a 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a8:	d014      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0x334>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d010      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0x334>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00c      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0x334>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d008      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0x334>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b0a      	cmp	r3, #10
 80073c8:	d004      	beq.n	80073d4 <HAL_TIM_ConfigClockSource+0x334>
 80073ca:	f241 4151 	movw	r1, #5201	; 0x1451
 80073ce:	4869      	ldr	r0, [pc, #420]	; (8007574 <HAL_TIM_ConfigClockSource+0x4d4>)
 80073d0:	f7fa fb30 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	2b0f      	cmp	r3, #15
 80073da:	d904      	bls.n	80073e6 <HAL_TIM_ConfigClockSource+0x346>
 80073dc:	f241 4152 	movw	r1, #5202	; 0x1452
 80073e0:	4864      	ldr	r0, [pc, #400]	; (8007574 <HAL_TIM_ConfigClockSource+0x4d4>)
 80073e2:	f7fa fb27 	bl	8001a34 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6818      	ldr	r0, [r3, #0]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6899      	ldr	r1, [r3, #8]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f000 fa81 	bl	80078fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007408:	609a      	str	r2, [r3, #8]
      break;
 800740a:	e13c      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x5e6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a54      	ldr	r2, [pc, #336]	; (8007564 <HAL_TIM_ConfigClockSource+0x4c4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d01d      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x3b2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741e:	d018      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x3b2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a50      	ldr	r2, [pc, #320]	; (8007568 <HAL_TIM_ConfigClockSource+0x4c8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x3b2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a4f      	ldr	r2, [pc, #316]	; (800756c <HAL_TIM_ConfigClockSource+0x4cc>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00e      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x3b2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a4d      	ldr	r2, [pc, #308]	; (8007570 <HAL_TIM_ConfigClockSource+0x4d0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d009      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x3b2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a4d      	ldr	r2, [pc, #308]	; (8007578 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x3b2>
 8007448:	f241 4161 	movw	r1, #5217	; 0x1461
 800744c:	4849      	ldr	r0, [pc, #292]	; (8007574 <HAL_TIM_ConfigClockSource+0x4d4>)
 800744e:	f7fa faf1 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800745a:	d014      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x3e6>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d010      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x3e6>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00c      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x3e6>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d008      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x3e6>
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2b0a      	cmp	r3, #10
 800747a:	d004      	beq.n	8007486 <HAL_TIM_ConfigClockSource+0x3e6>
 800747c:	f241 4164 	movw	r1, #5220	; 0x1464
 8007480:	483c      	ldr	r0, [pc, #240]	; (8007574 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007482:	f7fa fad7 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	2b0f      	cmp	r3, #15
 800748c:	d904      	bls.n	8007498 <HAL_TIM_ConfigClockSource+0x3f8>
 800748e:	f241 4165 	movw	r1, #5221	; 0x1465
 8007492:	4838      	ldr	r0, [pc, #224]	; (8007574 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007494:	f7fa face 	bl	8001a34 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6818      	ldr	r0, [r3, #0]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	6859      	ldr	r1, [r3, #4]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	461a      	mov	r2, r3
 80074a6:	f000 f9af 	bl	8007808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2150      	movs	r1, #80	; 0x50
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fa08 	bl	80078c6 <TIM_ITRx_SetConfig>
      break;
 80074b6:	e0e6      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x5e6>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a29      	ldr	r2, [pc, #164]	; (8007564 <HAL_TIM_ConfigClockSource+0x4c4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d01d      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x45e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ca:	d018      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x45e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a25      	ldr	r2, [pc, #148]	; (8007568 <HAL_TIM_ConfigClockSource+0x4c8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d013      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x45e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a24      	ldr	r2, [pc, #144]	; (800756c <HAL_TIM_ConfigClockSource+0x4cc>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d00e      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x45e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a22      	ldr	r2, [pc, #136]	; (8007570 <HAL_TIM_ConfigClockSource+0x4d0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d009      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x45e>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a22      	ldr	r2, [pc, #136]	; (8007578 <HAL_TIM_ConfigClockSource+0x4d8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d004      	beq.n	80074fe <HAL_TIM_ConfigClockSource+0x45e>
 80074f4:	f241 4171 	movw	r1, #5233	; 0x1471
 80074f8:	481e      	ldr	r0, [pc, #120]	; (8007574 <HAL_TIM_ConfigClockSource+0x4d4>)
 80074fa:	f7fa fa9b 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007506:	d014      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0x492>
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d010      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0x492>
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00c      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0x492>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d008      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0x492>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b0a      	cmp	r3, #10
 8007526:	d004      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0x492>
 8007528:	f241 4174 	movw	r1, #5236	; 0x1474
 800752c:	4811      	ldr	r0, [pc, #68]	; (8007574 <HAL_TIM_ConfigClockSource+0x4d4>)
 800752e:	f7fa fa81 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2b0f      	cmp	r3, #15
 8007538:	d904      	bls.n	8007544 <HAL_TIM_ConfigClockSource+0x4a4>
 800753a:	f241 4175 	movw	r1, #5237	; 0x1475
 800753e:	480d      	ldr	r0, [pc, #52]	; (8007574 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007540:	f7fa fa78 	bl	8001a34 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6818      	ldr	r0, [r3, #0]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	6859      	ldr	r1, [r3, #4]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	461a      	mov	r2, r3
 8007552:	f000 f988 	bl	8007866 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2160      	movs	r1, #96	; 0x60
 800755c:	4618      	mov	r0, r3
 800755e:	f000 f9b2 	bl	80078c6 <TIM_ITRx_SetConfig>
      break;
 8007562:	e090      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x5e6>
 8007564:	40010000 	.word	0x40010000
 8007568:	40000400 	.word	0x40000400
 800756c:	40000800 	.word	0x40000800
 8007570:	40000c00 	.word	0x40000c00
 8007574:	0800e394 	.word	0x0800e394
 8007578:	40014000 	.word	0x40014000
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a47      	ldr	r2, [pc, #284]	; (80076a0 <HAL_TIM_ConfigClockSource+0x600>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01d      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x522>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758e:	d018      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x522>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a43      	ldr	r2, [pc, #268]	; (80076a4 <HAL_TIM_ConfigClockSource+0x604>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x522>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a42      	ldr	r2, [pc, #264]	; (80076a8 <HAL_TIM_ConfigClockSource+0x608>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00e      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x522>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a40      	ldr	r2, [pc, #256]	; (80076ac <HAL_TIM_ConfigClockSource+0x60c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d009      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x522>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a3f      	ldr	r2, [pc, #252]	; (80076b0 <HAL_TIM_ConfigClockSource+0x610>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d004      	beq.n	80075c2 <HAL_TIM_ConfigClockSource+0x522>
 80075b8:	f241 4181 	movw	r1, #5249	; 0x1481
 80075bc:	483d      	ldr	r0, [pc, #244]	; (80076b4 <HAL_TIM_ConfigClockSource+0x614>)
 80075be:	f7fa fa39 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ca:	d014      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x556>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d010      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x556>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00c      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x556>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d008      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x556>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2b0a      	cmp	r3, #10
 80075ea:	d004      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x556>
 80075ec:	f241 4184 	movw	r1, #5252	; 0x1484
 80075f0:	4830      	ldr	r0, [pc, #192]	; (80076b4 <HAL_TIM_ConfigClockSource+0x614>)
 80075f2:	f7fa fa1f 	bl	8001a34 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	2b0f      	cmp	r3, #15
 80075fc:	d904      	bls.n	8007608 <HAL_TIM_ConfigClockSource+0x568>
 80075fe:	f241 4185 	movw	r1, #5253	; 0x1485
 8007602:	482c      	ldr	r0, [pc, #176]	; (80076b4 <HAL_TIM_ConfigClockSource+0x614>)
 8007604:	f7fa fa16 	bl	8001a34 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6818      	ldr	r0, [r3, #0]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	461a      	mov	r2, r3
 8007616:	f000 f8f7 	bl	8007808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2140      	movs	r1, #64	; 0x40
 8007620:	4618      	mov	r0, r3
 8007622:	f000 f950 	bl	80078c6 <TIM_ITRx_SetConfig>
      break;
 8007626:	e02e      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x5e6>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a1c      	ldr	r2, [pc, #112]	; (80076a0 <HAL_TIM_ConfigClockSource+0x600>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d01d      	beq.n	800766e <HAL_TIM_ConfigClockSource+0x5ce>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800763a:	d018      	beq.n	800766e <HAL_TIM_ConfigClockSource+0x5ce>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a18      	ldr	r2, [pc, #96]	; (80076a4 <HAL_TIM_ConfigClockSource+0x604>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <HAL_TIM_ConfigClockSource+0x5ce>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a17      	ldr	r2, [pc, #92]	; (80076a8 <HAL_TIM_ConfigClockSource+0x608>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00e      	beq.n	800766e <HAL_TIM_ConfigClockSource+0x5ce>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a15      	ldr	r2, [pc, #84]	; (80076ac <HAL_TIM_ConfigClockSource+0x60c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d009      	beq.n	800766e <HAL_TIM_ConfigClockSource+0x5ce>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a14      	ldr	r2, [pc, #80]	; (80076b0 <HAL_TIM_ConfigClockSource+0x610>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d004      	beq.n	800766e <HAL_TIM_ConfigClockSource+0x5ce>
 8007664:	f241 4194 	movw	r1, #5268	; 0x1494
 8007668:	4812      	ldr	r0, [pc, #72]	; (80076b4 <HAL_TIM_ConfigClockSource+0x614>)
 800766a:	f7fa f9e3 	bl	8001a34 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4619      	mov	r1, r3
 8007678:	4610      	mov	r0, r2
 800767a:	f000 f924 	bl	80078c6 <TIM_ITRx_SetConfig>
        break;
 800767e:	e002      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x5e6>
      break;
 8007680:	bf00      	nop
 8007682:	e000      	b.n	8007686 <HAL_TIM_ConfigClockSource+0x5e6>
      break;
 8007684:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	40010000 	.word	0x40010000
 80076a4:	40000400 	.word	0x40000400
 80076a8:	40000800 	.word	0x40000800
 80076ac:	40000c00 	.word	0x40000c00
 80076b0:	40014000 	.word	0x40014000
 80076b4:	0800e394 	.word	0x0800e394

080076b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a34      	ldr	r2, [pc, #208]	; (80077ec <TIM_Base_SetConfig+0xe4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00f      	beq.n	8007740 <TIM_Base_SetConfig+0x38>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007726:	d00b      	beq.n	8007740 <TIM_Base_SetConfig+0x38>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a31      	ldr	r2, [pc, #196]	; (80077f0 <TIM_Base_SetConfig+0xe8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d007      	beq.n	8007740 <TIM_Base_SetConfig+0x38>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a30      	ldr	r2, [pc, #192]	; (80077f4 <TIM_Base_SetConfig+0xec>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d003      	beq.n	8007740 <TIM_Base_SetConfig+0x38>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a2f      	ldr	r2, [pc, #188]	; (80077f8 <TIM_Base_SetConfig+0xf0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d108      	bne.n	8007752 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a25      	ldr	r2, [pc, #148]	; (80077ec <TIM_Base_SetConfig+0xe4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d01b      	beq.n	8007792 <TIM_Base_SetConfig+0x8a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007760:	d017      	beq.n	8007792 <TIM_Base_SetConfig+0x8a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a22      	ldr	r2, [pc, #136]	; (80077f0 <TIM_Base_SetConfig+0xe8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <TIM_Base_SetConfig+0x8a>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a21      	ldr	r2, [pc, #132]	; (80077f4 <TIM_Base_SetConfig+0xec>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00f      	beq.n	8007792 <TIM_Base_SetConfig+0x8a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a20      	ldr	r2, [pc, #128]	; (80077f8 <TIM_Base_SetConfig+0xf0>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d00b      	beq.n	8007792 <TIM_Base_SetConfig+0x8a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a1f      	ldr	r2, [pc, #124]	; (80077fc <TIM_Base_SetConfig+0xf4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d007      	beq.n	8007792 <TIM_Base_SetConfig+0x8a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a1e      	ldr	r2, [pc, #120]	; (8007800 <TIM_Base_SetConfig+0xf8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d003      	beq.n	8007792 <TIM_Base_SetConfig+0x8a>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a1d      	ldr	r2, [pc, #116]	; (8007804 <TIM_Base_SetConfig+0xfc>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d108      	bne.n	80077a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a08      	ldr	r2, [pc, #32]	; (80077ec <TIM_Base_SetConfig+0xe4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d103      	bne.n	80077d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	691a      	ldr	r2, [r3, #16]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	615a      	str	r2, [r3, #20]
}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40014000 	.word	0x40014000
 8007800:	40014400 	.word	0x40014400
 8007804:	40014800 	.word	0x40014800

08007808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f023 0201 	bic.w	r2, r3, #1
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	011b      	lsls	r3, r3, #4
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f023 030a 	bic.w	r3, r3, #10
 8007844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4313      	orrs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	621a      	str	r2, [r3, #32]
}
 800785a:	bf00      	nop
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007866:	b480      	push	{r7}
 8007868:	b087      	sub	sp, #28
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	f023 0210 	bic.w	r2, r3, #16
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	031b      	lsls	r3, r3, #12
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	621a      	str	r2, [r3, #32]
}
 80078ba:	bf00      	nop
 80078bc:	371c      	adds	r7, #28
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b085      	sub	sp, #20
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f043 0307 	orr.w	r3, r3, #7
 80078e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	609a      	str	r2, [r3, #8]
}
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	021a      	lsls	r2, r3, #8
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	431a      	orrs	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	4313      	orrs	r3, r2
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	609a      	str	r2, [r3, #8]
}
 8007930:	bf00      	nop
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a55      	ldr	r2, [pc, #340]	; (8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d018      	beq.n	8007982 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007958:	d013      	beq.n	8007982 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a51      	ldr	r2, [pc, #324]	; (8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d00e      	beq.n	8007982 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a4f      	ldr	r2, [pc, #316]	; (8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d009      	beq.n	8007982 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a4e      	ldr	r2, [pc, #312]	; (8007aac <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d004      	beq.n	8007982 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8007978:	f240 7177 	movw	r1, #1911	; 0x777
 800797c:	484c      	ldr	r0, [pc, #304]	; (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800797e:	f7fa f859 	bl	8001a34 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d020      	beq.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b10      	cmp	r3, #16
 8007990:	d01c      	beq.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b20      	cmp	r3, #32
 8007998:	d018      	beq.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b30      	cmp	r3, #48	; 0x30
 80079a0:	d014      	beq.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b40      	cmp	r3, #64	; 0x40
 80079a8:	d010      	beq.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b50      	cmp	r3, #80	; 0x50
 80079b0:	d00c      	beq.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b60      	cmp	r3, #96	; 0x60
 80079b8:	d008      	beq.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b70      	cmp	r3, #112	; 0x70
 80079c0:	d004      	beq.n	80079cc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80079c2:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 80079c6:	483a      	ldr	r0, [pc, #232]	; (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80079c8:	f7fa f834 	bl	8001a34 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b80      	cmp	r3, #128	; 0x80
 80079d2:	d008      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80079dc:	f240 7179 	movw	r1, #1913	; 0x779
 80079e0:	4833      	ldr	r0, [pc, #204]	; (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80079e2:	f7fa f827 	bl	8001a34 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e050      	b.n	8007a96 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a1b      	ldr	r2, [pc, #108]	; (8007aa0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d018      	beq.n	8007a6a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a40:	d013      	beq.n	8007a6a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a17      	ldr	r2, [pc, #92]	; (8007aa4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00e      	beq.n	8007a6a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a15      	ldr	r2, [pc, #84]	; (8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d009      	beq.n	8007a6a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a14      	ldr	r2, [pc, #80]	; (8007aac <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d004      	beq.n	8007a6a <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a13      	ldr	r2, [pc, #76]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d10c      	bne.n	8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	40010000 	.word	0x40010000
 8007aa4:	40000400 	.word	0x40000400
 8007aa8:	40000800 	.word	0x40000800
 8007aac:	40000c00 	.word	0x40000c00
 8007ab0:	0800e3cc 	.word	0x0800e3cc
 8007ab4:	40014000 	.word	0x40014000

08007ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	7818      	ldrb	r0, [r3, #0]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007afa:	b299      	uxth	r1, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	78db      	ldrb	r3, [r3, #3]
 8007b00:	461a      	mov	r2, r3
 8007b02:	f7f9 fb1b 	bl	800113c <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	7818      	ldrb	r0, [r3, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b2a:	b299      	uxth	r1, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	78db      	ldrb	r3, [r3, #3]
 8007b30:	461a      	mov	r2, r3
 8007b32:	f000 ffd8 	bl	8008ae6 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8007b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8007b40:	b590      	push	{r4, r7, lr}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	7818      	ldrb	r0, [r3, #0]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b5a:	b299      	uxth	r1, r3
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	78da      	ldrb	r2, [r3, #3]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	889b      	ldrh	r3, [r3, #4]
 8007b64:	b29c      	uxth	r4, r3
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	88db      	ldrh	r3, [r3, #6]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	4623      	mov	r3, r4
 8007b70:	f000 ffc8 	bl	8008b04 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd90      	pop	{r4, r7, pc}

08007b7e <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 ffca 	bl	8008b2c <hci_hardware_error_event>

  return status;
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b0a6      	sub	sp, #152	; 0x98
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007baa:	2300      	movs	r3, #0
 8007bac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bc2:	e030      	b.n	8007c26 <hci_number_of_completed_packets_event_process+0x84>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8007bc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8007be0:	440b      	add	r3, r1
 8007be2:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8007be6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007bea:	3302      	adds	r3, #2
 8007bec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8007bf0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007bf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8007c0c:	440b      	add	r3, r1
 8007c0e:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8007c12:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007c16:	3302      	adds	r3, #2
 8007c18:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8007c1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c20:	3301      	adds	r3, #1
 8007c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c32:	4293      	cmp	r3, r2
 8007c34:	dbc6      	blt.n	8007bc4 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8007c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	f107 0208 	add.w	r2, r7, #8
 8007c40:	4611      	mov	r1, r2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 ff7d 	bl	8008b42 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8007c48:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3798      	adds	r7, #152	; 0x98
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 ff76 	bl	8008b5a <hci_data_buffer_overflow_event>

  return status;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007c80:	2300      	movs	r3, #0
 8007c82:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	781a      	ldrb	r2, [r3, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f000 ff6a 	bl	8008b70 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 f9dd 	bl	800907a <aci_blue_initialized_event>

  return status;
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b084      	sub	sp, #16
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 f9d7 	bl	8009090 <aci_blue_events_lost_event>

  return status;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 8007cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cf0:	b08d      	sub	sp, #52	; 0x34
 8007cf2:	af08      	add	r7, sp, #32
 8007cf4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f893 c000 	ldrb.w	ip, [r3]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f8d3 8005 	ldr.w	r8, [r3, #5]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8007d1c:	603b      	str	r3, [r7, #0]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8007d2a:	68b8      	ldr	r0, [r7, #8]
 8007d2c:	f8d0 0019 	ldr.w	r0, [r0, #25]
 8007d30:	68bc      	ldr	r4, [r7, #8]
 8007d32:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8007d36:	68bd      	ldr	r5, [r7, #8]
 8007d38:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8007d3c:	68be      	ldr	r6, [r7, #8]
 8007d3e:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8007d46:	9307      	str	r3, [sp, #28]
 8007d48:	9606      	str	r6, [sp, #24]
 8007d4a:	9505      	str	r5, [sp, #20]
 8007d4c:	9404      	str	r4, [sp, #16]
 8007d4e:	9003      	str	r0, [sp, #12]
 8007d50:	9102      	str	r1, [sp, #8]
 8007d52:	9201      	str	r2, [sp, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	464b      	mov	r3, r9
 8007d5a:	4642      	mov	r2, r8
 8007d5c:	4671      	mov	r1, lr
 8007d5e:	4660      	mov	r0, ip
 8007d60:	f001 f9a0 	bl	80090a4 <aci_blue_crash_info_event>

  return status;
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007d70 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	7818      	ldrb	r0, [r3, #0]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	7859      	ldrb	r1, [r3, #1]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f001 f996 	bl	80090c0 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f993 0000 	ldrsb.w	r0, [r3]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	f001 f98d 	bl	80090dc <aci_hal_scan_req_report_event>

  return status;
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	7818      	ldrb	r0, [r3, #0]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8007de8:	461a      	mov	r2, r3
 8007dea:	f001 f985 	bl	80090f8 <aci_hal_fw_error_event>

  return status;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8007e04:	f000 ff4a 	bl	8008c9c <aci_gap_limited_discoverable_event>

  return status;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	b298      	uxth	r0, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	7899      	ldrb	r1, [r3, #2]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	78db      	ldrb	r3, [r3, #3]
 8007e30:	461a      	mov	r2, r3
 8007e32:	f000 ff3a 	bl	8008caa <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 ff36 	bl	8008cc8 <aci_gap_pass_key_req_event>

  return status;
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 ff2e 	bl	8008cde <aci_gap_authorization_req_event>

  return status;
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 8007e98:	f000 ff2c 	bl	8008cf4 <aci_gap_slave_security_initiated_event>

  return status;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8007eb2:	f000 ff26 	bl	8008d02 <aci_gap_bond_lost_event>

  return status;
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	7818      	ldrb	r0, [r3, #0]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	7859      	ldrb	r1, [r3, #1]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8007ee0:	f000 ff16 	bl	8008d10 <aci_gap_proc_complete_event>

  return status;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 ff13 	bl	8008d30 <aci_gap_addr_not_resolved_event>

  return status;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f000 ff07 	bl	8008d46 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	789b      	ldrb	r3, [r3, #2]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4610      	mov	r0, r2
 8007f60:	f000 fefd 	bl	8008d5e <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	885b      	ldrh	r3, [r3, #2]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f001 f830 	bl	8008ff2 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b298      	uxth	r0, r3
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f001 f827 	bl	800900e <aci_l2cap_proc_timeout_event>

  return status;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8007fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fcc:	b089      	sub	sp, #36	; 0x24
 8007fce:	af04      	add	r7, sp, #16
 8007fd0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b298      	uxth	r0, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	789c      	ldrb	r4, [r3, #2]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007fea:	b29d      	uxth	r5, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007ff2:	b29e      	uxth	r6, r3
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8008002:	b292      	uxth	r2, r2
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 800800a:	b289      	uxth	r1, r1
 800800c:	9102      	str	r1, [sp, #8]
 800800e:	9201      	str	r2, [sp, #4]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	4633      	mov	r3, r6
 8008014:	462a      	mov	r2, r5
 8008016:	4621      	mov	r1, r4
 8008018:	f001 f807 	bl	800902a <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008026 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8008026:	b590      	push	{r4, r7, lr}
 8008028:	b087      	sub	sp, #28
 800802a:	af02      	add	r7, sp, #8
 800802c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b298      	uxth	r0, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	7899      	ldrb	r1, [r3, #2]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008046:	b29a      	uxth	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	4623      	mov	r3, r4
 8008054:	f000 fffd 	bl	8009052 <aci_l2cap_command_reject_event>

  return status;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	bd90      	pop	{r4, r7, pc}

08008062 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8008062:	b590      	push	{r4, r7, lr}
 8008064:	b087      	sub	sp, #28
 8008066:	af02      	add	r7, sp, #8
 8008068:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	b298      	uxth	r0, r3
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	885b      	ldrh	r3, [r3, #2]
 800807c:	b299      	uxth	r1, r3
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	889b      	ldrh	r3, [r3, #4]
 8008082:	b29a      	uxth	r2, r3
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	88db      	ldrh	r3, [r3, #6]
 8008088:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	4623      	mov	r3, r4
 8008092:	f7f9 f873 	bl	800117c <aci_gatt_attribute_modified_event>

  return status;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	bd90      	pop	{r4, r7, pc}

080080a0 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 fe5f 	bl	8008d7a <aci_gatt_proc_timeout_event>

  return status;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	885b      	ldrh	r3, [r3, #2]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	4619      	mov	r1, r3
 80080e4:	4610      	mov	r0, r2
 80080e6:	f000 fe53 	bl	8008d90 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b298      	uxth	r0, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	7899      	ldrb	r1, [r3, #2]
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8008116:	f000 fe49 	bl	8008dac <aci_att_find_info_resp_event>

  return status;
 800811a:	7bfb      	ldrb	r3, [r7, #15]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b0a6      	sub	sp, #152	; 0x98
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800812c:	2300      	movs	r3, #0
 800812e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8008138:	2303      	movs	r3, #3
 800813a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800813e:	2300      	movs	r3, #0
 8008140:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008144:	e030      	b.n	80081a8 <aci_att_find_by_type_value_resp_event_process+0x84>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8008146:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800814a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008156:	b29a      	uxth	r2, r3
 8008158:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008162:	440b      	add	r3, r1
 8008164:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8008168:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800816c:	3302      	adds	r3, #2
 800816e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8008172:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008176:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008182:	b29a      	uxth	r2, r3
 8008184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800818e:	440b      	add	r3, r1
 8008190:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8008194:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008198:	3302      	adds	r3, #2
 800819a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800819e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081a2:	3301      	adds	r3, #1
 80081a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80081a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081ac:	789b      	ldrb	r3, [r3, #2]
 80081ae:	461a      	mov	r2, r3
 80081b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081b4:	4293      	cmp	r3, r2
 80081b6:	dbc6      	blt.n	8008146 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 80081b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b298      	uxth	r0, r3
 80081c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081c4:	789b      	ldrb	r3, [r3, #2]
 80081c6:	f107 0208 	add.w	r2, r7, #8
 80081ca:	4619      	mov	r1, r3
 80081cc:	f000 fdfe 	bl	8008dcc <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 80081d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3798      	adds	r7, #152	; 0x98
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	b298      	uxth	r0, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	7899      	ldrb	r1, [r3, #2]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 80081fe:	f000 fdf3 	bl	8008de8 <aci_att_read_by_type_resp_event>

  return status;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	b298      	uxth	r0, r3
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 800822a:	461a      	mov	r2, r3
 800822c:	f000 fdec 	bl	8008e08 <aci_att_read_resp_event>

  return status;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	b298      	uxth	r0, r3
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8008258:	461a      	mov	r2, r3
 800825a:	f000 fde3 	bl	8008e24 <aci_att_read_blob_resp_event>

  return status;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	881b      	ldrh	r3, [r3, #0]
 800827c:	b298      	uxth	r0, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8008286:	461a      	mov	r2, r3
 8008288:	f000 fdda 	bl	8008e40 <aci_att_read_multiple_resp_event>

  return status;
 800828c:	7bfb      	ldrb	r3, [r7, #15]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b298      	uxth	r0, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	7899      	ldrb	r1, [r3, #2]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80082b8:	f000 fdd0 	bl	8008e5c <aci_att_read_by_group_type_resp_event>

  return status;
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 80082c6:	b590      	push	{r4, r7, lr}
 80082c8:	b087      	sub	sp, #28
 80082ca:	af02      	add	r7, sp, #8
 80082cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	b298      	uxth	r0, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	885b      	ldrh	r3, [r3, #2]
 80082e0:	b299      	uxth	r1, r3
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	889b      	ldrh	r3, [r3, #4]
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	4623      	mov	r3, r4
 80082f4:	f000 fdc2 	bl	8008e7c <aci_att_prepare_write_resp_event>

  return status;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd90      	pop	{r4, r7, pc}

08008302 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fdc3 	bl	8008ea4 <aci_att_exec_write_resp_event>

  return status;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	881b      	ldrh	r3, [r3, #0]
 800833c:	b298      	uxth	r0, r3
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	885b      	ldrh	r3, [r3, #2]
 8008342:	b299      	uxth	r1, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 800834c:	f000 fdb5 	bl	8008eba <aci_gatt_indication_event>

  return status;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b298      	uxth	r0, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	885b      	ldrh	r3, [r3, #2]
 8008374:	b299      	uxth	r1, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 800837e:	f7f8 feec 	bl	800115a <aci_gatt_notification_event>

  return status;
 8008382:	7bfb      	ldrb	r3, [r7, #15]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	789b      	ldrb	r3, [r3, #2]
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f000 fd96 	bl	8008eda <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80083c0:	2300      	movs	r3, #0
 80083c2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	b298      	uxth	r0, r3
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	7899      	ldrb	r1, [r3, #2]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	795b      	ldrb	r3, [r3, #5]
 80083de:	f000 fd8a 	bl	8008ef6 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b298      	uxth	r0, r3
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	885b      	ldrh	r3, [r3, #2]
 8008406:	b299      	uxth	r1, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8008410:	f000 fd85 	bl	8008f1e <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	b298      	uxth	r0, r3
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	885b      	ldrh	r3, [r3, #2]
 8008438:	b299      	uxth	r1, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8008442:	f000 fd7c 	bl	8008f3e <aci_gatt_write_permit_req_event>

  return status;
 8008446:	7bfb      	ldrb	r3, [r7, #15]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b298      	uxth	r0, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	b299      	uxth	r1, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	889b      	ldrh	r3, [r3, #4]
 8008470:	b29b      	uxth	r3, r3
 8008472:	461a      	mov	r2, r3
 8008474:	f000 fd73 	bl	8008f5e <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b0a6      	sub	sp, #152	; 0x98
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800848a:	2300      	movs	r3, #0
 800848c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8008496:	2303      	movs	r3, #3
 8008498:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800849c:	2300      	movs	r3, #0
 800849e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084a2:	e01a      	b.n	80084da <aci_gatt_read_multi_permit_req_event_process+0x58>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 80084a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80084a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	4413      	add	r3, r2
 80084b0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084ba:	005b      	lsls	r3, r3, #1
 80084bc:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80084c0:	440b      	add	r3, r1
 80084c2:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80084c6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80084ca:	3302      	adds	r3, #2
 80084cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80084d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084d4:	3301      	adds	r3, #1
 80084d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084de:	789b      	ldrb	r3, [r3, #2]
 80084e0:	461a      	mov	r2, r3
 80084e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084e6:	4293      	cmp	r3, r2
 80084e8:	dbdc      	blt.n	80084a4 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 80084ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b298      	uxth	r0, r3
 80084f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084f6:	789b      	ldrb	r3, [r3, #2]
 80084f8:	f107 0208 	add.w	r2, r7, #8
 80084fc:	4619      	mov	r1, r3
 80084fe:	f000 fd3d 	bl	8008f7c <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8008502:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8008506:	4618      	mov	r0, r3
 8008508:	3798      	adds	r7, #152	; 0x98
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29a      	uxth	r2, r3
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	885b      	ldrh	r3, [r3, #2]
 8008528:	b29b      	uxth	r3, r3
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f000 fd33 	bl	8008f98 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	4618      	mov	r0, r3
 8008554:	f000 fd2e 	bl	8008fb4 <aci_gatt_server_confirmation_event>

  return status;
 8008558:	7bfb      	ldrb	r3, [r7, #15]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8008562:	b590      	push	{r4, r7, lr}
 8008564:	b087      	sub	sp, #28
 8008566:	af02      	add	r7, sp, #8
 8008568:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800856a:	2300      	movs	r3, #0
 800856c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	b298      	uxth	r0, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	885b      	ldrh	r3, [r3, #2]
 800857c:	b299      	uxth	r1, r3
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	889b      	ldrh	r3, [r3, #4]
 8008582:	b29a      	uxth	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	4623      	mov	r3, r4
 8008590:	f000 fd1b 	bl	8008fca <aci_gatt_prepare_write_permit_req_event>

  return status;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	bd90      	pop	{r4, r7, pc}

0800859e <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800859e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085a0:	b08b      	sub	sp, #44	; 0x2c
 80085a2:	af06      	add	r7, sp, #24
 80085a4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80085a6:	2300      	movs	r3, #0
 80085a8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	781d      	ldrb	r5, [r3, #0]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80085b8:	b29e      	uxth	r6, r3
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f893 c003 	ldrb.w	ip, [r3, #3]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 80085d0:	b292      	uxth	r2, r2
 80085d2:	68b9      	ldr	r1, [r7, #8]
 80085d4:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 80085d8:	b289      	uxth	r1, r1
 80085da:	68b8      	ldr	r0, [r7, #8]
 80085dc:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 80085e0:	b280      	uxth	r0, r0
 80085e2:	68bc      	ldr	r4, [r7, #8]
 80085e4:	7c64      	ldrb	r4, [r4, #17]
 80085e6:	9404      	str	r4, [sp, #16]
 80085e8:	9003      	str	r0, [sp, #12]
 80085ea:	9102      	str	r1, [sp, #8]
 80085ec:	9201      	str	r2, [sp, #4]
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	4673      	mov	r3, lr
 80085f2:	4662      	mov	r2, ip
 80085f4:	4631      	mov	r1, r6
 80085f6:	4628      	mov	r0, r5
 80085f8:	f7f8 fd72 	bl	80010e0 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008606 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b0a4      	sub	sp, #144	; 0x90
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800860e:	2300      	movs	r3, #0
 8008610:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 800861a:	2301      	movs	r3, #1
 800861c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008620:	2300      	movs	r3, #0
 8008622:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008626:	e0b8      	b.n	800879a <hci_le_advertising_report_event_process+0x194>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8008628:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800862c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	4413      	add	r3, r2
 800863a:	440b      	add	r3, r1
 800863c:	3301      	adds	r3, #1
 800863e:	7819      	ldrb	r1, [r3, #0]
 8008640:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008650:	4413      	add	r3, r2
 8008652:	3b88      	subs	r3, #136	; 0x88
 8008654:	460a      	mov	r2, r1
 8008656:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008658:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800865c:	3301      	adds	r3, #1
 800865e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8008662:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008666:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	4413      	add	r3, r2
 8008674:	440b      	add	r3, r1
 8008676:	3302      	adds	r3, #2
 8008678:	7819      	ldrb	r1, [r3, #0]
 800867a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800868a:	4413      	add	r3, r2
 800868c:	3b87      	subs	r3, #135	; 0x87
 800868e:	460a      	mov	r2, r1
 8008690:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008692:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008696:	3301      	adds	r3, #1
 8008698:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800869c:	f107 0108 	add.w	r1, r7, #8
 80086a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80086a4:	4613      	mov	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	1c98      	adds	r0, r3, #2
 80086b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	4413      	add	r3, r2
 80086be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086c2:	4413      	add	r3, r2
 80086c4:	3303      	adds	r3, #3
 80086c6:	2206      	movs	r2, #6
 80086c8:	4619      	mov	r1, r3
 80086ca:	f004 fd35 	bl	800d138 <memcpy>
    size += 6;
 80086ce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80086d2:	3306      	adds	r3, #6
 80086d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 80086d8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80086dc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	4413      	add	r3, r2
 80086ea:	440b      	add	r3, r1
 80086ec:	3309      	adds	r3, #9
 80086ee:	7819      	ldrb	r1, [r3, #0]
 80086f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8008700:	4413      	add	r3, r2
 8008702:	3b80      	subs	r3, #128	; 0x80
 8008704:	460a      	mov	r2, r1
 8008706:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008708:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800870c:	3301      	adds	r3, #1
 800870e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8008712:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008716:	4613      	mov	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	4413      	add	r3, r2
 8008720:	3308      	adds	r3, #8
 8008722:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008726:	4413      	add	r3, r2
 8008728:	1c99      	adds	r1, r3, #2
 800872a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800873a:	4413      	add	r3, r2
 800873c:	3b7c      	subs	r3, #124	; 0x7c
 800873e:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 8008740:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008744:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	005b      	lsls	r3, r3, #1
 8008750:	4413      	add	r3, r2
 8008752:	440b      	add	r3, r1
 8008754:	3309      	adds	r3, #9
 8008756:	781a      	ldrb	r2, [r3, #0]
 8008758:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800875c:	4413      	add	r3, r2
 800875e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8008762:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	4413      	add	r3, r2
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	b259      	sxtb	r1, r3
 800876e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800877e:	4413      	add	r3, r2
 8008780:	3b78      	subs	r3, #120	; 0x78
 8008782:	460a      	mov	r2, r1
 8008784:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008786:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800878a:	3301      	adds	r3, #1
 800878c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008794:	3301      	adds	r3, #1
 8008796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800879a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087a6:	4293      	cmp	r3, r2
 80087a8:	f6ff af3e 	blt.w	8008628 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80087ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	f107 0208 	add.w	r2, r7, #8
 80087b6:	4611      	mov	r1, r2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 f9e7 	bl	8008b8c <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 80087be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3790      	adds	r7, #144	; 0x90
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 80087ca:	b590      	push	{r4, r7, lr}
 80087cc:	b087      	sub	sp, #28
 80087ce:	af02      	add	r7, sp, #8
 80087d0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	7818      	ldrb	r0, [r3, #0]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80087e4:	b299      	uxth	r1, r3
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80087f4:	b29c      	uxth	r4, r3
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	4623      	mov	r3, r4
 8008802:	f000 f9cf 	bl	8008ba4 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8008806:	7bfb      	ldrb	r3, [r7, #15]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	bd90      	pop	{r4, r7, pc}

08008810 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	7818      	ldrb	r0, [r3, #0]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800882a:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8008830:	461a      	mov	r2, r3
 8008832:	f000 f9cb 	bl	8008bcc <hci_le_read_remote_used_features_complete_event>

  return status;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	895b      	ldrh	r3, [r3, #10]
 800885e:	b29b      	uxth	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	f000 f9c1 	bl	8008be8 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 8008870:	b590      	push	{r4, r7, lr}
 8008872:	b087      	sub	sp, #28
 8008874:	af02      	add	r7, sp, #8
 8008876:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	b298      	uxth	r0, r3
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	b299      	uxth	r1, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	889b      	ldrh	r3, [r3, #4]
 8008890:	b29a      	uxth	r2, r3
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	88db      	ldrh	r3, [r3, #6]
 8008896:	b29c      	uxth	r4, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	891b      	ldrh	r3, [r3, #8]
 800889c:	b29b      	uxth	r3, r3
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	4623      	mov	r3, r4
 80088a2:	f000 f9af 	bl	8008c04 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd90      	pop	{r4, r7, pc}

080088b0 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80088b8:	2300      	movs	r3, #0
 80088ba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f000 f9ae 	bl	8008c2c <hci_le_read_local_p256_public_key_complete_event>

  return status;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f000 f9a5 	bl	8008c44 <hci_le_generate_dhkey_complete_event>

  return status;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8008904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008908:	b08d      	sub	sp, #52	; 0x34
 800890a:	af08      	add	r7, sp, #32
 800890c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f893 c000 	ldrb.w	ip, [r3]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008922:	fa1f fe83 	uxth.w	lr, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f893 8003 	ldrb.w	r8, [r3, #3]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800893e:	68b8      	ldr	r0, [r7, #8]
 8008940:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8008944:	b280      	uxth	r0, r0
 8008946:	68bc      	ldr	r4, [r7, #8]
 8008948:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800894c:	b2a4      	uxth	r4, r4
 800894e:	68bd      	ldr	r5, [r7, #8]
 8008950:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8008954:	b2ad      	uxth	r5, r5
 8008956:	68be      	ldr	r6, [r7, #8]
 8008958:	7f76      	ldrb	r6, [r6, #29]
 800895a:	9606      	str	r6, [sp, #24]
 800895c:	9505      	str	r5, [sp, #20]
 800895e:	9404      	str	r4, [sp, #16]
 8008960:	9003      	str	r0, [sp, #12]
 8008962:	9102      	str	r1, [sp, #8]
 8008964:	9201      	str	r2, [sp, #4]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	464b      	mov	r3, r9
 800896a:	4642      	mov	r2, r8
 800896c:	4671      	mov	r1, lr
 800896e:	4660      	mov	r0, ip
 8008970:	f000 f974 	bl	8008c5c <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 8008974:	7bfb      	ldrb	r3, [r7, #15]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3714      	adds	r7, #20
 800897a:	46bd      	mov	sp, r7
 800897c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008980 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b0a6      	sub	sp, #152	; 0x98
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8008988:	2300      	movs	r3, #0
 800898a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8008994:	2301      	movs	r3, #1
 8008996:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800899a:	2300      	movs	r3, #0
 800899c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089a0:	e089      	b.n	8008ab6 <hci_le_direct_advertising_report_event_process+0x136>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80089a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80089a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	4413      	add	r3, r2
 80089ae:	3301      	adds	r3, #1
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80089bc:	440b      	add	r3, r1
 80089be:	3b90      	subs	r3, #144	; 0x90
 80089c0:	701a      	strb	r2, [r3, #0]
    size += 1;
 80089c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80089c6:	3301      	adds	r3, #1
 80089c8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80089cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80089d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089d4:	011b      	lsls	r3, r3, #4
 80089d6:	4413      	add	r3, r2
 80089d8:	3302      	adds	r3, #2
 80089da:	781a      	ldrb	r2, [r3, #0]
 80089dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80089e6:	440b      	add	r3, r1
 80089e8:	3b8f      	subs	r3, #143	; 0x8f
 80089ea:	701a      	strb	r2, [r3, #0]
    size += 1;
 80089ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80089f0:	3301      	adds	r3, #1
 80089f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 80089f6:	f107 0208 	add.w	r2, r7, #8
 80089fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089fe:	011b      	lsls	r3, r3, #4
 8008a00:	4413      	add	r3, r2
 8008a02:	1c98      	adds	r0, r3, #2
 8008a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a0e:	4413      	add	r3, r2
 8008a10:	3303      	adds	r3, #3
 8008a12:	2206      	movs	r2, #6
 8008a14:	4619      	mov	r1, r3
 8008a16:	f004 fb8f 	bl	800d138 <memcpy>
    size += 6;
 8008a1a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008a1e:	3306      	adds	r3, #6
 8008a20:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8008a24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a2c:	011b      	lsls	r3, r3, #4
 8008a2e:	4413      	add	r3, r2
 8008a30:	3309      	adds	r3, #9
 8008a32:	781a      	ldrb	r2, [r3, #0]
 8008a34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008a3e:	440b      	add	r3, r1
 8008a40:	3b88      	subs	r3, #136	; 0x88
 8008a42:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008a44:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008a48:	3301      	adds	r3, #1
 8008a4a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8008a4e:	f107 0208 	add.w	r2, r7, #8
 8008a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a56:	011b      	lsls	r3, r3, #4
 8008a58:	3308      	adds	r3, #8
 8008a5a:	4413      	add	r3, r2
 8008a5c:	1c58      	adds	r0, r3, #1
 8008a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	3308      	adds	r3, #8
 8008a66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	2206      	movs	r2, #6
 8008a70:	4619      	mov	r1, r3
 8008a72:	f004 fb61 	bl	800d138 <memcpy>
    size += 6;
 8008a76:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008a7a:	3306      	adds	r3, #6
 8008a7c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8008a80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008a84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a88:	011b      	lsls	r3, r3, #4
 8008a8a:	4413      	add	r3, r2
 8008a8c:	3310      	adds	r3, #16
 8008a8e:	f993 2000 	ldrsb.w	r2, [r3]
 8008a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a96:	011b      	lsls	r3, r3, #4
 8008a98:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8008a9c:	440b      	add	r3, r1
 8008a9e:	3b81      	subs	r3, #129	; 0x81
 8008aa0:	701a      	strb	r2, [r3, #0]
    size += 1;
 8008aa2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ab6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	f6ff af6d 	blt.w	80089a2 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8008ac8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	f107 0208 	add.w	r2, r7, #8
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 f8d5 	bl	8008c84 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 8008ada:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3798      	adds	r7, #152	; 0x98
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	4603      	mov	r3, r0
 8008aee:	71fb      	strb	r3, [r7, #7]
 8008af0:	460b      	mov	r3, r1
 8008af2:	80bb      	strh	r3, [r7, #4]
 8008af4:	4613      	mov	r3, r2
 8008af6:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8008b04:	b490      	push	{r4, r7}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	461a      	mov	r2, r3
 8008b12:	4623      	mov	r3, r4
 8008b14:	71fb      	strb	r3, [r7, #7]
 8008b16:	4603      	mov	r3, r0
 8008b18:	80bb      	strh	r3, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	71bb      	strb	r3, [r7, #6]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc90      	pop	{r4, r7}
 8008b2a:	4770      	bx	lr

08008b2c <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	4603      	mov	r3, r0
 8008b4a:	6039      	str	r1, [r7, #0]
 8008b4c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	4603      	mov	r3, r0
 8008b62:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	4603      	mov	r3, r0
 8008b78:	460a      	mov	r2, r1
 8008b7a:	71fb      	strb	r3, [r7, #7]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 8008ba4:	b490      	push	{r4, r7}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4604      	mov	r4, r0
 8008bac:	4608      	mov	r0, r1
 8008bae:	4611      	mov	r1, r2
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4623      	mov	r3, r4
 8008bb4:	71fb      	strb	r3, [r7, #7]
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	80bb      	strh	r3, [r7, #4]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	807b      	strh	r3, [r7, #2]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 8008bc2:	bf00      	nop
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc90      	pop	{r4, r7}
 8008bca:	4770      	bx	lr

08008bcc <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	603a      	str	r2, [r7, #0]
 8008bd6:	71fb      	strb	r3, [r7, #7]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	6039      	str	r1, [r7, #0]
 8008bf2:	80fb      	strh	r3, [r7, #6]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8008c04:	b490      	push	{r4, r7}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	461a      	mov	r2, r3
 8008c12:	4623      	mov	r3, r4
 8008c14:	80fb      	strh	r3, [r7, #6]
 8008c16:	4603      	mov	r3, r0
 8008c18:	80bb      	strh	r3, [r7, #4]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	807b      	strh	r3, [r7, #2]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bc90      	pop	{r4, r7}
 8008c2a:	4770      	bx	lr

08008c2c <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	6039      	str	r1, [r7, #0]
 8008c4e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8008c5c:	b490      	push	{r4, r7}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	4611      	mov	r1, r2
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4623      	mov	r3, r4
 8008c6c:	71fb      	strb	r3, [r7, #7]
 8008c6e:	4603      	mov	r3, r0
 8008c70:	80bb      	strh	r3, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	71bb      	strb	r3, [r7, #6]
 8008c76:	4613      	mov	r3, r2
 8008c78:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc90      	pop	{r4, r7}
 8008c82:	4770      	bx	lr

08008c84 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	6039      	str	r1, [r7, #0]
 8008c8e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 8008ca0:	bf00      	nop
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	80fb      	strh	r3, [r7, #6]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	717b      	strb	r3, [r7, #5]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8008cd2:	bf00      	nop
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8008cf8:	bf00      	nop
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 8008d02:	b480      	push	{r7}
 8008d04:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8008d06:	bf00      	nop
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	4603      	mov	r3, r0
 8008d1a:	71fb      	strb	r3, [r7, #7]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	71bb      	strb	r3, [r7, #6]
 8008d20:	4613      	mov	r3, r2
 8008d22:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8008d3a:	bf00      	nop
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	6039      	str	r1, [r7, #0]
 8008d50:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b083      	sub	sp, #12
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	4603      	mov	r3, r0
 8008d66:	460a      	mov	r2, r1
 8008d68:	80fb      	strh	r3, [r7, #6]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	4603      	mov	r3, r0
 8008d82:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	4603      	mov	r3, r0
 8008d98:	460a      	mov	r2, r1
 8008d9a:	80fb      	strh	r3, [r7, #6]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	603b      	str	r3, [r7, #0]
 8008db4:	4603      	mov	r3, r0
 8008db6:	80fb      	strh	r3, [r7, #6]
 8008db8:	460b      	mov	r3, r1
 8008dba:	717b      	strb	r3, [r7, #5]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	603a      	str	r2, [r7, #0]
 8008dd6:	80fb      	strh	r3, [r7, #6]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	4603      	mov	r3, r0
 8008df2:	80fb      	strh	r3, [r7, #6]
 8008df4:	460b      	mov	r3, r1
 8008df6:	717b      	strb	r3, [r7, #5]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	603a      	str	r2, [r7, #0]
 8008e12:	80fb      	strh	r3, [r7, #6]
 8008e14:	460b      	mov	r3, r1
 8008e16:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	603a      	str	r2, [r7, #0]
 8008e2e:	80fb      	strh	r3, [r7, #6]
 8008e30:	460b      	mov	r3, r1
 8008e32:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	603a      	str	r2, [r7, #0]
 8008e4a:	80fb      	strh	r3, [r7, #6]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	4603      	mov	r3, r0
 8008e66:	80fb      	strh	r3, [r7, #6]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	717b      	strb	r3, [r7, #5]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8008e70:	bf00      	nop
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8008e7c:	b490      	push	{r4, r7}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4604      	mov	r4, r0
 8008e84:	4608      	mov	r0, r1
 8008e86:	4611      	mov	r1, r2
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4623      	mov	r3, r4
 8008e8c:	80fb      	strh	r3, [r7, #6]
 8008e8e:	4603      	mov	r3, r0
 8008e90:	80bb      	strh	r3, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	807b      	strh	r3, [r7, #2]
 8008e96:	4613      	mov	r3, r2
 8008e98:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bc90      	pop	{r4, r7}
 8008ea2:	4770      	bx	lr

08008ea4 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 8008eba:	b480      	push	{r7}
 8008ebc:	b085      	sub	sp, #20
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	607b      	str	r3, [r7, #4]
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	81fb      	strh	r3, [r7, #14]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	81bb      	strh	r3, [r7, #12]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 8008ece:	bf00      	nop
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	460a      	mov	r2, r1
 8008ee4:	80fb      	strh	r3, [r7, #6]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8008ef6:	b490      	push	{r4, r7}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	4604      	mov	r4, r0
 8008efe:	4608      	mov	r0, r1
 8008f00:	4611      	mov	r1, r2
 8008f02:	461a      	mov	r2, r3
 8008f04:	4623      	mov	r3, r4
 8008f06:	80fb      	strh	r3, [r7, #6]
 8008f08:	4603      	mov	r3, r0
 8008f0a:	717b      	strb	r3, [r7, #5]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	807b      	strh	r3, [r7, #2]
 8008f10:	4613      	mov	r3, r2
 8008f12:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bc90      	pop	{r4, r7}
 8008f1c:	4770      	bx	lr

08008f1e <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b085      	sub	sp, #20
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	607b      	str	r3, [r7, #4]
 8008f26:	4603      	mov	r3, r0
 8008f28:	81fb      	strh	r3, [r7, #14]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	81bb      	strh	r3, [r7, #12]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 8008f32:	bf00      	nop
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b085      	sub	sp, #20
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	607b      	str	r3, [r7, #4]
 8008f46:	4603      	mov	r3, r0
 8008f48:	81fb      	strh	r3, [r7, #14]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	81bb      	strh	r3, [r7, #12]
 8008f4e:	4613      	mov	r3, r2
 8008f50:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8008f52:	bf00      	nop
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	4603      	mov	r3, r0
 8008f66:	80fb      	strh	r3, [r7, #6]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	80bb      	strh	r3, [r7, #4]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	603a      	str	r2, [r7, #0]
 8008f86:	80fb      	strh	r3, [r7, #6]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	460a      	mov	r2, r1
 8008fa2:	80fb      	strh	r3, [r7, #6]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 8008fca:	b490      	push	{r4, r7}
 8008fcc:	b082      	sub	sp, #8
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	4608      	mov	r0, r1
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4623      	mov	r3, r4
 8008fda:	80fb      	strh	r3, [r7, #6]
 8008fdc:	4603      	mov	r3, r0
 8008fde:	80bb      	strh	r3, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	807b      	strh	r3, [r7, #2]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 8008fe8:	bf00      	nop
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc90      	pop	{r4, r7}
 8008ff0:	4770      	bx	lr

08008ff2 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	460a      	mov	r2, r1
 8008ffc:	80fb      	strh	r3, [r7, #6]
 8008ffe:	4613      	mov	r3, r2
 8009000:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8009002:	bf00      	nop
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800900e:	b480      	push	{r7}
 8009010:	b083      	sub	sp, #12
 8009012:	af00      	add	r7, sp, #0
 8009014:	4603      	mov	r3, r0
 8009016:	603a      	str	r2, [r7, #0]
 8009018:	80fb      	strh	r3, [r7, #6]
 800901a:	460b      	mov	r3, r1
 800901c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800901e:	bf00      	nop
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800902a:	b490      	push	{r4, r7}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	4604      	mov	r4, r0
 8009032:	4608      	mov	r0, r1
 8009034:	4611      	mov	r1, r2
 8009036:	461a      	mov	r2, r3
 8009038:	4623      	mov	r3, r4
 800903a:	80fb      	strh	r3, [r7, #6]
 800903c:	4603      	mov	r3, r0
 800903e:	717b      	strb	r3, [r7, #5]
 8009040:	460b      	mov	r3, r1
 8009042:	807b      	strh	r3, [r7, #2]
 8009044:	4613      	mov	r3, r2
 8009046:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bc90      	pop	{r4, r7}
 8009050:	4770      	bx	lr

08009052 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8009052:	b490      	push	{r4, r7}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	4604      	mov	r4, r0
 800905a:	4608      	mov	r0, r1
 800905c:	4611      	mov	r1, r2
 800905e:	461a      	mov	r2, r3
 8009060:	4623      	mov	r3, r4
 8009062:	80fb      	strh	r3, [r7, #6]
 8009064:	4603      	mov	r3, r0
 8009066:	717b      	strb	r3, [r7, #5]
 8009068:	460b      	mov	r3, r1
 800906a:	807b      	strh	r3, [r7, #2]
 800906c:	4613      	mov	r3, r2
 800906e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bc90      	pop	{r4, r7}
 8009078:	4770      	bx	lr

0800907a <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800907a:	b480      	push	{r7}
 800907c:	b083      	sub	sp, #12
 800907e:	af00      	add	r7, sp, #0
 8009080:	4603      	mov	r3, r0
 8009082:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	607a      	str	r2, [r7, #4]
 80090ae:	603b      	str	r3, [r7, #0]
 80090b0:	4603      	mov	r3, r0
 80090b2:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 80090b4:	bf00      	nop
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	4603      	mov	r3, r0
 80090c8:	603a      	str	r2, [r7, #0]
 80090ca:	71fb      	strb	r3, [r7, #7]
 80090cc:	460b      	mov	r3, r1
 80090ce:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	603a      	str	r2, [r7, #0]
 80090e6:	71fb      	strb	r3, [r7, #7]
 80090e8:	460b      	mov	r3, r1
 80090ea:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	603a      	str	r2, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
 8009104:	460b      	mov	r3, r1
 8009106:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800911e:	f107 0308 	add.w	r3, r7, #8
 8009122:	2218      	movs	r2, #24
 8009124:	2100      	movs	r1, #0
 8009126:	4618      	mov	r0, r3
 8009128:	f004 f814 	bl	800d154 <memset>
  rq.ogf = 0x03;
 800912c:	2303      	movs	r3, #3
 800912e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009130:	2303      	movs	r3, #3
 8009132:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009134:	1dfb      	adds	r3, r7, #7
 8009136:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009138:	2301      	movs	r3, #1
 800913a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800913c:	f107 0308 	add.w	r3, r7, #8
 8009140:	2100      	movs	r1, #0
 8009142:	4618      	mov	r0, r3
 8009144:	f000 ff5c 	bl	800a000 <hci_send_req>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	da01      	bge.n	8009152 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800914e:	23ff      	movs	r3, #255	; 0xff
 8009150:	e005      	b.n	800915e <hci_reset+0x4a>
  if (status) {
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <hci_reset+0x48>
    return status;
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	e000      	b.n	800915e <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3720      	adds	r7, #32
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b0cc      	sub	sp, #304	; 0x130
 800916a:	af00      	add	r7, sp, #0
 800916c:	4602      	mov	r2, r0
 800916e:	463b      	mov	r3, r7
 8009170:	6019      	str	r1, [r3, #0]
 8009172:	1dfb      	adds	r3, r7, #7
 8009174:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8009176:	f107 030c 	add.w	r3, r7, #12
 800917a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800917e:	f107 030b 	add.w	r3, r7, #11
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800918c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009190:	1dfa      	adds	r2, r7, #7
 8009192:	7812      	ldrb	r2, [r2, #0]
 8009194:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009196:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800919a:	3301      	adds	r3, #1
 800919c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 80091a0:	463b      	mov	r3, r7
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d007      	beq.n	80091b8 <hci_le_set_scan_response_data+0x52>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 80091a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ac:	1c58      	adds	r0, r3, #1
 80091ae:	463b      	mov	r3, r7
 80091b0:	221f      	movs	r2, #31
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	f003 ffc0 	bl	800d138 <memcpy>
  }
  index_input += 31;
 80091b8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80091bc:	331f      	adds	r3, #31
 80091be:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80091c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091c6:	2218      	movs	r2, #24
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f003 ffc2 	bl	800d154 <memset>
  rq.ogf = 0x08;
 80091d0:	2308      	movs	r3, #8
 80091d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 80091d6:	2309      	movs	r3, #9
 80091d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80091dc:	f107 030c 	add.w	r3, r7, #12
 80091e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80091e4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80091e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80091ec:	f107 030b 	add.w	r3, r7, #11
 80091f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80091f4:	2301      	movs	r3, #1
 80091f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80091fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091fe:	2100      	movs	r1, #0
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fefd 	bl	800a000 <hci_send_req>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	da01      	bge.n	8009210 <hci_le_set_scan_response_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 800920c:	23ff      	movs	r3, #255	; 0xff
 800920e:	e009      	b.n	8009224 <hci_le_set_scan_response_data+0xbe>
  if (status) {
 8009210:	f107 030b 	add.w	r3, r7, #11
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <hci_le_set_scan_response_data+0xbc>
    return status;
 800921a:	f107 030b 	add.w	r3, r7, #11
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	e000      	b.n	8009224 <hci_le_set_scan_response_data+0xbe>
  }
  return BLE_STATUS_SUCCESS;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b08c      	sub	sp, #48	; 0x30
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009236:	f107 030c 	add.w	r3, r7, #12
 800923a:	2209      	movs	r2, #9
 800923c:	2100      	movs	r1, #0
 800923e:	4618      	mov	r0, r3
 8009240:	f003 ff88 	bl	800d154 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009244:	f107 0318 	add.w	r3, r7, #24
 8009248:	2218      	movs	r2, #24
 800924a:	2100      	movs	r1, #0
 800924c:	4618      	mov	r0, r3
 800924e:	f003 ff81 	bl	800d154 <memset>
  rq.ogf = 0x08;
 8009252:	2308      	movs	r3, #8
 8009254:	833b      	strh	r3, [r7, #24]
  rq.ocf = 0x018;
 8009256:	2318      	movs	r3, #24
 8009258:	837b      	strh	r3, [r7, #26]
  rq.rparam = &resp;
 800925a:	f107 030c 	add.w	r3, r7, #12
 800925e:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = sizeof(resp);
 8009260:	2309      	movs	r3, #9
 8009262:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8009264:	f107 0318 	add.w	r3, r7, #24
 8009268:	2100      	movs	r1, #0
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fec8 	bl	800a000 <hci_send_req>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	da01      	bge.n	800927a <hci_le_rand+0x4c>
    return BLE_STATUS_TIMEOUT;
 8009276:	23ff      	movs	r3, #255	; 0xff
 8009278:	e00d      	b.n	8009296 <hci_le_rand+0x68>
  if (resp.Status) {
 800927a:	7b3b      	ldrb	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d001      	beq.n	8009284 <hci_le_rand+0x56>
    return resp.Status;
 8009280:	7b3b      	ldrb	r3, [r7, #12]
 8009282:	e008      	b.n	8009296 <hci_le_rand+0x68>
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	461a      	mov	r2, r3
 8009288:	f107 030d 	add.w	r3, r7, #13
 800928c:	6819      	ldr	r1, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	6011      	str	r1, [r2, #0]
 8009292:	6053      	str	r3, [r2, #4]
  return BLE_STATUS_SUCCESS;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3730      	adds	r7, #48	; 0x30
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800929e:	b5b0      	push	{r4, r5, r7, lr}
 80092a0:	b0ce      	sub	sp, #312	; 0x138
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	4605      	mov	r5, r0
 80092a6:	460c      	mov	r4, r1
 80092a8:	4610      	mov	r0, r2
 80092aa:	4619      	mov	r1, r3
 80092ac:	1dfb      	adds	r3, r7, #7
 80092ae:	462a      	mov	r2, r5
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	1d3b      	adds	r3, r7, #4
 80092b4:	4622      	mov	r2, r4
 80092b6:	801a      	strh	r2, [r3, #0]
 80092b8:	1cbb      	adds	r3, r7, #2
 80092ba:	4602      	mov	r2, r0
 80092bc:	801a      	strh	r2, [r3, #0]
 80092be:	1dbb      	adds	r3, r7, #6
 80092c0:	460a      	mov	r2, r1
 80092c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80092c4:	f107 030c 	add.w	r3, r7, #12
 80092c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80092cc:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80092d0:	3308      	adds	r3, #8
 80092d2:	f107 020c 	add.w	r2, r7, #12
 80092d6:	4413      	add	r3, r2
 80092d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80092dc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80092e0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80092e4:	4413      	add	r3, r2
 80092e6:	3309      	adds	r3, #9
 80092e8:	f107 020c 	add.w	r2, r7, #12
 80092ec:	4413      	add	r3, r2
 80092ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80092f2:	f107 030b 	add.w	r3, r7, #11
 80092f6:	2200      	movs	r2, #0
 80092f8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8009300:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009304:	1dfa      	adds	r2, r7, #7
 8009306:	7812      	ldrb	r2, [r2, #0]
 8009308:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800930a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800930e:	3301      	adds	r3, #1
 8009310:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8009314:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009318:	1d3a      	adds	r2, r7, #4
 800931a:	8812      	ldrh	r2, [r2, #0]
 800931c:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009320:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009324:	3302      	adds	r3, #2
 8009326:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800932a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800932e:	1cba      	adds	r2, r7, #2
 8009330:	8812      	ldrh	r2, [r2, #0]
 8009332:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009336:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800933a:	3302      	adds	r3, #2
 800933c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8009340:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009344:	1dba      	adds	r2, r7, #6
 8009346:	7812      	ldrb	r2, [r2, #0]
 8009348:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800934a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800934e:	3301      	adds	r3, #1
 8009350:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8009354:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009358:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800935c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800935e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009362:	3301      	adds	r3, #1
 8009364:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8009368:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800936c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009370:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009372:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009376:	3301      	adds	r3, #1
 8009378:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800937c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009380:	3308      	adds	r3, #8
 8009382:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009386:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800938a:	4618      	mov	r0, r3
 800938c:	f003 fed4 	bl	800d138 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8009390:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8009394:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009398:	4413      	add	r3, r2
 800939a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800939e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093a2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80093a6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80093a8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80093ac:	3301      	adds	r3, #1
 80093ae:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 80093b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093b6:	3301      	adds	r3, #1
 80093b8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80093bc:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80093c0:	4618      	mov	r0, r3
 80093c2:	f003 feb9 	bl	800d138 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 80093c6:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80093ca:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80093ce:	4413      	add	r3, r2
 80093d0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 80093d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80093dc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80093de:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80093e2:	3302      	adds	r3, #2
 80093e4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80093e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ec:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80093f0:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80093f2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80093f6:	3302      	adds	r3, #2
 80093f8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80093fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009400:	2218      	movs	r2, #24
 8009402:	2100      	movs	r1, #0
 8009404:	4618      	mov	r0, r3
 8009406:	f003 fea5 	bl	800d154 <memset>
  rq.ogf = 0x3f;
 800940a:	233f      	movs	r3, #63	; 0x3f
 800940c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8009410:	2383      	movs	r3, #131	; 0x83
 8009412:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009416:	f107 030c 	add.w	r3, r7, #12
 800941a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800941e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009422:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009426:	f107 030b 	add.w	r3, r7, #11
 800942a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800942e:	2301      	movs	r3, #1
 8009430:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009434:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fde0 	bl	800a000 <hci_send_req>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	da01      	bge.n	800944a <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8009446:	23ff      	movs	r3, #255	; 0xff
 8009448:	e009      	b.n	800945e <aci_gap_set_discoverable+0x1c0>
  if (status) {
 800944a:	f107 030b 	add.w	r3, r7, #11
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d003      	beq.n	800945c <aci_gap_set_discoverable+0x1be>
    return status;
 8009454:	f107 030b 	add.w	r3, r7, #11
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	e000      	b.n	800945e <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009464:	46bd      	mov	sp, r7
 8009466:	bdb0      	pop	{r4, r5, r7, pc}

08009468 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8009468:	b590      	push	{r4, r7, lr}
 800946a:	b0cf      	sub	sp, #316	; 0x13c
 800946c:	af00      	add	r7, sp, #0
 800946e:	4604      	mov	r4, r0
 8009470:	4608      	mov	r0, r1
 8009472:	4611      	mov	r1, r2
 8009474:	463a      	mov	r2, r7
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	1dfb      	adds	r3, r7, #7
 800947a:	4622      	mov	r2, r4
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	1dbb      	adds	r3, r7, #6
 8009480:	4602      	mov	r2, r0
 8009482:	701a      	strb	r2, [r3, #0]
 8009484:	1d7b      	adds	r3, r7, #5
 8009486:	460a      	mov	r2, r1
 8009488:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800948a:	f107 0314 	add.w	r3, r7, #20
 800948e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009492:	f107 030c 	add.w	r3, r7, #12
 8009496:	2207      	movs	r2, #7
 8009498:	2100      	movs	r1, #0
 800949a:	4618      	mov	r0, r3
 800949c:	f003 fe5a 	bl	800d154 <memset>
  uint8_t index_input = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 80094a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094aa:	1dfa      	adds	r2, r7, #7
 80094ac:	7812      	ldrb	r2, [r2, #0]
 80094ae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80094b0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80094b4:	3301      	adds	r3, #1
 80094b6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 80094ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094be:	1dba      	adds	r2, r7, #6
 80094c0:	7812      	ldrb	r2, [r2, #0]
 80094c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80094c4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80094c8:	3301      	adds	r3, #1
 80094ca:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 80094ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094d2:	1d7a      	adds	r2, r7, #5
 80094d4:	7812      	ldrb	r2, [r2, #0]
 80094d6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80094d8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80094dc:	3301      	adds	r3, #1
 80094de:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80094e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80094e6:	2218      	movs	r2, #24
 80094e8:	2100      	movs	r1, #0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f003 fe32 	bl	800d154 <memset>
  rq.ogf = 0x3f;
 80094f0:	233f      	movs	r3, #63	; 0x3f
 80094f2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 80094f6:	238a      	movs	r3, #138	; 0x8a
 80094f8:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80094fc:	f107 0314 	add.w	r3, r7, #20
 8009500:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009504:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009508:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800950c:	f107 030c 	add.w	r3, r7, #12
 8009510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009514:	2307      	movs	r3, #7
 8009516:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800951a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800951e:	2100      	movs	r1, #0
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fd6d 	bl	800a000 <hci_send_req>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	da01      	bge.n	8009530 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800952c:	23ff      	movs	r3, #255	; 0xff
 800952e:	e021      	b.n	8009574 <aci_gap_init+0x10c>
  if (resp.Status) {
 8009530:	f107 030c 	add.w	r3, r7, #12
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <aci_gap_init+0xda>
    return resp.Status;
 800953a:	f107 030c 	add.w	r3, r7, #12
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	e018      	b.n	8009574 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8009542:	f107 030c 	add.w	r3, r7, #12
 8009546:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800954a:	b29a      	uxth	r2, r3
 800954c:	463b      	mov	r3, r7
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8009552:	f107 030c 	add.w	r3, r7, #12
 8009556:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800955a:	b29a      	uxth	r2, r3
 800955c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009560:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8009562:	f107 030c 	add.w	r3, r7, #12
 8009566:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800956a:	b29a      	uxth	r2, r3
 800956c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009570:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800957a:	46bd      	mov	sp, r7
 800957c:	bd90      	pop	{r4, r7, pc}

0800957e <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b088      	sub	sp, #32
 8009582:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009588:	f107 0308 	add.w	r3, r7, #8
 800958c:	2218      	movs	r2, #24
 800958e:	2100      	movs	r1, #0
 8009590:	4618      	mov	r0, r3
 8009592:	f003 fddf 	bl	800d154 <memset>
  rq.ogf = 0x3f;
 8009596:	233f      	movs	r3, #63	; 0x3f
 8009598:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800959a:	f240 1301 	movw	r3, #257	; 0x101
 800959e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80095a0:	1dfb      	adds	r3, r7, #7
 80095a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80095a4:	2301      	movs	r3, #1
 80095a6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80095a8:	f107 0308 	add.w	r3, r7, #8
 80095ac:	2100      	movs	r1, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fd26 	bl	800a000 <hci_send_req>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	da01      	bge.n	80095be <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80095ba:	23ff      	movs	r3, #255	; 0xff
 80095bc:	e005      	b.n	80095ca <aci_gatt_init+0x4c>
  if (status) {
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <aci_gatt_init+0x4a>
    return status;
 80095c4:	79fb      	ldrb	r3, [r7, #7]
 80095c6:	e000      	b.n	80095ca <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3720      	adds	r7, #32
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 80095d2:	b590      	push	{r4, r7, lr}
 80095d4:	b0cf      	sub	sp, #316	; 0x13c
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	4604      	mov	r4, r0
 80095da:	4638      	mov	r0, r7
 80095dc:	6001      	str	r1, [r0, #0]
 80095de:	4610      	mov	r0, r2
 80095e0:	4619      	mov	r1, r3
 80095e2:	1dfb      	adds	r3, r7, #7
 80095e4:	4622      	mov	r2, r4
 80095e6:	701a      	strb	r2, [r3, #0]
 80095e8:	1dbb      	adds	r3, r7, #6
 80095ea:	4602      	mov	r2, r0
 80095ec:	701a      	strb	r2, [r3, #0]
 80095ee:	1d7b      	adds	r3, r7, #5
 80095f0:	460a      	mov	r2, r1
 80095f2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80095f4:	f107 030c 	add.w	r3, r7, #12
 80095f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80095fc:	1dfb      	adds	r3, r7, #7
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d007      	beq.n	8009614 <aci_gatt_add_service+0x42>
 8009604:	1dfb      	adds	r3, r7, #7
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d101      	bne.n	8009610 <aci_gatt_add_service+0x3e>
 800960c:	2311      	movs	r3, #17
 800960e:	e002      	b.n	8009616 <aci_gatt_add_service+0x44>
 8009610:	2301      	movs	r3, #1
 8009612:	e000      	b.n	8009616 <aci_gatt_add_service+0x44>
 8009614:	2303      	movs	r3, #3
 8009616:	f107 020c 	add.w	r2, r7, #12
 800961a:	4413      	add	r3, r2
 800961c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009620:	f107 0308 	add.w	r3, r7, #8
 8009624:	2203      	movs	r2, #3
 8009626:	2100      	movs	r1, #0
 8009628:	4618      	mov	r0, r3
 800962a:	f003 fd93 	bl	800d154 <memset>
  uint8_t index_input = 0;
 800962e:	2300      	movs	r3, #0
 8009630:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8009634:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009638:	1dfa      	adds	r2, r7, #7
 800963a:	7812      	ldrb	r2, [r2, #0]
 800963c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800963e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009642:	3301      	adds	r3, #1
 8009644:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8009648:	1dfb      	adds	r3, r7, #7
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d002      	beq.n	8009656 <aci_gatt_add_service+0x84>
 8009650:	2b02      	cmp	r3, #2
 8009652:	d004      	beq.n	800965e <aci_gatt_add_service+0x8c>
 8009654:	e007      	b.n	8009666 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 8009656:	2302      	movs	r3, #2
 8009658:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800965c:	e005      	b.n	800966a <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800965e:	2310      	movs	r3, #16
 8009660:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009664:	e001      	b.n	800966a <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8009666:	2347      	movs	r3, #71	; 0x47
 8009668:	e05d      	b.n	8009726 <aci_gatt_add_service+0x154>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800966a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800966e:	1c58      	adds	r0, r3, #1
 8009670:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009674:	463b      	mov	r3, r7
 8009676:	6819      	ldr	r1, [r3, #0]
 8009678:	f003 fd5e 	bl	800d138 <memcpy>
    index_input += size;
 800967c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8009680:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009684:	4413      	add	r3, r2
 8009686:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800968a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968e:	1dba      	adds	r2, r7, #6
 8009690:	7812      	ldrb	r2, [r2, #0]
 8009692:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009694:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009698:	3301      	adds	r3, #1
 800969a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800969e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a2:	1d7a      	adds	r2, r7, #5
 80096a4:	7812      	ldrb	r2, [r2, #0]
 80096a6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80096a8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80096ac:	3301      	adds	r3, #1
 80096ae:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80096b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096b6:	2218      	movs	r2, #24
 80096b8:	2100      	movs	r1, #0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f003 fd4a 	bl	800d154 <memset>
  rq.ogf = 0x3f;
 80096c0:	233f      	movs	r3, #63	; 0x3f
 80096c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80096c6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80096ca:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80096ce:	f107 030c 	add.w	r3, r7, #12
 80096d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096d6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80096da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80096de:	f107 0308 	add.w	r3, r7, #8
 80096e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80096e6:	2303      	movs	r3, #3
 80096e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80096ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096f0:	2100      	movs	r1, #0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fc84 	bl	800a000 <hci_send_req>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	da01      	bge.n	8009702 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80096fe:	23ff      	movs	r3, #255	; 0xff
 8009700:	e011      	b.n	8009726 <aci_gatt_add_service+0x154>
  if (resp.Status) {
 8009702:	f107 0308 	add.w	r3, r7, #8
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <aci_gatt_add_service+0x142>
    return resp.Status;
 800970c:	f107 0308 	add.w	r3, r7, #8
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	e008      	b.n	8009726 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8009714:	f107 0308 	add.w	r3, r7, #8
 8009718:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800971c:	b29a      	uxth	r2, r3
 800971e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009722:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800972c:	46bd      	mov	sp, r7
 800972e:	bd90      	pop	{r4, r7, pc}

08009730 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8009730:	b590      	push	{r4, r7, lr}
 8009732:	b0d1      	sub	sp, #324	; 0x144
 8009734:	af00      	add	r7, sp, #0
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	f107 0108 	add.w	r1, r7, #8
 800973e:	600a      	str	r2, [r1, #0]
 8009740:	4619      	mov	r1, r3
 8009742:	f107 030e 	add.w	r3, r7, #14
 8009746:	4622      	mov	r2, r4
 8009748:	801a      	strh	r2, [r3, #0]
 800974a:	f107 030d 	add.w	r3, r7, #13
 800974e:	4602      	mov	r2, r0
 8009750:	701a      	strb	r2, [r3, #0]
 8009752:	1dbb      	adds	r3, r7, #6
 8009754:	460a      	mov	r2, r1
 8009756:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009758:	f107 0314 	add.w	r3, r7, #20
 800975c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009760:	f107 030d 	add.w	r3, r7, #13
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d008      	beq.n	800977c <aci_gatt_add_char+0x4c>
 800976a:	f107 030d 	add.w	r3, r7, #13
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d101      	bne.n	8009778 <aci_gatt_add_char+0x48>
 8009774:	2313      	movs	r3, #19
 8009776:	e002      	b.n	800977e <aci_gatt_add_char+0x4e>
 8009778:	2303      	movs	r3, #3
 800977a:	e000      	b.n	800977e <aci_gatt_add_char+0x4e>
 800977c:	2305      	movs	r3, #5
 800977e:	f107 0214 	add.w	r2, r7, #20
 8009782:	4413      	add	r3, r2
 8009784:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009788:	f107 0310 	add.w	r3, r7, #16
 800978c:	2203      	movs	r2, #3
 800978e:	2100      	movs	r1, #0
 8009790:	4618      	mov	r0, r3
 8009792:	f003 fcdf 	bl	800d154 <memset>
  uint8_t index_input = 0;
 8009796:	2300      	movs	r3, #0
 8009798:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 800979c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80097a0:	f107 020e 	add.w	r2, r7, #14
 80097a4:	8812      	ldrh	r2, [r2, #0]
 80097a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80097a8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80097ac:	3302      	adds	r3, #2
 80097ae:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80097b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80097b6:	f107 020d 	add.w	r2, r7, #13
 80097ba:	7812      	ldrb	r2, [r2, #0]
 80097bc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80097be:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80097c2:	3301      	adds	r3, #1
 80097c4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80097c8:	f107 030d 	add.w	r3, r7, #13
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d002      	beq.n	80097d8 <aci_gatt_add_char+0xa8>
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d004      	beq.n	80097e0 <aci_gatt_add_char+0xb0>
 80097d6:	e007      	b.n	80097e8 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 80097d8:	2302      	movs	r3, #2
 80097da:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80097de:	e005      	b.n	80097ec <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80097e0:	2310      	movs	r3, #16
 80097e2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80097e6:	e001      	b.n	80097ec <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80097e8:	2347      	movs	r3, #71	; 0x47
 80097ea:	e086      	b.n	80098fa <aci_gatt_add_char+0x1ca>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 80097ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80097f0:	1cd8      	adds	r0, r3, #3
 80097f2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80097f6:	f107 0308 	add.w	r3, r7, #8
 80097fa:	6819      	ldr	r1, [r3, #0]
 80097fc:	f003 fc9c 	bl	800d138 <memcpy>
    index_input += size;
 8009800:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8009804:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009808:	4413      	add	r3, r2
 800980a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800980e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009812:	1dba      	adds	r2, r7, #6
 8009814:	8812      	ldrh	r2, [r2, #0]
 8009816:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009818:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800981c:	3302      	adds	r3, #2
 800981e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 8009822:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009826:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800982a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800982c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009830:	3301      	adds	r3, #1
 8009832:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8009836:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800983a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800983e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009840:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009844:	3301      	adds	r3, #1
 8009846:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800984a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800984e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009852:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009854:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009858:	3301      	adds	r3, #1
 800985a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800985e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009862:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009866:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009868:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800986c:	3301      	adds	r3, #1
 800986e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8009872:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009876:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800987a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800987c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009880:	3301      	adds	r3, #1
 8009882:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009886:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800988a:	2218      	movs	r2, #24
 800988c:	2100      	movs	r1, #0
 800988e:	4618      	mov	r0, r3
 8009890:	f003 fc60 	bl	800d154 <memset>
  rq.ogf = 0x3f;
 8009894:	233f      	movs	r3, #63	; 0x3f
 8009896:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800989a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800989e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80098a2:	f107 0314 	add.w	r3, r7, #20
 80098a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80098aa:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80098ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80098b2:	f107 0310 	add.w	r3, r7, #16
 80098b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80098ba:	2303      	movs	r3, #3
 80098bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80098c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80098c4:	2100      	movs	r1, #0
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fb9a 	bl	800a000 <hci_send_req>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	da01      	bge.n	80098d6 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80098d2:	23ff      	movs	r3, #255	; 0xff
 80098d4:	e011      	b.n	80098fa <aci_gatt_add_char+0x1ca>
  if (resp.Status) {
 80098d6:	f107 0310 	add.w	r3, r7, #16
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80098e0:	f107 0310 	add.w	r3, r7, #16
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	e008      	b.n	80098fa <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80098e8:	f107 0310 	add.w	r3, r7, #16
 80098ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80098f6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009900:	46bd      	mov	sp, r7
 8009902:	bd90      	pop	{r4, r7, pc}

08009904 <aci_gatt_add_char_desc>:
                                  uint8_t Access_Permissions,
                                  uint8_t GATT_Evt_Mask,
                                  uint8_t Enc_Key_Size,
                                  uint8_t Is_Variable,
                                  uint16_t *Char_Desc_Handle)
{
 8009904:	b590      	push	{r4, r7, lr}
 8009906:	b0d3      	sub	sp, #332	; 0x14c
 8009908:	af00      	add	r7, sp, #0
 800990a:	4604      	mov	r4, r0
 800990c:	4608      	mov	r0, r1
 800990e:	4611      	mov	r1, r2
 8009910:	1d3a      	adds	r2, r7, #4
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	f107 030e 	add.w	r3, r7, #14
 8009918:	4622      	mov	r2, r4
 800991a:	801a      	strh	r2, [r3, #0]
 800991c:	f107 030c 	add.w	r3, r7, #12
 8009920:	4602      	mov	r2, r0
 8009922:	801a      	strh	r2, [r3, #0]
 8009924:	f107 030b 	add.w	r3, r7, #11
 8009928:	460a      	mov	r2, r1
 800992a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_desc_cp0 *cp0 = (aci_gatt_add_char_desc_cp0*)(cmd_buffer);
 800992c:	f107 0318 	add.w	r3, r7, #24
 8009930:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8009934:	f107 030b 	add.w	r3, r7, #11
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d008      	beq.n	8009950 <aci_gatt_add_char_desc+0x4c>
 800993e:	f107 030b 	add.w	r3, r7, #11
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d101      	bne.n	800994c <aci_gatt_add_char_desc+0x48>
 8009948:	2315      	movs	r3, #21
 800994a:	e002      	b.n	8009952 <aci_gatt_add_char_desc+0x4e>
 800994c:	2305      	movs	r3, #5
 800994e:	e000      	b.n	8009952 <aci_gatt_add_char_desc+0x4e>
 8009950:	2307      	movs	r3, #7
 8009952:	f107 0218 	add.w	r2, r7, #24
 8009956:	4413      	add	r3, r2
 8009958:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 800995c:	f107 030b 	add.w	r3, r7, #11
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d008      	beq.n	8009978 <aci_gatt_add_char_desc+0x74>
 8009966:	f107 030b 	add.w	r3, r7, #11
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b02      	cmp	r3, #2
 800996e:	d101      	bne.n	8009974 <aci_gatt_add_char_desc+0x70>
 8009970:	2317      	movs	r3, #23
 8009972:	e002      	b.n	800997a <aci_gatt_add_char_desc+0x76>
 8009974:	2307      	movs	r3, #7
 8009976:	e000      	b.n	800997a <aci_gatt_add_char_desc+0x76>
 8009978:	2309      	movs	r3, #9
 800997a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800997e:	4413      	add	r3, r2
 8009980:	f107 0218 	add.w	r2, r7, #24
 8009984:	4413      	add	r3, r2
 8009986:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_desc_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800998a:	f107 0314 	add.w	r3, r7, #20
 800998e:	2203      	movs	r2, #3
 8009990:	2100      	movs	r1, #0
 8009992:	4618      	mov	r0, r3
 8009994:	f003 fbde 	bl	800d154 <memset>
  uint8_t index_input = 0;
 8009998:	2300      	movs	r3, #0
 800999a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  cp0->Service_Handle = htob(Service_Handle, 2);
 800999e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80099a2:	f107 020e 	add.w	r2, r7, #14
 80099a6:	8812      	ldrh	r2, [r2, #0]
 80099a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80099aa:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80099ae:	3302      	adds	r3, #2
 80099b0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  cp0->Char_Handle = htob(Char_Handle, 2);
 80099b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80099b8:	f107 020c 	add.w	r2, r7, #12
 80099bc:	8812      	ldrh	r2, [r2, #0]
 80099be:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80099c0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80099c4:	3302      	adds	r3, #2
 80099c6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 80099ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80099ce:	f107 020b 	add.w	r2, r7, #11
 80099d2:	7812      	ldrb	r2, [r2, #0]
 80099d4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80099d6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80099da:	3301      	adds	r3, #1
 80099dc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_Desc_Uuid_Type) {
 80099e0:	f107 030b 	add.w	r3, r7, #11
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d002      	beq.n	80099f0 <aci_gatt_add_char_desc+0xec>
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d004      	beq.n	80099f8 <aci_gatt_add_char_desc+0xf4>
 80099ee:	e007      	b.n	8009a00 <aci_gatt_add_char_desc+0xfc>
      case 1: size = 2; break;
 80099f0:	2302      	movs	r3, #2
 80099f2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 80099f6:	e005      	b.n	8009a04 <aci_gatt_add_char_desc+0x100>
      case 2: size = 16; break;
 80099f8:	2310      	movs	r3, #16
 80099fa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 80099fe:	e001      	b.n	8009a04 <aci_gatt_add_char_desc+0x100>
      default: return BLE_STATUS_ERROR;
 8009a00:	2347      	movs	r3, #71	; 0x47
 8009a02:	e0a0      	b.n	8009b46 <aci_gatt_add_char_desc+0x242>
    }
    BLUENRG_memcpy((void *) &cp0->Char_Desc_Uuid, (const void *) Char_Desc_Uuid, size);
 8009a04:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009a08:	1d58      	adds	r0, r3, #5
 8009a0a:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8009a0e:	1d3b      	adds	r3, r7, #4
 8009a10:	6819      	ldr	r1, [r3, #0]
 8009a12:	f003 fb91 	bl	800d138 <memcpy>
    index_input += size;
 8009a16:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009a1a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8009a1e:	4413      	add	r3, r2
 8009a20:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp1->Char_Desc_Value_Max_Len = htob(Char_Desc_Value_Max_Len, 1);
 8009a24:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009a28:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009a2c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009a2e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009a32:	3301      	adds	r3, #1
 8009a34:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp1->Char_Desc_Value_Length = htob(Char_Desc_Value_Length, 1);
 8009a38:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009a3c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009a40:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009a42:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009a46:	3301      	adds	r3, #1
 8009a48:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8009a4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8009a50:	3302      	adds	r3, #2
 8009a52:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009a56:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f003 fb6c 	bl	800d138 <memcpy>
    index_input += Char_Desc_Value_Length*sizeof(uint8_t);
 8009a60:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009a64:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 8009a68:	4413      	add	r3, r2
 8009a6a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8009a6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009a72:	f897 2164 	ldrb.w	r2, [r7, #356]	; 0x164
 8009a76:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009a78:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp2->Access_Permissions = htob(Access_Permissions, 1);
 8009a82:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009a86:	f897 2168 	ldrb.w	r2, [r7, #360]	; 0x168
 8009a8a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009a8c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009a90:	3301      	adds	r3, #1
 8009a92:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp2->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8009a96:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009a9a:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8009a9e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009aa0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp2->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8009aaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009aae:	f897 2170 	ldrb.w	r2, [r7, #368]	; 0x170
 8009ab2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009ab4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009ab8:	3301      	adds	r3, #1
 8009aba:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    {
      cp2->Is_Variable = htob(Is_Variable, 1);
 8009abe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009ac2:	f897 2174 	ldrb.w	r2, [r7, #372]	; 0x174
 8009ac6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009ac8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009acc:	3301      	adds	r3, #1
 8009ace:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009ad2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8009ad6:	2218      	movs	r2, #24
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f003 fb3a 	bl	800d154 <memset>
  rq.ogf = 0x3f;
 8009ae0:	233f      	movs	r3, #63	; 0x3f
 8009ae2:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
  rq.ocf = 0x105;
 8009ae6:	f240 1305 	movw	r3, #261	; 0x105
 8009aea:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
  rq.cparam = cmd_buffer;
 8009aee:	f107 0318 	add.w	r3, r7, #24
 8009af2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.clen = index_input;
 8009af6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009afa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rparam = &resp;
 8009afe:	f107 0314 	add.w	r3, r7, #20
 8009b02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  rq.rlen = sizeof(resp);
 8009b06:	2303      	movs	r3, #3
 8009b08:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  if (hci_send_req(&rq, FALSE) < 0)
 8009b0c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8009b10:	2100      	movs	r1, #0
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 fa74 	bl	800a000 <hci_send_req>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da01      	bge.n	8009b22 <aci_gatt_add_char_desc+0x21e>
    return BLE_STATUS_TIMEOUT;
 8009b1e:	23ff      	movs	r3, #255	; 0xff
 8009b20:	e011      	b.n	8009b46 <aci_gatt_add_char_desc+0x242>
  if (resp.Status) {
 8009b22:	f107 0314 	add.w	r3, r7, #20
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <aci_gatt_add_char_desc+0x230>
    return resp.Status;
 8009b2c:	f107 0314 	add.w	r3, r7, #20
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	e008      	b.n	8009b46 <aci_gatt_add_char_desc+0x242>
  }
  *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
 8009b34:	f107 0314 	add.w	r3, r7, #20
 8009b38:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009b42:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd90      	pop	{r4, r7, pc}

08009b50 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8009b50:	b5b0      	push	{r4, r5, r7, lr}
 8009b52:	b0cc      	sub	sp, #304	; 0x130
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4605      	mov	r5, r0
 8009b58:	460c      	mov	r4, r1
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	1dbb      	adds	r3, r7, #6
 8009b60:	462a      	mov	r2, r5
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	1d3b      	adds	r3, r7, #4
 8009b66:	4622      	mov	r2, r4
 8009b68:	801a      	strh	r2, [r3, #0]
 8009b6a:	1cfb      	adds	r3, r7, #3
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	701a      	strb	r2, [r3, #0]
 8009b70:	1cbb      	adds	r3, r7, #2
 8009b72:	460a      	mov	r2, r1
 8009b74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009b76:	f107 030c 	add.w	r3, r7, #12
 8009b7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b7e:	f107 030b 	add.w	r3, r7, #11
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b90:	1dba      	adds	r2, r7, #6
 8009b92:	8812      	ldrh	r2, [r2, #0]
 8009b94:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009b96:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009b9a:	3302      	adds	r3, #2
 8009b9c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8009ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba4:	1d3a      	adds	r2, r7, #4
 8009ba6:	8812      	ldrh	r2, [r2, #0]
 8009ba8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009baa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009bae:	3302      	adds	r3, #2
 8009bb0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 8009bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bb8:	1cfa      	adds	r2, r7, #3
 8009bba:	7812      	ldrb	r2, [r2, #0]
 8009bbc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009bbe:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8009bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bcc:	1cba      	adds	r2, r7, #2
 8009bce:	7812      	ldrb	r2, [r2, #0]
 8009bd0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009bd2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8009bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009be0:	1d98      	adds	r0, r3, #6
 8009be2:	1cbb      	adds	r3, r7, #2
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009bec:	f003 faa4 	bl	800d138 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8009bf0:	1cbb      	adds	r3, r7, #2
 8009bf2:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009bfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c02:	2218      	movs	r2, #24
 8009c04:	2100      	movs	r1, #0
 8009c06:	4618      	mov	r0, r3
 8009c08:	f003 faa4 	bl	800d154 <memset>
  rq.ogf = 0x3f;
 8009c0c:	233f      	movs	r3, #63	; 0x3f
 8009c0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009c12:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009c16:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009c1a:	f107 030c 	add.w	r3, r7, #12
 8009c1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c22:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009c26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009c2a:	f107 030b 	add.w	r3, r7, #11
 8009c2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009c32:	2301      	movs	r3, #1
 8009c34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009c38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f000 f9de 	bl	800a000 <hci_send_req>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	da01      	bge.n	8009c4e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8009c4a:	23ff      	movs	r3, #255	; 0xff
 8009c4c:	e009      	b.n	8009c62 <aci_gatt_update_char_value+0x112>
  if (status) {
 8009c4e:	f107 030b 	add.w	r3, r7, #11
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d003      	beq.n	8009c60 <aci_gatt_update_char_value+0x110>
    return status;
 8009c58:	f107 030b 	add.w	r3, r7, #11
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	e000      	b.n	8009c62 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bdb0      	pop	{r4, r5, r7, pc}

08009c6c <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b0cc      	sub	sp, #304	; 0x130
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	463b      	mov	r3, r7
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	1dfb      	adds	r3, r7, #7
 8009c78:	4602      	mov	r2, r0
 8009c7a:	701a      	strb	r2, [r3, #0]
 8009c7c:	1dbb      	adds	r3, r7, #6
 8009c7e:	460a      	mov	r2, r1
 8009c80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009c82:	f107 030c 	add.w	r3, r7, #12
 8009c86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009c8a:	f107 030b 	add.w	r3, r7, #11
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 8009c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c9c:	1dfa      	adds	r2, r7, #7
 8009c9e:	7812      	ldrb	r2, [r2, #0]
 8009ca0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009ca2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8009cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb0:	1dba      	adds	r2, r7, #6
 8009cb2:	7812      	ldrb	r2, [r2, #0]
 8009cb4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009cb6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009cba:	3301      	adds	r3, #1
 8009cbc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8009cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc4:	1c98      	adds	r0, r3, #2
 8009cc6:	1dbb      	adds	r3, r7, #6
 8009cc8:	781a      	ldrb	r2, [r3, #0]
 8009cca:	463b      	mov	r3, r7
 8009ccc:	6819      	ldr	r1, [r3, #0]
 8009cce:	f003 fa33 	bl	800d138 <memcpy>
    index_input += Length*sizeof(uint8_t);
 8009cd2:	1dbb      	adds	r3, r7, #6
 8009cd4:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009ce0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ce4:	2218      	movs	r2, #24
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f003 fa33 	bl	800d154 <memset>
  rq.ogf = 0x3f;
 8009cee:	233f      	movs	r3, #63	; 0x3f
 8009cf0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009cf4:	230c      	movs	r3, #12
 8009cf6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009cfa:	f107 030c 	add.w	r3, r7, #12
 8009cfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d02:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009d06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009d0a:	f107 030b 	add.w	r3, r7, #11
 8009d0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d12:	2301      	movs	r3, #1
 8009d14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009d18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 f96e 	bl	800a000 <hci_send_req>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	da01      	bge.n	8009d2e <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8009d2a:	23ff      	movs	r3, #255	; 0xff
 8009d2c:	e009      	b.n	8009d42 <aci_hal_write_config_data+0xd6>
  if (status) {
 8009d2e:	f107 030b 	add.w	r3, r7, #11
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d003      	beq.n	8009d40 <aci_hal_write_config_data+0xd4>
    return status;
 8009d38:	f107 030b 	add.w	r3, r7, #11
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	e000      	b.n	8009d42 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b0cc      	sub	sp, #304	; 0x130
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	4602      	mov	r2, r0
 8009d54:	1dfb      	adds	r3, r7, #7
 8009d56:	701a      	strb	r2, [r3, #0]
 8009d58:	1dbb      	adds	r3, r7, #6
 8009d5a:	460a      	mov	r2, r1
 8009d5c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009d5e:	f107 030c 	add.w	r3, r7, #12
 8009d62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009d66:	f107 030b 	add.w	r3, r7, #11
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 8009d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d78:	1dfa      	adds	r2, r7, #7
 8009d7a:	7812      	ldrb	r2, [r2, #0]
 8009d7c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d7e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009d82:	3301      	adds	r3, #1
 8009d84:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 8009d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d8c:	1dba      	adds	r2, r7, #6
 8009d8e:	7812      	ldrb	r2, [r2, #0]
 8009d90:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009d92:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009d96:	3301      	adds	r3, #1
 8009d98:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009d9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009da0:	2218      	movs	r2, #24
 8009da2:	2100      	movs	r1, #0
 8009da4:	4618      	mov	r0, r3
 8009da6:	f003 f9d5 	bl	800d154 <memset>
  rq.ogf = 0x3f;
 8009daa:	233f      	movs	r3, #63	; 0x3f
 8009dac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009db0:	230f      	movs	r3, #15
 8009db2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009db6:	f107 030c 	add.w	r3, r7, #12
 8009dba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009dbe:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009dc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009dc6:	f107 030b 	add.w	r3, r7, #11
 8009dca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009dd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009dd8:	2100      	movs	r1, #0
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f910 	bl	800a000 <hci_send_req>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da01      	bge.n	8009dea <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8009de6:	23ff      	movs	r3, #255	; 0xff
 8009de8:	e009      	b.n	8009dfe <aci_hal_set_tx_power_level+0xb2>
  if (status) {
 8009dea:	f107 030b 	add.w	r3, r7, #11
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <aci_hal_set_tx_power_level+0xb0>
    return status;
 8009df4:	f107 030b 	add.w	r3, r7, #11
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	e000      	b.n	8009dfe <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3308      	adds	r3, #8
 8009e14:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	2b04      	cmp	r3, #4
 8009e1c:	d001      	beq.n	8009e22 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e00c      	b.n	8009e3c <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3302      	adds	r3, #2
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009e30:	3b03      	subs	r3, #3
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d001      	beq.n	8009e3a <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8009e36:	2302      	movs	r3, #2
 8009e38:	e000      	b.n	8009e3c <verify_packet+0x34>
  
  return 0;      
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b0a6      	sub	sp, #152	; 0x98
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	607b      	str	r3, [r7, #4]
 8009e50:	4603      	mov	r3, r0
 8009e52:	81fb      	strh	r3, [r7, #14]
 8009e54:	460b      	mov	r3, r1
 8009e56:	81bb      	strh	r3, [r7, #12]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8009e5c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e64:	b21a      	sxth	r2, r3
 8009e66:	89fb      	ldrh	r3, [r7, #14]
 8009e68:	029b      	lsls	r3, r3, #10
 8009e6a:	b21b      	sxth	r3, r3
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	b21b      	sxth	r3, r3
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8009e74:	7afb      	ldrb	r3, [r7, #11]
 8009e76:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009e7c:	f107 0318 	add.w	r3, r7, #24
 8009e80:	3301      	adds	r3, #1
 8009e82:	461a      	mov	r2, r3
 8009e84:	f107 0314 	add.w	r3, r7, #20
 8009e88:	8819      	ldrh	r1, [r3, #0]
 8009e8a:	789b      	ldrb	r3, [r3, #2]
 8009e8c:	8011      	strh	r1, [r2, #0]
 8009e8e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009e90:	f107 0318 	add.w	r3, r7, #24
 8009e94:	3304      	adds	r3, #4
 8009e96:	7afa      	ldrb	r2, [r7, #11]
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f003 f94c 	bl	800d138 <memcpy>
  
  if (hciContext.io.Send)
 8009ea0:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <send_cmd+0x7c>)
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d009      	beq.n	8009ebc <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009ea8:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <send_cmd+0x7c>)
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	7afa      	ldrb	r2, [r7, #11]
 8009eae:	b292      	uxth	r2, r2
 8009eb0:	3204      	adds	r2, #4
 8009eb2:	b291      	uxth	r1, r2
 8009eb4:	f107 0218 	add.w	r2, r7, #24
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4798      	blx	r3
  }
}
 8009ebc:	bf00      	nop
 8009ebe:	3798      	adds	r7, #152	; 0x98
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	20000754 	.word	0x20000754

08009ec8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8009ed2:	e00a      	b.n	8009eea <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8009ed4:	f107 030c 	add.w	r3, r7, #12
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6838      	ldr	r0, [r7, #0]
 8009edc:	f000 fabe 	bl	800a45c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fa25 	bl	800a334 <list_insert_head>
  while (!list_is_empty(src_list))
 8009eea:	6838      	ldr	r0, [r7, #0]
 8009eec:	f000 fa00 	bl	800a2f0 <list_is_empty>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0ee      	beq.n	8009ed4 <move_list+0xc>
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	bf00      	nop
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009f06:	e009      	b.n	8009f1c <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8009f08:	1d3b      	adds	r3, r7, #4
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4809      	ldr	r0, [pc, #36]	; (8009f34 <free_event_list+0x34>)
 8009f0e:	f000 fa7e 	bl	800a40e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4619      	mov	r1, r3
 8009f16:	4808      	ldr	r0, [pc, #32]	; (8009f38 <free_event_list+0x38>)
 8009f18:	f000 fa32 	bl	800a380 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8009f1c:	4806      	ldr	r0, [pc, #24]	; (8009f38 <free_event_list+0x38>)
 8009f1e:	f000 fac4 	bl	800a4aa <list_get_size>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	ddef      	ble.n	8009f08 <free_event_list+0x8>
  }
}
 8009f28:	bf00      	nop
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20009b54 	.word	0x20009b54
 8009f38:	20009b4c 	.word	0x20009b4c

08009f3c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8009f4c:	4a18      	ldr	r2, [pc, #96]	; (8009fb0 <hci_init+0x74>)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8009f52:	4818      	ldr	r0, [pc, #96]	; (8009fb4 <hci_init+0x78>)
 8009f54:	f000 f9bc 	bl	800a2d0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009f58:	4817      	ldr	r0, [pc, #92]	; (8009fb8 <hci_init+0x7c>)
 8009f5a:	f000 f9b9 	bl	800a2d0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8009f5e:	f7f6 fc7b 	bl	8000858 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009f62:	2300      	movs	r3, #0
 8009f64:	73fb      	strb	r3, [r7, #15]
 8009f66:	e00c      	b.n	8009f82 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	228c      	movs	r2, #140	; 0x8c
 8009f6c:	fb02 f303 	mul.w	r3, r2, r3
 8009f70:	4a12      	ldr	r2, [pc, #72]	; (8009fbc <hci_init+0x80>)
 8009f72:	4413      	add	r3, r2
 8009f74:	4619      	mov	r1, r3
 8009f76:	480f      	ldr	r0, [pc, #60]	; (8009fb4 <hci_init+0x78>)
 8009f78:	f000 fa02 	bl	800a380 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	73fb      	strb	r3, [r7, #15]
 8009f82:	7bfb      	ldrb	r3, [r7, #15]
 8009f84:	2b09      	cmp	r3, #9
 8009f86:	d9ef      	bls.n	8009f68 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009f88:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <hci_init+0x74>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d003      	beq.n	8009f98 <hci_init+0x5c>
 8009f90:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <hci_init+0x74>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2000      	movs	r0, #0
 8009f96:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009f98:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <hci_init+0x74>)
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <hci_init+0x6a>
 8009fa0:	4b03      	ldr	r3, [pc, #12]	; (8009fb0 <hci_init+0x74>)
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	4798      	blx	r3
}
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000754 	.word	0x20000754
 8009fb4:	20009b4c 	.word	0x20009b4c
 8009fb8:	20009b54 	.word	0x20009b54
 8009fbc:	200001dc 	.word	0x200001dc

08009fc0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a0b      	ldr	r2, [pc, #44]	; (8009ffc <hci_register_io_bus+0x3c>)
 8009fce:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	4a09      	ldr	r2, [pc, #36]	; (8009ffc <hci_register_io_bus+0x3c>)
 8009fd6:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	4a07      	ldr	r2, [pc, #28]	; (8009ffc <hci_register_io_bus+0x3c>)
 8009fde:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	4a05      	ldr	r2, [pc, #20]	; (8009ffc <hci_register_io_bus+0x3c>)
 8009fe6:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	4a03      	ldr	r2, [pc, #12]	; (8009ffc <hci_register_io_bus+0x3c>)
 8009fee:	6093      	str	r3, [r2, #8]
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	20000754 	.word	0x20000754

0800a000 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	; 0x38
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	460b      	mov	r3, r1
 800a00a:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	885b      	ldrh	r3, [r3, #2]
 800a010:	b21b      	sxth	r3, r3
 800a012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a016:	b21a      	sxth	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	029b      	lsls	r3, r3, #10
 800a01e:	b21b      	sxth	r3, r3
 800a020:	4313      	orrs	r3, r2
 800a022:	b21b      	sxth	r3, r3
 800a024:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800a026:	2300      	movs	r3, #0
 800a028:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800a02a:	f107 0308 	add.w	r3, r7, #8
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f94e 	bl	800a2d0 <list_init_head>

  free_event_list();
 800a034:	f7ff ff64 	bl	8009f00 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	8818      	ldrh	r0, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	8859      	ldrh	r1, [r3, #2]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	b2da      	uxtb	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f7ff fefd 	bl	8009e48 <send_cmd>
  
  if (async)
 800a04e:	78fb      	ldrb	r3, [r7, #3]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d001      	beq.n	800a058 <hci_send_req+0x58>
  {
    return 0;
 800a054:	2300      	movs	r3, #0
 800a056:	e0e5      	b.n	800a224 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800a058:	f7f7 ffd4 	bl	8002004 <HAL_GetTick>
 800a05c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a05e:	f7f7 ffd1 	bl	8002004 <HAL_GetTick>
 800a062:	4602      	mov	r2, r0
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a06c:	f200 80b6 	bhi.w	800a1dc <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800a070:	486e      	ldr	r0, [pc, #440]	; (800a22c <hci_send_req+0x22c>)
 800a072:	f000 f93d 	bl	800a2f0 <list_is_empty>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d000      	beq.n	800a07e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800a07c:	e7ef      	b.n	800a05e <hci_send_req+0x5e>
      {
        break;
 800a07e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800a080:	f107 0310 	add.w	r3, r7, #16
 800a084:	4619      	mov	r1, r3
 800a086:	4869      	ldr	r0, [pc, #420]	; (800a22c <hci_send_req+0x22c>)
 800a088:	f000 f9c1 	bl	800a40e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	3308      	adds	r3, #8
 800a090:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800a092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b04      	cmp	r3, #4
 800a098:	d17b      	bne.n	800a192 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	3301      	adds	r3, #1
 800a09e:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	3303      	adds	r3, #3
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a0ae:	3b03      	subs	r3, #3
 800a0b0:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	2b3e      	cmp	r3, #62	; 0x3e
 800a0b8:	d04d      	beq.n	800a156 <hci_send_req+0x156>
 800a0ba:	2b3e      	cmp	r3, #62	; 0x3e
 800a0bc:	dc6b      	bgt.n	800a196 <hci_send_req+0x196>
 800a0be:	2b10      	cmp	r3, #16
 800a0c0:	f000 808e 	beq.w	800a1e0 <hci_send_req+0x1e0>
 800a0c4:	2b10      	cmp	r3, #16
 800a0c6:	dc66      	bgt.n	800a196 <hci_send_req+0x196>
 800a0c8:	2b0e      	cmp	r3, #14
 800a0ca:	d024      	beq.n	800a116 <hci_send_req+0x116>
 800a0cc:	2b0f      	cmp	r3, #15
 800a0ce:	d162      	bne.n	800a196 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	885b      	ldrh	r3, [r3, #2]
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	f040 8081 	bne.w	800a1e4 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	2b0f      	cmp	r3, #15
 800a0e8:	d004      	beq.n	800a0f4 <hci_send_req+0xf4>
          if (cs->status) {
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d053      	beq.n	800a19a <hci_send_req+0x19a>
            goto failed;
 800a0f2:	e07a      	b.n	800a1ea <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	695a      	ldr	r2, [r3, #20]
 800a0f8:	6a3b      	ldr	r3, [r7, #32]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	bf28      	it	cs
 800a0fe:	461a      	movcs	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6918      	ldr	r0, [r3, #16]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	461a      	mov	r2, r3
 800a10e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a110:	f003 f812 	bl	800d138 <memcpy>
        goto done;
 800a114:	e07a      	b.n	800a20c <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800a116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a118:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a120:	b29b      	uxth	r3, r3
 800a122:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a124:	429a      	cmp	r2, r3
 800a126:	d15f      	bne.n	800a1e8 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12a:	3303      	adds	r3, #3
 800a12c:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	3b03      	subs	r3, #3
 800a132:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	695a      	ldr	r2, [r3, #20]
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	bf28      	it	cs
 800a13e:	461a      	movcs	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6918      	ldr	r0, [r3, #16]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	461a      	mov	r2, r3
 800a14e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a150:	f002 fff2 	bl	800d138 <memcpy>
        goto done;
 800a154:	e05a      	b.n	800a20c <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800a156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a158:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	429a      	cmp	r2, r3
 800a166:	d11a      	bne.n	800a19e <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	695a      	ldr	r2, [r3, #20]
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	429a      	cmp	r2, r3
 800a176:	bf28      	it	cs
 800a178:	461a      	movcs	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6918      	ldr	r0, [r3, #16]
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	1c59      	adds	r1, r3, #1
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	461a      	mov	r2, r3
 800a18c:	f002 ffd4 	bl	800d138 <memcpy>
        goto done;
 800a190:	e03c      	b.n	800a20c <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800a192:	bf00      	nop
 800a194:	e004      	b.n	800a1a0 <hci_send_req+0x1a0>
        break;
 800a196:	bf00      	nop
 800a198:	e002      	b.n	800a1a0 <hci_send_req+0x1a0>
          break;
 800a19a:	bf00      	nop
 800a19c:	e000      	b.n	800a1a0 <hci_send_req+0x1a0>
          break;
 800a19e:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800a1a0:	4823      	ldr	r0, [pc, #140]	; (800a230 <hci_send_req+0x230>)
 800a1a2:	f000 f8a5 	bl	800a2f0 <list_is_empty>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00d      	beq.n	800a1c8 <hci_send_req+0x1c8>
 800a1ac:	481f      	ldr	r0, [pc, #124]	; (800a22c <hci_send_req+0x22c>)
 800a1ae:	f000 f89f 	bl	800a2f0 <list_is_empty>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d007      	beq.n	800a1c8 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	481c      	ldr	r0, [pc, #112]	; (800a230 <hci_send_req+0x230>)
 800a1be:	f000 f8df 	bl	800a380 <list_insert_tail>
      hciReadPacket=NULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	613b      	str	r3, [r7, #16]
 800a1c6:	e008      	b.n	800a1da <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	f107 0308 	add.w	r3, r7, #8
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 f8d5 	bl	800a380 <list_insert_tail>
      hciReadPacket=NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	613b      	str	r3, [r7, #16]
  {
 800a1da:	e73d      	b.n	800a058 <hci_send_req+0x58>
        goto failed;
 800a1dc:	bf00      	nop
 800a1de:	e004      	b.n	800a1ea <hci_send_req+0x1ea>
        goto failed;
 800a1e0:	bf00      	nop
 800a1e2:	e002      	b.n	800a1ea <hci_send_req+0x1ea>
          goto failed;
 800a1e4:	bf00      	nop
 800a1e6:	e000      	b.n	800a1ea <hci_send_req+0x1ea>
          goto failed;
 800a1e8:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d004      	beq.n	800a1fa <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	480e      	ldr	r0, [pc, #56]	; (800a230 <hci_send_req+0x230>)
 800a1f6:	f000 f89d 	bl	800a334 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a1fa:	f107 0308 	add.w	r3, r7, #8
 800a1fe:	4619      	mov	r1, r3
 800a200:	480a      	ldr	r0, [pc, #40]	; (800a22c <hci_send_req+0x22c>)
 800a202:	f7ff fe61 	bl	8009ec8 <move_list>

  return -1;
 800a206:	f04f 33ff 	mov.w	r3, #4294967295
 800a20a:	e00b      	b.n	800a224 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	4619      	mov	r1, r3
 800a210:	4807      	ldr	r0, [pc, #28]	; (800a230 <hci_send_req+0x230>)
 800a212:	f000 f88f 	bl	800a334 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800a216:	f107 0308 	add.w	r3, r7, #8
 800a21a:	4619      	mov	r1, r3
 800a21c:	4803      	ldr	r0, [pc, #12]	; (800a22c <hci_send_req+0x22c>)
 800a21e:	f7ff fe53 	bl	8009ec8 <move_list>

  return 0;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3738      	adds	r7, #56	; 0x38
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20009b54 	.word	0x20009b54
 800a230:	20009b4c 	.word	0x20009b4c

0800a234 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800a23c:	2300      	movs	r3, #0
 800a23e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800a244:	481f      	ldr	r0, [pc, #124]	; (800a2c4 <hci_notify_asynch_evt+0x90>)
 800a246:	f000 f853 	bl	800a2f0 <list_is_empty>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d132      	bne.n	800a2b6 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800a250:	f107 030c 	add.w	r3, r7, #12
 800a254:	4619      	mov	r1, r3
 800a256:	481b      	ldr	r0, [pc, #108]	; (800a2c4 <hci_notify_asynch_evt+0x90>)
 800a258:	f000 f8d9 	bl	800a40e <list_remove_head>
    
    if (hciContext.io.Receive)
 800a25c:	4b1a      	ldr	r3, [pc, #104]	; (800a2c8 <hci_notify_asynch_evt+0x94>)
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d02a      	beq.n	800a2ba <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800a264:	4b18      	ldr	r3, [pc, #96]	; (800a2c8 <hci_notify_asynch_evt+0x94>)
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	3208      	adds	r2, #8
 800a26c:	2180      	movs	r1, #128	; 0x80
 800a26e:	4610      	mov	r0, r2
 800a270:	4798      	blx	r3
 800a272:	4603      	mov	r3, r0
 800a274:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800a276:	7cfb      	ldrb	r3, [r7, #19]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d016      	beq.n	800a2aa <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	7cfa      	ldrb	r2, [r7, #19]
 800a280:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff fdbe 	bl	8009e08 <verify_packet>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d105      	bne.n	800a29e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4619      	mov	r1, r3
 800a296:	480d      	ldr	r0, [pc, #52]	; (800a2cc <hci_notify_asynch_evt+0x98>)
 800a298:	f000 f872 	bl	800a380 <list_insert_tail>
 800a29c:	e00d      	b.n	800a2ba <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4808      	ldr	r0, [pc, #32]	; (800a2c4 <hci_notify_asynch_evt+0x90>)
 800a2a4:	f000 f846 	bl	800a334 <list_insert_head>
 800a2a8:	e007      	b.n	800a2ba <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4805      	ldr	r0, [pc, #20]	; (800a2c4 <hci_notify_asynch_evt+0x90>)
 800a2b0:	f000 f840 	bl	800a334 <list_insert_head>
 800a2b4:	e001      	b.n	800a2ba <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a2ba:	697b      	ldr	r3, [r7, #20]
  
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	20009b4c 	.word	0x20009b4c
 800a2c8:	20000754 	.word	0x20000754
 800a2cc:	20009b54 	.word	0x20009b54

0800a2d0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	605a      	str	r2, [r3, #4]
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a302:	b672      	cpsid	i
}
 800a304:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d102      	bne.n	800a316 <list_is_empty+0x26>
  {
    return_value = 1;
 800a310:	2301      	movs	r3, #1
 800a312:	75fb      	strb	r3, [r7, #23]
 800a314:	e001      	b.n	800a31a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	75fb      	strb	r3, [r7, #23]
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	f383 8810 	msr	PRIMASK, r3
}
 800a324:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800a326:	7dfb      	ldrb	r3, [r7, #23]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	371c      	adds	r7, #28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800a334:	b480      	push	{r7}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a33e:	f3ef 8310 	mrs	r3, PRIMASK
 800a342:	60fb      	str	r3, [r7, #12]
  return(result);
 800a344:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a346:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a348:	b672      	cpsid	i
}
 800a34a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	605a      	str	r2, [r3, #4]
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	f383 8810 	msr	PRIMASK, r3
}
 800a372:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a374:	bf00      	nop
 800a376:	371c      	adds	r7, #28
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a38a:	f3ef 8310 	mrs	r3, PRIMASK
 800a38e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a390:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a392:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a394:	b672      	cpsid	i
}
 800a396:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f383 8810 	msr	PRIMASK, r3
}
 800a3be:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a3c0:	bf00      	nop
 800a3c2:	371c      	adds	r7, #28
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b087      	sub	sp, #28
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3d4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3da:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a3dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3de:	b672      	cpsid	i
}
 800a3e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	6812      	ldr	r2, [r2, #0]
 800a3ea:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	6852      	ldr	r2, [r2, #4]
 800a3f4:	605a      	str	r2, [r3, #4]
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	f383 8810 	msr	PRIMASK, r3
}
 800a400:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a402:	bf00      	nop
 800a404:	371c      	adds	r7, #28
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b086      	sub	sp, #24
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a418:	f3ef 8310 	mrs	r3, PRIMASK
 800a41c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a41e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a420:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a422:	b672      	cpsid	i
}
 800a424:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4618      	mov	r0, r3
 800a434:	f7ff ffca 	bl	800a3cc <list_remove_node>
  (*node)->next = NULL;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2200      	movs	r2, #0
 800a43e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2200      	movs	r2, #0
 800a446:	605a      	str	r2, [r3, #4]
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f383 8810 	msr	PRIMASK, r3
}
 800a452:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a454:	bf00      	nop
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a466:	f3ef 8310 	mrs	r3, PRIMASK
 800a46a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a46c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a46e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a470:	b672      	cpsid	i
}
 800a472:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685a      	ldr	r2, [r3, #4]
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff ffa3 	bl	800a3cc <list_remove_node>
  (*node)->next = NULL;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2200      	movs	r2, #0
 800a494:	605a      	str	r2, [r3, #4]
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f383 8810 	msr	PRIMASK, r3
}
 800a4a0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800a4a2:	bf00      	nop
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b089      	sub	sp, #36	; 0x24
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  int size = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4b6:	f3ef 8310 	mrs	r3, PRIMASK
 800a4ba:	613b      	str	r3, [r7, #16]
  return(result);
 800a4bc:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a4be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4c0:	b672      	cpsid	i
}
 800a4c2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a4ca:	e005      	b.n	800a4d8 <list_get_size+0x2e>
  {
    size++;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d1f5      	bne.n	800a4cc <list_get_size+0x22>
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f383 8810 	msr	PRIMASK, r3
}
 800a4ea:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800a4ec:	69fb      	ldr	r3, [r7, #28]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3724      	adds	r7, #36	; 0x24
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
	...

0800a4fc <__NVIC_SetPriority>:
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	4603      	mov	r3, r0
 800a504:	6039      	str	r1, [r7, #0]
 800a506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	db0a      	blt.n	800a526 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	b2da      	uxtb	r2, r3
 800a514:	490c      	ldr	r1, [pc, #48]	; (800a548 <__NVIC_SetPriority+0x4c>)
 800a516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a51a:	0112      	lsls	r2, r2, #4
 800a51c:	b2d2      	uxtb	r2, r2
 800a51e:	440b      	add	r3, r1
 800a520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a524:	e00a      	b.n	800a53c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	4908      	ldr	r1, [pc, #32]	; (800a54c <__NVIC_SetPriority+0x50>)
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	3b04      	subs	r3, #4
 800a534:	0112      	lsls	r2, r2, #4
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	440b      	add	r3, r1
 800a53a:	761a      	strb	r2, [r3, #24]
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	e000e100 	.word	0xe000e100
 800a54c:	e000ed00 	.word	0xe000ed00

0800a550 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a554:	4b05      	ldr	r3, [pc, #20]	; (800a56c <SysTick_Handler+0x1c>)
 800a556:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a558:	f001 fd0a 	bl	800bf70 <xTaskGetSchedulerState>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d001      	beq.n	800a566 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a562:	f002 fb41 	bl	800cbe8 <xPortSysTickHandler>
  }
}
 800a566:	bf00      	nop
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	e000e010 	.word	0xe000e010

0800a570 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a570:	b580      	push	{r7, lr}
 800a572:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a574:	2100      	movs	r1, #0
 800a576:	f06f 0004 	mvn.w	r0, #4
 800a57a:	f7ff ffbf 	bl	800a4fc <__NVIC_SetPriority>
#endif
}
 800a57e:	bf00      	nop
 800a580:	bd80      	pop	{r7, pc}
	...

0800a584 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a58a:	f3ef 8305 	mrs	r3, IPSR
 800a58e:	603b      	str	r3, [r7, #0]
  return(result);
 800a590:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a596:	f06f 0305 	mvn.w	r3, #5
 800a59a:	607b      	str	r3, [r7, #4]
 800a59c:	e00c      	b.n	800a5b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a59e:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <osKernelInitialize+0x44>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d105      	bne.n	800a5b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a5a6:	4b08      	ldr	r3, [pc, #32]	; (800a5c8 <osKernelInitialize+0x44>)
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	607b      	str	r3, [r7, #4]
 800a5b0:	e002      	b.n	800a5b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a5b8:	687b      	ldr	r3, [r7, #4]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	20000774 	.word	0x20000774

0800a5cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5d2:	f3ef 8305 	mrs	r3, IPSR
 800a5d6:	603b      	str	r3, [r7, #0]
  return(result);
 800a5d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a5de:	f06f 0305 	mvn.w	r3, #5
 800a5e2:	607b      	str	r3, [r7, #4]
 800a5e4:	e010      	b.n	800a608 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a5e6:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <osKernelStart+0x48>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d109      	bne.n	800a602 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a5ee:	f7ff ffbf 	bl	800a570 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a5f2:	4b08      	ldr	r3, [pc, #32]	; (800a614 <osKernelStart+0x48>)
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a5f8:	f001 f80c 	bl	800b614 <vTaskStartScheduler>
      stat = osOK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	607b      	str	r3, [r7, #4]
 800a600:	e002      	b.n	800a608 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a602:	f04f 33ff 	mov.w	r3, #4294967295
 800a606:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a608:	687b      	ldr	r3, [r7, #4]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20000774 	.word	0x20000774

0800a618 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	4a07      	ldr	r2, [pc, #28]	; (800a644 <vApplicationGetIdleTaskMemory+0x2c>)
 800a628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	4a06      	ldr	r2, [pc, #24]	; (800a648 <vApplicationGetIdleTaskMemory+0x30>)
 800a62e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2280      	movs	r2, #128	; 0x80
 800a634:	601a      	str	r2, [r3, #0]
}
 800a636:	bf00      	nop
 800a638:	3714      	adds	r7, #20
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	20000778 	.word	0x20000778
 800a648:	200007e4 	.word	0x200007e4

0800a64c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4a07      	ldr	r2, [pc, #28]	; (800a678 <vApplicationGetTimerTaskMemory+0x2c>)
 800a65c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	4a06      	ldr	r2, [pc, #24]	; (800a67c <vApplicationGetTimerTaskMemory+0x30>)
 800a662:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a66a:	601a      	str	r2, [r3, #0]
}
 800a66c:	bf00      	nop
 800a66e:	3714      	adds	r7, #20
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	200009e4 	.word	0x200009e4
 800a67c:	20000a50 	.word	0x20000a50

0800a680 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f103 0208 	add.w	r2, r3, #8
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f04f 32ff 	mov.w	r2, #4294967295
 800a698:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f103 0208 	add.w	r2, r3, #8
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f103 0208 	add.w	r2, r3, #8
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6ce:	bf00      	nop
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b085      	sub	sp, #20
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	689a      	ldr	r2, [r3, #8]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	1c5a      	adds	r2, r3, #1
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	601a      	str	r2, [r3, #0]
}
 800a716:	bf00      	nop
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a722:	b480      	push	{r7}
 800a724:	b085      	sub	sp, #20
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a738:	d103      	bne.n	800a742 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	e00c      	b.n	800a75c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	3308      	adds	r3, #8
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	e002      	b.n	800a750 <vListInsert+0x2e>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	60fb      	str	r3, [r7, #12]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d2f6      	bcs.n	800a74a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	601a      	str	r2, [r3, #0]
}
 800a788:	bf00      	nop
 800a78a:	3714      	adds	r7, #20
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	6892      	ldr	r2, [r2, #8]
 800a7aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	6852      	ldr	r2, [r2, #4]
 800a7b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d103      	bne.n	800a7c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	689a      	ldr	r2, [r3, #8]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	1e5a      	subs	r2, r3, #1
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3714      	adds	r7, #20
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10a      	bne.n	800a812 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a800:	f383 8811 	msr	BASEPRI, r3
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a80e:	bf00      	nop
 800a810:	e7fe      	b.n	800a810 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a812:	f002 f957 	bl	800cac4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	68f9      	ldr	r1, [r7, #12]
 800a820:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a822:	fb01 f303 	mul.w	r3, r1, r3
 800a826:	441a      	add	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a842:	3b01      	subs	r3, #1
 800a844:	68f9      	ldr	r1, [r7, #12]
 800a846:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a848:	fb01 f303 	mul.w	r3, r1, r3
 800a84c:	441a      	add	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	22ff      	movs	r2, #255	; 0xff
 800a856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	22ff      	movs	r2, #255	; 0xff
 800a85e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d114      	bne.n	800a892 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d01a      	beq.n	800a8a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3310      	adds	r3, #16
 800a874:	4618      	mov	r0, r3
 800a876:	f001 f973 	bl	800bb60 <xTaskRemoveFromEventList>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d012      	beq.n	800a8a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a880:	4b0c      	ldr	r3, [pc, #48]	; (800a8b4 <xQueueGenericReset+0xcc>)
 800a882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	e009      	b.n	800a8a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3310      	adds	r3, #16
 800a896:	4618      	mov	r0, r3
 800a898:	f7ff fef2 	bl	800a680 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	3324      	adds	r3, #36	; 0x24
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff feed 	bl	800a680 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8a6:	f002 f93d 	bl	800cb24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8aa:	2301      	movs	r3, #1
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	e000ed04 	.word	0xe000ed04

0800a8b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08e      	sub	sp, #56	; 0x38
 800a8bc:	af02      	add	r7, sp, #8
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
 800a8c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10a      	bne.n	800a8e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8de:	bf00      	nop
 800a8e0:	e7fe      	b.n	800a8e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10a      	bne.n	800a8fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8fa:	bf00      	nop
 800a8fc:	e7fe      	b.n	800a8fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <xQueueGenericCreateStatic+0x52>
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <xQueueGenericCreateStatic+0x56>
 800a90a:	2301      	movs	r3, #1
 800a90c:	e000      	b.n	800a910 <xQueueGenericCreateStatic+0x58>
 800a90e:	2300      	movs	r3, #0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10a      	bne.n	800a92a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	623b      	str	r3, [r7, #32]
}
 800a926:	bf00      	nop
 800a928:	e7fe      	b.n	800a928 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d102      	bne.n	800a936 <xQueueGenericCreateStatic+0x7e>
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <xQueueGenericCreateStatic+0x82>
 800a936:	2301      	movs	r3, #1
 800a938:	e000      	b.n	800a93c <xQueueGenericCreateStatic+0x84>
 800a93a:	2300      	movs	r3, #0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10a      	bne.n	800a956 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	f383 8811 	msr	BASEPRI, r3
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	61fb      	str	r3, [r7, #28]
}
 800a952:	bf00      	nop
 800a954:	e7fe      	b.n	800a954 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a956:	2350      	movs	r3, #80	; 0x50
 800a958:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	2b50      	cmp	r3, #80	; 0x50
 800a95e:	d00a      	beq.n	800a976 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	61bb      	str	r3, [r7, #24]
}
 800a972:	bf00      	nop
 800a974:	e7fe      	b.n	800a974 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a976:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00d      	beq.n	800a99e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a98a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	4613      	mov	r3, r2
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	68b9      	ldr	r1, [r7, #8]
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 f805 	bl	800a9a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3730      	adds	r7, #48	; 0x30
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d103      	bne.n	800a9c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	e002      	b.n	800a9ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a9d6:	2101      	movs	r1, #1
 800a9d8:	69b8      	ldr	r0, [r7, #24]
 800a9da:	f7ff ff05 	bl	800a7e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	78fa      	ldrb	r2, [r7, #3]
 800a9e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a9e6:	bf00      	nop
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
	...

0800a9f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08e      	sub	sp, #56	; 0x38
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
 800a9fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10a      	bne.n	800aa22 <xQueueGenericSend+0x32>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa1e:	bf00      	nop
 800aa20:	e7fe      	b.n	800aa20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d103      	bne.n	800aa30 <xQueueGenericSend+0x40>
 800aa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <xQueueGenericSend+0x44>
 800aa30:	2301      	movs	r3, #1
 800aa32:	e000      	b.n	800aa36 <xQueueGenericSend+0x46>
 800aa34:	2300      	movs	r3, #0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10a      	bne.n	800aa50 <xQueueGenericSend+0x60>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa4c:	bf00      	nop
 800aa4e:	e7fe      	b.n	800aa4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d103      	bne.n	800aa5e <xQueueGenericSend+0x6e>
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d101      	bne.n	800aa62 <xQueueGenericSend+0x72>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e000      	b.n	800aa64 <xQueueGenericSend+0x74>
 800aa62:	2300      	movs	r3, #0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <xQueueGenericSend+0x8e>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	623b      	str	r3, [r7, #32]
}
 800aa7a:	bf00      	nop
 800aa7c:	e7fe      	b.n	800aa7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa7e:	f001 fa77 	bl	800bf70 <xTaskGetSchedulerState>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d102      	bne.n	800aa8e <xQueueGenericSend+0x9e>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <xQueueGenericSend+0xa2>
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e000      	b.n	800aa94 <xQueueGenericSend+0xa4>
 800aa92:	2300      	movs	r3, #0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10a      	bne.n	800aaae <xQueueGenericSend+0xbe>
	__asm volatile
 800aa98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	61fb      	str	r3, [r7, #28]
}
 800aaaa:	bf00      	nop
 800aaac:	e7fe      	b.n	800aaac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaae:	f002 f809 	bl	800cac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d302      	bcc.n	800aac4 <xQueueGenericSend+0xd4>
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d129      	bne.n	800ab18 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	68b9      	ldr	r1, [r7, #8]
 800aac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaca:	f000 fa0b 	bl	800aee4 <prvCopyDataToQueue>
 800aace:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d010      	beq.n	800aafa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	3324      	adds	r3, #36	; 0x24
 800aadc:	4618      	mov	r0, r3
 800aade:	f001 f83f 	bl	800bb60 <xTaskRemoveFromEventList>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d013      	beq.n	800ab10 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aae8:	4b3f      	ldr	r3, [pc, #252]	; (800abe8 <xQueueGenericSend+0x1f8>)
 800aaea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	e00a      	b.n	800ab10 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d007      	beq.n	800ab10 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab00:	4b39      	ldr	r3, [pc, #228]	; (800abe8 <xQueueGenericSend+0x1f8>)
 800ab02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab10:	f002 f808 	bl	800cb24 <vPortExitCritical>
				return pdPASS;
 800ab14:	2301      	movs	r3, #1
 800ab16:	e063      	b.n	800abe0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d103      	bne.n	800ab26 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab1e:	f002 f801 	bl	800cb24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	e05c      	b.n	800abe0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d106      	bne.n	800ab3a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab2c:	f107 0314 	add.w	r3, r7, #20
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 f879 	bl	800bc28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab36:	2301      	movs	r3, #1
 800ab38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab3a:	f001 fff3 	bl	800cb24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab3e:	f000 fdd1 	bl	800b6e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab42:	f001 ffbf 	bl	800cac4 <vPortEnterCritical>
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab4c:	b25b      	sxtb	r3, r3
 800ab4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab52:	d103      	bne.n	800ab5c <xQueueGenericSend+0x16c>
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab62:	b25b      	sxtb	r3, r3
 800ab64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab68:	d103      	bne.n	800ab72 <xQueueGenericSend+0x182>
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab72:	f001 ffd7 	bl	800cb24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab76:	1d3a      	adds	r2, r7, #4
 800ab78:	f107 0314 	add.w	r3, r7, #20
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f001 f868 	bl	800bc54 <xTaskCheckForTimeOut>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d124      	bne.n	800abd4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab8c:	f000 faa2 	bl	800b0d4 <prvIsQueueFull>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d018      	beq.n	800abc8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab98:	3310      	adds	r3, #16
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 ff8e 	bl	800bac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aba6:	f000 fa2d 	bl	800b004 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800abaa:	f000 fda9 	bl	800b700 <xTaskResumeAll>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f47f af7c 	bne.w	800aaae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800abb6:	4b0c      	ldr	r3, [pc, #48]	; (800abe8 <xQueueGenericSend+0x1f8>)
 800abb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	e772      	b.n	800aaae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800abc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abca:	f000 fa1b 	bl	800b004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abce:	f000 fd97 	bl	800b700 <xTaskResumeAll>
 800abd2:	e76c      	b.n	800aaae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800abd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abd6:	f000 fa15 	bl	800b004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abda:	f000 fd91 	bl	800b700 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800abde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3738      	adds	r7, #56	; 0x38
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	e000ed04 	.word	0xe000ed04

0800abec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b090      	sub	sp, #64	; 0x40
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800abfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d103      	bne.n	800ac28 <xQueueGenericSendFromISR+0x3c>
 800ac20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <xQueueGenericSendFromISR+0x40>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e000      	b.n	800ac2e <xQueueGenericSendFromISR+0x42>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d103      	bne.n	800ac56 <xQueueGenericSendFromISR+0x6a>
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d101      	bne.n	800ac5a <xQueueGenericSendFromISR+0x6e>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e000      	b.n	800ac5c <xQueueGenericSendFromISR+0x70>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10a      	bne.n	800ac76 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	623b      	str	r3, [r7, #32]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac76:	f002 f807 	bl	800cc88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac7a:	f3ef 8211 	mrs	r2, BASEPRI
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	61fa      	str	r2, [r7, #28]
 800ac90:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac92:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac94:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d302      	bcc.n	800aca8 <xQueueGenericSendFromISR+0xbc>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d12f      	bne.n	800ad08 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800acbe:	f000 f911 	bl	800aee4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800acc2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acca:	d112      	bne.n	800acf2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800accc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d016      	beq.n	800ad02 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	3324      	adds	r3, #36	; 0x24
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 ff41 	bl	800bb60 <xTaskRemoveFromEventList>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00e      	beq.n	800ad02 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00b      	beq.n	800ad02 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	e007      	b.n	800ad02 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800acf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800acf6:	3301      	adds	r3, #1
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	b25a      	sxtb	r2, r3
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ad02:	2301      	movs	r3, #1
 800ad04:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ad06:	e001      	b.n	800ad0c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3740      	adds	r7, #64	; 0x40
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b08c      	sub	sp, #48	; 0x30
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad30:	2300      	movs	r3, #0
 800ad32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <xQueueReceive+0x30>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	623b      	str	r3, [r7, #32]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d103      	bne.n	800ad62 <xQueueReceive+0x3e>
 800ad5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <xQueueReceive+0x42>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <xQueueReceive+0x44>
 800ad66:	2300      	movs	r3, #0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <xQueueReceive+0x5e>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	61fb      	str	r3, [r7, #28]
}
 800ad7e:	bf00      	nop
 800ad80:	e7fe      	b.n	800ad80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad82:	f001 f8f5 	bl	800bf70 <xTaskGetSchedulerState>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d102      	bne.n	800ad92 <xQueueReceive+0x6e>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d101      	bne.n	800ad96 <xQueueReceive+0x72>
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <xQueueReceive+0x74>
 800ad96:	2300      	movs	r3, #0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10a      	bne.n	800adb2 <xQueueReceive+0x8e>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	61bb      	str	r3, [r7, #24]
}
 800adae:	bf00      	nop
 800adb0:	e7fe      	b.n	800adb0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adb2:	f001 fe87 	bl	800cac4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d01f      	beq.n	800ae02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800adc2:	68b9      	ldr	r1, [r7, #8]
 800adc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adc6:	f000 f8f7 	bl	800afb8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	1e5a      	subs	r2, r3, #1
 800adce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00f      	beq.n	800adfa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	3310      	adds	r3, #16
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 febe 	bl	800bb60 <xTaskRemoveFromEventList>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d007      	beq.n	800adfa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adea:	4b3d      	ldr	r3, [pc, #244]	; (800aee0 <xQueueReceive+0x1bc>)
 800adec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adf0:	601a      	str	r2, [r3, #0]
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adfa:	f001 fe93 	bl	800cb24 <vPortExitCritical>
				return pdPASS;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e069      	b.n	800aed6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d103      	bne.n	800ae10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae08:	f001 fe8c 	bl	800cb24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e062      	b.n	800aed6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d106      	bne.n	800ae24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae16:	f107 0310 	add.w	r3, r7, #16
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 ff04 	bl	800bc28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae20:	2301      	movs	r3, #1
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae24:	f001 fe7e 	bl	800cb24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae28:	f000 fc5c 	bl	800b6e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae2c:	f001 fe4a 	bl	800cac4 <vPortEnterCritical>
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae36:	b25b      	sxtb	r3, r3
 800ae38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3c:	d103      	bne.n	800ae46 <xQueueReceive+0x122>
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae4c:	b25b      	sxtb	r3, r3
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae52:	d103      	bne.n	800ae5c <xQueueReceive+0x138>
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae5c:	f001 fe62 	bl	800cb24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae60:	1d3a      	adds	r2, r7, #4
 800ae62:	f107 0310 	add.w	r3, r7, #16
 800ae66:	4611      	mov	r1, r2
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 fef3 	bl	800bc54 <xTaskCheckForTimeOut>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d123      	bne.n	800aebc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae76:	f000 f917 	bl	800b0a8 <prvIsQueueEmpty>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d017      	beq.n	800aeb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	3324      	adds	r3, #36	; 0x24
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	4611      	mov	r1, r2
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 fe19 	bl	800bac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae90:	f000 f8b8 	bl	800b004 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae94:	f000 fc34 	bl	800b700 <xTaskResumeAll>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d189      	bne.n	800adb2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ae9e:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <xQueueReceive+0x1bc>)
 800aea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	e780      	b.n	800adb2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aeb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeb2:	f000 f8a7 	bl	800b004 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aeb6:	f000 fc23 	bl	800b700 <xTaskResumeAll>
 800aeba:	e77a      	b.n	800adb2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aebe:	f000 f8a1 	bl	800b004 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aec2:	f000 fc1d 	bl	800b700 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aec8:	f000 f8ee 	bl	800b0a8 <prvIsQueueEmpty>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f43f af6f 	beq.w	800adb2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aed4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3730      	adds	r7, #48	; 0x30
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop
 800aee0:	e000ed04 	.word	0xe000ed04

0800aee4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aef0:	2300      	movs	r3, #0
 800aef2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10d      	bne.n	800af1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d14d      	bne.n	800afa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	4618      	mov	r0, r3
 800af10:	f001 f84c 	bl	800bfac <xTaskPriorityDisinherit>
 800af14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	609a      	str	r2, [r3, #8]
 800af1c:	e043      	b.n	800afa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d119      	bne.n	800af58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6858      	ldr	r0, [r3, #4]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2c:	461a      	mov	r2, r3
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	f002 f902 	bl	800d138 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3c:	441a      	add	r2, r3
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d32b      	bcc.n	800afa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	605a      	str	r2, [r3, #4]
 800af56:	e026      	b.n	800afa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	68d8      	ldr	r0, [r3, #12]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af60:	461a      	mov	r2, r3
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	f002 f8e8 	bl	800d138 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af70:	425b      	negs	r3, r3
 800af72:	441a      	add	r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	68da      	ldr	r2, [r3, #12]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	429a      	cmp	r2, r3
 800af82:	d207      	bcs.n	800af94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	689a      	ldr	r2, [r3, #8]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8c:	425b      	negs	r3, r3
 800af8e:	441a      	add	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b02      	cmp	r3, #2
 800af98:	d105      	bne.n	800afa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afae:	697b      	ldr	r3, [r7, #20]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d018      	beq.n	800affc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	68da      	ldr	r2, [r3, #12]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd2:	441a      	add	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	68da      	ldr	r2, [r3, #12]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d303      	bcc.n	800afec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68d9      	ldr	r1, [r3, #12]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff4:	461a      	mov	r2, r3
 800aff6:	6838      	ldr	r0, [r7, #0]
 800aff8:	f002 f89e 	bl	800d138 <memcpy>
	}
}
 800affc:	bf00      	nop
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b00c:	f001 fd5a 	bl	800cac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b016:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b018:	e011      	b.n	800b03e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d012      	beq.n	800b048 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3324      	adds	r3, #36	; 0x24
 800b026:	4618      	mov	r0, r3
 800b028:	f000 fd9a 	bl	800bb60 <xTaskRemoveFromEventList>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b032:	f000 fe81 	bl	800bd38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b036:	7bfb      	ldrb	r3, [r7, #15]
 800b038:	3b01      	subs	r3, #1
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b042:	2b00      	cmp	r3, #0
 800b044:	dce9      	bgt.n	800b01a <prvUnlockQueue+0x16>
 800b046:	e000      	b.n	800b04a <prvUnlockQueue+0x46>
					break;
 800b048:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	22ff      	movs	r2, #255	; 0xff
 800b04e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b052:	f001 fd67 	bl	800cb24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b056:	f001 fd35 	bl	800cac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b060:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b062:	e011      	b.n	800b088 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d012      	beq.n	800b092 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	3310      	adds	r3, #16
 800b070:	4618      	mov	r0, r3
 800b072:	f000 fd75 	bl	800bb60 <xTaskRemoveFromEventList>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d001      	beq.n	800b080 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b07c:	f000 fe5c 	bl	800bd38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b080:	7bbb      	ldrb	r3, [r7, #14]
 800b082:	3b01      	subs	r3, #1
 800b084:	b2db      	uxtb	r3, r3
 800b086:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	dce9      	bgt.n	800b064 <prvUnlockQueue+0x60>
 800b090:	e000      	b.n	800b094 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b092:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	22ff      	movs	r2, #255	; 0xff
 800b098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b09c:	f001 fd42 	bl	800cb24 <vPortExitCritical>
}
 800b0a0:	bf00      	nop
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0b0:	f001 fd08 	bl	800cac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	e001      	b.n	800b0c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0c6:	f001 fd2d 	bl	800cb24 <vPortExitCritical>

	return xReturn;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0dc:	f001 fcf2 	bl	800cac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d102      	bne.n	800b0f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	e001      	b.n	800b0f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0f6:	f001 fd15 	bl	800cb24 <vPortExitCritical>

	return xReturn;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b10e:	2300      	movs	r3, #0
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	e014      	b.n	800b13e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b114:	4a0f      	ldr	r2, [pc, #60]	; (800b154 <vQueueAddToRegistry+0x50>)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10b      	bne.n	800b138 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b120:	490c      	ldr	r1, [pc, #48]	; (800b154 <vQueueAddToRegistry+0x50>)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b12a:	4a0a      	ldr	r2, [pc, #40]	; (800b154 <vQueueAddToRegistry+0x50>)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	4413      	add	r3, r2
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b136:	e006      	b.n	800b146 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	3301      	adds	r3, #1
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b0b      	cmp	r3, #11
 800b142:	d9e7      	bls.n	800b114 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b144:	bf00      	nop
 800b146:	bf00      	nop
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	20009b5c 	.word	0x20009b5c

0800b158 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b168:	f001 fcac 	bl	800cac4 <vPortEnterCritical>
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b172:	b25b      	sxtb	r3, r3
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b178:	d103      	bne.n	800b182 <vQueueWaitForMessageRestricted+0x2a>
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b188:	b25b      	sxtb	r3, r3
 800b18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18e:	d103      	bne.n	800b198 <vQueueWaitForMessageRestricted+0x40>
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b198:	f001 fcc4 	bl	800cb24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d106      	bne.n	800b1b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	3324      	adds	r3, #36	; 0x24
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	68b9      	ldr	r1, [r7, #8]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 fcab 	bl	800bb08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b1b2:	6978      	ldr	r0, [r7, #20]
 800b1b4:	f7ff ff26 	bl	800b004 <prvUnlockQueue>
	}
 800b1b8:	bf00      	nop
 800b1ba:	3718      	adds	r7, #24
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08e      	sub	sp, #56	; 0x38
 800b1c4:	af04      	add	r7, sp, #16
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <xTaskCreateStatic+0x2a>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	623b      	str	r3, [r7, #32]
}
 800b1e6:	bf00      	nop
 800b1e8:	e7fe      	b.n	800b1e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10a      	bne.n	800b206 <xTaskCreateStatic+0x46>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	61fb      	str	r3, [r7, #28]
}
 800b202:	bf00      	nop
 800b204:	e7fe      	b.n	800b204 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b206:	236c      	movs	r3, #108	; 0x6c
 800b208:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	2b6c      	cmp	r3, #108	; 0x6c
 800b20e:	d00a      	beq.n	800b226 <xTaskCreateStatic+0x66>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	61bb      	str	r3, [r7, #24]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b226:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d01e      	beq.n	800b26c <xTaskCreateStatic+0xac>
 800b22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b230:	2b00      	cmp	r3, #0
 800b232:	d01b      	beq.n	800b26c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b236:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b23c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b240:	2202      	movs	r2, #2
 800b242:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b246:	2300      	movs	r3, #0
 800b248:	9303      	str	r3, [sp, #12]
 800b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24c:	9302      	str	r3, [sp, #8]
 800b24e:	f107 0314 	add.w	r3, r7, #20
 800b252:	9301      	str	r3, [sp, #4]
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	68b9      	ldr	r1, [r7, #8]
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f000 f850 	bl	800b304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b266:	f000 f8e7 	bl	800b438 <prvAddNewTaskToReadyList>
 800b26a:	e001      	b.n	800b270 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b270:	697b      	ldr	r3, [r7, #20]
	}
 800b272:	4618      	mov	r0, r3
 800b274:	3728      	adds	r7, #40	; 0x28
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b08c      	sub	sp, #48	; 0x30
 800b27e:	af04      	add	r7, sp, #16
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	603b      	str	r3, [r7, #0]
 800b286:	4613      	mov	r3, r2
 800b288:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b28a:	88fb      	ldrh	r3, [r7, #6]
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4618      	mov	r0, r3
 800b290:	f001 fd3a 	bl	800cd08 <pvPortMalloc>
 800b294:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00e      	beq.n	800b2ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b29c:	206c      	movs	r0, #108	; 0x6c
 800b29e:	f001 fd33 	bl	800cd08 <pvPortMalloc>
 800b2a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d003      	beq.n	800b2b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	631a      	str	r2, [r3, #48]	; 0x30
 800b2b0:	e005      	b.n	800b2be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b2b2:	6978      	ldr	r0, [r7, #20]
 800b2b4:	f001 fdf8 	bl	800cea8 <vPortFree>
 800b2b8:	e001      	b.n	800b2be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d017      	beq.n	800b2f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2cc:	88fa      	ldrh	r2, [r7, #6]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	9303      	str	r3, [sp, #12]
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	9302      	str	r3, [sp, #8]
 800b2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	68b9      	ldr	r1, [r7, #8]
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 f80e 	bl	800b304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2e8:	69f8      	ldr	r0, [r7, #28]
 800b2ea:	f000 f8a5 	bl	800b438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	61bb      	str	r3, [r7, #24]
 800b2f2:	e002      	b.n	800b2fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2fa:	69bb      	ldr	r3, [r7, #24]
	}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3720      	adds	r7, #32
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	461a      	mov	r2, r3
 800b31c:	21a5      	movs	r1, #165	; 0xa5
 800b31e:	f001 ff19 	bl	800d154 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b32c:	3b01      	subs	r3, #1
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4413      	add	r3, r2
 800b332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	f023 0307 	bic.w	r3, r3, #7
 800b33a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	f003 0307 	and.w	r3, r3, #7
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00a      	beq.n	800b35c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	617b      	str	r3, [r7, #20]
}
 800b358:	bf00      	nop
 800b35a:	e7fe      	b.n	800b35a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d01f      	beq.n	800b3a2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b362:	2300      	movs	r3, #0
 800b364:	61fb      	str	r3, [r7, #28]
 800b366:	e012      	b.n	800b38e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	4413      	add	r3, r2
 800b36e:	7819      	ldrb	r1, [r3, #0]
 800b370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	4413      	add	r3, r2
 800b376:	3334      	adds	r3, #52	; 0x34
 800b378:	460a      	mov	r2, r1
 800b37a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	4413      	add	r3, r2
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d006      	beq.n	800b396 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	3301      	adds	r3, #1
 800b38c:	61fb      	str	r3, [r7, #28]
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	2b17      	cmp	r3, #23
 800b392:	d9e9      	bls.n	800b368 <prvInitialiseNewTask+0x64>
 800b394:	e000      	b.n	800b398 <prvInitialiseNewTask+0x94>
			{
				break;
 800b396:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800b3a0:	e003      	b.n	800b3aa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ac:	2b37      	cmp	r3, #55	; 0x37
 800b3ae:	d901      	bls.n	800b3b4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b3b0:	2337      	movs	r3, #55	; 0x37
 800b3b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3be:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff f978 	bl	800a6c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	3318      	adds	r3, #24
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7ff f973 	bl	800a6c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	2200      	movs	r2, #0
 800b400:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	2200      	movs	r2, #0
 800b40e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	68f9      	ldr	r1, [r7, #12]
 800b416:	69b8      	ldr	r0, [r7, #24]
 800b418:	f001 fa26 	bl	800c868 <pxPortInitialiseStack>
 800b41c:	4602      	mov	r2, r0
 800b41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b420:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b42c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b42e:	bf00      	nop
 800b430:	3720      	adds	r7, #32
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
	...

0800b438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b440:	f001 fb40 	bl	800cac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b444:	4b2d      	ldr	r3, [pc, #180]	; (800b4fc <prvAddNewTaskToReadyList+0xc4>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3301      	adds	r3, #1
 800b44a:	4a2c      	ldr	r2, [pc, #176]	; (800b4fc <prvAddNewTaskToReadyList+0xc4>)
 800b44c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b44e:	4b2c      	ldr	r3, [pc, #176]	; (800b500 <prvAddNewTaskToReadyList+0xc8>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d109      	bne.n	800b46a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b456:	4a2a      	ldr	r2, [pc, #168]	; (800b500 <prvAddNewTaskToReadyList+0xc8>)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b45c:	4b27      	ldr	r3, [pc, #156]	; (800b4fc <prvAddNewTaskToReadyList+0xc4>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d110      	bne.n	800b486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b464:	f000 fc8e 	bl	800bd84 <prvInitialiseTaskLists>
 800b468:	e00d      	b.n	800b486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b46a:	4b26      	ldr	r3, [pc, #152]	; (800b504 <prvAddNewTaskToReadyList+0xcc>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d109      	bne.n	800b486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b472:	4b23      	ldr	r3, [pc, #140]	; (800b500 <prvAddNewTaskToReadyList+0xc8>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d802      	bhi.n	800b486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b480:	4a1f      	ldr	r2, [pc, #124]	; (800b500 <prvAddNewTaskToReadyList+0xc8>)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b486:	4b20      	ldr	r3, [pc, #128]	; (800b508 <prvAddNewTaskToReadyList+0xd0>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3301      	adds	r3, #1
 800b48c:	4a1e      	ldr	r2, [pc, #120]	; (800b508 <prvAddNewTaskToReadyList+0xd0>)
 800b48e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b490:	4b1d      	ldr	r3, [pc, #116]	; (800b508 <prvAddNewTaskToReadyList+0xd0>)
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b49c:	4b1b      	ldr	r3, [pc, #108]	; (800b50c <prvAddNewTaskToReadyList+0xd4>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d903      	bls.n	800b4ac <prvAddNewTaskToReadyList+0x74>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a8:	4a18      	ldr	r2, [pc, #96]	; (800b50c <prvAddNewTaskToReadyList+0xd4>)
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4a15      	ldr	r2, [pc, #84]	; (800b510 <prvAddNewTaskToReadyList+0xd8>)
 800b4ba:	441a      	add	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3304      	adds	r3, #4
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	f7ff f909 	bl	800a6da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b4c8:	f001 fb2c 	bl	800cb24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b4cc:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <prvAddNewTaskToReadyList+0xcc>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00e      	beq.n	800b4f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b4d4:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <prvAddNewTaskToReadyList+0xc8>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d207      	bcs.n	800b4f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <prvAddNewTaskToReadyList+0xdc>)
 800b4e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4f2:	bf00      	nop
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	20001724 	.word	0x20001724
 800b500:	20001250 	.word	0x20001250
 800b504:	20001730 	.word	0x20001730
 800b508:	20001740 	.word	0x20001740
 800b50c:	2000172c 	.word	0x2000172c
 800b510:	20001254 	.word	0x20001254
 800b514:	e000ed04 	.word	0xe000ed04

0800b518 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08a      	sub	sp, #40	; 0x28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b522:	2300      	movs	r3, #0
 800b524:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10a      	bne.n	800b542 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	617b      	str	r3, [r7, #20]
}
 800b53e:	bf00      	nop
 800b540:	e7fe      	b.n	800b540 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10a      	bne.n	800b55e <vTaskDelayUntil+0x46>
	__asm volatile
 800b548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54c:	f383 8811 	msr	BASEPRI, r3
 800b550:	f3bf 8f6f 	isb	sy
 800b554:	f3bf 8f4f 	dsb	sy
 800b558:	613b      	str	r3, [r7, #16]
}
 800b55a:	bf00      	nop
 800b55c:	e7fe      	b.n	800b55c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b55e:	4b2a      	ldr	r3, [pc, #168]	; (800b608 <vTaskDelayUntil+0xf0>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00a      	beq.n	800b57c <vTaskDelayUntil+0x64>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	60fb      	str	r3, [r7, #12]
}
 800b578:	bf00      	nop
 800b57a:	e7fe      	b.n	800b57a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b57c:	f000 f8b2 	bl	800b6e4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b580:	4b22      	ldr	r3, [pc, #136]	; (800b60c <vTaskDelayUntil+0xf4>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	4413      	add	r3, r2
 800b58e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6a3a      	ldr	r2, [r7, #32]
 800b596:	429a      	cmp	r2, r3
 800b598:	d20b      	bcs.n	800b5b2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	69fa      	ldr	r2, [r7, #28]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d211      	bcs.n	800b5c8 <vTaskDelayUntil+0xb0>
 800b5a4:	69fa      	ldr	r2, [r7, #28]
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d90d      	bls.n	800b5c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b5b0:	e00a      	b.n	800b5c8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	69fa      	ldr	r2, [r7, #28]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d303      	bcc.n	800b5c4 <vTaskDelayUntil+0xac>
 800b5bc:	69fa      	ldr	r2, [r7, #28]
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d901      	bls.n	800b5c8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	69fa      	ldr	r2, [r7, #28]
 800b5cc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d006      	beq.n	800b5e2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b5d4:	69fa      	ldr	r2, [r7, #28]
 800b5d6:	6a3b      	ldr	r3, [r7, #32]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	2100      	movs	r1, #0
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 fd9b 	bl	800c118 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b5e2:	f000 f88d 	bl	800b700 <xTaskResumeAll>
 800b5e6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d107      	bne.n	800b5fe <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b5ee:	4b08      	ldr	r3, [pc, #32]	; (800b610 <vTaskDelayUntil+0xf8>)
 800b5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5fe:	bf00      	nop
 800b600:	3728      	adds	r7, #40	; 0x28
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	2000174c 	.word	0x2000174c
 800b60c:	20001728 	.word	0x20001728
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b08a      	sub	sp, #40	; 0x28
 800b618:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b61a:	2300      	movs	r3, #0
 800b61c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b61e:	2300      	movs	r3, #0
 800b620:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b622:	463a      	mov	r2, r7
 800b624:	1d39      	adds	r1, r7, #4
 800b626:	f107 0308 	add.w	r3, r7, #8
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe fff4 	bl	800a618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b630:	6839      	ldr	r1, [r7, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	9202      	str	r2, [sp, #8]
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	2300      	movs	r3, #0
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	2300      	movs	r3, #0
 800b640:	460a      	mov	r2, r1
 800b642:	4922      	ldr	r1, [pc, #136]	; (800b6cc <vTaskStartScheduler+0xb8>)
 800b644:	4822      	ldr	r0, [pc, #136]	; (800b6d0 <vTaskStartScheduler+0xbc>)
 800b646:	f7ff fdbb 	bl	800b1c0 <xTaskCreateStatic>
 800b64a:	4603      	mov	r3, r0
 800b64c:	4a21      	ldr	r2, [pc, #132]	; (800b6d4 <vTaskStartScheduler+0xc0>)
 800b64e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b650:	4b20      	ldr	r3, [pc, #128]	; (800b6d4 <vTaskStartScheduler+0xc0>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b658:	2301      	movs	r3, #1
 800b65a:	617b      	str	r3, [r7, #20]
 800b65c:	e001      	b.n	800b662 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b65e:	2300      	movs	r3, #0
 800b660:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d102      	bne.n	800b66e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b668:	f000 fdb0 	bl	800c1cc <xTimerCreateTimerTask>
 800b66c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d118      	bne.n	800b6a6 <vTaskStartScheduler+0x92>
	__asm volatile
 800b674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b678:	f383 8811 	msr	BASEPRI, r3
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	613b      	str	r3, [r7, #16]
}
 800b686:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b688:	4b13      	ldr	r3, [pc, #76]	; (800b6d8 <vTaskStartScheduler+0xc4>)
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295
 800b68e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b690:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <vTaskStartScheduler+0xc8>)
 800b692:	2201      	movs	r2, #1
 800b694:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b696:	4b12      	ldr	r3, [pc, #72]	; (800b6e0 <vTaskStartScheduler+0xcc>)
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b69c:	f7f5 ffb6 	bl	800160c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6a0:	f001 f96e 	bl	800c980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6a4:	e00e      	b.n	800b6c4 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ac:	d10a      	bne.n	800b6c4 <vTaskStartScheduler+0xb0>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	60fb      	str	r3, [r7, #12]
}
 800b6c0:	bf00      	nop
 800b6c2:	e7fe      	b.n	800b6c2 <vTaskStartScheduler+0xae>
}
 800b6c4:	bf00      	nop
 800b6c6:	3718      	adds	r7, #24
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	0800e408 	.word	0x0800e408
 800b6d0:	0800bd51 	.word	0x0800bd51
 800b6d4:	20001748 	.word	0x20001748
 800b6d8:	20001744 	.word	0x20001744
 800b6dc:	20001730 	.word	0x20001730
 800b6e0:	20001728 	.word	0x20001728

0800b6e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b6e8:	4b04      	ldr	r3, [pc, #16]	; (800b6fc <vTaskSuspendAll+0x18>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	4a03      	ldr	r2, [pc, #12]	; (800b6fc <vTaskSuspendAll+0x18>)
 800b6f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b6f2:	bf00      	nop
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	2000174c 	.word	0x2000174c

0800b700 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b70a:	2300      	movs	r3, #0
 800b70c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b70e:	4b42      	ldr	r3, [pc, #264]	; (800b818 <xTaskResumeAll+0x118>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10a      	bne.n	800b72c <xTaskResumeAll+0x2c>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	603b      	str	r3, [r7, #0]
}
 800b728:	bf00      	nop
 800b72a:	e7fe      	b.n	800b72a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b72c:	f001 f9ca 	bl	800cac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b730:	4b39      	ldr	r3, [pc, #228]	; (800b818 <xTaskResumeAll+0x118>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3b01      	subs	r3, #1
 800b736:	4a38      	ldr	r2, [pc, #224]	; (800b818 <xTaskResumeAll+0x118>)
 800b738:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b73a:	4b37      	ldr	r3, [pc, #220]	; (800b818 <xTaskResumeAll+0x118>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d162      	bne.n	800b808 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b742:	4b36      	ldr	r3, [pc, #216]	; (800b81c <xTaskResumeAll+0x11c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d05e      	beq.n	800b808 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b74a:	e02f      	b.n	800b7ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b74c:	4b34      	ldr	r3, [pc, #208]	; (800b820 <xTaskResumeAll+0x120>)
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	3318      	adds	r3, #24
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff f81b 	bl	800a794 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3304      	adds	r3, #4
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff f816 	bl	800a794 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76c:	4b2d      	ldr	r3, [pc, #180]	; (800b824 <xTaskResumeAll+0x124>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	429a      	cmp	r2, r3
 800b772:	d903      	bls.n	800b77c <xTaskResumeAll+0x7c>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	4a2a      	ldr	r2, [pc, #168]	; (800b824 <xTaskResumeAll+0x124>)
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b780:	4613      	mov	r3, r2
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	4413      	add	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4a27      	ldr	r2, [pc, #156]	; (800b828 <xTaskResumeAll+0x128>)
 800b78a:	441a      	add	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	3304      	adds	r3, #4
 800b790:	4619      	mov	r1, r3
 800b792:	4610      	mov	r0, r2
 800b794:	f7fe ffa1 	bl	800a6da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79c:	4b23      	ldr	r3, [pc, #140]	; (800b82c <xTaskResumeAll+0x12c>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d302      	bcc.n	800b7ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b7a6:	4b22      	ldr	r3, [pc, #136]	; (800b830 <xTaskResumeAll+0x130>)
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7ac:	4b1c      	ldr	r3, [pc, #112]	; (800b820 <xTaskResumeAll+0x120>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1cb      	bne.n	800b74c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7ba:	f000 fbb9 	bl	800bf30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7be:	4b1d      	ldr	r3, [pc, #116]	; (800b834 <xTaskResumeAll+0x134>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d010      	beq.n	800b7ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7ca:	f000 f847 	bl	800b85c <xTaskIncrementTick>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b7d4:	4b16      	ldr	r3, [pc, #88]	; (800b830 <xTaskResumeAll+0x130>)
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1f1      	bne.n	800b7ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b7e6:	4b13      	ldr	r3, [pc, #76]	; (800b834 <xTaskResumeAll+0x134>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7ec:	4b10      	ldr	r3, [pc, #64]	; (800b830 <xTaskResumeAll+0x130>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d009      	beq.n	800b808 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7f8:	4b0f      	ldr	r3, [pc, #60]	; (800b838 <xTaskResumeAll+0x138>)
 800b7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b808:	f001 f98c 	bl	800cb24 <vPortExitCritical>

	return xAlreadyYielded;
 800b80c:	68bb      	ldr	r3, [r7, #8]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	2000174c 	.word	0x2000174c
 800b81c:	20001724 	.word	0x20001724
 800b820:	200016e4 	.word	0x200016e4
 800b824:	2000172c 	.word	0x2000172c
 800b828:	20001254 	.word	0x20001254
 800b82c:	20001250 	.word	0x20001250
 800b830:	20001738 	.word	0x20001738
 800b834:	20001734 	.word	0x20001734
 800b838:	e000ed04 	.word	0xe000ed04

0800b83c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b842:	4b05      	ldr	r3, [pc, #20]	; (800b858 <xTaskGetTickCount+0x1c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b848:	687b      	ldr	r3, [r7, #4]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	20001728 	.word	0x20001728

0800b85c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b866:	4b4f      	ldr	r3, [pc, #316]	; (800b9a4 <xTaskIncrementTick+0x148>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f040 808f 	bne.w	800b98e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b870:	4b4d      	ldr	r3, [pc, #308]	; (800b9a8 <xTaskIncrementTick+0x14c>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3301      	adds	r3, #1
 800b876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b878:	4a4b      	ldr	r2, [pc, #300]	; (800b9a8 <xTaskIncrementTick+0x14c>)
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d120      	bne.n	800b8c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b884:	4b49      	ldr	r3, [pc, #292]	; (800b9ac <xTaskIncrementTick+0x150>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00a      	beq.n	800b8a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	603b      	str	r3, [r7, #0]
}
 800b8a0:	bf00      	nop
 800b8a2:	e7fe      	b.n	800b8a2 <xTaskIncrementTick+0x46>
 800b8a4:	4b41      	ldr	r3, [pc, #260]	; (800b9ac <xTaskIncrementTick+0x150>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	60fb      	str	r3, [r7, #12]
 800b8aa:	4b41      	ldr	r3, [pc, #260]	; (800b9b0 <xTaskIncrementTick+0x154>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a3f      	ldr	r2, [pc, #252]	; (800b9ac <xTaskIncrementTick+0x150>)
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	4a3f      	ldr	r2, [pc, #252]	; (800b9b0 <xTaskIncrementTick+0x154>)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6013      	str	r3, [r2, #0]
 800b8b8:	4b3e      	ldr	r3, [pc, #248]	; (800b9b4 <xTaskIncrementTick+0x158>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	4a3d      	ldr	r2, [pc, #244]	; (800b9b4 <xTaskIncrementTick+0x158>)
 800b8c0:	6013      	str	r3, [r2, #0]
 800b8c2:	f000 fb35 	bl	800bf30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8c6:	4b3c      	ldr	r3, [pc, #240]	; (800b9b8 <xTaskIncrementTick+0x15c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d349      	bcc.n	800b964 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8d0:	4b36      	ldr	r3, [pc, #216]	; (800b9ac <xTaskIncrementTick+0x150>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d104      	bne.n	800b8e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8da:	4b37      	ldr	r3, [pc, #220]	; (800b9b8 <xTaskIncrementTick+0x15c>)
 800b8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e0:	601a      	str	r2, [r3, #0]
					break;
 800b8e2:	e03f      	b.n	800b964 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8e4:	4b31      	ldr	r3, [pc, #196]	; (800b9ac <xTaskIncrementTick+0x150>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d203      	bcs.n	800b904 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8fc:	4a2e      	ldr	r2, [pc, #184]	; (800b9b8 <xTaskIncrementTick+0x15c>)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b902:	e02f      	b.n	800b964 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	3304      	adds	r3, #4
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fe ff43 	bl	800a794 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	3318      	adds	r3, #24
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fe ff3a 	bl	800a794 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b924:	4b25      	ldr	r3, [pc, #148]	; (800b9bc <xTaskIncrementTick+0x160>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d903      	bls.n	800b934 <xTaskIncrementTick+0xd8>
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b930:	4a22      	ldr	r2, [pc, #136]	; (800b9bc <xTaskIncrementTick+0x160>)
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b938:	4613      	mov	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4a1f      	ldr	r2, [pc, #124]	; (800b9c0 <xTaskIncrementTick+0x164>)
 800b942:	441a      	add	r2, r3
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	3304      	adds	r3, #4
 800b948:	4619      	mov	r1, r3
 800b94a:	4610      	mov	r0, r2
 800b94c:	f7fe fec5 	bl	800a6da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b954:	4b1b      	ldr	r3, [pc, #108]	; (800b9c4 <xTaskIncrementTick+0x168>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d3b8      	bcc.n	800b8d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b95e:	2301      	movs	r3, #1
 800b960:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b962:	e7b5      	b.n	800b8d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b964:	4b17      	ldr	r3, [pc, #92]	; (800b9c4 <xTaskIncrementTick+0x168>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96a:	4915      	ldr	r1, [pc, #84]	; (800b9c0 <xTaskIncrementTick+0x164>)
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	440b      	add	r3, r1
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d901      	bls.n	800b980 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b97c:	2301      	movs	r3, #1
 800b97e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b980:	4b11      	ldr	r3, [pc, #68]	; (800b9c8 <xTaskIncrementTick+0x16c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d007      	beq.n	800b998 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b988:	2301      	movs	r3, #1
 800b98a:	617b      	str	r3, [r7, #20]
 800b98c:	e004      	b.n	800b998 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b98e:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <xTaskIncrementTick+0x170>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	3301      	adds	r3, #1
 800b994:	4a0d      	ldr	r2, [pc, #52]	; (800b9cc <xTaskIncrementTick+0x170>)
 800b996:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b998:	697b      	ldr	r3, [r7, #20]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3718      	adds	r7, #24
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	2000174c 	.word	0x2000174c
 800b9a8:	20001728 	.word	0x20001728
 800b9ac:	200016dc 	.word	0x200016dc
 800b9b0:	200016e0 	.word	0x200016e0
 800b9b4:	2000173c 	.word	0x2000173c
 800b9b8:	20001744 	.word	0x20001744
 800b9bc:	2000172c 	.word	0x2000172c
 800b9c0:	20001254 	.word	0x20001254
 800b9c4:	20001250 	.word	0x20001250
 800b9c8:	20001738 	.word	0x20001738
 800b9cc:	20001734 	.word	0x20001734

0800b9d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9d6:	4b33      	ldr	r3, [pc, #204]	; (800baa4 <vTaskSwitchContext+0xd4>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d003      	beq.n	800b9e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9de:	4b32      	ldr	r3, [pc, #200]	; (800baa8 <vTaskSwitchContext+0xd8>)
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9e4:	e05a      	b.n	800ba9c <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 800b9e6:	4b30      	ldr	r3, [pc, #192]	; (800baa8 <vTaskSwitchContext+0xd8>)
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b9ec:	f7f5 fe15 	bl	800161a <getRunTimeCounterValue>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	4a2e      	ldr	r2, [pc, #184]	; (800baac <vTaskSwitchContext+0xdc>)
 800b9f4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b9f6:	4b2d      	ldr	r3, [pc, #180]	; (800baac <vTaskSwitchContext+0xdc>)
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	4b2d      	ldr	r3, [pc, #180]	; (800bab0 <vTaskSwitchContext+0xe0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d909      	bls.n	800ba16 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ba02:	4b2c      	ldr	r3, [pc, #176]	; (800bab4 <vTaskSwitchContext+0xe4>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800ba08:	4a28      	ldr	r2, [pc, #160]	; (800baac <vTaskSwitchContext+0xdc>)
 800ba0a:	6810      	ldr	r0, [r2, #0]
 800ba0c:	4a28      	ldr	r2, [pc, #160]	; (800bab0 <vTaskSwitchContext+0xe0>)
 800ba0e:	6812      	ldr	r2, [r2, #0]
 800ba10:	1a82      	subs	r2, r0, r2
 800ba12:	440a      	add	r2, r1
 800ba14:	661a      	str	r2, [r3, #96]	; 0x60
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ba16:	4b25      	ldr	r3, [pc, #148]	; (800baac <vTaskSwitchContext+0xdc>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a25      	ldr	r2, [pc, #148]	; (800bab0 <vTaskSwitchContext+0xe0>)
 800ba1c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba1e:	4b26      	ldr	r3, [pc, #152]	; (800bab8 <vTaskSwitchContext+0xe8>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	60fb      	str	r3, [r7, #12]
 800ba24:	e010      	b.n	800ba48 <vTaskSwitchContext+0x78>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10a      	bne.n	800ba42 <vTaskSwitchContext+0x72>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	607b      	str	r3, [r7, #4]
}
 800ba3e:	bf00      	nop
 800ba40:	e7fe      	b.n	800ba40 <vTaskSwitchContext+0x70>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	491c      	ldr	r1, [pc, #112]	; (800babc <vTaskSwitchContext+0xec>)
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	440b      	add	r3, r1
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d0e4      	beq.n	800ba26 <vTaskSwitchContext+0x56>
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4a15      	ldr	r2, [pc, #84]	; (800babc <vTaskSwitchContext+0xec>)
 800ba68:	4413      	add	r3, r2
 800ba6a:	60bb      	str	r3, [r7, #8]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	605a      	str	r2, [r3, #4]
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	3308      	adds	r3, #8
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d104      	bne.n	800ba8c <vTaskSwitchContext+0xbc>
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	605a      	str	r2, [r3, #4]
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	4a08      	ldr	r2, [pc, #32]	; (800bab4 <vTaskSwitchContext+0xe4>)
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	4a08      	ldr	r2, [pc, #32]	; (800bab8 <vTaskSwitchContext+0xe8>)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6013      	str	r3, [r2, #0]
}
 800ba9c:	bf00      	nop
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	2000174c 	.word	0x2000174c
 800baa8:	20001738 	.word	0x20001738
 800baac:	20001754 	.word	0x20001754
 800bab0:	20001750 	.word	0x20001750
 800bab4:	20001250 	.word	0x20001250
 800bab8:	2000172c 	.word	0x2000172c
 800babc:	20001254 	.word	0x20001254

0800bac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d10a      	bne.n	800bae6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	60fb      	str	r3, [r7, #12]
}
 800bae2:	bf00      	nop
 800bae4:	e7fe      	b.n	800bae4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bae6:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <vTaskPlaceOnEventList+0x44>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3318      	adds	r3, #24
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7fe fe17 	bl	800a722 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baf4:	2101      	movs	r1, #1
 800baf6:	6838      	ldr	r0, [r7, #0]
 800baf8:	f000 fb0e 	bl	800c118 <prvAddCurrentTaskToDelayedList>
}
 800bafc:	bf00      	nop
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	20001250 	.word	0x20001250

0800bb08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10a      	bne.n	800bb30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1e:	f383 8811 	msr	BASEPRI, r3
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	617b      	str	r3, [r7, #20]
}
 800bb2c:	bf00      	nop
 800bb2e:	e7fe      	b.n	800bb2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb30:	4b0a      	ldr	r3, [pc, #40]	; (800bb5c <vTaskPlaceOnEventListRestricted+0x54>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3318      	adds	r3, #24
 800bb36:	4619      	mov	r1, r3
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f7fe fdce 	bl	800a6da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb44:	f04f 33ff 	mov.w	r3, #4294967295
 800bb48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb4a:	6879      	ldr	r1, [r7, #4]
 800bb4c:	68b8      	ldr	r0, [r7, #8]
 800bb4e:	f000 fae3 	bl	800c118 <prvAddCurrentTaskToDelayedList>
	}
 800bb52:	bf00      	nop
 800bb54:	3718      	adds	r7, #24
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20001250 	.word	0x20001250

0800bb60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10a      	bne.n	800bb8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	60fb      	str	r3, [r7, #12]
}
 800bb88:	bf00      	nop
 800bb8a:	e7fe      	b.n	800bb8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	3318      	adds	r3, #24
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe fdff 	bl	800a794 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb96:	4b1e      	ldr	r3, [pc, #120]	; (800bc10 <xTaskRemoveFromEventList+0xb0>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d11d      	bne.n	800bbda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	3304      	adds	r3, #4
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fe fdf6 	bl	800a794 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbac:	4b19      	ldr	r3, [pc, #100]	; (800bc14 <xTaskRemoveFromEventList+0xb4>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d903      	bls.n	800bbbc <xTaskRemoveFromEventList+0x5c>
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb8:	4a16      	ldr	r2, [pc, #88]	; (800bc14 <xTaskRemoveFromEventList+0xb4>)
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4413      	add	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4a13      	ldr	r2, [pc, #76]	; (800bc18 <xTaskRemoveFromEventList+0xb8>)
 800bbca:	441a      	add	r2, r3
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	4610      	mov	r0, r2
 800bbd4:	f7fe fd81 	bl	800a6da <vListInsertEnd>
 800bbd8:	e005      	b.n	800bbe6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	3318      	adds	r3, #24
 800bbde:	4619      	mov	r1, r3
 800bbe0:	480e      	ldr	r0, [pc, #56]	; (800bc1c <xTaskRemoveFromEventList+0xbc>)
 800bbe2:	f7fe fd7a 	bl	800a6da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbea:	4b0d      	ldr	r3, [pc, #52]	; (800bc20 <xTaskRemoveFromEventList+0xc0>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d905      	bls.n	800bc00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbf8:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <xTaskRemoveFromEventList+0xc4>)
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	e001      	b.n	800bc04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bc00:	2300      	movs	r3, #0
 800bc02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc04:	697b      	ldr	r3, [r7, #20]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3718      	adds	r7, #24
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	2000174c 	.word	0x2000174c
 800bc14:	2000172c 	.word	0x2000172c
 800bc18:	20001254 	.word	0x20001254
 800bc1c:	200016e4 	.word	0x200016e4
 800bc20:	20001250 	.word	0x20001250
 800bc24:	20001738 	.word	0x20001738

0800bc28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc30:	4b06      	ldr	r3, [pc, #24]	; (800bc4c <vTaskInternalSetTimeOutState+0x24>)
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc38:	4b05      	ldr	r3, [pc, #20]	; (800bc50 <vTaskInternalSetTimeOutState+0x28>)
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	605a      	str	r2, [r3, #4]
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr
 800bc4c:	2000173c 	.word	0x2000173c
 800bc50:	20001728 	.word	0x20001728

0800bc54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	613b      	str	r3, [r7, #16]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10a      	bne.n	800bc96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc84:	f383 8811 	msr	BASEPRI, r3
 800bc88:	f3bf 8f6f 	isb	sy
 800bc8c:	f3bf 8f4f 	dsb	sy
 800bc90:	60fb      	str	r3, [r7, #12]
}
 800bc92:	bf00      	nop
 800bc94:	e7fe      	b.n	800bc94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc96:	f000 ff15 	bl	800cac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc9a:	4b24      	ldr	r3, [pc, #144]	; (800bd2c <xTaskCheckForTimeOut+0xd8>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	69ba      	ldr	r2, [r7, #24]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800bcaa:	4b21      	ldr	r3, [pc, #132]	; (800bd30 <xTaskCheckForTimeOut+0xdc>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d007      	beq.n	800bcc6 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800bcb6:	4b1e      	ldr	r3, [pc, #120]	; (800bd30 <xTaskCheckForTimeOut+0xdc>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	61fb      	str	r3, [r7, #28]
 800bcc4:	e02b      	b.n	800bd1e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcce:	d102      	bne.n	800bcd6 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	61fb      	str	r3, [r7, #28]
 800bcd4:	e023      	b.n	800bd1e <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	4b16      	ldr	r3, [pc, #88]	; (800bd34 <xTaskCheckForTimeOut+0xe0>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d007      	beq.n	800bcf2 <xTaskCheckForTimeOut+0x9e>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	69ba      	ldr	r2, [r7, #24]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d302      	bcc.n	800bcf2 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcec:	2301      	movs	r3, #1
 800bcee:	61fb      	str	r3, [r7, #28]
 800bcf0:	e015      	b.n	800bd1e <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d20b      	bcs.n	800bd14 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	1ad2      	subs	r2, r2, r3
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f7ff ff8d 	bl	800bc28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	61fb      	str	r3, [r7, #28]
 800bd12:	e004      	b.n	800bd1e <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd1e:	f000 ff01 	bl	800cb24 <vPortExitCritical>

	return xReturn;
 800bd22:	69fb      	ldr	r3, [r7, #28]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3720      	adds	r7, #32
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	20001728 	.word	0x20001728
 800bd30:	20001250 	.word	0x20001250
 800bd34:	2000173c 	.word	0x2000173c

0800bd38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd38:	b480      	push	{r7}
 800bd3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd3c:	4b03      	ldr	r3, [pc, #12]	; (800bd4c <vTaskMissedYield+0x14>)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	601a      	str	r2, [r3, #0]
}
 800bd42:	bf00      	nop
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	20001738 	.word	0x20001738

0800bd50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd58:	f000 f854 	bl	800be04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd5c:	4b07      	ldr	r3, [pc, #28]	; (800bd7c <prvIdleTask+0x2c>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d907      	bls.n	800bd74 <prvIdleTask+0x24>
			{
				taskYIELD();
 800bd64:	4b06      	ldr	r3, [pc, #24]	; (800bd80 <prvIdleTask+0x30>)
 800bd66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800bd74:	f7f5 fc59 	bl	800162a <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bd78:	e7ee      	b.n	800bd58 <prvIdleTask+0x8>
 800bd7a:	bf00      	nop
 800bd7c:	20001254 	.word	0x20001254
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	607b      	str	r3, [r7, #4]
 800bd8e:	e00c      	b.n	800bdaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	4613      	mov	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4a12      	ldr	r2, [pc, #72]	; (800bde4 <prvInitialiseTaskLists+0x60>)
 800bd9c:	4413      	add	r3, r2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fe fc6e 	bl	800a680 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3301      	adds	r3, #1
 800bda8:	607b      	str	r3, [r7, #4]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b37      	cmp	r3, #55	; 0x37
 800bdae:	d9ef      	bls.n	800bd90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bdb0:	480d      	ldr	r0, [pc, #52]	; (800bde8 <prvInitialiseTaskLists+0x64>)
 800bdb2:	f7fe fc65 	bl	800a680 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bdb6:	480d      	ldr	r0, [pc, #52]	; (800bdec <prvInitialiseTaskLists+0x68>)
 800bdb8:	f7fe fc62 	bl	800a680 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bdbc:	480c      	ldr	r0, [pc, #48]	; (800bdf0 <prvInitialiseTaskLists+0x6c>)
 800bdbe:	f7fe fc5f 	bl	800a680 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdc2:	480c      	ldr	r0, [pc, #48]	; (800bdf4 <prvInitialiseTaskLists+0x70>)
 800bdc4:	f7fe fc5c 	bl	800a680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdc8:	480b      	ldr	r0, [pc, #44]	; (800bdf8 <prvInitialiseTaskLists+0x74>)
 800bdca:	f7fe fc59 	bl	800a680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdce:	4b0b      	ldr	r3, [pc, #44]	; (800bdfc <prvInitialiseTaskLists+0x78>)
 800bdd0:	4a05      	ldr	r2, [pc, #20]	; (800bde8 <prvInitialiseTaskLists+0x64>)
 800bdd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdd4:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <prvInitialiseTaskLists+0x7c>)
 800bdd6:	4a05      	ldr	r2, [pc, #20]	; (800bdec <prvInitialiseTaskLists+0x68>)
 800bdd8:	601a      	str	r2, [r3, #0]
}
 800bdda:	bf00      	nop
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	20001254 	.word	0x20001254
 800bde8:	200016b4 	.word	0x200016b4
 800bdec:	200016c8 	.word	0x200016c8
 800bdf0:	200016e4 	.word	0x200016e4
 800bdf4:	200016f8 	.word	0x200016f8
 800bdf8:	20001710 	.word	0x20001710
 800bdfc:	200016dc 	.word	0x200016dc
 800be00:	200016e0 	.word	0x200016e0

0800be04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be0a:	e019      	b.n	800be40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be0c:	f000 fe5a 	bl	800cac4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be10:	4b10      	ldr	r3, [pc, #64]	; (800be54 <prvCheckTasksWaitingTermination+0x50>)
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	3304      	adds	r3, #4
 800be1c:	4618      	mov	r0, r3
 800be1e:	f7fe fcb9 	bl	800a794 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be22:	4b0d      	ldr	r3, [pc, #52]	; (800be58 <prvCheckTasksWaitingTermination+0x54>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	3b01      	subs	r3, #1
 800be28:	4a0b      	ldr	r2, [pc, #44]	; (800be58 <prvCheckTasksWaitingTermination+0x54>)
 800be2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be2c:	4b0b      	ldr	r3, [pc, #44]	; (800be5c <prvCheckTasksWaitingTermination+0x58>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3b01      	subs	r3, #1
 800be32:	4a0a      	ldr	r2, [pc, #40]	; (800be5c <prvCheckTasksWaitingTermination+0x58>)
 800be34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be36:	f000 fe75 	bl	800cb24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f848 	bl	800bed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be40:	4b06      	ldr	r3, [pc, #24]	; (800be5c <prvCheckTasksWaitingTermination+0x58>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1e1      	bne.n	800be0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be48:	bf00      	nop
 800be4a:	bf00      	nop
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	200016f8 	.word	0x200016f8
 800be58:	20001724 	.word	0x20001724
 800be5c:	2000170c 	.word	0x2000170c

0800be60 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800be60:	b480      	push	{r7}
 800be62:	b085      	sub	sp, #20
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800be68:	2300      	movs	r3, #0
 800be6a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800be6c:	e005      	b.n	800be7a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3301      	adds	r3, #1
 800be72:	607b      	str	r3, [r7, #4]
			ulCount++;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3301      	adds	r3, #1
 800be78:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	2ba5      	cmp	r3, #165	; 0xa5
 800be80:	d0f5      	beq.n	800be6e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	089b      	lsrs	r3, r3, #2
 800be86:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	b29b      	uxth	r3, r3
	}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <uxTaskGetStackHighWaterMark+0x14>
 800bea6:	4b09      	ldr	r3, [pc, #36]	; (800becc <uxTaskGetStackHighWaterMark+0x34>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	e000      	b.n	800beae <uxTaskGetStackHighWaterMark+0x16>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800beb6:	6938      	ldr	r0, [r7, #16]
 800beb8:	f7ff ffd2 	bl	800be60 <prvTaskCheckFreeStackSpace>
 800bebc:	4603      	mov	r3, r0
 800bebe:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800bec0:	68fb      	ldr	r3, [r7, #12]
	}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3718      	adds	r7, #24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	20001250 	.word	0x20001250

0800bed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d108      	bne.n	800bef4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 ffde 	bl	800cea8 <vPortFree>
				vPortFree( pxTCB );
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 ffdb 	bl	800cea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bef2:	e018      	b.n	800bf26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800befa:	2b01      	cmp	r3, #1
 800befc:	d103      	bne.n	800bf06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 ffd2 	bl	800cea8 <vPortFree>
	}
 800bf04:	e00f      	b.n	800bf26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d00a      	beq.n	800bf26 <prvDeleteTCB+0x56>
	__asm volatile
 800bf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf14:	f383 8811 	msr	BASEPRI, r3
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	60fb      	str	r3, [r7, #12]
}
 800bf22:	bf00      	nop
 800bf24:	e7fe      	b.n	800bf24 <prvDeleteTCB+0x54>
	}
 800bf26:	bf00      	nop
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
	...

0800bf30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf36:	4b0c      	ldr	r3, [pc, #48]	; (800bf68 <prvResetNextTaskUnblockTime+0x38>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d104      	bne.n	800bf4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf40:	4b0a      	ldr	r3, [pc, #40]	; (800bf6c <prvResetNextTaskUnblockTime+0x3c>)
 800bf42:	f04f 32ff 	mov.w	r2, #4294967295
 800bf46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf48:	e008      	b.n	800bf5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf4a:	4b07      	ldr	r3, [pc, #28]	; (800bf68 <prvResetNextTaskUnblockTime+0x38>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	4a04      	ldr	r2, [pc, #16]	; (800bf6c <prvResetNextTaskUnblockTime+0x3c>)
 800bf5a:	6013      	str	r3, [r2, #0]
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	200016dc 	.word	0x200016dc
 800bf6c:	20001744 	.word	0x20001744

0800bf70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf76:	4b0b      	ldr	r3, [pc, #44]	; (800bfa4 <xTaskGetSchedulerState+0x34>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d102      	bne.n	800bf84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	607b      	str	r3, [r7, #4]
 800bf82:	e008      	b.n	800bf96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf84:	4b08      	ldr	r3, [pc, #32]	; (800bfa8 <xTaskGetSchedulerState+0x38>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	607b      	str	r3, [r7, #4]
 800bf90:	e001      	b.n	800bf96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf92:	2300      	movs	r3, #0
 800bf94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf96:	687b      	ldr	r3, [r7, #4]
	}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	20001730 	.word	0x20001730
 800bfa8:	2000174c 	.word	0x2000174c

0800bfac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d056      	beq.n	800c070 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bfc2:	4b2e      	ldr	r3, [pc, #184]	; (800c07c <xTaskPriorityDisinherit+0xd0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	693a      	ldr	r2, [r7, #16]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d00a      	beq.n	800bfe2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	f383 8811 	msr	BASEPRI, r3
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	60fb      	str	r3, [r7, #12]
}
 800bfde:	bf00      	nop
 800bfe0:	e7fe      	b.n	800bfe0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10a      	bne.n	800c000 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	60bb      	str	r3, [r7, #8]
}
 800bffc:	bf00      	nop
 800bffe:	e7fe      	b.n	800bffe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c004:	1e5a      	subs	r2, r3, #1
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	659a      	str	r2, [r3, #88]	; 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c012:	429a      	cmp	r2, r3
 800c014:	d02c      	beq.n	800c070 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d128      	bne.n	800c070 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	3304      	adds	r3, #4
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe fbb6 	bl	800a794 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c034:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c040:	4b0f      	ldr	r3, [pc, #60]	; (800c080 <xTaskPriorityDisinherit+0xd4>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	429a      	cmp	r2, r3
 800c046:	d903      	bls.n	800c050 <xTaskPriorityDisinherit+0xa4>
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04c:	4a0c      	ldr	r2, [pc, #48]	; (800c080 <xTaskPriorityDisinherit+0xd4>)
 800c04e:	6013      	str	r3, [r2, #0]
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c054:	4613      	mov	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4a09      	ldr	r2, [pc, #36]	; (800c084 <xTaskPriorityDisinherit+0xd8>)
 800c05e:	441a      	add	r2, r3
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	3304      	adds	r3, #4
 800c064:	4619      	mov	r1, r3
 800c066:	4610      	mov	r0, r2
 800c068:	f7fe fb37 	bl	800a6da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c06c:	2301      	movs	r3, #1
 800c06e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c070:	697b      	ldr	r3, [r7, #20]
	}
 800c072:	4618      	mov	r0, r3
 800c074:	3718      	adds	r7, #24
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	20001250 	.word	0x20001250
 800c080:	2000172c 	.word	0x2000172c
 800c084:	20001254 	.word	0x20001254

0800c088 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c092:	f000 fd17 	bl	800cac4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c096:	4b1e      	ldr	r3, [pc, #120]	; (800c110 <ulTaskNotifyTake+0x88>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d113      	bne.n	800c0c8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c0a0:	4b1b      	ldr	r3, [pc, #108]	; (800c110 <ulTaskNotifyTake+0x88>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

				if( xTicksToWait > ( TickType_t ) 0 )
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00b      	beq.n	800c0c8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	6838      	ldr	r0, [r7, #0]
 800c0b4:	f000 f830 	bl	800c118 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c0b8:	4b16      	ldr	r3, [pc, #88]	; (800c114 <ulTaskNotifyTake+0x8c>)
 800c0ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c0c8:	f000 fd2c 	bl	800cb24 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c0cc:	f000 fcfa 	bl	800cac4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c0d0:	4b0f      	ldr	r3, [pc, #60]	; (800c110 <ulTaskNotifyTake+0x88>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c0d6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00c      	beq.n	800c0f8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d004      	beq.n	800c0ee <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c0e4:	4b0a      	ldr	r3, [pc, #40]	; (800c110 <ulTaskNotifyTake+0x88>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	665a      	str	r2, [r3, #100]	; 0x64
 800c0ec:	e004      	b.n	800c0f8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c0ee:	4b08      	ldr	r3, [pc, #32]	; (800c110 <ulTaskNotifyTake+0x88>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	3a01      	subs	r2, #1
 800c0f6:	665a      	str	r2, [r3, #100]	; 0x64
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0f8:	4b05      	ldr	r3, [pc, #20]	; (800c110 <ulTaskNotifyTake+0x88>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		}
		taskEXIT_CRITICAL();
 800c102:	f000 fd0f 	bl	800cb24 <vPortExitCritical>

		return ulReturn;
 800c106:	68fb      	ldr	r3, [r7, #12]
	}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	20001250 	.word	0x20001250
 800c114:	e000ed04 	.word	0xe000ed04

0800c118 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c122:	4b24      	ldr	r3, [pc, #144]	; (800c1b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800c128:	4b23      	ldr	r3, [pc, #140]	; (800c1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c132:	4b21      	ldr	r3, [pc, #132]	; (800c1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	3304      	adds	r3, #4
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fe fb2b 	bl	800a794 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c144:	d10a      	bne.n	800c15c <prvAddCurrentTaskToDelayedList+0x44>
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d007      	beq.n	800c15c <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c14c:	4b1a      	ldr	r3, [pc, #104]	; (800c1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	3304      	adds	r3, #4
 800c152:	4619      	mov	r1, r3
 800c154:	4819      	ldr	r0, [pc, #100]	; (800c1bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c156:	f7fe fac0 	bl	800a6da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c15a:	e026      	b.n	800c1aa <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4413      	add	r3, r2
 800c162:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c164:	4b14      	ldr	r3, [pc, #80]	; (800c1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	429a      	cmp	r2, r3
 800c172:	d209      	bcs.n	800c188 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c174:	4b12      	ldr	r3, [pc, #72]	; (800c1c0 <prvAddCurrentTaskToDelayedList+0xa8>)
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	4b0f      	ldr	r3, [pc, #60]	; (800c1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3304      	adds	r3, #4
 800c17e:	4619      	mov	r1, r3
 800c180:	4610      	mov	r0, r2
 800c182:	f7fe face 	bl	800a722 <vListInsert>
}
 800c186:	e010      	b.n	800c1aa <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c188:	4b0e      	ldr	r3, [pc, #56]	; (800c1c4 <prvAddCurrentTaskToDelayedList+0xac>)
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	4b0a      	ldr	r3, [pc, #40]	; (800c1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3304      	adds	r3, #4
 800c192:	4619      	mov	r1, r3
 800c194:	4610      	mov	r0, r2
 800c196:	f7fe fac4 	bl	800a722 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c19a:	4b0b      	ldr	r3, [pc, #44]	; (800c1c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d202      	bcs.n	800c1aa <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800c1a4:	4a08      	ldr	r2, [pc, #32]	; (800c1c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	6013      	str	r3, [r2, #0]
}
 800c1aa:	bf00      	nop
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20001728 	.word	0x20001728
 800c1b8:	20001250 	.word	0x20001250
 800c1bc:	20001710 	.word	0x20001710
 800c1c0:	200016e0 	.word	0x200016e0
 800c1c4:	200016dc 	.word	0x200016dc
 800c1c8:	20001744 	.word	0x20001744

0800c1cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08a      	sub	sp, #40	; 0x28
 800c1d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c1d6:	f000 fb07 	bl	800c7e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c1da:	4b1c      	ldr	r3, [pc, #112]	; (800c24c <xTimerCreateTimerTask+0x80>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d021      	beq.n	800c226 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c1ea:	1d3a      	adds	r2, r7, #4
 800c1ec:	f107 0108 	add.w	r1, r7, #8
 800c1f0:	f107 030c 	add.w	r3, r7, #12
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe fa29 	bl	800a64c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c1fa:	6879      	ldr	r1, [r7, #4]
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	9202      	str	r2, [sp, #8]
 800c202:	9301      	str	r3, [sp, #4]
 800c204:	2302      	movs	r3, #2
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	2300      	movs	r3, #0
 800c20a:	460a      	mov	r2, r1
 800c20c:	4910      	ldr	r1, [pc, #64]	; (800c250 <xTimerCreateTimerTask+0x84>)
 800c20e:	4811      	ldr	r0, [pc, #68]	; (800c254 <xTimerCreateTimerTask+0x88>)
 800c210:	f7fe ffd6 	bl	800b1c0 <xTaskCreateStatic>
 800c214:	4603      	mov	r3, r0
 800c216:	4a10      	ldr	r2, [pc, #64]	; (800c258 <xTimerCreateTimerTask+0x8c>)
 800c218:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c21a:	4b0f      	ldr	r3, [pc, #60]	; (800c258 <xTimerCreateTimerTask+0x8c>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d001      	beq.n	800c226 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c222:	2301      	movs	r3, #1
 800c224:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10a      	bne.n	800c242 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	613b      	str	r3, [r7, #16]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c242:	697b      	ldr	r3, [r7, #20]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	20001788 	.word	0x20001788
 800c250:	0800e438 	.word	0x0800e438
 800c254:	0800c391 	.word	0x0800c391
 800c258:	2000178c 	.word	0x2000178c

0800c25c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08a      	sub	sp, #40	; 0x28
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c26a:	2300      	movs	r3, #0
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10a      	bne.n	800c28a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	623b      	str	r3, [r7, #32]
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c28a:	4b1a      	ldr	r3, [pc, #104]	; (800c2f4 <xTimerGenericCommand+0x98>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d02a      	beq.n	800c2e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b05      	cmp	r3, #5
 800c2a2:	dc18      	bgt.n	800c2d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c2a4:	f7ff fe64 	bl	800bf70 <xTaskGetSchedulerState>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d109      	bne.n	800c2c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c2ae:	4b11      	ldr	r3, [pc, #68]	; (800c2f4 <xTimerGenericCommand+0x98>)
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	f107 0110 	add.w	r1, r7, #16
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ba:	f7fe fb99 	bl	800a9f0 <xQueueGenericSend>
 800c2be:	6278      	str	r0, [r7, #36]	; 0x24
 800c2c0:	e012      	b.n	800c2e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c2c2:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <xTimerGenericCommand+0x98>)
 800c2c4:	6818      	ldr	r0, [r3, #0]
 800c2c6:	f107 0110 	add.w	r1, r7, #16
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f7fe fb8f 	bl	800a9f0 <xQueueGenericSend>
 800c2d2:	6278      	str	r0, [r7, #36]	; 0x24
 800c2d4:	e008      	b.n	800c2e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c2d6:	4b07      	ldr	r3, [pc, #28]	; (800c2f4 <xTimerGenericCommand+0x98>)
 800c2d8:	6818      	ldr	r0, [r3, #0]
 800c2da:	f107 0110 	add.w	r1, r7, #16
 800c2de:	2300      	movs	r3, #0
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	f7fe fc83 	bl	800abec <xQueueGenericSendFromISR>
 800c2e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3728      	adds	r7, #40	; 0x28
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20001788 	.word	0x20001788

0800c2f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b088      	sub	sp, #32
 800c2fc:	af02      	add	r7, sp, #8
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c302:	4b22      	ldr	r3, [pc, #136]	; (800c38c <prvProcessExpiredTimer+0x94>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	3304      	adds	r3, #4
 800c310:	4618      	mov	r0, r3
 800c312:	f7fe fa3f 	bl	800a794 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c31c:	f003 0304 	and.w	r3, r3, #4
 800c320:	2b00      	cmp	r3, #0
 800c322:	d022      	beq.n	800c36a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	699a      	ldr	r2, [r3, #24]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	18d1      	adds	r1, r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	6978      	ldr	r0, [r7, #20]
 800c332:	f000 f8d1 	bl	800c4d8 <prvInsertTimerInActiveList>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d01f      	beq.n	800c37c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c33c:	2300      	movs	r3, #0
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	2300      	movs	r3, #0
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	2100      	movs	r1, #0
 800c346:	6978      	ldr	r0, [r7, #20]
 800c348:	f7ff ff88 	bl	800c25c <xTimerGenericCommand>
 800c34c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d113      	bne.n	800c37c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c358:	f383 8811 	msr	BASEPRI, r3
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	f3bf 8f4f 	dsb	sy
 800c364:	60fb      	str	r3, [r7, #12]
}
 800c366:	bf00      	nop
 800c368:	e7fe      	b.n	800c368 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c370:	f023 0301 	bic.w	r3, r3, #1
 800c374:	b2da      	uxtb	r2, r3
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	6a1b      	ldr	r3, [r3, #32]
 800c380:	6978      	ldr	r0, [r7, #20]
 800c382:	4798      	blx	r3
}
 800c384:	bf00      	nop
 800c386:	3718      	adds	r7, #24
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	20001780 	.word	0x20001780

0800c390 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c398:	f107 0308 	add.w	r3, r7, #8
 800c39c:	4618      	mov	r0, r3
 800c39e:	f000 f857 	bl	800c450 <prvGetNextExpireTime>
 800c3a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f000 f803 	bl	800c3b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c3ae:	f000 f8d5 	bl	800c55c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3b2:	e7f1      	b.n	800c398 <prvTimerTask+0x8>

0800c3b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c3be:	f7ff f991 	bl	800b6e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3c2:	f107 0308 	add.w	r3, r7, #8
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f000 f866 	bl	800c498 <prvSampleTimeNow>
 800c3cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d130      	bne.n	800c436 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d10a      	bne.n	800c3f0 <prvProcessTimerOrBlockTask+0x3c>
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d806      	bhi.n	800c3f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c3e2:	f7ff f98d 	bl	800b700 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c3e6:	68f9      	ldr	r1, [r7, #12]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff ff85 	bl	800c2f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c3ee:	e024      	b.n	800c43a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d008      	beq.n	800c408 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c3f6:	4b13      	ldr	r3, [pc, #76]	; (800c444 <prvProcessTimerOrBlockTask+0x90>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d101      	bne.n	800c404 <prvProcessTimerOrBlockTask+0x50>
 800c400:	2301      	movs	r3, #1
 800c402:	e000      	b.n	800c406 <prvProcessTimerOrBlockTask+0x52>
 800c404:	2300      	movs	r3, #0
 800c406:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c408:	4b0f      	ldr	r3, [pc, #60]	; (800c448 <prvProcessTimerOrBlockTask+0x94>)
 800c40a:	6818      	ldr	r0, [r3, #0]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	4619      	mov	r1, r3
 800c416:	f7fe fe9f 	bl	800b158 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c41a:	f7ff f971 	bl	800b700 <xTaskResumeAll>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10a      	bne.n	800c43a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c424:	4b09      	ldr	r3, [pc, #36]	; (800c44c <prvProcessTimerOrBlockTask+0x98>)
 800c426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	f3bf 8f6f 	isb	sy
}
 800c434:	e001      	b.n	800c43a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c436:	f7ff f963 	bl	800b700 <xTaskResumeAll>
}
 800c43a:	bf00      	nop
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	20001784 	.word	0x20001784
 800c448:	20001788 	.word	0x20001788
 800c44c:	e000ed04 	.word	0xe000ed04

0800c450 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c458:	4b0e      	ldr	r3, [pc, #56]	; (800c494 <prvGetNextExpireTime+0x44>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <prvGetNextExpireTime+0x16>
 800c462:	2201      	movs	r2, #1
 800c464:	e000      	b.n	800c468 <prvGetNextExpireTime+0x18>
 800c466:	2200      	movs	r2, #0
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d105      	bne.n	800c480 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c474:	4b07      	ldr	r3, [pc, #28]	; (800c494 <prvGetNextExpireTime+0x44>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	60fb      	str	r3, [r7, #12]
 800c47e:	e001      	b.n	800c484 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c480:	2300      	movs	r3, #0
 800c482:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c484:	68fb      	ldr	r3, [r7, #12]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	20001780 	.word	0x20001780

0800c498 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c4a0:	f7ff f9cc 	bl	800b83c <xTaskGetTickCount>
 800c4a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c4a6:	4b0b      	ldr	r3, [pc, #44]	; (800c4d4 <prvSampleTimeNow+0x3c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d205      	bcs.n	800c4bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c4b0:	f000 f936 	bl	800c720 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	601a      	str	r2, [r3, #0]
 800c4ba:	e002      	b.n	800c4c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c4c2:	4a04      	ldr	r2, [pc, #16]	; (800c4d4 <prvSampleTimeNow+0x3c>)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20001790 	.word	0x20001790

0800c4d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d812      	bhi.n	800c524 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	1ad2      	subs	r2, r2, r3
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	699b      	ldr	r3, [r3, #24]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d302      	bcc.n	800c512 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c50c:	2301      	movs	r3, #1
 800c50e:	617b      	str	r3, [r7, #20]
 800c510:	e01b      	b.n	800c54a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c512:	4b10      	ldr	r3, [pc, #64]	; (800c554 <prvInsertTimerInActiveList+0x7c>)
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	3304      	adds	r3, #4
 800c51a:	4619      	mov	r1, r3
 800c51c:	4610      	mov	r0, r2
 800c51e:	f7fe f900 	bl	800a722 <vListInsert>
 800c522:	e012      	b.n	800c54a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d206      	bcs.n	800c53a <prvInsertTimerInActiveList+0x62>
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	429a      	cmp	r2, r3
 800c532:	d302      	bcc.n	800c53a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c534:	2301      	movs	r3, #1
 800c536:	617b      	str	r3, [r7, #20]
 800c538:	e007      	b.n	800c54a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c53a:	4b07      	ldr	r3, [pc, #28]	; (800c558 <prvInsertTimerInActiveList+0x80>)
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3304      	adds	r3, #4
 800c542:	4619      	mov	r1, r3
 800c544:	4610      	mov	r0, r2
 800c546:	f7fe f8ec 	bl	800a722 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c54a:	697b      	ldr	r3, [r7, #20]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3718      	adds	r7, #24
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	20001784 	.word	0x20001784
 800c558:	20001780 	.word	0x20001780

0800c55c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b08e      	sub	sp, #56	; 0x38
 800c560:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c562:	e0ca      	b.n	800c6fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	da18      	bge.n	800c59c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c56a:	1d3b      	adds	r3, r7, #4
 800c56c:	3304      	adds	r3, #4
 800c56e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10a      	bne.n	800c58c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	61fb      	str	r3, [r7, #28]
}
 800c588:	bf00      	nop
 800c58a:	e7fe      	b.n	800c58a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c592:	6850      	ldr	r0, [r2, #4]
 800c594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c596:	6892      	ldr	r2, [r2, #8]
 800c598:	4611      	mov	r1, r2
 800c59a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f2c0 80aa 	blt.w	800c6f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d004      	beq.n	800c5ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fe f8ed 	bl	800a794 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5ba:	463b      	mov	r3, r7
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff ff6b 	bl	800c498 <prvSampleTimeNow>
 800c5c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b09      	cmp	r3, #9
 800c5c8:	f200 8097 	bhi.w	800c6fa <prvProcessReceivedCommands+0x19e>
 800c5cc:	a201      	add	r2, pc, #4	; (adr r2, 800c5d4 <prvProcessReceivedCommands+0x78>)
 800c5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d2:	bf00      	nop
 800c5d4:	0800c5fd 	.word	0x0800c5fd
 800c5d8:	0800c5fd 	.word	0x0800c5fd
 800c5dc:	0800c5fd 	.word	0x0800c5fd
 800c5e0:	0800c671 	.word	0x0800c671
 800c5e4:	0800c685 	.word	0x0800c685
 800c5e8:	0800c6cf 	.word	0x0800c6cf
 800c5ec:	0800c5fd 	.word	0x0800c5fd
 800c5f0:	0800c5fd 	.word	0x0800c5fd
 800c5f4:	0800c671 	.word	0x0800c671
 800c5f8:	0800c685 	.word	0x0800c685
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c602:	f043 0301 	orr.w	r3, r3, #1
 800c606:	b2da      	uxtb	r2, r3
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	699b      	ldr	r3, [r3, #24]
 800c614:	18d1      	adds	r1, r2, r3
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c61a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c61c:	f7ff ff5c 	bl	800c4d8 <prvInsertTimerInActiveList>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d069      	beq.n	800c6fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c62c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c634:	f003 0304 	and.w	r3, r3, #4
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d05e      	beq.n	800c6fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	441a      	add	r2, r3
 800c644:	2300      	movs	r3, #0
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	2300      	movs	r3, #0
 800c64a:	2100      	movs	r1, #0
 800c64c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c64e:	f7ff fe05 	bl	800c25c <xTimerGenericCommand>
 800c652:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d14f      	bne.n	800c6fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65e:	f383 8811 	msr	BASEPRI, r3
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	f3bf 8f4f 	dsb	sy
 800c66a:	61bb      	str	r3, [r7, #24]
}
 800c66c:	bf00      	nop
 800c66e:	e7fe      	b.n	800c66e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c676:	f023 0301 	bic.w	r3, r3, #1
 800c67a:	b2da      	uxtb	r2, r3
 800c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c682:	e03a      	b.n	800c6fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c68a:	f043 0301 	orr.w	r3, r3, #1
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	699b      	ldr	r3, [r3, #24]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10a      	bne.n	800c6ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a8:	f383 8811 	msr	BASEPRI, r3
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	617b      	str	r3, [r7, #20]
}
 800c6b6:	bf00      	nop
 800c6b8:	e7fe      	b.n	800c6b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6bc:	699a      	ldr	r2, [r3, #24]
 800c6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c0:	18d1      	adds	r1, r2, r3
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6c8:	f7ff ff06 	bl	800c4d8 <prvInsertTimerInActiveList>
					break;
 800c6cc:	e015      	b.n	800c6fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6d4:	f003 0302 	and.w	r3, r3, #2
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d103      	bne.n	800c6e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6de:	f000 fbe3 	bl	800cea8 <vPortFree>
 800c6e2:	e00a      	b.n	800c6fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6ea:	f023 0301 	bic.w	r3, r3, #1
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c6f6:	e000      	b.n	800c6fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c6f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6fa:	4b08      	ldr	r3, [pc, #32]	; (800c71c <prvProcessReceivedCommands+0x1c0>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	1d39      	adds	r1, r7, #4
 800c700:	2200      	movs	r2, #0
 800c702:	4618      	mov	r0, r3
 800c704:	f7fe fb0e 	bl	800ad24 <xQueueReceive>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f47f af2a 	bne.w	800c564 <prvProcessReceivedCommands+0x8>
	}
}
 800c710:	bf00      	nop
 800c712:	bf00      	nop
 800c714:	3730      	adds	r7, #48	; 0x30
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20001788 	.word	0x20001788

0800c720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b088      	sub	sp, #32
 800c724:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c726:	e048      	b.n	800c7ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c728:	4b2d      	ldr	r3, [pc, #180]	; (800c7e0 <prvSwitchTimerLists+0xc0>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c732:	4b2b      	ldr	r3, [pc, #172]	; (800c7e0 <prvSwitchTimerLists+0xc0>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3304      	adds	r3, #4
 800c740:	4618      	mov	r0, r3
 800c742:	f7fe f827 	bl	800a794 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6a1b      	ldr	r3, [r3, #32]
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c754:	f003 0304 	and.w	r3, r3, #4
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d02e      	beq.n	800c7ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	4413      	add	r3, r2
 800c764:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c766:	68ba      	ldr	r2, [r7, #8]
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d90e      	bls.n	800c78c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c77a:	4b19      	ldr	r3, [pc, #100]	; (800c7e0 <prvSwitchTimerLists+0xc0>)
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3304      	adds	r3, #4
 800c782:	4619      	mov	r1, r3
 800c784:	4610      	mov	r0, r2
 800c786:	f7fd ffcc 	bl	800a722 <vListInsert>
 800c78a:	e016      	b.n	800c7ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c78c:	2300      	movs	r3, #0
 800c78e:	9300      	str	r3, [sp, #0]
 800c790:	2300      	movs	r3, #0
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	2100      	movs	r1, #0
 800c796:	68f8      	ldr	r0, [r7, #12]
 800c798:	f7ff fd60 	bl	800c25c <xTimerGenericCommand>
 800c79c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10a      	bne.n	800c7ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	603b      	str	r3, [r7, #0]
}
 800c7b6:	bf00      	nop
 800c7b8:	e7fe      	b.n	800c7b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7ba:	4b09      	ldr	r3, [pc, #36]	; (800c7e0 <prvSwitchTimerLists+0xc0>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1b1      	bne.n	800c728 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c7c4:	4b06      	ldr	r3, [pc, #24]	; (800c7e0 <prvSwitchTimerLists+0xc0>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c7ca:	4b06      	ldr	r3, [pc, #24]	; (800c7e4 <prvSwitchTimerLists+0xc4>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a04      	ldr	r2, [pc, #16]	; (800c7e0 <prvSwitchTimerLists+0xc0>)
 800c7d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c7d2:	4a04      	ldr	r2, [pc, #16]	; (800c7e4 <prvSwitchTimerLists+0xc4>)
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	6013      	str	r3, [r2, #0]
}
 800c7d8:	bf00      	nop
 800c7da:	3718      	adds	r7, #24
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	20001780 	.word	0x20001780
 800c7e4:	20001784 	.word	0x20001784

0800c7e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7ee:	f000 f969 	bl	800cac4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7f2:	4b15      	ldr	r3, [pc, #84]	; (800c848 <prvCheckForValidListAndQueue+0x60>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d120      	bne.n	800c83c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7fa:	4814      	ldr	r0, [pc, #80]	; (800c84c <prvCheckForValidListAndQueue+0x64>)
 800c7fc:	f7fd ff40 	bl	800a680 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c800:	4813      	ldr	r0, [pc, #76]	; (800c850 <prvCheckForValidListAndQueue+0x68>)
 800c802:	f7fd ff3d 	bl	800a680 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c806:	4b13      	ldr	r3, [pc, #76]	; (800c854 <prvCheckForValidListAndQueue+0x6c>)
 800c808:	4a10      	ldr	r2, [pc, #64]	; (800c84c <prvCheckForValidListAndQueue+0x64>)
 800c80a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c80c:	4b12      	ldr	r3, [pc, #72]	; (800c858 <prvCheckForValidListAndQueue+0x70>)
 800c80e:	4a10      	ldr	r2, [pc, #64]	; (800c850 <prvCheckForValidListAndQueue+0x68>)
 800c810:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c812:	2300      	movs	r3, #0
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	4b11      	ldr	r3, [pc, #68]	; (800c85c <prvCheckForValidListAndQueue+0x74>)
 800c818:	4a11      	ldr	r2, [pc, #68]	; (800c860 <prvCheckForValidListAndQueue+0x78>)
 800c81a:	2110      	movs	r1, #16
 800c81c:	200a      	movs	r0, #10
 800c81e:	f7fe f84b 	bl	800a8b8 <xQueueGenericCreateStatic>
 800c822:	4603      	mov	r3, r0
 800c824:	4a08      	ldr	r2, [pc, #32]	; (800c848 <prvCheckForValidListAndQueue+0x60>)
 800c826:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c828:	4b07      	ldr	r3, [pc, #28]	; (800c848 <prvCheckForValidListAndQueue+0x60>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d005      	beq.n	800c83c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c830:	4b05      	ldr	r3, [pc, #20]	; (800c848 <prvCheckForValidListAndQueue+0x60>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	490b      	ldr	r1, [pc, #44]	; (800c864 <prvCheckForValidListAndQueue+0x7c>)
 800c836:	4618      	mov	r0, r3
 800c838:	f7fe fc64 	bl	800b104 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c83c:	f000 f972 	bl	800cb24 <vPortExitCritical>
}
 800c840:	bf00      	nop
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	20001788 	.word	0x20001788
 800c84c:	20001758 	.word	0x20001758
 800c850:	2000176c 	.word	0x2000176c
 800c854:	20001780 	.word	0x20001780
 800c858:	20001784 	.word	0x20001784
 800c85c:	20001834 	.word	0x20001834
 800c860:	20001794 	.word	0x20001794
 800c864:	0800e440 	.word	0x0800e440

0800c868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c868:	b480      	push	{r7}
 800c86a:	b085      	sub	sp, #20
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	3b04      	subs	r3, #4
 800c878:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	3b04      	subs	r3, #4
 800c886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	f023 0201 	bic.w	r2, r3, #1
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	3b04      	subs	r3, #4
 800c896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c898:	4a0c      	ldr	r2, [pc, #48]	; (800c8cc <pxPortInitialiseStack+0x64>)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	3b14      	subs	r3, #20
 800c8a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3b04      	subs	r3, #4
 800c8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f06f 0202 	mvn.w	r2, #2
 800c8b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	3b20      	subs	r3, #32
 800c8bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8be:	68fb      	ldr	r3, [r7, #12]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	0800c8d1 	.word	0x0800c8d1

0800c8d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8da:	4b12      	ldr	r3, [pc, #72]	; (800c924 <prvTaskExitError+0x54>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e2:	d00a      	beq.n	800c8fa <prvTaskExitError+0x2a>
	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	60fb      	str	r3, [r7, #12]
}
 800c8f6:	bf00      	nop
 800c8f8:	e7fe      	b.n	800c8f8 <prvTaskExitError+0x28>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	60bb      	str	r3, [r7, #8]
}
 800c90c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c90e:	bf00      	nop
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d0fc      	beq.n	800c910 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c916:	bf00      	nop
 800c918:	bf00      	nop
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr
 800c924:	20000008 	.word	0x20000008
	...

0800c930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c930:	4b07      	ldr	r3, [pc, #28]	; (800c950 <pxCurrentTCBConst2>)
 800c932:	6819      	ldr	r1, [r3, #0]
 800c934:	6808      	ldr	r0, [r1, #0]
 800c936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93a:	f380 8809 	msr	PSP, r0
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f04f 0000 	mov.w	r0, #0
 800c946:	f380 8811 	msr	BASEPRI, r0
 800c94a:	4770      	bx	lr
 800c94c:	f3af 8000 	nop.w

0800c950 <pxCurrentTCBConst2>:
 800c950:	20001250 	.word	0x20001250
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c954:	bf00      	nop
 800c956:	bf00      	nop

0800c958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c958:	4808      	ldr	r0, [pc, #32]	; (800c97c <prvPortStartFirstTask+0x24>)
 800c95a:	6800      	ldr	r0, [r0, #0]
 800c95c:	6800      	ldr	r0, [r0, #0]
 800c95e:	f380 8808 	msr	MSP, r0
 800c962:	f04f 0000 	mov.w	r0, #0
 800c966:	f380 8814 	msr	CONTROL, r0
 800c96a:	b662      	cpsie	i
 800c96c:	b661      	cpsie	f
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	f3bf 8f6f 	isb	sy
 800c976:	df00      	svc	0
 800c978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c97a:	bf00      	nop
 800c97c:	e000ed08 	.word	0xe000ed08

0800c980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c986:	4b46      	ldr	r3, [pc, #280]	; (800caa0 <xPortStartScheduler+0x120>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a46      	ldr	r2, [pc, #280]	; (800caa4 <xPortStartScheduler+0x124>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d10a      	bne.n	800c9a6 <xPortStartScheduler+0x26>
	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	613b      	str	r3, [r7, #16]
}
 800c9a2:	bf00      	nop
 800c9a4:	e7fe      	b.n	800c9a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c9a6:	4b3e      	ldr	r3, [pc, #248]	; (800caa0 <xPortStartScheduler+0x120>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a3f      	ldr	r2, [pc, #252]	; (800caa8 <xPortStartScheduler+0x128>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d10a      	bne.n	800c9c6 <xPortStartScheduler+0x46>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	60fb      	str	r3, [r7, #12]
}
 800c9c2:	bf00      	nop
 800c9c4:	e7fe      	b.n	800c9c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c9c6:	4b39      	ldr	r3, [pc, #228]	; (800caac <xPortStartScheduler+0x12c>)
 800c9c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	22ff      	movs	r2, #255	; 0xff
 800c9d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c9e0:	78fb      	ldrb	r3, [r7, #3]
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	4b31      	ldr	r3, [pc, #196]	; (800cab0 <xPortStartScheduler+0x130>)
 800c9ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c9ee:	4b31      	ldr	r3, [pc, #196]	; (800cab4 <xPortStartScheduler+0x134>)
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9f4:	e009      	b.n	800ca0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c9f6:	4b2f      	ldr	r3, [pc, #188]	; (800cab4 <xPortStartScheduler+0x134>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	4a2d      	ldr	r2, [pc, #180]	; (800cab4 <xPortStartScheduler+0x134>)
 800c9fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca00:	78fb      	ldrb	r3, [r7, #3]
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca0a:	78fb      	ldrb	r3, [r7, #3]
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca12:	2b80      	cmp	r3, #128	; 0x80
 800ca14:	d0ef      	beq.n	800c9f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca16:	4b27      	ldr	r3, [pc, #156]	; (800cab4 <xPortStartScheduler+0x134>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f1c3 0307 	rsb	r3, r3, #7
 800ca1e:	2b04      	cmp	r3, #4
 800ca20:	d00a      	beq.n	800ca38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	60bb      	str	r3, [r7, #8]
}
 800ca34:	bf00      	nop
 800ca36:	e7fe      	b.n	800ca36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca38:	4b1e      	ldr	r3, [pc, #120]	; (800cab4 <xPortStartScheduler+0x134>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	021b      	lsls	r3, r3, #8
 800ca3e:	4a1d      	ldr	r2, [pc, #116]	; (800cab4 <xPortStartScheduler+0x134>)
 800ca40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca42:	4b1c      	ldr	r3, [pc, #112]	; (800cab4 <xPortStartScheduler+0x134>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ca4a:	4a1a      	ldr	r2, [pc, #104]	; (800cab4 <xPortStartScheduler+0x134>)
 800ca4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca56:	4b18      	ldr	r3, [pc, #96]	; (800cab8 <xPortStartScheduler+0x138>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a17      	ldr	r2, [pc, #92]	; (800cab8 <xPortStartScheduler+0x138>)
 800ca5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca62:	4b15      	ldr	r3, [pc, #84]	; (800cab8 <xPortStartScheduler+0x138>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a14      	ldr	r2, [pc, #80]	; (800cab8 <xPortStartScheduler+0x138>)
 800ca68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca6e:	f000 f8dd 	bl	800cc2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca72:	4b12      	ldr	r3, [pc, #72]	; (800cabc <xPortStartScheduler+0x13c>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca78:	f000 f8fc 	bl	800cc74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca7c:	4b10      	ldr	r3, [pc, #64]	; (800cac0 <xPortStartScheduler+0x140>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a0f      	ldr	r2, [pc, #60]	; (800cac0 <xPortStartScheduler+0x140>)
 800ca82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca88:	f7ff ff66 	bl	800c958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca8c:	f7fe ffa0 	bl	800b9d0 <vTaskSwitchContext>
	prvTaskExitError();
 800ca90:	f7ff ff1e 	bl	800c8d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3718      	adds	r7, #24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	e000ed00 	.word	0xe000ed00
 800caa4:	410fc271 	.word	0x410fc271
 800caa8:	410fc270 	.word	0x410fc270
 800caac:	e000e400 	.word	0xe000e400
 800cab0:	20001884 	.word	0x20001884
 800cab4:	20001888 	.word	0x20001888
 800cab8:	e000ed20 	.word	0xe000ed20
 800cabc:	20000008 	.word	0x20000008
 800cac0:	e000ef34 	.word	0xe000ef34

0800cac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	f383 8811 	msr	BASEPRI, r3
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	607b      	str	r3, [r7, #4]
}
 800cadc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cade:	4b0f      	ldr	r3, [pc, #60]	; (800cb1c <vPortEnterCritical+0x58>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	3301      	adds	r3, #1
 800cae4:	4a0d      	ldr	r2, [pc, #52]	; (800cb1c <vPortEnterCritical+0x58>)
 800cae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cae8:	4b0c      	ldr	r3, [pc, #48]	; (800cb1c <vPortEnterCritical+0x58>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d10f      	bne.n	800cb10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800caf0:	4b0b      	ldr	r3, [pc, #44]	; (800cb20 <vPortEnterCritical+0x5c>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00a      	beq.n	800cb10 <vPortEnterCritical+0x4c>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	603b      	str	r3, [r7, #0]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <vPortEnterCritical+0x4a>
	}
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	20000008 	.word	0x20000008
 800cb20:	e000ed04 	.word	0xe000ed04

0800cb24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb2a:	4b12      	ldr	r3, [pc, #72]	; (800cb74 <vPortExitCritical+0x50>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d10a      	bne.n	800cb48 <vPortExitCritical+0x24>
	__asm volatile
 800cb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb36:	f383 8811 	msr	BASEPRI, r3
 800cb3a:	f3bf 8f6f 	isb	sy
 800cb3e:	f3bf 8f4f 	dsb	sy
 800cb42:	607b      	str	r3, [r7, #4]
}
 800cb44:	bf00      	nop
 800cb46:	e7fe      	b.n	800cb46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cb48:	4b0a      	ldr	r3, [pc, #40]	; (800cb74 <vPortExitCritical+0x50>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	4a09      	ldr	r2, [pc, #36]	; (800cb74 <vPortExitCritical+0x50>)
 800cb50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb52:	4b08      	ldr	r3, [pc, #32]	; (800cb74 <vPortExitCritical+0x50>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d105      	bne.n	800cb66 <vPortExitCritical+0x42>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	f383 8811 	msr	BASEPRI, r3
}
 800cb64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb66:	bf00      	nop
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	20000008 	.word	0x20000008
	...

0800cb80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb80:	f3ef 8009 	mrs	r0, PSP
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	4b15      	ldr	r3, [pc, #84]	; (800cbe0 <pxCurrentTCBConst>)
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	f01e 0f10 	tst.w	lr, #16
 800cb90:	bf08      	it	eq
 800cb92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9a:	6010      	str	r0, [r2, #0]
 800cb9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cba4:	f380 8811 	msr	BASEPRI, r0
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	f3bf 8f6f 	isb	sy
 800cbb0:	f7fe ff0e 	bl	800b9d0 <vTaskSwitchContext>
 800cbb4:	f04f 0000 	mov.w	r0, #0
 800cbb8:	f380 8811 	msr	BASEPRI, r0
 800cbbc:	bc09      	pop	{r0, r3}
 800cbbe:	6819      	ldr	r1, [r3, #0]
 800cbc0:	6808      	ldr	r0, [r1, #0]
 800cbc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc6:	f01e 0f10 	tst.w	lr, #16
 800cbca:	bf08      	it	eq
 800cbcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cbd0:	f380 8809 	msr	PSP, r0
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	f3af 8000 	nop.w

0800cbe0 <pxCurrentTCBConst>:
 800cbe0:	20001250 	.word	0x20001250
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop

0800cbe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	607b      	str	r3, [r7, #4]
}
 800cc00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc02:	f7fe fe2b 	bl	800b85c <xTaskIncrementTick>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d003      	beq.n	800cc14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc0c:	4b06      	ldr	r3, [pc, #24]	; (800cc28 <xPortSysTickHandler+0x40>)
 800cc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	2300      	movs	r3, #0
 800cc16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f383 8811 	msr	BASEPRI, r3
}
 800cc1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc20:	bf00      	nop
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	e000ed04 	.word	0xe000ed04

0800cc2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc30:	4b0b      	ldr	r3, [pc, #44]	; (800cc60 <vPortSetupTimerInterrupt+0x34>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc36:	4b0b      	ldr	r3, [pc, #44]	; (800cc64 <vPortSetupTimerInterrupt+0x38>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc3c:	4b0a      	ldr	r3, [pc, #40]	; (800cc68 <vPortSetupTimerInterrupt+0x3c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a0a      	ldr	r2, [pc, #40]	; (800cc6c <vPortSetupTimerInterrupt+0x40>)
 800cc42:	fba2 2303 	umull	r2, r3, r2, r3
 800cc46:	099b      	lsrs	r3, r3, #6
 800cc48:	4a09      	ldr	r2, [pc, #36]	; (800cc70 <vPortSetupTimerInterrupt+0x44>)
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc4e:	4b04      	ldr	r3, [pc, #16]	; (800cc60 <vPortSetupTimerInterrupt+0x34>)
 800cc50:	2207      	movs	r2, #7
 800cc52:	601a      	str	r2, [r3, #0]
}
 800cc54:	bf00      	nop
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	e000e010 	.word	0xe000e010
 800cc64:	e000e018 	.word	0xe000e018
 800cc68:	20000000 	.word	0x20000000
 800cc6c:	10624dd3 	.word	0x10624dd3
 800cc70:	e000e014 	.word	0xe000e014

0800cc74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc84 <vPortEnableVFP+0x10>
 800cc78:	6801      	ldr	r1, [r0, #0]
 800cc7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc7e:	6001      	str	r1, [r0, #0]
 800cc80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc82:	bf00      	nop
 800cc84:	e000ed88 	.word	0xe000ed88

0800cc88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc8e:	f3ef 8305 	mrs	r3, IPSR
 800cc92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2b0f      	cmp	r3, #15
 800cc98:	d914      	bls.n	800ccc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc9a:	4a17      	ldr	r2, [pc, #92]	; (800ccf8 <vPortValidateInterruptPriority+0x70>)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4413      	add	r3, r2
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cca4:	4b15      	ldr	r3, [pc, #84]	; (800ccfc <vPortValidateInterruptPriority+0x74>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	7afa      	ldrb	r2, [r7, #11]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d20a      	bcs.n	800ccc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	607b      	str	r3, [r7, #4]
}
 800ccc0:	bf00      	nop
 800ccc2:	e7fe      	b.n	800ccc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ccc4:	4b0e      	ldr	r3, [pc, #56]	; (800cd00 <vPortValidateInterruptPriority+0x78>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cccc:	4b0d      	ldr	r3, [pc, #52]	; (800cd04 <vPortValidateInterruptPriority+0x7c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d90a      	bls.n	800ccea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ccd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	603b      	str	r3, [r7, #0]
}
 800cce6:	bf00      	nop
 800cce8:	e7fe      	b.n	800cce8 <vPortValidateInterruptPriority+0x60>
	}
 800ccea:	bf00      	nop
 800ccec:	3714      	adds	r7, #20
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	e000e3f0 	.word	0xe000e3f0
 800ccfc:	20001884 	.word	0x20001884
 800cd00:	e000ed0c 	.word	0xe000ed0c
 800cd04:	20001888 	.word	0x20001888

0800cd08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08a      	sub	sp, #40	; 0x28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd10:	2300      	movs	r3, #0
 800cd12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd14:	f7fe fce6 	bl	800b6e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd18:	4b5d      	ldr	r3, [pc, #372]	; (800ce90 <pvPortMalloc+0x188>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d101      	bne.n	800cd24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd20:	f000 f924 	bl	800cf6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd24:	4b5b      	ldr	r3, [pc, #364]	; (800ce94 <pvPortMalloc+0x18c>)
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4013      	ands	r3, r2
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f040 8093 	bne.w	800ce58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d01d      	beq.n	800cd74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cd38:	2208      	movs	r2, #8
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f003 0307 	and.w	r3, r3, #7
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d014      	beq.n	800cd74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f023 0307 	bic.w	r3, r3, #7
 800cd50:	3308      	adds	r3, #8
 800cd52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f003 0307 	and.w	r3, r3, #7
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00a      	beq.n	800cd74 <pvPortMalloc+0x6c>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	617b      	str	r3, [r7, #20]
}
 800cd70:	bf00      	nop
 800cd72:	e7fe      	b.n	800cd72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d06e      	beq.n	800ce58 <pvPortMalloc+0x150>
 800cd7a:	4b47      	ldr	r3, [pc, #284]	; (800ce98 <pvPortMalloc+0x190>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d869      	bhi.n	800ce58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd84:	4b45      	ldr	r3, [pc, #276]	; (800ce9c <pvPortMalloc+0x194>)
 800cd86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd88:	4b44      	ldr	r3, [pc, #272]	; (800ce9c <pvPortMalloc+0x194>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd8e:	e004      	b.n	800cd9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d903      	bls.n	800cdac <pvPortMalloc+0xa4>
 800cda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d1f1      	bne.n	800cd90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdac:	4b38      	ldr	r3, [pc, #224]	; (800ce90 <pvPortMalloc+0x188>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d050      	beq.n	800ce58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cdb6:	6a3b      	ldr	r3, [r7, #32]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2208      	movs	r2, #8
 800cdbc:	4413      	add	r3, r2
 800cdbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	681a      	ldr	r2, [r3, #0]
 800cdc4:	6a3b      	ldr	r3, [r7, #32]
 800cdc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	1ad2      	subs	r2, r2, r3
 800cdd0:	2308      	movs	r3, #8
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d91f      	bls.n	800ce18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cdd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4413      	add	r3, r2
 800cdde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	f003 0307 	and.w	r3, r3, #7
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00a      	beq.n	800ce00 <pvPortMalloc+0xf8>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	613b      	str	r3, [r7, #16]
}
 800cdfc:	bf00      	nop
 800cdfe:	e7fe      	b.n	800cdfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce02:	685a      	ldr	r2, [r3, #4]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	1ad2      	subs	r2, r2, r3
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce12:	69b8      	ldr	r0, [r7, #24]
 800ce14:	f000 f90c 	bl	800d030 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce18:	4b1f      	ldr	r3, [pc, #124]	; (800ce98 <pvPortMalloc+0x190>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	4a1d      	ldr	r2, [pc, #116]	; (800ce98 <pvPortMalloc+0x190>)
 800ce24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce26:	4b1c      	ldr	r3, [pc, #112]	; (800ce98 <pvPortMalloc+0x190>)
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	4b1d      	ldr	r3, [pc, #116]	; (800cea0 <pvPortMalloc+0x198>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d203      	bcs.n	800ce3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce32:	4b19      	ldr	r3, [pc, #100]	; (800ce98 <pvPortMalloc+0x190>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4a1a      	ldr	r2, [pc, #104]	; (800cea0 <pvPortMalloc+0x198>)
 800ce38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	4b15      	ldr	r3, [pc, #84]	; (800ce94 <pvPortMalloc+0x18c>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	431a      	orrs	r2, r3
 800ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ce4e:	4b15      	ldr	r3, [pc, #84]	; (800cea4 <pvPortMalloc+0x19c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	3301      	adds	r3, #1
 800ce54:	4a13      	ldr	r2, [pc, #76]	; (800cea4 <pvPortMalloc+0x19c>)
 800ce56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce58:	f7fe fc52 	bl	800b700 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d101      	bne.n	800ce66 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ce62:	f7f4 fbe9 	bl	8001638 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	f003 0307 	and.w	r3, r3, #7
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00a      	beq.n	800ce86 <pvPortMalloc+0x17e>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	60fb      	str	r3, [r7, #12]
}
 800ce82:	bf00      	nop
 800ce84:	e7fe      	b.n	800ce84 <pvPortMalloc+0x17c>
	return pvReturn;
 800ce86:	69fb      	ldr	r3, [r7, #28]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3728      	adds	r7, #40	; 0x28
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	20009894 	.word	0x20009894
 800ce94:	200098a8 	.word	0x200098a8
 800ce98:	20009898 	.word	0x20009898
 800ce9c:	2000988c 	.word	0x2000988c
 800cea0:	2000989c 	.word	0x2000989c
 800cea4:	200098a0 	.word	0x200098a0

0800cea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b086      	sub	sp, #24
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d04d      	beq.n	800cf56 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ceba:	2308      	movs	r3, #8
 800cebc:	425b      	negs	r3, r3
 800cebe:	697a      	ldr	r2, [r7, #20]
 800cec0:	4413      	add	r3, r2
 800cec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	4b24      	ldr	r3, [pc, #144]	; (800cf60 <vPortFree+0xb8>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4013      	ands	r3, r2
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10a      	bne.n	800ceec <vPortFree+0x44>
	__asm volatile
 800ced6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceda:	f383 8811 	msr	BASEPRI, r3
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	f3bf 8f4f 	dsb	sy
 800cee6:	60fb      	str	r3, [r7, #12]
}
 800cee8:	bf00      	nop
 800ceea:	e7fe      	b.n	800ceea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00a      	beq.n	800cf0a <vPortFree+0x62>
	__asm volatile
 800cef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef8:	f383 8811 	msr	BASEPRI, r3
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	60bb      	str	r3, [r7, #8]
}
 800cf06:	bf00      	nop
 800cf08:	e7fe      	b.n	800cf08 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	4b14      	ldr	r3, [pc, #80]	; (800cf60 <vPortFree+0xb8>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4013      	ands	r3, r2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d01e      	beq.n	800cf56 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d11a      	bne.n	800cf56 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	4b0e      	ldr	r3, [pc, #56]	; (800cf60 <vPortFree+0xb8>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	43db      	mvns	r3, r3
 800cf2a:	401a      	ands	r2, r3
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf30:	f7fe fbd8 	bl	800b6e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf34:	693b      	ldr	r3, [r7, #16]
 800cf36:	685a      	ldr	r2, [r3, #4]
 800cf38:	4b0a      	ldr	r3, [pc, #40]	; (800cf64 <vPortFree+0xbc>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	4a09      	ldr	r2, [pc, #36]	; (800cf64 <vPortFree+0xbc>)
 800cf40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf42:	6938      	ldr	r0, [r7, #16]
 800cf44:	f000 f874 	bl	800d030 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cf48:	4b07      	ldr	r3, [pc, #28]	; (800cf68 <vPortFree+0xc0>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	4a06      	ldr	r2, [pc, #24]	; (800cf68 <vPortFree+0xc0>)
 800cf50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cf52:	f7fe fbd5 	bl	800b700 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf56:	bf00      	nop
 800cf58:	3718      	adds	r7, #24
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	200098a8 	.word	0x200098a8
 800cf64:	20009898 	.word	0x20009898
 800cf68:	200098a4 	.word	0x200098a4

0800cf6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf78:	4b27      	ldr	r3, [pc, #156]	; (800d018 <prvHeapInit+0xac>)
 800cf7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f003 0307 	and.w	r3, r3, #7
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00c      	beq.n	800cfa0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	3307      	adds	r3, #7
 800cf8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f023 0307 	bic.w	r3, r3, #7
 800cf92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf94:	68ba      	ldr	r2, [r7, #8]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	1ad3      	subs	r3, r2, r3
 800cf9a:	4a1f      	ldr	r2, [pc, #124]	; (800d018 <prvHeapInit+0xac>)
 800cf9c:	4413      	add	r3, r2
 800cf9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cfa4:	4a1d      	ldr	r2, [pc, #116]	; (800d01c <prvHeapInit+0xb0>)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cfaa:	4b1c      	ldr	r3, [pc, #112]	; (800d01c <prvHeapInit+0xb0>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cfb8:	2208      	movs	r2, #8
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	1a9b      	subs	r3, r3, r2
 800cfbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f023 0307 	bic.w	r3, r3, #7
 800cfc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	4a15      	ldr	r2, [pc, #84]	; (800d020 <prvHeapInit+0xb4>)
 800cfcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cfce:	4b14      	ldr	r3, [pc, #80]	; (800d020 <prvHeapInit+0xb4>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cfd6:	4b12      	ldr	r3, [pc, #72]	; (800d020 <prvHeapInit+0xb4>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	1ad2      	subs	r2, r2, r3
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cfec:	4b0c      	ldr	r3, [pc, #48]	; (800d020 <prvHeapInit+0xb4>)
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	685b      	ldr	r3, [r3, #4]
 800cff8:	4a0a      	ldr	r2, [pc, #40]	; (800d024 <prvHeapInit+0xb8>)
 800cffa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	4a09      	ldr	r2, [pc, #36]	; (800d028 <prvHeapInit+0xbc>)
 800d002:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d004:	4b09      	ldr	r3, [pc, #36]	; (800d02c <prvHeapInit+0xc0>)
 800d006:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d00a:	601a      	str	r2, [r3, #0]
}
 800d00c:	bf00      	nop
 800d00e:	3714      	adds	r7, #20
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	2000188c 	.word	0x2000188c
 800d01c:	2000988c 	.word	0x2000988c
 800d020:	20009894 	.word	0x20009894
 800d024:	2000989c 	.word	0x2000989c
 800d028:	20009898 	.word	0x20009898
 800d02c:	200098a8 	.word	0x200098a8

0800d030 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d038:	4b28      	ldr	r3, [pc, #160]	; (800d0dc <prvInsertBlockIntoFreeList+0xac>)
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	e002      	b.n	800d044 <prvInsertBlockIntoFreeList+0x14>
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d8f7      	bhi.n	800d03e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	4413      	add	r3, r2
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d108      	bne.n	800d072 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	685a      	ldr	r2, [r3, #4]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	441a      	add	r2, r3
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	441a      	add	r2, r3
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	429a      	cmp	r2, r3
 800d084:	d118      	bne.n	800d0b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	4b15      	ldr	r3, [pc, #84]	; (800d0e0 <prvInsertBlockIntoFreeList+0xb0>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d00d      	beq.n	800d0ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	441a      	add	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	601a      	str	r2, [r3, #0]
 800d0ac:	e008      	b.n	800d0c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0ae:	4b0c      	ldr	r3, [pc, #48]	; (800d0e0 <prvInsertBlockIntoFreeList+0xb0>)
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	601a      	str	r2, [r3, #0]
 800d0b6:	e003      	b.n	800d0c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d002      	beq.n	800d0ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0ce:	bf00      	nop
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	2000988c 	.word	0x2000988c
 800d0e0:	20009894 	.word	0x20009894

0800d0e4 <__errno>:
 800d0e4:	4b01      	ldr	r3, [pc, #4]	; (800d0ec <__errno+0x8>)
 800d0e6:	6818      	ldr	r0, [r3, #0]
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	2000000c 	.word	0x2000000c

0800d0f0 <__libc_init_array>:
 800d0f0:	b570      	push	{r4, r5, r6, lr}
 800d0f2:	4d0d      	ldr	r5, [pc, #52]	; (800d128 <__libc_init_array+0x38>)
 800d0f4:	4c0d      	ldr	r4, [pc, #52]	; (800d12c <__libc_init_array+0x3c>)
 800d0f6:	1b64      	subs	r4, r4, r5
 800d0f8:	10a4      	asrs	r4, r4, #2
 800d0fa:	2600      	movs	r6, #0
 800d0fc:	42a6      	cmp	r6, r4
 800d0fe:	d109      	bne.n	800d114 <__libc_init_array+0x24>
 800d100:	4d0b      	ldr	r5, [pc, #44]	; (800d130 <__libc_init_array+0x40>)
 800d102:	4c0c      	ldr	r4, [pc, #48]	; (800d134 <__libc_init_array+0x44>)
 800d104:	f000 ff84 	bl	800e010 <_init>
 800d108:	1b64      	subs	r4, r4, r5
 800d10a:	10a4      	asrs	r4, r4, #2
 800d10c:	2600      	movs	r6, #0
 800d10e:	42a6      	cmp	r6, r4
 800d110:	d105      	bne.n	800d11e <__libc_init_array+0x2e>
 800d112:	bd70      	pop	{r4, r5, r6, pc}
 800d114:	f855 3b04 	ldr.w	r3, [r5], #4
 800d118:	4798      	blx	r3
 800d11a:	3601      	adds	r6, #1
 800d11c:	e7ee      	b.n	800d0fc <__libc_init_array+0xc>
 800d11e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d122:	4798      	blx	r3
 800d124:	3601      	adds	r6, #1
 800d126:	e7f2      	b.n	800d10e <__libc_init_array+0x1e>
 800d128:	0800e6e8 	.word	0x0800e6e8
 800d12c:	0800e6e8 	.word	0x0800e6e8
 800d130:	0800e6e8 	.word	0x0800e6e8
 800d134:	0800e6ec 	.word	0x0800e6ec

0800d138 <memcpy>:
 800d138:	440a      	add	r2, r1
 800d13a:	4291      	cmp	r1, r2
 800d13c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d140:	d100      	bne.n	800d144 <memcpy+0xc>
 800d142:	4770      	bx	lr
 800d144:	b510      	push	{r4, lr}
 800d146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d14a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d14e:	4291      	cmp	r1, r2
 800d150:	d1f9      	bne.n	800d146 <memcpy+0xe>
 800d152:	bd10      	pop	{r4, pc}

0800d154 <memset>:
 800d154:	4402      	add	r2, r0
 800d156:	4603      	mov	r3, r0
 800d158:	4293      	cmp	r3, r2
 800d15a:	d100      	bne.n	800d15e <memset+0xa>
 800d15c:	4770      	bx	lr
 800d15e:	f803 1b01 	strb.w	r1, [r3], #1
 800d162:	e7f9      	b.n	800d158 <memset+0x4>

0800d164 <iprintf>:
 800d164:	b40f      	push	{r0, r1, r2, r3}
 800d166:	4b0a      	ldr	r3, [pc, #40]	; (800d190 <iprintf+0x2c>)
 800d168:	b513      	push	{r0, r1, r4, lr}
 800d16a:	681c      	ldr	r4, [r3, #0]
 800d16c:	b124      	cbz	r4, 800d178 <iprintf+0x14>
 800d16e:	69a3      	ldr	r3, [r4, #24]
 800d170:	b913      	cbnz	r3, 800d178 <iprintf+0x14>
 800d172:	4620      	mov	r0, r4
 800d174:	f000 f866 	bl	800d244 <__sinit>
 800d178:	ab05      	add	r3, sp, #20
 800d17a:	9a04      	ldr	r2, [sp, #16]
 800d17c:	68a1      	ldr	r1, [r4, #8]
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	4620      	mov	r0, r4
 800d182:	f000 f983 	bl	800d48c <_vfiprintf_r>
 800d186:	b002      	add	sp, #8
 800d188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d18c:	b004      	add	sp, #16
 800d18e:	4770      	bx	lr
 800d190:	2000000c 	.word	0x2000000c

0800d194 <std>:
 800d194:	2300      	movs	r3, #0
 800d196:	b510      	push	{r4, lr}
 800d198:	4604      	mov	r4, r0
 800d19a:	e9c0 3300 	strd	r3, r3, [r0]
 800d19e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1a2:	6083      	str	r3, [r0, #8]
 800d1a4:	8181      	strh	r1, [r0, #12]
 800d1a6:	6643      	str	r3, [r0, #100]	; 0x64
 800d1a8:	81c2      	strh	r2, [r0, #14]
 800d1aa:	6183      	str	r3, [r0, #24]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	2208      	movs	r2, #8
 800d1b0:	305c      	adds	r0, #92	; 0x5c
 800d1b2:	f7ff ffcf 	bl	800d154 <memset>
 800d1b6:	4b05      	ldr	r3, [pc, #20]	; (800d1cc <std+0x38>)
 800d1b8:	6263      	str	r3, [r4, #36]	; 0x24
 800d1ba:	4b05      	ldr	r3, [pc, #20]	; (800d1d0 <std+0x3c>)
 800d1bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1be:	4b05      	ldr	r3, [pc, #20]	; (800d1d4 <std+0x40>)
 800d1c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1c2:	4b05      	ldr	r3, [pc, #20]	; (800d1d8 <std+0x44>)
 800d1c4:	6224      	str	r4, [r4, #32]
 800d1c6:	6323      	str	r3, [r4, #48]	; 0x30
 800d1c8:	bd10      	pop	{r4, pc}
 800d1ca:	bf00      	nop
 800d1cc:	0800da35 	.word	0x0800da35
 800d1d0:	0800da57 	.word	0x0800da57
 800d1d4:	0800da8f 	.word	0x0800da8f
 800d1d8:	0800dab3 	.word	0x0800dab3

0800d1dc <_cleanup_r>:
 800d1dc:	4901      	ldr	r1, [pc, #4]	; (800d1e4 <_cleanup_r+0x8>)
 800d1de:	f000 b8af 	b.w	800d340 <_fwalk_reent>
 800d1e2:	bf00      	nop
 800d1e4:	0800dd8d 	.word	0x0800dd8d

0800d1e8 <__sfmoreglue>:
 800d1e8:	b570      	push	{r4, r5, r6, lr}
 800d1ea:	1e4a      	subs	r2, r1, #1
 800d1ec:	2568      	movs	r5, #104	; 0x68
 800d1ee:	4355      	muls	r5, r2
 800d1f0:	460e      	mov	r6, r1
 800d1f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d1f6:	f000 f8c5 	bl	800d384 <_malloc_r>
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	b140      	cbz	r0, 800d210 <__sfmoreglue+0x28>
 800d1fe:	2100      	movs	r1, #0
 800d200:	e9c0 1600 	strd	r1, r6, [r0]
 800d204:	300c      	adds	r0, #12
 800d206:	60a0      	str	r0, [r4, #8]
 800d208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d20c:	f7ff ffa2 	bl	800d154 <memset>
 800d210:	4620      	mov	r0, r4
 800d212:	bd70      	pop	{r4, r5, r6, pc}

0800d214 <__sfp_lock_acquire>:
 800d214:	4801      	ldr	r0, [pc, #4]	; (800d21c <__sfp_lock_acquire+0x8>)
 800d216:	f000 b8b3 	b.w	800d380 <__retarget_lock_acquire_recursive>
 800d21a:	bf00      	nop
 800d21c:	20009bc4 	.word	0x20009bc4

0800d220 <__sfp_lock_release>:
 800d220:	4801      	ldr	r0, [pc, #4]	; (800d228 <__sfp_lock_release+0x8>)
 800d222:	f000 b8ae 	b.w	800d382 <__retarget_lock_release_recursive>
 800d226:	bf00      	nop
 800d228:	20009bc4 	.word	0x20009bc4

0800d22c <__sinit_lock_acquire>:
 800d22c:	4801      	ldr	r0, [pc, #4]	; (800d234 <__sinit_lock_acquire+0x8>)
 800d22e:	f000 b8a7 	b.w	800d380 <__retarget_lock_acquire_recursive>
 800d232:	bf00      	nop
 800d234:	20009bbf 	.word	0x20009bbf

0800d238 <__sinit_lock_release>:
 800d238:	4801      	ldr	r0, [pc, #4]	; (800d240 <__sinit_lock_release+0x8>)
 800d23a:	f000 b8a2 	b.w	800d382 <__retarget_lock_release_recursive>
 800d23e:	bf00      	nop
 800d240:	20009bbf 	.word	0x20009bbf

0800d244 <__sinit>:
 800d244:	b510      	push	{r4, lr}
 800d246:	4604      	mov	r4, r0
 800d248:	f7ff fff0 	bl	800d22c <__sinit_lock_acquire>
 800d24c:	69a3      	ldr	r3, [r4, #24]
 800d24e:	b11b      	cbz	r3, 800d258 <__sinit+0x14>
 800d250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d254:	f7ff bff0 	b.w	800d238 <__sinit_lock_release>
 800d258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d25c:	6523      	str	r3, [r4, #80]	; 0x50
 800d25e:	4b13      	ldr	r3, [pc, #76]	; (800d2ac <__sinit+0x68>)
 800d260:	4a13      	ldr	r2, [pc, #76]	; (800d2b0 <__sinit+0x6c>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	62a2      	str	r2, [r4, #40]	; 0x28
 800d266:	42a3      	cmp	r3, r4
 800d268:	bf04      	itt	eq
 800d26a:	2301      	moveq	r3, #1
 800d26c:	61a3      	streq	r3, [r4, #24]
 800d26e:	4620      	mov	r0, r4
 800d270:	f000 f820 	bl	800d2b4 <__sfp>
 800d274:	6060      	str	r0, [r4, #4]
 800d276:	4620      	mov	r0, r4
 800d278:	f000 f81c 	bl	800d2b4 <__sfp>
 800d27c:	60a0      	str	r0, [r4, #8]
 800d27e:	4620      	mov	r0, r4
 800d280:	f000 f818 	bl	800d2b4 <__sfp>
 800d284:	2200      	movs	r2, #0
 800d286:	60e0      	str	r0, [r4, #12]
 800d288:	2104      	movs	r1, #4
 800d28a:	6860      	ldr	r0, [r4, #4]
 800d28c:	f7ff ff82 	bl	800d194 <std>
 800d290:	68a0      	ldr	r0, [r4, #8]
 800d292:	2201      	movs	r2, #1
 800d294:	2109      	movs	r1, #9
 800d296:	f7ff ff7d 	bl	800d194 <std>
 800d29a:	68e0      	ldr	r0, [r4, #12]
 800d29c:	2202      	movs	r2, #2
 800d29e:	2112      	movs	r1, #18
 800d2a0:	f7ff ff78 	bl	800d194 <std>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	61a3      	str	r3, [r4, #24]
 800d2a8:	e7d2      	b.n	800d250 <__sinit+0xc>
 800d2aa:	bf00      	nop
 800d2ac:	0800e648 	.word	0x0800e648
 800d2b0:	0800d1dd 	.word	0x0800d1dd

0800d2b4 <__sfp>:
 800d2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b6:	4607      	mov	r7, r0
 800d2b8:	f7ff ffac 	bl	800d214 <__sfp_lock_acquire>
 800d2bc:	4b1e      	ldr	r3, [pc, #120]	; (800d338 <__sfp+0x84>)
 800d2be:	681e      	ldr	r6, [r3, #0]
 800d2c0:	69b3      	ldr	r3, [r6, #24]
 800d2c2:	b913      	cbnz	r3, 800d2ca <__sfp+0x16>
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7ff ffbd 	bl	800d244 <__sinit>
 800d2ca:	3648      	adds	r6, #72	; 0x48
 800d2cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	d503      	bpl.n	800d2dc <__sfp+0x28>
 800d2d4:	6833      	ldr	r3, [r6, #0]
 800d2d6:	b30b      	cbz	r3, 800d31c <__sfp+0x68>
 800d2d8:	6836      	ldr	r6, [r6, #0]
 800d2da:	e7f7      	b.n	800d2cc <__sfp+0x18>
 800d2dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2e0:	b9d5      	cbnz	r5, 800d318 <__sfp+0x64>
 800d2e2:	4b16      	ldr	r3, [pc, #88]	; (800d33c <__sfp+0x88>)
 800d2e4:	60e3      	str	r3, [r4, #12]
 800d2e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d2ea:	6665      	str	r5, [r4, #100]	; 0x64
 800d2ec:	f000 f847 	bl	800d37e <__retarget_lock_init_recursive>
 800d2f0:	f7ff ff96 	bl	800d220 <__sfp_lock_release>
 800d2f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d2f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d2fc:	6025      	str	r5, [r4, #0]
 800d2fe:	61a5      	str	r5, [r4, #24]
 800d300:	2208      	movs	r2, #8
 800d302:	4629      	mov	r1, r5
 800d304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d308:	f7ff ff24 	bl	800d154 <memset>
 800d30c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d314:	4620      	mov	r0, r4
 800d316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d318:	3468      	adds	r4, #104	; 0x68
 800d31a:	e7d9      	b.n	800d2d0 <__sfp+0x1c>
 800d31c:	2104      	movs	r1, #4
 800d31e:	4638      	mov	r0, r7
 800d320:	f7ff ff62 	bl	800d1e8 <__sfmoreglue>
 800d324:	4604      	mov	r4, r0
 800d326:	6030      	str	r0, [r6, #0]
 800d328:	2800      	cmp	r0, #0
 800d32a:	d1d5      	bne.n	800d2d8 <__sfp+0x24>
 800d32c:	f7ff ff78 	bl	800d220 <__sfp_lock_release>
 800d330:	230c      	movs	r3, #12
 800d332:	603b      	str	r3, [r7, #0]
 800d334:	e7ee      	b.n	800d314 <__sfp+0x60>
 800d336:	bf00      	nop
 800d338:	0800e648 	.word	0x0800e648
 800d33c:	ffff0001 	.word	0xffff0001

0800d340 <_fwalk_reent>:
 800d340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d344:	4606      	mov	r6, r0
 800d346:	4688      	mov	r8, r1
 800d348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d34c:	2700      	movs	r7, #0
 800d34e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d352:	f1b9 0901 	subs.w	r9, r9, #1
 800d356:	d505      	bpl.n	800d364 <_fwalk_reent+0x24>
 800d358:	6824      	ldr	r4, [r4, #0]
 800d35a:	2c00      	cmp	r4, #0
 800d35c:	d1f7      	bne.n	800d34e <_fwalk_reent+0xe>
 800d35e:	4638      	mov	r0, r7
 800d360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d364:	89ab      	ldrh	r3, [r5, #12]
 800d366:	2b01      	cmp	r3, #1
 800d368:	d907      	bls.n	800d37a <_fwalk_reent+0x3a>
 800d36a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d36e:	3301      	adds	r3, #1
 800d370:	d003      	beq.n	800d37a <_fwalk_reent+0x3a>
 800d372:	4629      	mov	r1, r5
 800d374:	4630      	mov	r0, r6
 800d376:	47c0      	blx	r8
 800d378:	4307      	orrs	r7, r0
 800d37a:	3568      	adds	r5, #104	; 0x68
 800d37c:	e7e9      	b.n	800d352 <_fwalk_reent+0x12>

0800d37e <__retarget_lock_init_recursive>:
 800d37e:	4770      	bx	lr

0800d380 <__retarget_lock_acquire_recursive>:
 800d380:	4770      	bx	lr

0800d382 <__retarget_lock_release_recursive>:
 800d382:	4770      	bx	lr

0800d384 <_malloc_r>:
 800d384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d386:	1ccd      	adds	r5, r1, #3
 800d388:	f025 0503 	bic.w	r5, r5, #3
 800d38c:	3508      	adds	r5, #8
 800d38e:	2d0c      	cmp	r5, #12
 800d390:	bf38      	it	cc
 800d392:	250c      	movcc	r5, #12
 800d394:	2d00      	cmp	r5, #0
 800d396:	4606      	mov	r6, r0
 800d398:	db01      	blt.n	800d39e <_malloc_r+0x1a>
 800d39a:	42a9      	cmp	r1, r5
 800d39c:	d903      	bls.n	800d3a6 <_malloc_r+0x22>
 800d39e:	230c      	movs	r3, #12
 800d3a0:	6033      	str	r3, [r6, #0]
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3a6:	f000 fda3 	bl	800def0 <__malloc_lock>
 800d3aa:	4921      	ldr	r1, [pc, #132]	; (800d430 <_malloc_r+0xac>)
 800d3ac:	680a      	ldr	r2, [r1, #0]
 800d3ae:	4614      	mov	r4, r2
 800d3b0:	b99c      	cbnz	r4, 800d3da <_malloc_r+0x56>
 800d3b2:	4f20      	ldr	r7, [pc, #128]	; (800d434 <_malloc_r+0xb0>)
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	b923      	cbnz	r3, 800d3c2 <_malloc_r+0x3e>
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	f000 fb2a 	bl	800da14 <_sbrk_r>
 800d3c0:	6038      	str	r0, [r7, #0]
 800d3c2:	4629      	mov	r1, r5
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	f000 fb25 	bl	800da14 <_sbrk_r>
 800d3ca:	1c43      	adds	r3, r0, #1
 800d3cc:	d123      	bne.n	800d416 <_malloc_r+0x92>
 800d3ce:	230c      	movs	r3, #12
 800d3d0:	6033      	str	r3, [r6, #0]
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	f000 fd92 	bl	800defc <__malloc_unlock>
 800d3d8:	e7e3      	b.n	800d3a2 <_malloc_r+0x1e>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	1b5b      	subs	r3, r3, r5
 800d3de:	d417      	bmi.n	800d410 <_malloc_r+0x8c>
 800d3e0:	2b0b      	cmp	r3, #11
 800d3e2:	d903      	bls.n	800d3ec <_malloc_r+0x68>
 800d3e4:	6023      	str	r3, [r4, #0]
 800d3e6:	441c      	add	r4, r3
 800d3e8:	6025      	str	r5, [r4, #0]
 800d3ea:	e004      	b.n	800d3f6 <_malloc_r+0x72>
 800d3ec:	6863      	ldr	r3, [r4, #4]
 800d3ee:	42a2      	cmp	r2, r4
 800d3f0:	bf0c      	ite	eq
 800d3f2:	600b      	streq	r3, [r1, #0]
 800d3f4:	6053      	strne	r3, [r2, #4]
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f000 fd80 	bl	800defc <__malloc_unlock>
 800d3fc:	f104 000b 	add.w	r0, r4, #11
 800d400:	1d23      	adds	r3, r4, #4
 800d402:	f020 0007 	bic.w	r0, r0, #7
 800d406:	1ac2      	subs	r2, r0, r3
 800d408:	d0cc      	beq.n	800d3a4 <_malloc_r+0x20>
 800d40a:	1a1b      	subs	r3, r3, r0
 800d40c:	50a3      	str	r3, [r4, r2]
 800d40e:	e7c9      	b.n	800d3a4 <_malloc_r+0x20>
 800d410:	4622      	mov	r2, r4
 800d412:	6864      	ldr	r4, [r4, #4]
 800d414:	e7cc      	b.n	800d3b0 <_malloc_r+0x2c>
 800d416:	1cc4      	adds	r4, r0, #3
 800d418:	f024 0403 	bic.w	r4, r4, #3
 800d41c:	42a0      	cmp	r0, r4
 800d41e:	d0e3      	beq.n	800d3e8 <_malloc_r+0x64>
 800d420:	1a21      	subs	r1, r4, r0
 800d422:	4630      	mov	r0, r6
 800d424:	f000 faf6 	bl	800da14 <_sbrk_r>
 800d428:	3001      	adds	r0, #1
 800d42a:	d1dd      	bne.n	800d3e8 <_malloc_r+0x64>
 800d42c:	e7cf      	b.n	800d3ce <_malloc_r+0x4a>
 800d42e:	bf00      	nop
 800d430:	200098ac 	.word	0x200098ac
 800d434:	200098b0 	.word	0x200098b0

0800d438 <__sfputc_r>:
 800d438:	6893      	ldr	r3, [r2, #8]
 800d43a:	3b01      	subs	r3, #1
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	b410      	push	{r4}
 800d440:	6093      	str	r3, [r2, #8]
 800d442:	da08      	bge.n	800d456 <__sfputc_r+0x1e>
 800d444:	6994      	ldr	r4, [r2, #24]
 800d446:	42a3      	cmp	r3, r4
 800d448:	db01      	blt.n	800d44e <__sfputc_r+0x16>
 800d44a:	290a      	cmp	r1, #10
 800d44c:	d103      	bne.n	800d456 <__sfputc_r+0x1e>
 800d44e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d452:	f000 bb33 	b.w	800dabc <__swbuf_r>
 800d456:	6813      	ldr	r3, [r2, #0]
 800d458:	1c58      	adds	r0, r3, #1
 800d45a:	6010      	str	r0, [r2, #0]
 800d45c:	7019      	strb	r1, [r3, #0]
 800d45e:	4608      	mov	r0, r1
 800d460:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d464:	4770      	bx	lr

0800d466 <__sfputs_r>:
 800d466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d468:	4606      	mov	r6, r0
 800d46a:	460f      	mov	r7, r1
 800d46c:	4614      	mov	r4, r2
 800d46e:	18d5      	adds	r5, r2, r3
 800d470:	42ac      	cmp	r4, r5
 800d472:	d101      	bne.n	800d478 <__sfputs_r+0x12>
 800d474:	2000      	movs	r0, #0
 800d476:	e007      	b.n	800d488 <__sfputs_r+0x22>
 800d478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d47c:	463a      	mov	r2, r7
 800d47e:	4630      	mov	r0, r6
 800d480:	f7ff ffda 	bl	800d438 <__sfputc_r>
 800d484:	1c43      	adds	r3, r0, #1
 800d486:	d1f3      	bne.n	800d470 <__sfputs_r+0xa>
 800d488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d48c <_vfiprintf_r>:
 800d48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d490:	460d      	mov	r5, r1
 800d492:	b09d      	sub	sp, #116	; 0x74
 800d494:	4614      	mov	r4, r2
 800d496:	4698      	mov	r8, r3
 800d498:	4606      	mov	r6, r0
 800d49a:	b118      	cbz	r0, 800d4a4 <_vfiprintf_r+0x18>
 800d49c:	6983      	ldr	r3, [r0, #24]
 800d49e:	b90b      	cbnz	r3, 800d4a4 <_vfiprintf_r+0x18>
 800d4a0:	f7ff fed0 	bl	800d244 <__sinit>
 800d4a4:	4b89      	ldr	r3, [pc, #548]	; (800d6cc <_vfiprintf_r+0x240>)
 800d4a6:	429d      	cmp	r5, r3
 800d4a8:	d11b      	bne.n	800d4e2 <_vfiprintf_r+0x56>
 800d4aa:	6875      	ldr	r5, [r6, #4]
 800d4ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4ae:	07d9      	lsls	r1, r3, #31
 800d4b0:	d405      	bmi.n	800d4be <_vfiprintf_r+0x32>
 800d4b2:	89ab      	ldrh	r3, [r5, #12]
 800d4b4:	059a      	lsls	r2, r3, #22
 800d4b6:	d402      	bmi.n	800d4be <_vfiprintf_r+0x32>
 800d4b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4ba:	f7ff ff61 	bl	800d380 <__retarget_lock_acquire_recursive>
 800d4be:	89ab      	ldrh	r3, [r5, #12]
 800d4c0:	071b      	lsls	r3, r3, #28
 800d4c2:	d501      	bpl.n	800d4c8 <_vfiprintf_r+0x3c>
 800d4c4:	692b      	ldr	r3, [r5, #16]
 800d4c6:	b9eb      	cbnz	r3, 800d504 <_vfiprintf_r+0x78>
 800d4c8:	4629      	mov	r1, r5
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	f000 fb5a 	bl	800db84 <__swsetup_r>
 800d4d0:	b1c0      	cbz	r0, 800d504 <_vfiprintf_r+0x78>
 800d4d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4d4:	07dc      	lsls	r4, r3, #31
 800d4d6:	d50e      	bpl.n	800d4f6 <_vfiprintf_r+0x6a>
 800d4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4dc:	b01d      	add	sp, #116	; 0x74
 800d4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e2:	4b7b      	ldr	r3, [pc, #492]	; (800d6d0 <_vfiprintf_r+0x244>)
 800d4e4:	429d      	cmp	r5, r3
 800d4e6:	d101      	bne.n	800d4ec <_vfiprintf_r+0x60>
 800d4e8:	68b5      	ldr	r5, [r6, #8]
 800d4ea:	e7df      	b.n	800d4ac <_vfiprintf_r+0x20>
 800d4ec:	4b79      	ldr	r3, [pc, #484]	; (800d6d4 <_vfiprintf_r+0x248>)
 800d4ee:	429d      	cmp	r5, r3
 800d4f0:	bf08      	it	eq
 800d4f2:	68f5      	ldreq	r5, [r6, #12]
 800d4f4:	e7da      	b.n	800d4ac <_vfiprintf_r+0x20>
 800d4f6:	89ab      	ldrh	r3, [r5, #12]
 800d4f8:	0598      	lsls	r0, r3, #22
 800d4fa:	d4ed      	bmi.n	800d4d8 <_vfiprintf_r+0x4c>
 800d4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4fe:	f7ff ff40 	bl	800d382 <__retarget_lock_release_recursive>
 800d502:	e7e9      	b.n	800d4d8 <_vfiprintf_r+0x4c>
 800d504:	2300      	movs	r3, #0
 800d506:	9309      	str	r3, [sp, #36]	; 0x24
 800d508:	2320      	movs	r3, #32
 800d50a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d50e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d512:	2330      	movs	r3, #48	; 0x30
 800d514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d6d8 <_vfiprintf_r+0x24c>
 800d518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d51c:	f04f 0901 	mov.w	r9, #1
 800d520:	4623      	mov	r3, r4
 800d522:	469a      	mov	sl, r3
 800d524:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d528:	b10a      	cbz	r2, 800d52e <_vfiprintf_r+0xa2>
 800d52a:	2a25      	cmp	r2, #37	; 0x25
 800d52c:	d1f9      	bne.n	800d522 <_vfiprintf_r+0x96>
 800d52e:	ebba 0b04 	subs.w	fp, sl, r4
 800d532:	d00b      	beq.n	800d54c <_vfiprintf_r+0xc0>
 800d534:	465b      	mov	r3, fp
 800d536:	4622      	mov	r2, r4
 800d538:	4629      	mov	r1, r5
 800d53a:	4630      	mov	r0, r6
 800d53c:	f7ff ff93 	bl	800d466 <__sfputs_r>
 800d540:	3001      	adds	r0, #1
 800d542:	f000 80aa 	beq.w	800d69a <_vfiprintf_r+0x20e>
 800d546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d548:	445a      	add	r2, fp
 800d54a:	9209      	str	r2, [sp, #36]	; 0x24
 800d54c:	f89a 3000 	ldrb.w	r3, [sl]
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 80a2 	beq.w	800d69a <_vfiprintf_r+0x20e>
 800d556:	2300      	movs	r3, #0
 800d558:	f04f 32ff 	mov.w	r2, #4294967295
 800d55c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d560:	f10a 0a01 	add.w	sl, sl, #1
 800d564:	9304      	str	r3, [sp, #16]
 800d566:	9307      	str	r3, [sp, #28]
 800d568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d56c:	931a      	str	r3, [sp, #104]	; 0x68
 800d56e:	4654      	mov	r4, sl
 800d570:	2205      	movs	r2, #5
 800d572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d576:	4858      	ldr	r0, [pc, #352]	; (800d6d8 <_vfiprintf_r+0x24c>)
 800d578:	f7f2 fe32 	bl	80001e0 <memchr>
 800d57c:	9a04      	ldr	r2, [sp, #16]
 800d57e:	b9d8      	cbnz	r0, 800d5b8 <_vfiprintf_r+0x12c>
 800d580:	06d1      	lsls	r1, r2, #27
 800d582:	bf44      	itt	mi
 800d584:	2320      	movmi	r3, #32
 800d586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d58a:	0713      	lsls	r3, r2, #28
 800d58c:	bf44      	itt	mi
 800d58e:	232b      	movmi	r3, #43	; 0x2b
 800d590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d594:	f89a 3000 	ldrb.w	r3, [sl]
 800d598:	2b2a      	cmp	r3, #42	; 0x2a
 800d59a:	d015      	beq.n	800d5c8 <_vfiprintf_r+0x13c>
 800d59c:	9a07      	ldr	r2, [sp, #28]
 800d59e:	4654      	mov	r4, sl
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	f04f 0c0a 	mov.w	ip, #10
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5ac:	3b30      	subs	r3, #48	; 0x30
 800d5ae:	2b09      	cmp	r3, #9
 800d5b0:	d94e      	bls.n	800d650 <_vfiprintf_r+0x1c4>
 800d5b2:	b1b0      	cbz	r0, 800d5e2 <_vfiprintf_r+0x156>
 800d5b4:	9207      	str	r2, [sp, #28]
 800d5b6:	e014      	b.n	800d5e2 <_vfiprintf_r+0x156>
 800d5b8:	eba0 0308 	sub.w	r3, r0, r8
 800d5bc:	fa09 f303 	lsl.w	r3, r9, r3
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	9304      	str	r3, [sp, #16]
 800d5c4:	46a2      	mov	sl, r4
 800d5c6:	e7d2      	b.n	800d56e <_vfiprintf_r+0xe2>
 800d5c8:	9b03      	ldr	r3, [sp, #12]
 800d5ca:	1d19      	adds	r1, r3, #4
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	9103      	str	r1, [sp, #12]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	bfbb      	ittet	lt
 800d5d4:	425b      	neglt	r3, r3
 800d5d6:	f042 0202 	orrlt.w	r2, r2, #2
 800d5da:	9307      	strge	r3, [sp, #28]
 800d5dc:	9307      	strlt	r3, [sp, #28]
 800d5de:	bfb8      	it	lt
 800d5e0:	9204      	strlt	r2, [sp, #16]
 800d5e2:	7823      	ldrb	r3, [r4, #0]
 800d5e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d5e6:	d10c      	bne.n	800d602 <_vfiprintf_r+0x176>
 800d5e8:	7863      	ldrb	r3, [r4, #1]
 800d5ea:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ec:	d135      	bne.n	800d65a <_vfiprintf_r+0x1ce>
 800d5ee:	9b03      	ldr	r3, [sp, #12]
 800d5f0:	1d1a      	adds	r2, r3, #4
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	9203      	str	r2, [sp, #12]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	bfb8      	it	lt
 800d5fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5fe:	3402      	adds	r4, #2
 800d600:	9305      	str	r3, [sp, #20]
 800d602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d6e8 <_vfiprintf_r+0x25c>
 800d606:	7821      	ldrb	r1, [r4, #0]
 800d608:	2203      	movs	r2, #3
 800d60a:	4650      	mov	r0, sl
 800d60c:	f7f2 fde8 	bl	80001e0 <memchr>
 800d610:	b140      	cbz	r0, 800d624 <_vfiprintf_r+0x198>
 800d612:	2340      	movs	r3, #64	; 0x40
 800d614:	eba0 000a 	sub.w	r0, r0, sl
 800d618:	fa03 f000 	lsl.w	r0, r3, r0
 800d61c:	9b04      	ldr	r3, [sp, #16]
 800d61e:	4303      	orrs	r3, r0
 800d620:	3401      	adds	r4, #1
 800d622:	9304      	str	r3, [sp, #16]
 800d624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d628:	482c      	ldr	r0, [pc, #176]	; (800d6dc <_vfiprintf_r+0x250>)
 800d62a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d62e:	2206      	movs	r2, #6
 800d630:	f7f2 fdd6 	bl	80001e0 <memchr>
 800d634:	2800      	cmp	r0, #0
 800d636:	d03f      	beq.n	800d6b8 <_vfiprintf_r+0x22c>
 800d638:	4b29      	ldr	r3, [pc, #164]	; (800d6e0 <_vfiprintf_r+0x254>)
 800d63a:	bb1b      	cbnz	r3, 800d684 <_vfiprintf_r+0x1f8>
 800d63c:	9b03      	ldr	r3, [sp, #12]
 800d63e:	3307      	adds	r3, #7
 800d640:	f023 0307 	bic.w	r3, r3, #7
 800d644:	3308      	adds	r3, #8
 800d646:	9303      	str	r3, [sp, #12]
 800d648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d64a:	443b      	add	r3, r7
 800d64c:	9309      	str	r3, [sp, #36]	; 0x24
 800d64e:	e767      	b.n	800d520 <_vfiprintf_r+0x94>
 800d650:	fb0c 3202 	mla	r2, ip, r2, r3
 800d654:	460c      	mov	r4, r1
 800d656:	2001      	movs	r0, #1
 800d658:	e7a5      	b.n	800d5a6 <_vfiprintf_r+0x11a>
 800d65a:	2300      	movs	r3, #0
 800d65c:	3401      	adds	r4, #1
 800d65e:	9305      	str	r3, [sp, #20]
 800d660:	4619      	mov	r1, r3
 800d662:	f04f 0c0a 	mov.w	ip, #10
 800d666:	4620      	mov	r0, r4
 800d668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d66c:	3a30      	subs	r2, #48	; 0x30
 800d66e:	2a09      	cmp	r2, #9
 800d670:	d903      	bls.n	800d67a <_vfiprintf_r+0x1ee>
 800d672:	2b00      	cmp	r3, #0
 800d674:	d0c5      	beq.n	800d602 <_vfiprintf_r+0x176>
 800d676:	9105      	str	r1, [sp, #20]
 800d678:	e7c3      	b.n	800d602 <_vfiprintf_r+0x176>
 800d67a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d67e:	4604      	mov	r4, r0
 800d680:	2301      	movs	r3, #1
 800d682:	e7f0      	b.n	800d666 <_vfiprintf_r+0x1da>
 800d684:	ab03      	add	r3, sp, #12
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	462a      	mov	r2, r5
 800d68a:	4b16      	ldr	r3, [pc, #88]	; (800d6e4 <_vfiprintf_r+0x258>)
 800d68c:	a904      	add	r1, sp, #16
 800d68e:	4630      	mov	r0, r6
 800d690:	f3af 8000 	nop.w
 800d694:	4607      	mov	r7, r0
 800d696:	1c78      	adds	r0, r7, #1
 800d698:	d1d6      	bne.n	800d648 <_vfiprintf_r+0x1bc>
 800d69a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d69c:	07d9      	lsls	r1, r3, #31
 800d69e:	d405      	bmi.n	800d6ac <_vfiprintf_r+0x220>
 800d6a0:	89ab      	ldrh	r3, [r5, #12]
 800d6a2:	059a      	lsls	r2, r3, #22
 800d6a4:	d402      	bmi.n	800d6ac <_vfiprintf_r+0x220>
 800d6a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6a8:	f7ff fe6b 	bl	800d382 <__retarget_lock_release_recursive>
 800d6ac:	89ab      	ldrh	r3, [r5, #12]
 800d6ae:	065b      	lsls	r3, r3, #25
 800d6b0:	f53f af12 	bmi.w	800d4d8 <_vfiprintf_r+0x4c>
 800d6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6b6:	e711      	b.n	800d4dc <_vfiprintf_r+0x50>
 800d6b8:	ab03      	add	r3, sp, #12
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	462a      	mov	r2, r5
 800d6be:	4b09      	ldr	r3, [pc, #36]	; (800d6e4 <_vfiprintf_r+0x258>)
 800d6c0:	a904      	add	r1, sp, #16
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	f000 f880 	bl	800d7c8 <_printf_i>
 800d6c8:	e7e4      	b.n	800d694 <_vfiprintf_r+0x208>
 800d6ca:	bf00      	nop
 800d6cc:	0800e66c 	.word	0x0800e66c
 800d6d0:	0800e68c 	.word	0x0800e68c
 800d6d4:	0800e64c 	.word	0x0800e64c
 800d6d8:	0800e6ac 	.word	0x0800e6ac
 800d6dc:	0800e6b6 	.word	0x0800e6b6
 800d6e0:	00000000 	.word	0x00000000
 800d6e4:	0800d467 	.word	0x0800d467
 800d6e8:	0800e6b2 	.word	0x0800e6b2

0800d6ec <_printf_common>:
 800d6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f0:	4616      	mov	r6, r2
 800d6f2:	4699      	mov	r9, r3
 800d6f4:	688a      	ldr	r2, [r1, #8]
 800d6f6:	690b      	ldr	r3, [r1, #16]
 800d6f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	bfb8      	it	lt
 800d700:	4613      	movlt	r3, r2
 800d702:	6033      	str	r3, [r6, #0]
 800d704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d708:	4607      	mov	r7, r0
 800d70a:	460c      	mov	r4, r1
 800d70c:	b10a      	cbz	r2, 800d712 <_printf_common+0x26>
 800d70e:	3301      	adds	r3, #1
 800d710:	6033      	str	r3, [r6, #0]
 800d712:	6823      	ldr	r3, [r4, #0]
 800d714:	0699      	lsls	r1, r3, #26
 800d716:	bf42      	ittt	mi
 800d718:	6833      	ldrmi	r3, [r6, #0]
 800d71a:	3302      	addmi	r3, #2
 800d71c:	6033      	strmi	r3, [r6, #0]
 800d71e:	6825      	ldr	r5, [r4, #0]
 800d720:	f015 0506 	ands.w	r5, r5, #6
 800d724:	d106      	bne.n	800d734 <_printf_common+0x48>
 800d726:	f104 0a19 	add.w	sl, r4, #25
 800d72a:	68e3      	ldr	r3, [r4, #12]
 800d72c:	6832      	ldr	r2, [r6, #0]
 800d72e:	1a9b      	subs	r3, r3, r2
 800d730:	42ab      	cmp	r3, r5
 800d732:	dc26      	bgt.n	800d782 <_printf_common+0x96>
 800d734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d738:	1e13      	subs	r3, r2, #0
 800d73a:	6822      	ldr	r2, [r4, #0]
 800d73c:	bf18      	it	ne
 800d73e:	2301      	movne	r3, #1
 800d740:	0692      	lsls	r2, r2, #26
 800d742:	d42b      	bmi.n	800d79c <_printf_common+0xb0>
 800d744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d748:	4649      	mov	r1, r9
 800d74a:	4638      	mov	r0, r7
 800d74c:	47c0      	blx	r8
 800d74e:	3001      	adds	r0, #1
 800d750:	d01e      	beq.n	800d790 <_printf_common+0xa4>
 800d752:	6823      	ldr	r3, [r4, #0]
 800d754:	68e5      	ldr	r5, [r4, #12]
 800d756:	6832      	ldr	r2, [r6, #0]
 800d758:	f003 0306 	and.w	r3, r3, #6
 800d75c:	2b04      	cmp	r3, #4
 800d75e:	bf08      	it	eq
 800d760:	1aad      	subeq	r5, r5, r2
 800d762:	68a3      	ldr	r3, [r4, #8]
 800d764:	6922      	ldr	r2, [r4, #16]
 800d766:	bf0c      	ite	eq
 800d768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d76c:	2500      	movne	r5, #0
 800d76e:	4293      	cmp	r3, r2
 800d770:	bfc4      	itt	gt
 800d772:	1a9b      	subgt	r3, r3, r2
 800d774:	18ed      	addgt	r5, r5, r3
 800d776:	2600      	movs	r6, #0
 800d778:	341a      	adds	r4, #26
 800d77a:	42b5      	cmp	r5, r6
 800d77c:	d11a      	bne.n	800d7b4 <_printf_common+0xc8>
 800d77e:	2000      	movs	r0, #0
 800d780:	e008      	b.n	800d794 <_printf_common+0xa8>
 800d782:	2301      	movs	r3, #1
 800d784:	4652      	mov	r2, sl
 800d786:	4649      	mov	r1, r9
 800d788:	4638      	mov	r0, r7
 800d78a:	47c0      	blx	r8
 800d78c:	3001      	adds	r0, #1
 800d78e:	d103      	bne.n	800d798 <_printf_common+0xac>
 800d790:	f04f 30ff 	mov.w	r0, #4294967295
 800d794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d798:	3501      	adds	r5, #1
 800d79a:	e7c6      	b.n	800d72a <_printf_common+0x3e>
 800d79c:	18e1      	adds	r1, r4, r3
 800d79e:	1c5a      	adds	r2, r3, #1
 800d7a0:	2030      	movs	r0, #48	; 0x30
 800d7a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7a6:	4422      	add	r2, r4
 800d7a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7b0:	3302      	adds	r3, #2
 800d7b2:	e7c7      	b.n	800d744 <_printf_common+0x58>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	47c0      	blx	r8
 800d7be:	3001      	adds	r0, #1
 800d7c0:	d0e6      	beq.n	800d790 <_printf_common+0xa4>
 800d7c2:	3601      	adds	r6, #1
 800d7c4:	e7d9      	b.n	800d77a <_printf_common+0x8e>
	...

0800d7c8 <_printf_i>:
 800d7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	4691      	mov	r9, r2
 800d7d0:	7e27      	ldrb	r7, [r4, #24]
 800d7d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d7d4:	2f78      	cmp	r7, #120	; 0x78
 800d7d6:	4680      	mov	r8, r0
 800d7d8:	469a      	mov	sl, r3
 800d7da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7de:	d807      	bhi.n	800d7f0 <_printf_i+0x28>
 800d7e0:	2f62      	cmp	r7, #98	; 0x62
 800d7e2:	d80a      	bhi.n	800d7fa <_printf_i+0x32>
 800d7e4:	2f00      	cmp	r7, #0
 800d7e6:	f000 80d8 	beq.w	800d99a <_printf_i+0x1d2>
 800d7ea:	2f58      	cmp	r7, #88	; 0x58
 800d7ec:	f000 80a3 	beq.w	800d936 <_printf_i+0x16e>
 800d7f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d7f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7f8:	e03a      	b.n	800d870 <_printf_i+0xa8>
 800d7fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7fe:	2b15      	cmp	r3, #21
 800d800:	d8f6      	bhi.n	800d7f0 <_printf_i+0x28>
 800d802:	a001      	add	r0, pc, #4	; (adr r0, 800d808 <_printf_i+0x40>)
 800d804:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d808:	0800d861 	.word	0x0800d861
 800d80c:	0800d875 	.word	0x0800d875
 800d810:	0800d7f1 	.word	0x0800d7f1
 800d814:	0800d7f1 	.word	0x0800d7f1
 800d818:	0800d7f1 	.word	0x0800d7f1
 800d81c:	0800d7f1 	.word	0x0800d7f1
 800d820:	0800d875 	.word	0x0800d875
 800d824:	0800d7f1 	.word	0x0800d7f1
 800d828:	0800d7f1 	.word	0x0800d7f1
 800d82c:	0800d7f1 	.word	0x0800d7f1
 800d830:	0800d7f1 	.word	0x0800d7f1
 800d834:	0800d981 	.word	0x0800d981
 800d838:	0800d8a5 	.word	0x0800d8a5
 800d83c:	0800d963 	.word	0x0800d963
 800d840:	0800d7f1 	.word	0x0800d7f1
 800d844:	0800d7f1 	.word	0x0800d7f1
 800d848:	0800d9a3 	.word	0x0800d9a3
 800d84c:	0800d7f1 	.word	0x0800d7f1
 800d850:	0800d8a5 	.word	0x0800d8a5
 800d854:	0800d7f1 	.word	0x0800d7f1
 800d858:	0800d7f1 	.word	0x0800d7f1
 800d85c:	0800d96b 	.word	0x0800d96b
 800d860:	680b      	ldr	r3, [r1, #0]
 800d862:	1d1a      	adds	r2, r3, #4
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	600a      	str	r2, [r1, #0]
 800d868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d86c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d870:	2301      	movs	r3, #1
 800d872:	e0a3      	b.n	800d9bc <_printf_i+0x1f4>
 800d874:	6825      	ldr	r5, [r4, #0]
 800d876:	6808      	ldr	r0, [r1, #0]
 800d878:	062e      	lsls	r6, r5, #24
 800d87a:	f100 0304 	add.w	r3, r0, #4
 800d87e:	d50a      	bpl.n	800d896 <_printf_i+0xce>
 800d880:	6805      	ldr	r5, [r0, #0]
 800d882:	600b      	str	r3, [r1, #0]
 800d884:	2d00      	cmp	r5, #0
 800d886:	da03      	bge.n	800d890 <_printf_i+0xc8>
 800d888:	232d      	movs	r3, #45	; 0x2d
 800d88a:	426d      	negs	r5, r5
 800d88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d890:	485e      	ldr	r0, [pc, #376]	; (800da0c <_printf_i+0x244>)
 800d892:	230a      	movs	r3, #10
 800d894:	e019      	b.n	800d8ca <_printf_i+0x102>
 800d896:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d89a:	6805      	ldr	r5, [r0, #0]
 800d89c:	600b      	str	r3, [r1, #0]
 800d89e:	bf18      	it	ne
 800d8a0:	b22d      	sxthne	r5, r5
 800d8a2:	e7ef      	b.n	800d884 <_printf_i+0xbc>
 800d8a4:	680b      	ldr	r3, [r1, #0]
 800d8a6:	6825      	ldr	r5, [r4, #0]
 800d8a8:	1d18      	adds	r0, r3, #4
 800d8aa:	6008      	str	r0, [r1, #0]
 800d8ac:	0628      	lsls	r0, r5, #24
 800d8ae:	d501      	bpl.n	800d8b4 <_printf_i+0xec>
 800d8b0:	681d      	ldr	r5, [r3, #0]
 800d8b2:	e002      	b.n	800d8ba <_printf_i+0xf2>
 800d8b4:	0669      	lsls	r1, r5, #25
 800d8b6:	d5fb      	bpl.n	800d8b0 <_printf_i+0xe8>
 800d8b8:	881d      	ldrh	r5, [r3, #0]
 800d8ba:	4854      	ldr	r0, [pc, #336]	; (800da0c <_printf_i+0x244>)
 800d8bc:	2f6f      	cmp	r7, #111	; 0x6f
 800d8be:	bf0c      	ite	eq
 800d8c0:	2308      	moveq	r3, #8
 800d8c2:	230a      	movne	r3, #10
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8ca:	6866      	ldr	r6, [r4, #4]
 800d8cc:	60a6      	str	r6, [r4, #8]
 800d8ce:	2e00      	cmp	r6, #0
 800d8d0:	bfa2      	ittt	ge
 800d8d2:	6821      	ldrge	r1, [r4, #0]
 800d8d4:	f021 0104 	bicge.w	r1, r1, #4
 800d8d8:	6021      	strge	r1, [r4, #0]
 800d8da:	b90d      	cbnz	r5, 800d8e0 <_printf_i+0x118>
 800d8dc:	2e00      	cmp	r6, #0
 800d8de:	d04d      	beq.n	800d97c <_printf_i+0x1b4>
 800d8e0:	4616      	mov	r6, r2
 800d8e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8e6:	fb03 5711 	mls	r7, r3, r1, r5
 800d8ea:	5dc7      	ldrb	r7, [r0, r7]
 800d8ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8f0:	462f      	mov	r7, r5
 800d8f2:	42bb      	cmp	r3, r7
 800d8f4:	460d      	mov	r5, r1
 800d8f6:	d9f4      	bls.n	800d8e2 <_printf_i+0x11a>
 800d8f8:	2b08      	cmp	r3, #8
 800d8fa:	d10b      	bne.n	800d914 <_printf_i+0x14c>
 800d8fc:	6823      	ldr	r3, [r4, #0]
 800d8fe:	07df      	lsls	r7, r3, #31
 800d900:	d508      	bpl.n	800d914 <_printf_i+0x14c>
 800d902:	6923      	ldr	r3, [r4, #16]
 800d904:	6861      	ldr	r1, [r4, #4]
 800d906:	4299      	cmp	r1, r3
 800d908:	bfde      	ittt	le
 800d90a:	2330      	movle	r3, #48	; 0x30
 800d90c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d910:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d914:	1b92      	subs	r2, r2, r6
 800d916:	6122      	str	r2, [r4, #16]
 800d918:	f8cd a000 	str.w	sl, [sp]
 800d91c:	464b      	mov	r3, r9
 800d91e:	aa03      	add	r2, sp, #12
 800d920:	4621      	mov	r1, r4
 800d922:	4640      	mov	r0, r8
 800d924:	f7ff fee2 	bl	800d6ec <_printf_common>
 800d928:	3001      	adds	r0, #1
 800d92a:	d14c      	bne.n	800d9c6 <_printf_i+0x1fe>
 800d92c:	f04f 30ff 	mov.w	r0, #4294967295
 800d930:	b004      	add	sp, #16
 800d932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d936:	4835      	ldr	r0, [pc, #212]	; (800da0c <_printf_i+0x244>)
 800d938:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	680e      	ldr	r6, [r1, #0]
 800d940:	061f      	lsls	r7, r3, #24
 800d942:	f856 5b04 	ldr.w	r5, [r6], #4
 800d946:	600e      	str	r6, [r1, #0]
 800d948:	d514      	bpl.n	800d974 <_printf_i+0x1ac>
 800d94a:	07d9      	lsls	r1, r3, #31
 800d94c:	bf44      	itt	mi
 800d94e:	f043 0320 	orrmi.w	r3, r3, #32
 800d952:	6023      	strmi	r3, [r4, #0]
 800d954:	b91d      	cbnz	r5, 800d95e <_printf_i+0x196>
 800d956:	6823      	ldr	r3, [r4, #0]
 800d958:	f023 0320 	bic.w	r3, r3, #32
 800d95c:	6023      	str	r3, [r4, #0]
 800d95e:	2310      	movs	r3, #16
 800d960:	e7b0      	b.n	800d8c4 <_printf_i+0xfc>
 800d962:	6823      	ldr	r3, [r4, #0]
 800d964:	f043 0320 	orr.w	r3, r3, #32
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	2378      	movs	r3, #120	; 0x78
 800d96c:	4828      	ldr	r0, [pc, #160]	; (800da10 <_printf_i+0x248>)
 800d96e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d972:	e7e3      	b.n	800d93c <_printf_i+0x174>
 800d974:	065e      	lsls	r6, r3, #25
 800d976:	bf48      	it	mi
 800d978:	b2ad      	uxthmi	r5, r5
 800d97a:	e7e6      	b.n	800d94a <_printf_i+0x182>
 800d97c:	4616      	mov	r6, r2
 800d97e:	e7bb      	b.n	800d8f8 <_printf_i+0x130>
 800d980:	680b      	ldr	r3, [r1, #0]
 800d982:	6826      	ldr	r6, [r4, #0]
 800d984:	6960      	ldr	r0, [r4, #20]
 800d986:	1d1d      	adds	r5, r3, #4
 800d988:	600d      	str	r5, [r1, #0]
 800d98a:	0635      	lsls	r5, r6, #24
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	d501      	bpl.n	800d994 <_printf_i+0x1cc>
 800d990:	6018      	str	r0, [r3, #0]
 800d992:	e002      	b.n	800d99a <_printf_i+0x1d2>
 800d994:	0671      	lsls	r1, r6, #25
 800d996:	d5fb      	bpl.n	800d990 <_printf_i+0x1c8>
 800d998:	8018      	strh	r0, [r3, #0]
 800d99a:	2300      	movs	r3, #0
 800d99c:	6123      	str	r3, [r4, #16]
 800d99e:	4616      	mov	r6, r2
 800d9a0:	e7ba      	b.n	800d918 <_printf_i+0x150>
 800d9a2:	680b      	ldr	r3, [r1, #0]
 800d9a4:	1d1a      	adds	r2, r3, #4
 800d9a6:	600a      	str	r2, [r1, #0]
 800d9a8:	681e      	ldr	r6, [r3, #0]
 800d9aa:	6862      	ldr	r2, [r4, #4]
 800d9ac:	2100      	movs	r1, #0
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f7f2 fc16 	bl	80001e0 <memchr>
 800d9b4:	b108      	cbz	r0, 800d9ba <_printf_i+0x1f2>
 800d9b6:	1b80      	subs	r0, r0, r6
 800d9b8:	6060      	str	r0, [r4, #4]
 800d9ba:	6863      	ldr	r3, [r4, #4]
 800d9bc:	6123      	str	r3, [r4, #16]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9c4:	e7a8      	b.n	800d918 <_printf_i+0x150>
 800d9c6:	6923      	ldr	r3, [r4, #16]
 800d9c8:	4632      	mov	r2, r6
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	4640      	mov	r0, r8
 800d9ce:	47d0      	blx	sl
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	d0ab      	beq.n	800d92c <_printf_i+0x164>
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	079b      	lsls	r3, r3, #30
 800d9d8:	d413      	bmi.n	800da02 <_printf_i+0x23a>
 800d9da:	68e0      	ldr	r0, [r4, #12]
 800d9dc:	9b03      	ldr	r3, [sp, #12]
 800d9de:	4298      	cmp	r0, r3
 800d9e0:	bfb8      	it	lt
 800d9e2:	4618      	movlt	r0, r3
 800d9e4:	e7a4      	b.n	800d930 <_printf_i+0x168>
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	4632      	mov	r2, r6
 800d9ea:	4649      	mov	r1, r9
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	47d0      	blx	sl
 800d9f0:	3001      	adds	r0, #1
 800d9f2:	d09b      	beq.n	800d92c <_printf_i+0x164>
 800d9f4:	3501      	adds	r5, #1
 800d9f6:	68e3      	ldr	r3, [r4, #12]
 800d9f8:	9903      	ldr	r1, [sp, #12]
 800d9fa:	1a5b      	subs	r3, r3, r1
 800d9fc:	42ab      	cmp	r3, r5
 800d9fe:	dcf2      	bgt.n	800d9e6 <_printf_i+0x21e>
 800da00:	e7eb      	b.n	800d9da <_printf_i+0x212>
 800da02:	2500      	movs	r5, #0
 800da04:	f104 0619 	add.w	r6, r4, #25
 800da08:	e7f5      	b.n	800d9f6 <_printf_i+0x22e>
 800da0a:	bf00      	nop
 800da0c:	0800e6bd 	.word	0x0800e6bd
 800da10:	0800e6ce 	.word	0x0800e6ce

0800da14 <_sbrk_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4d06      	ldr	r5, [pc, #24]	; (800da30 <_sbrk_r+0x1c>)
 800da18:	2300      	movs	r3, #0
 800da1a:	4604      	mov	r4, r0
 800da1c:	4608      	mov	r0, r1
 800da1e:	602b      	str	r3, [r5, #0]
 800da20:	f7f4 f97a 	bl	8001d18 <_sbrk>
 800da24:	1c43      	adds	r3, r0, #1
 800da26:	d102      	bne.n	800da2e <_sbrk_r+0x1a>
 800da28:	682b      	ldr	r3, [r5, #0]
 800da2a:	b103      	cbz	r3, 800da2e <_sbrk_r+0x1a>
 800da2c:	6023      	str	r3, [r4, #0]
 800da2e:	bd38      	pop	{r3, r4, r5, pc}
 800da30:	20009bc8 	.word	0x20009bc8

0800da34 <__sread>:
 800da34:	b510      	push	{r4, lr}
 800da36:	460c      	mov	r4, r1
 800da38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da3c:	f000 fab4 	bl	800dfa8 <_read_r>
 800da40:	2800      	cmp	r0, #0
 800da42:	bfab      	itete	ge
 800da44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da46:	89a3      	ldrhlt	r3, [r4, #12]
 800da48:	181b      	addge	r3, r3, r0
 800da4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da4e:	bfac      	ite	ge
 800da50:	6563      	strge	r3, [r4, #84]	; 0x54
 800da52:	81a3      	strhlt	r3, [r4, #12]
 800da54:	bd10      	pop	{r4, pc}

0800da56 <__swrite>:
 800da56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da5a:	461f      	mov	r7, r3
 800da5c:	898b      	ldrh	r3, [r1, #12]
 800da5e:	05db      	lsls	r3, r3, #23
 800da60:	4605      	mov	r5, r0
 800da62:	460c      	mov	r4, r1
 800da64:	4616      	mov	r6, r2
 800da66:	d505      	bpl.n	800da74 <__swrite+0x1e>
 800da68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da6c:	2302      	movs	r3, #2
 800da6e:	2200      	movs	r2, #0
 800da70:	f000 f9c8 	bl	800de04 <_lseek_r>
 800da74:	89a3      	ldrh	r3, [r4, #12]
 800da76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da7e:	81a3      	strh	r3, [r4, #12]
 800da80:	4632      	mov	r2, r6
 800da82:	463b      	mov	r3, r7
 800da84:	4628      	mov	r0, r5
 800da86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da8a:	f000 b869 	b.w	800db60 <_write_r>

0800da8e <__sseek>:
 800da8e:	b510      	push	{r4, lr}
 800da90:	460c      	mov	r4, r1
 800da92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da96:	f000 f9b5 	bl	800de04 <_lseek_r>
 800da9a:	1c43      	adds	r3, r0, #1
 800da9c:	89a3      	ldrh	r3, [r4, #12]
 800da9e:	bf15      	itete	ne
 800daa0:	6560      	strne	r0, [r4, #84]	; 0x54
 800daa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800daa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800daaa:	81a3      	strheq	r3, [r4, #12]
 800daac:	bf18      	it	ne
 800daae:	81a3      	strhne	r3, [r4, #12]
 800dab0:	bd10      	pop	{r4, pc}

0800dab2 <__sclose>:
 800dab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab6:	f000 b8d3 	b.w	800dc60 <_close_r>
	...

0800dabc <__swbuf_r>:
 800dabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dabe:	460e      	mov	r6, r1
 800dac0:	4614      	mov	r4, r2
 800dac2:	4605      	mov	r5, r0
 800dac4:	b118      	cbz	r0, 800dace <__swbuf_r+0x12>
 800dac6:	6983      	ldr	r3, [r0, #24]
 800dac8:	b90b      	cbnz	r3, 800dace <__swbuf_r+0x12>
 800daca:	f7ff fbbb 	bl	800d244 <__sinit>
 800dace:	4b21      	ldr	r3, [pc, #132]	; (800db54 <__swbuf_r+0x98>)
 800dad0:	429c      	cmp	r4, r3
 800dad2:	d12b      	bne.n	800db2c <__swbuf_r+0x70>
 800dad4:	686c      	ldr	r4, [r5, #4]
 800dad6:	69a3      	ldr	r3, [r4, #24]
 800dad8:	60a3      	str	r3, [r4, #8]
 800dada:	89a3      	ldrh	r3, [r4, #12]
 800dadc:	071a      	lsls	r2, r3, #28
 800dade:	d52f      	bpl.n	800db40 <__swbuf_r+0x84>
 800dae0:	6923      	ldr	r3, [r4, #16]
 800dae2:	b36b      	cbz	r3, 800db40 <__swbuf_r+0x84>
 800dae4:	6923      	ldr	r3, [r4, #16]
 800dae6:	6820      	ldr	r0, [r4, #0]
 800dae8:	1ac0      	subs	r0, r0, r3
 800daea:	6963      	ldr	r3, [r4, #20]
 800daec:	b2f6      	uxtb	r6, r6
 800daee:	4283      	cmp	r3, r0
 800daf0:	4637      	mov	r7, r6
 800daf2:	dc04      	bgt.n	800dafe <__swbuf_r+0x42>
 800daf4:	4621      	mov	r1, r4
 800daf6:	4628      	mov	r0, r5
 800daf8:	f000 f948 	bl	800dd8c <_fflush_r>
 800dafc:	bb30      	cbnz	r0, 800db4c <__swbuf_r+0x90>
 800dafe:	68a3      	ldr	r3, [r4, #8]
 800db00:	3b01      	subs	r3, #1
 800db02:	60a3      	str	r3, [r4, #8]
 800db04:	6823      	ldr	r3, [r4, #0]
 800db06:	1c5a      	adds	r2, r3, #1
 800db08:	6022      	str	r2, [r4, #0]
 800db0a:	701e      	strb	r6, [r3, #0]
 800db0c:	6963      	ldr	r3, [r4, #20]
 800db0e:	3001      	adds	r0, #1
 800db10:	4283      	cmp	r3, r0
 800db12:	d004      	beq.n	800db1e <__swbuf_r+0x62>
 800db14:	89a3      	ldrh	r3, [r4, #12]
 800db16:	07db      	lsls	r3, r3, #31
 800db18:	d506      	bpl.n	800db28 <__swbuf_r+0x6c>
 800db1a:	2e0a      	cmp	r6, #10
 800db1c:	d104      	bne.n	800db28 <__swbuf_r+0x6c>
 800db1e:	4621      	mov	r1, r4
 800db20:	4628      	mov	r0, r5
 800db22:	f000 f933 	bl	800dd8c <_fflush_r>
 800db26:	b988      	cbnz	r0, 800db4c <__swbuf_r+0x90>
 800db28:	4638      	mov	r0, r7
 800db2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db2c:	4b0a      	ldr	r3, [pc, #40]	; (800db58 <__swbuf_r+0x9c>)
 800db2e:	429c      	cmp	r4, r3
 800db30:	d101      	bne.n	800db36 <__swbuf_r+0x7a>
 800db32:	68ac      	ldr	r4, [r5, #8]
 800db34:	e7cf      	b.n	800dad6 <__swbuf_r+0x1a>
 800db36:	4b09      	ldr	r3, [pc, #36]	; (800db5c <__swbuf_r+0xa0>)
 800db38:	429c      	cmp	r4, r3
 800db3a:	bf08      	it	eq
 800db3c:	68ec      	ldreq	r4, [r5, #12]
 800db3e:	e7ca      	b.n	800dad6 <__swbuf_r+0x1a>
 800db40:	4621      	mov	r1, r4
 800db42:	4628      	mov	r0, r5
 800db44:	f000 f81e 	bl	800db84 <__swsetup_r>
 800db48:	2800      	cmp	r0, #0
 800db4a:	d0cb      	beq.n	800dae4 <__swbuf_r+0x28>
 800db4c:	f04f 37ff 	mov.w	r7, #4294967295
 800db50:	e7ea      	b.n	800db28 <__swbuf_r+0x6c>
 800db52:	bf00      	nop
 800db54:	0800e66c 	.word	0x0800e66c
 800db58:	0800e68c 	.word	0x0800e68c
 800db5c:	0800e64c 	.word	0x0800e64c

0800db60 <_write_r>:
 800db60:	b538      	push	{r3, r4, r5, lr}
 800db62:	4d07      	ldr	r5, [pc, #28]	; (800db80 <_write_r+0x20>)
 800db64:	4604      	mov	r4, r0
 800db66:	4608      	mov	r0, r1
 800db68:	4611      	mov	r1, r2
 800db6a:	2200      	movs	r2, #0
 800db6c:	602a      	str	r2, [r5, #0]
 800db6e:	461a      	mov	r2, r3
 800db70:	f7f4 f881 	bl	8001c76 <_write>
 800db74:	1c43      	adds	r3, r0, #1
 800db76:	d102      	bne.n	800db7e <_write_r+0x1e>
 800db78:	682b      	ldr	r3, [r5, #0]
 800db7a:	b103      	cbz	r3, 800db7e <_write_r+0x1e>
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	bd38      	pop	{r3, r4, r5, pc}
 800db80:	20009bc8 	.word	0x20009bc8

0800db84 <__swsetup_r>:
 800db84:	4b32      	ldr	r3, [pc, #200]	; (800dc50 <__swsetup_r+0xcc>)
 800db86:	b570      	push	{r4, r5, r6, lr}
 800db88:	681d      	ldr	r5, [r3, #0]
 800db8a:	4606      	mov	r6, r0
 800db8c:	460c      	mov	r4, r1
 800db8e:	b125      	cbz	r5, 800db9a <__swsetup_r+0x16>
 800db90:	69ab      	ldr	r3, [r5, #24]
 800db92:	b913      	cbnz	r3, 800db9a <__swsetup_r+0x16>
 800db94:	4628      	mov	r0, r5
 800db96:	f7ff fb55 	bl	800d244 <__sinit>
 800db9a:	4b2e      	ldr	r3, [pc, #184]	; (800dc54 <__swsetup_r+0xd0>)
 800db9c:	429c      	cmp	r4, r3
 800db9e:	d10f      	bne.n	800dbc0 <__swsetup_r+0x3c>
 800dba0:	686c      	ldr	r4, [r5, #4]
 800dba2:	89a3      	ldrh	r3, [r4, #12]
 800dba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dba8:	0719      	lsls	r1, r3, #28
 800dbaa:	d42c      	bmi.n	800dc06 <__swsetup_r+0x82>
 800dbac:	06dd      	lsls	r5, r3, #27
 800dbae:	d411      	bmi.n	800dbd4 <__swsetup_r+0x50>
 800dbb0:	2309      	movs	r3, #9
 800dbb2:	6033      	str	r3, [r6, #0]
 800dbb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbb8:	81a3      	strh	r3, [r4, #12]
 800dbba:	f04f 30ff 	mov.w	r0, #4294967295
 800dbbe:	e03e      	b.n	800dc3e <__swsetup_r+0xba>
 800dbc0:	4b25      	ldr	r3, [pc, #148]	; (800dc58 <__swsetup_r+0xd4>)
 800dbc2:	429c      	cmp	r4, r3
 800dbc4:	d101      	bne.n	800dbca <__swsetup_r+0x46>
 800dbc6:	68ac      	ldr	r4, [r5, #8]
 800dbc8:	e7eb      	b.n	800dba2 <__swsetup_r+0x1e>
 800dbca:	4b24      	ldr	r3, [pc, #144]	; (800dc5c <__swsetup_r+0xd8>)
 800dbcc:	429c      	cmp	r4, r3
 800dbce:	bf08      	it	eq
 800dbd0:	68ec      	ldreq	r4, [r5, #12]
 800dbd2:	e7e6      	b.n	800dba2 <__swsetup_r+0x1e>
 800dbd4:	0758      	lsls	r0, r3, #29
 800dbd6:	d512      	bpl.n	800dbfe <__swsetup_r+0x7a>
 800dbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbda:	b141      	cbz	r1, 800dbee <__swsetup_r+0x6a>
 800dbdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbe0:	4299      	cmp	r1, r3
 800dbe2:	d002      	beq.n	800dbea <__swsetup_r+0x66>
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f000 f98f 	bl	800df08 <_free_r>
 800dbea:	2300      	movs	r3, #0
 800dbec:	6363      	str	r3, [r4, #52]	; 0x34
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbf4:	81a3      	strh	r3, [r4, #12]
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	6063      	str	r3, [r4, #4]
 800dbfa:	6923      	ldr	r3, [r4, #16]
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	f043 0308 	orr.w	r3, r3, #8
 800dc04:	81a3      	strh	r3, [r4, #12]
 800dc06:	6923      	ldr	r3, [r4, #16]
 800dc08:	b94b      	cbnz	r3, 800dc1e <__swsetup_r+0x9a>
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc14:	d003      	beq.n	800dc1e <__swsetup_r+0x9a>
 800dc16:	4621      	mov	r1, r4
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f000 f929 	bl	800de70 <__smakebuf_r>
 800dc1e:	89a0      	ldrh	r0, [r4, #12]
 800dc20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc24:	f010 0301 	ands.w	r3, r0, #1
 800dc28:	d00a      	beq.n	800dc40 <__swsetup_r+0xbc>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	60a3      	str	r3, [r4, #8]
 800dc2e:	6963      	ldr	r3, [r4, #20]
 800dc30:	425b      	negs	r3, r3
 800dc32:	61a3      	str	r3, [r4, #24]
 800dc34:	6923      	ldr	r3, [r4, #16]
 800dc36:	b943      	cbnz	r3, 800dc4a <__swsetup_r+0xc6>
 800dc38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc3c:	d1ba      	bne.n	800dbb4 <__swsetup_r+0x30>
 800dc3e:	bd70      	pop	{r4, r5, r6, pc}
 800dc40:	0781      	lsls	r1, r0, #30
 800dc42:	bf58      	it	pl
 800dc44:	6963      	ldrpl	r3, [r4, #20]
 800dc46:	60a3      	str	r3, [r4, #8]
 800dc48:	e7f4      	b.n	800dc34 <__swsetup_r+0xb0>
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	e7f7      	b.n	800dc3e <__swsetup_r+0xba>
 800dc4e:	bf00      	nop
 800dc50:	2000000c 	.word	0x2000000c
 800dc54:	0800e66c 	.word	0x0800e66c
 800dc58:	0800e68c 	.word	0x0800e68c
 800dc5c:	0800e64c 	.word	0x0800e64c

0800dc60 <_close_r>:
 800dc60:	b538      	push	{r3, r4, r5, lr}
 800dc62:	4d06      	ldr	r5, [pc, #24]	; (800dc7c <_close_r+0x1c>)
 800dc64:	2300      	movs	r3, #0
 800dc66:	4604      	mov	r4, r0
 800dc68:	4608      	mov	r0, r1
 800dc6a:	602b      	str	r3, [r5, #0]
 800dc6c:	f7f4 f81f 	bl	8001cae <_close>
 800dc70:	1c43      	adds	r3, r0, #1
 800dc72:	d102      	bne.n	800dc7a <_close_r+0x1a>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	b103      	cbz	r3, 800dc7a <_close_r+0x1a>
 800dc78:	6023      	str	r3, [r4, #0]
 800dc7a:	bd38      	pop	{r3, r4, r5, pc}
 800dc7c:	20009bc8 	.word	0x20009bc8

0800dc80 <__sflush_r>:
 800dc80:	898a      	ldrh	r2, [r1, #12]
 800dc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc86:	4605      	mov	r5, r0
 800dc88:	0710      	lsls	r0, r2, #28
 800dc8a:	460c      	mov	r4, r1
 800dc8c:	d458      	bmi.n	800dd40 <__sflush_r+0xc0>
 800dc8e:	684b      	ldr	r3, [r1, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	dc05      	bgt.n	800dca0 <__sflush_r+0x20>
 800dc94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	dc02      	bgt.n	800dca0 <__sflush_r+0x20>
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dca2:	2e00      	cmp	r6, #0
 800dca4:	d0f9      	beq.n	800dc9a <__sflush_r+0x1a>
 800dca6:	2300      	movs	r3, #0
 800dca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcac:	682f      	ldr	r7, [r5, #0]
 800dcae:	602b      	str	r3, [r5, #0]
 800dcb0:	d032      	beq.n	800dd18 <__sflush_r+0x98>
 800dcb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcb4:	89a3      	ldrh	r3, [r4, #12]
 800dcb6:	075a      	lsls	r2, r3, #29
 800dcb8:	d505      	bpl.n	800dcc6 <__sflush_r+0x46>
 800dcba:	6863      	ldr	r3, [r4, #4]
 800dcbc:	1ac0      	subs	r0, r0, r3
 800dcbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcc0:	b10b      	cbz	r3, 800dcc6 <__sflush_r+0x46>
 800dcc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcc4:	1ac0      	subs	r0, r0, r3
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	4602      	mov	r2, r0
 800dcca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dccc:	6a21      	ldr	r1, [r4, #32]
 800dcce:	4628      	mov	r0, r5
 800dcd0:	47b0      	blx	r6
 800dcd2:	1c43      	adds	r3, r0, #1
 800dcd4:	89a3      	ldrh	r3, [r4, #12]
 800dcd6:	d106      	bne.n	800dce6 <__sflush_r+0x66>
 800dcd8:	6829      	ldr	r1, [r5, #0]
 800dcda:	291d      	cmp	r1, #29
 800dcdc:	d82c      	bhi.n	800dd38 <__sflush_r+0xb8>
 800dcde:	4a2a      	ldr	r2, [pc, #168]	; (800dd88 <__sflush_r+0x108>)
 800dce0:	40ca      	lsrs	r2, r1
 800dce2:	07d6      	lsls	r6, r2, #31
 800dce4:	d528      	bpl.n	800dd38 <__sflush_r+0xb8>
 800dce6:	2200      	movs	r2, #0
 800dce8:	6062      	str	r2, [r4, #4]
 800dcea:	04d9      	lsls	r1, r3, #19
 800dcec:	6922      	ldr	r2, [r4, #16]
 800dcee:	6022      	str	r2, [r4, #0]
 800dcf0:	d504      	bpl.n	800dcfc <__sflush_r+0x7c>
 800dcf2:	1c42      	adds	r2, r0, #1
 800dcf4:	d101      	bne.n	800dcfa <__sflush_r+0x7a>
 800dcf6:	682b      	ldr	r3, [r5, #0]
 800dcf8:	b903      	cbnz	r3, 800dcfc <__sflush_r+0x7c>
 800dcfa:	6560      	str	r0, [r4, #84]	; 0x54
 800dcfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcfe:	602f      	str	r7, [r5, #0]
 800dd00:	2900      	cmp	r1, #0
 800dd02:	d0ca      	beq.n	800dc9a <__sflush_r+0x1a>
 800dd04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd08:	4299      	cmp	r1, r3
 800dd0a:	d002      	beq.n	800dd12 <__sflush_r+0x92>
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	f000 f8fb 	bl	800df08 <_free_r>
 800dd12:	2000      	movs	r0, #0
 800dd14:	6360      	str	r0, [r4, #52]	; 0x34
 800dd16:	e7c1      	b.n	800dc9c <__sflush_r+0x1c>
 800dd18:	6a21      	ldr	r1, [r4, #32]
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	47b0      	blx	r6
 800dd20:	1c41      	adds	r1, r0, #1
 800dd22:	d1c7      	bne.n	800dcb4 <__sflush_r+0x34>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d0c4      	beq.n	800dcb4 <__sflush_r+0x34>
 800dd2a:	2b1d      	cmp	r3, #29
 800dd2c:	d001      	beq.n	800dd32 <__sflush_r+0xb2>
 800dd2e:	2b16      	cmp	r3, #22
 800dd30:	d101      	bne.n	800dd36 <__sflush_r+0xb6>
 800dd32:	602f      	str	r7, [r5, #0]
 800dd34:	e7b1      	b.n	800dc9a <__sflush_r+0x1a>
 800dd36:	89a3      	ldrh	r3, [r4, #12]
 800dd38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd3c:	81a3      	strh	r3, [r4, #12]
 800dd3e:	e7ad      	b.n	800dc9c <__sflush_r+0x1c>
 800dd40:	690f      	ldr	r7, [r1, #16]
 800dd42:	2f00      	cmp	r7, #0
 800dd44:	d0a9      	beq.n	800dc9a <__sflush_r+0x1a>
 800dd46:	0793      	lsls	r3, r2, #30
 800dd48:	680e      	ldr	r6, [r1, #0]
 800dd4a:	bf08      	it	eq
 800dd4c:	694b      	ldreq	r3, [r1, #20]
 800dd4e:	600f      	str	r7, [r1, #0]
 800dd50:	bf18      	it	ne
 800dd52:	2300      	movne	r3, #0
 800dd54:	eba6 0807 	sub.w	r8, r6, r7
 800dd58:	608b      	str	r3, [r1, #8]
 800dd5a:	f1b8 0f00 	cmp.w	r8, #0
 800dd5e:	dd9c      	ble.n	800dc9a <__sflush_r+0x1a>
 800dd60:	6a21      	ldr	r1, [r4, #32]
 800dd62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd64:	4643      	mov	r3, r8
 800dd66:	463a      	mov	r2, r7
 800dd68:	4628      	mov	r0, r5
 800dd6a:	47b0      	blx	r6
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	dc06      	bgt.n	800dd7e <__sflush_r+0xfe>
 800dd70:	89a3      	ldrh	r3, [r4, #12]
 800dd72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd76:	81a3      	strh	r3, [r4, #12]
 800dd78:	f04f 30ff 	mov.w	r0, #4294967295
 800dd7c:	e78e      	b.n	800dc9c <__sflush_r+0x1c>
 800dd7e:	4407      	add	r7, r0
 800dd80:	eba8 0800 	sub.w	r8, r8, r0
 800dd84:	e7e9      	b.n	800dd5a <__sflush_r+0xda>
 800dd86:	bf00      	nop
 800dd88:	20400001 	.word	0x20400001

0800dd8c <_fflush_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	690b      	ldr	r3, [r1, #16]
 800dd90:	4605      	mov	r5, r0
 800dd92:	460c      	mov	r4, r1
 800dd94:	b913      	cbnz	r3, 800dd9c <_fflush_r+0x10>
 800dd96:	2500      	movs	r5, #0
 800dd98:	4628      	mov	r0, r5
 800dd9a:	bd38      	pop	{r3, r4, r5, pc}
 800dd9c:	b118      	cbz	r0, 800dda6 <_fflush_r+0x1a>
 800dd9e:	6983      	ldr	r3, [r0, #24]
 800dda0:	b90b      	cbnz	r3, 800dda6 <_fflush_r+0x1a>
 800dda2:	f7ff fa4f 	bl	800d244 <__sinit>
 800dda6:	4b14      	ldr	r3, [pc, #80]	; (800ddf8 <_fflush_r+0x6c>)
 800dda8:	429c      	cmp	r4, r3
 800ddaa:	d11b      	bne.n	800dde4 <_fflush_r+0x58>
 800ddac:	686c      	ldr	r4, [r5, #4]
 800ddae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d0ef      	beq.n	800dd96 <_fflush_r+0xa>
 800ddb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ddb8:	07d0      	lsls	r0, r2, #31
 800ddba:	d404      	bmi.n	800ddc6 <_fflush_r+0x3a>
 800ddbc:	0599      	lsls	r1, r3, #22
 800ddbe:	d402      	bmi.n	800ddc6 <_fflush_r+0x3a>
 800ddc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddc2:	f7ff fadd 	bl	800d380 <__retarget_lock_acquire_recursive>
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	4621      	mov	r1, r4
 800ddca:	f7ff ff59 	bl	800dc80 <__sflush_r>
 800ddce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddd0:	07da      	lsls	r2, r3, #31
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	d4e0      	bmi.n	800dd98 <_fflush_r+0xc>
 800ddd6:	89a3      	ldrh	r3, [r4, #12]
 800ddd8:	059b      	lsls	r3, r3, #22
 800ddda:	d4dd      	bmi.n	800dd98 <_fflush_r+0xc>
 800dddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddde:	f7ff fad0 	bl	800d382 <__retarget_lock_release_recursive>
 800dde2:	e7d9      	b.n	800dd98 <_fflush_r+0xc>
 800dde4:	4b05      	ldr	r3, [pc, #20]	; (800ddfc <_fflush_r+0x70>)
 800dde6:	429c      	cmp	r4, r3
 800dde8:	d101      	bne.n	800ddee <_fflush_r+0x62>
 800ddea:	68ac      	ldr	r4, [r5, #8]
 800ddec:	e7df      	b.n	800ddae <_fflush_r+0x22>
 800ddee:	4b04      	ldr	r3, [pc, #16]	; (800de00 <_fflush_r+0x74>)
 800ddf0:	429c      	cmp	r4, r3
 800ddf2:	bf08      	it	eq
 800ddf4:	68ec      	ldreq	r4, [r5, #12]
 800ddf6:	e7da      	b.n	800ddae <_fflush_r+0x22>
 800ddf8:	0800e66c 	.word	0x0800e66c
 800ddfc:	0800e68c 	.word	0x0800e68c
 800de00:	0800e64c 	.word	0x0800e64c

0800de04 <_lseek_r>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	4d07      	ldr	r5, [pc, #28]	; (800de24 <_lseek_r+0x20>)
 800de08:	4604      	mov	r4, r0
 800de0a:	4608      	mov	r0, r1
 800de0c:	4611      	mov	r1, r2
 800de0e:	2200      	movs	r2, #0
 800de10:	602a      	str	r2, [r5, #0]
 800de12:	461a      	mov	r2, r3
 800de14:	f7f3 ff72 	bl	8001cfc <_lseek>
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	d102      	bne.n	800de22 <_lseek_r+0x1e>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	b103      	cbz	r3, 800de22 <_lseek_r+0x1e>
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	bd38      	pop	{r3, r4, r5, pc}
 800de24:	20009bc8 	.word	0x20009bc8

0800de28 <__swhatbuf_r>:
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	460e      	mov	r6, r1
 800de2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de30:	2900      	cmp	r1, #0
 800de32:	b096      	sub	sp, #88	; 0x58
 800de34:	4614      	mov	r4, r2
 800de36:	461d      	mov	r5, r3
 800de38:	da07      	bge.n	800de4a <__swhatbuf_r+0x22>
 800de3a:	2300      	movs	r3, #0
 800de3c:	602b      	str	r3, [r5, #0]
 800de3e:	89b3      	ldrh	r3, [r6, #12]
 800de40:	061a      	lsls	r2, r3, #24
 800de42:	d410      	bmi.n	800de66 <__swhatbuf_r+0x3e>
 800de44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de48:	e00e      	b.n	800de68 <__swhatbuf_r+0x40>
 800de4a:	466a      	mov	r2, sp
 800de4c:	f000 f8be 	bl	800dfcc <_fstat_r>
 800de50:	2800      	cmp	r0, #0
 800de52:	dbf2      	blt.n	800de3a <__swhatbuf_r+0x12>
 800de54:	9a01      	ldr	r2, [sp, #4]
 800de56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de5e:	425a      	negs	r2, r3
 800de60:	415a      	adcs	r2, r3
 800de62:	602a      	str	r2, [r5, #0]
 800de64:	e7ee      	b.n	800de44 <__swhatbuf_r+0x1c>
 800de66:	2340      	movs	r3, #64	; 0x40
 800de68:	2000      	movs	r0, #0
 800de6a:	6023      	str	r3, [r4, #0]
 800de6c:	b016      	add	sp, #88	; 0x58
 800de6e:	bd70      	pop	{r4, r5, r6, pc}

0800de70 <__smakebuf_r>:
 800de70:	898b      	ldrh	r3, [r1, #12]
 800de72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de74:	079d      	lsls	r5, r3, #30
 800de76:	4606      	mov	r6, r0
 800de78:	460c      	mov	r4, r1
 800de7a:	d507      	bpl.n	800de8c <__smakebuf_r+0x1c>
 800de7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	6123      	str	r3, [r4, #16]
 800de84:	2301      	movs	r3, #1
 800de86:	6163      	str	r3, [r4, #20]
 800de88:	b002      	add	sp, #8
 800de8a:	bd70      	pop	{r4, r5, r6, pc}
 800de8c:	ab01      	add	r3, sp, #4
 800de8e:	466a      	mov	r2, sp
 800de90:	f7ff ffca 	bl	800de28 <__swhatbuf_r>
 800de94:	9900      	ldr	r1, [sp, #0]
 800de96:	4605      	mov	r5, r0
 800de98:	4630      	mov	r0, r6
 800de9a:	f7ff fa73 	bl	800d384 <_malloc_r>
 800de9e:	b948      	cbnz	r0, 800deb4 <__smakebuf_r+0x44>
 800dea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dea4:	059a      	lsls	r2, r3, #22
 800dea6:	d4ef      	bmi.n	800de88 <__smakebuf_r+0x18>
 800dea8:	f023 0303 	bic.w	r3, r3, #3
 800deac:	f043 0302 	orr.w	r3, r3, #2
 800deb0:	81a3      	strh	r3, [r4, #12]
 800deb2:	e7e3      	b.n	800de7c <__smakebuf_r+0xc>
 800deb4:	4b0d      	ldr	r3, [pc, #52]	; (800deec <__smakebuf_r+0x7c>)
 800deb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800deb8:	89a3      	ldrh	r3, [r4, #12]
 800deba:	6020      	str	r0, [r4, #0]
 800debc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dec0:	81a3      	strh	r3, [r4, #12]
 800dec2:	9b00      	ldr	r3, [sp, #0]
 800dec4:	6163      	str	r3, [r4, #20]
 800dec6:	9b01      	ldr	r3, [sp, #4]
 800dec8:	6120      	str	r0, [r4, #16]
 800deca:	b15b      	cbz	r3, 800dee4 <__smakebuf_r+0x74>
 800decc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ded0:	4630      	mov	r0, r6
 800ded2:	f000 f88d 	bl	800dff0 <_isatty_r>
 800ded6:	b128      	cbz	r0, 800dee4 <__smakebuf_r+0x74>
 800ded8:	89a3      	ldrh	r3, [r4, #12]
 800deda:	f023 0303 	bic.w	r3, r3, #3
 800dede:	f043 0301 	orr.w	r3, r3, #1
 800dee2:	81a3      	strh	r3, [r4, #12]
 800dee4:	89a0      	ldrh	r0, [r4, #12]
 800dee6:	4305      	orrs	r5, r0
 800dee8:	81a5      	strh	r5, [r4, #12]
 800deea:	e7cd      	b.n	800de88 <__smakebuf_r+0x18>
 800deec:	0800d1dd 	.word	0x0800d1dd

0800def0 <__malloc_lock>:
 800def0:	4801      	ldr	r0, [pc, #4]	; (800def8 <__malloc_lock+0x8>)
 800def2:	f7ff ba45 	b.w	800d380 <__retarget_lock_acquire_recursive>
 800def6:	bf00      	nop
 800def8:	20009bc0 	.word	0x20009bc0

0800defc <__malloc_unlock>:
 800defc:	4801      	ldr	r0, [pc, #4]	; (800df04 <__malloc_unlock+0x8>)
 800defe:	f7ff ba40 	b.w	800d382 <__retarget_lock_release_recursive>
 800df02:	bf00      	nop
 800df04:	20009bc0 	.word	0x20009bc0

0800df08 <_free_r>:
 800df08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df0a:	2900      	cmp	r1, #0
 800df0c:	d048      	beq.n	800dfa0 <_free_r+0x98>
 800df0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df12:	9001      	str	r0, [sp, #4]
 800df14:	2b00      	cmp	r3, #0
 800df16:	f1a1 0404 	sub.w	r4, r1, #4
 800df1a:	bfb8      	it	lt
 800df1c:	18e4      	addlt	r4, r4, r3
 800df1e:	f7ff ffe7 	bl	800def0 <__malloc_lock>
 800df22:	4a20      	ldr	r2, [pc, #128]	; (800dfa4 <_free_r+0x9c>)
 800df24:	9801      	ldr	r0, [sp, #4]
 800df26:	6813      	ldr	r3, [r2, #0]
 800df28:	4615      	mov	r5, r2
 800df2a:	b933      	cbnz	r3, 800df3a <_free_r+0x32>
 800df2c:	6063      	str	r3, [r4, #4]
 800df2e:	6014      	str	r4, [r2, #0]
 800df30:	b003      	add	sp, #12
 800df32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df36:	f7ff bfe1 	b.w	800defc <__malloc_unlock>
 800df3a:	42a3      	cmp	r3, r4
 800df3c:	d90b      	bls.n	800df56 <_free_r+0x4e>
 800df3e:	6821      	ldr	r1, [r4, #0]
 800df40:	1862      	adds	r2, r4, r1
 800df42:	4293      	cmp	r3, r2
 800df44:	bf04      	itt	eq
 800df46:	681a      	ldreq	r2, [r3, #0]
 800df48:	685b      	ldreq	r3, [r3, #4]
 800df4a:	6063      	str	r3, [r4, #4]
 800df4c:	bf04      	itt	eq
 800df4e:	1852      	addeq	r2, r2, r1
 800df50:	6022      	streq	r2, [r4, #0]
 800df52:	602c      	str	r4, [r5, #0]
 800df54:	e7ec      	b.n	800df30 <_free_r+0x28>
 800df56:	461a      	mov	r2, r3
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	b10b      	cbz	r3, 800df60 <_free_r+0x58>
 800df5c:	42a3      	cmp	r3, r4
 800df5e:	d9fa      	bls.n	800df56 <_free_r+0x4e>
 800df60:	6811      	ldr	r1, [r2, #0]
 800df62:	1855      	adds	r5, r2, r1
 800df64:	42a5      	cmp	r5, r4
 800df66:	d10b      	bne.n	800df80 <_free_r+0x78>
 800df68:	6824      	ldr	r4, [r4, #0]
 800df6a:	4421      	add	r1, r4
 800df6c:	1854      	adds	r4, r2, r1
 800df6e:	42a3      	cmp	r3, r4
 800df70:	6011      	str	r1, [r2, #0]
 800df72:	d1dd      	bne.n	800df30 <_free_r+0x28>
 800df74:	681c      	ldr	r4, [r3, #0]
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	6053      	str	r3, [r2, #4]
 800df7a:	4421      	add	r1, r4
 800df7c:	6011      	str	r1, [r2, #0]
 800df7e:	e7d7      	b.n	800df30 <_free_r+0x28>
 800df80:	d902      	bls.n	800df88 <_free_r+0x80>
 800df82:	230c      	movs	r3, #12
 800df84:	6003      	str	r3, [r0, #0]
 800df86:	e7d3      	b.n	800df30 <_free_r+0x28>
 800df88:	6825      	ldr	r5, [r4, #0]
 800df8a:	1961      	adds	r1, r4, r5
 800df8c:	428b      	cmp	r3, r1
 800df8e:	bf04      	itt	eq
 800df90:	6819      	ldreq	r1, [r3, #0]
 800df92:	685b      	ldreq	r3, [r3, #4]
 800df94:	6063      	str	r3, [r4, #4]
 800df96:	bf04      	itt	eq
 800df98:	1949      	addeq	r1, r1, r5
 800df9a:	6021      	streq	r1, [r4, #0]
 800df9c:	6054      	str	r4, [r2, #4]
 800df9e:	e7c7      	b.n	800df30 <_free_r+0x28>
 800dfa0:	b003      	add	sp, #12
 800dfa2:	bd30      	pop	{r4, r5, pc}
 800dfa4:	200098ac 	.word	0x200098ac

0800dfa8 <_read_r>:
 800dfa8:	b538      	push	{r3, r4, r5, lr}
 800dfaa:	4d07      	ldr	r5, [pc, #28]	; (800dfc8 <_read_r+0x20>)
 800dfac:	4604      	mov	r4, r0
 800dfae:	4608      	mov	r0, r1
 800dfb0:	4611      	mov	r1, r2
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	602a      	str	r2, [r5, #0]
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	f7f3 fe40 	bl	8001c3c <_read>
 800dfbc:	1c43      	adds	r3, r0, #1
 800dfbe:	d102      	bne.n	800dfc6 <_read_r+0x1e>
 800dfc0:	682b      	ldr	r3, [r5, #0]
 800dfc2:	b103      	cbz	r3, 800dfc6 <_read_r+0x1e>
 800dfc4:	6023      	str	r3, [r4, #0]
 800dfc6:	bd38      	pop	{r3, r4, r5, pc}
 800dfc8:	20009bc8 	.word	0x20009bc8

0800dfcc <_fstat_r>:
 800dfcc:	b538      	push	{r3, r4, r5, lr}
 800dfce:	4d07      	ldr	r5, [pc, #28]	; (800dfec <_fstat_r+0x20>)
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	4608      	mov	r0, r1
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	602b      	str	r3, [r5, #0]
 800dfda:	f7f3 fe74 	bl	8001cc6 <_fstat>
 800dfde:	1c43      	adds	r3, r0, #1
 800dfe0:	d102      	bne.n	800dfe8 <_fstat_r+0x1c>
 800dfe2:	682b      	ldr	r3, [r5, #0]
 800dfe4:	b103      	cbz	r3, 800dfe8 <_fstat_r+0x1c>
 800dfe6:	6023      	str	r3, [r4, #0]
 800dfe8:	bd38      	pop	{r3, r4, r5, pc}
 800dfea:	bf00      	nop
 800dfec:	20009bc8 	.word	0x20009bc8

0800dff0 <_isatty_r>:
 800dff0:	b538      	push	{r3, r4, r5, lr}
 800dff2:	4d06      	ldr	r5, [pc, #24]	; (800e00c <_isatty_r+0x1c>)
 800dff4:	2300      	movs	r3, #0
 800dff6:	4604      	mov	r4, r0
 800dff8:	4608      	mov	r0, r1
 800dffa:	602b      	str	r3, [r5, #0]
 800dffc:	f7f3 fe73 	bl	8001ce6 <_isatty>
 800e000:	1c43      	adds	r3, r0, #1
 800e002:	d102      	bne.n	800e00a <_isatty_r+0x1a>
 800e004:	682b      	ldr	r3, [r5, #0]
 800e006:	b103      	cbz	r3, 800e00a <_isatty_r+0x1a>
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	bd38      	pop	{r3, r4, r5, pc}
 800e00c:	20009bc8 	.word	0x20009bc8

0800e010 <_init>:
 800e010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e012:	bf00      	nop
 800e014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e016:	bc08      	pop	{r3}
 800e018:	469e      	mov	lr, r3
 800e01a:	4770      	bx	lr

0800e01c <_fini>:
 800e01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e01e:	bf00      	nop
 800e020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e022:	bc08      	pop	{r3}
 800e024:	469e      	mov	lr, r3
 800e026:	4770      	bx	lr
