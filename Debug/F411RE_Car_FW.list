
F411RE_Car_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d47c  0800d47c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d47c  0800d47c  0001d47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d484  0800d484  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d484  0800d484  0001d484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d488  0800d488  0001d488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800d48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c6c  200000a4  0800d530  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00003800  20009d10  0800d530  00029d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006324f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009627  00000000  00000000  00083323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00033e0b  00000000  00000000  0008c94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002238  00000000  00000000  000c0758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000060f8  00000000  00000000  000c2990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bb3  00000000  00000000  000c8a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00048d0f  00000000  00000000  000eb63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b791b  00000000  00000000  0013434a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ebc65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084ec  00000000  00000000  001ebcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cbe8 	.word	0x0800cbe8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	0800cbe8 	.word	0x0800cbe8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <ADXL_ReadAcceleration>:

/**
 * @brief	Returns all axes acceleration in float variable in units of m/(s^2) or cm/(s^2)
 */
void ADXL_ReadAcceleration(float *AccelerationX, float *AccelerationY, float *AccelerationZ)
{
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	460d      	mov	r5, r1
 8000ea8:	4614      	mov	r4, r2
	/* Variable declaration */
	uint16_t RawAccelX, RawAccelY, RawAccelZ;

	/* Read FIFO/DATA registers */
	__ADXL_READMULTIBYTE_FIFO(&RawAccelX, &RawAccelY, &RawAccelZ);
 8000eaa:	a901      	add	r1, sp, #4
 8000eac:	f10d 0206 	add.w	r2, sp, #6
 8000eb0:	f10d 0002 	add.w	r0, sp, #2
 8000eb4:	f000 f9fe 	bl	80012b4 <__ADXL_READMULTIBYTE_FIFO>
#if defined(ACCELERATION_M_SEC_SQUARED)
	*AccelerationX = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelX))/1000.0f);
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/1000.0f);
	*AccelerationZ = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelZ))/1000.0f);
#elif defined(ACCELERATION_CM_SEC_SQUARED)
	*AccelerationX = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelX))/10.0f);
 8000eb8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000ebc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000f40 <ADXL_ReadAcceleration+0xa0>
    if(value & 0x1000)
 8000ec0:	04d8      	lsls	r0, r3, #19
        return (-1 * temp);
 8000ec2:	bf44      	itt	mi
 8000ec4:	ea6f 43c3 	mvnmi.w	r3, r3, lsl #19
 8000ec8:	ea6f 43d3 	mvnmi.w	r3, r3, lsr #19
	*AccelerationX = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelX))/10.0f);
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000ed8:	ee67 7a87 	vmul.f32	s15, s15, s14
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/10.0f);
 8000edc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	*AccelerationX = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelX))/10.0f);
 8000ee0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if(value & 0x1000)
 8000ee4:	04d9      	lsls	r1, r3, #19
        return (-1 * temp);
 8000ee6:	bf44      	itt	mi
 8000ee8:	ea6f 43c3 	mvnmi.w	r3, r3, lsl #19
 8000eec:	ea6f 43d3 	mvnmi.w	r3, r3, lsr #19
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/10.0f);
 8000ef0:	ee07 3a90 	vmov	s15, r3
	*AccelerationX = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelX))/10.0f);
 8000ef4:	ed86 7a00 	vstr	s14, [r6]
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/10.0f);
 8000ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000f40 <ADXL_ReadAcceleration+0xa0>
	*AccelerationZ = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelZ))/10.0f);
 8000f00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/10.0f);
 8000f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f08:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000f0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if(value & 0x1000)
 8000f10:	04da      	lsls	r2, r3, #19
        return (-1 * temp);
 8000f12:	bf44      	itt	mi
 8000f14:	ea6f 43c3 	mvnmi.w	r3, r3, lsl #19
 8000f18:	ea6f 43d3 	mvnmi.w	r3, r3, lsr #19
	*AccelerationZ = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelZ))/10.0f);
 8000f1c:	ee07 3a90 	vmov	s15, r3
	*AccelerationY = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelY))/10.0f);
 8000f20:	ed85 7a00 	vstr	s14, [r5]
	*AccelerationZ = (3.90625f * (float)(ADXL_TwosComplement_13bits(RawAccelZ))/10.0f);
 8000f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f28:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f40 <ADXL_ReadAcceleration+0xa0>
 8000f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f30:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000f34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f38:	ed84 7a00 	vstr	s14, [r4]
#endif
}
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
 8000f40:	407a0000 	.word	0x407a0000

08000f44 <ADXL_ConfigureOffsets>:
 * 			DATA registers will take offset into account. (This includes taking +1g from Z
 * 			axis acceleration due to gravity into DATAZ0 and DATAZ1 registers).
 * @note	Refer to page 28 out of 36 of the ADXL343 Datasheet, section "Offset Calibration"
 */
void ADXL_ConfigureOffsets(void)
{
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	b083      	sub	sp, #12
	/* Variable declarations */
	uint16_t InputSampleX = 0, InputSampleY = 0, InputSampleZ = 0;
 8000f48:	2400      	movs	r4, #0
 8000f4a:	f8ad 4002 	strh.w	r4, [sp, #2]
 8000f4e:	f8ad 4004 	strh.w	r4, [sp, #4]
 8000f52:	f8ad 4006 	strh.w	r4, [sp, #6]
	int8_t X_offset = 0, Y_offset = 0, Z_offset = 0;
	uint8_t OFSXvalue = 0, OFSYvalue = 0, OFSZvalue = 0;			/* values to be placed into the offset registers */

	/* Collect 10 samples of X, Y, and Z acceleration. Note that resolution is 3.90625mg/LSB at 13-bits */
#if defined(FREERTOS_INCLUDED)
	taskENTER_CRITICAL();
 8000f56:	f00a fa8d 	bl	800b474 <vPortEnterCritical>
#endif

	/* Iterate NUM_ACCELERATION_OFFSET_SAMPLES number of times */
	for(volatile uint8_t idx=0; idx<NUM_ACCELERATION_OFFSET_SAMPLES; idx++)
 8000f5a:	f88d 4001 	strb.w	r4, [sp, #1]
 8000f5e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000f62:	2b09      	cmp	r3, #9
 8000f64:	f200 8088 	bhi.w	8001078 <ADXL_ConfigureOffsets+0x134>
	int32_t AvgSampleX = 0, AvgSampleY = 0, AvgSampleZ = 0;			/* a.k.a. X_0g, Y_0g, Z_0g in ADXL343 Datasheet page 28 */
 8000f68:	4626      	mov	r6, r4
 8000f6a:	4625      	mov	r5, r4
	{
		/* Read Input samples and accumulate input samples in AvgSample variables */
		__ADXL_READMULTIBYTE_FIFO(&InputSampleX, &InputSampleY, &InputSampleZ);
 8000f6c:	a901      	add	r1, sp, #4
 8000f6e:	f10d 0206 	add.w	r2, sp, #6
 8000f72:	f10d 0002 	add.w	r0, sp, #2
 8000f76:	f000 f99d 	bl	80012b4 <__ADXL_READMULTIBYTE_FIFO>
		AvgSampleX += ADXL_TwosComplement_13bits(InputSampleX);
 8000f7a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		AvgSampleY += ADXL_TwosComplement_13bits(InputSampleY);
 8000f7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    if(value & 0x1000)
 8000f82:	04d1      	lsls	r1, r2, #19
        return (-1 * temp);
 8000f84:	bf44      	itt	mi
 8000f86:	ea6f 42c2 	mvnmi.w	r2, r2, lsl #19
 8000f8a:	ea6f 42d2 	mvnmi.w	r2, r2, lsr #19
		AvgSampleX += ADXL_TwosComplement_13bits(InputSampleX);
 8000f8e:	4415      	add	r5, r2
    if(value & 0x1000)
 8000f90:	04da      	lsls	r2, r3, #19
        return (-1 * temp);
 8000f92:	bf48      	it	mi
 8000f94:	ea6f 43c3 	mvnmi.w	r3, r3, lsl #19
		AvgSampleZ += ADXL_TwosComplement_13bits(InputSampleZ);
 8000f98:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        return (-1 * temp);
 8000f9c:	bf48      	it	mi
 8000f9e:	ea6f 43d3 	mvnmi.w	r3, r3, lsr #19
		AvgSampleY += ADXL_TwosComplement_13bits(InputSampleY);
 8000fa2:	441e      	add	r6, r3
        return (-1 * temp);
 8000fa4:	ea6f 42c1 	mvn.w	r2, r1, lsl #19
    if(value & 0x1000)
 8000fa8:	04cb      	lsls	r3, r1, #19

		HAL_Delay(25);
 8000faa:	f04f 0019 	mov.w	r0, #25
        return (-1 * temp);
 8000fae:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
		HAL_Delay(25);
 8000fb2:	bf4a      	itet	mi
 8000fb4:	2019      	movmi	r0, #25
		AvgSampleZ += ADXL_TwosComplement_13bits(InputSampleZ);
 8000fb6:	1864      	addpl	r4, r4, r1
		HAL_Delay(25);
 8000fb8:	18a4      	addmi	r4, r4, r2
 8000fba:	f002 fbb9 	bl	8003730 <HAL_Delay>
	for(volatile uint8_t idx=0; idx<NUM_ACCELERATION_OFFSET_SAMPLES; idx++)
 8000fbe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f88d 3001 	strb.w	r3, [sp, #1]
 8000fca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	d9cc      	bls.n	8000f6c <ADXL_ConfigureOffsets+0x28>
	AvgSampleZ = AvgSampleZ/NUM_ACCELERATION_OFFSET_SAMPLES;

	/* Can reduce AvgSampleZ with 256 so that DATAZ registers will not account +1g from gravity into results */

#if defined(FREERTOS_INCLUDED)
	taskEXIT_CRITICAL();
 8000fd2:	f00a fa71 	bl	800b4b8 <vPortExitCritical>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_POWER_CTL_BASE, NMAX_I2C_RETX);
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	202d      	movs	r0, #45	; 0x2d
 8000fda:	f000 f90d 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
	 */
	Accelerometer_SetMeasurementMode(A_DISABLE);

	/* Calculate offset values */
	X_offset = -1 * round(AvgSampleX/4);
	Y_offset = -1 * round(AvgSampleY/4);
 8000fde:	4f2e      	ldr	r7, [pc, #184]	; (8001098 <ADXL_ConfigureOffsets+0x154>)
	__io_accelerometer_i2cWriteRegister(REG_POWER_CTL_BASE, temp, NMAX_I2C_RETX);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
 8000fe6:	202d      	movs	r0, #45	; 0x2d
 8000fe8:	f000 f8ac 	bl	8001144 <__io_accelerometer_i2cWriteRegister>
	Y_offset = -1 * round(AvgSampleY/4);
 8000fec:	fb87 3006 	smull	r3, r0, r7, r6
 8000ff0:	17f6      	asrs	r6, r6, #31
 8000ff2:	ebc6 1020 	rsb	r0, r6, r0, asr #4
 8000ff6:	f7ff fa95 	bl	8000524 <__aeabi_i2d>
 8000ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fdaa 	bl	8000b58 <__aeabi_d2iz>
 8001004:	4603      	mov	r3, r0
	Z_offset = -1 * round(AvgSampleZ/4);
 8001006:	fb87 2004 	smull	r2, r0, r7, r4
 800100a:	17e4      	asrs	r4, r4, #31
 800100c:	ebc4 1020 	rsb	r0, r4, r0, asr #4
	Y_offset = -1 * round(AvgSampleY/4);
 8001010:	b25c      	sxtb	r4, r3
	Z_offset = -1 * round(AvgSampleZ/4);
 8001012:	f7ff fa87 	bl	8000524 <__aeabi_i2d>
 8001016:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fd9c 	bl	8000b58 <__aeabi_d2iz>
 8001020:	4603      	mov	r3, r0
	X_offset = -1 * round(AvgSampleX/4);
 8001022:	fb87 2005 	smull	r2, r0, r7, r5
 8001026:	17ed      	asrs	r5, r5, #31
 8001028:	ebc5 1020 	rsb	r0, r5, r0, asr #4
	Z_offset = -1 * round(AvgSampleZ/4);
 800102c:	b25d      	sxtb	r5, r3
	X_offset = -1 * round(AvgSampleX/4);
 800102e:	f7ff fa79 	bl	8000524 <__aeabi_i2d>
 8001032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fd8e 	bl	8000b58 <__aeabi_d2iz>
        return input;
 800103c:	b2c1      	uxtb	r1, r0
 800103e:	b2e4      	uxtb	r4, r4
	OFSXvalue = ADXL_TwosComplement_8bits(X_offset);
	OFSYvalue = ADXL_TwosComplement_8bits(Y_offset);
	OFSZvalue = ADXL_TwosComplement_8bits(Z_offset);

	/* Write directly into offset registers */
	__io_accelerometer_i2cWriteRegister(REG_OFSX_BASE, OFSXvalue, NMAX_I2C_RETX);
 8001040:	2201      	movs	r2, #1
 8001042:	201e      	movs	r0, #30
 8001044:	f000 f87e 	bl	8001144 <__io_accelerometer_i2cWriteRegister>
        return input;
 8001048:	b2ed      	uxtb	r5, r5
	__io_accelerometer_i2cWriteRegister(REG_OFSY_BASE, OFSYvalue, NMAX_I2C_RETX);
 800104a:	4621      	mov	r1, r4
 800104c:	2201      	movs	r2, #1
 800104e:	201f      	movs	r0, #31
 8001050:	f000 f878 	bl	8001144 <__io_accelerometer_i2cWriteRegister>
	__io_accelerometer_i2cWriteRegister(REG_OFSZ_BASE, OFSZvalue, NMAX_I2C_RETX);
 8001054:	4629      	mov	r1, r5
 8001056:	2201      	movs	r2, #1
 8001058:	2020      	movs	r0, #32
 800105a:	f000 f873 	bl	8001144 <__io_accelerometer_i2cWriteRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_POWER_CTL_BASE, NMAX_I2C_RETX);
 800105e:	2101      	movs	r1, #1
 8001060:	202d      	movs	r0, #45	; 0x2d
 8001062:	f000 f8c9 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
		temp |= MSK_POWER_CTL_MEASURE;
 8001066:	f040 0008 	orr.w	r0, r0, #8
	__io_accelerometer_i2cWriteRegister(REG_POWER_CTL_BASE, temp, NMAX_I2C_RETX);
 800106a:	b2c1      	uxtb	r1, r0
 800106c:	2201      	movs	r2, #1
 800106e:	202d      	movs	r0, #45	; 0x2d
 8001070:	f000 f868 	bl	8001144 <__io_accelerometer_i2cWriteRegister>

	/* Place device in measurement mode again, all changes will be applied afterwards */
	Accelerometer_SetMeasurementMode(A_ENABLE);
}
 8001074:	b003      	add	sp, #12
 8001076:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 8001078:	f00a fa1e 	bl	800b4b8 <vPortExitCritical>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_POWER_CTL_BASE, NMAX_I2C_RETX);
 800107c:	2101      	movs	r1, #1
 800107e:	202d      	movs	r0, #45	; 0x2d
 8001080:	f000 f8ba 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
	__io_accelerometer_i2cWriteRegister(REG_POWER_CTL_BASE, temp, NMAX_I2C_RETX);
 8001084:	2201      	movs	r2, #1
 8001086:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
 800108a:	202d      	movs	r0, #45	; 0x2d
 800108c:	f000 f85a 	bl	8001144 <__io_accelerometer_i2cWriteRegister>
	Z_offset = -1 * round(AvgSampleZ/4);
 8001090:	4625      	mov	r5, r4
        return input;
 8001092:	4621      	mov	r1, r4
 8001094:	e7d3      	b.n	800103e <ADXL_ConfigureOffsets+0xfa>
 8001096:	bf00      	nop
 8001098:	66666667 	.word	0x66666667

0800109c <ADXL343_Init>:

/**
 * @brief 	Initializes the ADXL343 in Standby Mode
 */
void ADXL343_Init(void)
{
 800109c:	b508      	push	{r3, lr}
	/* Place device in STANDBY mode for configuration */
	__RESET_ADXL343_REGISTERS();
 800109e:	f000 f94b 	bl	8001338 <__RESET_ADXL343_REGISTERS>
	
	/* Check accelerometer device/serial ID */
	if(__io_accelerometer_i2cReadRegister(REG_DEVID_BASE, NMAX_I2C_RETX) == 0xE5)
 80010a2:	2101      	movs	r1, #1
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 f8a7 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
 80010aa:	28e5      	cmp	r0, #229	; 0xe5
 80010ac:	d001      	beq.n	80010b2 <ADXL343_Init+0x16>
	else
	{
#if defined(USE_VCOM)
		printf("Wrong Accelerometer ID detected\n\n");
#endif
		Error_Handler();
 80010ae:	f001 ff45 	bl	8002f3c <Error_Handler>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_BW_RATE_BASE, NMAX_I2C_RETX);
 80010b2:	2101      	movs	r1, #1
 80010b4:	202c      	movs	r0, #44	; 0x2c
 80010b6:	f000 f89f 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
	temp &= MSK_REG_BW_LOWPOWER;
 80010ba:	f000 0010 	and.w	r0, r0, #16
	__io_accelerometer_i2cWriteRegister(REG_BW_RATE_BASE, temp, NMAX_I2C_RETX);
 80010be:	f040 0109 	orr.w	r1, r0, #9
 80010c2:	2201      	movs	r2, #1
 80010c4:	202c      	movs	r0, #44	; 0x2c
 80010c6:	f000 f83d 	bl	8001144 <__io_accelerometer_i2cWriteRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_BW_RATE_BASE, NMAX_I2C_RETX);
 80010ca:	2101      	movs	r1, #1
 80010cc:	202c      	movs	r0, #44	; 0x2c
 80010ce:	f000 f893 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
		temp |= MSK_REG_BW_LOWPOWER;
 80010d2:	f040 0010 	orr.w	r0, r0, #16
	__io_accelerometer_i2cWriteRegister(REG_BW_RATE_BASE, temp, NMAX_I2C_RETX);
 80010d6:	2201      	movs	r2, #1
 80010d8:	b2c1      	uxtb	r1, r0
 80010da:	202c      	movs	r0, #44	; 0x2c
 80010dc:	f000 f832 	bl	8001144 <__io_accelerometer_i2cWriteRegister>
	uint8_t retval = __io_accelerometer_i2cReadRegister(REG_INT_SOURCE_BASE, NMAX_I2C_RETX);
 80010e0:	2101      	movs	r1, #1
 80010e2:	2030      	movs	r0, #48	; 0x30
 80010e4:	f000 f888 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_DATA_FORMAT_BASE, NMAX_I2C_RETX);
 80010e8:	2101      	movs	r1, #1
 80010ea:	2031      	movs	r0, #49	; 0x31
 80010ec:	f000 f884 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
		temp |= MSK_DATA_FORMAT_FULL_RES;
 80010f0:	f040 0008 	orr.w	r0, r0, #8
	__io_accelerometer_i2cWriteRegister(REG_DATA_FORMAT_BASE, temp, NMAX_I2C_RETX);
 80010f4:	b2c1      	uxtb	r1, r0
 80010f6:	2201      	movs	r2, #1
 80010f8:	2031      	movs	r0, #49	; 0x31
 80010fa:	f000 f823 	bl	8001144 <__io_accelerometer_i2cWriteRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_DATA_FORMAT_BASE, NMAX_I2C_RETX);
 80010fe:	2101      	movs	r1, #1
 8001100:	2031      	movs	r0, #49	; 0x31
 8001102:	f000 f879 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
	temp = ((temp & ~(0x03)) | ((uint8_t)xRange));
 8001106:	f040 0003 	orr.w	r0, r0, #3
	__io_accelerometer_i2cWriteRegister(REG_DATA_FORMAT_BASE, temp, NMAX_I2C_RETX);
 800110a:	b2c1      	uxtb	r1, r0
 800110c:	2201      	movs	r2, #1
 800110e:	2031      	movs	r0, #49	; 0x31
 8001110:	f000 f818 	bl	8001144 <__io_accelerometer_i2cWriteRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_FIFO_CTL_BASE, NMAX_I2C_RETX);
 8001114:	2101      	movs	r1, #1
 8001116:	2038      	movs	r0, #56	; 0x38
 8001118:	f000 f86e 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
	__io_accelerometer_i2cWriteRegister(REG_FIFO_CTL_BASE, temp, NMAX_I2C_RETX);
 800111c:	2201      	movs	r2, #1
 800111e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8001122:	2038      	movs	r0, #56	; 0x38
 8001124:	f000 f80e 	bl	8001144 <__io_accelerometer_i2cWriteRegister>
	uint8_t temp = __io_accelerometer_i2cReadRegister(REG_POWER_CTL_BASE, NMAX_I2C_RETX);
 8001128:	2101      	movs	r1, #1
 800112a:	202d      	movs	r0, #45	; 0x2d
 800112c:	f000 f864 	bl	80011f8 <__io_accelerometer_i2cReadRegister>
		temp |= MSK_POWER_CTL_MEASURE;
 8001130:	f040 0008 	orr.w	r0, r0, #8
	__io_accelerometer_i2cWriteRegister(REG_POWER_CTL_BASE, temp, NMAX_I2C_RETX);
 8001134:	b2c1      	uxtb	r1, r0
/*--- END OF CUSTOM ADXL343 CONFIGURATION TO MEASURE ACCELERATION FROM FIFO ---*/
	
	/* Place device in non STANDBY mode */
	Accelerometer_SetMeasurementMode(A_ENABLE);
	
}
 8001136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__io_accelerometer_i2cWriteRegister(REG_POWER_CTL_BASE, temp, NMAX_I2C_RETX);
 800113a:	2201      	movs	r2, #1
 800113c:	202d      	movs	r0, #45	; 0x2d
 800113e:	f000 b801 	b.w	8001144 <__io_accelerometer_i2cWriteRegister>
 8001142:	bf00      	nop

08001144 <__io_accelerometer_i2cWriteRegister>:
 * @param      cRegAddress: Address of internal register to write into (8-bit internal address)
 *                   pData: 8-bit data to write
 *        nRetransmissions: Number of retransmissions to perform if a NACK occurs at each try
 */
void __io_accelerometer_i2cWriteRegister(uint8_t cRegAddress, uint8_t pData, uint8_t nRetransmissions)
{
 8001144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001148:	b087      	sub	sp, #28
	uint8_t pTxBuff[1] = {pData};

	/* timeout counter variable */
	volatile uint8_t i2c_current_retx = 0;
 800114a:	2500      	movs	r5, #0
	do
	{
		i2c_process_status = SUCCESS;

		/* i2c single byte write operation */
		if(HAL_I2C_Mem_Write(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pTxBuff, 1, i2cTimeout) != HAL_OK)
 800114c:	4c28      	ldr	r4, [pc, #160]	; (80011f0 <__io_accelerometer_i2cWriteRegister+0xac>)
		}

		/* If I2C is BUSY even after 16000 CPU cycles */
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
		{
			printf("I2C Bus still busy\n");
 800114e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80011f4 <__io_accelerometer_i2cWriteRegister+0xb0>
	uint8_t pTxBuff[1] = {pData};
 8001152:	f88d 1010 	strb.w	r1, [sp, #16]
	volatile uint8_t i2c_current_retx = 0;
 8001156:	4606      	mov	r6, r0
{
 8001158:	4690      	mov	r8, r2
	volatile uint8_t i2c_current_retx = 0;
 800115a:	f88d 5012 	strb.w	r5, [sp, #18]
 800115e:	af04      	add	r7, sp, #16
		if(HAL_I2C_Mem_Write(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pTxBuff, 1, i2cTimeout) != HAL_OK)
 8001160:	2232      	movs	r2, #50	; 0x32
 8001162:	2301      	movs	r3, #1
 8001164:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001168:	9700      	str	r7, [sp, #0]
 800116a:	4632      	mov	r2, r6
 800116c:	21a6      	movs	r1, #166	; 0xa6
 800116e:	4620      	mov	r0, r4
		i2c_process_status = SUCCESS;
 8001170:	f88d 5013 	strb.w	r5, [sp, #19]
		if(HAL_I2C_Mem_Write(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pTxBuff, 1, i2cTimeout) != HAL_OK)
 8001174:	f003 ff82 	bl	800507c <HAL_I2C_Mem_Write>
 8001178:	bbb8      	cbnz	r0, 80011ea <__io_accelerometer_i2cWriteRegister+0xa6>
		volatile uint32_t errorhandler_counter = 0;
 800117a:	9505      	str	r5, [sp, #20]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 15999))
 800117c:	e006      	b.n	800118c <__io_accelerometer_i2cWriteRegister+0x48>
 800117e:	9b05      	ldr	r3, [sp, #20]
 8001180:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001184:	d207      	bcs.n	8001196 <__io_accelerometer_i2cWriteRegister+0x52>
			errorhandler_counter++;
 8001186:	9b05      	ldr	r3, [sp, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	9305      	str	r3, [sp, #20]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 15999))
 800118c:	4620      	mov	r0, r4
 800118e:	f005 f863 	bl	8006258 <HAL_I2C_GetState>
 8001192:	2820      	cmp	r0, #32
 8001194:	d1f3      	bne.n	800117e <__io_accelerometer_i2cWriteRegister+0x3a>
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 8001196:	9b05      	ldr	r3, [sp, #20]
 8001198:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800119c:	d21a      	bcs.n	80011d4 <__io_accelerometer_i2cWriteRegister+0x90>
			Error_Handler();
		}

		/* Counter to ensure repeating transaction only happens up to nRetransmissions */
		i2c_current_retx++;
 800119e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2db      	uxtb	r3, r3

  /* When Acknowledge failure occurs (Slave did not acknowledge it's address)
     Master restarts communication up to nRetransmissions */
	}
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 80011a6:	4620      	mov	r0, r4
		i2c_current_retx++;
 80011a8:	f88d 3012 	strb.w	r3, [sp, #18]
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 80011ac:	f005 f858 	bl	8006260 <HAL_I2C_GetError>
 80011b0:	2804      	cmp	r0, #4
 80011b2:	d00a      	beq.n	80011ca <__io_accelerometer_i2cWriteRegister+0x86>
		((i2c_process_status == ERROR) && (i2c_current_retx <= N_ERROR_RETX)));
 80011b4:	f89d 3013 	ldrb.w	r3, [sp, #19]
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d103      	bne.n	80011c4 <__io_accelerometer_i2cWriteRegister+0x80>
		((i2c_process_status == ERROR) && (i2c_current_retx <= N_ERROR_RETX)));
 80011bc:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d9cd      	bls.n	8001160 <__io_accelerometer_i2cWriteRegister+0x1c>

}
 80011c4:	b007      	add	sp, #28
 80011c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 80011ca:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80011ce:	4543      	cmp	r3, r8
 80011d0:	d9c6      	bls.n	8001160 <__io_accelerometer_i2cWriteRegister+0x1c>
 80011d2:	e7ef      	b.n	80011b4 <__io_accelerometer_i2cWriteRegister+0x70>
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 80011d4:	4620      	mov	r0, r4
 80011d6:	f005 f83f 	bl	8006258 <HAL_I2C_GetState>
 80011da:	2820      	cmp	r0, #32
 80011dc:	d0df      	beq.n	800119e <__io_accelerometer_i2cWriteRegister+0x5a>
			printf("I2C Bus still busy\n");
 80011de:	4648      	mov	r0, r9
 80011e0:	f00a fc8e 	bl	800bb00 <puts>
			Error_Handler();
 80011e4:	f001 feaa 	bl	8002f3c <Error_Handler>
 80011e8:	e7d9      	b.n	800119e <__io_accelerometer_i2cWriteRegister+0x5a>
			Error_Handler();
 80011ea:	f001 fea7 	bl	8002f3c <Error_Handler>
 80011ee:	e7c4      	b.n	800117a <__io_accelerometer_i2cWriteRegister+0x36>
 80011f0:	20009aa4 	.word	0x20009aa4
 80011f4:	0800cc68 	.word	0x0800cc68

080011f8 <__io_accelerometer_i2cReadRegister>:
 * @brief Reads data from the ADXL343's internal register
 * @param      cRegAddress: Address of internal register to read from (8-bit internal address)
 *        nRetransmissions: Number of retransmissions to perform if a NACK occurs at each try
 */
uint8_t __io_accelerometer_i2cReadRegister(uint8_t cRegAddress, uint8_t nRetransmissions)
{
 80011f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011fc:	b087      	sub	sp, #28
	uint8_t pRxBuff[1] = {0x00};
 80011fe:	2500      	movs	r5, #0
	do
	{
		i2c_process_status = SUCCESS;

		/* i2c single byte read operation */
		if(HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pRxBuff, 1, i2cTimeout) != HAL_OK)
 8001200:	4c2a      	ldr	r4, [pc, #168]	; (80012ac <__io_accelerometer_i2cReadRegister+0xb4>)
		}

		/* If I2C is BUSY even after 16000 CPU cycles */
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
		{
			printf("I2C Bus still busy\n");
 8001202:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80012b0 <__io_accelerometer_i2cReadRegister+0xb8>
	uint8_t pRxBuff[1] = {0x00};
 8001206:	f88d 5010 	strb.w	r5, [sp, #16]
	volatile uint8_t i2c_current_retx = 0;
 800120a:	4606      	mov	r6, r0
{
 800120c:	4688      	mov	r8, r1
	volatile uint8_t i2c_current_retx = 0;
 800120e:	f88d 5012 	strb.w	r5, [sp, #18]
 8001212:	af04      	add	r7, sp, #16
		if(HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pRxBuff, 1, i2cTimeout) != HAL_OK)
 8001214:	2232      	movs	r2, #50	; 0x32
 8001216:	2301      	movs	r3, #1
 8001218:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800121c:	9700      	str	r7, [sp, #0]
 800121e:	4632      	mov	r2, r6
 8001220:	21a6      	movs	r1, #166	; 0xa6
 8001222:	4620      	mov	r0, r4
		i2c_process_status = SUCCESS;
 8001224:	f88d 5013 	strb.w	r5, [sp, #19]
		if(HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, cRegAddress, cRegisterSize, (uint8_t*)pRxBuff, 1, i2cTimeout) != HAL_OK)
 8001228:	f004 f826 	bl	8005278 <HAL_I2C_Mem_Read>
 800122c:	2800      	cmp	r0, #0
 800122e:	d139      	bne.n	80012a4 <__io_accelerometer_i2cReadRegister+0xac>
		volatile uint32_t errorhandler_counter = 0;
 8001230:	9505      	str	r5, [sp, #20]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 15999))
 8001232:	e006      	b.n	8001242 <__io_accelerometer_i2cReadRegister+0x4a>
 8001234:	9b05      	ldr	r3, [sp, #20]
 8001236:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800123a:	d207      	bcs.n	800124c <__io_accelerometer_i2cReadRegister+0x54>
			errorhandler_counter++;
 800123c:	9b05      	ldr	r3, [sp, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	9305      	str	r3, [sp, #20]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 15999))
 8001242:	4620      	mov	r0, r4
 8001244:	f005 f808 	bl	8006258 <HAL_I2C_GetState>
 8001248:	2820      	cmp	r0, #32
 800124a:	d1f3      	bne.n	8001234 <__io_accelerometer_i2cReadRegister+0x3c>
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 800124c:	9b05      	ldr	r3, [sp, #20]
 800124e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001252:	d21c      	bcs.n	800128e <__io_accelerometer_i2cReadRegister+0x96>
			Error_Handler();
		}

		/* Counter to ensure repeating transaction only happens up to nRetransmissions */
		i2c_current_retx++;
 8001254:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8001258:	3301      	adds	r3, #1
 800125a:	b2db      	uxtb	r3, r3

		/* When Acknowledge failure occurs (Slave did not acknowledge it's address)
       Master restarts communication up to nRetransmissions */
	}
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 800125c:	4620      	mov	r0, r4
		i2c_current_retx++;
 800125e:	f88d 3012 	strb.w	r3, [sp, #18]
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 8001262:	f004 fffd 	bl	8006260 <HAL_I2C_GetError>
 8001266:	2804      	cmp	r0, #4
 8001268:	d00c      	beq.n	8001284 <__io_accelerometer_i2cReadRegister+0x8c>
		((i2c_process_status == ERROR) && (i2c_current_retx <= N_ERROR_RETX)));
 800126a:	f89d 3013 	ldrb.w	r3, [sp, #19]
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 800126e:	2b01      	cmp	r3, #1
 8001270:	d103      	bne.n	800127a <__io_accelerometer_i2cReadRegister+0x82>
		((i2c_process_status == ERROR) && (i2c_current_retx <= N_ERROR_RETX)));
 8001272:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8001276:	2b05      	cmp	r3, #5
 8001278:	d9cc      	bls.n	8001214 <__io_accelerometer_i2cReadRegister+0x1c>

	/* Return 8-bit value read from internal register */
	return pRxBuff[0];

}
 800127a:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800127e:	b007      	add	sp, #28
 8001280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) && (i2c_current_retx <= nRetransmissions)) ||\
 8001284:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8001288:	4543      	cmp	r3, r8
 800128a:	d9c3      	bls.n	8001214 <__io_accelerometer_i2cReadRegister+0x1c>
 800128c:	e7ed      	b.n	800126a <__io_accelerometer_i2cReadRegister+0x72>
		if((errorhandler_counter >= 16000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 800128e:	4620      	mov	r0, r4
 8001290:	f004 ffe2 	bl	8006258 <HAL_I2C_GetState>
 8001294:	2820      	cmp	r0, #32
 8001296:	d0dd      	beq.n	8001254 <__io_accelerometer_i2cReadRegister+0x5c>
			printf("I2C Bus still busy\n");
 8001298:	4648      	mov	r0, r9
 800129a:	f00a fc31 	bl	800bb00 <puts>
			Error_Handler();
 800129e:	f001 fe4d 	bl	8002f3c <Error_Handler>
 80012a2:	e7d7      	b.n	8001254 <__io_accelerometer_i2cReadRegister+0x5c>
			Error_Handler();
 80012a4:	f001 fe4a 	bl	8002f3c <Error_Handler>
 80012a8:	e7c2      	b.n	8001230 <__io_accelerometer_i2cReadRegister+0x38>
 80012aa:	bf00      	nop
 80012ac:	20009aa4 	.word	0x20009aa4
 80012b0:	0800cc68 	.word	0x0800cc68

080012b4 <__ADXL_READMULTIBYTE_FIFO>:
 * @brief 	Reads data from the ADXL343's internal register
 * @param   Pointer to variables that will hold raw 16-bit acceleration values
 * @note	To be used with reading Accelerometer FIFO/Data Registers
 */
void __ADXL_READMULTIBYTE_FIFO(uint16_t *DataX, uint16_t *DataY, uint16_t *DataZ)
{
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	b087      	sub	sp, #28
	uint8_t pRxBuff[6] = {0x00};		/* Store received bytes in this array/buffer */
	HAL_StatusTypeDef l_status;			/* Used to check if HAL operations were successful or not */
	uint8_t RxLen = 6;					/* Number of bytes to be received in I2C operation */

	/* Perform I2C Memory Read operation. 0x32 represents address of DATAX0 register. */
	HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, ((uint8_t)0x32), cRegisterSize, (uint8_t*)pRxBuff, RxLen, i2cTimeout);
 80012b8:	2332      	movs	r3, #50	; 0x32
 80012ba:	f04f 0c06 	mov.w	ip, #6
 80012be:	ac04      	add	r4, sp, #16
 80012c0:	e9cd 4c00 	strd	r4, ip, [sp]
 80012c4:	9302      	str	r3, [sp, #8]
{
 80012c6:	2400      	movs	r4, #0
 80012c8:	4607      	mov	r7, r0
 80012ca:	460e      	mov	r6, r1
	HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, ((uint8_t)0x32), cRegisterSize, (uint8_t*)pRxBuff, RxLen, i2cTimeout);
 80012cc:	4818      	ldr	r0, [pc, #96]	; (8001330 <__ADXL_READMULTIBYTE_FIFO+0x7c>)
	uint8_t pRxBuff[6] = {0x00};		/* Store received bytes in this array/buffer */
 80012ce:	9404      	str	r4, [sp, #16]
{
 80012d0:	4615      	mov	r5, r2
	HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, ((uint8_t)0x32), cRegisterSize, (uint8_t*)pRxBuff, RxLen, i2cTimeout);
 80012d2:	21a6      	movs	r1, #166	; 0xa6
 80012d4:	461a      	mov	r2, r3
 80012d6:	2301      	movs	r3, #1
	uint8_t pRxBuff[6] = {0x00};		/* Store received bytes in this array/buffer */
 80012d8:	f8ad 4014 	strh.w	r4, [sp, #20]
	HAL_I2C_Mem_Read(&hi2c1, ACCELEROMETER_ADDRESS, ((uint8_t)0x32), cRegisterSize, (uint8_t*)pRxBuff, RxLen, i2cTimeout);
 80012dc:	f003 ffcc 	bl	8005278 <HAL_I2C_Mem_Read>

	/* Ensure HAL terminated/executed successfully */
	assert_param(l_status == HAL_OK);

	/* Wait until I2C bus is ready, and check if an ACK was received or not afterwards */
	while(HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80012e0:	4c13      	ldr	r4, [pc, #76]	; (8001330 <__ADXL_READMULTIBYTE_FIFO+0x7c>)
 80012e2:	4620      	mov	r0, r4
 80012e4:	f004 ffb8 	bl	8006258 <HAL_I2C_GetState>
 80012e8:	2820      	cmp	r0, #32
 80012ea:	d1fa      	bne.n	80012e2 <__ADXL_READMULTIBYTE_FIFO+0x2e>
	assert_param(HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF);
 80012ec:	4810      	ldr	r0, [pc, #64]	; (8001330 <__ADXL_READMULTIBYTE_FIFO+0x7c>)
 80012ee:	f004 ffb7 	bl	8006260 <HAL_I2C_GetError>
 80012f2:	2804      	cmp	r0, #4
 80012f4:	d016      	beq.n	8001324 <__ADXL_READMULTIBYTE_FIFO+0x70>

	/* Assign passed input arguments the raw acceleration values for each axes */
	*DataX = (((uint16_t)pRxBuff[1] << 8) | pRxBuff[0]);
	*DataY = (((uint16_t)pRxBuff[3] << 8) | pRxBuff[2]);
 80012f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80012fa:	f89d 2012 	ldrb.w	r2, [sp, #18]
	*DataX = (((uint16_t)pRxBuff[1] << 8) | pRxBuff[0]);
 80012fe:	f89d 4011 	ldrb.w	r4, [sp, #17]
 8001302:	f89d 1010 	ldrb.w	r1, [sp, #16]
	*DataZ = (((uint16_t)pRxBuff[5] << 8) | pRxBuff[4]);
 8001306:	f89d 0015 	ldrb.w	r0, [sp, #21]
	*DataY = (((uint16_t)pRxBuff[3] << 8) | pRxBuff[2]);
 800130a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	*DataZ = (((uint16_t)pRxBuff[5] << 8) | pRxBuff[4]);
 800130e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	*DataX = (((uint16_t)pRxBuff[1] << 8) | pRxBuff[0]);
 8001312:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
	*DataZ = (((uint16_t)pRxBuff[5] << 8) | pRxBuff[4]);
 8001316:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	*DataX = (((uint16_t)pRxBuff[1] << 8) | pRxBuff[0]);
 800131a:	8039      	strh	r1, [r7, #0]
	*DataY = (((uint16_t)pRxBuff[3] << 8) | pRxBuff[2]);
 800131c:	8032      	strh	r2, [r6, #0]
	*DataZ = (((uint16_t)pRxBuff[5] << 8) | pRxBuff[4]);
 800131e:	802b      	strh	r3, [r5, #0]
}
 8001320:	b007      	add	sp, #28
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}
	assert_param(HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF);
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <__ADXL_READMULTIBYTE_FIFO+0x80>)
 8001326:	f44f 7188 	mov.w	r1, #272	; 0x110
 800132a:	f001 fe09 	bl	8002f40 <assert_failed>
 800132e:	e7e2      	b.n	80012f6 <__ADXL_READMULTIBYTE_FIFO+0x42>
 8001330:	20009aa4 	.word	0x20009aa4
 8001334:	0800cc7c 	.word	0x0800cc7c

08001338 <__RESET_ADXL343_REGISTERS>:

/**
 * @brief Resets all the ADXL343 registers to reset values
 *        Check page 21 of the datasheet for its reset values
 */
void __RESET_ADXL343_REGISTERS(void){
 8001338:	b530      	push	{r4, r5, lr}
	{
		i2c_process_status = SUCCESS;

		/* Perform multiple byte write to reset all the registers */
		HAL_StatusTypeDef l_status;
		l_status = HAL_I2C_Master_Transmit(&hi2c1, ACCELEROMETER_ADDRESS, (uint8_t*)ResetValues, cTotalAccelerometerRegisters + 1, i2cTimeout);
 800133a:	4c1d      	ldr	r4, [pc, #116]	; (80013b0 <__RESET_ADXL343_REGISTERS+0x78>)
void __RESET_ADXL343_REGISTERS(void){
 800133c:	b085      	sub	sp, #20

		/* Will be used for a ~3.5ms counter */
		volatile uint32_t errorhandler_counter = 0;

		/* Wait for i2c bus to become available */
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 55999))
 800133e:	f64d 25bf 	movw	r5, #55999	; 0xdabf
		l_status = HAL_I2C_Master_Transmit(&hi2c1, ACCELEROMETER_ADDRESS, (uint8_t*)ResetValues, cTotalAccelerometerRegisters + 1, i2cTimeout);
 8001342:	2332      	movs	r3, #50	; 0x32
		i2c_process_status = SUCCESS;
 8001344:	2100      	movs	r1, #0
		l_status = HAL_I2C_Master_Transmit(&hi2c1, ACCELEROMETER_ADDRESS, (uint8_t*)ResetValues, cTotalAccelerometerRegisters + 1, i2cTimeout);
 8001346:	9300      	str	r3, [sp, #0]
		i2c_process_status = SUCCESS;
 8001348:	f88d 100b 	strb.w	r1, [sp, #11]
		l_status = HAL_I2C_Master_Transmit(&hi2c1, ACCELEROMETER_ADDRESS, (uint8_t*)ResetValues, cTotalAccelerometerRegisters + 1, i2cTimeout);
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <__RESET_ADXL343_REGISTERS+0x7c>)
 800134e:	231e      	movs	r3, #30
 8001350:	21a6      	movs	r1, #166	; 0xa6
 8001352:	4620      	mov	r0, r4
 8001354:	f003 fd4a 	bl	8004dec <HAL_I2C_Master_Transmit>
		if(l_status != HAL_OK)
 8001358:	bb30      	cbnz	r0, 80013a8 <__RESET_ADXL343_REGISTERS+0x70>
		volatile uint32_t errorhandler_counter = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	9303      	str	r3, [sp, #12]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 55999))
 800135e:	e005      	b.n	800136c <__RESET_ADXL343_REGISTERS+0x34>
 8001360:	9b03      	ldr	r3, [sp, #12]
 8001362:	42ab      	cmp	r3, r5
 8001364:	d807      	bhi.n	8001376 <__RESET_ADXL343_REGISTERS+0x3e>
		{
			errorhandler_counter++;
 8001366:	9b03      	ldr	r3, [sp, #12]
 8001368:	3301      	adds	r3, #1
 800136a:	9303      	str	r3, [sp, #12]
		while((HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) && (errorhandler_counter <= 55999))
 800136c:	4620      	mov	r0, r4
 800136e:	f004 ff73 	bl	8006258 <HAL_I2C_GetState>
 8001372:	2820      	cmp	r0, #32
 8001374:	d1f4      	bne.n	8001360 <__RESET_ADXL343_REGISTERS+0x28>
		}

		/* If I2C bus is still BUSY after 56000 CPU cycles */
		if((errorhandler_counter >= 56000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 8001376:	9b03      	ldr	r3, [sp, #12]
 8001378:	42ab      	cmp	r3, r5
 800137a:	d80a      	bhi.n	8001392 <__RESET_ADXL343_REGISTERS+0x5a>
			Error_Handler();
		}

		/* Repeat transmission until an ACK signal is received */
	}
	while((HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)||(i2c_process_status == ERROR));
 800137c:	4620      	mov	r0, r4
 800137e:	f004 ff6f 	bl	8006260 <HAL_I2C_GetError>
 8001382:	2804      	cmp	r0, #4
 8001384:	d0dd      	beq.n	8001342 <__RESET_ADXL343_REGISTERS+0xa>
 8001386:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d0d9      	beq.n	8001342 <__RESET_ADXL343_REGISTERS+0xa>

}
 800138e:	b005      	add	sp, #20
 8001390:	bd30      	pop	{r4, r5, pc}
		if((errorhandler_counter >= 56000) && (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY))
 8001392:	4620      	mov	r0, r4
 8001394:	f004 ff60 	bl	8006258 <HAL_I2C_GetState>
 8001398:	2820      	cmp	r0, #32
 800139a:	d0ef      	beq.n	800137c <__RESET_ADXL343_REGISTERS+0x44>
			printf("I2C Bus still busy\n");
 800139c:	4806      	ldr	r0, [pc, #24]	; (80013b8 <__RESET_ADXL343_REGISTERS+0x80>)
 800139e:	f00a fbaf 	bl	800bb00 <puts>
			Error_Handler();
 80013a2:	f001 fdcb 	bl	8002f3c <Error_Handler>
 80013a6:	e7e9      	b.n	800137c <__RESET_ADXL343_REGISTERS+0x44>
			Error_Handler();
 80013a8:	f001 fdc8 	bl	8002f3c <Error_Handler>
 80013ac:	e7d5      	b.n	800135a <__RESET_ADXL343_REGISTERS+0x22>
 80013ae:	bf00      	nop
 80013b0:	20009aa4 	.word	0x20009aa4
 80013b4:	0800cca4 	.word	0x0800cca4
 80013b8:	0800cc68 	.word	0x0800cc68

080013bc <Motor_Init>:
 * @note
 */
void Motor_Init(void)
{
	/* Initialize hardware layer (motor shield driver) */
	__MOTOR_HWInit();
 80013bc:	f000 b954 	b.w	8001668 <__MOTOR_HWInit>

080013c0 <Car_ConfigDirection>:
	{
		__MOTOR_ConfigureAllWheelSpeed(SPEED_CAR_SLOW_PERCENTAGE);
	}
#endif

	switch(CarDirection)
 80013c0:	2804      	cmp	r0, #4
 80013c2:	f200 808e 	bhi.w	80014e2 <Car_ConfigDirection+0x122>
 80013c6:	e8df f000 	tbb	[pc, r0]
 80013ca:	3317      	.short	0x3317
 80013cc:	684f      	.short	0x684f
 80013ce:	03          	.byte	0x03
 80013cf:	00          	.byte	0x00
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 80013d0:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <Car_ConfigDirection+0x128>)
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 80013d8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 80013e0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 80013e8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 80013f0:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 80013f2:	7818      	ldrb	r0, [r3, #0]
 80013f4:	f000 b964 	b.w	80016c0 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 80013f8:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <Car_ConfigDirection+0x128>)
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8001400:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8001408:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN4_BITMASK;
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	f042 0208 	orr.w	r2, r2, #8
 8001410:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	f002 027d 	and.w	r2, r2, #125	; 0x7d
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN1_BITMASK;
 8001418:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8001420:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT4_SELECTION_IN3_BITMASK;
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	f042 0201 	orr.w	r2, r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 800142a:	7818      	ldrb	r0, [r3, #0]
 800142c:	f000 b948 	b.w	80016c0 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <Car_ConfigDirection+0x128>)
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8001438:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN1_BITMASK;
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	f042 0220 	orr.w	r2, r2, #32
 8001440:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8001448:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001450:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN1_BITMASK;
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001458:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 800145a:	781a      	ldrb	r2, [r3, #0]
 800145c:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8001460:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8001462:	7818      	ldrb	r0, [r3, #0]
 8001464:	f000 b92c 	b.w	80016c0 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <Car_ConfigDirection+0x128>)
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8001470:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN1_BITMASK;
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	f042 0220 	orr.w	r2, r2, #32
 8001478:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 800147a:	781a      	ldrb	r2, [r3, #0]
 800147c:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8001480:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN4_BITMASK;
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	f042 0208 	orr.w	r2, r2, #8
 8001488:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001490:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN1_BITMASK;
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001498:	e7be      	b.n	8001418 <Car_ConfigDirection+0x58>
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <Car_ConfigDirection+0x128>)
 800149c:	781a      	ldrb	r2, [r3, #0]
 800149e:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 80014a2:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN2_BITMASK;
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	f042 0210 	orr.w	r2, r2, #16
 80014aa:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 80014b2:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN3_BITMASK;
 80014b4:	781a      	ldrb	r2, [r3, #0]
 80014b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ba:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 80014c2:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN2_BITMASK;
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	f042 0202 	orr.w	r2, r2, #2
 80014ca:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 80014d2:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT4_SELECTION_IN4_BITMASK;
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	f042 0204 	orr.w	r2, r2, #4
 80014da:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 80014dc:	7818      	ldrb	r0, [r3, #0]
 80014de:	f000 b8ef 	b.w	80016c0 <__MOTOR_SetShiftRegister>
 80014e2:	4b01      	ldr	r3, [pc, #4]	; (80014e8 <Car_ConfigDirection+0x128>)
 80014e4:	e785      	b.n	80013f2 <Car_ConfigDirection+0x32>
 80014e6:	bf00      	nop
 80014e8:	200000c0 	.word	0x200000c0

080014ec <__TEST_MOTOR_AlternateWheel>:
/**
 * @brief	Test code to check each wheel configuration and sequence
 */
void __TEST_MOTOR_AlternateWheel(uint32_t Counter)
{
	switch(Counter % 9)
 80014ec:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <__TEST_MOTOR_AlternateWheel+0x174>)
 80014ee:	fba3 2300 	umull	r2, r3, r3, r0
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80014f8:	1ac0      	subs	r0, r0, r3
 80014fa:	3801      	subs	r0, #1
 80014fc:	2807      	cmp	r0, #7
 80014fe:	f200 80a5 	bhi.w	800164c <__TEST_MOTOR_AlternateWheel+0x160>
 8001502:	e8df f000 	tbb	[pc, r0]
 8001506:	341c      	.short	0x341c
 8001508:	7e715941 	.word	0x7e715941
 800150c:	048b      	.short	0x048b
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 800150e:	4b55      	ldr	r3, [pc, #340]	; (8001664 <__TEST_MOTOR_AlternateWheel+0x178>)
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001516:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 800151e:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8001520:	781a      	ldrb	r2, [r3, #0]
 8001522:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8001526:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 800152e:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN3_BITMASK;
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001536:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8001538:	7818      	ldrb	r0, [r3, #0]
 800153a:	f000 b8c1 	b.w	80016c0 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <__TEST_MOTOR_AlternateWheel+0x178>)
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001546:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN1_BITMASK;
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800154e:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
					g_ShiftRegisterByteToSet |= MOT4_SELECTION_IN4_BITMASK;
 8001556:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 800155e:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8001566:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8001568:	7818      	ldrb	r0, [r3, #0]
 800156a:	f000 b8a9 	b.w	80016c0 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <__TEST_MOTOR_AlternateWheel+0x178>)
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001576:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 800157e:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT4_SELECTION_IN3_BITMASK;
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	e7e6      	b.n	8001556 <__TEST_MOTOR_AlternateWheel+0x6a>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <__TEST_MOTOR_AlternateWheel+0x178>)
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001590:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8001598:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 80015a0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN1_BITMASK;
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	f042 0220 	orr.w	r2, r2, #32
 80015a8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 80015b0:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 80015b2:	7818      	ldrb	r0, [r3, #0]
 80015b4:	f000 b884 	b.w	80016c0 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <__TEST_MOTOR_AlternateWheel+0x178>)
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 80015c0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 80015c8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 80015d0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 80015d8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN4_BITMASK;
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	f042 0208 	orr.w	r2, r2, #8
 80015e0:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 80015e2:	7818      	ldrb	r0, [r3, #0]
 80015e4:	f000 b86c 	b.w	80016c0 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <__TEST_MOTOR_AlternateWheel+0x178>)
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 80015f0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT3_SELECTION_IN2_BITMASK;
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	f042 0202 	orr.w	r2, r2, #2
 80015f8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 80015fa:	781a      	ldrb	r2, [r3, #0]
 80015fc:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8001600:	e7a9      	b.n	8001556 <__TEST_MOTOR_AlternateWheel+0x6a>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <__TEST_MOTOR_AlternateWheel+0x178>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 800160a:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 800160c:	781a      	ldrb	r2, [r3, #0]
 800160e:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 8001612:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT4_SELECTION_IN4_BITMASK;
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	f042 0204 	orr.w	r2, r2, #4
 800161a:	e79c      	b.n	8001556 <__TEST_MOTOR_AlternateWheel+0x6a>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <__TEST_MOTOR_AlternateWheel+0x178>)
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001624:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 800162c:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 8001634:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN2_BITMASK;
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	f042 0210 	orr.w	r2, r2, #16
 800163c:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8001644:	701a      	strb	r2, [r3, #0]
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 8001646:	7818      	ldrb	r0, [r3, #0]
 8001648:	f000 b83a 	b.w	80016c0 <__MOTOR_SetShiftRegister>
					g_ShiftRegisterByteToSet &= ~MOT3_SELECTION_BITMASK;
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <__TEST_MOTOR_AlternateWheel+0x178>)
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	f002 027d 	and.w	r2, r2, #125	; 0x7d
 8001654:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet &= ~MOT4_SELECTION_BITMASK;
 8001656:	781a      	ldrb	r2, [r3, #0]
 8001658:	f002 02fa 	and.w	r2, r2, #250	; 0xfa
 800165c:	e77b      	b.n	8001556 <__TEST_MOTOR_AlternateWheel+0x6a>
 800165e:	bf00      	nop
 8001660:	38e38e39 	.word	0x38e38e39
 8001664:	200000c0 	.word	0x200000c0

08001668 <__MOTOR_HWInit>:
/**
 * @brief	Initialize motor driver and shift register
 * @note
 */
void __MOTOR_HWInit(void)
{
 8001668:	b538      	push	{r3, r4, r5, lr}
 * @brief	Enables the shift register by setting DIR_EN to LOW
 */
static void __MOTOR_EnableShiftRegister(void)
{
	/* The input pin is negated, and by default, the Shift Register is disabled */
	HAL_GPIO_WritePin(DIR_EN_GPIO_Port, DIR_EN_Pin, GPIO_PIN_RESET);
 800166a:	4810      	ldr	r0, [pc, #64]	; (80016ac <__MOTOR_HWInit+0x44>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800166c:	4d10      	ldr	r5, [pc, #64]	; (80016b0 <__MOTOR_HWInit+0x48>)
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800166e:	4c11      	ldr	r4, [pc, #68]	; (80016b4 <__MOTOR_HWInit+0x4c>)
	HAL_GPIO_WritePin(DIR_EN_GPIO_Port, DIR_EN_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2120      	movs	r1, #32
 8001674:	f003 f80a 	bl	800468c <HAL_GPIO_WritePin>
		CCRvalue = Percentage * 10;

	/* Configure all relevant CCR registers with the same duty cycle value */
	TIM3->CCR1 = CCRvalue;
	TIM3->CCR2 = CCRvalue;
	TIM1->CCR2 = CCRvalue;
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <__MOTOR_HWInit+0x50>)
	TIM3->CCR1 = CCRvalue;
 800167a:	4910      	ldr	r1, [pc, #64]	; (80016bc <__MOTOR_HWInit+0x54>)
 800167c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001680:	634b      	str	r3, [r1, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001682:	4628      	mov	r0, r5
	TIM3->CCR2 = CCRvalue;
 8001684:	638b      	str	r3, [r1, #56]	; 0x38
	TIM1->CCR2 = CCRvalue;
 8001686:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001688:	2104      	movs	r1, #4
	TIM1->CCR3 = CCRvalue;
 800168a:	63d3      	str	r3, [r2, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800168c:	f005 ff86 	bl	800759c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001690:	4628      	mov	r0, r5
 8001692:	2108      	movs	r1, #8
 8001694:	f005 ff82 	bl	800759c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001698:	4620      	mov	r0, r4
 800169a:	2100      	movs	r1, #0
 800169c:	f005 ff7e 	bl	800759c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016a0:	4620      	mov	r0, r4
 80016a2:	2104      	movs	r1, #4
}
 80016a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016a8:	f005 bf78 	b.w	800759c <HAL_TIM_PWM_Start>
 80016ac:	40020400 	.word	0x40020400
 80016b0:	20009bfc 	.word	0x20009bfc
 80016b4:	20009bb4 	.word	0x20009bb4
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40000400 	.word	0x40000400

080016c0 <__MOTOR_SetShiftRegister>:
{
 80016c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	g_RecentShiftRegisterByte = cByte;
 80016c4:	4b63      	ldr	r3, [pc, #396]	; (8001854 <__MOTOR_SetShiftRegister+0x194>)
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_SET);
 80016c6:	4f64      	ldr	r7, [pc, #400]	; (8001858 <__MOTOR_SetShiftRegister+0x198>)
		HAL_GPIO_WritePin(DIR_SER_GPIO_Port, DIR_SER_Pin, GPIO_PIN_SET);
 80016c8:	f8df 8190 	ldr.w	r8, [pc, #400]	; 800185c <__MOTOR_SetShiftRegister+0x19c>
	g_RecentShiftRegisterByte = cByte;
 80016cc:	7018      	strb	r0, [r3, #0]
{
 80016ce:	b084      	sub	sp, #16
 80016d0:	4605      	mov	r5, r0
	g_RecentShiftRegisterByte = cByte;
 80016d2:	2408      	movs	r4, #8
	for(volatile uint8_t i=0; i<0x7F; i++);
 80016d4:	2600      	movs	r6, #0
		if(temp & 0x1)
 80016d6:	f015 0301 	ands.w	r3, r5, #1
 80016da:	f000 808e 	beq.w	80017fa <__MOTOR_SetShiftRegister+0x13a>
		HAL_GPIO_WritePin(DIR_SER_GPIO_Port, DIR_SER_Pin, GPIO_PIN_SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e4:	4640      	mov	r0, r8
 80016e6:	f002 ffd1 	bl	800468c <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x3F; i++);
 80016ea:	f88d 600a 	strb.w	r6, [sp, #10]
 80016ee:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80016f2:	2b3e      	cmp	r3, #62	; 0x3e
 80016f4:	d809      	bhi.n	800170a <__MOTOR_SetShiftRegister+0x4a>
 80016f6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f88d 300a 	strb.w	r3, [sp, #10]
 8001702:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001706:	2b3e      	cmp	r3, #62	; 0x3e
 8001708:	d9f5      	bls.n	80016f6 <__MOTOR_SetShiftRegister+0x36>
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	4611      	mov	r1, r2
 800170e:	4638      	mov	r0, r7
 8001710:	f002 ffbc 	bl	800468c <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x7F; i++);
 8001714:	f88d 600b 	strb.w	r6, [sp, #11]
 8001718:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800171c:	2b7e      	cmp	r3, #126	; 0x7e
 800171e:	d809      	bhi.n	8001734 <__MOTOR_SetShiftRegister+0x74>
 8001720:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001724:	3301      	adds	r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f88d 300b 	strb.w	r3, [sp, #11]
 800172c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001730:	2b7e      	cmp	r3, #126	; 0x7e
 8001732:	d9f5      	bls.n	8001720 <__MOTOR_SetShiftRegister+0x60>
		HAL_GPIO_WritePin(DIR_SER_GPIO_Port, DIR_SER_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173a:	4640      	mov	r0, r8
 800173c:	f002 ffa6 	bl	800468c <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x3F; i++);
 8001740:	f88d 600c 	strb.w	r6, [sp, #12]
 8001744:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001748:	2b3e      	cmp	r3, #62	; 0x3e
 800174a:	d809      	bhi.n	8001760 <__MOTOR_SetShiftRegister+0xa0>
 800174c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001750:	3301      	adds	r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f88d 300c 	strb.w	r3, [sp, #12]
 8001758:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800175c:	2b3e      	cmp	r3, #62	; 0x3e
 800175e:	d9f5      	bls.n	800174c <__MOTOR_SetShiftRegister+0x8c>
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2101      	movs	r1, #1
 8001764:	4638      	mov	r0, r7
 8001766:	f002 ff91 	bl	800468c <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x3F; i++);
 800176a:	f88d 6007 	strb.w	r6, [sp, #7]
 800176e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001772:	2b3e      	cmp	r3, #62	; 0x3e
		temp = temp >> 1;
 8001774:	ea4f 0555 	mov.w	r5, r5, lsr #1
	for(volatile uint8_t i=0; i<0x3F; i++);
 8001778:	d809      	bhi.n	800178e <__MOTOR_SetShiftRegister+0xce>
 800177a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800177e:	3301      	adds	r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f88d 3007 	strb.w	r3, [sp, #7]
 8001786:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800178a:	2b3e      	cmp	r3, #62	; 0x3e
 800178c:	d9f5      	bls.n	800177a <__MOTOR_SetShiftRegister+0xba>
	for(uint8_t i=0; i<8; i++)
 800178e:	3c01      	subs	r4, #1
 8001790:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001794:	d19f      	bne.n	80016d6 <__MOTOR_SetShiftRegister+0x16>
	HAL_GPIO_WritePin(DIR_LATCH_GPIO_Port, DIR_LATCH_Pin, GPIO_PIN_SET);
 8001796:	4831      	ldr	r0, [pc, #196]	; (800185c <__MOTOR_SetShiftRegister+0x19c>)
 8001798:	2201      	movs	r2, #1
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	f002 ff76 	bl	800468c <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0xFF; i++);
 80017a0:	f88d 4009 	strb.w	r4, [sp, #9]
 80017a4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80017a8:	2bff      	cmp	r3, #255	; 0xff
 80017aa:	d009      	beq.n	80017c0 <__MOTOR_SetShiftRegister+0x100>
 80017ac:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f88d 3009 	strb.w	r3, [sp, #9]
 80017b8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80017bc:	2bff      	cmp	r3, #255	; 0xff
 80017be:	d1f5      	bne.n	80017ac <__MOTOR_SetShiftRegister+0xec>
	HAL_GPIO_WritePin(DIR_LATCH_GPIO_Port, DIR_LATCH_Pin, GPIO_PIN_RESET);
 80017c0:	4826      	ldr	r0, [pc, #152]	; (800185c <__MOTOR_SetShiftRegister+0x19c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	2140      	movs	r1, #64	; 0x40
 80017c6:	f002 ff61 	bl	800468c <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0xFF; i++);
 80017ca:	2300      	movs	r3, #0
 80017cc:	f88d 3008 	strb.w	r3, [sp, #8]
 80017d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80017d4:	2bff      	cmp	r3, #255	; 0xff
 80017d6:	d009      	beq.n	80017ec <__MOTOR_SetShiftRegister+0x12c>
 80017d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f88d 3008 	strb.w	r3, [sp, #8]
 80017e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80017e8:	2bff      	cmp	r3, #255	; 0xff
 80017ea:	d1f5      	bne.n	80017d8 <__MOTOR_SetShiftRegister+0x118>
}
 80017ec:	b004      	add	sp, #16
 80017ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for(volatile uint8_t i=0; i<0x3F; i++);
 80017f2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80017f6:	3301      	adds	r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f88d 300d 	strb.w	r3, [sp, #13]
 80017fe:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001802:	2b3e      	cmp	r3, #62	; 0x3e
 8001804:	d9f5      	bls.n	80017f2 <__MOTOR_SetShiftRegister+0x132>
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	4611      	mov	r1, r2
 800180a:	4638      	mov	r0, r7
 800180c:	f002 ff3e 	bl	800468c <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x7F; i++);
 8001810:	f88d 600e 	strb.w	r6, [sp, #14]
 8001814:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001818:	2b7e      	cmp	r3, #126	; 0x7e
 800181a:	d809      	bhi.n	8001830 <__MOTOR_SetShiftRegister+0x170>
 800181c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001820:	3301      	adds	r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f88d 300e 	strb.w	r3, [sp, #14]
 8001828:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800182c:	2b7e      	cmp	r3, #126	; 0x7e
 800182e:	d9f5      	bls.n	800181c <__MOTOR_SetShiftRegister+0x15c>
	for(volatile uint8_t i=0; i<0x3F; i++);
 8001830:	f88d 600f 	strb.w	r6, [sp, #15]
 8001834:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001838:	2b3e      	cmp	r3, #62	; 0x3e
 800183a:	d891      	bhi.n	8001760 <__MOTOR_SetShiftRegister+0xa0>
 800183c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001840:	3301      	adds	r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f88d 300f 	strb.w	r3, [sp, #15]
 8001848:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800184c:	2b3e      	cmp	r3, #62	; 0x3e
 800184e:	d9f5      	bls.n	800183c <__MOTOR_SetShiftRegister+0x17c>
 8001850:	e786      	b.n	8001760 <__MOTOR_SetShiftRegister+0xa0>
 8001852:	bf00      	nop
 8001854:	200000c1 	.word	0x200000c1
 8001858:	40020800 	.word	0x40020800
 800185c:	40020400 	.word	0x40020400

08001860 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8001860:	b530      	push	{r4, r5, lr}
 8001862:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HCI_TL_SPI_Init+0x70>)

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001866:	481b      	ldr	r0, [pc, #108]	; (80018d4 <HCI_TL_SPI_Init+0x74>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	2100      	movs	r1, #0
 800186a:	9101      	str	r1, [sp, #4]
 800186c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	9104      	str	r1, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HCI_TL_SPI_Init+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001880:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001882:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001884:	2201      	movs	r2, #1
 8001886:	e9cd 2302 	strd	r2, r3, [sp, #8]

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800188a:	2400      	movs	r4, #0
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800188c:	f002 fce6 	bl	800425c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001890:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001892:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001898:	2301      	movs	r3, #1
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800189a:	480e      	ldr	r0, [pc, #56]	; (80018d4 <HCI_TL_SPI_Init+0x74>)
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800189c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80018a4:	f002 fcda 	bl	800425c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80018a8:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80018aa:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80018ac:	2202      	movs	r2, #2
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80018ae:	4809      	ldr	r0, [pc, #36]	; (80018d4 <HCI_TL_SPI_Init+0x74>)
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80018b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80018b8:	f002 fcd0 	bl	800425c <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2102      	movs	r1, #2
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <HCI_TL_SPI_Init+0x74>)
 80018c2:	f002 fee3 	bl	800468c <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 80018c6:	f001 f8bd 	bl	8002a44 <BSP_SPI1_Init>
}
 80018ca:	b009      	add	sp, #36	; 0x24
 80018cc:	bd30      	pop	{r4, r5, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	10110000 	.word	0x10110000

080018dc <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80018dc:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <HCI_TL_SPI_DeInit+0x20>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	f002 fe0b 	bl	80044fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <HCI_TL_SPI_DeInit+0x20>)
 80018e8:	2102      	movs	r1, #2
 80018ea:	f002 fe07 	bl	80044fc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80018ee:	4803      	ldr	r0, [pc, #12]	; (80018fc <HCI_TL_SPI_DeInit+0x20>)
 80018f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f4:	f002 fe02 	bl	80044fc <HAL_GPIO_DeInit>
  return 0;
}
 80018f8:	2000      	movs	r0, #0
 80018fa:	bd08      	pop	{r3, pc}
 80018fc:	40020000 	.word	0x40020000

08001900 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001900:	b510      	push	{r4, lr}
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001902:	4c0d      	ldr	r4, [pc, #52]	; (8001938 <HCI_TL_SPI_Reset+0x38>)
 8001904:	2201      	movs	r2, #1
 8001906:	4620      	mov	r0, r4
 8001908:	2102      	movs	r1, #2
 800190a:	f002 febf 	bl	800468c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800190e:	4620      	mov	r0, r4
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001916:	f002 feb9 	bl	800468c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800191a:	2005      	movs	r0, #5
 800191c:	f001 ff08 	bl	8003730 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001920:	4620      	mov	r0, r4
 8001922:	2201      	movs	r2, #1
 8001924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001928:	f002 feb0 	bl	800468c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800192c:	2005      	movs	r0, #5
 800192e:	f001 feff 	bl	8003730 <HAL_Delay>
  return 0;
}
 8001932:	2000      	movs	r0, #0
 8001934:	bd10      	pop	{r4, pc}
 8001936:	bf00      	nop
 8001938:	40020000 	.word	0x40020000

0800193c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800193c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_00 = 0x00;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <HCI_TL_SPI_Receive+0x80>)
{
 8001940:	4606      	mov	r6, r0
 8001942:	460f      	mov	r7, r1
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001944:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8001948:	b087      	sub	sp, #28
  uint8_t char_00 = 0x00;
 800194a:	2400      	movs	r4, #0
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800194c:	9002      	str	r0, [sp, #8]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800194e:	2006      	movs	r0, #6
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001950:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t char_00 = 0x00;
 8001954:	f88d 4006 	strb.w	r4, [sp, #6]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001958:	f002 f9be 	bl	8003cd8 <HAL_NVIC_DisableIRQ>
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800195c:	4818      	ldr	r0, [pc, #96]	; (80019c0 <HCI_TL_SPI_Receive+0x84>)
 800195e:	4622      	mov	r2, r4
 8001960:	2102      	movs	r1, #2
 8001962:	f002 fe93 	bl	800468c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001966:	2205      	movs	r2, #5
 8001968:	a904      	add	r1, sp, #16
 800196a:	a802      	add	r0, sp, #8
 800196c:	f001 f834 	bl	80029d8 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8001970:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001974:	f89d 3013 	ldrb.w	r3, [sp, #19]

  if(byte_count > 0)
 8001978:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 800197c:	d013      	beq.n	80019a6 <HCI_TL_SPI_Receive+0x6a>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 800197e:	42bd      	cmp	r5, r7
 8001980:	bf28      	it	cs
 8001982:	463d      	movcs	r5, r7
    {
      byte_count = size;
    }

    for(len = 0; len < byte_count; len++)
 8001984:	b17d      	cbz	r5, 80019a6 <HCI_TL_SPI_Receive+0x6a>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8001986:	2201      	movs	r2, #1
 8001988:	f10d 0107 	add.w	r1, sp, #7
 800198c:	f10d 0006 	add.w	r0, sp, #6
 8001990:	f001 f822 	bl	80029d8 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8001994:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001998:	5532      	strb	r2, [r6, r4]
    for(len = 0; len < byte_count; len++)
 800199a:	1c63      	adds	r3, r4, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4295      	cmp	r5, r2
 80019a0:	4614      	mov	r4, r2
 80019a2:	d8f0      	bhi.n	8001986 <HCI_TL_SPI_Receive+0x4a>
 80019a4:	4615      	mov	r5, r2
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2102      	movs	r1, #2
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <HCI_TL_SPI_Receive+0x84>)
 80019ac:	f002 fe6e 	bl	800468c <HAL_GPIO_WritePin>
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80019b0:	2006      	movs	r0, #6
 80019b2:	f002 f97d 	bl	8003cb0 <HAL_NVIC_EnableIRQ>

  HCI_TL_SPI_Enable_IRQ();

  return len;
}
 80019b6:	4628      	mov	r0, r5
 80019b8:	b007      	add	sp, #28
 80019ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019bc:	0800cc00 	.word	0x0800cc00
 80019c0:	40020000 	.word	0x40020000

080019c4 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80019c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80019c8:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <HCI_TL_SPI_Send+0xc4>)
    uint32_t tickstart_data_available = HAL_GetTick();

    result = 0;

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80019ca:	4e30      	ldr	r6, [pc, #192]	; (8001a8c <HCI_TL_SPI_Send+0xc8>)
{
 80019cc:	4681      	mov	r9, r0
 80019ce:	460f      	mov	r7, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80019d0:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 80019d4:	b085      	sub	sp, #20
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80019d6:	9000      	str	r0, [sp, #0]
 80019d8:	f88d 1004 	strb.w	r1, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f001 fea2 	bl	8003724 <HAL_GetTick>
 80019e0:	4680      	mov	r8, r0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80019e2:	2006      	movs	r0, #6
 80019e4:	f002 f978 	bl	8003cd8 <HAL_NVIC_DisableIRQ>
    uint32_t tickstart_data_available = HAL_GetTick();
 80019e8:	f001 fe9c 	bl	8003724 <HAL_GetTick>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
    uint32_t tickstart_data_available = HAL_GetTick();
 80019ee:	4605      	mov	r5, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80019f0:	2102      	movs	r1, #2
 80019f2:	4630      	mov	r0, r6
 80019f4:	f002 fe4a 	bl	800468c <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80019f8:	e004      	b.n	8001a04 <HCI_TL_SPI_Send+0x40>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80019fa:	f001 fe93 	bl	8003724 <HAL_GetTick>
 80019fe:	1b40      	subs	r0, r0, r5
 8001a00:	280f      	cmp	r0, #15
 8001a02:	d83a      	bhi.n	8001a7a <HCI_TL_SPI_Send+0xb6>
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001a04:	4821      	ldr	r0, [pc, #132]	; (8001a8c <HCI_TL_SPI_Send+0xc8>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	f002 fe2e 	bl	8004668 <HAL_GPIO_ReadPin>
    while(!IsDataAvailable())
 8001a0c:	2801      	cmp	r0, #1
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001a0e:	4604      	mov	r4, r0
    while(!IsDataAvailable())
 8001a10:	d1f3      	bne.n	80019fa <HCI_TL_SPI_Send+0x36>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001a12:	2205      	movs	r2, #5
 8001a14:	a902      	add	r1, sp, #8
 8001a16:	4668      	mov	r0, sp
 8001a18:	f000 ffde 	bl	80029d8 <BSP_SPI1_SendRecv>
    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8001a1c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001a20:	f89d 3009 	ldrb.w	r3, [sp, #9]
    if(rx_bytes >= size)
 8001a24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a28:	42bb      	cmp	r3, r7
 8001a2a:	d213      	bcs.n	8001a54 <HCI_TL_SPI_Send+0x90>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4630      	mov	r0, r6
 8001a32:	f002 fe2b 	bl	800468c <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001a36:	f001 fe75 	bl	8003724 <HAL_GetTick>
 8001a3a:	eba0 0008 	sub.w	r0, r0, r8
 8001a3e:	280f      	cmp	r0, #15
 8001a40:	d9d2      	bls.n	80019e8 <HCI_TL_SPI_Send+0x24>
      break;
 8001a42:	f06f 0402 	mvn.w	r4, #2
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8001a46:	2006      	movs	r0, #6
 8001a48:	f002 f932 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
}
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	b005      	add	sp, #20
 8001a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <HCI_TL_SPI_Send+0xcc>)
 8001a56:	463a      	mov	r2, r7
 8001a58:	4648      	mov	r0, r9
 8001a5a:	f000 ffbd 	bl	80029d8 <BSP_SPI1_SendRecv>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a5e:	4622      	mov	r2, r4
 8001a60:	480a      	ldr	r0, [pc, #40]	; (8001a8c <HCI_TL_SPI_Send+0xc8>)
 8001a62:	2102      	movs	r1, #2
 8001a64:	f002 fe12 	bl	800468c <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001a68:	f001 fe5c 	bl	8003724 <HAL_GetTick>
 8001a6c:	eba0 0008 	sub.w	r0, r0, r8
 8001a70:	280f      	cmp	r0, #15
 8001a72:	bf98      	it	ls
 8001a74:	2400      	movls	r4, #0
 8001a76:	d9e6      	bls.n	8001a46 <HCI_TL_SPI_Send+0x82>
 8001a78:	e7e3      	b.n	8001a42 <HCI_TL_SPI_Send+0x7e>
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001a7a:	4804      	ldr	r0, [pc, #16]	; (8001a8c <HCI_TL_SPI_Send+0xc8>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2102      	movs	r1, #2
 8001a80:	f002 fe04 	bl	800468c <HAL_GPIO_WritePin>
 8001a84:	e7dd      	b.n	8001a42 <HCI_TL_SPI_Send+0x7e>
 8001a86:	bf00      	nop
 8001a88:	0800cc08 	.word	0x0800cc08
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	200000c4 	.word	0x200000c4

08001a94 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001a94:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001a96:	4c07      	ldr	r4, [pc, #28]	; (8001ab4 <hci_tl_lowlevel_isr+0x20>)
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001a98:	e002      	b.n	8001aa0 <hci_tl_lowlevel_isr+0xc>
  {
    if (hci_notify_asynch_evt(NULL))
 8001a9a:	f007 fb93 	bl	80091c4 <hci_notify_asynch_evt>
 8001a9e:	b940      	cbnz	r0, 8001ab2 <hci_tl_lowlevel_isr+0x1e>
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f002 fde0 	bl	8004668 <HAL_GPIO_ReadPin>
 8001aa8:	4603      	mov	r3, r0
  while(IsDataAvailable())
 8001aaa:	2b01      	cmp	r3, #1
    if (hci_notify_asynch_evt(NULL))
 8001aac:	f04f 0000 	mov.w	r0, #0
  while(IsDataAvailable())
 8001ab0:	d0f3      	beq.n	8001a9a <hci_tl_lowlevel_isr+0x6>
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001ab2:	bd10      	pop	{r4, pc}
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <hci_tl_lowlevel_init>:
{
 8001ab8:	b530      	push	{r4, r5, lr}
 8001aba:	b089      	sub	sp, #36	; 0x24
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001abc:	4c11      	ldr	r4, [pc, #68]	; (8001b04 <hci_tl_lowlevel_init+0x4c>)
  fops.Receive = HCI_TL_SPI_Receive;
 8001abe:	4912      	ldr	r1, [pc, #72]	; (8001b08 <hci_tl_lowlevel_init+0x50>)
  fops.Init    = HCI_TL_SPI_Init;
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <hci_tl_lowlevel_init+0x54>)
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001ac2:	4813      	ldr	r0, [pc, #76]	; (8001b10 <hci_tl_lowlevel_init+0x58>)
  fops.Send    = HCI_TL_SPI_Send;
 8001ac4:	4d13      	ldr	r5, [pc, #76]	; (8001b14 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <hci_tl_lowlevel_init+0x60>)
  fops.Init    = HCI_TL_SPI_Init;
 8001ac8:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001aca:	9002      	str	r0, [sp, #8]
  fops.GetTick = BSP_GetTick;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <hci_tl_lowlevel_init+0x64>)
 8001ace:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8001ad0:	a801      	add	r0, sp, #4
  fops.Reset   = HCI_TL_SPI_Reset;
 8001ad2:	9203      	str	r2, [sp, #12]
  fops.Receive = HCI_TL_SPI_Receive;
 8001ad4:	e9cd 1504 	strd	r1, r5, [sp, #16]
  hci_register_io_bus (&fops);
 8001ad8:	f007 fa5a 	bl	8008f90 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8001adc:	4620      	mov	r0, r4
 8001ade:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8001ae2:	f002 fb83 	bl	80041ec <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <hci_tl_lowlevel_init+0x68>)
 8001ae8:	4620      	mov	r0, r4
 8001aea:	2100      	movs	r1, #0
 8001aec:	f002 fb78 	bl	80041e0 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2105      	movs	r1, #5
 8001af4:	2006      	movs	r0, #6
 8001af6:	f002 f891 	bl	8003c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001afa:	2006      	movs	r0, #6
 8001afc:	f002 f8d8 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
}
 8001b00:	b009      	add	sp, #36	; 0x24
 8001b02:	bd30      	pop	{r4, r5, pc}
 8001b04:	200098f8 	.word	0x200098f8
 8001b08:	0800193d 	.word	0x0800193d
 8001b0c:	08001861 	.word	0x08001861
 8001b10:	080018dd 	.word	0x080018dd
 8001b14:	080019c5 	.word	0x080019c5
 8001b18:	08001901 	.word	0x08001901
 8001b1c:	08002a05 	.word	0x08002a05
 8001b20:	08001a95 	.word	0x08001a95

08001b24 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b24:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b26:	4818      	ldr	r0, [pc, #96]	; (8001b88 <MX_ADC1_Init+0x64>)
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_ADC1_Init+0x68>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b2a:	4919      	ldr	r1, [pc, #100]	; (8001b90 <MX_ADC1_Init+0x6c>)
  hadc1.Instance = ADC1;
 8001b2c:	6003      	str	r3, [r0, #0]
{
 8001b2e:	b084      	sub	sp, #16
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b34:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b36:	6042      	str	r2, [r0, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8001b38:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b3a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b3e:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b40:	6083      	str	r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b42:	9300      	str	r3, [sp, #0]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b44:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b46:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b48:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b4c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b4e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b50:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b54:	9303      	str	r3, [sp, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b56:	61c2      	str	r2, [r0, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b58:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b5a:	f001 fdfb 	bl	8003754 <HAL_ADC_Init>
 8001b5e:	b960      	cbnz	r0, 8001b7a <MX_ADC1_Init+0x56>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b60:	2202      	movs	r2, #2
 8001b62:	2301      	movs	r3, #1
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b64:	2400      	movs	r4, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <MX_ADC1_Init+0x64>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b68:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6a:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_2;
 8001b6c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b70:	f001 ff4c 	bl	8003a0c <HAL_ADC_ConfigChannel>
 8001b74:	b920      	cbnz	r0, 8001b80 <MX_ADC1_Init+0x5c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b76:	b004      	add	sp, #16
 8001b78:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001b7a:	f001 f9df 	bl	8002f3c <Error_Handler>
 8001b7e:	e7ef      	b.n	8001b60 <MX_ADC1_Init+0x3c>
    Error_Handler();
 8001b80:	f001 f9dc 	bl	8002f3c <Error_Handler>
}
 8001b84:	b004      	add	sp, #16
 8001b86:	bd10      	pop	{r4, pc}
 8001b88:	20009900 	.word	0x20009900
 8001b8c:	40012000 	.word	0x40012000
 8001b90:	0f000001 	.word	0x0f000001

08001b94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b94:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8001b96:	6802      	ldr	r2, [r0, #0]
 8001b98:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <HAL_ADC_MspInit+0x98>)
{
 8001b9a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8001b9e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001ba4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001ba8:	9406      	str	r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 8001baa:	d001      	beq.n	8001bb0 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001bac:	b008      	add	sp, #32
 8001bae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bb0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001bb4:	9400      	str	r4, [sp, #0]
 8001bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8001bb8:	4e1d      	ldr	r6, [pc, #116]	; (8001c30 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
 8001bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bc2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	9401      	str	r4, [sp, #4]
 8001bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bde:	2204      	movs	r2, #4
 8001be0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	a902      	add	r1, sp, #8
 8001be4:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	4812      	ldr	r0, [pc, #72]	; (8001c34 <HAL_ADC_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bea:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f002 fb35 	bl	800425c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001bf2:	4811      	ldr	r0, [pc, #68]	; (8001c38 <HAL_ADC_MspInit+0xa4>)
 8001bf4:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c02:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c04:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c08:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c0c:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c10:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c12:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c14:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c16:	f002 f879 	bl	8003d0c <HAL_DMA_Init>
 8001c1a:	b918      	cbnz	r0, 8001c24 <HAL_ADC_MspInit+0x90>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001c1c:	63ae      	str	r6, [r5, #56]	; 0x38
 8001c1e:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8001c20:	b008      	add	sp, #32
 8001c22:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001c24:	f001 f98a 	bl	8002f3c <Error_Handler>
 8001c28:	e7f8      	b.n	8001c1c <HAL_ADC_MspInit+0x88>
 8001c2a:	bf00      	nop
 8001c2c:	40012000 	.word	0x40012000
 8001c30:	20009948 	.word	0x20009948
 8001c34:	40020000 	.word	0x40020000
 8001c38:	40026410 	.word	0x40026410

08001c3c <APP_UserEvtRx>:
{
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;

  if(hci_pckt->type == HCI_EVENT_PKT)
 8001c3c:	7803      	ldrb	r3, [r0, #0]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d000      	beq.n	8001c44 <APP_UserEvtRx+0x8>
 8001c42:	4770      	bx	lr
{
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8001c46:	7843      	ldrb	r3, [r0, #1]
 8001c48:	2b3e      	cmp	r3, #62	; 0x3e
{
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	4605      	mov	r5, r0
    if(event_pckt->evt == EVT_LE_META_EVENT)
 8001c4e:	d042      	beq.n	8001cd6 <APP_UserEvtRx+0x9a>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
        }
      }
    }
    else if(event_pckt->evt == EVT_VENDOR)
 8001c50:	2bff      	cmp	r3, #255	; 0xff
 8001c52:	d02f      	beq.n	8001cb4 <APP_UserEvtRx+0x78>
    }
    else
    {
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
      {
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001c54:	4c48      	ldr	r4, [pc, #288]	; (8001d78 <APP_UserEvtRx+0x13c>)
 8001c56:	8822      	ldrh	r2, [r4, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d103      	bne.n	8001c64 <APP_UserEvtRx+0x28>
        {
          hci_events_table[i].process((void *)event_pckt->data);
 8001c5c:	6863      	ldr	r3, [r4, #4]
 8001c5e:	3003      	adds	r0, #3
 8001c60:	4798      	blx	r3
 8001c62:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001c64:	8922      	ldrh	r2, [r4, #8]
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d103      	bne.n	8001c72 <APP_UserEvtRx+0x36>
          hci_events_table[i].process((void *)event_pckt->data);
 8001c6a:	68e3      	ldr	r3, [r4, #12]
 8001c6c:	1ce8      	adds	r0, r5, #3
 8001c6e:	4798      	blx	r3
 8001c70:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001c72:	8a22      	ldrh	r2, [r4, #16]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d103      	bne.n	8001c80 <APP_UserEvtRx+0x44>
          hci_events_table[i].process((void *)event_pckt->data);
 8001c78:	6963      	ldr	r3, [r4, #20]
 8001c7a:	1ce8      	adds	r0, r5, #3
 8001c7c:	4798      	blx	r3
 8001c7e:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001c80:	8b22      	ldrh	r2, [r4, #24]
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d103      	bne.n	8001c8e <APP_UserEvtRx+0x52>
          hci_events_table[i].process((void *)event_pckt->data);
 8001c86:	69e3      	ldr	r3, [r4, #28]
 8001c88:	1ce8      	adds	r0, r5, #3
 8001c8a:	4798      	blx	r3
 8001c8c:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001c8e:	8c22      	ldrh	r2, [r4, #32]
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d103      	bne.n	8001c9c <APP_UserEvtRx+0x60>
          hci_events_table[i].process((void *)event_pckt->data);
 8001c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c96:	1ce8      	adds	r0, r5, #3
 8001c98:	4798      	blx	r3
 8001c9a:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001c9c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d103      	bne.n	8001caa <APP_UserEvtRx+0x6e>
          hci_events_table[i].process((void *)event_pckt->data);
 8001ca2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ca4:	1ce8      	adds	r0, r5, #3
 8001ca6:	4798      	blx	r3
 8001ca8:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8001caa:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d05c      	beq.n	8001d6a <APP_UserEvtRx+0x12e>
        }
      }
    }
  }
}
 8001cb0:	b003      	add	sp, #12
 8001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb4:	4c31      	ldr	r4, [pc, #196]	; (8001d7c <APP_UserEvtRx+0x140>)
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001cb6:	1d47      	adds	r7, r0, #5
 8001cb8:	f504 76ac 	add.w	r6, r4, #344	; 0x158
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8001cbc:	f8b5 2003 	ldrh.w	r2, [r5, #3]
 8001cc0:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d102      	bne.n	8001cce <APP_UserEvtRx+0x92>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	4638      	mov	r0, r7
 8001ccc:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8001cce:	3408      	adds	r4, #8
 8001cd0:	42b4      	cmp	r4, r6
 8001cd2:	d1f3      	bne.n	8001cbc <APP_UserEvtRx+0x80>
 8001cd4:	e7ec      	b.n	8001cb0 <APP_UserEvtRx+0x74>
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001cd6:	4c2a      	ldr	r4, [pc, #168]	; (8001d80 <APP_UserEvtRx+0x144>)
 8001cd8:	78c3      	ldrb	r3, [r0, #3]
 8001cda:	8822      	ldrh	r2, [r4, #0]
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d103      	bne.n	8001ce8 <APP_UserEvtRx+0xac>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001ce0:	6863      	ldr	r3, [r4, #4]
 8001ce2:	3004      	adds	r0, #4
 8001ce4:	4798      	blx	r3
 8001ce6:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001ce8:	8922      	ldrh	r2, [r4, #8]
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d103      	bne.n	8001cf6 <APP_UserEvtRx+0xba>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001cee:	68e3      	ldr	r3, [r4, #12]
 8001cf0:	1d28      	adds	r0, r5, #4
 8001cf2:	4798      	blx	r3
 8001cf4:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001cf6:	8a22      	ldrh	r2, [r4, #16]
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d103      	bne.n	8001d04 <APP_UserEvtRx+0xc8>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001cfc:	6963      	ldr	r3, [r4, #20]
 8001cfe:	1d28      	adds	r0, r5, #4
 8001d00:	4798      	blx	r3
 8001d02:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001d04:	8b22      	ldrh	r2, [r4, #24]
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d103      	bne.n	8001d12 <APP_UserEvtRx+0xd6>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001d0a:	69e3      	ldr	r3, [r4, #28]
 8001d0c:	1d28      	adds	r0, r5, #4
 8001d0e:	4798      	blx	r3
 8001d10:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001d12:	8c22      	ldrh	r2, [r4, #32]
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d103      	bne.n	8001d20 <APP_UserEvtRx+0xe4>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d1a:	1d28      	adds	r0, r5, #4
 8001d1c:	4798      	blx	r3
 8001d1e:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001d20:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d103      	bne.n	8001d2e <APP_UserEvtRx+0xf2>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001d26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d28:	1d28      	adds	r0, r5, #4
 8001d2a:	4798      	blx	r3
 8001d2c:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001d2e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d103      	bne.n	8001d3c <APP_UserEvtRx+0x100>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001d34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d36:	1d28      	adds	r0, r5, #4
 8001d38:	4798      	blx	r3
 8001d3a:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001d3c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d103      	bne.n	8001d4a <APP_UserEvtRx+0x10e>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001d42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d44:	1d28      	adds	r0, r5, #4
 8001d46:	4798      	blx	r3
 8001d48:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001d4a:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d103      	bne.n	8001d5a <APP_UserEvtRx+0x11e>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001d52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d54:	1d28      	adds	r0, r5, #4
 8001d56:	4798      	blx	r3
 8001d58:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8001d5a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d1a6      	bne.n	8001cb0 <APP_UserEvtRx+0x74>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8001d62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	1d28      	adds	r0, r5, #4
 8001d68:	e002      	b.n	8001d70 <APP_UserEvtRx+0x134>
          hci_events_table[i].process((void *)event_pckt->data);
 8001d6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	1ce8      	adds	r0, r5, #3
}
 8001d70:	b003      	add	sp, #12
 8001d72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hci_events_table[i].process((void *)event_pckt->data);
 8001d76:	4718      	bx	r3
 8001d78:	0800d1ec 	.word	0x0800d1ec
 8001d7c:	0800d278 	.word	0x0800d278
 8001d80:	0800d224 	.word	0x0800d224

08001d84 <BlueNRG_Init>:
{
 8001d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hci_init(APP_UserEvtRx, NULL);
 8001d88:	2100      	movs	r1, #0
{
 8001d8a:	b0b7      	sub	sp, #220	; 0xdc
	hci_init(APP_UserEvtRx, NULL);
 8001d8c:	48d2      	ldr	r0, [pc, #840]	; (80020d8 <BlueNRG_Init+0x354>)
 8001d8e:	f007 f8d3 	bl	8008f38 <hci_init>
	hci_reset();
 8001d92:	f006 fdfb 	bl	800898c <hci_reset>
	HAL_Delay(2000);
 8001d96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d9a:	f001 fcc9 	bl	8003730 <HAL_Delay>
	ret = aci_hal_set_tx_power_level(1, 4);
 8001d9e:	2104      	movs	r1, #4
 8001da0:	2001      	movs	r0, #1
 8001da2:	f007 f8a7 	bl	8008ef4 <aci_hal_set_tx_power_level>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8001da6:	2800      	cmp	r0, #0
 8001da8:	f040 81ec 	bne.w	8002184 <BlueNRG_Init+0x400>
	uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8001dac:	4bcb      	ldr	r3, [pc, #812]	; (80020dc <BlueNRG_Init+0x358>)
 8001dae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001db2:	902e      	str	r0, [sp, #184]	; 0xb8
	ret = hci_le_rand(random_number);
 8001db4:	a832      	add	r0, sp, #200	; 0xc8
	uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8001db6:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
	ret = hci_le_rand(random_number);
 8001dba:	f006 fe3b 	bl	8008a34 <hci_le_rand>
		discovery_time += (2*random_number[i]);
 8001dbe:	f89d 10c8 	ldrb.w	r1, [sp, #200]	; 0xc8
 8001dc2:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8001dc6:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8001dca:	f89d 00cb 	ldrb.w	r0, [sp, #203]	; 0xcb
	bdaddr[0] = (uint8_t) (random_number[0]);
 8001dce:	f88d 10b8 	strb.w	r1, [sp, #184]	; 0xb8
		discovery_time += (2*random_number[i]);
 8001dd2:	440a      	add	r2, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f89d 10cc 	ldrb.w	r1, [sp, #204]	; 0xcc
 8001dda:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
	bdaddr[1] = (uint8_t) (random_number[3]);
 8001dde:	f88d 00b9 	strb.w	r0, [sp, #185]	; 0xb9
		discovery_time += (2*random_number[i]);
 8001de2:	4403      	add	r3, r0
 8001de4:	4419      	add	r1, r3
 8001de6:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
 8001dea:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
	bdaddr[2] = (uint8_t) (random_number[6]);
 8001dee:	f88d 00ba 	strb.w	r0, [sp, #186]	; 0xba
		discovery_time += (2*random_number[i]);
 8001df2:	440a      	add	r2, r1
 8001df4:	4402      	add	r2, r0
 8001df6:	4413      	add	r3, r2
 8001df8:	48b9      	ldr	r0, [pc, #740]	; (80020e0 <BlueNRG_Init+0x35c>)
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8001e00:	ac2e      	add	r4, sp, #184	; 0xb8
 8001e02:	8003      	strh	r3, [r0, #0]
 8001e04:	4622      	mov	r2, r4
 8001e06:	2106      	movs	r1, #6
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f007 f849 	bl	8008ea0 <aci_hal_write_config_data>
	ret = aci_gatt_init();
 8001e0e:	f006 fec1 	bl	8008b94 <aci_gatt_init>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8001e12:	2800      	cmp	r0, #0
 8001e14:	f040 81bb 	bne.w	800218e <BlueNRG_Init+0x40a>
	aci_gap_init(GAP_PERIPHERAL_ROLE, GAP_PRIVACY_DISABLED, 0x17, &hGAPService, &hDevNameChar, &hAppearanceChar);
 8001e18:	4ab2      	ldr	r2, [pc, #712]	; (80020e4 <BlueNRG_Init+0x360>)
 8001e1a:	4bb3      	ldr	r3, [pc, #716]	; (80020e8 <BlueNRG_Init+0x364>)
	const uint8_t char1_uuid[16] =
 8001e1c:	4db3      	ldr	r5, [pc, #716]	; (80020ec <BlueNRG_Init+0x368>)
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8001e1e:	4fb4      	ldr	r7, [pc, #720]	; (80020f0 <BlueNRG_Init+0x36c>)
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8001e20:	f8df b300 	ldr.w	fp, [pc, #768]	; 8002124 <BlueNRG_Init+0x3a0>
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8001e24:	f8df a300 	ldr.w	sl, [pc, #768]	; 8002128 <BlueNRG_Init+0x3a4>
	BLUENRG_memcpy(&char_obj_4.Char_UUID_128, char4_uuid, 16);
 8001e28:	f8df 9300 	ldr.w	r9, [pc, #768]	; 800212c <BlueNRG_Init+0x3a8>
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8001e2c:	f8df 8300 	ldr.w	r8, [pc, #768]	; 8002130 <BlueNRG_Init+0x3ac>
	aci_gap_init(GAP_PERIPHERAL_ROLE, GAP_PRIVACY_DISABLED, 0x17, &hGAPService, &hDevNameChar, &hAppearanceChar);
 8001e30:	e9cd 3200 	strd	r3, r2, [sp]
 8001e34:	2100      	movs	r1, #0
 8001e36:	4baf      	ldr	r3, [pc, #700]	; (80020f4 <BlueNRG_Init+0x370>)
 8001e38:	2217      	movs	r2, #23
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f006 fe74 	bl	8008b28 <aci_gap_init>
	const uint8_t service_uuid[16] =
 8001e40:	4bad      	ldr	r3, [pc, #692]	; (80020f8 <BlueNRG_Init+0x374>)
 8001e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e44:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8001e48:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	const uint8_t char1_uuid[16] =
 8001e4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
	const uint8_t char2_uuid[16] =
 8001e50:	f105 0e10 	add.w	lr, r5, #16
	const uint8_t char1_uuid[16] =
 8001e54:	ae1e      	add	r6, sp, #120	; 0x78
 8001e56:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char2_uuid[16] =
 8001e5a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001e5e:	ae22      	add	r6, sp, #136	; 0x88
	const uint8_t char3_uuid[16] =
 8001e60:	f105 0e20 	add.w	lr, r5, #32
	const uint8_t char2_uuid[16] =
 8001e64:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char3_uuid[16] =
 8001e68:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001e6c:	ae26      	add	r6, sp, #152	; 0x98
	const uint8_t char4_uuid[16] =
 8001e6e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
	const uint8_t char3_uuid[16] =
 8001e72:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char4_uuid[16] =
 8001e76:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
	const uint8_t char5_uuid[16] =
 8001e7a:	f105 0e40 	add.w	lr, r5, #64	; 0x40
	const uint8_t char4_uuid[16] =
 8001e7e:	ad2a      	add	r5, sp, #168	; 0xa8
 8001e80:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	const uint8_t char5_uuid[16] =
 8001e84:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(&suuid_object.Service_UUID_128, service_uuid, 16);
 8001e8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001e90:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8002134 <BlueNRG_Init+0x3b0>
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8001e94:	9700      	str	r7, [sp, #0]
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8001e96:	ae1e      	add	r6, sp, #120	; 0x78
	BLUENRG_memcpy(&suuid_object.Service_UUID_128, service_uuid, 16);
 8001e98:	f8cc 0000 	str.w	r0, [ip]
 8001e9c:	f8cc 1004 	str.w	r1, [ip, #4]
 8001ea0:	f8cc 2008 	str.w	r2, [ip, #8]
 8001ea4:	f8cc 300c 	str.w	r3, [ip, #12]
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8001ea8:	4661      	mov	r1, ip
 8001eaa:	2314      	movs	r3, #20
 8001eac:	2201      	movs	r2, #1
 8001eae:	2002      	movs	r0, #2
 8001eb0:	f006 fe8c 	bl	8008bcc <aci_gatt_add_service>
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8001eb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001eb6:	f8df c280 	ldr.w	ip, [pc, #640]	; 8002138 <BlueNRG_Init+0x3b4>
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8001eba:	ae22      	add	r6, sp, #136	; 0x88
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8001ebc:	f8cc 0000 	str.w	r0, [ip]
 8001ec0:	f8cc 1004 	str.w	r1, [ip, #4]
 8001ec4:	f8cc 2008 	str.w	r2, [ip, #8]
 8001ec8:	f8cc 300c 	str.w	r3, [ip, #12]
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8001ecc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8001ece:	ae26      	add	r6, sp, #152	; 0x98
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8001ed0:	f8cb 0000 	str.w	r0, [fp]
 8001ed4:	f8cb 1004 	str.w	r1, [fp, #4]
 8001ed8:	f8cb 2008 	str.w	r2, [fp, #8]
 8001edc:	f8cb 300c 	str.w	r3, [fp, #12]
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8001ee0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ee2:	f8ca 0000 	str.w	r0, [sl]
 8001ee6:	f8ca 1004 	str.w	r1, [sl, #4]
 8001eea:	f8ca 2008 	str.w	r2, [sl, #8]
 8001eee:	f8ca 300c 	str.w	r3, [sl, #12]
	BLUENRG_memcpy(&char_obj_4.Char_UUID_128, char4_uuid, 16);
 8001ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef4:	f8c9 0000 	str.w	r0, [r9]
 8001ef8:	f8c9 1004 	str.w	r1, [r9, #4]
 8001efc:	f8c9 2008 	str.w	r2, [r9, #8]
 8001f00:	f8c9 300c 	str.w	r3, [r9, #12]
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8001f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f06:	f8c8 300c 	str.w	r3, [r8, #12]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8001f0a:	4b7c      	ldr	r3, [pc, #496]	; (80020fc <BlueNRG_Init+0x378>)
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8001f0c:	f8c8 0000 	str.w	r0, [r8]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8001f10:	2400      	movs	r4, #0
 8001f12:	2607      	movs	r6, #7
 8001f14:	2510      	movs	r5, #16
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8001f16:	f8c8 1004 	str.w	r1, [r8, #4]
 8001f1a:	f8c8 2008 	str.w	r2, [r8, #8]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8001f1e:	2102      	movs	r1, #2
 8001f20:	4662      	mov	r2, ip
 8001f22:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8001f26:	9500      	str	r5, [sp, #0]
 8001f28:	2304      	movs	r3, #4
 8001f2a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001f2e:	8838      	ldrh	r0, [r7, #0]
 8001f30:	9603      	str	r6, [sp, #12]
 8001f32:	f006 fe99 	bl	8008c68 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_2, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8001f36:	9500      	str	r5, [sp, #0]
 8001f38:	4d71      	ldr	r5, [pc, #452]	; (8002100 <BlueNRG_Init+0x37c>)
 8001f3a:	9505      	str	r5, [sp, #20]
 8001f3c:	465a      	mov	r2, fp
 8001f3e:	2102      	movs	r1, #2
 8001f40:	2304      	movs	r3, #4
 8001f42:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8001f46:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001f4a:	8838      	ldrh	r0, [r7, #0]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_3, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_READ,
 8001f4c:	468b      	mov	fp, r1
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_2, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8001f4e:	f006 fe8b 	bl	8008c68 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_3, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_READ,
 8001f52:	4b6c      	ldr	r3, [pc, #432]	; (8002104 <BlueNRG_Init+0x380>)
 8001f54:	9305      	str	r3, [sp, #20]
 8001f56:	4652      	mov	r2, sl
 8001f58:	4659      	mov	r1, fp
 8001f5a:	f8cd b000 	str.w	fp, [sp]
 8001f5e:	2304      	movs	r3, #4
 8001f60:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8001f64:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001f68:	8838      	ldrh	r0, [r7, #0]
 8001f6a:	f006 fe7d 	bl	8008c68 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_4, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP,
 8001f6e:	2501      	movs	r5, #1
 8001f70:	f04f 0c0c 	mov.w	ip, #12
 8001f74:	4b64      	ldr	r3, [pc, #400]	; (8002108 <BlueNRG_Init+0x384>)
 8001f76:	f8cd c000 	str.w	ip, [sp]
 8001f7a:	464a      	mov	r2, r9
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	9305      	str	r3, [sp, #20]
 8001f80:	8838      	ldrh	r0, [r7, #0]
 8001f82:	9404      	str	r4, [sp, #16]
 8001f84:	2304      	movs	r3, #4
 8001f86:	9603      	str	r6, [sp, #12]
 8001f88:	9401      	str	r4, [sp, #4]
 8001f8a:	9502      	str	r5, [sp, #8]
 8001f8c:	f006 fe6c 	bl	8008c68 <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_5, BLE_DATA_BYTES(6), CHAR_PROP_READ,
 8001f90:	4b5e      	ldr	r3, [pc, #376]	; (800210c <BlueNRG_Init+0x388>)
 8001f92:	f8cd b000 	str.w	fp, [sp]
 8001f96:	4642      	mov	r2, r8
 8001f98:	4659      	mov	r1, fp
 8001f9a:	9305      	str	r3, [sp, #20]
 8001f9c:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8001fa0:	2306      	movs	r3, #6
 8001fa2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001fa6:	8838      	ldrh	r0, [r7, #0]
	const char char2name[] = {'W','R','N','_','C','R','A','S','H'};
 8001fa8:	f8df 8190 	ldr.w	r8, [pc, #400]	; 800213c <BlueNRG_Init+0x3b8>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_5, BLE_DATA_BYTES(6), CHAR_PROP_READ,
 8001fac:	f006 fe5c 	bl	8008c68 <aci_gatt_add_char>
	const char char1name[] = {'W','R','N','_','S','P','E','E','D'};
 8001fb0:	4b57      	ldr	r3, [pc, #348]	; (8002110 <BlueNRG_Init+0x38c>)
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8001fb2:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8002140 <BlueNRG_Init+0x3bc>
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8001fb6:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8002144 <BlueNRG_Init+0x3c0>
	const char char1name[] = {'W','R','N','_','S','P','E','E','D'};
 8001fba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fbe:	ab0b      	add	r3, sp, #44	; 0x2c
 8001fc0:	c303      	stmia	r3!, {r0, r1}
 8001fc2:	701a      	strb	r2, [r3, #0]
	const char char2name[] = {'W','R','N','_','C','R','A','S','H'};
 8001fc4:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8001fc8:	ab0e      	add	r3, sp, #56	; 0x38
 8001fca:	c303      	stmia	r3!, {r0, r1}
 8001fcc:	701a      	strb	r2, [r3, #0]
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8001fce:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001fd2:	ab11      	add	r3, sp, #68	; 0x44
 8001fd4:	c303      	stmia	r3!, {r0, r1}
 8001fd6:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8001fda:	f823 2b02 	strh.w	r2, [r3], #2
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8001fde:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8001fe2:	f8df c164 	ldr.w	ip, [pc, #356]	; 8002148 <BlueNRG_Init+0x3c4>
	aci_gatt_add_char_desc(hService, hClientNotify_OverSpeed, UUID_TYPE_16, &DescriptorProperty,
 8001fe6:	f8df e164 	ldr.w	lr, [pc, #356]	; 800214c <BlueNRG_Init+0x3c8>
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8001fea:	f883 8000 	strb.w	r8, [r3]
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8001fee:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8001ff2:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8001ff6:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8001ffa:	f10d 095c 	add.w	r9, sp, #92	; 0x5c
	DescriptorProperty.Char_UUID_16 = CHAR_USER_DESC_UUID;
 8001ffe:	f642 1c01 	movw	ip, #10497	; 0x2901
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8002002:	e889 0007 	stmia.w	r9, {r0, r1, r2}
	DescriptorProperty.Char_UUID_16 = CHAR_USER_DESC_UUID;
 8002006:	f8ad c0c8 	strh.w	ip, [sp, #200]	; 0xc8
	aci_gatt_add_char_desc(hService, hClientNotify_OverSpeed, UUID_TYPE_16, &DescriptorProperty,
 800200a:	e9cd 4e07 	strd	r4, lr, [sp, #28]
 800200e:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8002012:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8002016:	4939      	ldr	r1, [pc, #228]	; (80020fc <BlueNRG_Init+0x378>)
 8002018:	8838      	ldrh	r0, [r7, #0]
 800201a:	8809      	ldrh	r1, [r1, #0]
 800201c:	f04f 081e 	mov.w	r8, #30
 8002020:	f04f 0b09 	mov.w	fp, #9
 8002024:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8002028:	ab0b      	add	r3, sp, #44	; 0x2c
 800202a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800202e:	462a      	mov	r2, r5
 8002030:	4663      	mov	r3, ip
 8002032:	f8cd 8000 	str.w	r8, [sp]
 8002036:	f006 fe7d 	bl	8008d34 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientNotify_Crash, UUID_TYPE_16, &DescriptorProperty,
 800203a:	e9cd 8b00 	strd	r8, fp, [sp]
 800203e:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8002042:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8002046:	492e      	ldr	r1, [pc, #184]	; (8002100 <BlueNRG_Init+0x37c>)
 8002048:	4a32      	ldr	r2, [pc, #200]	; (8002114 <BlueNRG_Init+0x390>)
 800204a:	9407      	str	r4, [sp, #28]
 800204c:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8002050:	ab0e      	add	r3, sp, #56	; 0x38
 8002052:	8809      	ldrh	r1, [r1, #0]
 8002054:	8838      	ldrh	r0, [r7, #0]
 8002056:	9208      	str	r2, [sp, #32]
 8002058:	9302      	str	r3, [sp, #8]
 800205a:	462a      	mov	r2, r5
 800205c:	4663      	mov	r3, ip
 800205e:	f006 fe69 	bl	8008d34 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientRead_Velocity, UUID_TYPE_16, &DescriptorProperty,
 8002062:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8002066:	e9cd 4503 	strd	r4, r5, [sp, #12]
 800206a:	4926      	ldr	r1, [pc, #152]	; (8002104 <BlueNRG_Init+0x380>)
 800206c:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <BlueNRG_Init+0x394>)
 800206e:	9407      	str	r4, [sp, #28]
 8002070:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8002074:	f04f 0b0b 	mov.w	fp, #11
 8002078:	ab11      	add	r3, sp, #68	; 0x44
 800207a:	f8cd 8000 	str.w	r8, [sp]
 800207e:	8809      	ldrh	r1, [r1, #0]
 8002080:	8838      	ldrh	r0, [r7, #0]
 8002082:	9208      	str	r2, [sp, #32]
 8002084:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002088:	462a      	mov	r2, r5
 800208a:	4663      	mov	r3, ip
 800208c:	f006 fe52 	bl	8008d34 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientWrite_Direction, UUID_TYPE_16, &DescriptorProperty,
 8002090:	e9cd 6406 	strd	r6, r4, [sp, #24]
 8002094:	491c      	ldr	r1, [pc, #112]	; (8002108 <BlueNRG_Init+0x384>)
 8002096:	4a21      	ldr	r2, [pc, #132]	; (800211c <BlueNRG_Init+0x398>)
 8002098:	f8cd a008 	str.w	sl, [sp, #8]
 800209c:	f04f 0c03 	mov.w	ip, #3
 80020a0:	230a      	movs	r3, #10
 80020a2:	9405      	str	r4, [sp, #20]
 80020a4:	9403      	str	r4, [sp, #12]
 80020a6:	f8cd 8000 	str.w	r8, [sp]
 80020aa:	8809      	ldrh	r1, [r1, #0]
 80020ac:	8838      	ldrh	r0, [r7, #0]
 80020ae:	9208      	str	r2, [sp, #32]
 80020b0:	f8cd c010 	str.w	ip, [sp, #16]
 80020b4:	462a      	mov	r2, r5
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	ab32      	add	r3, sp, #200	; 0xc8
 80020ba:	f006 fe3b 	bl	8008d34 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientRead_VerifyDirection, UUID_TYPE_16, &DescriptorProperty,
 80020be:	e9cd 6406 	strd	r6, r4, [sp, #24]
 80020c2:	e9cd 5404 	strd	r5, r4, [sp, #16]
 80020c6:	e9cd 9402 	strd	r9, r4, [sp, #8]
 80020ca:	e9cd 8b00 	strd	r8, fp, [sp]
 80020ce:	490f      	ldr	r1, [pc, #60]	; (800210c <BlueNRG_Init+0x388>)
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <BlueNRG_Init+0x39c>)
 80020d2:	8809      	ldrh	r1, [r1, #0]
 80020d4:	e03c      	b.n	8002150 <BlueNRG_Init+0x3cc>
 80020d6:	bf00      	nop
 80020d8:	08001c3d 	.word	0x08001c3d
 80020dc:	0800cc10 	.word	0x0800cc10
 80020e0:	200001c6 	.word	0x200001c6
 80020e4:	200001c8 	.word	0x200001c8
 80020e8:	200001d4 	.word	0x200001d4
 80020ec:	0800cc18 	.word	0x0800cc18
 80020f0:	200001e0 	.word	0x200001e0
 80020f4:	200001dc 	.word	0x200001dc
 80020f8:	0800cce0 	.word	0x0800cce0
 80020fc:	200001cc 	.word	0x200001cc
 8002100:	200001ca 	.word	0x200001ca
 8002104:	200001ce 	.word	0x200001ce
 8002108:	200001d2 	.word	0x200001d2
 800210c:	200001d0 	.word	0x200001d0
 8002110:	0800ccf4 	.word	0x0800ccf4
 8002114:	200001de 	.word	0x200001de
 8002118:	200001e2 	.word	0x200001e2
 800211c:	200001da 	.word	0x200001da
 8002120:	200001d6 	.word	0x200001d6
 8002124:	20009a0c 	.word	0x20009a0c
 8002128:	200099dc 	.word	0x200099dc
 800212c:	200099a8 	.word	0x200099a8
 8002130:	200099fc 	.word	0x200099fc
 8002134:	200099ec 	.word	0x200099ec
 8002138:	200099cc 	.word	0x200099cc
 800213c:	0800cd00 	.word	0x0800cd00
 8002140:	0800cd0c 	.word	0x0800cd0c
 8002144:	0800cd18 	.word	0x0800cd18
 8002148:	0800cd28 	.word	0x0800cd28
 800214c:	200001d8 	.word	0x200001d8
 8002150:	8838      	ldrh	r0, [r7, #0]
 8002152:	9308      	str	r3, [sp, #32]
 8002154:	462a      	mov	r2, r5
 8002156:	ab32      	add	r3, sp, #200	; 0xc8
 8002158:	f006 fdec 	bl	8008d34 <aci_gatt_add_char_desc>
	if(FunctionAlreadyCalled == SET)
 800215c:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <BlueNRG_Init+0x440>)
	Conn_Details.deviceRole = 0xFF;
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <BlueNRG_Init+0x444>)
	if(FunctionAlreadyCalled == SET)
 8002160:	7812      	ldrb	r2, [r2, #0]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 8002162:	741c      	strb	r4, [r3, #16]
	Conn_Details.connectionhandle = 0xFFFF;
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
	Conn_Details.deviceRole = 0xFF;
 8002168:	20ff      	movs	r0, #255	; 0xff
	if(FunctionAlreadyCalled == SET)
 800216a:	42aa      	cmp	r2, r5
	BLUENRG_memset(&Conn_Details.BLE_Client_Addr[0], 0, 6);
 800216c:	601c      	str	r4, [r3, #0]
 800216e:	809c      	strh	r4, [r3, #4]
	Conn_Details.deviceRole = 0xFF;
 8002170:	7198      	strb	r0, [r3, #6]
	Conn_Details.connectionhandle = 0xFFFF;
 8002172:	6099      	str	r1, [r3, #8]
 8002174:	60d9      	str	r1, [r3, #12]
	if(FunctionAlreadyCalled == SET)
 8002176:	d00f      	beq.n	8002198 <BlueNRG_Init+0x414>
	FunctionAlreadyCalled = SET;
 8002178:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <BlueNRG_Init+0x440>)
 800217a:	2301      	movs	r3, #1
 800217c:	7013      	strb	r3, [r2, #0]
}
 800217e:	b037      	add	sp, #220	; 0xdc
 8002180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	assert_param(ret == BLE_STATUS_SUCCESS);
 8002184:	4811      	ldr	r0, [pc, #68]	; (80021cc <BlueNRG_Init+0x448>)
 8002186:	216f      	movs	r1, #111	; 0x6f
 8002188:	f000 feda 	bl	8002f40 <assert_failed>
 800218c:	e60e      	b.n	8001dac <BlueNRG_Init+0x28>
	assert_param(ret == BLE_STATUS_SUCCESS);
 800218e:	480f      	ldr	r0, [pc, #60]	; (80021cc <BlueNRG_Init+0x448>)
 8002190:	2176      	movs	r1, #118	; 0x76
 8002192:	f000 fed5 	bl	8002f40 <assert_failed>
 8002196:	e63f      	b.n	8001e18 <BlueNRG_Init+0x94>
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8002198:	490d      	ldr	r1, [pc, #52]	; (80021d0 <BlueNRG_Init+0x44c>)
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800219a:	9432      	str	r4, [sp, #200]	; 0xc8
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 800219c:	ab32      	add	r3, sp, #200	; 0xc8
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	6808      	ldr	r0, [r1, #0]
 80021a2:	4623      	mov	r3, r4
 80021a4:	4611      	mov	r1, r2
 80021a6:	f008 fdd7 	bl	800ad58 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80021aa:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0e3      	beq.n	8002178 <BlueNRG_Init+0x3f4>
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <BlueNRG_Init+0x450>)
 80021b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	e7da      	b.n	8002178 <BlueNRG_Init+0x3f4>
 80021c2:	bf00      	nop
 80021c4:	200001c3 	.word	0x200001c3
 80021c8:	200099b8 	.word	0x200099b8
 80021cc:	0800ccc4 	.word	0x0800ccc4
 80021d0:	20009a3c 	.word	0x20009a3c
 80021d4:	e000ed04 	.word	0xe000ed04

080021d8 <BlueNRG_MakeDeviceDiscoverable>:
{
 80021d8:	b570      	push	{r4, r5, r6, lr}
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <BlueNRG_MakeDeviceDiscoverable+0x6c>)
	uint8_t uuidscanresponse[18] =
 80021dc:	4d1a      	ldr	r5, [pc, #104]	; (8002248 <BlueNRG_MakeDeviceDiscoverable+0x70>)
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 80021de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
{
 80021e2:	b090      	sub	sp, #64	; 0x40
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 80021e4:	ae08      	add	r6, sp, #32
 80021e6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	hci_le_set_scan_response_data(0, NULL);
 80021ea:	2100      	movs	r1, #0
 80021ec:	4608      	mov	r0, r1
 80021ee:	f006 fbe7 	bl	80089c0 <hci_le_set_scan_response_data>
	uint8_t uuidscanresponse[18] =
 80021f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f4:	ac0b      	add	r4, sp, #44	; 0x2c
 80021f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f8:	682b      	ldr	r3, [r5, #0]
 80021fa:	8023      	strh	r3, [r4, #0]
	hci_le_set_scan_response_data(18, uuidscanresponse);
 80021fc:	a90b      	add	r1, sp, #44	; 0x2c
 80021fe:	2012      	movs	r0, #18
 8002200:	f006 fbde 	bl	80089c0 <hci_le_set_scan_response_data>
	ret = aci_gap_set_discoverable(ADV_IND, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8002204:	2300      	movs	r3, #0
 8002206:	220c      	movs	r2, #12
 8002208:	9201      	str	r2, [sp, #4]
 800220a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800220e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002212:	9602      	str	r6, [sp, #8]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800221c:	21a0      	movs	r1, #160	; 0xa0
 800221e:	f006 fc2f 	bl	8008a80 <aci_gap_set_discoverable>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8002222:	b920      	cbnz	r0, 800222e <BlueNRG_MakeDeviceDiscoverable+0x56>
	Conn_Details.ConnectionStatus = STATE_AWAITING_CONNECTION;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <BlueNRG_MakeDeviceDiscoverable+0x74>)
 8002226:	2211      	movs	r2, #17
 8002228:	741a      	strb	r2, [r3, #16]
}
 800222a:	b010      	add	sp, #64	; 0x40
 800222c:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(ret == BLE_STATUS_SUCCESS);
 800222e:	4808      	ldr	r0, [pc, #32]	; (8002250 <BlueNRG_MakeDeviceDiscoverable+0x78>)
 8002230:	f240 11dd 	movw	r1, #477	; 0x1dd
 8002234:	f000 fe84 	bl	8002f40 <assert_failed>
	Conn_Details.ConnectionStatus = STATE_AWAITING_CONNECTION;
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <BlueNRG_MakeDeviceDiscoverable+0x74>)
 800223a:	2211      	movs	r2, #17
 800223c:	741a      	strb	r2, [r3, #16]
}
 800223e:	b010      	add	sp, #64	; 0x40
 8002240:	bd70      	pop	{r4, r5, r6, pc}
 8002242:	bf00      	nop
 8002244:	0800cd38 	.word	0x0800cd38
 8002248:	0800cd48 	.word	0x0800cd48
 800224c:	200099b8 	.word	0x200099b8
 8002250:	0800ccc4 	.word	0x0800ccc4

08002254 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	b084      	sub	sp, #16
	static FlagStatus FunctionAlreadyCalled = RESET;

	/* This callback function/event only saves connection handle */
	Conn_Details.connectionhandle = Connection_Handle;
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <hci_le_connection_complete_event+0x6c>)
{
 800225a:	9808      	ldr	r0, [sp, #32]
	Conn_Details.connectionhandle = Connection_Handle;
 800225c:	8119      	strh	r1, [r3, #8]

	/* Role should be slave: 0x01 (if 0x00, it is master and incorrect in this example project) */
	Conn_Details.deviceRole = Role;
 800225e:	719a      	strb	r2, [r3, #6]
	Conn_Details.BLE_SupervisionTimeout = Supervision_Timeout;

	/* Update connection status to connected */
	Conn_Details.ConnectionStatus = STATE_CONNECTED;

	if(FunctionAlreadyCalled == SET)
 8002260:	4c18      	ldr	r4, [pc, #96]	; (80022c4 <hci_le_connection_complete_event+0x70>)
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 8002262:	6802      	ldr	r2, [r0, #0]
 8002264:	601a      	str	r2, [r3, #0]
	if(FunctionAlreadyCalled == SET)
 8002266:	7822      	ldrb	r2, [r4, #0]
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 8002268:	8881      	ldrh	r1, [r0, #4]
{
 800226a:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 800226e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8002272:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 8002276:	8099      	strh	r1, [r3, #4]
	if(FunctionAlreadyCalled == SET)
 8002278:	2a01      	cmp	r2, #1
	Conn_Details.ConnectionStatus = STATE_CONNECTED;
 800227a:	f04f 0199 	mov.w	r1, #153	; 0x99
	Conn_Details.BLE_ConnInterval = Conn_Interval;
 800227e:	815e      	strh	r6, [r3, #10]
	Conn_Details.BLE_ConnLatency = Conn_Latency;
 8002280:	819d      	strh	r5, [r3, #12]
	Conn_Details.BLE_SupervisionTimeout = Supervision_Timeout;
 8002282:	81d8      	strh	r0, [r3, #14]
	Conn_Details.ConnectionStatus = STATE_CONNECTED;
 8002284:	7419      	strb	r1, [r3, #16]
	if(FunctionAlreadyCalled == SET)
 8002286:	d003      	beq.n	8002290 <hci_le_connection_complete_event+0x3c>
		   is pdFALSE */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

	/* Indication that function is called already, and can send notifications to FreeRTOS tasks next time it is executed */
	FunctionAlreadyCalled = SET;
 8002288:	2301      	movs	r3, #1
 800228a:	7023      	strb	r3, [r4, #0]
} /* end hci_le_connection_complete_event() */
 800228c:	b004      	add	sp, #16
 800228e:	bd70      	pop	{r4, r5, r6, pc}
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <hci_le_connection_complete_event+0x74>)
 8002292:	a903      	add	r1, sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002294:	2300      	movs	r3, #0
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8002296:	6800      	ldr	r0, [r0, #0]
 8002298:	9100      	str	r1, [sp, #0]
 800229a:	2102      	movs	r1, #2
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800229c:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 800229e:	f008 fd5b 	bl	800ad58 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80022a2:	9b03      	ldr	r3, [sp, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ef      	beq.n	8002288 <hci_le_connection_complete_event+0x34>
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <hci_le_connection_complete_event+0x78>)
 80022aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	f3bf 8f6f 	isb	sy
	FunctionAlreadyCalled = SET;
 80022b8:	2301      	movs	r3, #1
 80022ba:	7023      	strb	r3, [r4, #0]
} /* end hci_le_connection_complete_event() */
 80022bc:	b004      	add	sp, #16
 80022be:	bd70      	pop	{r4, r5, r6, pc}
 80022c0:	200099b8 	.word	0x200099b8
 80022c4:	200001c4 	.word	0x200001c4
 80022c8:	20009a3c 	.word	0x20009a3c
 80022cc:	e000ed04 	.word	0xe000ed04

080022d0 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 80022d0:	b530      	push	{r4, r5, lr}
	if(FunctionAlreadyCalled == SET)
 80022d2:	4c15      	ldr	r4, [pc, #84]	; (8002328 <hci_disconnection_complete_event+0x58>)
	Conn_Details.deviceRole = 0xFF;
 80022d4:	4915      	ldr	r1, [pc, #84]	; (800232c <hci_disconnection_complete_event+0x5c>)
	if(FunctionAlreadyCalled == SET)
 80022d6:	7822      	ldrb	r2, [r4, #0]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 80022d8:	2300      	movs	r3, #0
	Conn_Details.connectionhandle = 0xFFFF;
 80022da:	f04f 30ff 	mov.w	r0, #4294967295
	Conn_Details.deviceRole = 0xFF;
 80022de:	25ff      	movs	r5, #255	; 0xff
	if(FunctionAlreadyCalled == SET)
 80022e0:	2a01      	cmp	r2, #1
{
 80022e2:	b085      	sub	sp, #20
	Conn_Details.deviceRole = 0xFF;
 80022e4:	718d      	strb	r5, [r1, #6]
	Conn_Details.connectionhandle = 0xFFFF;
 80022e6:	6088      	str	r0, [r1, #8]
 80022e8:	60c8      	str	r0, [r1, #12]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 80022ea:	740b      	strb	r3, [r1, #16]
	BLUENRG_memset(&Conn_Details.BLE_Client_Addr[0], 0, 6);
 80022ec:	600b      	str	r3, [r1, #0]
 80022ee:	808b      	strh	r3, [r1, #4]
	if(FunctionAlreadyCalled == SET)
 80022f0:	d003      	beq.n	80022fa <hci_disconnection_complete_event+0x2a>
	FunctionAlreadyCalled = SET;
 80022f2:	2301      	movs	r3, #1
 80022f4:	7023      	strb	r3, [r4, #0]
	/* Resets all connectivity status details */
	Server_ResetConnectionStatus();

} /* end hci_disconnection_complete_event() */
 80022f6:	b005      	add	sp, #20
 80022f8:	bd30      	pop	{r4, r5, pc}
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 80022fa:	480d      	ldr	r0, [pc, #52]	; (8002330 <hci_disconnection_complete_event+0x60>)
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80022fc:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 80022fe:	a903      	add	r1, sp, #12
 8002300:	6800      	ldr	r0, [r0, #0]
 8002302:	9100      	str	r1, [sp, #0]
 8002304:	4611      	mov	r1, r2
 8002306:	f008 fd27 	bl	800ad58 <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800230a:	9b03      	ldr	r3, [sp, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <hci_disconnection_complete_event+0x22>
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <hci_disconnection_complete_event+0x64>)
 8002312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	f3bf 8f6f 	isb	sy
	FunctionAlreadyCalled = SET;
 8002320:	2301      	movs	r3, #1
 8002322:	7023      	strb	r3, [r4, #0]
} /* end hci_disconnection_complete_event() */
 8002324:	b005      	add	sp, #20
 8002326:	bd30      	pop	{r4, r5, pc}
 8002328:	200001c3 	.word	0x200001c3
 800232c:	200099b8 	.word	0x200099b8
 8002330:	20009a3c 	.word	0x20009a3c
 8002334:	e000ed04 	.word	0xe000ed04

08002338 <aci_gatt_notification_event>:
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{


} /* end aci_gatt_notification_event() */
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop

0800233c <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 800233c:	b500      	push	{lr}

	/* Determine which characteristic was modified by Client (Indicate and Notify characteristics
	   are modified by Client only if Client acknowledges these features on Server) */
	if(Attr_Handle == hClientWrite_Direction+1)
 800233e:	4b43      	ldr	r3, [pc, #268]	; (800244c <aci_gatt_attribute_modified_event+0x110>)
 8002340:	881b      	ldrh	r3, [r3, #0]
{
 8002342:	b083      	sub	sp, #12
	if(Attr_Handle == hClientWrite_Direction+1)
 8002344:	3301      	adds	r3, #1
 8002346:	4299      	cmp	r1, r3
{
 8002348:	9a04      	ldr	r2, [sp, #16]
	if(Attr_Handle == hClientWrite_Direction+1)
 800234a:	d002      	beq.n	8002352 <aci_gatt_attribute_modified_event+0x16>
			}
		}

	}

} /* end aci_gatt_attribute_modified_event() */
 800234c:	b003      	add	sp, #12
 800234e:	f85d fb04 	ldr.w	pc, [sp], #4
		switch(Attr_Data[0])
 8002352:	7813      	ldrb	r3, [r2, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxIncorrectMsgCharBuffer);
 8002354:	493e      	ldr	r1, [pc, #248]	; (8002450 <aci_gatt_attribute_modified_event+0x114>)
 8002356:	3b45      	subs	r3, #69	; 0x45
 8002358:	2b33      	cmp	r3, #51	; 0x33
 800235a:	d81b      	bhi.n	8002394 <aci_gatt_attribute_modified_event+0x58>
 800235c:	e8df f003 	tbb	[pc, r3]
 8002360:	1a1a1a67 	.word	0x1a1a1a67
 8002364:	1a1a1a1a 	.word	0x1a1a1a1a
 8002368:	1a1a581a 	.word	0x1a1a581a
 800236c:	1a491a1a 	.word	0x1a491a1a
 8002370:	263a1a1a 	.word	0x263a1a1a
 8002374:	1a1a1a1a 	.word	0x1a1a1a1a
 8002378:	1a1a1a1a 	.word	0x1a1a1a1a
 800237c:	1a1a1a1a 	.word	0x1a1a1a1a
 8002380:	1a1a1a67 	.word	0x1a1a1a67
 8002384:	1a1a1a1a 	.word	0x1a1a1a1a
 8002388:	1a1a581a 	.word	0x1a1a581a
 800238c:	1a491a1a 	.word	0x1a491a1a
 8002390:	263a1a1a 	.word	0x263a1a1a
 8002394:	4a2f      	ldr	r2, [pc, #188]	; (8002454 <aci_gatt_attribute_modified_event+0x118>)
 8002396:	4b30      	ldr	r3, [pc, #192]	; (8002458 <aci_gatt_attribute_modified_event+0x11c>)
 8002398:	8810      	ldrh	r0, [r2, #0]
 800239a:	8809      	ldrh	r1, [r1, #0]
 800239c:	9304      	str	r3, [sp, #16]
 800239e:	2200      	movs	r2, #0
 80023a0:	2306      	movs	r3, #6
} /* end aci_gatt_attribute_modified_event() */
 80023a2:	b003      	add	sp, #12
 80023a4:	f85d eb04 	ldr.w	lr, [sp], #4
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxIncorrectMsgCharBuffer);
 80023a8:	f006 bd4a 	b.w	8008e40 <aci_gatt_update_char_value>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxForceStopMovingCharBuffer);
 80023ac:	4a29      	ldr	r2, [pc, #164]	; (8002454 <aci_gatt_attribute_modified_event+0x118>)
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <aci_gatt_attribute_modified_event+0x120>)
 80023b0:	8809      	ldrh	r1, [r1, #0]
 80023b2:	8810      	ldrh	r0, [r2, #0]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2306      	movs	r3, #6
 80023ba:	f006 fd41 	bl	8008e40 <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_FORCESTOP, eSetBits);
 80023be:	4a28      	ldr	r2, [pc, #160]	; (8002460 <aci_gatt_attribute_modified_event+0x124>)
 80023c0:	2300      	movs	r3, #0
 80023c2:	6810      	ldr	r0, [r2, #0]
 80023c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c8:	2201      	movs	r2, #1
} /* end aci_gatt_attribute_modified_event() */
 80023ca:	b003      	add	sp, #12
 80023cc:	f85d eb04 	ldr.w	lr, [sp], #4
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_EAST, eSetBits);
 80023d0:	f008 bc4a 	b.w	800ac68 <xTaskGenericNotify>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxWestDirCharBuffer);
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <aci_gatt_attribute_modified_event+0x118>)
 80023d6:	4b23      	ldr	r3, [pc, #140]	; (8002464 <aci_gatt_attribute_modified_event+0x128>)
 80023d8:	8809      	ldrh	r1, [r1, #0]
 80023da:	8810      	ldrh	r0, [r2, #0]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	2306      	movs	r3, #6
 80023e2:	f006 fd2d 	bl	8008e40 <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_WEST, eSetBits);
 80023e6:	4a1e      	ldr	r2, [pc, #120]	; (8002460 <aci_gatt_attribute_modified_event+0x124>)
 80023e8:	2300      	movs	r3, #0
 80023ea:	6810      	ldr	r0, [r2, #0]
 80023ec:	2108      	movs	r1, #8
 80023ee:	2201      	movs	r2, #1
 80023f0:	e7eb      	b.n	80023ca <aci_gatt_attribute_modified_event+0x8e>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxSouthDirCharBuffer);
 80023f2:	4a18      	ldr	r2, [pc, #96]	; (8002454 <aci_gatt_attribute_modified_event+0x118>)
 80023f4:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <aci_gatt_attribute_modified_event+0x12c>)
 80023f6:	8809      	ldrh	r1, [r1, #0]
 80023f8:	8810      	ldrh	r0, [r2, #0]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2306      	movs	r3, #6
 8002400:	f006 fd1e 	bl	8008e40 <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_SOUTH, eSetBits);
 8002404:	4a16      	ldr	r2, [pc, #88]	; (8002460 <aci_gatt_attribute_modified_event+0x124>)
 8002406:	2300      	movs	r3, #0
 8002408:	6810      	ldr	r0, [r2, #0]
 800240a:	2104      	movs	r1, #4
 800240c:	2201      	movs	r2, #1
 800240e:	e7dc      	b.n	80023ca <aci_gatt_attribute_modified_event+0x8e>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxNorthDirCharBuffer);
 8002410:	4a10      	ldr	r2, [pc, #64]	; (8002454 <aci_gatt_attribute_modified_event+0x118>)
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <aci_gatt_attribute_modified_event+0x130>)
 8002414:	8809      	ldrh	r1, [r1, #0]
 8002416:	8810      	ldrh	r0, [r2, #0]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2200      	movs	r2, #0
 800241c:	2306      	movs	r3, #6
 800241e:	f006 fd0f 	bl	8008e40 <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_NORTH, eSetBits);
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <aci_gatt_attribute_modified_event+0x124>)
 8002424:	2201      	movs	r2, #1
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	4611      	mov	r1, r2
 800242a:	2300      	movs	r3, #0
 800242c:	e7cd      	b.n	80023ca <aci_gatt_attribute_modified_event+0x8e>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxEastDirCharBuffer);
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <aci_gatt_attribute_modified_event+0x118>)
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <aci_gatt_attribute_modified_event+0x134>)
 8002432:	8809      	ldrh	r1, [r1, #0]
 8002434:	8810      	ldrh	r0, [r2, #0]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2200      	movs	r2, #0
 800243a:	2306      	movs	r3, #6
 800243c:	f006 fd00 	bl	8008e40 <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_EAST, eSetBits);
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <aci_gatt_attribute_modified_event+0x124>)
 8002442:	2300      	movs	r3, #0
 8002444:	6810      	ldr	r0, [r2, #0]
 8002446:	2102      	movs	r1, #2
 8002448:	2201      	movs	r2, #1
 800244a:	e7be      	b.n	80023ca <aci_gatt_attribute_modified_event+0x8e>
 800244c:	200001d2 	.word	0x200001d2
 8002450:	200001d0 	.word	0x200001d0
 8002454:	200001e0 	.word	0x200001e0
 8002458:	20000010 	.word	0x20000010
 800245c:	20000008 	.word	0x20000008
 8002460:	20009a20 	.word	0x20009a20
 8002464:	20000028 	.word	0x20000028
 8002468:	20000020 	.word	0x20000020
 800246c:	20000018 	.word	0x20000018
 8002470:	20000000 	.word	0x20000000

08002474 <vTimUpdateOledScreenCallback>:
 * @note
 */
static void vTimUpdateOledScreenCallback(TimerHandle_t xTimer)
{
	/* Fill value in <customqueue> Queue to notify <customtask> of pending actions */
}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop

08002478 <vTimMotorTimeoutCallback>:
	Car_ConfigDirection(DIR_CAR_BRAKES);
 8002478:	2004      	movs	r0, #4
 800247a:	f7fe bfa1 	b.w	80013c0 <Car_ConfigDirection>
 800247e:	bf00      	nop

08002480 <Task_CarMovementCalculations>:
{
 8002480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002484:	ed2d 8b02 	vpush	{d8}
 8002488:	b087      	sub	sp, #28
	__IO int32_t CarOldVelocityX = 0;				/* units in cm/s */
 800248a:	2300      	movs	r3, #0
 800248c:	9302      	str	r3, [sp, #8]
		s_CarVelocityX = CarOldVelocityX + (round(s_CarAccelerationX) * FREQUENCY_S_CALCULATION);
 800248e:	f20f 1bb0 	addw	fp, pc, #432	; 0x1b0
 8002492:	e9db ab00 	ldrd	sl, fp, [fp]
	__IO int32_t CarOldVelocityY = 0;				/* units in cm/s */
 8002496:	9303      	str	r3, [sp, #12]
	__IO int32_t CarOldVelocityZ = 0;				/* units in cm/s */
 8002498:	9304      	str	r3, [sp, #16]
	ADXL343_Init();
 800249a:	f7fe fdff 	bl	800109c <ADXL343_Init>
	ADXL_ConfigureOffsets();
 800249e:	f7fe fd51 	bl	8000f44 <ADXL_ConfigureOffsets>
 80024a2:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8002648 <Task_CarMovementCalculations+0x1c8>
 80024a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800264c <Task_CarMovementCalculations+0x1cc>
		s_CarLocalDistanceCovered += (float)s_CarVelocityResultant * FREQUENCY_S_CALCULATION;
 80024aa:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8002620 <Task_CarMovementCalculations+0x1a0>
		g_Task5_RSS = uxTaskGetStackHighWaterMark(NULL);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f008 fb08 	bl	800aac4 <uxTaskGetStackHighWaterMark>
 80024b4:	4b5b      	ldr	r3, [pc, #364]	; (8002624 <Task_CarMovementCalculations+0x1a4>)
 80024b6:	6018      	str	r0, [r3, #0]
		LastActiveTime = xTaskGetTickCount();
 80024b8:	f008 f8f0 	bl	800a69c <xTaskGetTickCount>
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 80024bc:	2119      	movs	r1, #25
		LastActiveTime = xTaskGetTickCount();
 80024be:	4603      	mov	r3, r0
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 80024c0:	a805      	add	r0, sp, #20
		LastActiveTime = xTaskGetTickCount();
 80024c2:	9305      	str	r3, [sp, #20]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 80024c4:	f007 ff64 	bl	800a390 <vTaskDelayUntil>
		taskENTER_CRITICAL();
 80024c8:	f008 ffd4 	bl	800b474 <vPortEnterCritical>
		ADXL_ReadAcceleration(&s_CarAccelerationX, &s_CarAccelerationY, &s_CarAccelerationZ);
 80024cc:	4a56      	ldr	r2, [pc, #344]	; (8002628 <Task_CarMovementCalculations+0x1a8>)
 80024ce:	4957      	ldr	r1, [pc, #348]	; (800262c <Task_CarMovementCalculations+0x1ac>)
 80024d0:	4857      	ldr	r0, [pc, #348]	; (8002630 <Task_CarMovementCalculations+0x1b0>)
 80024d2:	f7fe fce5 	bl	8000ea0 <ADXL_ReadAcceleration>
		TimeNow = xTaskGetTickCount();
 80024d6:	f008 f8e1 	bl	800a69c <xTaskGetTickCount>
		taskEXIT_CRITICAL();
 80024da:	f008 ffed 	bl	800b4b8 <vPortExitCritical>
		s_CarVelocityX = CarOldVelocityX + (round(s_CarAccelerationX) * FREQUENCY_S_CALCULATION);
 80024de:	4b54      	ldr	r3, [pc, #336]	; (8002630 <Task_CarMovementCalculations+0x1b0>)
 80024e0:	9c02      	ldr	r4, [sp, #8]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	f7fe f830 	bl	8000548 <__aeabi_f2d>
 80024e8:	ec41 0b10 	vmov	d0, r0, r1
 80024ec:	f00a fa4e 	bl	800c98c <round>
 80024f0:	4620      	mov	r0, r4
 80024f2:	ec57 6b10 	vmov	r6, r7, d0
 80024f6:	f7fe f815 	bl	8000524 <__aeabi_i2d>
 80024fa:	4652      	mov	r2, sl
 80024fc:	4604      	mov	r4, r0
 80024fe:	460d      	mov	r5, r1
 8002500:	465b      	mov	r3, fp
 8002502:	4630      	mov	r0, r6
 8002504:	4639      	mov	r1, r7
 8002506:	f7fe f877 	bl	80005f8 <__aeabi_dmul>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4620      	mov	r0, r4
 8002510:	4629      	mov	r1, r5
 8002512:	f7fd febb 	bl	800028c <__adddf3>
 8002516:	f7fe fb1f 	bl	8000b58 <__aeabi_d2iz>
		s_CarVelocityY = CarOldVelocityY + (round(s_CarAccelerationY) * FREQUENCY_S_CALCULATION);
 800251a:	4b44      	ldr	r3, [pc, #272]	; (800262c <Task_CarMovementCalculations+0x1ac>)
		s_CarVelocityX = CarOldVelocityX + (round(s_CarAccelerationX) * FREQUENCY_S_CALCULATION);
 800251c:	f8c9 0000 	str.w	r0, [r9]
		s_CarVelocityY = CarOldVelocityY + (round(s_CarAccelerationY) * FREQUENCY_S_CALCULATION);
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	9c03      	ldr	r4, [sp, #12]
 8002524:	f7fe f810 	bl	8000548 <__aeabi_f2d>
 8002528:	ec41 0b10 	vmov	d0, r0, r1
 800252c:	f00a fa2e 	bl	800c98c <round>
 8002530:	4620      	mov	r0, r4
 8002532:	ec57 6b10 	vmov	r6, r7, d0
 8002536:	f7fd fff5 	bl	8000524 <__aeabi_i2d>
 800253a:	4652      	mov	r2, sl
 800253c:	4604      	mov	r4, r0
 800253e:	460d      	mov	r5, r1
 8002540:	465b      	mov	r3, fp
 8002542:	4630      	mov	r0, r6
 8002544:	4639      	mov	r1, r7
 8002546:	f7fe f857 	bl	80005f8 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4620      	mov	r0, r4
 8002550:	4629      	mov	r1, r5
 8002552:	f7fd fe9b 	bl	800028c <__adddf3>
 8002556:	f7fe faff 	bl	8000b58 <__aeabi_d2iz>
		s_CarVelocityZ = CarOldVelocityZ + (round(s_CarAccelerationZ) * FREQUENCY_S_CALCULATION);
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <Task_CarMovementCalculations+0x1a8>)
		s_CarVelocityY = CarOldVelocityY + (round(s_CarAccelerationY) * FREQUENCY_S_CALCULATION);
 800255c:	f8c8 0000 	str.w	r0, [r8]
		s_CarVelocityZ = CarOldVelocityZ + (round(s_CarAccelerationZ) * FREQUENCY_S_CALCULATION);
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	9c04      	ldr	r4, [sp, #16]
 8002564:	f7fd fff0 	bl	8000548 <__aeabi_f2d>
 8002568:	ec41 0b10 	vmov	d0, r0, r1
 800256c:	f00a fa0e 	bl	800c98c <round>
 8002570:	4620      	mov	r0, r4
 8002572:	ec57 6b10 	vmov	r6, r7, d0
 8002576:	f7fd ffd5 	bl	8000524 <__aeabi_i2d>
 800257a:	4652      	mov	r2, sl
 800257c:	4604      	mov	r4, r0
 800257e:	460d      	mov	r5, r1
 8002580:	465b      	mov	r3, fp
 8002582:	4630      	mov	r0, r6
 8002584:	4639      	mov	r1, r7
 8002586:	f7fe f837 	bl	80005f8 <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4620      	mov	r0, r4
 8002590:	4629      	mov	r1, r5
 8002592:	f7fd fe7b 	bl	800028c <__adddf3>
 8002596:	f7fe fadf 	bl	8000b58 <__aeabi_d2iz>
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <Task_CarMovementCalculations+0x1b4>)
 800259c:	6018      	str	r0, [r3, #0]
		s_CarVelocityResultant = sqrt(pow(s_CarVelocityX, 2) + pow(s_CarVelocityY, 2));
 800259e:	f8d9 0000 	ldr.w	r0, [r9]
 80025a2:	f7fd ffbf 	bl	8000524 <__aeabi_i2d>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	f8d8 0000 	ldr.w	r0, [r8]
 80025ae:	e9cd 2300 	strd	r2, r3, [sp]
 80025b2:	f7fd ffb7 	bl	8000524 <__aeabi_i2d>
 80025b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80025ba:	4606      	mov	r6, r0
 80025bc:	460f      	mov	r7, r1
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe f819 	bl	80005f8 <__aeabi_dmul>
 80025c6:	4632      	mov	r2, r6
 80025c8:	463b      	mov	r3, r7
 80025ca:	4604      	mov	r4, r0
 80025cc:	460d      	mov	r5, r1
 80025ce:	4630      	mov	r0, r6
 80025d0:	4639      	mov	r1, r7
 80025d2:	f7fe f811 	bl	80005f8 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4620      	mov	r0, r4
 80025dc:	4629      	mov	r1, r5
 80025de:	f7fd fe55 	bl	800028c <__adddf3>
 80025e2:	ec41 0b10 	vmov	d0, r0, r1
 80025e6:	f00a fa17 	bl	800ca18 <sqrt>
 80025ea:	ec51 0b10 	vmov	r0, r1, d0
 80025ee:	f7fe fab3 	bl	8000b58 <__aeabi_d2iz>
 80025f2:	4a11      	ldr	r2, [pc, #68]	; (8002638 <Task_CarMovementCalculations+0x1b8>)
 80025f4:	6010      	str	r0, [r2, #0]
		CarOldVelocityX = s_CarVelocityX;
 80025f6:	f8d9 3000 	ldr.w	r3, [r9]
 80025fa:	9302      	str	r3, [sp, #8]
		CarOldVelocityY = s_CarVelocityY;
 80025fc:	f8d8 3000 	ldr.w	r3, [r8]
 8002600:	9303      	str	r3, [sp, #12]
		CarOldVelocityZ = s_CarVelocityZ;
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <Task_CarMovementCalculations+0x1b4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	9304      	str	r3, [sp, #16]
		s_CarLocalDistanceCovered += (float)s_CarVelocityResultant * FREQUENCY_S_CALCULATION;
 8002608:	ed92 7a00 	vldr	s14, [r2]
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <Task_CarMovementCalculations+0x1bc>)
 800260e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	eee7 7a08 	vfma.f32	s15, s14, s16
 800261a:	edc3 7a00 	vstr	s15, [r3]
	while(1)
 800261e:	e746      	b.n	80024ae <Task_CarMovementCalculations+0x2e>
 8002620:	3ccccccd 	.word	0x3ccccccd
 8002624:	20009a28 	.word	0x20009a28
 8002628:	20000200 	.word	0x20000200
 800262c:	200001fc 	.word	0x200001fc
 8002630:	200001f8 	.word	0x200001f8
 8002634:	20000214 	.word	0x20000214
 8002638:	20000208 	.word	0x20000208
 800263c:	20000204 	.word	0x20000204
 8002640:	a0000000 	.word	0xa0000000
 8002644:	3f999999 	.word	0x3f999999
 8002648:	2000020c 	.word	0x2000020c
 800264c:	20000210 	.word	0x20000210

08002650 <Task_ManageBLEEvents>:
{
 8002650:	b510      	push	{r4, lr}
 8002652:	4c08      	ldr	r4, [pc, #32]	; (8002674 <Task_ManageBLEEvents+0x24>)
 8002654:	b082      	sub	sp, #8
		g_Task3_RSS = uxTaskGetStackHighWaterMark(NULL);
 8002656:	2000      	movs	r0, #0
 8002658:	f008 fa34 	bl	800aac4 <uxTaskGetStackHighWaterMark>
 800265c:	6020      	str	r0, [r4, #0]
		LastActiveTime = xTaskGetTickCount();
 800265e:	f008 f81d 	bl	800a69c <xTaskGetTickCount>
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8002662:	210f      	movs	r1, #15
		LastActiveTime = xTaskGetTickCount();
 8002664:	4603      	mov	r3, r0
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8002666:	a801      	add	r0, sp, #4
		LastActiveTime = xTaskGetTickCount();
 8002668:	9301      	str	r3, [sp, #4]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 800266a:	f007 fe91 	bl	800a390 <vTaskDelayUntil>
		hci_user_evt_proc();
 800266e:	f006 fd85 	bl	800917c <hci_user_evt_proc>
	while(1)
 8002672:	e7f0      	b.n	8002656 <Task_ManageBLEEvents+0x6>
 8002674:	20009a38 	.word	0x20009a38

08002678 <Task_BlinkLEDIndicator>:
{
 8002678:	b530      	push	{r4, r5, lr}
 800267a:	4d0a      	ldr	r5, [pc, #40]	; (80026a4 <Task_BlinkLEDIndicator+0x2c>)
		HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 800267c:	4c0a      	ldr	r4, [pc, #40]	; (80026a8 <Task_BlinkLEDIndicator+0x30>)
{
 800267e:	b083      	sub	sp, #12
		g_Task2_RSS = uxTaskGetStackHighWaterMark(NULL);
 8002680:	2000      	movs	r0, #0
 8002682:	f008 fa1f 	bl	800aac4 <uxTaskGetStackHighWaterMark>
 8002686:	6028      	str	r0, [r5, #0]
		LastActiveTime = xTaskGetTickCount();
 8002688:	f008 f808 	bl	800a69c <xTaskGetTickCount>
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 800268c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		LastActiveTime = xTaskGetTickCount();
 8002690:	4603      	mov	r3, r0
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8002692:	a801      	add	r0, sp, #4
		LastActiveTime = xTaskGetTickCount();
 8002694:	9301      	str	r3, [sp, #4]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8002696:	f007 fe7b 	bl	800a390 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 800269a:	2120      	movs	r1, #32
 800269c:	4620      	mov	r0, r4
 800269e:	f002 f80f 	bl	80046c0 <HAL_GPIO_TogglePin>
	while(1)
 80026a2:	e7ed      	b.n	8002680 <Task_BlinkLEDIndicator+0x8>
 80026a4:	20009a34 	.word	0x20009a34
 80026a8:	40020000 	.word	0x40020000

080026ac <Task_ProcessPushButtonIRQ>:
{
 80026ac:	b530      	push	{r4, r5, lr}
 80026ae:	b083      	sub	sp, #12
	__IO uint32_t PBCounter = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	4d0a      	ldr	r5, [pc, #40]	; (80026dc <Task_ProcessPushButtonIRQ+0x30>)
 80026b4:	9301      	str	r3, [sp, #4]
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80026b6:	f04f 31ff 	mov.w	r1, #4294967295
 80026ba:	2001      	movs	r0, #1
 80026bc:	f008 fa72 	bl	800aba4 <ulTaskNotifyTake>
 80026c0:	4604      	mov	r4, r0
		g_Task4_RSS = uxTaskGetStackHighWaterMark(NULL);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f008 f9fe 	bl	800aac4 <uxTaskGetStackHighWaterMark>
		if(NotificationValue & FRTOS_TASK_NOTIF_PB_PRESSED)
 80026c8:	07e3      	lsls	r3, r4, #31
		g_Task4_RSS = uxTaskGetStackHighWaterMark(NULL);
 80026ca:	6028      	str	r0, [r5, #0]
		if(NotificationValue & FRTOS_TASK_NOTIF_PB_PRESSED)
 80026cc:	d5f3      	bpl.n	80026b6 <Task_ProcessPushButtonIRQ+0xa>
			__TEST_MOTOR_AlternateWheel(PBCounter);
 80026ce:	9801      	ldr	r0, [sp, #4]
 80026d0:	f7fe ff0c 	bl	80014ec <__TEST_MOTOR_AlternateWheel>
			PBCounter++;
 80026d4:	9b01      	ldr	r3, [sp, #4]
 80026d6:	3301      	adds	r3, #1
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	e7ec      	b.n	80026b6 <Task_ProcessPushButtonIRQ+0xa>
 80026dc:	20009a48 	.word	0x20009a48

080026e0 <Task_ParseBLEMessage>:
{
 80026e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026e4:	b085      	sub	sp, #20
	Motor_Init();
 80026e6:	f7fe fe69 	bl	80013bc <Motor_Init>
 80026ea:	4e3c      	ldr	r6, [pc, #240]	; (80027dc <Task_ParseBLEMessage+0xfc>)
 80026ec:	4d3c      	ldr	r5, [pc, #240]	; (80027e0 <Task_ParseBLEMessage+0x100>)
 80026ee:	4f3d      	ldr	r7, [pc, #244]	; (80027e4 <Task_ParseBLEMessage+0x104>)
 80026f0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 80027f0 <Task_ParseBLEMessage+0x110>
 80026f4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80027f4 <Task_ParseBLEMessage+0x114>
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80026f8:	f04f 31ff 	mov.w	r1, #4294967295
 80026fc:	2001      	movs	r0, #1
 80026fe:	f008 fa51 	bl	800aba4 <ulTaskNotifyTake>
 8002702:	4604      	mov	r4, r0
		g_Task1_RSS = uxTaskGetStackHighWaterMark(NULL);
 8002704:	2000      	movs	r0, #0
 8002706:	f008 f9dd 	bl	800aac4 <uxTaskGetStackHighWaterMark>
		if(NotificationValue & FRTOS_TASK_NOTIF_DIR_FORCESTOP)
 800270a:	f414 4b00 	ands.w	fp, r4, #32768	; 0x8000
		g_Task1_RSS = uxTaskGetStackHighWaterMark(NULL);
 800270e:	4603      	mov	r3, r0
 8002710:	6033      	str	r3, [r6, #0]
			Car_ConfigDirection(DIR_CAR_BRAKES);
 8002712:	f04f 0004 	mov.w	r0, #4
		if(NotificationValue & FRTOS_TASK_NOTIF_DIR_FORCESTOP)
 8002716:	d005      	beq.n	8002724 <Task_ParseBLEMessage+0x44>
			Car_ConfigDirection(DIR_CAR_BRAKES);
 8002718:	f7fe fe52 	bl	80013c0 <Car_ConfigDirection>
			g_CountDirForceStop++;
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	3301      	adds	r3, #1
 8002720:	602b      	str	r3, [r5, #0]
 8002722:	e7e9      	b.n	80026f8 <Task_ParseBLEMessage+0x18>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_NORTH)
 8002724:	f014 0a01 	ands.w	sl, r4, #1
 8002728:	d11b      	bne.n	8002762 <Task_ParseBLEMessage+0x82>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_EAST)
 800272a:	f014 0b02 	ands.w	fp, r4, #2
 800272e:	d12d      	bne.n	800278c <Task_ParseBLEMessage+0xac>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_SOUTH)
 8002730:	f014 0104 	ands.w	r1, r4, #4
 8002734:	d13e      	bne.n	80027b4 <Task_ParseBLEMessage+0xd4>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_WEST)
 8002736:	0723      	lsls	r3, r4, #28
 8002738:	d5de      	bpl.n	80026f8 <Task_ParseBLEMessage+0x18>
			Car_ConfigDirection(DIR_CAR_LEFT);
 800273a:	4608      	mov	r0, r1
 800273c:	9103      	str	r1, [sp, #12]
 800273e:	f7fe fe3f 	bl	80013c0 <Car_ConfigDirection>
			xTimerStart(h_TimMotorTimeout, 0);
 8002742:	683c      	ldr	r4, [r7, #0]
 8002744:	f007 ffaa 	bl	800a69c <xTaskGetTickCount>
 8002748:	9903      	ldr	r1, [sp, #12]
 800274a:	9100      	str	r1, [sp, #0]
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4620      	mov	r0, r4
 8002752:	2101      	movs	r1, #1
 8002754:	f008 fdf2 	bl	800b33c <xTimerGenericCommand>
			g_CountDirLeft++;
 8002758:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <Task_ParseBLEMessage+0x108>)
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e7ca      	b.n	80026f8 <Task_ParseBLEMessage+0x18>
			Car_ConfigDirection(DIR_CAR_FRONT);
 8002762:	2002      	movs	r0, #2
 8002764:	f7fe fe2c 	bl	80013c0 <Car_ConfigDirection>
			xTimerStart(h_TimMotorTimeout, 500/portTICK_PERIOD_MS);
 8002768:	683c      	ldr	r4, [r7, #0]
 800276a:	f007 ff97 	bl	800a69c <xTaskGetTickCount>
 800276e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002772:	4602      	mov	r2, r0
 8002774:	465b      	mov	r3, fp
 8002776:	9100      	str	r1, [sp, #0]
 8002778:	4620      	mov	r0, r4
 800277a:	2101      	movs	r1, #1
 800277c:	f008 fdde 	bl	800b33c <xTimerGenericCommand>
			g_CountDirForward++;
 8002780:	f8d8 3000 	ldr.w	r3, [r8]
 8002784:	3301      	adds	r3, #1
 8002786:	f8c8 3000 	str.w	r3, [r8]
 800278a:	e7b5      	b.n	80026f8 <Task_ParseBLEMessage+0x18>
			Car_ConfigDirection(DIR_CAR_RIGHT);
 800278c:	2001      	movs	r0, #1
 800278e:	f7fe fe17 	bl	80013c0 <Car_ConfigDirection>
			xTimerStart(h_TimMotorTimeout, 0);
 8002792:	683c      	ldr	r4, [r7, #0]
 8002794:	f007 ff82 	bl	800a69c <xTaskGetTickCount>
 8002798:	4653      	mov	r3, sl
 800279a:	4602      	mov	r2, r0
 800279c:	f8cd a000 	str.w	sl, [sp]
 80027a0:	4620      	mov	r0, r4
 80027a2:	2101      	movs	r1, #1
 80027a4:	f008 fdca 	bl	800b33c <xTimerGenericCommand>
			g_CountDirRight++;
 80027a8:	f8d9 3000 	ldr.w	r3, [r9]
 80027ac:	3301      	adds	r3, #1
 80027ae:	f8c9 3000 	str.w	r3, [r9]
 80027b2:	e7a1      	b.n	80026f8 <Task_ParseBLEMessage+0x18>
			Car_ConfigDirection(DIR_CAR_BACK);
 80027b4:	2003      	movs	r0, #3
 80027b6:	f7fe fe03 	bl	80013c0 <Car_ConfigDirection>
			xTimerStart(h_TimMotorTimeout, 500/portTICK_PERIOD_MS);
 80027ba:	683c      	ldr	r4, [r7, #0]
 80027bc:	f007 ff6e 	bl	800a69c <xTaskGetTickCount>
 80027c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027c4:	4602      	mov	r2, r0
 80027c6:	465b      	mov	r3, fp
 80027c8:	9100      	str	r1, [sp, #0]
 80027ca:	4620      	mov	r0, r4
 80027cc:	2101      	movs	r1, #1
 80027ce:	f008 fdb5 	bl	800b33c <xTimerGenericCommand>
			g_CountDirBack++;
 80027d2:	4a06      	ldr	r2, [pc, #24]	; (80027ec <Task_ParseBLEMessage+0x10c>)
 80027d4:	6813      	ldr	r3, [r2, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e78d      	b.n	80026f8 <Task_ParseBLEMessage+0x18>
 80027dc:	20009a30 	.word	0x20009a30
 80027e0:	200001e8 	.word	0x200001e8
 80027e4:	20009a44 	.word	0x20009a44
 80027e8:	200001f0 	.word	0x200001f0
 80027ec:	200001e4 	.word	0x200001e4
 80027f0:	200001ec 	.word	0x200001ec
 80027f4:	200001f4 	.word	0x200001f4

080027f8 <Task_ManageBLEConnections>:
{
 80027f8:	b570      	push	{r4, r5, r6, lr}
	BlueNRG_Init();
 80027fa:	f7ff fac3 	bl	8001d84 <BlueNRG_Init>
	BlueNRG_MakeDeviceDiscoverable();
 80027fe:	f7ff fceb 	bl	80021d8 <BlueNRG_MakeDeviceDiscoverable>
 8002802:	4d0d      	ldr	r5, [pc, #52]	; (8002838 <Task_ManageBLEConnections+0x40>)
 8002804:	4e0d      	ldr	r6, [pc, #52]	; (800283c <Task_ManageBLEConnections+0x44>)
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002806:	f04f 31ff 	mov.w	r1, #4294967295
 800280a:	2001      	movs	r0, #1
 800280c:	f008 f9ca 	bl	800aba4 <ulTaskNotifyTake>
 8002810:	4604      	mov	r4, r0
		g_Task0_RSS = uxTaskGetStackHighWaterMark(NULL);
 8002812:	2000      	movs	r0, #0
 8002814:	f008 f956 	bl	800aac4 <uxTaskGetStackHighWaterMark>
		if(NotificationValue & FRTOS_TASK_NOTIF_BLE_CONNECTED)
 8002818:	07a2      	lsls	r2, r4, #30
		g_Task0_RSS = uxTaskGetStackHighWaterMark(NULL);
 800281a:	6028      	str	r0, [r5, #0]
		if(NotificationValue & FRTOS_TASK_NOTIF_BLE_CONNECTED)
 800281c:	d503      	bpl.n	8002826 <Task_ManageBLEConnections+0x2e>
			vTaskResume(h_TaskBLEMsg);
 800281e:	6830      	ldr	r0, [r6, #0]
 8002820:	f007 fe34 	bl	800a48c <vTaskResume>
 8002824:	e7ef      	b.n	8002806 <Task_ManageBLEConnections+0xe>
		else if(NotificationValue & FRTOS_TASK_NOTIF_BLE_DISCONNECTED)
 8002826:	07e3      	lsls	r3, r4, #31
 8002828:	d5ed      	bpl.n	8002806 <Task_ManageBLEConnections+0xe>
			vTaskSuspend(h_TaskBLEMsg);
 800282a:	6830      	ldr	r0, [r6, #0]
 800282c:	f007 ff9a 	bl	800a764 <vTaskSuspend>
			BlueNRG_MakeDeviceDiscoverable();
 8002830:	f7ff fcd2 	bl	80021d8 <BlueNRG_MakeDeviceDiscoverable>
 8002834:	e7e7      	b.n	8002806 <Task_ManageBLEConnections+0xe>
 8002836:	bf00      	nop
 8002838:	20009a24 	.word	0x20009a24
 800283c:	20009a20 	.word	0x20009a20

08002840 <FRTOS_Init_SWTimers>:
{
 8002840:	b500      	push	{lr}
 8002842:	b083      	sub	sp, #12
	h_TimMotorTimeout = xTimerCreate("TIM_MotorTimeout",
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <FRTOS_Init_SWTimers+0x54>)
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2300      	movs	r3, #0
 800284a:	461a      	mov	r2, r3
 800284c:	4812      	ldr	r0, [pc, #72]	; (8002898 <FRTOS_Init_SWTimers+0x58>)
 800284e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002852:	f008 fd0b 	bl	800b26c <xTimerCreate>
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <FRTOS_Init_SWTimers+0x5c>)
 8002858:	6018      	str	r0, [r3, #0]
	assert_param(h_TimMotorTimeout != NULL);
 800285a:	b170      	cbz	r0, 800287a <FRTOS_Init_SWTimers+0x3a>
	h_TimUpdateLED = xTimerCreate("TIM_UpdateOLEDScreen",
 800285c:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <FRTOS_Init_SWTimers+0x60>)
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	4810      	ldr	r0, [pc, #64]	; (80028a4 <FRTOS_Init_SWTimers+0x64>)
 8002862:	2300      	movs	r3, #0
 8002864:	2201      	movs	r2, #1
 8002866:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800286a:	f008 fcff 	bl	800b26c <xTimerCreate>
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <FRTOS_Init_SWTimers+0x68>)
 8002870:	6018      	str	r0, [r3, #0]
	assert_param(h_TimUpdateLED != NULL);
 8002872:	b138      	cbz	r0, 8002884 <FRTOS_Init_SWTimers+0x44>
}
 8002874:	b003      	add	sp, #12
 8002876:	f85d fb04 	ldr.w	pc, [sp], #4
	assert_param(h_TimMotorTimeout != NULL);
 800287a:	480c      	ldr	r0, [pc, #48]	; (80028ac <FRTOS_Init_SWTimers+0x6c>)
 800287c:	218d      	movs	r1, #141	; 0x8d
 800287e:	f000 fb5f 	bl	8002f40 <assert_failed>
 8002882:	e7eb      	b.n	800285c <FRTOS_Init_SWTimers+0x1c>
	assert_param(h_TimUpdateLED != NULL);
 8002884:	4809      	ldr	r0, [pc, #36]	; (80028ac <FRTOS_Init_SWTimers+0x6c>)
 8002886:	2197      	movs	r1, #151	; 0x97
}
 8002888:	b003      	add	sp, #12
 800288a:	f85d eb04 	ldr.w	lr, [sp], #4
	assert_param(h_TimUpdateLED != NULL);
 800288e:	f000 bb57 	b.w	8002f40 <assert_failed>
 8002892:	bf00      	nop
 8002894:	08002479 	.word	0x08002479
 8002898:	0800cd5c 	.word	0x0800cd5c
 800289c:	20009a44 	.word	0x20009a44
 80028a0:	08002475 	.word	0x08002475
 80028a4:	0800cd90 	.word	0x0800cd90
 80028a8:	20009a1c 	.word	0x20009a1c
 80028ac:	0800cd70 	.word	0x0800cd70

080028b0 <FRTOS_Init_Tasks>:
{
 80028b0:	b500      	push	{lr}
 80028b2:	b083      	sub	sp, #12
	TaskCreationStatus = xTaskCreate( Task_ManageBLEConnections,
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <FRTOS_Init_Tasks+0xdc>)
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	232e      	movs	r3, #46	; 0x2e
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4934      	ldr	r1, [pc, #208]	; (8002990 <FRTOS_Init_Tasks+0xe0>)
 80028be:	4835      	ldr	r0, [pc, #212]	; (8002994 <FRTOS_Init_Tasks+0xe4>)
 80028c0:	2300      	movs	r3, #0
 80028c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c6:	f007 fd2f 	bl	800a328 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 80028ca:	2801      	cmp	r0, #1
 80028cc:	d003      	beq.n	80028d6 <FRTOS_Init_Tasks+0x26>
 80028ce:	4832      	ldr	r0, [pc, #200]	; (8002998 <FRTOS_Init_Tasks+0xe8>)
 80028d0:	21b4      	movs	r1, #180	; 0xb4
 80028d2:	f000 fb35 	bl	8002f40 <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_ParseBLEMessage,
 80028d6:	4b31      	ldr	r3, [pc, #196]	; (800299c <FRTOS_Init_Tasks+0xec>)
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	232c      	movs	r3, #44	; 0x2c
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	4930      	ldr	r1, [pc, #192]	; (80029a0 <FRTOS_Init_Tasks+0xf0>)
 80028e0:	4830      	ldr	r0, [pc, #192]	; (80029a4 <FRTOS_Init_Tasks+0xf4>)
 80028e2:	2300      	movs	r3, #0
 80028e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028e8:	f007 fd1e 	bl	800a328 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 80028ec:	2801      	cmp	r0, #1
 80028ee:	d003      	beq.n	80028f8 <FRTOS_Init_Tasks+0x48>
 80028f0:	4829      	ldr	r0, [pc, #164]	; (8002998 <FRTOS_Init_Tasks+0xe8>)
 80028f2:	21bf      	movs	r1, #191	; 0xbf
 80028f4:	f000 fb24 	bl	8002f40 <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_ProcessPushButtonIRQ,
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <FRTOS_Init_Tasks+0xf8>)
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	2327      	movs	r3, #39	; 0x27
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	492a      	ldr	r1, [pc, #168]	; (80029ac <FRTOS_Init_Tasks+0xfc>)
 8002902:	482b      	ldr	r0, [pc, #172]	; (80029b0 <FRTOS_Init_Tasks+0x100>)
 8002904:	2300      	movs	r3, #0
 8002906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800290a:	f007 fd0d 	bl	800a328 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 800290e:	2801      	cmp	r0, #1
 8002910:	d003      	beq.n	800291a <FRTOS_Init_Tasks+0x6a>
 8002912:	4821      	ldr	r0, [pc, #132]	; (8002998 <FRTOS_Init_Tasks+0xe8>)
 8002914:	21ca      	movs	r1, #202	; 0xca
 8002916:	f000 fb13 	bl	8002f40 <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_BlinkLEDIndicator,
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <FRTOS_Init_Tasks+0x104>)
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2324      	movs	r3, #36	; 0x24
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	4925      	ldr	r1, [pc, #148]	; (80029b8 <FRTOS_Init_Tasks+0x108>)
 8002924:	4825      	ldr	r0, [pc, #148]	; (80029bc <FRTOS_Init_Tasks+0x10c>)
 8002926:	2300      	movs	r3, #0
 8002928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800292c:	f007 fcfc 	bl	800a328 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 8002930:	2801      	cmp	r0, #1
 8002932:	d003      	beq.n	800293c <FRTOS_Init_Tasks+0x8c>
 8002934:	4818      	ldr	r0, [pc, #96]	; (8002998 <FRTOS_Init_Tasks+0xe8>)
 8002936:	21d5      	movs	r1, #213	; 0xd5
 8002938:	f000 fb02 	bl	8002f40 <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_ManageBLEEvents,
 800293c:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <FRTOS_Init_Tasks+0x110>)
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	2319      	movs	r3, #25
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	491f      	ldr	r1, [pc, #124]	; (80029c4 <FRTOS_Init_Tasks+0x114>)
 8002946:	4820      	ldr	r0, [pc, #128]	; (80029c8 <FRTOS_Init_Tasks+0x118>)
 8002948:	2300      	movs	r3, #0
 800294a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800294e:	f007 fceb 	bl	800a328 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 8002952:	2801      	cmp	r0, #1
 8002954:	d003      	beq.n	800295e <FRTOS_Init_Tasks+0xae>
 8002956:	4810      	ldr	r0, [pc, #64]	; (8002998 <FRTOS_Init_Tasks+0xe8>)
 8002958:	21e0      	movs	r1, #224	; 0xe0
 800295a:	f000 faf1 	bl	8002f40 <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_CarMovementCalculations,
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <FRTOS_Init_Tasks+0x11c>)
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2329      	movs	r3, #41	; 0x29
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	491a      	ldr	r1, [pc, #104]	; (80029d0 <FRTOS_Init_Tasks+0x120>)
 8002968:	481a      	ldr	r0, [pc, #104]	; (80029d4 <FRTOS_Init_Tasks+0x124>)
 800296a:	2300      	movs	r3, #0
 800296c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002970:	f007 fcda 	bl	800a328 <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 8002974:	2801      	cmp	r0, #1
 8002976:	d102      	bne.n	800297e <FRTOS_Init_Tasks+0xce>
}
 8002978:	b003      	add	sp, #12
 800297a:	f85d fb04 	ldr.w	pc, [sp], #4
	assert_param(TaskCreationStatus == pdPASS);
 800297e:	4806      	ldr	r0, [pc, #24]	; (8002998 <FRTOS_Init_Tasks+0xe8>)
 8002980:	21eb      	movs	r1, #235	; 0xeb
}
 8002982:	b003      	add	sp, #12
 8002984:	f85d eb04 	ldr.w	lr, [sp], #4
	assert_param(TaskCreationStatus == pdPASS);
 8002988:	f000 bada 	b.w	8002f40 <assert_failed>
 800298c:	20009a3c 	.word	0x20009a3c
 8002990:	0800cda8 	.word	0x0800cda8
 8002994:	080027f9 	.word	0x080027f9
 8002998:	0800cd70 	.word	0x0800cd70
 800299c:	20009a20 	.word	0x20009a20
 80029a0:	0800cdc0 	.word	0x0800cdc0
 80029a4:	080026e1 	.word	0x080026e1
 80029a8:	20009a2c 	.word	0x20009a2c
 80029ac:	0800cdd4 	.word	0x0800cdd4
 80029b0:	080026ad 	.word	0x080026ad
 80029b4:	2000021c 	.word	0x2000021c
 80029b8:	0800cde0 	.word	0x0800cde0
 80029bc:	08002679 	.word	0x08002679
 80029c0:	20000218 	.word	0x20000218
 80029c4:	0800cdf0 	.word	0x0800cdf0
 80029c8:	08002651 	.word	0x08002651
 80029cc:	20009a40 	.word	0x20009a40
 80029d0:	0800ce04 	.word	0x0800ce04
 80029d4:	08002481 	.word	0x08002481

080029d8 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80029d8:	b530      	push	{r4, r5, lr}
 80029da:	b083      	sub	sp, #12
 80029dc:	460d      	mov	r5, r1
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80029de:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 80029e2:	4613      	mov	r3, r2
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80029e4:	4601      	mov	r1, r0
 80029e6:	462a      	mov	r2, r5
 80029e8:	9400      	str	r4, [sp, #0]
 80029ea:	4805      	ldr	r0, [pc, #20]	; (8002a00 <BSP_SPI1_SendRecv+0x28>)
 80029ec:	f004 f98a 	bl	8006d04 <HAL_SPI_TransmitReceive>
 80029f0:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 80029f2:	bf14      	ite	ne
 80029f4:	f06f 0005 	mvnne.w	r0, #5
 80029f8:	2000      	moveq	r0, #0
 80029fa:	b003      	add	sp, #12
 80029fc:	bd30      	pop	{r4, r5, pc}
 80029fe:	bf00      	nop
 8002a00:	20009a4c 	.word	0x20009a4c

08002a04 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 8002a04:	f000 be8e 	b.w	8003724 <HAL_GetTick>

08002a08 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8002a08:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <MX_SPI1_Init+0x38>)
{
 8002a0a:	b538      	push	{r3, r4, r5, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002a0c:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi->Instance = SPI1;
 8002a10:	6002      	str	r2, [r0, #0]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a12:	2201      	movs	r2, #1
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002a14:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002a18:	2430      	movs	r4, #48	; 0x30
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002a1a:	6041      	str	r1, [r0, #4]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a1c:	6142      	str	r2, [r0, #20]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 10;
 8002a1e:	210a      	movs	r1, #10
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002a20:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002a22:	e9c0 5406 	strd	r5, r4, [r0, #24]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002a26:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002a2a:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi->Init.CRCPolynomial = 10;
 8002a2e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a30:	6102      	str	r2, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a32:	6282      	str	r2, [r0, #40]	; 0x28
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002a34:	f004 f862 	bl	8006afc <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8002a38:	3800      	subs	r0, #0
 8002a3a:	bf18      	it	ne
 8002a3c:	2001      	movne	r0, #1
 8002a3e:	bd38      	pop	{r3, r4, r5, pc}
 8002a40:	40013000 	.word	0x40013000

08002a44 <BSP_SPI1_Init>:
{
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(SPI1InitCounter++ == 0)
 8002a46:	4a2f      	ldr	r2, [pc, #188]	; (8002b04 <BSP_SPI1_Init+0xc0>)
  hspi1.Instance  = SPI1;
 8002a48:	4c2f      	ldr	r4, [pc, #188]	; (8002b08 <BSP_SPI1_Init+0xc4>)
  if(SPI1InitCounter++ == 0)
 8002a4a:	6813      	ldr	r3, [r2, #0]
  hspi1.Instance  = SPI1;
 8002a4c:	492f      	ldr	r1, [pc, #188]	; (8002b0c <BSP_SPI1_Init+0xc8>)
 8002a4e:	6021      	str	r1, [r4, #0]
  if(SPI1InitCounter++ == 0)
 8002a50:	1c59      	adds	r1, r3, #1
{
 8002a52:	b08b      	sub	sp, #44	; 0x2c
  if(SPI1InitCounter++ == 0)
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	b113      	cbz	r3, 8002a5e <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8002a58:	2000      	movs	r0, #0
}
 8002a5a:	b00b      	add	sp, #44	; 0x2c
 8002a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f004 fae8 	bl	8007034 <HAL_SPI_GetState>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d1f6      	bne.n	8002a58 <BSP_SPI1_Init+0x14>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a6a:	4a29      	ldr	r2, [pc, #164]	; (8002b10 <BSP_SPI1_Init+0xcc>)
 8002a6c:	9001      	str	r0, [sp, #4]
 8002a6e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002a70:	4828      	ldr	r0, [pc, #160]	; (8002b14 <BSP_SPI1_Init+0xd0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a72:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8002a76:	6451      	str	r1, [r2, #68]	; 0x44
 8002a78:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002a7a:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8002a7e:	9101      	str	r1, [sp, #4]
 8002a80:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	9302      	str	r3, [sp, #8]
 8002a84:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002a86:	f041 0101 	orr.w	r1, r1, #1
 8002a8a:	6311      	str	r1, [r2, #48]	; 0x30
 8002a8c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002a8e:	f001 0101 	and.w	r1, r1, #1
 8002a92:	9102      	str	r1, [sp, #8]
 8002a94:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a96:	9303      	str	r3, [sp, #12]
 8002a98:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002aa8:	2240      	movs	r2, #64	; 0x40
 8002aaa:	2302      	movs	r3, #2
 8002aac:	2600      	movs	r6, #0
 8002aae:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002ab0:	2505      	movs	r5, #5
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ab2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002ab4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab8:	f8dd c00c 	ldr.w	ip, [sp, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8002abc:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8002abe:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002ac2:	f001 fbcb 	bl	800425c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002aca:	4812      	ldr	r0, [pc, #72]	; (8002b14 <BSP_SPI1_Init+0xd0>)
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002acc:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002ace:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002ad0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ad4:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002ad8:	f001 fbc0 	bl	800425c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002adc:	480e      	ldr	r0, [pc, #56]	; (8002b18 <BSP_SPI1_Init+0xd4>)
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8002ade:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002ae4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8002ae6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002aea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002aee:	f001 fbb5 	bl	800425c <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff ff88 	bl	8002a08 <MX_SPI1_Init>
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d0ad      	beq.n	8002a58 <BSP_SPI1_Init+0x14>
				ret = BSP_ERROR_BUS_FAILURE;
 8002afc:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8002b00:	e7ab      	b.n	8002a5a <BSP_SPI1_Init+0x16>
 8002b02:	bf00      	nop
 8002b04:	20000220 	.word	0x20000220
 8002b08:	20009a4c 	.word	0x20009a4c
 8002b0c:	40013000 	.word	0x40013000
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40020400 	.word	0x40020400

08002b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b1c:	b500      	push	{lr}
 8002b1e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <MX_DMA_Init+0x30>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	9201      	str	r2, [sp, #4]
 8002b26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b28:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002b2c:	6319      	str	r1, [r3, #48]	; 0x30
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b34:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002b36:	2105      	movs	r1, #5
 8002b38:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b3a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002b3c:	f001 f86e 	bl	8003c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b40:	2038      	movs	r0, #56	; 0x38

}
 8002b42:	b003      	add	sp, #12
 8002b44:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b48:	f001 b8b2 	b.w	8003cb0 <HAL_NVIC_EnableIRQ>
 8002b4c:	40023800 	.word	0x40023800

08002b50 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop

08002b54 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8002b54:	2000      	movs	r0, #0
 8002b56:	4770      	bx	lr

08002b58 <vApplicationIdleHook>:
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop

08002b5c <vApplicationMallocFailedHook>:
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop

08002b60 <MX_FREERTOS_Init>:

  /* USER CODE BEGIN RTOS_EVENTS */

  /* USER CODE END RTOS_EVENTS */

}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop

08002b64 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	2400      	movs	r4, #0
{
 8002b6a:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002b70:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <MX_GPIO_Init+0x1b4>)
 8002b76:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 8002b7c:	4f67      	ldr	r7, [pc, #412]	; (8002d1c <MX_GPIO_Init+0x1b8>)
  HAL_GPIO_WritePin(GPIOB, DIR_LATCH_Pin|DIR_SER_Pin, GPIO_PIN_RESET);
 8002b7e:	4e68      	ldr	r6, [pc, #416]	; (8002d20 <MX_GPIO_Init+0x1bc>)
  HAL_GPIO_WritePin(GPIOB, DIR_EN_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 8002b80:	4d68      	ldr	r5, [pc, #416]	; (8002d24 <MX_GPIO_Init+0x1c0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b82:	f042 0204 	orr.w	r2, r2, #4
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
 8002b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b8a:	f002 0204 	and.w	r2, r2, #4
 8002b8e:	9201      	str	r2, [sp, #4]
 8002b90:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b92:	9402      	str	r4, [sp, #8]
 8002b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b9e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002ba2:	9202      	str	r2, [sp, #8]
 8002ba4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba6:	9403      	str	r4, [sp, #12]
 8002ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
 8002bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb2:	f002 0201 	and.w	r2, r2, #1
 8002bb6:	9203      	str	r2, [sp, #12]
 8002bb8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	9404      	str	r4, [sp, #16]
 8002bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bbe:	f042 0202 	orr.w	r2, r2, #2
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc6:	f002 0202 	and.w	r2, r2, #2
 8002bca:	9204      	str	r2, [sp, #16]
 8002bcc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bce:	9405      	str	r4, [sp, #20]
 8002bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd2:	f042 0208 	orr.w	r2, r2, #8
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 8002be0:	4622      	mov	r2, r4
 8002be2:	4638      	mov	r0, r7
 8002be4:	f44f 7191 	mov.w	r1, #290	; 0x122
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be8:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 8002bea:	f001 fd4f 	bl	800468c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIR_LATCH_Pin|DIR_SER_Pin, GPIO_PIN_RESET);
 8002bee:	4622      	mov	r2, r4
 8002bf0:	4630      	mov	r0, r6
 8002bf2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002bf6:	f001 fd49 	bl	800468c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIR_EN_Pin, GPIO_PIN_SET);
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	2120      	movs	r1, #32
 8002c00:	f001 fd44 	bl	800468c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 8002c04:	4622      	mov	r2, r4
 8002c06:	4628      	mov	r0, r5
 8002c08:	2101      	movs	r1, #1
 8002c0a:	f001 fd3f 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
 8002c0e:	4b46      	ldr	r3, [pc, #280]	; (8002d28 <MX_GPIO_Init+0x1c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 8002c12:	a906      	add	r1, sp, #24
 8002c14:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
 8002c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 8002c1e:	f001 fb1d 	bl	800425c <HAL_GPIO_Init>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c22:	a906      	add	r1, sp, #24
 8002c24:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 8002c26:	f64d 726e 	movw	r2, #57198	; 0xdf6e
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c32:	f001 fb13 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c36:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c38:	2203      	movs	r2, #3
 8002c3a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c3c:	483b      	ldr	r0, [pc, #236]	; (8002d2c <MX_GPIO_Init+0x1c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c40:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c44:	f001 fb0a 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_Pin;
 8002c48:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <MX_GPIO_Init+0x1c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	a906      	add	r1, sp, #24
 8002c4e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_Pin;
 8002c50:	2201      	movs	r2, #1
 8002c52:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002c56:	f001 fb01 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 - Accelerometer INT1 pin */
  GPIO_InitStruct.Pin = ACCELEROMETER_INT1_Pin;
 8002c5a:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <MX_GPIO_Init+0x1c4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ACCELEROMETER_INT1_GPIO_Port, &GPIO_InitStruct);
 8002c5e:	a906      	add	r1, sp, #24
 8002c60:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = ACCELEROMETER_INT1_Pin;
 8002c62:	2210      	movs	r2, #16
 8002c64:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(ACCELEROMETER_INT1_GPIO_Port, &GPIO_InitStruct);
 8002c68:	f001 faf8 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE Pins and Nucleo LED Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 8002c6c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002c70:	2301      	movs	r3, #1
 8002c72:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c76:	a906      	add	r1, sp, #24
 8002c78:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e9cd 2308 	strd	r2, r3, [sp, #32]

  /* Configure GPIO pins : Shift Register Pins */
  GPIO_InitStruct.Pin = DIR_LATCH_Pin|DIR_SER_Pin|DIR_EN_Pin;
 8002c82:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c86:	f001 fae9 	bl	800425c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIR_LATCH_Pin|DIR_SER_Pin|DIR_EN_Pin;
 8002c8a:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	a906      	add	r1, sp, #24
 8002c90:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = DIR_LATCH_Pin|DIR_SER_Pin|DIR_EN_Pin;
 8002c92:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8002c96:	2301      	movs	r3, #1
 8002c98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c9c:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca0:	f001 fadc 	bl	800425c <HAL_GPIO_Init>
  /* Configure GPIO pins : Shift Register Pins */
  GPIO_InitStruct.Pin = DIR_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(DIR_CLK_GPIO_Port, &GPIO_InitStruct);
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = DIR_CLK_Pin;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	2301      	movs	r3, #1
 8002cac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002cb0:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(DIR_CLK_GPIO_Port, &GPIO_InitStruct);
 8002cb4:	f001 fad2 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	4638      	mov	r0, r7
 8002cba:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8002cbc:	f649 0218 	movw	r2, #38936	; 0x9818
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc8:	f001 fac8 	bl	800425c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ccc:	4630      	mov	r0, r6
 8002cce:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8002cd0:	f24f 0287 	movw	r2, #61575	; 0xf087
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cdc:	f001 fabe 	bl	800425c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ce0:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ce2:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ce4:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ce6:	4812      	ldr	r0, [pc, #72]	; (8002d30 <MX_GPIO_Init+0x1cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cea:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cee:	f001 fab5 	bl	800425c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 1);
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	2105      	movs	r1, #5
 8002cf6:	2006      	movs	r0, #6
 8002cf8:	f000 ff90 	bl	8003c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002cfc:	2006      	movs	r0, #6
 8002cfe:	f000 ffd7 	bl	8003cb0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 2);
 8002d02:	2202      	movs	r2, #2
 8002d04:	2106      	movs	r1, #6
 8002d06:	2028      	movs	r0, #40	; 0x28
 8002d08:	f000 ff88 	bl	8003c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d0c:	2028      	movs	r0, #40	; 0x28
 8002d0e:	f000 ffcf 	bl	8003cb0 <HAL_NVIC_EnableIRQ>

  // HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 3);
  // HAL_NVIC_EnableIRQ(EXTI4_IRQn);
}
 8002d12:	b00d      	add	sp, #52	; 0x34
 8002d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	40020400 	.word	0x40020400
 8002d24:	40020800 	.word	0x40020800
 8002d28:	10110000 	.word	0x10110000
 8002d2c:	40021c00 	.word	0x40021c00
 8002d30:	40020c00 	.word	0x40020c00

08002d34 <MX_I2C1_Init>:
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d34:	480b      	ldr	r0, [pc, #44]	; (8002d64 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 8002d36:	490c      	ldr	r1, [pc, #48]	; (8002d68 <MX_I2C1_Init+0x34>)
{
 8002d38:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_I2C1_Init+0x38>)
 8002d3c:	6003      	str	r3, [r0, #0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d42:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
 8002d44:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8002d48:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d4c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.ClockSpeed = 100000;
 8002d50:	6041      	str	r1, [r0, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d52:	6102      	str	r2, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d54:	f001 ff00 	bl	8004b58 <HAL_I2C_Init>
 8002d58:	b900      	cbnz	r0, 8002d5c <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d5a:	bd08      	pop	{r3, pc}
 8002d5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d60:	f000 b8ec 	b.w	8002f3c <Error_Handler>
 8002d64:	20009aa4 	.word	0x20009aa4
 8002d68:	000186a0 	.word	0x000186a0
 8002d6c:	40005400 	.word	0x40005400

08002d70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d70:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8002d72:	6802      	ldr	r2, [r0, #0]
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_I2C_MspInit+0x78>)
{
 8002d76:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 8002d7a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002d80:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002d84:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d88:	b008      	add	sp, #32
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8c:	4d17      	ldr	r5, [pc, #92]	; (8002dec <HAL_I2C_MspInit+0x7c>)
 8002d8e:	9400      	str	r4, [sp, #0]
 8002d90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d92:	4817      	ldr	r0, [pc, #92]	; (8002df0 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	632b      	str	r3, [r5, #48]	; 0x30
 8002d9a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002da2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002da6:	2312      	movs	r3, #18
 8002da8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002dac:	2201      	movs	r2, #1
 8002dae:	2303      	movs	r3, #3
 8002db0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002db6:	2304      	movs	r3, #4
 8002db8:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dba:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	f001 fa4e 	bl	800425c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dc0:	9401      	str	r4, [sp, #4]
 8002dc2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dc8:	642b      	str	r3, [r5, #64]	; 0x40
 8002dca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 1);
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	2106      	movs	r1, #6
 8002dd6:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dd8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 1);
 8002dda:	f000 ff1f 	bl	8003c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002dde:	201f      	movs	r0, #31
 8002de0:	f000 ff66 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
}
 8002de4:	b008      	add	sp, #32
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	40005400 	.word	0x40005400
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020400 	.word	0x40020400

08002df4 <_write>:
  * @retval length of string/characters
  */
int _write(int file, char *ptr, int len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	for(uint16_t i=0 ; i<len ; i++)
 8002df4:	1e10      	subs	r0, r2, #0
 8002df6:	dd1c      	ble.n	8002e32 <_write+0x3e>
{
 8002df8:	b430      	push	{r4, r5}
	for(uint16_t i=0 ; i<len ; i++)
 8002dfa:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002dfc:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8002e00:	f8d4 5e80 	ldr.w	r5, [r4, #3712]	; 0xe80
 8002e04:	07ed      	lsls	r5, r5, #31
		ITM_SendChar((*ptr++));
 8002e06:	f101 0101 	add.w	r1, r1, #1
 8002e0a:	d50c      	bpl.n	8002e26 <_write+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002e0c:	f8d4 2e00 	ldr.w	r2, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002e10:	07d2      	lsls	r2, r2, #31
 8002e12:	d508      	bpl.n	8002e26 <_write+0x32>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002e14:	6825      	ldr	r5, [r4, #0]
 8002e16:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8002e1a:	b91d      	cbnz	r5, 8002e24 <_write+0x30>
    {
      __NOP();
 8002e1c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002e1e:	6825      	ldr	r5, [r4, #0]
 8002e20:	2d00      	cmp	r5, #0
 8002e22:	d0fb      	beq.n	8002e1c <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002e24:	7022      	strb	r2, [r4, #0]
	for(uint16_t i=0 ; i<len ; i++)
 8002e26:	3301      	adds	r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4283      	cmp	r3, r0
 8002e2c:	dbe8      	blt.n	8002e00 <_write+0xc>

	return len;
}
 8002e2e:	bc30      	pop	{r4, r5}
 8002e30:	4770      	bx	lr
 8002e32:	4770      	bx	lr

08002e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e34:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e36:	2300      	movs	r3, #0
{
 8002e38:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e3a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8002e3e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e42:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002e46:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4a:	4922      	ldr	r1, [pc, #136]	; (8002ed4 <SystemClock_Config+0xa0>)
 8002e4c:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e4e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e50:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002e5a:	6408      	str	r0, [r1, #64]	; 0x40
 8002e5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e5e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002e62:	9100      	str	r1, [sp, #0]
 8002e64:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	6813      	ldr	r3, [r2, #0]
 8002e72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e76:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e78:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e7a:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e7c:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e7e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e80:	2202      	movs	r2, #2
 8002e82:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e84:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e86:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e8a:	e9cd 410b 	strd	r4, r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e8e:	25c8      	movs	r5, #200	; 0xc8
 8002e90:	2410      	movs	r4, #16
 8002e92:	2202      	movs	r2, #2
 8002e94:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 200;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e96:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e98:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8002e9c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea0:	f003 f9e0 	bl	8006264 <HAL_RCC_OscConfig>
 8002ea4:	b108      	cbz	r0, 8002eaa <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002eaa:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eac:	240f      	movs	r4, #15
 8002eae:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002eb0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002eb8:	a802      	add	r0, sp, #8
 8002eba:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ebc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002ec0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002ec4:	f003 fc84 	bl	80067d0 <HAL_RCC_ClockConfig>
 8002ec8:	b108      	cbz	r0, 8002ece <SystemClock_Config+0x9a>
 8002eca:	b672      	cpsid	i
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <SystemClock_Config+0x98>
}
 8002ece:	b015      	add	sp, #84	; 0x54
 8002ed0:	bd30      	pop	{r4, r5, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40007000 	.word	0x40007000

08002edc <main>:
{
 8002edc:	b508      	push	{r3, lr}
  HAL_Init();
 8002ede:	f000 fbfb 	bl	80036d8 <HAL_Init>
  SystemClock_Config();
 8002ee2:	f7ff ffa7 	bl	8002e34 <SystemClock_Config>
  MX_GPIO_Init();
 8002ee6:	f7ff fe3d 	bl	8002b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8002eea:	f7ff fe17 	bl	8002b1c <MX_DMA_Init>
  MX_ADC1_Init();
 8002eee:	f7fe fe19 	bl	8001b24 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002ef2:	f7ff ff1f 	bl	8002d34 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002ef6:	f000 fad5 	bl	80034a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002efa:	f000 fb5d 	bl	80035b8 <MX_TIM3_Init>
  printf("\tSTM32F411RE Nucleo-64 Board\n");
 8002efe:	480c      	ldr	r0, [pc, #48]	; (8002f30 <main+0x54>)
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8002f00:	4c0c      	ldr	r4, [pc, #48]	; (8002f34 <main+0x58>)
  printf("\tSTM32F411RE Nucleo-64 Board\n");
 8002f02:	f008 fdfd 	bl	800bb00 <puts>
  printf("\tFreeRTOS-BLE-Car\n\n");
 8002f06:	480c      	ldr	r0, [pc, #48]	; (8002f38 <main+0x5c>)
 8002f08:	f008 fdfa 	bl	800bb00 <puts>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002f0c:	f006 fa0e 	bl	800932c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002f10:	f7ff fe26 	bl	8002b60 <MX_FREERTOS_Init>
  FRTOS_Init_SWTimers();
 8002f14:	f7ff fc94 	bl	8002840 <FRTOS_Init_SWTimers>
  FRTOS_Init_Tasks();
 8002f18:	f7ff fcca 	bl	80028b0 <FRTOS_Init_Tasks>
  osKernelStart();
 8002f1c:	f006 fa18 	bl	8009350 <osKernelStart>
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8002f20:	4620      	mov	r0, r4
 8002f22:	2120      	movs	r1, #32
 8002f24:	f001 fbcc 	bl	80046c0 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8002f28:	2064      	movs	r0, #100	; 0x64
 8002f2a:	f000 fc01 	bl	8003730 <HAL_Delay>
  while (1)
 8002f2e:	e7f7      	b.n	8002f20 <main+0x44>
 8002f30:	0800ce24 	.word	0x0800ce24
 8002f34:	40020000 	.word	0x40020000
 8002f38:	0800ce44 	.word	0x0800ce44

08002f3c <Error_Handler>:
 8002f3c:	b672      	cpsid	i
  while (1)
 8002f3e:	e7fe      	b.n	8002f3e <Error_Handler+0x2>

08002f40 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002f40:	460a      	mov	r2, r1
 8002f42:	b508      	push	{r3, lr}
	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8002f44:	4601      	mov	r1, r0
 8002f46:	4802      	ldr	r0, [pc, #8]	; (8002f50 <assert_failed+0x10>)
 8002f48:	f008 fd54 	bl	800b9f4 <iprintf>
	for(;;);
 8002f4c:	e7fe      	b.n	8002f4c <assert_failed+0xc>
 8002f4e:	bf00      	nop
 8002f50:	0800ce58 	.word	0x0800ce58

08002f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f54:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_MspInit+0x3c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	9200      	str	r2, [sp, #0]
 8002f5c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002f5e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002f62:	6459      	str	r1, [r3, #68]	; 0x44
 8002f64:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002f66:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002f6a:	9100      	str	r1, [sp, #0]
 8002f6c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	9201      	str	r2, [sp, #4]
 8002f70:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f72:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002f76:	6419      	str	r1, [r3, #64]	; 0x40
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f82:	210f      	movs	r1, #15
 8002f84:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f88:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f8a:	f000 be47 	b.w	8003c1c <HAL_NVIC_SetPriority>
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800

08002f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f94:	b530      	push	{r4, r5, lr}
 8002f96:	4601      	mov	r1, r0
 8002f98:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	201c      	movs	r0, #28
 8002f9e:	f000 fe3d 	bl	8003c1c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fa2:	201c      	movs	r0, #28
 8002fa4:	f000 fe84 	bl	8003cb0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa8:	2500      	movs	r5, #0
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_InitTick+0x70>)
 8002fac:	9502      	str	r5, [sp, #8]
 8002fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002fb0:	4c15      	ldr	r4, [pc, #84]	; (8003008 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fbe:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002fc0:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fc2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002fc4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fc6:	f003 fd15 	bl	80069f4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fca:	f003 fd03 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fce:	4a0f      	ldr	r2, [pc, #60]	; (800300c <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8002fd0:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002fd2:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	0c9b      	lsrs	r3, r3, #18
 8002fda:	3b01      	subs	r3, #1
  htim2.Instance = TIM2;
 8002fdc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002fe0:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002fe4:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe6:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim2.Instance = TIM2;
 8002fea:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002fec:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002fee:	f004 f8cb 	bl	8007188 <HAL_TIM_Base_Init>
 8002ff2:	b110      	cbz	r0, 8002ffa <HAL_InitTick+0x66>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
 8002ff4:	2001      	movs	r0, #1
}
 8002ff6:	b009      	add	sp, #36	; 0x24
 8002ff8:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f004 f99a 	bl	8007334 <HAL_TIM_Base_Start_IT>
}
 8003000:	b009      	add	sp, #36	; 0x24
 8003002:	bd30      	pop	{r4, r5, pc}
 8003004:	40023800 	.word	0x40023800
 8003008:	20009af8 	.word	0x20009af8
 800300c:	431bde83 	.word	0x431bde83

08003010 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003010:	e7fe      	b.n	8003010 <NMI_Handler>
 8003012:	bf00      	nop

08003014 <HardFault_Handler>:
 * It extracts the location of stack frame and passes it to the handler written
 * in C as a pointer. We also extract the LR value as second parameter.
 */
void HardFault_Handler(void)
{
	asm(
 8003014:	f01e 0f04 	tst.w	lr, #4
 8003018:	bf0c      	ite	eq
 800301a:	f3ef 8008 	mrseq	r0, MSP
 800301e:	f3ef 8009 	mrsne	r0, PSP
 8003022:	4671      	mov	r1, lr
 8003024:	f000 b802 	b.w	800302c <HardFault_Handler_C>
		"MRSEQ  R0, MSP\n\t"
		"MRSNE  R0, PSP\n\t"
		"MOV    R1, LR\n\t"
		"B      (HardFault_Handler_C)\n\t"
	);
}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop

0800302c <HardFault_Handler_C>:
 * from the assembly wrapper as input parameters
 */
void HardFault_Handler_C(unsigned long * hardfault_args, unsigned int lr_value)
{
	/* Relevant registers that display code/memory address that caused hardfault */
	bus_fault_address       = SCB->BFAR;
 800302c:	4c43      	ldr	r4, [pc, #268]	; (800313c <HardFault_Handler_C+0x110>)
 800302e:	4a44      	ldr	r2, [pc, #272]	; (8003140 <HardFault_Handler_C+0x114>)
	memmanage_fault_address = SCB->MMFAR;
	cfsr                    = SCB->CFSR;
 8003030:	4d44      	ldr	r5, [pc, #272]	; (8003144 <HardFault_Handler_C+0x118>)

	/* Relevant ARM registers */
	stacked_r0  = ((unsigned long) hardfault_args[0]);
	stacked_r1  = ((unsigned long) hardfault_args[1]);
	stacked_r2  = ((unsigned long) hardfault_args[2]);
	stacked_r3  = ((unsigned long) hardfault_args[3]);
 8003032:	f8df a174 	ldr.w	sl, [pc, #372]	; 80031a8 <HardFault_Handler_C+0x17c>
	stacked_r12 = ((unsigned long) hardfault_args[4]);
 8003036:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80031ac <HardFault_Handler_C+0x180>
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 800303a:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80031b0 <HardFault_Handler_C+0x184>
{
 800303e:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	bus_fault_address       = SCB->BFAR;
 8003042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003044:	6013      	str	r3, [r2, #0]
	memmanage_fault_address = SCB->MMFAR;
 8003046:	4a40      	ldr	r2, [pc, #256]	; (8003148 <HardFault_Handler_C+0x11c>)
 8003048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800304a:	6013      	str	r3, [r2, #0]
	cfsr                    = SCB->CFSR;
 800304c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800304e:	602b      	str	r3, [r5, #0]
	stacked_r0  = ((unsigned long) hardfault_args[0]);
 8003050:	4a3e      	ldr	r2, [pc, #248]	; (800314c <HardFault_Handler_C+0x120>)
 8003052:	6806      	ldr	r6, [r0, #0]
	stacked_r1  = ((unsigned long) hardfault_args[1]);
 8003054:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <HardFault_Handler_C+0x124>)
	stacked_r0  = ((unsigned long) hardfault_args[0]);
 8003056:	6016      	str	r6, [r2, #0]
	stacked_r2  = ((unsigned long) hardfault_args[2]);
 8003058:	f8df b158 	ldr.w	fp, [pc, #344]	; 80031b4 <HardFault_Handler_C+0x188>
	stacked_r1  = ((unsigned long) hardfault_args[1]);
 800305c:	6842      	ldr	r2, [r0, #4]
 800305e:	601a      	str	r2, [r3, #0]
	stacked_r2  = ((unsigned long) hardfault_args[2]);
 8003060:	6883      	ldr	r3, [r0, #8]
 8003062:	f8cb 3000 	str.w	r3, [fp]
	stacked_r3  = ((unsigned long) hardfault_args[3]);
 8003066:	68c3      	ldr	r3, [r0, #12]
 8003068:	f8ca 3000 	str.w	r3, [sl]
	stacked_r12 = ((unsigned long) hardfault_args[4]);
 800306c:	6903      	ldr	r3, [r0, #16]
 800306e:	f8c9 3000 	str.w	r3, [r9]
	stacked_pc  = ((unsigned long) hardfault_args[6]);
	stacked_psr = ((unsigned long) hardfault_args[7]);
 8003072:	e9d0 c206 	ldrd	ip, r2, [r0, #24]
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 8003076:	6943      	ldr	r3, [r0, #20]
	stacked_pc  = ((unsigned long) hardfault_args[6]);
 8003078:	4f36      	ldr	r7, [pc, #216]	; (8003154 <HardFault_Handler_C+0x128>)
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 800307a:	f8c8 3000 	str.w	r3, [r8]
	stacked_psr = ((unsigned long) hardfault_args[7]);
 800307e:	4b36      	ldr	r3, [pc, #216]	; (8003158 <HardFault_Handler_C+0x12c>)

	/* Need to enable ITM/SWD on CubeIDE and MDK-ARM to observer printf() statements */
	printf ("[HardFault]\n");
 8003080:	4836      	ldr	r0, [pc, #216]	; (800315c <HardFault_Handler_C+0x130>)
	stacked_pc  = ((unsigned long) hardfault_args[6]);
 8003082:	f8c7 c000 	str.w	ip, [r7]
	stacked_psr = ((unsigned long) hardfault_args[7]);
 8003086:	601a      	str	r2, [r3, #0]
{
 8003088:	460e      	mov	r6, r1
	printf ("[HardFault]\n");
 800308a:	f008 fd39 	bl	800bb00 <puts>
	printf ("- Stack frame:\n");
 800308e:	4834      	ldr	r0, [pc, #208]	; (8003160 <HardFault_Handler_C+0x134>)
 8003090:	f008 fd36 	bl	800bb00 <puts>
	printf (" R0  = %lx\n", stacked_r0);
 8003094:	4a2d      	ldr	r2, [pc, #180]	; (800314c <HardFault_Handler_C+0x120>)
 8003096:	4833      	ldr	r0, [pc, #204]	; (8003164 <HardFault_Handler_C+0x138>)
 8003098:	6811      	ldr	r1, [r2, #0]
 800309a:	f008 fcab 	bl	800b9f4 <iprintf>
	printf (" R1  = %lx\n", stacked_r1);
 800309e:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <HardFault_Handler_C+0x124>)
 80030a0:	4831      	ldr	r0, [pc, #196]	; (8003168 <HardFault_Handler_C+0x13c>)
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	f008 fca6 	bl	800b9f4 <iprintf>
	printf (" R2  = %lx\n", stacked_r2);
 80030a8:	f8db 1000 	ldr.w	r1, [fp]
 80030ac:	482f      	ldr	r0, [pc, #188]	; (800316c <HardFault_Handler_C+0x140>)
 80030ae:	f008 fca1 	bl	800b9f4 <iprintf>
	printf (" R3  = %lx\n", stacked_r3);
 80030b2:	f8da 1000 	ldr.w	r1, [sl]
 80030b6:	482e      	ldr	r0, [pc, #184]	; (8003170 <HardFault_Handler_C+0x144>)
 80030b8:	f008 fc9c 	bl	800b9f4 <iprintf>
	printf (" R12 = %lx\n", stacked_r12);
 80030bc:	f8d9 1000 	ldr.w	r1, [r9]
 80030c0:	482c      	ldr	r0, [pc, #176]	; (8003174 <HardFault_Handler_C+0x148>)
 80030c2:	f008 fc97 	bl	800b9f4 <iprintf>
	printf (" LR  = %lx\n", stacked_lr);
 80030c6:	f8d8 1000 	ldr.w	r1, [r8]
 80030ca:	482b      	ldr	r0, [pc, #172]	; (8003178 <HardFault_Handler_C+0x14c>)
 80030cc:	f008 fc92 	bl	800b9f4 <iprintf>
	printf (" PC  = %lx\n", stacked_pc);
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	482a      	ldr	r0, [pc, #168]	; (800317c <HardFault_Handler_C+0x150>)
 80030d4:	f008 fc8e 	bl	800b9f4 <iprintf>
	printf (" PSR = %lx\n", stacked_psr);
 80030d8:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <HardFault_Handler_C+0x12c>)
 80030da:	4829      	ldr	r0, [pc, #164]	; (8003180 <HardFault_Handler_C+0x154>)
 80030dc:	6819      	ldr	r1, [r3, #0]
 80030de:	f008 fc89 	bl	800b9f4 <iprintf>
	printf ("- FSR/FAR:\n");
 80030e2:	4828      	ldr	r0, [pc, #160]	; (8003184 <HardFault_Handler_C+0x158>)
 80030e4:	f008 fd0c 	bl	800bb00 <puts>
	printf (" CFSR = %lx\n", cfsr);
 80030e8:	6829      	ldr	r1, [r5, #0]
 80030ea:	4827      	ldr	r0, [pc, #156]	; (8003188 <HardFault_Handler_C+0x15c>)
 80030ec:	f008 fc82 	bl	800b9f4 <iprintf>
	printf (" HFSR = 0x%08X\n", (unsigned int)(SCB->HFSR));
 80030f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80030f2:	4826      	ldr	r0, [pc, #152]	; (800318c <HardFault_Handler_C+0x160>)
 80030f4:	f008 fc7e 	bl	800b9f4 <iprintf>
	printf (" DFSR = 0x%08X\n", (unsigned int)(SCB->DFSR));
 80030f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80030fa:	4825      	ldr	r0, [pc, #148]	; (8003190 <HardFault_Handler_C+0x164>)
 80030fc:	f008 fc7a 	bl	800b9f4 <iprintf>
	printf (" AFSR = 0x%08X\n", (unsigned int)(SCB->AFSR));
 8003100:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003102:	4824      	ldr	r0, [pc, #144]	; (8003194 <HardFault_Handler_C+0x168>)
 8003104:	f008 fc76 	bl	800b9f4 <iprintf>
	if (cfsr & 0x0080) printf (" MMFAR = %lx\n", memmanage_fault_address);
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	061a      	lsls	r2, r3, #24
 800310c:	d409      	bmi.n	8003122 <HardFault_Handler_C+0xf6>
	if (cfsr & 0x8000) printf (" BFAR = %lx\n", bus_fault_address);
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	d40e      	bmi.n	8003130 <HardFault_Handler_C+0x104>
	printf ("- Misc\n");
 8003112:	4821      	ldr	r0, [pc, #132]	; (8003198 <HardFault_Handler_C+0x16c>)
 8003114:	f008 fcf4 	bl	800bb00 <puts>
	printf (" LR/EXC_RETURN= %x\n", lr_value);
 8003118:	4820      	ldr	r0, [pc, #128]	; (800319c <HardFault_Handler_C+0x170>)
 800311a:	4631      	mov	r1, r6
 800311c:	f008 fc6a 	bl	800b9f4 <iprintf>

	/* Infinite loop - halt program/software */
	while(1);
 8003120:	e7fe      	b.n	8003120 <HardFault_Handler_C+0xf4>
	if (cfsr & 0x0080) printf (" MMFAR = %lx\n", memmanage_fault_address);
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HardFault_Handler_C+0x11c>)
 8003124:	481e      	ldr	r0, [pc, #120]	; (80031a0 <HardFault_Handler_C+0x174>)
 8003126:	6819      	ldr	r1, [r3, #0]
 8003128:	f008 fc64 	bl	800b9f4 <iprintf>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	e7ee      	b.n	800310e <HardFault_Handler_C+0xe2>
	if (cfsr & 0x8000) printf (" BFAR = %lx\n", bus_fault_address);
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HardFault_Handler_C+0x114>)
 8003132:	481c      	ldr	r0, [pc, #112]	; (80031a4 <HardFault_Handler_C+0x178>)
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	f008 fc5d 	bl	800b9f4 <iprintf>
 800313a:	e7ea      	b.n	8003112 <HardFault_Handler_C+0xe6>
 800313c:	e000ed00 	.word	0xe000ed00
 8003140:	20009b44 	.word	0x20009b44
 8003144:	20009b68 	.word	0x20009b68
 8003148:	20009b40 	.word	0x20009b40
 800314c:	20009b58 	.word	0x20009b58
 8003150:	20009b48 	.word	0x20009b48
 8003154:	20009b54 	.word	0x20009b54
 8003158:	20009b60 	.word	0x20009b60
 800315c:	0800ce88 	.word	0x0800ce88
 8003160:	0800ce94 	.word	0x0800ce94
 8003164:	0800cea4 	.word	0x0800cea4
 8003168:	0800ceb0 	.word	0x0800ceb0
 800316c:	0800cebc 	.word	0x0800cebc
 8003170:	0800cec8 	.word	0x0800cec8
 8003174:	0800ced4 	.word	0x0800ced4
 8003178:	0800cee0 	.word	0x0800cee0
 800317c:	0800ceec 	.word	0x0800ceec
 8003180:	0800cef8 	.word	0x0800cef8
 8003184:	0800cf04 	.word	0x0800cf04
 8003188:	0800cf10 	.word	0x0800cf10
 800318c:	0800cf20 	.word	0x0800cf20
 8003190:	0800cf30 	.word	0x0800cf30
 8003194:	0800cf40 	.word	0x0800cf40
 8003198:	0800cf70 	.word	0x0800cf70
 800319c:	0800cf78 	.word	0x0800cf78
 80031a0:	0800cf50 	.word	0x0800cf50
 80031a4:	0800cf60 	.word	0x0800cf60
 80031a8:	20009b4c 	.word	0x20009b4c
 80031ac:	20009b5c 	.word	0x20009b5c
 80031b0:	20009b50 	.word	0x20009b50
 80031b4:	20009b64 	.word	0x20009b64

080031b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <MemManage_Handler>
 80031ba:	bf00      	nop

080031bc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031bc:	e7fe      	b.n	80031bc <BusFault_Handler>
 80031be:	bf00      	nop

080031c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c0:	e7fe      	b.n	80031c0 <UsageFault_Handler>
 80031c2:	bf00      	nop

080031c4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop

080031c8 <EXTI0_IRQHandler>:
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80031c8:	4801      	ldr	r0, [pc, #4]	; (80031d0 <EXTI0_IRQHandler+0x8>)
 80031ca:	f001 b831 	b.w	8004230 <HAL_EXTI_IRQHandler>
 80031ce:	bf00      	nop
 80031d0:	200098f8 	.word	0x200098f8

080031d4 <EXTI4_IRQHandler>:
/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
  HAL_EXTI_IRQHandler(GPIO_PIN_4);
 80031d4:	2010      	movs	r0, #16
 80031d6:	f001 b82b 	b.w	8004230 <HAL_EXTI_IRQHandler>
 80031da:	bf00      	nop

080031dc <TIM1_BRK_TIM9_IRQHandler>:
/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim9);
 80031dc:	4801      	ldr	r0, [pc, #4]	; (80031e4 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 80031de:	f004 bd17 	b.w	8007c10 <HAL_TIM_IRQHandler>
 80031e2:	bf00      	nop
 80031e4:	20009c44 	.word	0x20009c44

080031e8 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim2);
 80031e8:	4801      	ldr	r0, [pc, #4]	; (80031f0 <TIM2_IRQHandler+0x8>)
 80031ea:	f004 bd11 	b.w	8007c10 <HAL_TIM_IRQHandler>
 80031ee:	bf00      	nop
 80031f0:	20009af8 	.word	0x20009af8

080031f4 <I2C1_EV_IRQHandler>:
/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80031f4:	4801      	ldr	r0, [pc, #4]	; (80031fc <I2C1_EV_IRQHandler+0x8>)
 80031f6:	f002 bb6f 	b.w	80058d8 <HAL_I2C_EV_IRQHandler>
 80031fa:	bf00      	nop
 80031fc:	20009aa4 	.word	0x20009aa4

08003200 <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003200:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003204:	f001 ba72 	b.w	80046ec <HAL_GPIO_EXTI_IRQHandler>

08003208 <TIM5_IRQHandler>:
/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim5);
 8003208:	4801      	ldr	r0, [pc, #4]	; (8003210 <TIM5_IRQHandler+0x8>)
 800320a:	f004 bd01 	b.w	8007c10 <HAL_TIM_IRQHandler>
 800320e:	bf00      	nop
 8003210:	20009b6c 	.word	0x20009b6c

08003214 <DMA2_Stream0_IRQHandler>:
/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003214:	4801      	ldr	r0, [pc, #4]	; (800321c <DMA2_Stream0_IRQHandler+0x8>)
 8003216:	f000 beef 	b.w	8003ff8 <HAL_DMA_IRQHandler>
 800321a:	bf00      	nop
 800321c:	20009948 	.word	0x20009948

08003220 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)
 8003220:	6803      	ldr	r3, [r0, #0]
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003226:	d000      	beq.n	800322a <HAL_TIM_PeriodElapsedCallback+0xa>
	}
	else if(htim->Instance == TIM9)
	{

	}
}
 8003228:	4770      	bx	lr
		HAL_IncTick();
 800322a:	f000 ba6f 	b.w	800370c <HAL_IncTick>
 800322e:	bf00      	nop

08003230 <HAL_GPIO_EXTI_Callback>:
 * @note   This function is called after end of interrupt execution/processing
 * @param  GPIO_Pin: GPIO pin that registered the rising edge/falling edge signal
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == NUCLEO_PB_Pin)
 8003230:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003234:	d000      	beq.n	8003238 <HAL_GPIO_EXTI_Callback+0x8>
 8003236:	4770      	bx	lr
{
 8003238:	b500      	push	{lr}
	{
		/* 10ms debounce button */
		HAL_Delay(10);
 800323a:	200a      	movs	r0, #10
{
 800323c:	b085      	sub	sp, #20
		HAL_Delay(10);
 800323e:	f000 fa77 	bl	8003730 <HAL_Delay>
		/* This value becomes pdTRUE if giving the notification caused a task to unblock, and the unblocked task has a
		   higher priority than the currently running task, in which a context switch should occur */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;

		/* Notifies task that the push button was pressed on the microcontroller */
		xTaskNotifyFromISR(h_TaskPBProcessing, FRTOS_TASK_NOTIF_PB_PRESSED, eSetBits, &xHigherPriorityTaskWoken);
 8003242:	480b      	ldr	r0, [pc, #44]	; (8003270 <HAL_GPIO_EXTI_Callback+0x40>)
 8003244:	a903      	add	r1, sp, #12
 8003246:	2201      	movs	r2, #1
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003248:	2300      	movs	r3, #0
		xTaskNotifyFromISR(h_TaskPBProcessing, FRTOS_TASK_NOTIF_PB_PRESSED, eSetBits, &xHigherPriorityTaskWoken);
 800324a:	6800      	ldr	r0, [r0, #0]
 800324c:	9100      	str	r1, [sp, #0]
 800324e:	4611      	mov	r1, r2
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003250:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskPBProcessing, FRTOS_TASK_NOTIF_PB_PRESSED, eSetBits, &xHigherPriorityTaskWoken);
 8003252:	f007 fd81 	bl	800ad58 <xTaskGenericNotifyFromISR>

		/* Force context switch if xHigherPriorityTaskWoken == pdTRUE. This does nothing if xHigherPriorityTaskWoken
		   is pdFALSE */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003256:	9b03      	ldr	r3, [sp, #12]
 8003258:	b13b      	cbz	r3, 800326a <HAL_GPIO_EXTI_Callback+0x3a>
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_GPIO_EXTI_Callback+0x44>)
 800325c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	f3bf 8f6f 	isb	sy

		/* Force context switch if xHigherPriorityTaskWoken == pdTRUE. This does nothing if xHigherPriorityTaskWoken
		   is pdFALSE */
		// portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}
}
 800326a:	b005      	add	sp, #20
 800326c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003270:	20009a2c 	.word	0x20009a2c
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003278:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327a:	1e16      	subs	r6, r2, #0
 800327c:	dd07      	ble.n	800328e <_read+0x16>
 800327e:	460c      	mov	r4, r1
 8003280:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003282:	f3af 8000 	nop.w
 8003286:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328a:	42a5      	cmp	r5, r4
 800328c:	d1f9      	bne.n	8003282 <_read+0xa>
	}

return len;
}
 800328e:	4630      	mov	r0, r6
 8003290:	bd70      	pop	{r4, r5, r6, pc}
 8003292:	bf00      	nop

08003294 <_close>:
}

int _close(int file)
{
	return -1;
}
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop

0800329c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800329c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032a0:	604b      	str	r3, [r1, #4]
	return 0;
}
 80032a2:	2000      	movs	r0, #0
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop

080032a8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80032a8:	2001      	movs	r0, #1
 80032aa:	4770      	bx	lr

080032ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80032ac:	2000      	movs	r0, #0
 80032ae:	4770      	bx	lr

080032b0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032b0:	490c      	ldr	r1, [pc, #48]	; (80032e4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b2:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80032b4:	680b      	ldr	r3, [r1, #0]
{
 80032b6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b8:	4c0c      	ldr	r4, [pc, #48]	; (80032ec <_sbrk+0x3c>)
 80032ba:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80032bc:	b12b      	cbz	r3, 80032ca <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032be:	4418      	add	r0, r3
 80032c0:	4290      	cmp	r0, r2
 80032c2:	d807      	bhi.n	80032d4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80032c4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <_sbrk+0x40>)
 80032cc:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80032ce:	4418      	add	r0, r3
 80032d0:	4290      	cmp	r0, r2
 80032d2:	d9f7      	bls.n	80032c4 <_sbrk+0x14>
    errno = ENOMEM;
 80032d4:	f008 fb4e 	bl	800b974 <__errno>
 80032d8:	230c      	movs	r3, #12
 80032da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd10      	pop	{r4, pc}
 80032e4:	20000224 	.word	0x20000224
 80032e8:	20020000 	.word	0x20020000
 80032ec:	00001f00 	.word	0x00001f00
 80032f0:	20009d10 	.word	0x20009d10

080032f4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032f4:	4a03      	ldr	r2, [pc, #12]	; (8003304 <SystemInit+0x10>)
 80032f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80032fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM9_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003308:	b500      	push	{lr}
	if(tim_baseHandle->Instance==TIM1)
 800330a:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <HAL_TIM_Base_MspInit+0xb4>)
 800330c:	6803      	ldr	r3, [r0, #0]
 800330e:	4293      	cmp	r3, r2
{
 8003310:	b085      	sub	sp, #20
	if(tim_baseHandle->Instance==TIM1)
 8003312:	d01a      	beq.n	800334a <HAL_TIM_Base_MspInit+0x42>
		__HAL_RCC_TIM1_CLK_ENABLE();
		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}
	else if(tim_baseHandle->Instance==TIM3)
 8003314:	4a2a      	ldr	r2, [pc, #168]	; (80033c0 <HAL_TIM_Base_MspInit+0xb8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d008      	beq.n	800332c <HAL_TIM_Base_MspInit+0x24>
		__HAL_RCC_TIM3_CLK_ENABLE();
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
	else if(tim_baseHandle->Instance==TIM5)
 800331a:	4a2a      	ldr	r2, [pc, #168]	; (80033c4 <HAL_TIM_Base_MspInit+0xbc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d023      	beq.n	8003368 <HAL_TIM_Base_MspInit+0x60>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
		/* USER CODE BEGIN TIM5_MspInit 1 */

		/* USER CODE END TIM5_MspInit 1 */
	}
	else if(tim_baseHandle->Instance==TIM9)
 8003320:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <HAL_TIM_Base_MspInit+0xc0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d037      	beq.n	8003396 <HAL_TIM_Base_MspInit+0x8e>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
		/* USER CODE BEGIN TIM9_MspInit 1 */

		/* USER CODE END TIM9_MspInit 1 */
	}
}
 8003326:	b005      	add	sp, #20
 8003328:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM3_CLK_ENABLE();
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <HAL_TIM_Base_MspInit+0xc4>)
 800332e:	2200      	movs	r2, #0
 8003330:	9201      	str	r2, [sp, #4]
 8003332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003334:	f042 0202 	orr.w	r2, r2, #2
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	9b01      	ldr	r3, [sp, #4]
}
 8003344:	b005      	add	sp, #20
 8003346:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM1_CLK_ENABLE();
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_TIM_Base_MspInit+0xc4>)
 800334c:	2200      	movs	r2, #0
 800334e:	9200      	str	r2, [sp, #0]
 8003350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	9b00      	ldr	r3, [sp, #0]
}
 8003362:	b005      	add	sp, #20
 8003364:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM5_CLK_ENABLE();
 8003368:	4b18      	ldr	r3, [pc, #96]	; (80033cc <HAL_TIM_Base_MspInit+0xc4>)
 800336a:	2200      	movs	r2, #0
 800336c:	9202      	str	r2, [sp, #8]
 800336e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003370:	f042 0208 	orr.w	r2, r2, #8
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	9302      	str	r3, [sp, #8]
		HAL_NVIC_SetPriority(TIM5_IRQn, 7, 1);
 800337e:	2032      	movs	r0, #50	; 0x32
 8003380:	2201      	movs	r2, #1
 8003382:	2107      	movs	r1, #7
		__HAL_RCC_TIM5_CLK_ENABLE();
 8003384:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(TIM5_IRQn, 7, 1);
 8003386:	f000 fc49 	bl	8003c1c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800338a:	2032      	movs	r0, #50	; 0x32
}
 800338c:	b005      	add	sp, #20
 800338e:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003392:	f000 bc8d 	b.w	8003cb0 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM9_CLK_ENABLE();
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <HAL_TIM_Base_MspInit+0xc4>)
 8003398:	2200      	movs	r2, #0
 800339a:	9203      	str	r2, [sp, #12]
 800339c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800339e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033aa:	9303      	str	r3, [sp, #12]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 2);
 80033ac:	2018      	movs	r0, #24
 80033ae:	2202      	movs	r2, #2
 80033b0:	2107      	movs	r1, #7
		__HAL_RCC_TIM9_CLK_ENABLE();
 80033b2:	9b03      	ldr	r3, [sp, #12]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 2);
 80033b4:	f000 fc32 	bl	8003c1c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80033b8:	2018      	movs	r0, #24
 80033ba:	e7e7      	b.n	800338c <HAL_TIM_Base_MspInit+0x84>
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000c00 	.word	0x40000c00
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40023800 	.word	0x40023800

080033d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033d0:	b570      	push	{r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
	if(timHandle->Instance==TIM1)
 80033d2:	6802      	ldr	r2, [r0, #0]
 80033d4:	492d      	ldr	r1, [pc, #180]	; (800348c <HAL_TIM_MspPostInit+0xbc>)
{
 80033d6:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	2300      	movs	r3, #0
	if(timHandle->Instance==TIM1)
 80033da:	428a      	cmp	r2, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80033e0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80033e4:	9308      	str	r3, [sp, #32]
	if(timHandle->Instance==TIM1)
 80033e6:	d004      	beq.n	80033f2 <HAL_TIM_MspPostInit+0x22>

		/* USER CODE BEGIN TIM1_MspPostInit 1 */

		/* USER CODE END TIM1_MspPostInit 1 */
	}
	else if(timHandle->Instance==TIM3)
 80033e8:	4929      	ldr	r1, [pc, #164]	; (8003490 <HAL_TIM_MspPostInit+0xc0>)
 80033ea:	428a      	cmp	r2, r1
 80033ec:	d01d      	beq.n	800342a <HAL_TIM_MspPostInit+0x5a>
		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}

}
 80033ee:	b00a      	add	sp, #40	; 0x28
 80033f0:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80033f2:	4a28      	ldr	r2, [pc, #160]	; (8003494 <HAL_TIM_MspPostInit+0xc4>)
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	4827      	ldr	r0, [pc, #156]	; (8003498 <HAL_TIM_MspPostInit+0xc8>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003400:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003408:	2301      	movs	r3, #1
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800340a:	9a01      	ldr	r2, [sp, #4]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800340c:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800340e:	2200      	movs	r2, #0
 8003410:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003412:	a904      	add	r1, sp, #16
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003414:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8003418:	2502      	movs	r5, #2
 800341a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800341e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	f000 ff1b 	bl	800425c <HAL_GPIO_Init>
}
 8003426:	b00a      	add	sp, #40	; 0x28
 8003428:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800342a:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_TIM_MspPostInit+0xc4>)
 800342c:	9302      	str	r3, [sp, #8]
 800342e:	6b11      	ldr	r1, [r2, #48]	; 0x30
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003430:	481a      	ldr	r0, [pc, #104]	; (800349c <HAL_TIM_MspPostInit+0xcc>)
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003432:	f041 0104 	orr.w	r1, r1, #4
 8003436:	6311      	str	r1, [r2, #48]	; 0x30
 8003438:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800343a:	f001 0104 	and.w	r1, r1, #4
 800343e:	9102      	str	r1, [sp, #8]
 8003440:	9902      	ldr	r1, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003442:	9303      	str	r3, [sp, #12]
 8003444:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003446:	f043 0302 	orr.w	r3, r3, #2
 800344a:	6313      	str	r3, [r2, #48]	; 0x30
 800344c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	9303      	str	r3, [sp, #12]
 8003454:	9903      	ldr	r1, [sp, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	2302      	movs	r3, #2
 800345a:	2400      	movs	r4, #0
 800345c:	2500      	movs	r5, #0
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800345e:	2602      	movs	r6, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003460:	a904      	add	r1, sp, #16
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003462:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003466:	e9cd 4506 	strd	r4, r5, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800346a:	9608      	str	r6, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800346c:	f000 fef6 	bl	800425c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003470:	2210      	movs	r2, #16
 8003472:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003474:	480a      	ldr	r0, [pc, #40]	; (80034a0 <HAL_TIM_MspPostInit+0xd0>)
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003476:	9608      	str	r6, [sp, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003478:	a904      	add	r1, sp, #16
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 800347a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800347e:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003482:	f000 feeb 	bl	800425c <HAL_GPIO_Init>
}
 8003486:	b00a      	add	sp, #40	; 0x28
 8003488:	bd70      	pop	{r4, r5, r6, pc}
 800348a:	bf00      	nop
 800348c:	40010000 	.word	0x40010000
 8003490:	40000400 	.word	0x40000400
 8003494:	40023800 	.word	0x40023800
 8003498:	40020000 	.word	0x40020000
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020400 	.word	0x40020400

080034a4 <MX_TIM1_Init>:
{
 80034a4:	b570      	push	{r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034a6:	2400      	movs	r4, #0
{
 80034a8:	b096      	sub	sp, #88	; 0x58
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034aa:	4621      	mov	r1, r4
 80034ac:	2220      	movs	r2, #32
 80034ae:	a80e      	add	r0, sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80034b4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034b8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80034bc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80034c0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c4:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034c6:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c8:	9401      	str	r4, [sp, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034ca:	f008 fa8b 	bl	800b9e4 <memset>
  htim1.Instance = TIM1;
 80034ce:	4838      	ldr	r0, [pc, #224]	; (80035b0 <MX_TIM1_Init+0x10c>)
 80034d0:	4938      	ldr	r1, [pc, #224]	; (80035b4 <MX_TIM1_Init+0x110>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d2:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 9;
 80034d4:	2209      	movs	r2, #9
  htim1.Init.Period = 999;
 80034d6:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Init.RepetitionCounter = 0;
 80034da:	e9c0 4404 	strd	r4, r4, [r0, #16]
  htim1.Init.Prescaler = 9;
 80034de:	e9c0 1200 	strd	r1, r2, [r0]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e2:	6184      	str	r4, [r0, #24]
  htim1.Init.Period = 999;
 80034e4:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034e6:	f003 fe4f 	bl	8007188 <HAL_TIM_Base_Init>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d146      	bne.n	800357c <MX_TIM1_Init+0xd8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034f2:	482f      	ldr	r0, [pc, #188]	; (80035b0 <MX_TIM1_Init+0x10c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034f6:	a902      	add	r1, sp, #8
 80034f8:	f004 f950 	bl	800779c <HAL_TIM_ConfigClockSource>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d153      	bne.n	80035a8 <MX_TIM1_Init+0x104>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003500:	482b      	ldr	r0, [pc, #172]	; (80035b0 <MX_TIM1_Init+0x10c>)
 8003502:	f003 ff75 	bl	80073f0 <HAL_TIM_PWM_Init>
 8003506:	2800      	cmp	r0, #0
 8003508:	d14b      	bne.n	80035a2 <MX_TIM1_Init+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350a:	2200      	movs	r2, #0
 800350c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800350e:	4828      	ldr	r0, [pc, #160]	; (80035b0 <MX_TIM1_Init+0x10c>)
 8003510:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003512:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003516:	f004 fdd7 	bl	80080c8 <HAL_TIMEx_MasterConfigSynchronization>
 800351a:	2800      	cmp	r0, #0
 800351c:	d13e      	bne.n	800359c <MX_TIM1_Init+0xf8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800351e:	2060      	movs	r0, #96	; 0x60
 8003520:	2100      	movs	r1, #0
 8003522:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003526:	2000      	movs	r0, #0
 8003528:	2100      	movs	r1, #0
 800352a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800352e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003532:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003534:	481e      	ldr	r0, [pc, #120]	; (80035b0 <MX_TIM1_Init+0x10c>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003536:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003538:	2204      	movs	r2, #4
 800353a:	a906      	add	r1, sp, #24
 800353c:	f004 fc66 	bl	8007e0c <HAL_TIM_PWM_ConfigChannel>
 8003540:	bb48      	cbnz	r0, 8003596 <MX_TIM1_Init+0xf2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003542:	481b      	ldr	r0, [pc, #108]	; (80035b0 <MX_TIM1_Init+0x10c>)
 8003544:	a906      	add	r1, sp, #24
 8003546:	2208      	movs	r2, #8
 8003548:	f004 fc60 	bl	8007e0c <HAL_TIM_PWM_ConfigChannel>
 800354c:	bb00      	cbnz	r0, 8003590 <MX_TIM1_Init+0xec>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800354e:	2200      	movs	r2, #0
 8003550:	2300      	movs	r3, #0
 8003552:	2400      	movs	r4, #0
 8003554:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003558:	2600      	movs	r6, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800355a:	4815      	ldr	r0, [pc, #84]	; (80035b0 <MX_TIM1_Init+0x10c>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800355c:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800355e:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003560:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003564:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003568:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800356c:	f004 fe18 	bl	80081a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003570:	b938      	cbnz	r0, 8003582 <MX_TIM1_Init+0xde>
  HAL_TIM_MspPostInit(&htim1);
 8003572:	480f      	ldr	r0, [pc, #60]	; (80035b0 <MX_TIM1_Init+0x10c>)
 8003574:	f7ff ff2c 	bl	80033d0 <HAL_TIM_MspPostInit>
}
 8003578:	b016      	add	sp, #88	; 0x58
 800357a:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 800357c:	f7ff fcde 	bl	8002f3c <Error_Handler>
 8003580:	e7b5      	b.n	80034ee <MX_TIM1_Init+0x4a>
    Error_Handler();
 8003582:	f7ff fcdb 	bl	8002f3c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8003586:	480a      	ldr	r0, [pc, #40]	; (80035b0 <MX_TIM1_Init+0x10c>)
 8003588:	f7ff ff22 	bl	80033d0 <HAL_TIM_MspPostInit>
}
 800358c:	b016      	add	sp, #88	; 0x58
 800358e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8003590:	f7ff fcd4 	bl	8002f3c <Error_Handler>
 8003594:	e7db      	b.n	800354e <MX_TIM1_Init+0xaa>
    Error_Handler();
 8003596:	f7ff fcd1 	bl	8002f3c <Error_Handler>
 800359a:	e7d2      	b.n	8003542 <MX_TIM1_Init+0x9e>
    Error_Handler();
 800359c:	f7ff fcce 	bl	8002f3c <Error_Handler>
 80035a0:	e7bd      	b.n	800351e <MX_TIM1_Init+0x7a>
    Error_Handler();
 80035a2:	f7ff fccb 	bl	8002f3c <Error_Handler>
 80035a6:	e7b0      	b.n	800350a <MX_TIM1_Init+0x66>
    Error_Handler();
 80035a8:	f7ff fcc8 	bl	8002f3c <Error_Handler>
 80035ac:	e7a8      	b.n	8003500 <MX_TIM1_Init+0x5c>
 80035ae:	bf00      	nop
 80035b0:	20009bfc 	.word	0x20009bfc
 80035b4:	40010000 	.word	0x40010000

080035b8 <MX_TIM3_Init>:
{
 80035b8:	b530      	push	{r4, r5, lr}
  htim3.Instance = TIM3;
 80035ba:	4830      	ldr	r0, [pc, #192]	; (800367c <MX_TIM3_Init+0xc4>)
 80035bc:	4b30      	ldr	r3, [pc, #192]	; (8003680 <MX_TIM3_Init+0xc8>)
 80035be:	6003      	str	r3, [r0, #0]
{
 80035c0:	b08f      	sub	sp, #60	; 0x3c
  htim3.Init.Period = 999;
 80035c2:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim3.Init.Prescaler = 9;
 80035c6:	2209      	movs	r2, #9
  htim3.Init.Period = 999;
 80035c8:	60c3      	str	r3, [r0, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ca:	2300      	movs	r3, #0
 80035cc:	e9cd 3303 	strd	r3, r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035d0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80035d4:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80035d8:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  htim3.Init.Prescaler = 9;
 80035dc:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035de:	6083      	str	r3, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035e0:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e2:	9300      	str	r3, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035e4:	9306      	str	r3, [sp, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e6:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e8:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ea:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ec:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035ee:	f003 fdcb 	bl	8007188 <HAL_TIM_Base_Init>
 80035f2:	bb60      	cbnz	r0, 800364e <MX_TIM3_Init+0x96>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035f8:	4820      	ldr	r0, [pc, #128]	; (800367c <MX_TIM3_Init+0xc4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035fa:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035fc:	a902      	add	r1, sp, #8
 80035fe:	f004 f8cd 	bl	800779c <HAL_TIM_ConfigClockSource>
 8003602:	2800      	cmp	r0, #0
 8003604:	d136      	bne.n	8003674 <MX_TIM3_Init+0xbc>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003606:	481d      	ldr	r0, [pc, #116]	; (800367c <MX_TIM3_Init+0xc4>)
 8003608:	f003 fef2 	bl	80073f0 <HAL_TIM_PWM_Init>
 800360c:	bb78      	cbnz	r0, 800366e <MX_TIM3_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800360e:	2200      	movs	r2, #0
 8003610:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003612:	481a      	ldr	r0, [pc, #104]	; (800367c <MX_TIM3_Init+0xc4>)
 8003614:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003616:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800361a:	f004 fd55 	bl	80080c8 <HAL_TIMEx_MasterConfigSynchronization>
 800361e:	bb18      	cbnz	r0, 8003668 <MX_TIM3_Init+0xb0>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003620:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003622:	2460      	movs	r4, #96	; 0x60
 8003624:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003626:	4815      	ldr	r0, [pc, #84]	; (800367c <MX_TIM3_Init+0xc4>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003628:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800362a:	a906      	add	r1, sp, #24
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800362c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003630:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003632:	f004 fbeb 	bl	8007e0c <HAL_TIM_PWM_ConfigChannel>
 8003636:	b9a0      	cbnz	r0, 8003662 <MX_TIM3_Init+0xaa>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003638:	4810      	ldr	r0, [pc, #64]	; (800367c <MX_TIM3_Init+0xc4>)
 800363a:	a906      	add	r1, sp, #24
 800363c:	2204      	movs	r2, #4
 800363e:	f004 fbe5 	bl	8007e0c <HAL_TIM_PWM_ConfigChannel>
 8003642:	b938      	cbnz	r0, 8003654 <MX_TIM3_Init+0x9c>
  HAL_TIM_MspPostInit(&htim3);
 8003644:	480d      	ldr	r0, [pc, #52]	; (800367c <MX_TIM3_Init+0xc4>)
 8003646:	f7ff fec3 	bl	80033d0 <HAL_TIM_MspPostInit>
}
 800364a:	b00f      	add	sp, #60	; 0x3c
 800364c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800364e:	f7ff fc75 	bl	8002f3c <Error_Handler>
 8003652:	e7cf      	b.n	80035f4 <MX_TIM3_Init+0x3c>
    Error_Handler();
 8003654:	f7ff fc72 	bl	8002f3c <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8003658:	4808      	ldr	r0, [pc, #32]	; (800367c <MX_TIM3_Init+0xc4>)
 800365a:	f7ff feb9 	bl	80033d0 <HAL_TIM_MspPostInit>
}
 800365e:	b00f      	add	sp, #60	; 0x3c
 8003660:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003662:	f7ff fc6b 	bl	8002f3c <Error_Handler>
 8003666:	e7e7      	b.n	8003638 <MX_TIM3_Init+0x80>
    Error_Handler();
 8003668:	f7ff fc68 	bl	8002f3c <Error_Handler>
 800366c:	e7d8      	b.n	8003620 <MX_TIM3_Init+0x68>
    Error_Handler();
 800366e:	f7ff fc65 	bl	8002f3c <Error_Handler>
 8003672:	e7cc      	b.n	800360e <MX_TIM3_Init+0x56>
    Error_Handler();
 8003674:	f7ff fc62 	bl	8002f3c <Error_Handler>
 8003678:	e7c5      	b.n	8003606 <MX_TIM3_Init+0x4e>
 800367a:	bf00      	nop
 800367c:	20009bb4 	.word	0x20009bb4
 8003680:	40000400 	.word	0x40000400

08003684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8003684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003688:	480d      	ldr	r0, [pc, #52]	; (80036c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800368a:	490e      	ldr	r1, [pc, #56]	; (80036c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800368c:	4a0e      	ldr	r2, [pc, #56]	; (80036c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800368e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003690:	e002      	b.n	8003698 <LoopCopyDataInit>

08003692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003696:	3304      	adds	r3, #4

08003698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800369a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800369c:	d3f9      	bcc.n	8003692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369e:	4a0b      	ldr	r2, [pc, #44]	; (80036cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036a0:	4c0b      	ldr	r4, [pc, #44]	; (80036d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a4:	e001      	b.n	80036aa <LoopFillZerobss>

080036a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a8:	3204      	adds	r2, #4

080036aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036ac:	d3fb      	bcc.n	80036a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036ae:	f7ff fe21 	bl	80032f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036b2:	f008 f965 	bl	800b980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036b6:	f7ff fc11 	bl	8002edc <main>
  bx  lr    
 80036ba:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 80036bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80036c8:	0800d48c 	.word	0x0800d48c
  ldr r2, =_sbss
 80036cc:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80036d0:	20009d10 	.word	0x20009d10

080036d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d4:	e7fe      	b.n	80036d4 <ADC_IRQHandler>
	...

080036d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_Init+0x30>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ea:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f4:	2003      	movs	r0, #3
 80036f6:	f000 fa73 	bl	8003be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036fa:	2000      	movs	r0, #0
 80036fc:	f7ff fc4a 	bl	8002f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003700:	f7ff fc28 	bl	8002f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003704:	2000      	movs	r0, #0
 8003706:	bd08      	pop	{r3, pc}
 8003708:	40023c00 	.word	0x40023c00

0800370c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800370c:	4a03      	ldr	r2, [pc, #12]	; (800371c <HAL_IncTick+0x10>)
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_IncTick+0x14>)
 8003710:	6811      	ldr	r1, [r2, #0]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	440b      	add	r3, r1
 8003716:	6013      	str	r3, [r2, #0]
}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20009c8c 	.word	0x20009c8c
 8003720:	20000034 	.word	0x20000034

08003724 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003724:	4b01      	ldr	r3, [pc, #4]	; (800372c <HAL_GetTick+0x8>)
 8003726:	6818      	ldr	r0, [r3, #0]
}
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20009c8c 	.word	0x20009c8c

08003730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003734:	f7ff fff6 	bl	8003724 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003738:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800373a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800373c:	d002      	beq.n	8003744 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800373e:	4b04      	ldr	r3, [pc, #16]	; (8003750 <HAL_Delay+0x20>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003744:	f7ff ffee 	bl	8003724 <HAL_GetTick>
 8003748:	1b43      	subs	r3, r0, r5
 800374a:	42a3      	cmp	r3, r4
 800374c:	d3fa      	bcc.n	8003744 <HAL_Delay+0x14>
  {
  }
}
 800374e:	bd38      	pop	{r3, r4, r5, pc}
 8003750:	20000034 	.word	0x20000034

08003754 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003754:	2800      	cmp	r0, #0
 8003756:	f000 8140 	beq.w	80039da <HAL_ADC_Init+0x286>
{
 800375a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800375c:	6802      	ldr	r2, [r0, #0]
 800375e:	4ba7      	ldr	r3, [pc, #668]	; (80039fc <HAL_ADC_Init+0x2a8>)
 8003760:	429a      	cmp	r2, r3
 8003762:	4604      	mov	r4, r0
 8003764:	d004      	beq.n	8003770 <HAL_ADC_Init+0x1c>
 8003766:	48a6      	ldr	r0, [pc, #664]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 8003768:	f240 1143 	movw	r1, #323	; 0x143
 800376c:	f7ff fbe8 	bl	8002f40 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8003770:	6863      	ldr	r3, [r4, #4]
 8003772:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8003776:	d004      	beq.n	8003782 <HAL_ADC_Init+0x2e>
 8003778:	48a1      	ldr	r0, [pc, #644]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 800377a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800377e:	f7ff fbdf 	bl	8002f40 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8003782:	68a3      	ldr	r3, [r4, #8]
 8003784:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8003788:	d004      	beq.n	8003794 <HAL_ADC_Init+0x40>
 800378a:	489d      	ldr	r0, [pc, #628]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 800378c:	f240 1145 	movw	r1, #325	; 0x145
 8003790:	f7ff fbd6 	bl	8002f40 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8003794:	6923      	ldr	r3, [r4, #16]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d879      	bhi.n	800388e <HAL_ADC_Init+0x13a>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800379a:	7e23      	ldrb	r3, [r4, #24]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d86a      	bhi.n	8003876 <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80037a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037a2:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 80037a6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80037aa:	d014      	beq.n	80037d6 <HAL_ADC_Init+0x82>
 80037ac:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80037b0:	d011      	beq.n	80037d6 <HAL_ADC_Init+0x82>
 80037b2:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80037b6:	d00e      	beq.n	80037d6 <HAL_ADC_Init+0x82>
 80037b8:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
 80037bc:	d00b      	beq.n	80037d6 <HAL_ADC_Init+0x82>
 80037be:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80037c2:	d008      	beq.n	80037d6 <HAL_ADC_Init+0x82>
 80037c4:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d904      	bls.n	80037d6 <HAL_ADC_Init+0x82>
 80037cc:	488c      	ldr	r0, [pc, #560]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 80037ce:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80037d2:	f7ff fbb5 	bl	8002f40 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80037dc:	d122      	bne.n	8003824 <HAL_ADC_Init+0xd0>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80037de:	69e3      	ldr	r3, [r4, #28]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	2b0f      	cmp	r3, #15
 80037e4:	d827      	bhi.n	8003836 <HAL_ADC_Init+0xe2>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80037e6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d82c      	bhi.n	8003848 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80037ee:	6963      	ldr	r3, [r4, #20]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d831      	bhi.n	8003858 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80037f4:	f894 3020 	ldrb.w	r3, [r4, #32]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d836      	bhi.n	800386a <HAL_ADC_Init+0x116>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037fc:	4b81      	ldr	r3, [pc, #516]	; (8003a04 <HAL_ADC_Init+0x2b0>)
 80037fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003800:	429a      	cmp	r2, r3
 8003802:	d004      	beq.n	800380e <HAL_ADC_Init+0xba>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003804:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003806:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800380a:	f040 80d7 	bne.w	80039bc <HAL_ADC_Init+0x268>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800380e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003810:	2d00      	cmp	r5, #0
 8003812:	d045      	beq.n	80038a0 <HAL_ADC_Init+0x14c>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003814:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003816:	06db      	lsls	r3, r3, #27
 8003818:	d54b      	bpl.n	80038b2 <HAL_ADC_Init+0x15e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800381a:	2300      	movs	r3, #0
 800381c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003820:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003824:	4876      	ldr	r0, [pc, #472]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 8003826:	f240 1149 	movw	r1, #329	; 0x149
 800382a:	f7ff fb89 	bl	8002f40 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800382e:	69e3      	ldr	r3, [r4, #28]
 8003830:	3b01      	subs	r3, #1
 8003832:	2b0f      	cmp	r3, #15
 8003834:	d9d7      	bls.n	80037e6 <HAL_ADC_Init+0x92>
 8003836:	4872      	ldr	r0, [pc, #456]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 8003838:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800383c:	f7ff fb80 	bl	8002f40 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8003840:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8003844:	2b01      	cmp	r3, #1
 8003846:	d9d2      	bls.n	80037ee <HAL_ADC_Init+0x9a>
 8003848:	486d      	ldr	r0, [pc, #436]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 800384a:	f240 114b 	movw	r1, #331	; 0x14b
 800384e:	f7ff fb77 	bl	8002f40 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003852:	6963      	ldr	r3, [r4, #20]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d9cd      	bls.n	80037f4 <HAL_ADC_Init+0xa0>
 8003858:	4869      	ldr	r0, [pc, #420]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 800385a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800385e:	f7ff fb6f 	bl	8002f40 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003862:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d9c8      	bls.n	80037fc <HAL_ADC_Init+0xa8>
 800386a:	4865      	ldr	r0, [pc, #404]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 800386c:	f240 114d 	movw	r1, #333	; 0x14d
 8003870:	f7ff fb66 	bl	8002f40 <assert_failed>
 8003874:	e7c2      	b.n	80037fc <HAL_ADC_Init+0xa8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003876:	f240 1147 	movw	r1, #327	; 0x147
 800387a:	4861      	ldr	r0, [pc, #388]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 800387c:	f7ff fb60 	bl	8002f40 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8003880:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003882:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 8003886:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800388a:	d0a4      	beq.n	80037d6 <HAL_ADC_Init+0x82>
 800388c:	e78e      	b.n	80037ac <HAL_ADC_Init+0x58>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800388e:	485c      	ldr	r0, [pc, #368]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 8003890:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8003894:	f7ff fb54 	bl	8002f40 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003898:	7e23      	ldrb	r3, [r4, #24]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d980      	bls.n	80037a0 <HAL_ADC_Init+0x4c>
 800389e:	e7ea      	b.n	8003876 <HAL_ADC_Init+0x122>
    HAL_ADC_MspInit(hadc);
 80038a0:	4620      	mov	r0, r4
 80038a2:	f7fe f977 	bl	8001b94 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80038a6:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 80038aa:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038ae:	06db      	lsls	r3, r3, #27
 80038b0:	d4b3      	bmi.n	800381a <HAL_ADC_Init+0xc6>
    ADC_STATE_CLR_SET(hadc->State,
 80038b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038b4:	4954      	ldr	r1, [pc, #336]	; (8003a08 <HAL_ADC_Init+0x2b4>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038b6:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038b8:	4d52      	ldr	r5, [pc, #328]	; (8003a04 <HAL_ADC_Init+0x2b0>)
    ADC_STATE_CLR_SET(hadc->State,
 80038ba:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80038be:	f022 0202 	bic.w	r2, r2, #2
 80038c2:	f042 0202 	orr.w	r2, r2, #2
 80038c6:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038c8:	684a      	ldr	r2, [r1, #4]
 80038ca:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80038ce:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038d0:	684a      	ldr	r2, [r1, #4]
 80038d2:	6860      	ldr	r0, [r4, #4]
 80038d4:	4302      	orrs	r2, r0
 80038d6:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038d8:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038da:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038dc:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038de:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038e0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80038e4:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80038ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038ee:	6858      	ldr	r0, [r3, #4]
 80038f0:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80038f4:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038f6:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038fa:	4339      	orrs	r1, r7
 80038fc:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038fe:	6899      	ldr	r1, [r3, #8]
 8003900:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003904:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003906:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003908:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800390a:	ea42 0206 	orr.w	r2, r2, r6
 800390e:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003910:	d05a      	beq.n	80039c8 <HAL_ADC_Init+0x274>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003912:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003914:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003916:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800391a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	4310      	orrs	r0, r2
 8003920:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003922:	6899      	ldr	r1, [r3, #8]
 8003924:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003928:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	432a      	orrs	r2, r5
 800392e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	f022 0202 	bic.w	r2, r2, #2
 8003936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	7e21      	ldrb	r1, [r4, #24]
 800393c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003940:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003942:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003946:	2a00      	cmp	r2, #0
 8003948:	d049      	beq.n	80039de <HAL_ADC_Init+0x28a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800394a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800394c:	3a01      	subs	r2, #1
 800394e:	2a07      	cmp	r2, #7
 8003950:	d84a      	bhi.n	80039e8 <HAL_ADC_Init+0x294>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003958:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8003960:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8003968:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800396c:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800396e:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003970:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003974:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003976:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003978:	3801      	subs	r0, #1
 800397a:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 800397e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003980:	6899      	ldr	r1, [r3, #8]
 8003982:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003986:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800398e:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003992:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003994:	6899      	ldr	r1, [r3, #8]
 8003996:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800399a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800399c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800399e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039a0:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80039a4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80039a6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80039a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80039b4:	2300      	movs	r3, #0
 80039b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80039ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80039bc:	4810      	ldr	r0, [pc, #64]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 80039be:	f240 1151 	movw	r1, #337	; 0x151
 80039c2:	f7ff fabd 	bl	8002f40 <assert_failed>
 80039c6:	e722      	b.n	800380e <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	e7aa      	b.n	8003930 <HAL_ADC_Init+0x1dc>
    return HAL_ERROR;
 80039da:	2001      	movs	r0, #1
}
 80039dc:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	e7c0      	b.n	800396a <HAL_ADC_Init+0x216>
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80039e8:	4805      	ldr	r0, [pc, #20]	; (8003a00 <HAL_ADC_Init+0x2ac>)
 80039ea:	f240 71a6 	movw	r1, #1958	; 0x7a6
 80039ee:	f7ff faa7 	bl	8002f40 <assert_failed>
 80039f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	3a01      	subs	r2, #1
 80039f8:	e7ab      	b.n	8003952 <HAL_ADC_Init+0x1fe>
 80039fa:	bf00      	nop
 80039fc:	40012000 	.word	0x40012000
 8003a00:	0800cfa4 	.word	0x0800cfa4
 8003a04:	0f000001 	.word	0x0f000001
 8003a08:	40012300 	.word	0x40012300

08003a0c <HAL_ADC_ConfigChannel>:
{
 8003a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003a0e:	680b      	ldr	r3, [r1, #0]
{
 8003a10:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8003a12:	2200      	movs	r2, #0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003a14:	2b12      	cmp	r3, #18
{
 8003a16:	460e      	mov	r6, r1
 8003a18:	4604      	mov	r4, r0
  __IO uint32_t counter = 0U;
 8003a1a:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003a1c:	d903      	bls.n	8003a26 <HAL_ADC_ConfigChannel+0x1a>
 8003a1e:	4a6a      	ldr	r2, [pc, #424]	; (8003bc8 <HAL_ADC_ConfigChannel+0x1bc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	f040 8087 	bne.w	8003b34 <HAL_ADC_ConfigChannel+0x128>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003a26:	6873      	ldr	r3, [r6, #4]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	f200 808c 	bhi.w	8003b48 <HAL_ADC_ConfigChannel+0x13c>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003a30:	68b3      	ldr	r3, [r6, #8]
 8003a32:	2b07      	cmp	r3, #7
 8003a34:	f200 8091 	bhi.w	8003b5a <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 8003a38:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	f000 8096 	beq.w	8003b6e <HAL_ADC_ConfigChannel+0x162>
 8003a42:	2301      	movs	r3, #1
 8003a44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a48:	6835      	ldr	r5, [r6, #0]
 8003a4a:	2d09      	cmp	r5, #9
 8003a4c:	d827      	bhi.n	8003a9e <HAL_ADC_ConfigChannel+0x92>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a4e:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a50:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a52:	6902      	ldr	r2, [r0, #16]
 8003a54:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8003a58:	2107      	movs	r1, #7
 8003a5a:	40b9      	lsls	r1, r7
 8003a5c:	ea22 0201 	bic.w	r2, r2, r1
 8003a60:	6102      	str	r2, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a62:	6902      	ldr	r2, [r0, #16]
 8003a64:	40bb      	lsls	r3, r7
 8003a66:	4313      	orrs	r3, r2
 8003a68:	6103      	str	r3, [r0, #16]
  if (sConfig->Rank < 7U)
 8003a6a:	6873      	ldr	r3, [r6, #4]
 8003a6c:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a6e:	462f      	mov	r7, r5
  if (sConfig->Rank < 7U)
 8003a70:	d82a      	bhi.n	8003ac8 <HAL_ADC_ConfigChannel+0xbc>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a76:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003a78:	3b05      	subs	r3, #5
 8003a7a:	211f      	movs	r1, #31
 8003a7c:	4099      	lsls	r1, r3
 8003a7e:	ea22 0201 	bic.w	r2, r2, r1
 8003a82:	6342      	str	r2, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a84:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003a86:	fa07 f303 	lsl.w	r3, r7, r3
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	6343      	str	r3, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a8e:	4b4f      	ldr	r3, [pc, #316]	; (8003bcc <HAL_ADC_ConfigChannel+0x1c0>)
 8003a90:	4298      	cmp	r0, r3
 8003a92:	d02d      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0xe4>
  __HAL_UNLOCK(hadc);
 8003a94:	2000      	movs	r0, #0
 8003a96:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003a9a:	b003      	add	sp, #12
 8003a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a9e:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003aa0:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003aa2:	68c1      	ldr	r1, [r0, #12]
 8003aa4:	b2af      	uxth	r7, r5
 8003aa6:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8003aaa:	3a1e      	subs	r2, #30
 8003aac:	f04f 0c07 	mov.w	ip, #7
 8003ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8003ab4:	ea21 010c 	bic.w	r1, r1, ip
 8003ab8:	60c1      	str	r1, [r0, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003aba:	68c1      	ldr	r1, [r0, #12]
 8003abc:	4093      	lsls	r3, r2
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7U)
 8003ac2:	6873      	ldr	r3, [r6, #4]
 8003ac4:	2b06      	cmp	r3, #6
 8003ac6:	d9d4      	bls.n	8003a72 <HAL_ADC_ConfigChannel+0x66>
  else if (sConfig->Rank < 13U)
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	d853      	bhi.n	8003b74 <HAL_ADC_ConfigChannel+0x168>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003acc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ad0:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8003ad4:	221f      	movs	r2, #31
 8003ad6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003ad8:	408a      	lsls	r2, r1
 8003ada:	ea23 0302 	bic.w	r3, r3, r2
 8003ade:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ae0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003ae2:	fa07 f101 	lsl.w	r1, r7, r1
 8003ae6:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ae8:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <HAL_ADC_ConfigChannel+0x1c0>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003aea:	6301      	str	r1, [r0, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aec:	4298      	cmp	r0, r3
 8003aee:	d1d1      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x88>
 8003af0:	2d12      	cmp	r5, #18
 8003af2:	d04e      	beq.n	8003b92 <HAL_ADC_ConfigChannel+0x186>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003af4:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <HAL_ADC_ConfigChannel+0x1bc>)
 8003af6:	429d      	cmp	r5, r3
 8003af8:	d158      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x1a0>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003afa:	4a35      	ldr	r2, [pc, #212]	; (8003bd0 <HAL_ADC_ConfigChannel+0x1c4>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003afc:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <HAL_ADC_ConfigChannel+0x1c8>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003afe:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b00:	4835      	ldr	r0, [pc, #212]	; (8003bd8 <HAL_ADC_ConfigChannel+0x1cc>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b02:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8003b06:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b08:	6851      	ldr	r1, [r2, #4]
 8003b0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003b0e:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	fba0 2303 	umull	r2, r3, r0, r3
 8003b16:	0c9b      	lsrs	r3, r3, #18
 8003b18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003b20:	9b01      	ldr	r3, [sp, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0b6      	beq.n	8003a94 <HAL_ADC_ConfigChannel+0x88>
        counter--;
 8003b26:	9b01      	ldr	r3, [sp, #4]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003b2c:	9b01      	ldr	r3, [sp, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f9      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x11a>
 8003b32:	e7af      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x88>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003b34:	4829      	ldr	r0, [pc, #164]	; (8003bdc <HAL_ADC_ConfigChannel+0x1d0>)
 8003b36:	f240 6189 	movw	r1, #1673	; 0x689
 8003b3a:	f7ff fa01 	bl	8002f40 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003b3e:	6873      	ldr	r3, [r6, #4]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	2b0f      	cmp	r3, #15
 8003b44:	f67f af74 	bls.w	8003a30 <HAL_ADC_ConfigChannel+0x24>
 8003b48:	4824      	ldr	r0, [pc, #144]	; (8003bdc <HAL_ADC_ConfigChannel+0x1d0>)
 8003b4a:	f240 618a 	movw	r1, #1674	; 0x68a
 8003b4e:	f7ff f9f7 	bl	8002f40 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003b52:	68b3      	ldr	r3, [r6, #8]
 8003b54:	2b07      	cmp	r3, #7
 8003b56:	f67f af6f 	bls.w	8003a38 <HAL_ADC_ConfigChannel+0x2c>
 8003b5a:	4820      	ldr	r0, [pc, #128]	; (8003bdc <HAL_ADC_ConfigChannel+0x1d0>)
 8003b5c:	f240 618b 	movw	r1, #1675	; 0x68b
 8003b60:	f7ff f9ee 	bl	8002f40 <assert_failed>
  __HAL_LOCK(hadc);
 8003b64:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f47f af6a 	bne.w	8003a42 <HAL_ADC_ConfigChannel+0x36>
 8003b6e:	2002      	movs	r0, #2
}
 8003b70:	b003      	add	sp, #12
 8003b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b74:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003b78:	3a41      	subs	r2, #65	; 0x41
 8003b7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b7c:	211f      	movs	r1, #31
 8003b7e:	4091      	lsls	r1, r2
 8003b80:	ea23 0301 	bic.w	r3, r3, r1
 8003b84:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b88:	fa07 f102 	lsl.w	r1, r7, r2
 8003b8c:	4319      	orrs	r1, r3
 8003b8e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8003b90:	e77d      	b.n	8003a8e <HAL_ADC_ConfigChannel+0x82>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b92:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8003b96:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003b9a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b9e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8003ba2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003ba6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003baa:	e773      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x88>
 8003bac:	2d11      	cmp	r5, #17
 8003bae:	f47f af71 	bne.w	8003a94 <HAL_ADC_ConfigChannel+0x88>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <HAL_ADC_ConfigChannel+0x1c4>)
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003bba:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003bc2:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003bc4:	e766      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x88>
 8003bc6:	bf00      	nop
 8003bc8:	10000012 	.word	0x10000012
 8003bcc:	40012000 	.word	0x40012000
 8003bd0:	40012300 	.word	0x40012300
 8003bd4:	20000030 	.word	0x20000030
 8003bd8:	431bde83 	.word	0x431bde83
 8003bdc:	0800cfa4 	.word	0x0800cfa4

08003be0 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003be0:	1ec3      	subs	r3, r0, #3
 8003be2:	2b04      	cmp	r3, #4
{
 8003be4:	b510      	push	{r4, lr}
 8003be6:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003be8:	d80e      	bhi.n	8003c08 <HAL_NVIC_SetPriorityGrouping+0x28>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bea:	490a      	ldr	r1, [pc, #40]	; (8003c14 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8003bec:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bee:	0223      	lsls	r3, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf0:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf8:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bfa:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8003bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003c04:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003c06:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003c08:	4803      	ldr	r0, [pc, #12]	; (8003c18 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8003c0a:	2192      	movs	r1, #146	; 0x92
 8003c0c:	f7ff f998 	bl	8002f40 <assert_failed>
 8003c10:	e7eb      	b.n	8003bea <HAL_NVIC_SetPriorityGrouping+0xa>
 8003c12:	bf00      	nop
 8003c14:	e000ed00 	.word	0xe000ed00
 8003c18:	0800cfdc 	.word	0x0800cfdc

08003c1c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003c1c:	2a0f      	cmp	r2, #15
{ 
 8003c1e:	b570      	push	{r4, r5, r6, lr}
 8003c20:	4616      	mov	r6, r2
 8003c22:	4605      	mov	r5, r0
 8003c24:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003c26:	d837      	bhi.n	8003c98 <HAL_NVIC_SetPriority+0x7c>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003c28:	2c0f      	cmp	r4, #15
 8003c2a:	d830      	bhi.n	8003c8e <HAL_NVIC_SetPriority+0x72>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <HAL_NVIC_SetPriority+0x88>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c34:	f1c3 0007 	rsb	r0, r3, #7
 8003c38:	2804      	cmp	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3a:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c3e:	bf28      	it	cs
 8003c40:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c42:	2a06      	cmp	r2, #6
 8003c44:	d918      	bls.n	8003c78 <HAL_NVIC_SetPriority+0x5c>
 8003c46:	3b03      	subs	r3, #3
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c52:	f04f 31ff 	mov.w	r1, #4294967295
 8003c56:	4081      	lsls	r1, r0
 8003c58:	ea24 0401 	bic.w	r4, r4, r1
 8003c5c:	409c      	lsls	r4, r3
  if ((int32_t)(IRQn) >= 0)
 8003c5e:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c60:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8003c64:	db0b      	blt.n	8003c7e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c66:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8003c6a:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8003c6e:	0124      	lsls	r4, r4, #4
 8003c70:	b2e4      	uxtb	r4, r4
 8003c72:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c76:	bd70      	pop	{r4, r5, r6, pc}
 8003c78:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c7a:	4633      	mov	r3, r6
 8003c7c:	e7e9      	b.n	8003c52 <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_NVIC_SetPriority+0x8c>)
 8003c80:	f005 050f 	and.w	r5, r5, #15
 8003c84:	0124      	lsls	r4, r4, #4
 8003c86:	442b      	add	r3, r5
 8003c88:	b2e4      	uxtb	r4, r4
 8003c8a:	761c      	strb	r4, [r3, #24]
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003c8e:	4807      	ldr	r0, [pc, #28]	; (8003cac <HAL_NVIC_SetPriority+0x90>)
 8003c90:	21ab      	movs	r1, #171	; 0xab
 8003c92:	f7ff f955 	bl	8002f40 <assert_failed>
 8003c96:	e7c9      	b.n	8003c2c <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003c98:	4804      	ldr	r0, [pc, #16]	; (8003cac <HAL_NVIC_SetPriority+0x90>)
 8003c9a:	21aa      	movs	r1, #170	; 0xaa
 8003c9c:	f7ff f950 	bl	8002f40 <assert_failed>
 8003ca0:	e7c2      	b.n	8003c28 <HAL_NVIC_SetPriority+0xc>
 8003ca2:	bf00      	nop
 8003ca4:	e000ed00 	.word	0xe000ed00
 8003ca8:	e000ecfc 	.word	0xe000ecfc
 8003cac:	0800cfdc 	.word	0x0800cfdc

08003cb0 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	db08      	blt.n	8003cc6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cb4:	f000 011f 	and.w	r1, r0, #31
 8003cb8:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <HAL_NVIC_EnableIRQ+0x20>)
 8003cba:	0940      	lsrs	r0, r0, #5
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	408b      	lsls	r3, r1
 8003cc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003cc4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003cc6:	4803      	ldr	r0, [pc, #12]	; (8003cd4 <HAL_NVIC_EnableIRQ+0x24>)
 8003cc8:	21be      	movs	r1, #190	; 0xbe
 8003cca:	f7ff b939 	b.w	8002f40 <assert_failed>
 8003cce:	bf00      	nop
 8003cd0:	e000e100 	.word	0xe000e100
 8003cd4:	0800cfdc 	.word	0x0800cfdc

08003cd8 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	db0e      	blt.n	8003cfa <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cdc:	0943      	lsrs	r3, r0, #5
 8003cde:	4909      	ldr	r1, [pc, #36]	; (8003d04 <HAL_NVIC_DisableIRQ+0x2c>)
 8003ce0:	3320      	adds	r3, #32
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f000 001f 	and.w	r0, r0, #31
 8003ce8:	fa02 f000 	lsl.w	r0, r2, r0
 8003cec:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003cf4:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003cf8:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003cfa:	4803      	ldr	r0, [pc, #12]	; (8003d08 <HAL_NVIC_DisableIRQ+0x30>)
 8003cfc:	21ce      	movs	r1, #206	; 0xce
 8003cfe:	f7ff b91f 	b.w	8002f40 <assert_failed>
 8003d02:	bf00      	nop
 8003d04:	e000e100 	.word	0xe000e100
 8003d08:	0800cfdc 	.word	0x0800cfdc

08003d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003d10:	f7ff fd08 	bl	8003724 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d14:	2c00      	cmp	r4, #0
 8003d16:	f000 8114 	beq.w	8003f42 <HAL_DMA_Init+0x236>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	4aa8      	ldr	r2, [pc, #672]	; (8003fc0 <HAL_DMA_Init+0x2b4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	4605      	mov	r5, r0
 8003d22:	d031      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d24:	3218      	adds	r2, #24
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d02e      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d2a:	3218      	adds	r2, #24
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d02b      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d30:	3218      	adds	r2, #24
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d028      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d36:	3218      	adds	r2, #24
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d025      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d3c:	3218      	adds	r2, #24
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d022      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d42:	3218      	adds	r2, #24
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d01f      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d48:	3218      	adds	r2, #24
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01c      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d4e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d018      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d56:	3218      	adds	r2, #24
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d015      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d5c:	3218      	adds	r2, #24
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d012      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d62:	3218      	adds	r2, #24
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00f      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d68:	3218      	adds	r2, #24
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00c      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d6e:	3218      	adds	r2, #24
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d74:	3218      	adds	r2, #24
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d006      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d7a:	3218      	adds	r2, #24
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <HAL_DMA_Init+0x7c>
 8003d80:	4890      	ldr	r0, [pc, #576]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003d82:	21b8      	movs	r1, #184	; 0xb8
 8003d84:	f7ff f8dc 	bl	8002f40 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003d88:	6863      	ldr	r3, [r4, #4]
 8003d8a:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 8003d8e:	d006      	beq.n	8003d9e <HAL_DMA_Init+0x92>
 8003d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d94:	d003      	beq.n	8003d9e <HAL_DMA_Init+0x92>
 8003d96:	488b      	ldr	r0, [pc, #556]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003d98:	21b9      	movs	r1, #185	; 0xb9
 8003d9a:	f7ff f8d1 	bl	8002f40 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003d9e:	68a3      	ldr	r3, [r4, #8]
 8003da0:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8003da4:	f040 8098 	bne.w	8003ed8 <HAL_DMA_Init+0x1cc>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003da8:	68e3      	ldr	r3, [r4, #12]
 8003daa:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8003dae:	f040 809f 	bne.w	8003ef0 <HAL_DMA_Init+0x1e4>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8003db8:	f040 80a3 	bne.w	8003f02 <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003dbc:	6963      	ldr	r3, [r4, #20]
 8003dbe:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8003dc2:	d003      	beq.n	8003dcc <HAL_DMA_Init+0xc0>
 8003dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc8:	f040 80a7 	bne.w	8003f1a <HAL_DMA_Init+0x20e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003dcc:	69a3      	ldr	r3, [r4, #24]
 8003dce:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8003dd2:	d003      	beq.n	8003ddc <HAL_DMA_Init+0xd0>
 8003dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd8:	f040 80a9 	bne.w	8003f2e <HAL_DMA_Init+0x222>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003ddc:	69e3      	ldr	r3, [r4, #28]
 8003dde:	f033 0220 	bics.w	r2, r3, #32
 8003de2:	d006      	beq.n	8003df2 <HAL_DMA_Init+0xe6>
 8003de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de8:	d003      	beq.n	8003df2 <HAL_DMA_Init+0xe6>
 8003dea:	4876      	ldr	r0, [pc, #472]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003dec:	21bf      	movs	r1, #191	; 0xbf
 8003dee:	f7ff f8a7 	bl	8002f40 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003df2:	6a23      	ldr	r3, [r4, #32]
 8003df4:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8003df8:	d003      	beq.n	8003e02 <HAL_DMA_Init+0xf6>
 8003dfa:	4872      	ldr	r0, [pc, #456]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003dfc:	21c0      	movs	r1, #192	; 0xc0
 8003dfe:	f7ff f89f 	bl	8002f40 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e04:	b1db      	cbz	r3, 8003e3e <HAL_DMA_Init+0x132>
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d005      	beq.n	8003e16 <HAL_DMA_Init+0x10a>
 8003e0a:	486e      	ldr	r0, [pc, #440]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003e0c:	21c1      	movs	r1, #193	; 0xc1
 8003e0e:	f7ff f897 	bl	8002f40 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e14:	b19b      	cbz	r3, 8003e3e <HAL_DMA_Init+0x132>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003e16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	f200 80b3 	bhi.w	8003f84 <HAL_DMA_Init+0x278>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003e1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e20:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8003e24:	d003      	beq.n	8003e2e <HAL_DMA_Init+0x122>
 8003e26:	4867      	ldr	r0, [pc, #412]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003e28:	21c7      	movs	r1, #199	; 0xc7
 8003e2a:	f7ff f889 	bl	8002f40 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003e2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e30:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8003e34:	d003      	beq.n	8003e3e <HAL_DMA_Init+0x132>
 8003e36:	4863      	ldr	r0, [pc, #396]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003e38:	21c8      	movs	r1, #200	; 0xc8
 8003e3a:	f7ff f881 	bl	8002f40 <assert_failed>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e3e:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e40:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 8003e42:	2100      	movs	r1, #0
 8003e44:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e48:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e54:	e005      	b.n	8003e62 <HAL_DMA_Init+0x156>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e56:	f7ff fc65 	bl	8003724 <HAL_GetTick>
 8003e5a:	1b40      	subs	r0, r0, r5
 8003e5c:	2805      	cmp	r0, #5
 8003e5e:	d855      	bhi.n	8003f0c <HAL_DMA_Init+0x200>
 8003e60:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	07d1      	lsls	r1, r2, #31
 8003e66:	d4f6      	bmi.n	8003e56 <HAL_DMA_Init+0x14a>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e68:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6c:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e70:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e72:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 8003e74:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e76:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e78:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e7c:	4302      	orrs	r2, r0
 8003e7e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e80:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e82:	4951      	ldr	r1, [pc, #324]	; (8003fc8 <HAL_DMA_Init+0x2bc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e84:	4332      	orrs	r2, r6
 8003e86:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e88:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e8c:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e8e:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e90:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e94:	d057      	beq.n	8003f46 <HAL_DMA_Init+0x23a>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e96:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e98:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e9a:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e9e:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	494a      	ldr	r1, [pc, #296]	; (8003fcc <HAL_DMA_Init+0x2c0>)
  hdma->Instance->FCR = tmp;
 8003ea4:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ea6:	3a10      	subs	r2, #16
 8003ea8:	fba1 0102 	umull	r0, r1, r1, r2
 8003eac:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eae:	4848      	ldr	r0, [pc, #288]	; (8003fd0 <HAL_DMA_Init+0x2c4>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003eb0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eb4:	5c41      	ldrb	r1, [r0, r1]
 8003eb6:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003eb8:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8003ebc:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ebe:	bf88      	it	hi
 8003ec0:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ec2:	223f      	movs	r2, #63	; 0x3f
 8003ec4:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8003ec6:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ec8:	2100      	movs	r1, #0
 8003eca:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ecc:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ece:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003ed0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8003ed4:	4608      	mov	r0, r1
}
 8003ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	f43f af65 	beq.w	8003da8 <HAL_DMA_Init+0x9c>
 8003ede:	4839      	ldr	r0, [pc, #228]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003ee0:	21ba      	movs	r1, #186	; 0xba
 8003ee2:	f7ff f82d 	bl	8002f40 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003ee6:	68e3      	ldr	r3, [r4, #12]
 8003ee8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8003eec:	f43f af61 	beq.w	8003db2 <HAL_DMA_Init+0xa6>
 8003ef0:	4834      	ldr	r0, [pc, #208]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003ef2:	21bb      	movs	r1, #187	; 0xbb
 8003ef4:	f7ff f824 	bl	8002f40 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8003efe:	f43f af5d 	beq.w	8003dbc <HAL_DMA_Init+0xb0>
 8003f02:	4830      	ldr	r0, [pc, #192]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003f04:	21bc      	movs	r1, #188	; 0xbc
 8003f06:	f7ff f81b 	bl	8002f40 <assert_failed>
 8003f0a:	e757      	b.n	8003dbc <HAL_DMA_Init+0xb0>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f0e:	2220      	movs	r2, #32
 8003f10:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8003f16:	4618      	mov	r0, r3
}
 8003f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003f1a:	482a      	ldr	r0, [pc, #168]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003f1c:	21bd      	movs	r1, #189	; 0xbd
 8003f1e:	f7ff f80f 	bl	8002f40 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003f22:	69a3      	ldr	r3, [r4, #24]
 8003f24:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8003f28:	f43f af58 	beq.w	8003ddc <HAL_DMA_Init+0xd0>
 8003f2c:	e752      	b.n	8003dd4 <HAL_DMA_Init+0xc8>
 8003f2e:	4825      	ldr	r0, [pc, #148]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003f30:	21be      	movs	r1, #190	; 0xbe
 8003f32:	f7ff f805 	bl	8002f40 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003f36:	69e3      	ldr	r3, [r4, #28]
 8003f38:	f033 0220 	bics.w	r2, r3, #32
 8003f3c:	f43f af59 	beq.w	8003df2 <HAL_DMA_Init+0xe6>
 8003f40:	e750      	b.n	8003de4 <HAL_DMA_Init+0xd8>
    return HAL_ERROR;
 8003f42:	2001      	movs	r0, #1
}
 8003f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f46:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 8003f4a:	4328      	orrs	r0, r5
 8003f4c:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8003f4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8003f50:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003f52:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f54:	f020 0007 	bic.w	r0, r0, #7
 8003f58:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 8003f5a:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f5e:	2d00      	cmp	r5, #0
 8003f60:	d09e      	beq.n	8003ea0 <HAL_DMA_Init+0x194>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f62:	b1a6      	cbz	r6, 8003f8e <HAL_DMA_Init+0x282>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f64:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8003f68:	d017      	beq.n	8003f9a <HAL_DMA_Init+0x28e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f6a:	2a02      	cmp	r2, #2
 8003f6c:	d903      	bls.n	8003f76 <HAL_DMA_Init+0x26a>
 8003f6e:	2a03      	cmp	r2, #3
 8003f70:	d196      	bne.n	8003ea0 <HAL_DMA_Init+0x194>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f72:	01ea      	lsls	r2, r5, #7
 8003f74:	d594      	bpl.n	8003ea0 <HAL_DMA_Init+0x194>
        hdma->State = HAL_DMA_STATE_READY;
 8003f76:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f78:	2240      	movs	r2, #64	; 0x40
 8003f7a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003f7c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8003f80:	4618      	mov	r0, r3
}
 8003f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003f84:	480f      	ldr	r0, [pc, #60]	; (8003fc4 <HAL_DMA_Init+0x2b8>)
 8003f86:	21c6      	movs	r1, #198	; 0xc6
 8003f88:	f7fe ffda 	bl	8002f40 <assert_failed>
 8003f8c:	e747      	b.n	8003e1e <HAL_DMA_Init+0x112>
    switch (tmp)
 8003f8e:	2a01      	cmp	r2, #1
 8003f90:	d010      	beq.n	8003fb4 <HAL_DMA_Init+0x2a8>
 8003f92:	f032 0202 	bics.w	r2, r2, #2
 8003f96:	d183      	bne.n	8003ea0 <HAL_DMA_Init+0x194>
 8003f98:	e7eb      	b.n	8003f72 <HAL_DMA_Init+0x266>
    switch (tmp)
 8003f9a:	2a03      	cmp	r2, #3
 8003f9c:	d880      	bhi.n	8003ea0 <HAL_DMA_Init+0x194>
 8003f9e:	a101      	add	r1, pc, #4	; (adr r1, 8003fa4 <HAL_DMA_Init+0x298>)
 8003fa0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003fa4:	08003f77 	.word	0x08003f77
 8003fa8:	08003f73 	.word	0x08003f73
 8003fac:	08003f77 	.word	0x08003f77
 8003fb0:	08003fb5 	.word	0x08003fb5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fb4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003fb8:	f47f af72 	bne.w	8003ea0 <HAL_DMA_Init+0x194>
 8003fbc:	e7db      	b.n	8003f76 <HAL_DMA_Init+0x26a>
 8003fbe:	bf00      	nop
 8003fc0:	40026010 	.word	0x40026010
 8003fc4:	0800d018 	.word	0x0800d018
 8003fc8:	f010803f 	.word	0xf010803f
 8003fcc:	aaaaaaab 	.word	0xaaaaaaab
 8003fd0:	0800d050 	.word	0x0800d050

08003fd4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fd4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d003      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8003fe4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fe6:	2305      	movs	r3, #5
 8003fe8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003fec:	6813      	ldr	r3, [r2, #0]
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003ff4:	2000      	movs	r0, #0
}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_DMA_IRQHandler>:
{
 8003ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003ffe:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004000:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8004002:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004004:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8004006:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004008:	4971      	ldr	r1, [pc, #452]	; (80041d0 <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800400a:	2208      	movs	r2, #8
 800400c:	409a      	lsls	r2, r3
 800400e:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 8004010:	680d      	ldr	r5, [r1, #0]
{
 8004012:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004014:	d004      	beq.n	8004020 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004016:	6801      	ldr	r1, [r0, #0]
 8004018:	680f      	ldr	r7, [r1, #0]
 800401a:	0778      	lsls	r0, r7, #29
 800401c:	f100 808a 	bmi.w	8004134 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004020:	2201      	movs	r2, #1
 8004022:	409a      	lsls	r2, r3
 8004024:	4222      	tst	r2, r4
 8004026:	d004      	beq.n	8004032 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004028:	f8d8 1000 	ldr.w	r1, [r8]
 800402c:	6949      	ldr	r1, [r1, #20]
 800402e:	0609      	lsls	r1, r1, #24
 8004030:	d478      	bmi.n	8004124 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004032:	2204      	movs	r2, #4
 8004034:	409a      	lsls	r2, r3
 8004036:	4222      	tst	r2, r4
 8004038:	d004      	beq.n	8004044 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800403a:	f8d8 1000 	ldr.w	r1, [r8]
 800403e:	6809      	ldr	r1, [r1, #0]
 8004040:	078f      	lsls	r7, r1, #30
 8004042:	d467      	bmi.n	8004114 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004044:	2210      	movs	r2, #16
 8004046:	409a      	lsls	r2, r3
 8004048:	4222      	tst	r2, r4
 800404a:	d004      	beq.n	8004056 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800404c:	f8d8 1000 	ldr.w	r1, [r8]
 8004050:	680f      	ldr	r7, [r1, #0]
 8004052:	0738      	lsls	r0, r7, #28
 8004054:	d449      	bmi.n	80040ea <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004056:	2220      	movs	r2, #32
 8004058:	409a      	lsls	r2, r3
 800405a:	4222      	tst	r2, r4
 800405c:	d017      	beq.n	800408e <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800405e:	f8d8 1000 	ldr.w	r1, [r8]
 8004062:	680c      	ldr	r4, [r1, #0]
 8004064:	06e0      	lsls	r0, r4, #27
 8004066:	d512      	bpl.n	800408e <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004068:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800406a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800406e:	2a05      	cmp	r2, #5
 8004070:	d073      	beq.n	800415a <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004072:	680b      	ldr	r3, [r1, #0]
 8004074:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004078:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800407a:	f000 8090 	beq.w	800419e <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800407e:	0319      	lsls	r1, r3, #12
 8004080:	f140 809b 	bpl.w	80041ba <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8004084:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8004088:	b10b      	cbz	r3, 800408e <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 800408a:	4640      	mov	r0, r8
 800408c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800408e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8004092:	b33b      	cbz	r3, 80040e4 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004094:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8004098:	07da      	lsls	r2, r3, #31
 800409a:	d51b      	bpl.n	80040d4 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 800409c:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040a0:	494c      	ldr	r1, [pc, #304]	; (80041d4 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80040a2:	2305      	movs	r3, #5
 80040a4:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80040a8:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040aa:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80040ae:	f023 0301 	bic.w	r3, r3, #1
 80040b2:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040b4:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80040b6:	e002      	b.n	80040be <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040b8:	6813      	ldr	r3, [r2, #0]
 80040ba:	07db      	lsls	r3, r3, #31
 80040bc:	d504      	bpl.n	80040c8 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 80040be:	9b01      	ldr	r3, [sp, #4]
 80040c0:	3301      	adds	r3, #1
 80040c2:	42ab      	cmp	r3, r5
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	d9f7      	bls.n	80040b8 <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 80040c8:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80040ca:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80040cc:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80040d0:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80040d4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80040d8:	b123      	cbz	r3, 80040e4 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 80040da:	4640      	mov	r0, r8
}
 80040dc:	b002      	add	sp, #8
 80040de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80040e2:	4718      	bx	r3
}
 80040e4:	b002      	add	sp, #8
 80040e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040ea:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040ec:	680a      	ldr	r2, [r1, #0]
 80040ee:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040f2:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040f4:	d12a      	bne.n	800414c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040f6:	05d7      	lsls	r7, r2, #23
 80040f8:	d403      	bmi.n	8004102 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040fa:	680a      	ldr	r2, [r1, #0]
 80040fc:	f022 0208 	bic.w	r2, r2, #8
 8004100:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8004102:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8004106:	2a00      	cmp	r2, #0
 8004108:	d0a5      	beq.n	8004056 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 800410a:	4640      	mov	r0, r8
 800410c:	4790      	blx	r2
 800410e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8004112:	e7a0      	b.n	8004056 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004114:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004116:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800411a:	f042 0204 	orr.w	r2, r2, #4
 800411e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8004122:	e78f      	b.n	8004044 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004124:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004126:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800412a:	f042 0202 	orr.w	r2, r2, #2
 800412e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8004132:	e77e      	b.n	8004032 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004134:	680f      	ldr	r7, [r1, #0]
 8004136:	f027 0704 	bic.w	r7, r7, #4
 800413a:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800413c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800413e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800414a:	e769      	b.n	8004020 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800414c:	0312      	lsls	r2, r2, #12
 800414e:	d5d8      	bpl.n	8004102 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004150:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8004154:	2a00      	cmp	r2, #0
 8004156:	d1d8      	bne.n	800410a <HAL_DMA_IRQHandler+0x112>
 8004158:	e77d      	b.n	8004056 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800415a:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800415c:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004160:	f022 0216 	bic.w	r2, r2, #22
 8004164:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004166:	694a      	ldr	r2, [r1, #20]
 8004168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800416c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800416e:	b354      	cbz	r4, 80041c6 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004170:	680a      	ldr	r2, [r1, #0]
 8004172:	f022 0208 	bic.w	r2, r2, #8
 8004176:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004178:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800417a:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8004182:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 8004184:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004186:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 8004188:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800418c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8004190:	2900      	cmp	r1, #0
 8004192:	d0a7      	beq.n	80040e4 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8004194:	4640      	mov	r0, r8
}
 8004196:	b002      	add	sp, #8
 8004198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 800419c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800419e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80041a2:	f47f af6f 	bne.w	8004084 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041a6:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80041a8:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041aa:	f022 0210 	bic.w	r2, r2, #16
 80041ae:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80041b0:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80041b4:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 80041b8:	e764      	b.n	8004084 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 80041ba:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f47f af63 	bne.w	800408a <HAL_DMA_IRQHandler+0x92>
 80041c4:	e763      	b.n	800408e <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041c6:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80041ca:	2a00      	cmp	r2, #0
 80041cc:	d1d0      	bne.n	8004170 <HAL_DMA_IRQHandler+0x178>
 80041ce:	e7d3      	b.n	8004178 <HAL_DMA_IRQHandler+0x180>
 80041d0:	20000030 	.word	0x20000030
 80041d4:	1b4e81b5 	.word	0x1b4e81b5

080041d8 <HAL_DMA_GetState>:
  return hdma->State;
 80041d8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop

080041e0 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80041e0:	b911      	cbnz	r1, 80041e8 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80041e2:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e4:	4608      	mov	r0, r1
      break;
 80041e6:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 80041e8:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 80041ea:	4770      	bx	lr

080041ec <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80041ec:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
 80041ee:	f021 63c0 	bic.w	r3, r1, #100663296	; 0x6000000
 80041f2:	f023 031f 	bic.w	r3, r3, #31
{
 80041f6:	460c      	mov	r4, r1
 80041f8:	4605      	mov	r5, r0
  assert_param(IS_EXTI_LINE(ExtiLine));
 80041fa:	b90b      	cbnz	r3, 8004200 <HAL_EXTI_GetHandle+0x14>
 80041fc:	018b      	lsls	r3, r1, #6
 80041fe:	d408      	bmi.n	8004212 <HAL_EXTI_GetHandle+0x26>
 8004200:	480a      	ldr	r0, [pc, #40]	; (800422c <HAL_EXTI_GetHandle+0x40>)
 8004202:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8004206:	f7fe fe9b 	bl	8002f40 <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
 800420a:	b165      	cbz	r5, 8004226 <HAL_EXTI_GetHandle+0x3a>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800420c:	602c      	str	r4, [r5, #0]

    return HAL_OK;
 800420e:	2000      	movs	r0, #0
  }
}
 8004210:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_EXTI_LINE(ExtiLine));
 8004212:	f001 031f 	and.w	r3, r1, #31
 8004216:	2b16      	cmp	r3, #22
 8004218:	d9f7      	bls.n	800420a <HAL_EXTI_GetHandle+0x1e>
 800421a:	4804      	ldr	r0, [pc, #16]	; (800422c <HAL_EXTI_GetHandle+0x40>)
 800421c:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8004220:	f7fe fe8e 	bl	8002f40 <assert_failed>
 8004224:	e7f1      	b.n	800420a <HAL_EXTI_GetHandle+0x1e>
    return HAL_ERROR;
 8004226:	2001      	movs	r0, #1
}
 8004228:	bd38      	pop	{r3, r4, r5, pc}
 800422a:	bf00      	nop
 800422c:	0800d058 	.word	0x0800d058

08004230 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004230:	6803      	ldr	r3, [r0, #0]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8004232:	4909      	ldr	r1, [pc, #36]	; (8004258 <HAL_EXTI_IRQHandler+0x28>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004234:	f003 021f 	and.w	r2, r3, #31
{
 8004238:	b410      	push	{r4}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800423a:	2301      	movs	r3, #1
  regval = (EXTI->PR & maskline);
 800423c:	694c      	ldr	r4, [r1, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800423e:	4093      	lsls	r3, r2
  if (regval != 0x00u)
 8004240:	421c      	tst	r4, r3
 8004242:	d005      	beq.n	8004250 <HAL_EXTI_IRQHandler+0x20>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004244:	6842      	ldr	r2, [r0, #4]
    EXTI->PR = maskline;
 8004246:	614b      	str	r3, [r1, #20]
    if (hexti->PendingCallback != NULL)
 8004248:	b112      	cbz	r2, 8004250 <HAL_EXTI_IRQHandler+0x20>
    {
      hexti->PendingCallback();
    }
  }
}
 800424a:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 800424e:	4710      	bx	r2
}
 8004250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40013c00 	.word	0x40013c00

0800425c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004260:	4b9c      	ldr	r3, [pc, #624]	; (80044d4 <HAL_GPIO_Init+0x278>)
 8004262:	4298      	cmp	r0, r3
{
 8004264:	b083      	sub	sp, #12
 8004266:	4605      	mov	r5, r0
 8004268:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800426a:	d017      	beq.n	800429c <HAL_GPIO_Init+0x40>
 800426c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004270:	4298      	cmp	r0, r3
 8004272:	d013      	beq.n	800429c <HAL_GPIO_Init+0x40>
 8004274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004278:	4298      	cmp	r0, r3
 800427a:	d00f      	beq.n	800429c <HAL_GPIO_Init+0x40>
 800427c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004280:	4298      	cmp	r0, r3
 8004282:	d00b      	beq.n	800429c <HAL_GPIO_Init+0x40>
 8004284:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004288:	4298      	cmp	r0, r3
 800428a:	d007      	beq.n	800429c <HAL_GPIO_Init+0x40>
 800428c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004290:	4298      	cmp	r0, r3
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x40>
 8004294:	4890      	ldr	r0, [pc, #576]	; (80044d8 <HAL_GPIO_Init+0x27c>)
 8004296:	21ac      	movs	r1, #172	; 0xac
 8004298:	f7fe fe52 	bl	8002f40 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	b29a      	uxth	r2, r3
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	f000 80d2 	beq.w	800444a <HAL_GPIO_Init+0x1ee>
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f040 80cd 	bne.w	800444a <HAL_GPIO_Init+0x1ee>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d917      	bls.n	80042e6 <HAL_GPIO_Init+0x8a>
 80042b6:	f1a3 0211 	sub.w	r2, r3, #17
 80042ba:	2a01      	cmp	r2, #1
 80042bc:	d913      	bls.n	80042e6 <HAL_GPIO_Init+0x8a>
 80042be:	4987      	ldr	r1, [pc, #540]	; (80044dc <HAL_GPIO_Init+0x280>)
 80042c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80042c4:	428a      	cmp	r2, r1
 80042c6:	d00e      	beq.n	80042e6 <HAL_GPIO_Init+0x8a>
 80042c8:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80042cc:	428b      	cmp	r3, r1
 80042ce:	d00a      	beq.n	80042e6 <HAL_GPIO_Init+0x8a>
 80042d0:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80042d4:	428a      	cmp	r2, r1
 80042d6:	d006      	beq.n	80042e6 <HAL_GPIO_Init+0x8a>
 80042d8:	4a81      	ldr	r2, [pc, #516]	; (80044e0 <HAL_GPIO_Init+0x284>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_Init+0x8a>
 80042de:	487e      	ldr	r0, [pc, #504]	; (80044d8 <HAL_GPIO_Init+0x27c>)
 80042e0:	21ae      	movs	r1, #174	; 0xae
 80042e2:	f7fe fe2d 	bl	8002f40 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	f200 80e9 	bhi.w	80044c0 <HAL_GPIO_Init+0x264>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042ee:	f8df a208 	ldr.w	sl, [pc, #520]	; 80044f8 <HAL_GPIO_Init+0x29c>
{
 80042f2:	2400      	movs	r4, #0
 80042f4:	e003      	b.n	80042fe <HAL_GPIO_Init+0xa2>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042f6:	3401      	adds	r4, #1
 80042f8:	2c10      	cmp	r4, #16
 80042fa:	f000 80a3 	beq.w	8004444 <HAL_GPIO_Init+0x1e8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042fe:	683b      	ldr	r3, [r7, #0]
    ioposition = 0x01U << position;
 8004300:	2601      	movs	r6, #1
 8004302:	40a6      	lsls	r6, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004304:	ea06 0803 	and.w	r8, r6, r3
    if(iocurrent == ioposition)
 8004308:	ea36 0303 	bics.w	r3, r6, r3
 800430c:	d1f3      	bne.n	80042f6 <HAL_GPIO_Init+0x9a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	f001 0303 	and.w	r3, r1, #3
 8004314:	1e5a      	subs	r2, r3, #1
 8004316:	2a01      	cmp	r2, #1
 8004318:	f240 809c 	bls.w	8004454 <HAL_GPIO_Init+0x1f8>
 800431c:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8004320:	f04f 0903 	mov.w	r9, #3
 8004324:	fa09 f90b 	lsl.w	r9, r9, fp
 8004328:	ea6f 0909 	mvn.w	r9, r9
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800432c:	2b03      	cmp	r3, #3
 800432e:	d028      	beq.n	8004382 <HAL_GPIO_Init+0x126>
        temp = GPIOx->PUPDR;
 8004330:	68e8      	ldr	r0, [r5, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004332:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004334:	ea00 0009 	and.w	r0, r0, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004338:	fa02 f20b 	lsl.w	r2, r2, fp
 800433c:	4302      	orrs	r2, r0
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433e:	2b02      	cmp	r3, #2
        GPIOx->PUPDR = temp;
 8004340:	60ea      	str	r2, [r5, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004342:	d11e      	bne.n	8004382 <HAL_GPIO_Init+0x126>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	2a0f      	cmp	r2, #15
 8004348:	f240 80a0 	bls.w	800448c <HAL_GPIO_Init+0x230>
 800434c:	21dc      	movs	r1, #220	; 0xdc
 800434e:	4862      	ldr	r0, [pc, #392]	; (80044d8 <HAL_GPIO_Init+0x27c>)
 8004350:	f7fe fdf6 	bl	8002f40 <assert_failed>
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	f001 0303 	and.w	r3, r1, #3
        temp = GPIOx->AFR[position >> 3U];
 800435c:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8004360:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004364:	f004 0607 	and.w	r6, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8004368:	f8dc 0020 	ldr.w	r0, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800436c:	00b6      	lsls	r6, r6, #2
 800436e:	f04f 0e0f 	mov.w	lr, #15
 8004372:	fa0e fe06 	lsl.w	lr, lr, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004376:	40b2      	lsls	r2, r6
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004378:	ea20 000e 	bic.w	r0, r0, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800437c:	4302      	orrs	r2, r0
        GPIOx->AFR[position >> 3U] = temp;
 800437e:	f8cc 2020 	str.w	r2, [ip, #32]
      temp = GPIOx->MODER;
 8004382:	682a      	ldr	r2, [r5, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004384:	fa03 f30b 	lsl.w	r3, r3, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004388:	ea02 0909 	and.w	r9, r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800438c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->MODER = temp;
 8004390:	602b      	str	r3, [r5, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004392:	00cb      	lsls	r3, r1, #3
 8004394:	d5af      	bpl.n	80042f6 <HAL_GPIO_Init+0x9a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004396:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <HAL_GPIO_Init+0x288>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004398:	4e4e      	ldr	r6, [pc, #312]	; (80044d4 <HAL_GPIO_Init+0x278>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439a:	2200      	movs	r2, #0
 800439c:	9201      	str	r2, [sp, #4]
 800439e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
 80043a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a8:	f024 0303 	bic.w	r3, r4, #3
 80043ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043b0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80043b4:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80043b8:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043ba:	f004 0203 	and.w	r2, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043be:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80043c0:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043c4:	0092      	lsls	r2, r2, #2
 80043c6:	200f      	movs	r0, #15
 80043c8:	4090      	lsls	r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ca:	42b5      	cmp	r5, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043cc:	ea2c 0000 	bic.w	r0, ip, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043d0:	d00f      	beq.n	80043f2 <HAL_GPIO_Init+0x196>
 80043d2:	4555      	cmp	r5, sl
 80043d4:	d06a      	beq.n	80044ac <HAL_GPIO_Init+0x250>
 80043d6:	4e44      	ldr	r6, [pc, #272]	; (80044e8 <HAL_GPIO_Init+0x28c>)
 80043d8:	42b5      	cmp	r5, r6
 80043da:	d06c      	beq.n	80044b6 <HAL_GPIO_Init+0x25a>
 80043dc:	4e43      	ldr	r6, [pc, #268]	; (80044ec <HAL_GPIO_Init+0x290>)
 80043de:	42b5      	cmp	r5, r6
 80043e0:	d073      	beq.n	80044ca <HAL_GPIO_Init+0x26e>
 80043e2:	4e43      	ldr	r6, [pc, #268]	; (80044f0 <HAL_GPIO_Init+0x294>)
 80043e4:	42b5      	cmp	r5, r6
 80043e6:	bf0c      	ite	eq
 80043e8:	2604      	moveq	r6, #4
 80043ea:	2607      	movne	r6, #7
 80043ec:	fa06 f202 	lsl.w	r2, r6, r2
 80043f0:	4310      	orrs	r0, r2
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043f2:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <HAL_GPIO_Init+0x298>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043f4:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 80043f6:	6812      	ldr	r2, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80043f8:	4b3e      	ldr	r3, [pc, #248]	; (80044f4 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 80043fa:	ea6f 0008 	mvn.w	r0, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043fe:	03ce      	lsls	r6, r1, #15
        temp &= ~((uint32_t)iocurrent);
 8004400:	bf54      	ite	pl
 8004402:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8004404:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 8004408:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800440a:	685a      	ldr	r2, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800440c:	038b      	lsls	r3, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800440e:	4b39      	ldr	r3, [pc, #228]	; (80044f4 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 8004410:	bf54      	ite	pl
 8004412:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8004414:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8004418:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800441a:	689a      	ldr	r2, [r3, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800441c:	4b35      	ldr	r3, [pc, #212]	; (80044f4 <HAL_GPIO_Init+0x298>)
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800441e:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8004420:	bf54      	ite	pl
 8004422:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8004424:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8004428:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800442a:	68db      	ldr	r3, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800442c:	028a      	lsls	r2, r1, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800442e:	f104 0401 	add.w	r4, r4, #1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8004432:	4a30      	ldr	r2, [pc, #192]	; (80044f4 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 8004434:	bf54      	ite	pl
 8004436:	4003      	andpl	r3, r0
          temp |= iocurrent;
 8004438:	ea48 0303 	orrmi.w	r3, r8, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 800443c:	2c10      	cmp	r4, #16
        EXTI->FTSR = temp;
 800443e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004440:	f47f af5d 	bne.w	80042fe <HAL_GPIO_Init+0xa2>
      }
    }
  }
}
 8004444:	b003      	add	sp, #12
 8004446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800444a:	4823      	ldr	r0, [pc, #140]	; (80044d8 <HAL_GPIO_Init+0x27c>)
 800444c:	21ad      	movs	r1, #173	; 0xad
 800444e:	f7fe fd77 	bl	8002f40 <assert_failed>
 8004452:	e72d      	b.n	80042b0 <HAL_GPIO_Init+0x54>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	2a03      	cmp	r2, #3
 8004458:	d81f      	bhi.n	800449a <HAL_GPIO_Init+0x23e>
        temp = GPIOx->OSPEEDR; 
 800445a:	68a8      	ldr	r0, [r5, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800445c:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8004460:	f04f 0903 	mov.w	r9, #3
 8004464:	fa09 f90b 	lsl.w	r9, r9, fp
 8004468:	ea20 0009 	bic.w	r0, r0, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 800446c:	fa02 f20b 	lsl.w	r2, r2, fp
 8004470:	4302      	orrs	r2, r0
        GPIOx->OSPEEDR = temp;
 8004472:	60aa      	str	r2, [r5, #8]
        temp = GPIOx->OTYPER;
 8004474:	6868      	ldr	r0, [r5, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004476:	f3c1 1200 	ubfx	r2, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800447a:	ea20 0006 	bic.w	r0, r0, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800447e:	4616      	mov	r6, r2
 8004480:	40a6      	lsls	r6, r4
 8004482:	4306      	orrs	r6, r0
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004484:	ea6f 0909 	mvn.w	r9, r9
        GPIOx->OTYPER = temp;
 8004488:	606e      	str	r6, [r5, #4]
 800448a:	e74f      	b.n	800432c <HAL_GPIO_Init+0xd0>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800448c:	f249 70f7 	movw	r0, #38903	; 0x97f7
 8004490:	40d0      	lsrs	r0, r2
 8004492:	07c0      	lsls	r0, r0, #31
 8004494:	f53f af62 	bmi.w	800435c <HAL_GPIO_Init+0x100>
 8004498:	e758      	b.n	800434c <HAL_GPIO_Init+0xf0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800449a:	21c1      	movs	r1, #193	; 0xc1
 800449c:	480e      	ldr	r0, [pc, #56]	; (80044d8 <HAL_GPIO_Init+0x27c>)
 800449e:	f7fe fd4f 	bl	8002f40 <assert_failed>
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	f001 0303 	and.w	r3, r1, #3
 80044aa:	e7d6      	b.n	800445a <HAL_GPIO_Init+0x1fe>
 80044ac:	2601      	movs	r6, #1
 80044ae:	fa06 f202 	lsl.w	r2, r6, r2
 80044b2:	4310      	orrs	r0, r2
 80044b4:	e79d      	b.n	80043f2 <HAL_GPIO_Init+0x196>
 80044b6:	2602      	movs	r6, #2
 80044b8:	fa06 f202 	lsl.w	r2, r6, r2
 80044bc:	4310      	orrs	r0, r2
 80044be:	e798      	b.n	80043f2 <HAL_GPIO_Init+0x196>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80044c0:	4805      	ldr	r0, [pc, #20]	; (80044d8 <HAL_GPIO_Init+0x27c>)
 80044c2:	21af      	movs	r1, #175	; 0xaf
 80044c4:	f7fe fd3c 	bl	8002f40 <assert_failed>
 80044c8:	e711      	b.n	80042ee <HAL_GPIO_Init+0x92>
 80044ca:	2603      	movs	r6, #3
 80044cc:	fa06 f202 	lsl.w	r2, r6, r2
 80044d0:	4310      	orrs	r0, r2
 80044d2:	e78e      	b.n	80043f2 <HAL_GPIO_Init+0x196>
 80044d4:	40020000 	.word	0x40020000
 80044d8:	0800d094 	.word	0x0800d094
 80044dc:	10110000 	.word	0x10110000
 80044e0:	10220000 	.word	0x10220000
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40020800 	.word	0x40020800
 80044ec:	40020c00 	.word	0x40020c00
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40013c00 	.word	0x40013c00
 80044f8:	40020400 	.word	0x40020400

080044fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t tmp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004500:	4b52      	ldr	r3, [pc, #328]	; (800464c <HAL_GPIO_DeInit+0x150>)
 8004502:	4298      	cmp	r0, r3
{
 8004504:	b083      	sub	sp, #12
 8004506:	4604      	mov	r4, r0
 8004508:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800450a:	d018      	beq.n	800453e <HAL_GPIO_DeInit+0x42>
 800450c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004510:	4298      	cmp	r0, r3
 8004512:	d014      	beq.n	800453e <HAL_GPIO_DeInit+0x42>
 8004514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004518:	4298      	cmp	r0, r3
 800451a:	d010      	beq.n	800453e <HAL_GPIO_DeInit+0x42>
 800451c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004520:	4298      	cmp	r0, r3
 8004522:	d00c      	beq.n	800453e <HAL_GPIO_DeInit+0x42>
 8004524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004528:	4298      	cmp	r0, r3
 800452a:	d008      	beq.n	800453e <HAL_GPIO_DeInit+0x42>
 800452c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004530:	4298      	cmp	r0, r3
 8004532:	d004      	beq.n	800453e <HAL_GPIO_DeInit+0x42>
 8004534:	4846      	ldr	r0, [pc, #280]	; (8004650 <HAL_GPIO_DeInit+0x154>)
 8004536:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800453a:	f7fe fd01 	bl	8002f40 <assert_failed>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800453e:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800464c <HAL_GPIO_DeInit+0x150>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004542:	f8df e120 	ldr.w	lr, [pc, #288]	; 8004664 <HAL_GPIO_DeInit+0x168>
{
 8004546:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8004548:	f04f 0c01 	mov.w	ip, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800454c:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004550:	f04f 0a03 	mov.w	sl, #3
 8004554:	e002      	b.n	800455c <HAL_GPIO_DeInit+0x60>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004556:	3301      	adds	r3, #1
 8004558:	2b10      	cmp	r3, #16
 800455a:	d068      	beq.n	800462e <HAL_GPIO_DeInit+0x132>
    ioposition = 0x01U << position;
 800455c:	fa0c f203 	lsl.w	r2, ip, r3
    if(iocurrent == ioposition)
 8004560:	ea32 0106 	bics.w	r1, r2, r6
    iocurrent = (GPIO_Pin) & ioposition;
 8004564:	ea02 0506 	and.w	r5, r2, r6
    if(iocurrent == ioposition)
 8004568:	d1f5      	bne.n	8004556 <HAL_GPIO_DeInit+0x5a>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800456a:	f023 0003 	bic.w	r0, r3, #3
 800456e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8004572:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004576:	f003 0103 	and.w	r1, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 800457a:	6887      	ldr	r7, [r0, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800457c:	0089      	lsls	r1, r1, #2
 800457e:	fa09 f801 	lsl.w	r8, r9, r1
 8004582:	ea08 0707 	and.w	r7, r8, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004586:	455c      	cmp	r4, fp
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004588:	9701      	str	r7, [sp, #4]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800458a:	d053      	beq.n	8004634 <HAL_GPIO_DeInit+0x138>
 800458c:	4f31      	ldr	r7, [pc, #196]	; (8004654 <HAL_GPIO_DeInit+0x158>)
 800458e:	42bc      	cmp	r4, r7
 8004590:	d052      	beq.n	8004638 <HAL_GPIO_DeInit+0x13c>
 8004592:	4f31      	ldr	r7, [pc, #196]	; (8004658 <HAL_GPIO_DeInit+0x15c>)
 8004594:	42bc      	cmp	r4, r7
 8004596:	d052      	beq.n	800463e <HAL_GPIO_DeInit+0x142>
 8004598:	4f30      	ldr	r7, [pc, #192]	; (800465c <HAL_GPIO_DeInit+0x160>)
 800459a:	42bc      	cmp	r4, r7
 800459c:	d053      	beq.n	8004646 <HAL_GPIO_DeInit+0x14a>
 800459e:	4f30      	ldr	r7, [pc, #192]	; (8004660 <HAL_GPIO_DeInit+0x164>)
 80045a0:	42bc      	cmp	r4, r7
 80045a2:	bf14      	ite	ne
 80045a4:	2707      	movne	r7, #7
 80045a6:	2704      	moveq	r7, #4
 80045a8:	fa07 f101 	lsl.w	r1, r7, r1
 80045ac:	9f01      	ldr	r7, [sp, #4]
 80045ae:	428f      	cmp	r7, r1
 80045b0:	d11b      	bne.n	80045ea <HAL_GPIO_DeInit+0xee>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80045b2:	f8de 1000 	ldr.w	r1, [lr]
 80045b6:	ea21 0105 	bic.w	r1, r1, r5
 80045ba:	f8ce 1000 	str.w	r1, [lr]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80045be:	f8de 1004 	ldr.w	r1, [lr, #4]
 80045c2:	ea21 0105 	bic.w	r1, r1, r5
 80045c6:	f8ce 1004 	str.w	r1, [lr, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80045ca:	f8de 1008 	ldr.w	r1, [lr, #8]
 80045ce:	ea21 0105 	bic.w	r1, r1, r5
 80045d2:	f8ce 1008 	str.w	r1, [lr, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80045d6:	f8de 100c 	ldr.w	r1, [lr, #12]
 80045da:	ea21 0505 	bic.w	r5, r1, r5
 80045de:	f8ce 500c 	str.w	r5, [lr, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80045e2:	6881      	ldr	r1, [r0, #8]
 80045e4:	ea21 0108 	bic.w	r1, r1, r8
 80045e8:	6081      	str	r1, [r0, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ea:	6821      	ldr	r1, [r4, #0]
 80045ec:	005d      	lsls	r5, r3, #1
 80045ee:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045f2:	08d8      	lsrs	r0, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045f4:	ea21 0105 	bic.w	r1, r1, r5
 80045f8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80045fc:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045fe:	f003 0107 	and.w	r1, r3, #7
 8004602:	6a07      	ldr	r7, [r0, #32]
 8004604:	0089      	lsls	r1, r1, #2
 8004606:	fa09 f101 	lsl.w	r1, r9, r1
 800460a:	ea27 0101 	bic.w	r1, r7, r1
 800460e:	6201      	str	r1, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004610:	68e1      	ldr	r1, [r4, #12]
 8004612:	ea21 0105 	bic.w	r1, r1, r5
 8004616:	60e1      	str	r1, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004618:	6861      	ldr	r1, [r4, #4]
 800461a:	ea21 0202 	bic.w	r2, r1, r2
 800461e:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004620:	68a2      	ldr	r2, [r4, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004622:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004624:	ea22 0505 	bic.w	r5, r2, r5
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004628:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800462a:	60a5      	str	r5, [r4, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800462c:	d196      	bne.n	800455c <HAL_GPIO_DeInit+0x60>
    }
  }
}
 800462e:	b003      	add	sp, #12
 8004630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004634:	2100      	movs	r1, #0
 8004636:	e7b9      	b.n	80045ac <HAL_GPIO_DeInit+0xb0>
 8004638:	fa0c f101 	lsl.w	r1, ip, r1
 800463c:	e7b6      	b.n	80045ac <HAL_GPIO_DeInit+0xb0>
 800463e:	2702      	movs	r7, #2
 8004640:	fa07 f101 	lsl.w	r1, r7, r1
 8004644:	e7b2      	b.n	80045ac <HAL_GPIO_DeInit+0xb0>
 8004646:	fa0a f101 	lsl.w	r1, sl, r1
 800464a:	e7af      	b.n	80045ac <HAL_GPIO_DeInit+0xb0>
 800464c:	40020000 	.word	0x40020000
 8004650:	0800d094 	.word	0x0800d094
 8004654:	40020400 	.word	0x40020400
 8004658:	40020800 	.word	0x40020800
 800465c:	40020c00 	.word	0x40020c00
 8004660:	40021000 	.word	0x40021000
 8004664:	40013c00 	.word	0x40013c00

08004668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800466c:	460c      	mov	r4, r1
 800466e:	b129      	cbz	r1, 800467c <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004670:	692b      	ldr	r3, [r5, #16]
 8004672:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004674:	bf14      	ite	ne
 8004676:	2001      	movne	r0, #1
 8004678:	2000      	moveq	r0, #0
 800467a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800467c:	4802      	ldr	r0, [pc, #8]	; (8004688 <HAL_GPIO_ReadPin+0x20>)
 800467e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004682:	f7fe fc5d 	bl	8002f40 <assert_failed>
 8004686:	e7f3      	b.n	8004670 <HAL_GPIO_ReadPin+0x8>
 8004688:	0800d094 	.word	0x0800d094

0800468c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4606      	mov	r6, r0
 8004690:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004692:	460c      	mov	r4, r1
 8004694:	b161      	cbz	r1, 80046b0 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004696:	2d01      	cmp	r5, #1
 8004698:	d803      	bhi.n	80046a2 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800469a:	b905      	cbnz	r5, 800469e <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800469c:	0424      	lsls	r4, r4, #16
 800469e:	61b4      	str	r4, [r6, #24]
  }
}
 80046a0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80046a2:	4806      	ldr	r0, [pc, #24]	; (80046bc <HAL_GPIO_WritePin+0x30>)
 80046a4:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80046a8:	f7fe fc4a 	bl	8002f40 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ac:	61b4      	str	r4, [r6, #24]
}
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80046b0:	4802      	ldr	r0, [pc, #8]	; (80046bc <HAL_GPIO_WritePin+0x30>)
 80046b2:	f240 119b 	movw	r1, #411	; 0x19b
 80046b6:	f7fe fc43 	bl	8002f40 <assert_failed>
 80046ba:	e7ec      	b.n	8004696 <HAL_GPIO_WritePin+0xa>
 80046bc:	0800d094 	.word	0x0800d094

080046c0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80046c4:	460c      	mov	r4, r1
 80046c6:	b141      	cbz	r1, 80046da <HAL_GPIO_TogglePin+0x1a>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80046c8:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046ca:	ea04 0301 	and.w	r3, r4, r1
 80046ce:	ea24 0401 	bic.w	r4, r4, r1
 80046d2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80046d6:	61ac      	str	r4, [r5, #24]
}
 80046d8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80046da:	4803      	ldr	r0, [pc, #12]	; (80046e8 <HAL_GPIO_TogglePin+0x28>)
 80046dc:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80046e0:	f7fe fc2e 	bl	8002f40 <assert_failed>
 80046e4:	e7f0      	b.n	80046c8 <HAL_GPIO_TogglePin+0x8>
 80046e6:	bf00      	nop
 80046e8:	0800d094 	.word	0x0800d094

080046ec <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046ec:	4a04      	ldr	r2, [pc, #16]	; (8004700 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80046ee:	6951      	ldr	r1, [r2, #20]
 80046f0:	4201      	tst	r1, r0
 80046f2:	d100      	bne.n	80046f6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80046f4:	4770      	bx	lr
{
 80046f6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046f8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046fa:	f7fe fd99 	bl	8003230 <HAL_GPIO_EXTI_Callback>
  }
}
 80046fe:	bd08      	pop	{r3, pc}
 8004700:	40013c00 	.word	0x40013c00

08004704 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	4605      	mov	r5, r0
 8004708:	460e      	mov	r6, r1
 800470a:	4617      	mov	r7, r2
 800470c:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800470e:	682c      	ldr	r4, [r5, #0]
 8004710:	d003      	beq.n	800471a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x16>
 8004712:	e009      	b.n	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004714:	6963      	ldr	r3, [r4, #20]
 8004716:	055b      	lsls	r3, r3, #21
 8004718:	d424      	bmi.n	8004764 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800471a:	6963      	ldr	r3, [r4, #20]
 800471c:	43db      	mvns	r3, r3
 800471e:	f013 0308 	ands.w	r3, r3, #8
 8004722:	d1f7      	bne.n	8004714 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8004724:	4618      	mov	r0, r3
}
 8004726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004728:	6963      	ldr	r3, [r4, #20]
 800472a:	43db      	mvns	r3, r3
 800472c:	f013 0308 	ands.w	r3, r3, #8
 8004730:	d0f8      	beq.n	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004732:	6963      	ldr	r3, [r4, #20]
 8004734:	0559      	lsls	r1, r3, #21
 8004736:	d415      	bmi.n	8004764 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004738:	f7fe fff4 	bl	8003724 <HAL_GetTick>
 800473c:	1bc0      	subs	r0, r0, r7
 800473e:	4286      	cmp	r6, r0
 8004740:	d301      	bcc.n	8004746 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x42>
 8004742:	2e00      	cmp	r6, #0
 8004744:	d1e2      	bne.n	800470c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004746:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004748:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800474c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004750:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004754:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004756:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800475a:	f043 0320 	orr.w	r3, r3, #32
 800475e:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8004760:	2001      	movs	r0, #1
}
 8004762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	6823      	ldr	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004766:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 8004770:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004772:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004774:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004776:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004778:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004780:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004782:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800478c:	2001      	movs	r0, #1
}
 800478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004790 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	4605      	mov	r5, r0
 8004794:	460e      	mov	r6, r1
 8004796:	4617      	mov	r7, r2
 8004798:	1c72      	adds	r2, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800479a:	682c      	ldr	r4, [r5, #0]
 800479c:	d003      	beq.n	80047a6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 800479e:	e009      	b.n	80047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047a0:	6963      	ldr	r3, [r4, #20]
 80047a2:	055b      	lsls	r3, r3, #21
 80047a4:	d424      	bmi.n	80047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047a6:	6963      	ldr	r3, [r4, #20]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	f013 0302 	ands.w	r3, r3, #2
 80047ae:	d1f7      	bne.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>
  return HAL_OK;
 80047b0:	4618      	mov	r0, r3
}
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047b4:	6963      	ldr	r3, [r4, #20]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	f013 0302 	ands.w	r3, r3, #2
 80047bc:	d0f8      	beq.n	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047be:	6963      	ldr	r3, [r4, #20]
 80047c0:	0559      	lsls	r1, r3, #21
 80047c2:	d415      	bmi.n	80047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c4:	f7fe ffae 	bl	8003724 <HAL_GetTick>
 80047c8:	1bc0      	subs	r0, r0, r7
 80047ca:	4286      	cmp	r6, r0
 80047cc:	d301      	bcc.n	80047d2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 80047ce:	2e00      	cmp	r6, #0
 80047d0:	d1e2      	bne.n	8004798 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047d2:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80047d4:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047d6:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047d8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047dc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047e0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80047e2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047e6:	f043 0320 	orr.w	r3, r3, #32
 80047ea:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80047ec:	2001      	movs	r0, #1
}
 80047ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f0:	6823      	ldr	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047f2:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f4:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 80047fc:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fe:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004800:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004802:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004804:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004808:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800480c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800480e:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004812:	f043 0304 	orr.w	r3, r3, #4
 8004816:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8004818:	2001      	movs	r0, #1
}
 800481a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800481c <I2C_RequestMemoryWrite>:
{
 800481c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004820:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004822:	6800      	ldr	r0, [r0, #0]
{
 8004824:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004826:	6807      	ldr	r7, [r0, #0]
{
 8004828:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800482a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800482e:	f447 7780 	orr.w	r7, r7, #256	; 0x100
{
 8004832:	460d      	mov	r5, r1
 8004834:	4690      	mov	r8, r2
 8004836:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004838:	6007      	str	r7, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800483a:	1c72      	adds	r2, r6, #1
 800483c:	d111      	bne.n	8004862 <I2C_RequestMemoryWrite+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800483e:	6943      	ldr	r3, [r0, #20]
 8004840:	07db      	lsls	r3, r3, #31
 8004842:	d5fc      	bpl.n	800483e <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004844:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004848:	6105      	str	r5, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800484a:	464a      	mov	r2, r9
 800484c:	4631      	mov	r1, r6
 800484e:	4620      	mov	r0, r4
 8004850:	f7ff ff9e 	bl	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8004854:	4605      	mov	r5, r0
 8004856:	b180      	cbz	r0, 800487a <I2C_RequestMemoryWrite+0x5e>
      return HAL_ERROR;
 8004858:	2501      	movs	r5, #1
}
 800485a:	4628      	mov	r0, r5
 800485c:	b002      	add	sp, #8
 800485e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004862:	6943      	ldr	r3, [r0, #20]
 8004864:	07df      	lsls	r7, r3, #31
 8004866:	d4ed      	bmi.n	8004844 <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004868:	f7fe ff5c 	bl	8003724 <HAL_GetTick>
 800486c:	eba0 0009 	sub.w	r0, r0, r9
 8004870:	4286      	cmp	r6, r0
 8004872:	d32a      	bcc.n	80048ca <I2C_RequestMemoryWrite+0xae>
 8004874:	b34e      	cbz	r6, 80048ca <I2C_RequestMemoryWrite+0xae>
 8004876:	6820      	ldr	r0, [r4, #0]
 8004878:	e7df      	b.n	800483a <I2C_RequestMemoryWrite+0x1e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	9001      	str	r0, [sp, #4]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	9201      	str	r2, [sp, #4]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	9201      	str	r2, [sp, #4]
 8004886:	9a01      	ldr	r2, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004888:	1c72      	adds	r2, r6, #1
 800488a:	d14d      	bne.n	8004928 <I2C_RequestMemoryWrite+0x10c>
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	0617      	lsls	r7, r2, #24
 8004890:	d434      	bmi.n	80048fc <I2C_RequestMemoryWrite+0xe0>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	0550      	lsls	r0, r2, #21
 8004896:	d5f9      	bpl.n	800488c <I2C_RequestMemoryWrite+0x70>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004898:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800489e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a0:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80048a2:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048a4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ac:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ae:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048b2:	f043 0304 	orr.w	r3, r3, #4
 80048b6:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d1cc      	bne.n	8004858 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	6813      	ldr	r3, [r2, #0]
 80048c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	e7c6      	b.n	8004858 <I2C_RequestMemoryWrite+0x3c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048ca:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80048cc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048ce:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048d4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048da:	6821      	ldr	r1, [r4, #0]
        __HAL_UNLOCK(hi2c);
 80048dc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048e0:	f043 0320 	orr.w	r3, r3, #32
 80048e4:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048e6:	680b      	ldr	r3, [r1, #0]
 80048e8:	05d9      	lsls	r1, r3, #23
 80048ea:	d502      	bpl.n	80048f2 <I2C_RequestMemoryWrite+0xd6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048f0:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80048f2:	2503      	movs	r5, #3
}
 80048f4:	4628      	mov	r0, r5
 80048f6:	b002      	add	sp, #8
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048fc:	f1ba 0f01 	cmp.w	sl, #1
 8004900:	d106      	bne.n	8004910 <I2C_RequestMemoryWrite+0xf4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004902:	fa5f f288 	uxtb.w	r2, r8
}
 8004906:	4628      	mov	r0, r5
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004908:	611a      	str	r2, [r3, #16]
}
 800490a:	b002      	add	sp, #8
 800490c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004910:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004914:	611a      	str	r2, [r3, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004916:	1c77      	adds	r7, r6, #1
 8004918:	d115      	bne.n	8004946 <I2C_RequestMemoryWrite+0x12a>
 800491a:	695a      	ldr	r2, [r3, #20]
 800491c:	0610      	lsls	r0, r2, #24
 800491e:	d4f0      	bmi.n	8004902 <I2C_RequestMemoryWrite+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	0551      	lsls	r1, r2, #21
 8004924:	d5f9      	bpl.n	800491a <I2C_RequestMemoryWrite+0xfe>
 8004926:	e7b7      	b.n	8004898 <I2C_RequestMemoryWrite+0x7c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004928:	695a      	ldr	r2, [r3, #20]
 800492a:	0611      	lsls	r1, r2, #24
 800492c:	d4e6      	bmi.n	80048fc <I2C_RequestMemoryWrite+0xe0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	0551      	lsls	r1, r2, #21
 8004932:	d4b1      	bmi.n	8004898 <I2C_RequestMemoryWrite+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004934:	f7fe fef6 	bl	8003724 <HAL_GetTick>
 8004938:	eba0 0009 	sub.w	r0, r0, r9
 800493c:	4286      	cmp	r6, r0
 800493e:	d311      	bcc.n	8004964 <I2C_RequestMemoryWrite+0x148>
 8004940:	b186      	cbz	r6, 8004964 <I2C_RequestMemoryWrite+0x148>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	e7a0      	b.n	8004888 <I2C_RequestMemoryWrite+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	0612      	lsls	r2, r2, #24
 800494a:	d4da      	bmi.n	8004902 <I2C_RequestMemoryWrite+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	0552      	lsls	r2, r2, #21
 8004950:	d4a2      	bmi.n	8004898 <I2C_RequestMemoryWrite+0x7c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004952:	f7fe fee7 	bl	8003724 <HAL_GetTick>
 8004956:	eba0 0009 	sub.w	r0, r0, r9
 800495a:	4286      	cmp	r6, r0
 800495c:	d302      	bcc.n	8004964 <I2C_RequestMemoryWrite+0x148>
 800495e:	b10e      	cbz	r6, 8004964 <I2C_RequestMemoryWrite+0x148>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	e7d8      	b.n	8004916 <I2C_RequestMemoryWrite+0xfa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004964:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004966:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004968:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800496a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800496e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004972:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004974:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004978:	f043 0320 	orr.w	r3, r3, #32
 800497c:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800497e:	e79b      	b.n	80048b8 <I2C_RequestMemoryWrite+0x9c>

08004980 <I2C_RequestMemoryRead>:
{
 8004980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004986:	6800      	ldr	r0, [r0, #0]
 8004988:	6807      	ldr	r7, [r0, #0]
 800498a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 800498e:	6007      	str	r7, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004990:	6805      	ldr	r5, [r0, #0]
{
 8004992:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004994:	f445 7580 	orr.w	r5, r5, #256	; 0x100
{
 8004998:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800499a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499e:	6005      	str	r5, [r0, #0]
{
 80049a0:	468a      	mov	sl, r1
 80049a2:	4617      	mov	r7, r2
 80049a4:	4698      	mov	r8, r3
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80049a6:	1c73      	adds	r3, r6, #1
 80049a8:	d111      	bne.n	80049ce <I2C_RequestMemoryRead+0x4e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049aa:	6943      	ldr	r3, [r0, #20]
 80049ac:	07dd      	lsls	r5, r3, #31
 80049ae:	d5fc      	bpl.n	80049aa <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049b0:	f00a 03fe 	and.w	r3, sl, #254	; 0xfe
 80049b4:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049b6:	464a      	mov	r2, r9
 80049b8:	4631      	mov	r1, r6
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff fee8 	bl	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049c0:	fa5f fa8a 	uxtb.w	sl, sl
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c4:	b178      	cbz	r0, 80049e6 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 80049c6:	2001      	movs	r0, #1
}
 80049c8:	b002      	add	sp, #8
 80049ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049ce:	6943      	ldr	r3, [r0, #20]
 80049d0:	07d9      	lsls	r1, r3, #31
 80049d2:	d4ed      	bmi.n	80049b0 <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d4:	f7fe fea6 	bl	8003724 <HAL_GetTick>
 80049d8:	eba0 0009 	sub.w	r0, r0, r9
 80049dc:	4286      	cmp	r6, r0
 80049de:	d32a      	bcc.n	8004a36 <I2C_RequestMemoryRead+0xb6>
 80049e0:	b34e      	cbz	r6, 8004a36 <I2C_RequestMemoryRead+0xb6>
 80049e2:	6820      	ldr	r0, [r4, #0]
 80049e4:	e7df      	b.n	80049a6 <I2C_RequestMemoryRead+0x26>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e6:	6825      	ldr	r5, [r4, #0]
 80049e8:	9001      	str	r0, [sp, #4]
 80049ea:	696b      	ldr	r3, [r5, #20]
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	69ab      	ldr	r3, [r5, #24]
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f4:	1c73      	adds	r3, r6, #1
 80049f6:	d171      	bne.n	8004adc <I2C_RequestMemoryRead+0x15c>
 80049f8:	696b      	ldr	r3, [r5, #20]
 80049fa:	0618      	lsls	r0, r3, #24
 80049fc:	d433      	bmi.n	8004a66 <I2C_RequestMemoryRead+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049fe:	696b      	ldr	r3, [r5, #20]
 8004a00:	0559      	lsls	r1, r3, #21
 8004a02:	d5f9      	bpl.n	80049f8 <I2C_RequestMemoryRead+0x78>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a04:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a06:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a08:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004a0c:	6169      	str	r1, [r5, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004a1a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a1e:	f043 0304 	orr.w	r3, r3, #4
 8004a22:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d1cd      	bne.n	80049c6 <I2C_RequestMemoryRead+0x46>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2a:	6822      	ldr	r2, [r4, #0]
 8004a2c:	6813      	ldr	r3, [r2, #0]
 8004a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	e7c7      	b.n	80049c6 <I2C_RequestMemoryRead+0x46>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a36:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a38:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a3a:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a40:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a44:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a46:	6821      	ldr	r1, [r4, #0]
        __HAL_UNLOCK(hi2c);
 8004a48:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	f043 0320 	orr.w	r3, r3, #32
 8004a50:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a52:	680b      	ldr	r3, [r1, #0]
 8004a54:	05d8      	lsls	r0, r3, #23
 8004a56:	d502      	bpl.n	8004a5e <I2C_RequestMemoryRead+0xde>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a5c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004a5e:	2003      	movs	r0, #3
}
 8004a60:	b002      	add	sp, #8
 8004a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a66:	f1b8 0f01 	cmp.w	r8, #1
 8004a6a:	d10a      	bne.n	8004a82 <I2C_RequestMemoryRead+0x102>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a6c:	b2ff      	uxtb	r7, r7
 8004a6e:	612f      	str	r7, [r5, #16]
 8004a70:	1c71      	adds	r1, r6, #1
 8004a72:	d142      	bne.n	8004afa <I2C_RequestMemoryRead+0x17a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a74:	696b      	ldr	r3, [r5, #20]
 8004a76:	061a      	lsls	r2, r3, #24
 8004a78:	d40e      	bmi.n	8004a98 <I2C_RequestMemoryRead+0x118>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a7a:	696b      	ldr	r3, [r5, #20]
 8004a7c:	055b      	lsls	r3, r3, #21
 8004a7e:	d5f9      	bpl.n	8004a74 <I2C_RequestMemoryRead+0xf4>
 8004a80:	e7c0      	b.n	8004a04 <I2C_RequestMemoryRead+0x84>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a82:	0a3b      	lsrs	r3, r7, #8
 8004a84:	612b      	str	r3, [r5, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a86:	1c70      	adds	r0, r6, #1
 8004a88:	d147      	bne.n	8004b1a <I2C_RequestMemoryRead+0x19a>
 8004a8a:	696b      	ldr	r3, [r5, #20]
 8004a8c:	0619      	lsls	r1, r3, #24
 8004a8e:	d4ed      	bmi.n	8004a6c <I2C_RequestMemoryRead+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a90:	696b      	ldr	r3, [r5, #20]
 8004a92:	055a      	lsls	r2, r3, #21
 8004a94:	d5f9      	bpl.n	8004a8a <I2C_RequestMemoryRead+0x10a>
 8004a96:	e7b5      	b.n	8004a04 <I2C_RequestMemoryRead+0x84>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9e:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004aa0:	1c71      	adds	r1, r6, #1
 8004aa2:	d10e      	bne.n	8004ac2 <I2C_RequestMemoryRead+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa4:	696b      	ldr	r3, [r5, #20]
 8004aa6:	07da      	lsls	r2, r3, #31
 8004aa8:	d5fc      	bpl.n	8004aa4 <I2C_RequestMemoryRead+0x124>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004aaa:	f04a 0101 	orr.w	r1, sl, #1
 8004aae:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab0:	464a      	mov	r2, r9
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f7ff fe6b 	bl	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
    return HAL_TIMEOUT;
 8004aba:	3800      	subs	r0, #0
 8004abc:	bf18      	it	ne
 8004abe:	2001      	movne	r0, #1
 8004ac0:	e782      	b.n	80049c8 <I2C_RequestMemoryRead+0x48>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ac2:	696b      	ldr	r3, [r5, #20]
 8004ac4:	07db      	lsls	r3, r3, #31
 8004ac6:	d4f0      	bmi.n	8004aaa <I2C_RequestMemoryRead+0x12a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac8:	f7fe fe2c 	bl	8003724 <HAL_GetTick>
 8004acc:	eba0 0009 	sub.w	r0, r0, r9
 8004ad0:	4286      	cmp	r6, r0
 8004ad2:	d3b0      	bcc.n	8004a36 <I2C_RequestMemoryRead+0xb6>
 8004ad4:	2e00      	cmp	r6, #0
 8004ad6:	d0ae      	beq.n	8004a36 <I2C_RequestMemoryRead+0xb6>
 8004ad8:	6825      	ldr	r5, [r4, #0]
 8004ada:	e7e1      	b.n	8004aa0 <I2C_RequestMemoryRead+0x120>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004adc:	696b      	ldr	r3, [r5, #20]
 8004ade:	061a      	lsls	r2, r3, #24
 8004ae0:	d4c1      	bmi.n	8004a66 <I2C_RequestMemoryRead+0xe6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae2:	696b      	ldr	r3, [r5, #20]
 8004ae4:	055a      	lsls	r2, r3, #21
 8004ae6:	d48d      	bmi.n	8004a04 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae8:	f7fe fe1c 	bl	8003724 <HAL_GetTick>
 8004aec:	eba0 0009 	sub.w	r0, r0, r9
 8004af0:	4286      	cmp	r6, r0
 8004af2:	d322      	bcc.n	8004b3a <I2C_RequestMemoryRead+0x1ba>
 8004af4:	b30e      	cbz	r6, 8004b3a <I2C_RequestMemoryRead+0x1ba>
 8004af6:	6825      	ldr	r5, [r4, #0]
 8004af8:	e77c      	b.n	80049f4 <I2C_RequestMemoryRead+0x74>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004afa:	696b      	ldr	r3, [r5, #20]
 8004afc:	061f      	lsls	r7, r3, #24
 8004afe:	d4cb      	bmi.n	8004a98 <I2C_RequestMemoryRead+0x118>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b00:	696b      	ldr	r3, [r5, #20]
 8004b02:	0558      	lsls	r0, r3, #21
 8004b04:	f53f af7e 	bmi.w	8004a04 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b08:	f7fe fe0c 	bl	8003724 <HAL_GetTick>
 8004b0c:	eba0 0009 	sub.w	r0, r0, r9
 8004b10:	4286      	cmp	r6, r0
 8004b12:	d312      	bcc.n	8004b3a <I2C_RequestMemoryRead+0x1ba>
 8004b14:	b18e      	cbz	r6, 8004b3a <I2C_RequestMemoryRead+0x1ba>
 8004b16:	6825      	ldr	r5, [r4, #0]
 8004b18:	e7aa      	b.n	8004a70 <I2C_RequestMemoryRead+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b1a:	696b      	ldr	r3, [r5, #20]
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	d4a5      	bmi.n	8004a6c <I2C_RequestMemoryRead+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b20:	696b      	ldr	r3, [r5, #20]
 8004b22:	055b      	lsls	r3, r3, #21
 8004b24:	f53f af6e 	bmi.w	8004a04 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b28:	f7fe fdfc 	bl	8003724 <HAL_GetTick>
 8004b2c:	eba0 0009 	sub.w	r0, r0, r9
 8004b30:	4286      	cmp	r6, r0
 8004b32:	d302      	bcc.n	8004b3a <I2C_RequestMemoryRead+0x1ba>
 8004b34:	b10e      	cbz	r6, 8004b3a <I2C_RequestMemoryRead+0x1ba>
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	e7a5      	b.n	8004a86 <I2C_RequestMemoryRead+0x106>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b3a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b3c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b3e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b44:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b4a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b4e:	f043 0320 	orr.w	r3, r3, #32
 8004b52:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004b54:	e766      	b.n	8004a24 <I2C_RequestMemoryRead+0xa4>
 8004b56:	bf00      	nop

08004b58 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	f000 8135 	beq.w	8004dc8 <HAL_I2C_Init+0x270>
{
 8004b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004b60:	4a9a      	ldr	r2, [pc, #616]	; (8004dcc <HAL_I2C_Init+0x274>)
 8004b62:	6803      	ldr	r3, [r0, #0]
 8004b64:	4293      	cmp	r3, r2
 8004b66:	4604      	mov	r4, r0
 8004b68:	d00c      	beq.n	8004b84 <HAL_I2C_Init+0x2c>
 8004b6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d008      	beq.n	8004b84 <HAL_I2C_Init+0x2c>
 8004b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_I2C_Init+0x2c>
 8004b7a:	4895      	ldr	r0, [pc, #596]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004b7c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004b80:	f7fe f9de 	bl	8002f40 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	4a93      	ldr	r2, [pc, #588]	; (8004dd4 <HAL_I2C_Init+0x27c>)
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	f200 8103 	bhi.w	8004d96 <HAL_I2C_Init+0x23e>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004b90:	68a3      	ldr	r3, [r4, #8]
 8004b92:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8004b96:	f040 80d9 	bne.w	8004d4c <HAL_I2C_Init+0x1f4>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004b9a:	68e3      	ldr	r3, [r4, #12]
 8004b9c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ba0:	f023 0303 	bic.w	r3, r3, #3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 80de 	bne.w	8004d66 <HAL_I2C_Init+0x20e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004baa:	6923      	ldr	r3, [r4, #16]
 8004bac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb4:	d004      	beq.n	8004bc0 <HAL_I2C_Init+0x68>
 8004bb6:	4886      	ldr	r0, [pc, #536]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004bb8:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004bbc:	f7fe f9c0 	bl	8002f40 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004bc0:	6963      	ldr	r3, [r4, #20]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	f200 80d5 	bhi.w	8004d72 <HAL_I2C_Init+0x21a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004bc8:	69a3      	ldr	r3, [r4, #24]
 8004bca:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8004bce:	f040 80da 	bne.w	8004d86 <HAL_I2C_Init+0x22e>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004bd2:	69e3      	ldr	r3, [r4, #28]
 8004bd4:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8004bd8:	d004      	beq.n	8004be4 <HAL_I2C_Init+0x8c>
 8004bda:	487d      	ldr	r0, [pc, #500]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004bdc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8004be0:	f7fe f9ae 	bl	8002f40 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004be4:	6a23      	ldr	r3, [r4, #32]
 8004be6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004bea:	f040 809d 	bne.w	8004d28 <HAL_I2C_Init+0x1d0>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004bf2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80a2 	beq.w	8004d40 <HAL_I2C_Init+0x1e8>
  __HAL_I2C_DISABLE(hi2c);
 8004bfc:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bfe:	2224      	movs	r2, #36	; 0x24
 8004c00:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c1a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c1c:	f001 feda 	bl	80069d4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c20:	6865      	ldr	r5, [r4, #4]
 8004c22:	4b6d      	ldr	r3, [pc, #436]	; (8004dd8 <HAL_I2C_Init+0x280>)
 8004c24:	429d      	cmp	r5, r3
 8004c26:	d84e      	bhi.n	8004cc6 <HAL_I2C_Init+0x16e>
 8004c28:	4b6c      	ldr	r3, [pc, #432]	; (8004ddc <HAL_I2C_Init+0x284>)
 8004c2a:	4298      	cmp	r0, r3
 8004c2c:	f240 80b1 	bls.w	8004d92 <HAL_I2C_Init+0x23a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c30:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004c32:	4b6b      	ldr	r3, [pc, #428]	; (8004de0 <HAL_I2C_Init+0x288>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c34:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004c36:	fba3 6300 	umull	r6, r3, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c3a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004c3e:	ea41 4193 	orr.w	r1, r1, r3, lsr #18
 8004c42:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c44:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8004c46:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c48:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c52:	69d1      	ldr	r1, [r2, #28]
 8004c54:	3801      	subs	r0, #1
 8004c56:	006b      	lsls	r3, r5, #1
 8004c58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c5c:	f640 70fc 	movw	r0, #4092	; 0xffc
 8004c60:	3301      	adds	r3, #1
 8004c62:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004c66:	4203      	tst	r3, r0
 8004c68:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004c6c:	f040 8099 	bne.w	8004da2 <HAL_I2C_Init+0x24a>
 8004c70:	2304      	movs	r3, #4
 8004c72:	430b      	orrs	r3, r1
 8004c74:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c76:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8004c7a:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c7c:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c7e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8004c82:	432b      	orrs	r3, r5
 8004c84:	4303      	orrs	r3, r0
 8004c86:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c88:	6890      	ldr	r0, [r2, #8]
 8004c8a:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c8c:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c8e:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8004c92:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004c96:	4329      	orrs	r1, r5
 8004c98:	4301      	orrs	r1, r0
 8004c9a:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c9c:	68d1      	ldr	r1, [r2, #12]
 8004c9e:	69a0      	ldr	r0, [r4, #24]
 8004ca0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004ca4:	4303      	orrs	r3, r0
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004caa:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cac:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8004cae:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8004cb2:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8004cb4:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb6:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cbc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8004cc2:	4618      	mov	r0, r3
}
 8004cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cc6:	4b47      	ldr	r3, [pc, #284]	; (8004de4 <HAL_I2C_Init+0x28c>)
 8004cc8:	4298      	cmp	r0, r3
 8004cca:	d962      	bls.n	8004d92 <HAL_I2C_Init+0x23a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ccc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004cce:	4944      	ldr	r1, [pc, #272]	; (8004de0 <HAL_I2C_Init+0x288>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cd0:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cd2:	4f45      	ldr	r7, [pc, #276]	; (8004de8 <HAL_I2C_Init+0x290>)
  freqrange = I2C_FREQRANGE(pclk1);
 8004cd4:	fba1 3100 	umull	r3, r1, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cd8:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8004cdc:	ea46 4691 	orr.w	r6, r6, r1, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ce0:	f44f 7396 	mov.w	r3, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8004ce4:	0c89      	lsrs	r1, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ce6:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ce8:	fb03 f301 	mul.w	r3, r3, r1
 8004cec:	fba7 1303 	umull	r1, r3, r7, r3
 8004cf0:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cf2:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d00:	69d1      	ldr	r1, [r2, #28]
 8004d02:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004d06:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	d14c      	bne.n	8004da8 <HAL_I2C_Init+0x250>
 8004d0e:	3801      	subs	r0, #1
 8004d10:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8004d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d18:	3301      	adds	r3, #1
 8004d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d050      	beq.n	8004dc4 <HAL_I2C_Init+0x26c>
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d26:	e7a4      	b.n	8004c72 <HAL_I2C_Init+0x11a>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004d28:	4829      	ldr	r0, [pc, #164]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004d2a:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004d2e:	f7fe f907 	bl	8002f40 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d32:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004d36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f47f af5e 	bne.w	8004bfc <HAL_I2C_Init+0xa4>
    hi2c->Lock = HAL_UNLOCKED;
 8004d40:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004d44:	4620      	mov	r0, r4
 8004d46:	f7fe f813 	bl	8002d70 <HAL_I2C_MspInit>
 8004d4a:	e757      	b.n	8004bfc <HAL_I2C_Init+0xa4>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004d4c:	4820      	ldr	r0, [pc, #128]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004d4e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004d52:	f7fe f8f5 	bl	8002f40 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004d56:	68e3      	ldr	r3, [r4, #12]
 8004d58:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d5c:	f023 0303 	bic.w	r3, r3, #3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f43f af22 	beq.w	8004baa <HAL_I2C_Init+0x52>
 8004d66:	481a      	ldr	r0, [pc, #104]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004d68:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8004d6c:	f7fe f8e8 	bl	8002f40 <assert_failed>
 8004d70:	e71b      	b.n	8004baa <HAL_I2C_Init+0x52>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004d72:	4817      	ldr	r0, [pc, #92]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004d74:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004d78:	f7fe f8e2 	bl	8002f40 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004d7c:	69a3      	ldr	r3, [r4, #24]
 8004d7e:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8004d82:	f43f af26 	beq.w	8004bd2 <HAL_I2C_Init+0x7a>
 8004d86:	4812      	ldr	r0, [pc, #72]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004d88:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004d8c:	f7fe f8d8 	bl	8002f40 <assert_failed>
 8004d90:	e71f      	b.n	8004bd2 <HAL_I2C_Init+0x7a>
    return HAL_ERROR;
 8004d92:	2001      	movs	r0, #1
}
 8004d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004d96:	480e      	ldr	r0, [pc, #56]	; (8004dd0 <HAL_I2C_Init+0x278>)
 8004d98:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004d9c:	f7fe f8d0 	bl	8002f40 <assert_failed>
 8004da0:	e6f6      	b.n	8004b90 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da6:	e764      	b.n	8004c72 <HAL_I2C_Init+0x11a>
 8004da8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8004dac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004db0:	3801      	subs	r0, #1
 8004db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004db6:	3301      	adds	r3, #1
 8004db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dbc:	b113      	cbz	r3, 8004dc4 <HAL_I2C_Init+0x26c>
 8004dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dc2:	e756      	b.n	8004c72 <HAL_I2C_Init+0x11a>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e754      	b.n	8004c72 <HAL_I2C_Init+0x11a>
    return HAL_ERROR;
 8004dc8:	2001      	movs	r0, #1
}
 8004dca:	4770      	bx	lr
 8004dcc:	40005400 	.word	0x40005400
 8004dd0:	0800d0d0 	.word	0x0800d0d0
 8004dd4:	00061a7f 	.word	0x00061a7f
 8004dd8:	000186a0 	.word	0x000186a0
 8004ddc:	001e847f 	.word	0x001e847f
 8004de0:	431bde83 	.word	0x431bde83
 8004de4:	003d08ff 	.word	0x003d08ff
 8004de8:	10624dd3 	.word	0x10624dd3

08004dec <HAL_I2C_Master_Transmit>:
{
 8004dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df0:	4604      	mov	r4, r0
 8004df2:	b082      	sub	sp, #8
 8004df4:	469a      	mov	sl, r3
 8004df6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004df8:	4688      	mov	r8, r1
 8004dfa:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8004dfc:	f7fe fc92 	bl	8003724 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e00:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d005      	beq.n	8004e14 <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 8004e08:	f04f 0802 	mov.w	r8, #2
}
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	b002      	add	sp, #8
 8004e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e14:	4607      	mov	r7, r0
 8004e16:	e005      	b.n	8004e24 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e18:	f7fe fc84 	bl	8003724 <HAL_GetTick>
 8004e1c:	1bc0      	subs	r0, r0, r7
 8004e1e:	2819      	cmp	r0, #25
 8004e20:	f200 80f7 	bhi.w	8005012 <HAL_I2C_Master_Transmit+0x226>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	699d      	ldr	r5, [r3, #24]
 8004e28:	43ed      	mvns	r5, r5
 8004e2a:	f015 0502 	ands.w	r5, r5, #2
 8004e2e:	d0f3      	beq.n	8004e18 <HAL_I2C_Master_Transmit+0x2c>
    __HAL_LOCK(hi2c);
 8004e30:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8004e34:	2a01      	cmp	r2, #1
 8004e36:	d0e7      	beq.n	8004e08 <HAL_I2C_Master_Transmit+0x1c>
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	07d2      	lsls	r2, r2, #31
 8004e42:	d574      	bpl.n	8004f2e <HAL_I2C_Master_Transmit+0x142>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e44:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e46:	488c      	ldr	r0, [pc, #560]	; (8005078 <HAL_I2C_Master_Transmit+0x28c>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e4c:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e4e:	2221      	movs	r2, #33	; 0x21
 8004e50:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e54:	2210      	movs	r2, #16
 8004e56:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004e5e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e62:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e64:	62e0      	str	r0, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8004e68:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e6c:	2a08      	cmp	r2, #8
    hi2c->XferSize    = hi2c->XferCount;
 8004e6e:	8521      	strh	r1, [r4, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e70:	d006      	beq.n	8004e80 <HAL_I2C_Master_Transmit+0x94>
 8004e72:	2a01      	cmp	r2, #1
 8004e74:	d004      	beq.n	8004e80 <HAL_I2C_Master_Transmit+0x94>
 8004e76:	4282      	cmp	r2, r0
 8004e78:	d002      	beq.n	8004e80 <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e7c:	2a12      	cmp	r2, #18
 8004e7e:	d103      	bne.n	8004e88 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	1c75      	adds	r5, r6, #1
 8004e8a:	d142      	bne.n	8004f12 <HAL_I2C_Master_Transmit+0x126>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	07d0      	lsls	r0, r2, #31
 8004e90:	d5fc      	bpl.n	8004e8c <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e92:	6922      	ldr	r2, [r4, #16]
 8004e94:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004e98:	d14e      	bne.n	8004f38 <HAL_I2C_Master_Transmit+0x14c>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e9a:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8004e9e:	6119      	str	r1, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ea0:	463a      	mov	r2, r7
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f7ff fc73 	bl	8004790 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8004eaa:	4680      	mov	r8, r0
 8004eac:	2800      	cmp	r0, #0
 8004eae:	d12a      	bne.n	8004f06 <HAL_I2C_Master_Transmit+0x11a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	9001      	str	r0, [sp, #4]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	9201      	str	r2, [sp, #4]
 8004eb8:	6999      	ldr	r1, [r3, #24]
    while (hi2c->XferSize > 0U)
 8004eba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ebc:	9101      	str	r1, [sp, #4]
 8004ebe:	9901      	ldr	r1, [sp, #4]
    while (hi2c->XferSize > 0U)
 8004ec0:	2a00      	cmp	r2, #0
 8004ec2:	d07a      	beq.n	8004fba <HAL_I2C_Master_Transmit+0x1ce>
 8004ec4:	1c75      	adds	r5, r6, #1
 8004ec6:	f040 8085 	bne.w	8004fd4 <HAL_I2C_Master_Transmit+0x1e8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	0610      	lsls	r0, r2, #24
 8004ece:	d446      	bmi.n	8004f5e <HAL_I2C_Master_Transmit+0x172>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	0551      	lsls	r1, r2, #21
 8004ed4:	d5f9      	bpl.n	8004eca <HAL_I2C_Master_Transmit+0xde>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ed6:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed8:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8004edc:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ede:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ee2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ee6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004eec:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ef0:	f043 0304 	orr.w	r3, r3, #4
 8004ef4:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d104      	bne.n	8004f06 <HAL_I2C_Master_Transmit+0x11a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f04:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8004f06:	f04f 0801 	mov.w	r8, #1
}
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	b002      	add	sp, #8
 8004f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	07d1      	lsls	r1, r2, #31
 8004f16:	d4bc      	bmi.n	8004e92 <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f18:	f7fe fc04 	bl	8003724 <HAL_GetTick>
 8004f1c:	1bc0      	subs	r0, r0, r7
 8004f1e:	4286      	cmp	r6, r0
 8004f20:	f0c0 8084 	bcc.w	800502c <HAL_I2C_Master_Transmit+0x240>
 8004f24:	2e00      	cmp	r6, #0
 8004f26:	f000 8081 	beq.w	800502c <HAL_I2C_Master_Transmit+0x240>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	e7ac      	b.n	8004e88 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	e785      	b.n	8004e44 <HAL_I2C_Master_Transmit+0x58>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f38:	ea4f 12e8 	mov.w	r2, r8, asr #7
 8004f3c:	f002 0206 	and.w	r2, r2, #6
 8004f40:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004f44:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f46:	4631      	mov	r1, r6
 8004f48:	463a      	mov	r2, r7
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f7ff fbda 	bl	8004704 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d1d8      	bne.n	8004f06 <HAL_I2C_Master_Transmit+0x11a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	fa5f f188 	uxtb.w	r1, r8
 8004f5a:	6119      	str	r1, [r3, #16]
 8004f5c:	e7a0      	b.n	8004ea0 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004f60:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f64:	4605      	mov	r5, r0
      hi2c->XferSize--;
 8004f66:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f6a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004f6e:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8004f70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004f72:	6265      	str	r5, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004f74:	3a01      	subs	r2, #1
 8004f76:	b292      	uxth	r2, r2
 8004f78:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f7a:	695d      	ldr	r5, [r3, #20]
      hi2c->XferSize--;
 8004f7c:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f7e:	076d      	lsls	r5, r5, #29
      hi2c->XferSize--;
 8004f80:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f82:	d50c      	bpl.n	8004f9e <HAL_I2C_Master_Transmit+0x1b2>
 8004f84:	b159      	cbz	r1, 8004f9e <HAL_I2C_Master_Transmit+0x1b2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f86:	7842      	ldrb	r2, [r0, #1]
 8004f88:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004f8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f8c:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 8004f8e:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 8004f92:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8004f94:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8004f96:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004f9a:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004f9c:	8562      	strh	r2, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004f9e:	1c75      	adds	r5, r6, #1
 8004fa0:	d128      	bne.n	8004ff4 <HAL_I2C_Master_Transmit+0x208>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	0750      	lsls	r0, r2, #29
 8004fa6:	d405      	bmi.n	8004fb4 <HAL_I2C_Master_Transmit+0x1c8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	0551      	lsls	r1, r2, #21
 8004fac:	d493      	bmi.n	8004ed6 <HAL_I2C_Master_Transmit+0xea>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	0750      	lsls	r0, r2, #29
 8004fb2:	d5f9      	bpl.n	8004fa8 <HAL_I2C_Master_Transmit+0x1bc>
    while (hi2c->XferSize > 0U)
 8004fb4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004fb6:	2a00      	cmp	r2, #0
 8004fb8:	d184      	bne.n	8004ec4 <HAL_I2C_Master_Transmit+0xd8>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fba:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbc:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004fca:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8004fd2:	e71b      	b.n	8004e0c <HAL_I2C_Master_Transmit+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	0612      	lsls	r2, r2, #24
 8004fd8:	d4c1      	bmi.n	8004f5e <HAL_I2C_Master_Transmit+0x172>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	0552      	lsls	r2, r2, #21
 8004fde:	f53f af7a 	bmi.w	8004ed6 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe2:	f7fe fb9f 	bl	8003724 <HAL_GetTick>
 8004fe6:	1bc0      	subs	r0, r0, r7
 8004fe8:	4286      	cmp	r6, r0
 8004fea:	d337      	bcc.n	800505c <HAL_I2C_Master_Transmit+0x270>
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	d035      	beq.n	800505c <HAL_I2C_Master_Transmit+0x270>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	e767      	b.n	8004ec4 <HAL_I2C_Master_Transmit+0xd8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ff4:	695a      	ldr	r2, [r3, #20]
 8004ff6:	0752      	lsls	r2, r2, #29
 8004ff8:	d4dc      	bmi.n	8004fb4 <HAL_I2C_Master_Transmit+0x1c8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ffa:	695a      	ldr	r2, [r3, #20]
 8004ffc:	0552      	lsls	r2, r2, #21
 8004ffe:	f53f af6a 	bmi.w	8004ed6 <HAL_I2C_Master_Transmit+0xea>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fe fb8f 	bl	8003724 <HAL_GetTick>
 8005006:	1bc0      	subs	r0, r0, r7
 8005008:	4286      	cmp	r6, r0
 800500a:	d327      	bcc.n	800505c <HAL_I2C_Master_Transmit+0x270>
 800500c:	b336      	cbz	r6, 800505c <HAL_I2C_Master_Transmit+0x270>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	e7c5      	b.n	8004f9e <HAL_I2C_Master_Transmit+0x1b2>
        hi2c->State             = HAL_I2C_STATE_READY;
 8005012:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005014:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005016:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800501a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800501e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005020:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005024:	f043 0320 	orr.w	r3, r3, #32
 8005028:	6423      	str	r3, [r4, #64]	; 0x40
 800502a:	e6ed      	b.n	8004e08 <HAL_I2C_Master_Transmit+0x1c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800502c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800502e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005030:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005032:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005036:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800503a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800503c:	6821      	ldr	r1, [r4, #0]
        __HAL_UNLOCK(hi2c);
 800503e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005042:	f043 0320 	orr.w	r3, r3, #32
 8005046:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005048:	680b      	ldr	r3, [r1, #0]
 800504a:	05de      	lsls	r6, r3, #23
 800504c:	f57f af5b 	bpl.w	8004f06 <HAL_I2C_Master_Transmit+0x11a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005054:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005056:	f04f 0801 	mov.w	r8, #1
 800505a:	e6d7      	b.n	8004e0c <HAL_I2C_Master_Transmit+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800505c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800505e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005060:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005062:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005066:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800506a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800506c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005070:	f043 0320 	orr.w	r3, r3, #32
 8005074:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005076:	e73e      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x10a>
 8005078:	ffff0000 	.word	0xffff0000

0800507c <HAL_I2C_Mem_Write>:
{
 800507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005080:	b083      	sub	sp, #12
 8005082:	461f      	mov	r7, r3
 8005084:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005088:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800508a:	4604      	mov	r4, r0
 800508c:	4688      	mov	r8, r1
 800508e:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8005090:	f7fe fb48 	bl	8003724 <HAL_GetTick>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005094:	2f01      	cmp	r7, #1
  uint32_t tickstart = HAL_GetTick();
 8005096:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005098:	d001      	beq.n	800509e <HAL_I2C_Mem_Write+0x22>
 800509a:	2f10      	cmp	r7, #16
 800509c:	d165      	bne.n	800516a <HAL_I2C_Mem_Write+0xee>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800509e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80050a2:	2b20      	cmp	r3, #32
 80050a4:	d00b      	beq.n	80050be <HAL_I2C_Mem_Write+0x42>
      return HAL_BUSY;
 80050a6:	f04f 0802 	mov.w	r8, #2
}
 80050aa:	4640      	mov	r0, r8
 80050ac:	b003      	add	sp, #12
 80050ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b2:	f7fe fb37 	bl	8003724 <HAL_GetTick>
 80050b6:	1b40      	subs	r0, r0, r5
 80050b8:	2819      	cmp	r0, #25
 80050ba:	f200 80ae 	bhi.w	800521a <HAL_I2C_Mem_Write+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	6998      	ldr	r0, [r3, #24]
 80050c2:	43c0      	mvns	r0, r0
 80050c4:	f010 0b02 	ands.w	fp, r0, #2
 80050c8:	d0f3      	beq.n	80050b2 <HAL_I2C_Mem_Write+0x36>
    __HAL_LOCK(hi2c);
 80050ca:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80050ce:	2a01      	cmp	r2, #1
 80050d0:	d0e9      	beq.n	80050a6 <HAL_I2C_Mem_Write+0x2a>
 80050d2:	2201      	movs	r2, #1
 80050d4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	07d2      	lsls	r2, r2, #31
 80050dc:	d577      	bpl.n	80051ce <HAL_I2C_Mem_Write+0x152>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050de:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050e0:	4863      	ldr	r0, [pc, #396]	; (8005270 <HAL_I2C_Mem_Write+0x1f4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e6:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050e8:	2321      	movs	r3, #33	; 0x21
 80050ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050ee:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f0:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050f2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80050f8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050fc:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8005100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005102:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005104:	4641      	mov	r1, r8
 8005106:	e9cd 6500 	strd	r6, r5, [sp]
 800510a:	463b      	mov	r3, r7
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800510c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800510e:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8005110:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005114:	4620      	mov	r0, r4
 8005116:	f7ff fb81 	bl	800481c <I2C_RequestMemoryWrite>
 800511a:	4680      	mov	r8, r0
 800511c:	b9f8      	cbnz	r0, 800515e <HAL_I2C_Mem_Write+0xe2>
    while (hi2c->XferSize > 0U)
 800511e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 80a3 	beq.w	800526c <HAL_I2C_Mem_Write+0x1f0>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	1c71      	adds	r1, r6, #1
 800512a:	d15b      	bne.n	80051e4 <HAL_I2C_Mem_Write+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	0612      	lsls	r2, r2, #24
 8005130:	d421      	bmi.n	8005176 <HAL_I2C_Mem_Write+0xfa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005132:	695a      	ldr	r2, [r3, #20]
 8005134:	0557      	lsls	r7, r2, #21
 8005136:	d5f9      	bpl.n	800512c <HAL_I2C_Mem_Write+0xb0>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005138:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800513e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005140:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005142:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005144:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005148:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800514c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800514e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005152:	f043 0304 	orr.w	r3, r3, #4
 8005156:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800515a:	2b04      	cmp	r3, #4
 800515c:	d03c      	beq.n	80051d8 <HAL_I2C_Mem_Write+0x15c>
      return HAL_ERROR;
 800515e:	f04f 0801 	mov.w	r8, #1
}
 8005162:	4640      	mov	r0, r8
 8005164:	b003      	add	sp, #12
 8005166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800516a:	4842      	ldr	r0, [pc, #264]	; (8005274 <HAL_I2C_Mem_Write+0x1f8>)
 800516c:	f640 11b9 	movw	r1, #2489	; 0x9b9
 8005170:	f7fd fee6 	bl	8002f40 <assert_failed>
 8005174:	e793      	b.n	800509e <HAL_I2C_Mem_Write+0x22>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005176:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005178:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800517c:	4607      	mov	r7, r0
      hi2c->XferSize--;
 800517e:	f10c 31ff 	add.w	r1, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005182:	f817 2b01 	ldrb.w	r2, [r7], #1
 8005186:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8005188:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800518a:	6267      	str	r7, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800518c:	3a01      	subs	r2, #1
 800518e:	b292      	uxth	r2, r2
 8005190:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005192:	695f      	ldr	r7, [r3, #20]
      hi2c->XferSize--;
 8005194:	b28a      	uxth	r2, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005196:	0779      	lsls	r1, r7, #29
      hi2c->XferSize--;
 8005198:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800519a:	d515      	bpl.n	80051c8 <HAL_I2C_Mem_Write+0x14c>
 800519c:	b942      	cbnz	r2, 80051b0 <HAL_I2C_Mem_Write+0x134>
 800519e:	1c77      	adds	r7, r6, #1
 80051a0:	d156      	bne.n	8005250 <HAL_I2C_Mem_Write+0x1d4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051a2:	695a      	ldr	r2, [r3, #20]
 80051a4:	0750      	lsls	r0, r2, #29
 80051a6:	d446      	bmi.n	8005236 <HAL_I2C_Mem_Write+0x1ba>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	0551      	lsls	r1, r2, #21
 80051ac:	d5f9      	bpl.n	80051a2 <HAL_I2C_Mem_Write+0x126>
 80051ae:	e7c3      	b.n	8005138 <HAL_I2C_Mem_Write+0xbc>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051b0:	7842      	ldrb	r2, [r0, #1]
 80051b2:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80051b4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80051b6:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->XferCount--;
 80051ba:	3901      	subs	r1, #1
        hi2c->XferSize--;
 80051bc:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80051be:	3002      	adds	r0, #2
        hi2c->XferCount--;
 80051c0:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 80051c2:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80051c4:	6260      	str	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80051c6:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80051c8:	2a00      	cmp	r2, #0
 80051ca:	d1ad      	bne.n	8005128 <HAL_I2C_Mem_Write+0xac>
 80051cc:	e7e7      	b.n	800519e <HAL_I2C_Mem_Write+0x122>
      __HAL_I2C_ENABLE(hi2c);
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e782      	b.n	80050de <HAL_I2C_Mem_Write+0x62>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	6822      	ldr	r2, [r4, #0]
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e7bc      	b.n	800515e <HAL_I2C_Mem_Write+0xe2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	0610      	lsls	r0, r2, #24
 80051e8:	d4c5      	bmi.n	8005176 <HAL_I2C_Mem_Write+0xfa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ea:	695a      	ldr	r2, [r3, #20]
 80051ec:	0550      	lsls	r0, r2, #21
 80051ee:	d4a3      	bmi.n	8005138 <HAL_I2C_Mem_Write+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f0:	f7fe fa98 	bl	8003724 <HAL_GetTick>
 80051f4:	1b40      	subs	r0, r0, r5
 80051f6:	4286      	cmp	r6, r0
 80051f8:	d301      	bcc.n	80051fe <HAL_I2C_Mem_Write+0x182>
 80051fa:	2e00      	cmp	r6, #0
 80051fc:	d193      	bne.n	8005126 <HAL_I2C_Mem_Write+0xaa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051fe:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005200:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005202:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005204:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005208:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800520c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800520e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005212:	f043 0320 	orr.w	r3, r3, #32
 8005216:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005218:	e79e      	b.n	8005158 <HAL_I2C_Mem_Write+0xdc>
        hi2c->State             = HAL_I2C_STATE_READY;
 800521a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800521c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005220:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005224:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005228:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800522a:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800522e:	f043 0320 	orr.w	r3, r3, #32
 8005232:	6423      	str	r3, [r4, #64]	; 0x40
 8005234:	e737      	b.n	80050a6 <HAL_I2C_Mem_Write+0x2a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005236:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800523a:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005240:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005242:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8005246:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800524a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 800524e:	e72c      	b.n	80050aa <HAL_I2C_Mem_Write+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	0752      	lsls	r2, r2, #29
 8005254:	d4ef      	bmi.n	8005236 <HAL_I2C_Mem_Write+0x1ba>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	0552      	lsls	r2, r2, #21
 800525a:	f53f af6d 	bmi.w	8005138 <HAL_I2C_Mem_Write+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525e:	f7fe fa61 	bl	8003724 <HAL_GetTick>
 8005262:	1b40      	subs	r0, r0, r5
 8005264:	4286      	cmp	r6, r0
 8005266:	d3ca      	bcc.n	80051fe <HAL_I2C_Mem_Write+0x182>
 8005268:	2e00      	cmp	r6, #0
 800526a:	d0c8      	beq.n	80051fe <HAL_I2C_Mem_Write+0x182>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	e796      	b.n	800519e <HAL_I2C_Mem_Write+0x122>
 8005270:	ffff0000 	.word	0xffff0000
 8005274:	0800d0d0 	.word	0x0800d0d0

08005278 <HAL_I2C_Mem_Read>:
{
 8005278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527c:	b087      	sub	sp, #28
 800527e:	4698      	mov	r8, r3
 8005280:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
 8005284:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8005286:	4604      	mov	r4, r0
 8005288:	4689      	mov	r9, r1
 800528a:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 800528c:	f7fe fa4a 	bl	8003724 <HAL_GetTick>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005290:	f1b8 0f01 	cmp.w	r8, #1
  uint32_t tickstart = HAL_GetTick();
 8005294:	4607      	mov	r7, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005296:	d002      	beq.n	800529e <HAL_I2C_Mem_Read+0x26>
 8005298:	f1b8 0f10 	cmp.w	r8, #16
 800529c:	d154      	bne.n	8005348 <HAL_I2C_Mem_Read+0xd0>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800529e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	d00a      	beq.n	80052bc <HAL_I2C_Mem_Read+0x44>
      return HAL_BUSY;
 80052a6:	2502      	movs	r5, #2
}
 80052a8:	4628      	mov	r0, r5
 80052aa:	b007      	add	sp, #28
 80052ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b0:	f7fe fa38 	bl	8003724 <HAL_GetTick>
 80052b4:	1bc0      	subs	r0, r0, r7
 80052b6:	2819      	cmp	r0, #25
 80052b8:	f200 80cf 	bhi.w	800545a <HAL_I2C_Mem_Read+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	699d      	ldr	r5, [r3, #24]
 80052c0:	43ed      	mvns	r5, r5
 80052c2:	f015 0502 	ands.w	r5, r5, #2
 80052c6:	d0f3      	beq.n	80052b0 <HAL_I2C_Mem_Read+0x38>
    __HAL_LOCK(hi2c);
 80052c8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80052cc:	2a01      	cmp	r2, #1
 80052ce:	d0ea      	beq.n	80052a6 <HAL_I2C_Mem_Read+0x2e>
 80052d0:	2201      	movs	r2, #1
 80052d2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	07d1      	lsls	r1, r2, #31
 80052da:	d53b      	bpl.n	8005354 <HAL_I2C_Mem_Read+0xdc>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052dc:	681a      	ldr	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052de:	48a3      	ldr	r0, [pc, #652]	; (800556c <HAL_I2C_Mem_Read+0x2f4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e4:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052e6:	2322      	movs	r3, #34	; 0x22
 80052e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052ec:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052ee:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052f0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80052f6:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052fa:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80052fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052fe:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005300:	4652      	mov	r2, sl
 8005302:	e9cd 6700 	strd	r6, r7, [sp]
 8005306:	4643      	mov	r3, r8
    hi2c->XferSize    = hi2c->XferCount;
 8005308:	8525      	strh	r5, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800530a:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800530c:	4649      	mov	r1, r9
 800530e:	4620      	mov	r0, r4
 8005310:	f7ff fb36 	bl	8004980 <I2C_RequestMemoryRead>
 8005314:	4605      	mov	r5, r0
 8005316:	2800      	cmp	r0, #0
 8005318:	f040 80ac 	bne.w	8005474 <HAL_I2C_Mem_Read+0x1fc>
    if (hi2c->XferSize == 0U)
 800531c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531e:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8005320:	b9ea      	cbnz	r2, 800535e <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005322:	9002      	str	r0, [sp, #8]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	9202      	str	r2, [sp, #8]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	9202      	str	r2, [sp, #8]
 800532c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005334:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005336:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005338:	2220      	movs	r2, #32
 800533a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800533e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005342:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8005346:	e7af      	b.n	80052a8 <HAL_I2C_Mem_Read+0x30>
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005348:	4889      	ldr	r0, [pc, #548]	; (8005570 <HAL_I2C_Mem_Read+0x2f8>)
 800534a:	f640 2134 	movw	r1, #2612	; 0xa34
 800534e:	f7fd fdf7 	bl	8002f40 <assert_failed>
 8005352:	e7a4      	b.n	800529e <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e7be      	b.n	80052dc <HAL_I2C_Mem_Read+0x64>
    else if (hi2c->XferSize == 1U)
 800535e:	2a01      	cmp	r2, #1
 8005360:	f000 810c 	beq.w	800557c <HAL_I2C_Mem_Read+0x304>
    else if (hi2c->XferSize == 2U)
 8005364:	2a02      	cmp	r2, #2
 8005366:	f000 809b 	beq.w	80054a0 <HAL_I2C_Mem_Read+0x228>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536a:	9005      	str	r0, [sp, #20]
 800536c:	6959      	ldr	r1, [r3, #20]
 800536e:	9105      	str	r1, [sp, #20]
 8005370:	6999      	ldr	r1, [r3, #24]
 8005372:	9105      	str	r1, [sp, #20]
 8005374:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8005376:	2a03      	cmp	r2, #3
 8005378:	d849      	bhi.n	800540e <HAL_I2C_Mem_Read+0x196>
        if (hi2c->XferSize == 1U)
 800537a:	2a01      	cmp	r2, #1
 800537c:	f000 80c9 	beq.w	8005512 <HAL_I2C_Mem_Read+0x29a>
        else if (hi2c->XferSize == 2U)
 8005380:	2a02      	cmp	r2, #2
 8005382:	f000 8087 	beq.w	8005494 <HAL_I2C_Mem_Read+0x21c>
 8005386:	1c71      	adds	r1, r6, #1
 8005388:	f040 8099 	bne.w	80054be <HAL_I2C_Mem_Read+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800538c:	695a      	ldr	r2, [r3, #20]
 800538e:	0752      	lsls	r2, r2, #29
 8005390:	d5fc      	bpl.n	800538c <HAL_I2C_Mem_Read+0x114>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005392:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005394:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80053a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80053a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80053a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80053aa:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80053ac:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80053ae:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80053b0:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80053b2:	8522      	strh	r2, [r4, #40]	; 0x28
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80053b4:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	f040 808d 	bne.w	80054d6 <HAL_I2C_Mem_Read+0x25e>
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	0752      	lsls	r2, r2, #29
 80053c0:	d5fc      	bpl.n	80053bc <HAL_I2C_Mem_Read+0x144>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c2:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ca:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80053d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80053d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80053d4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d6:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29b      	uxth	r3, r3
 80053dc:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053de:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 80053e0:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 80053e4:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 80053e6:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80053ea:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ec:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 80053ee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80053f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80053f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80053f4:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80053f6:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80053f8:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80053fa:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80053fc:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80053fe:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005400:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8005402:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8005404:	2a00      	cmp	r2, #0
 8005406:	d096      	beq.n	8005336 <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8005408:	2a03      	cmp	r2, #3
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	d9b5      	bls.n	800537a <HAL_I2C_Mem_Read+0x102>
 800540e:	b956      	cbnz	r6, 8005426 <HAL_I2C_Mem_Read+0x1ae>
 8005410:	e0a1      	b.n	8005556 <HAL_I2C_Mem_Read+0x2de>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	06d0      	lsls	r0, r2, #27
 8005416:	f100 808e 	bmi.w	8005536 <HAL_I2C_Mem_Read+0x2be>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f7fe f983 	bl	8003724 <HAL_GetTick>
 800541e:	1bc0      	subs	r0, r0, r7
 8005420:	4286      	cmp	r6, r0
 8005422:	d364      	bcc.n	80054ee <HAL_I2C_Mem_Read+0x276>
 8005424:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	0652      	lsls	r2, r2, #25
 800542a:	d5f2      	bpl.n	8005412 <HAL_I2C_Mem_Read+0x19a>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8005432:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005434:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8005436:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8005438:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800543a:	3b01      	subs	r3, #1
 800543c:	b29b      	uxth	r3, r3
 800543e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005440:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8005442:	3a01      	subs	r2, #1
 8005444:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8005446:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800544a:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 800544c:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800544e:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005452:	d5d7      	bpl.n	8005404 <HAL_I2C_Mem_Read+0x18c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005454:	6903      	ldr	r3, [r0, #16]
 8005456:	704b      	strb	r3, [r1, #1]
 8005458:	e7c9      	b.n	80053ee <HAL_I2C_Mem_Read+0x176>
        hi2c->State             = HAL_I2C_STATE_READY;
 800545a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800545c:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800545e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005462:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005466:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005468:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800546c:	f043 0320 	orr.w	r3, r3, #32
 8005470:	6423      	str	r3, [r4, #64]	; 0x40
 8005472:	e718      	b.n	80052a6 <HAL_I2C_Mem_Read+0x2e>
      return HAL_ERROR;
 8005474:	2501      	movs	r5, #1
}
 8005476:	4628      	mov	r0, r5
 8005478:	b007      	add	sp, #28
 800547a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	0750      	lsls	r0, r2, #29
 8005482:	d49e      	bmi.n	80053c2 <HAL_I2C_Mem_Read+0x14a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005484:	f7fe f94e 	bl	8003724 <HAL_GetTick>
 8005488:	1bc0      	subs	r0, r0, r7
 800548a:	4286      	cmp	r6, r0
 800548c:	d32f      	bcc.n	80054ee <HAL_I2C_Mem_Read+0x276>
 800548e:	2e00      	cmp	r6, #0
 8005490:	d02d      	beq.n	80054ee <HAL_I2C_Mem_Read+0x276>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	1c71      	adds	r1, r6, #1
 8005496:	d1f2      	bne.n	800547e <HAL_I2C_Mem_Read+0x206>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	0752      	lsls	r2, r2, #29
 800549c:	d5fc      	bpl.n	8005498 <HAL_I2C_Mem_Read+0x220>
 800549e:	e790      	b.n	80053c2 <HAL_I2C_Mem_Read+0x14a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a0:	6819      	ldr	r1, [r3, #0]
 80054a2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80054a6:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80054ae:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b0:	9004      	str	r0, [sp, #16]
 80054b2:	6959      	ldr	r1, [r3, #20]
 80054b4:	9104      	str	r1, [sp, #16]
 80054b6:	6999      	ldr	r1, [r3, #24]
 80054b8:	9104      	str	r1, [sp, #16]
 80054ba:	9904      	ldr	r1, [sp, #16]
 80054bc:	e75b      	b.n	8005376 <HAL_I2C_Mem_Read+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	0750      	lsls	r0, r2, #29
 80054c2:	f53f af66 	bmi.w	8005392 <HAL_I2C_Mem_Read+0x11a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c6:	f7fe f92d 	bl	8003724 <HAL_GetTick>
 80054ca:	1bc0      	subs	r0, r0, r7
 80054cc:	4286      	cmp	r6, r0
 80054ce:	d30e      	bcc.n	80054ee <HAL_I2C_Mem_Read+0x276>
 80054d0:	b16e      	cbz	r6, 80054ee <HAL_I2C_Mem_Read+0x276>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	e757      	b.n	8005386 <HAL_I2C_Mem_Read+0x10e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054d6:	695a      	ldr	r2, [r3, #20]
 80054d8:	0750      	lsls	r0, r2, #29
 80054da:	f53f af72 	bmi.w	80053c2 <HAL_I2C_Mem_Read+0x14a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054de:	f7fe f921 	bl	8003724 <HAL_GetTick>
 80054e2:	1bc0      	subs	r0, r0, r7
 80054e4:	4286      	cmp	r6, r0
 80054e6:	d302      	bcc.n	80054ee <HAL_I2C_Mem_Read+0x276>
 80054e8:	2e00      	cmp	r6, #0
 80054ea:	f47f af63 	bne.w	80053b4 <HAL_I2C_Mem_Read+0x13c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054ee:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80054f0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054f2:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054f8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80054fe:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005502:	2501      	movs	r5, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005504:	f043 0320 	orr.w	r3, r3, #32
}
 8005508:	4628      	mov	r0, r5
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800550a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800550c:	b007      	add	sp, #28
 800550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005512:	b94e      	cbnz	r6, 8005528 <HAL_I2C_Mem_Read+0x2b0>
 8005514:	e02e      	b.n	8005574 <HAL_I2C_Mem_Read+0x2fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	06d2      	lsls	r2, r2, #27
 800551a:	d40c      	bmi.n	8005536 <HAL_I2C_Mem_Read+0x2be>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551c:	f7fe f902 	bl	8003724 <HAL_GetTick>
 8005520:	1bc0      	subs	r0, r0, r7
 8005522:	4286      	cmp	r6, r0
 8005524:	d3e3      	bcc.n	80054ee <HAL_I2C_Mem_Read+0x276>
 8005526:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005528:	695a      	ldr	r2, [r3, #20]
 800552a:	0651      	lsls	r1, r2, #25
 800552c:	d5f3      	bpl.n	8005516 <HAL_I2C_Mem_Read+0x29e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8005534:	e75b      	b.n	80053ee <HAL_I2C_Mem_Read+0x176>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005536:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005538:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 800553c:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800553e:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005540:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005542:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005546:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800554a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800554c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005550:	6423      	str	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8005552:	2501      	movs	r5, #1
 8005554:	e6a8      	b.n	80052a8 <HAL_I2C_Mem_Read+0x30>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	0652      	lsls	r2, r2, #25
 800555a:	f53f af67 	bmi.w	800542c <HAL_I2C_Mem_Read+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	06d1      	lsls	r1, r2, #27
 8005562:	d4e8      	bmi.n	8005536 <HAL_I2C_Mem_Read+0x2be>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005564:	f7fe f8de 	bl	8003724 <HAL_GetTick>
 8005568:	e7c1      	b.n	80054ee <HAL_I2C_Mem_Read+0x276>
 800556a:	bf00      	nop
 800556c:	ffff0000 	.word	0xffff0000
 8005570:	0800d0d0 	.word	0x0800d0d0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005574:	695a      	ldr	r2, [r3, #20]
 8005576:	0650      	lsls	r0, r2, #25
 8005578:	d5f1      	bpl.n	800555e <HAL_I2C_Mem_Read+0x2e6>
 800557a:	e7d8      	b.n	800552e <HAL_I2C_Mem_Read+0x2b6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005582:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005584:	9003      	str	r0, [sp, #12]
 8005586:	6959      	ldr	r1, [r3, #20]
 8005588:	9103      	str	r1, [sp, #12]
 800558a:	6999      	ldr	r1, [r3, #24]
 800558c:	9103      	str	r1, [sp, #12]
 800558e:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005590:	6819      	ldr	r1, [r3, #0]
 8005592:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005596:	6019      	str	r1, [r3, #0]
 8005598:	e6ed      	b.n	8005376 <HAL_I2C_Mem_Read+0xfe>
 800559a:	bf00      	nop

0800559c <HAL_I2C_MasterTxCpltCallback>:
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop

080055a0 <HAL_I2C_MasterRxCpltCallback>:
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop

080055a4 <HAL_I2C_SlaveTxCpltCallback>:
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop

080055a8 <HAL_I2C_SlaveRxCpltCallback>:
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop

080055ac <HAL_I2C_AddrCallback>:
}
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop

080055b0 <HAL_I2C_ListenCpltCallback>:
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop

080055b4 <HAL_I2C_MemTxCpltCallback>:
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop

080055b8 <I2C_MemoryTransmit_TXE_BTF>:
{
 80055b8:	b538      	push	{r3, r4, r5, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055ba:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 80055be:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80055c0:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 80055c2:	b959      	cbnz	r1, 80055dc <I2C_MemoryTransmit_TXE_BTF+0x24>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80055c4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055c6:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80055c8:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055ca:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80055cc:	d032      	beq.n	8005634 <I2C_MemoryTransmit_TXE_BTF+0x7c>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80055ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80055d2:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 80055d4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80055d6:	3201      	adds	r2, #1
 80055d8:	6502      	str	r2, [r0, #80]	; 0x50
}
 80055da:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 80055dc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80055de:	2901      	cmp	r1, #1
 80055e0:	d020      	beq.n	8005624 <I2C_MemoryTransmit_TXE_BTF+0x6c>
  else if (hi2c->EventCount == 2U)
 80055e2:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80055e4:	2902      	cmp	r1, #2
 80055e6:	d1f8      	bne.n	80055da <I2C_MemoryTransmit_TXE_BTF+0x22>
 80055e8:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80055ea:	2a22      	cmp	r2, #34	; 0x22
 80055ec:	d02c      	beq.n	8005648 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055ee:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80055f0:	b289      	uxth	r1, r1
 80055f2:	bb29      	cbnz	r1, 8005640 <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055f4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80055f6:	b289      	uxth	r1, r1
 80055f8:	2900      	cmp	r1, #0
 80055fa:	d1ee      	bne.n	80055da <I2C_MemoryTransmit_TXE_BTF+0x22>
 80055fc:	2a21      	cmp	r2, #33	; 0x21
 80055fe:	d1ec      	bne.n	80055da <I2C_MemoryTransmit_TXE_BTF+0x22>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005600:	6802      	ldr	r2, [r0, #0]
 8005602:	6854      	ldr	r4, [r2, #4]
 8005604:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8005608:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560a:	6814      	ldr	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800560c:	2520      	movs	r5, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8005612:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005614:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005616:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800561a:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800561e:	f7ff ffc9 	bl	80055b4 <HAL_I2C_MemTxCpltCallback>
}
 8005622:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005624:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005626:	6801      	ldr	r1, [r0, #0]
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 800562c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800562e:	3201      	adds	r2, #1
 8005630:	6502      	str	r2, [r0, #80]	; 0x50
}
 8005632:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8005638:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800563a:	3202      	adds	r2, #2
 800563c:	6502      	str	r2, [r0, #80]	; 0x50
}
 800563e:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005640:	2a21      	cmp	r2, #33	; 0x21
 8005642:	d007      	beq.n	8005654 <I2C_MemoryTransmit_TXE_BTF+0x9c>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 8005646:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005648:	6802      	ldr	r2, [r0, #0]
 800564a:	6813      	ldr	r3, [r2, #0]
 800564c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005650:	6013      	str	r3, [r2, #0]
}
 8005652:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005654:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8005656:	6802      	ldr	r2, [r0, #0]
 8005658:	f811 0b01 	ldrb.w	r0, [r1], #1
 800565c:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 800565e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005660:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005662:	3a01      	subs	r2, #1
 8005664:	b292      	uxth	r2, r2
 8005666:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005668:	bd38      	pop	{r3, r4, r5, pc}
 800566a:	bf00      	nop

0800566c <HAL_I2C_MemRxCpltCallback>:
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop

08005670 <HAL_I2C_ErrorCallback>:
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop

08005674 <HAL_I2C_AbortCpltCallback>:
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop

08005678 <I2C_DMAAbort>:
{
 8005678:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800567a:	4b3a      	ldr	r3, [pc, #232]	; (8005764 <I2C_DMAAbort+0xec>)
 800567c:	4a3a      	ldr	r2, [pc, #232]	; (8005768 <I2C_DMAAbort+0xf0>)
 800567e:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005680:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005682:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005684:	08db      	lsrs	r3, r3, #3
 8005686:	fba2 2303 	umull	r2, r3, r2, r3
  __IO uint32_t count = 0U;
 800568a:	2200      	movs	r2, #0
 800568c:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800568e:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005690:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8005694:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005696:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800569a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800569e:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a0:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80056a2:	e005      	b.n	80056b0 <I2C_DMAAbort+0x38>
    count--;
 80056a4:	9b01      	ldr	r3, [sp, #4]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80056aa:	6813      	ldr	r3, [r2, #0]
 80056ac:	059b      	lsls	r3, r3, #22
 80056ae:	d506      	bpl.n	80056be <I2C_DMAAbort+0x46>
    if (count == 0U)
 80056b0:	9b01      	ldr	r3, [sp, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f6      	bne.n	80056a4 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056b8:	f043 0320 	orr.w	r3, r3, #32
 80056bc:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmarx != NULL)
 80056be:	e9d0 430d 	ldrd	r4, r3, [r0, #52]	; 0x34
  if (hi2c->hdmatx != NULL)
 80056c2:	b344      	cbz	r4, 8005716 <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056c4:	2500      	movs	r5, #0
 80056c6:	63e5      	str	r5, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 80056c8:	b1f3      	cbz	r3, 8005708 <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ca:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80056cc:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ce:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 80056d2:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 80056d4:	8545      	strh	r5, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056d6:	6525      	str	r5, [r4, #80]	; 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056d8:	2400      	movs	r4, #0
 80056da:	651c      	str	r4, [r3, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 80056dc:	6813      	ldr	r3, [r2, #0]
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80056e8:	2b60      	cmp	r3, #96	; 0x60
 80056ea:	d029      	beq.n	8005740 <I2C_DMAAbort+0xc8>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ec:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80056f0:	2928      	cmp	r1, #40	; 0x28
 80056f2:	d018      	beq.n	8005726 <I2C_DMAAbort+0xae>
      hi2c->State = HAL_I2C_STATE_READY;
 80056f4:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f6:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056fc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005700:	f7ff ffb6 	bl	8005670 <HAL_I2C_ErrorCallback>
}
 8005704:	b002      	add	sp, #8
 8005706:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005708:	6815      	ldr	r5, [r2, #0]
 800570a:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800570e:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8005710:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005712:	6523      	str	r3, [r4, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8005714:	e7e2      	b.n	80056dc <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8005716:	b1f3      	cbz	r3, 8005756 <I2C_DMAAbort+0xde>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005718:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 800571a:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571c:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8005720:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8005722:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8005724:	e7d8      	b.n	80056d8 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8005726:	6813      	ldr	r3, [r2, #0]
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800572e:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005730:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005736:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005738:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800573a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 800573e:	e7df      	b.n	8005700 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005740:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8005742:	2220      	movs	r2, #32
 8005744:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005748:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800574c:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800574e:	f7ff ff91 	bl	8005674 <HAL_I2C_AbortCpltCallback>
}
 8005752:	b002      	add	sp, #8
 8005754:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005756:	6814      	ldr	r4, [r2, #0]
 8005758:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800575c:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 800575e:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8005760:	e7bc      	b.n	80056dc <I2C_DMAAbort+0x64>
 8005762:	bf00      	nop
 8005764:	20000030 	.word	0x20000030
 8005768:	14f8b589 	.word	0x14f8b589

0800576c <I2C_ITError>:
{
 800576c:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800576e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005772:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005776:	2b10      	cmp	r3, #16
{
 8005778:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800577a:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800577c:	d039      	beq.n	80057f2 <I2C_ITError+0x86>
 800577e:	b2d9      	uxtb	r1, r3
 8005780:	2940      	cmp	r1, #64	; 0x40
 8005782:	d036      	beq.n	80057f2 <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005784:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8005788:	2928      	cmp	r1, #40	; 0x28
 800578a:	d03d      	beq.n	8005808 <I2C_ITError+0x9c>
 800578c:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800578e:	6859      	ldr	r1, [r3, #4]
 8005790:	0508      	lsls	r0, r1, #20
 8005792:	d407      	bmi.n	80057a4 <I2C_ITError+0x38>
 8005794:	2a60      	cmp	r2, #96	; 0x60
 8005796:	d005      	beq.n	80057a4 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8005798:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800579a:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800579c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80057a4:	2200      	movs	r2, #0
 80057a6:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80057ae:	d134      	bne.n	800581a <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057b0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80057b4:	2960      	cmp	r1, #96	; 0x60
 80057b6:	d075      	beq.n	80058a4 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	0650      	lsls	r0, r2, #25
 80057bc:	d505      	bpl.n	80057ca <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80057c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057c6:	3301      	adds	r3, #1
 80057c8:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7ff ff50 	bl	8005670 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 80057d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80057d2:	0719      	lsls	r1, r3, #28
 80057d4:	d004      	beq.n	80057e0 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	6853      	ldr	r3, [r2, #4]
 80057da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80057de:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80057e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80057e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80057e6:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 80057e8:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80057ea:	d501      	bpl.n	80057f0 <I2C_ITError+0x84>
 80057ec:	2b28      	cmp	r3, #40	; 0x28
 80057ee:	d02f      	beq.n	8005850 <I2C_ITError+0xe4>
}
 80057f0:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057f2:	2a22      	cmp	r2, #34	; 0x22
 80057f4:	d1c6      	bne.n	8005784 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057fe:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	0512      	lsls	r2, r2, #20
 8005804:	d5c8      	bpl.n	8005798 <I2C_ITError+0x2c>
 8005806:	e7cd      	b.n	80057a4 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005808:	2300      	movs	r3, #0
 800580a:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800580c:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800580e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8005818:	d0ca      	beq.n	80057b0 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800581a:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800581c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800581e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005822:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005824:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005828:	2b01      	cmp	r3, #1
 800582a:	d01e      	beq.n	800586a <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800582c:	4b28      	ldr	r3, [pc, #160]	; (80058d0 <I2C_ITError+0x164>)
 800582e:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005830:	f7fe fbd0 	bl	8003fd4 <HAL_DMA_Abort_IT>
 8005834:	2800      	cmp	r0, #0
 8005836:	d0cb      	beq.n	80057d0 <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 8005838:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800583a:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 800583c:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800583e:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8005846:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800584a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800584c:	4798      	blx	r3
 800584e:	e7bf      	b.n	80057d0 <I2C_ITError+0x64>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005850:	4b20      	ldr	r3, [pc, #128]	; (80058d4 <I2C_ITError+0x168>)
 8005852:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8005854:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8005856:	2300      	movs	r3, #0
 8005858:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800585a:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 800585c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005860:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8005864:	f7ff fea4 	bl	80055b0 <HAL_I2C_ListenCpltCallback>
}
 8005868:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800586a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800586c:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <I2C_ITError+0x164>)
 800586e:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005870:	f7fe fbb0 	bl	8003fd4 <HAL_DMA_Abort_IT>
 8005874:	2800      	cmp	r0, #0
 8005876:	d0ab      	beq.n	80057d0 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	0651      	lsls	r1, r2, #25
 800587e:	d506      	bpl.n	800588e <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005880:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8005886:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	3201      	adds	r2, #1
 800588c:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800588e:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005890:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8005892:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8005896:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8005898:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800589a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800589e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80058a0:	4798      	blx	r3
 80058a2:	e795      	b.n	80057d0 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 80058a4:	2120      	movs	r1, #32
 80058a6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058aa:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	0652      	lsls	r2, r2, #25
 80058b0:	d506      	bpl.n	80058c0 <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80058b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	3201      	adds	r2, #1
 80058be:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80058c8:	4620      	mov	r0, r4
 80058ca:	f7ff fed3 	bl	8005674 <HAL_I2C_AbortCpltCallback>
 80058ce:	e77f      	b.n	80057d0 <I2C_ITError+0x64>
 80058d0:	08005679 	.word	0x08005679
 80058d4:	ffff0000 	.word	0xffff0000

080058d8 <HAL_I2C_EV_IRQHandler>:
{
 80058d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80058da:	6803      	ldr	r3, [r0, #0]
{
 80058dc:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80058de:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058e2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058e6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058ea:	2910      	cmp	r1, #16
{
 80058ec:	b08c      	sub	sp, #48	; 0x30
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058ee:	b2cd      	uxtb	r5, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058f0:	d021      	beq.n	8005936 <HAL_I2C_EV_IRQHandler+0x5e>
 80058f2:	2d40      	cmp	r5, #64	; 0x40
 80058f4:	d01f      	beq.n	8005936 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	2900      	cmp	r1, #0
 80058fc:	f000 8093 	beq.w	8005a26 <HAL_I2C_EV_IRQHandler+0x14e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005900:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8005902:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005904:	f011 0f02 	tst.w	r1, #2
 8005908:	f3c1 0640 	ubfx	r6, r1, #1, #1
 800590c:	d056      	beq.n	80059bc <HAL_I2C_EV_IRQHandler+0xe4>
 800590e:	0586      	lsls	r6, r0, #22
 8005910:	d556      	bpl.n	80059c0 <HAL_I2C_EV_IRQHandler+0xe8>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005912:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005914:	b102      	cbz	r2, 8005918 <HAL_I2C_EV_IRQHandler+0x40>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005916:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005918:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800591c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8005920:	2a28      	cmp	r2, #40	; 0x28
 8005922:	f000 8217 	beq.w	8005d54 <HAL_I2C_EV_IRQHandler+0x47c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005926:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 800592a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800592c:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800592e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005932:	b00c      	add	sp, #48	; 0x30
 8005934:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005936:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005938:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800593a:	f012 0f01 	tst.w	r2, #1
 800593e:	d11a      	bne.n	8005976 <HAL_I2C_EV_IRQHandler+0x9e>
 8005940:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8005944:	d0f5      	beq.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 8005946:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 800594a:	d0f2      	beq.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800594c:	0716      	lsls	r6, r2, #28
 800594e:	d56d      	bpl.n	8005a2c <HAL_I2C_EV_IRQHandler+0x154>
 8005950:	0586      	lsls	r6, r0, #22
 8005952:	f140 8083 	bpl.w	8005a5c <HAL_I2C_EV_IRQHandler+0x184>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005956:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800595a:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800595c:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800595e:	2900      	cmp	r1, #0
 8005960:	f000 81df 	beq.w	8005d22 <HAL_I2C_EV_IRQHandler+0x44a>
 8005964:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8005966:	2a00      	cmp	r2, #0
 8005968:	f000 81db 	beq.w	8005d22 <HAL_I2C_EV_IRQHandler+0x44a>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	e7dd      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005976:	0586      	lsls	r6, r0, #22
 8005978:	d56e      	bpl.n	8005a58 <HAL_I2C_EV_IRQHandler+0x180>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800597a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800597c:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8005980:	f000 81e5 	beq.w	8005d4e <HAL_I2C_EV_IRQHandler+0x476>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005984:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005986:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800598a:	bf04      	itt	eq
 800598c:	2208      	moveq	r2, #8
 800598e:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005990:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005994:	2a40      	cmp	r2, #64	; 0x40
 8005996:	f000 81d3 	beq.w	8005d40 <HAL_I2C_EV_IRQHandler+0x468>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800599a:	6922      	ldr	r2, [r4, #16]
 800599c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80059a0:	f000 81ae 	beq.w	8005d00 <HAL_I2C_EV_IRQHandler+0x428>
      if (hi2c->EventCount == 0U)
 80059a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	f040 81e8 	bne.w	8005d7c <HAL_I2C_EV_IRQHandler+0x4a4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80059ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80059ae:	11d2      	asrs	r2, r2, #7
 80059b0:	f002 0206 	and.w	r2, r2, #6
 80059b4:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80059b8:	611a      	str	r2, [r3, #16]
 80059ba:	e7ba      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059bc:	06cd      	lsls	r5, r1, #27
 80059be:	d47c      	bmi.n	8005aba <HAL_I2C_EV_IRQHandler+0x1e2>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059c0:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 80059c4:	2a21      	cmp	r2, #33	; 0x21
 80059c6:	f000 80f5 	beq.w	8005bb4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059ca:	064a      	lsls	r2, r1, #25
 80059cc:	f140 8132 	bpl.w	8005c34 <HAL_I2C_EV_IRQHandler+0x35c>
 80059d0:	0546      	lsls	r6, r0, #21
 80059d2:	f140 812f 	bpl.w	8005c34 <HAL_I2C_EV_IRQHandler+0x35c>
 80059d6:	074d      	lsls	r5, r1, #29
 80059d8:	f100 812f 	bmi.w	8005c3a <HAL_I2C_EV_IRQHandler+0x362>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059dc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80059e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80059e2:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059e4:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80059e6:	2a00      	cmp	r2, #0
 80059e8:	d0a3      	beq.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80059f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80059f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 80059fc:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059fe:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8005a00:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d195      	bne.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 8005a06:	292a      	cmp	r1, #42	; 0x2a
 8005a08:	d193      	bne.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a0e:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a14:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a16:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a18:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a1a:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a1c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a20:	f7ff fdc2 	bl	80055a8 <HAL_I2C_SlaveRxCpltCallback>
 8005a24:	e785      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a26:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a28:	6959      	ldr	r1, [r3, #20]
 8005a2a:	e76b      	b.n	8005904 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a2c:	0796      	lsls	r6, r2, #30
 8005a2e:	d515      	bpl.n	8005a5c <HAL_I2C_EV_IRQHandler+0x184>
 8005a30:	0586      	lsls	r6, r0, #22
 8005a32:	d513      	bpl.n	8005a5c <HAL_I2C_EV_IRQHandler+0x184>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005a34:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005a38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005a3a:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a3c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8005a40:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005a42:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a44:	f000 81ae 	beq.w	8005da4 <HAL_I2C_EV_IRQHandler+0x4cc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a48:	2200      	movs	r2, #0
 8005a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	9309      	str	r3, [sp, #36]	; 0x24
 8005a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a56:	e76c      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a58:	0716      	lsls	r6, r2, #28
 8005a5a:	d5e7      	bpl.n	8005a2c <HAL_I2C_EV_IRQHandler+0x154>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005a5c:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a60:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005a62:	f000 80f3 	beq.w	8005c4c <HAL_I2C_EV_IRQHandler+0x374>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a66:	050e      	lsls	r6, r1, #20
 8005a68:	f53f af63 	bmi.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a6c:	0611      	lsls	r1, r2, #24
 8005a6e:	f140 8113 	bpl.w	8005c98 <HAL_I2C_EV_IRQHandler+0x3c0>
 8005a72:	0546      	lsls	r6, r0, #21
 8005a74:	f140 8110 	bpl.w	8005c98 <HAL_I2C_EV_IRQHandler+0x3c0>
 8005a78:	0751      	lsls	r1, r2, #29
 8005a7a:	f100 8110 	bmi.w	8005c9e <HAL_I2C_EV_IRQHandler+0x3c6>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a7e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a82:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a84:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a88:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a8a:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a8c:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f040 8235 	bne.w	8005efe <HAL_I2C_EV_IRQHandler+0x626>
 8005a94:	2a21      	cmp	r2, #33	; 0x21
 8005a96:	f000 8325 	beq.w	80060e4 <HAL_I2C_EV_IRQHandler+0x80c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005a9a:	2940      	cmp	r1, #64	; 0x40
 8005a9c:	f47f af49 	bne.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005aa0:	2a22      	cmp	r2, #34	; 0x22
 8005aa2:	f47f af46 	bne.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    if (hi2c->XferCount == 0U)
 8005aa6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	2a00      	cmp	r2, #0
 8005aac:	f040 82a4 	bne.w	8005ff8 <HAL_I2C_EV_IRQHandler+0x720>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	e73b      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aba:	0585      	lsls	r5, r0, #22
 8005abc:	d580      	bpl.n	80059c0 <HAL_I2C_EV_IRQHandler+0xe8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005abe:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ac8:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005aca:	960b      	str	r6, [sp, #44]	; 0x2c
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae0:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	0510      	lsls	r0, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ae6:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ae8:	d521      	bpl.n	8005b2e <HAL_I2C_EV_IRQHandler+0x256>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005aea:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8005aee:	2a22      	cmp	r2, #34	; 0x22
 8005af0:	f000 8175 	beq.w	8005dde <HAL_I2C_EV_IRQHandler+0x506>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005af4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005af6:	6802      	ldr	r2, [r0, #0]
 8005af8:	6852      	ldr	r2, [r2, #4]
 8005afa:	b292      	uxth	r2, r2
 8005afc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005afe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005b00:	b292      	uxth	r2, r2
 8005b02:	b11a      	cbz	r2, 8005b0c <HAL_I2C_EV_IRQHandler+0x234>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005b06:	f042 0204 	orr.w	r2, r2, #4
 8005b0a:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b12:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b14:	f7fe fb60 	bl	80041d8 <HAL_DMA_GetState>
 8005b18:	2801      	cmp	r0, #1
 8005b1a:	d008      	beq.n	8005b2e <HAL_I2C_EV_IRQHandler+0x256>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005b1e:	4ba0      	ldr	r3, [pc, #640]	; (8005da0 <HAL_I2C_EV_IRQHandler+0x4c8>)
 8005b20:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b22:	f7fe fa57 	bl	8003fd4 <HAL_DMA_Abort_IT>
 8005b26:	b110      	cbz	r0, 8005b2e <HAL_I2C_EV_IRQHandler+0x256>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b28:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005b2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005b2c:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8005b2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	b313      	cbz	r3, 8005b7a <HAL_I2C_EV_IRQHandler+0x2a2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	0751      	lsls	r1, r2, #29
 8005b3a:	d50a      	bpl.n	8005b52 <HAL_I2C_EV_IRQHandler+0x27a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005b42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005b44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b46:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 8005b48:	3a01      	subs	r2, #1
 8005b4a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8005b4c:	3101      	adds	r1, #1
      hi2c->XferCount--;
 8005b4e:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005b50:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	0652      	lsls	r2, r2, #25
 8005b56:	d509      	bpl.n	8005b6c <HAL_I2C_EV_IRQHandler+0x294>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005b5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005b60:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8005b66:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8005b68:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005b6a:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8005b6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	b11b      	cbz	r3, 8005b7a <HAL_I2C_EV_IRQHandler+0x2a2>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b74:	f043 0304 	orr.w	r3, r3, #4
 8005b78:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f040 80d9 	bne.w	8005d34 <HAL_I2C_EV_IRQHandler+0x45c>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b82:	2d2a      	cmp	r5, #42	; 0x2a
 8005b84:	f000 814c 	beq.w	8005e20 <HAL_I2C_EV_IRQHandler+0x548>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b88:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005b8c:	2b28      	cmp	r3, #40	; 0x28
 8005b8e:	f000 814f 	beq.w	8005e30 <HAL_I2C_EV_IRQHandler+0x558>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b94:	2b22      	cmp	r3, #34	; 0x22
 8005b96:	d002      	beq.n	8005b9e <HAL_I2C_EV_IRQHandler+0x2c6>
 8005b98:	2d22      	cmp	r5, #34	; 0x22
 8005b9a:	f47f aeca 	bne.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b9e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8005ba0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ba2:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ba4:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005baa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bae:	f7ff fcfb 	bl	80055a8 <HAL_I2C_SlaveRxCpltCallback>
 8005bb2:	e6be      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bb4:	060e      	lsls	r6, r1, #24
 8005bb6:	d528      	bpl.n	8005c0a <HAL_I2C_EV_IRQHandler+0x332>
 8005bb8:	0545      	lsls	r5, r0, #21
 8005bba:	d526      	bpl.n	8005c0a <HAL_I2C_EV_IRQHandler+0x332>
 8005bbc:	074e      	lsls	r6, r1, #29
 8005bbe:	d427      	bmi.n	8005c10 <HAL_I2C_EV_IRQHandler+0x338>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bc0:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8005bc4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8005bc6:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bc8:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	f43f aeb1 	beq.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bd0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005bd2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005bd6:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8005bd8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005bda:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005bdc:	3901      	subs	r1, #1
 8005bde:	b289      	uxth	r1, r1
 8005be0:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005be2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8005be4:	b289      	uxth	r1, r1
 8005be6:	2900      	cmp	r1, #0
 8005be8:	f47f aea3 	bne.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 8005bec:	2829      	cmp	r0, #41	; 0x29
 8005bee:	f47f aea0 	bne.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bf2:	6859      	ldr	r1, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bf4:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bf6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005bfa:	6059      	str	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bfc:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bfe:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c00:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c04:	f7ff fcce 	bl	80055a4 <HAL_I2C_SlaveTxCpltCallback>
 8005c08:	e693      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c0a:	074d      	lsls	r5, r1, #29
 8005c0c:	f57f ae91 	bpl.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 8005c10:	0581      	lsls	r1, r0, #22
 8005c12:	f57f ae8e 	bpl.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
  if (hi2c->XferCount != 0U)
 8005c16:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c18:	b292      	uxth	r2, r2
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	f43f ae89 	beq.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c20:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005c22:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005c26:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8005c28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005c2a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005c32:	e67e      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c34:	0749      	lsls	r1, r1, #29
 8005c36:	f57f ae7c 	bpl.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 8005c3a:	0582      	lsls	r2, r0, #22
 8005c3c:	f57f ae79 	bpl.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
  if (hi2c->XferCount != 0U)
 8005c40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c42:	b292      	uxth	r2, r2
 8005c44:	2a00      	cmp	r2, #0
 8005c46:	f43f ae74 	beq.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 8005c4a:	e01a      	b.n	8005c82 <HAL_I2C_EV_IRQHandler+0x3aa>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005c4c:	050d      	lsls	r5, r1, #20
 8005c4e:	f53f ae70 	bmi.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c52:	0651      	lsls	r1, r2, #25
 8005c54:	d42f      	bmi.n	8005cb6 <HAL_I2C_EV_IRQHandler+0x3de>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c56:	0751      	lsls	r1, r2, #29
 8005c58:	f57f ae6b 	bpl.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 8005c5c:	0582      	lsls	r2, r0, #22
 8005c5e:	f57f ae68 	bpl.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8005c64:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c66:	b292      	uxth	r2, r2
 8005c68:	2a04      	cmp	r2, #4
 8005c6a:	f000 8139 	beq.w	8005ee0 <HAL_I2C_EV_IRQHandler+0x608>
  else if (hi2c->XferCount == 3U)
 8005c6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c70:	b292      	uxth	r2, r2
 8005c72:	2a03      	cmp	r2, #3
 8005c74:	f000 8155 	beq.w	8005f22 <HAL_I2C_EV_IRQHandler+0x64a>
  else if (hi2c->XferCount == 2U)
 8005c78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c7a:	b292      	uxth	r2, r2
 8005c7c:	2a02      	cmp	r2, #2
 8005c7e:	f000 8181 	beq.w	8005f84 <HAL_I2C_EV_IRQHandler+0x6ac>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8005c88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005c8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8005c90:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8005c92:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005c94:	6262      	str	r2, [r4, #36]	; 0x24
      }
 8005c96:	e64c      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c98:	0752      	lsls	r2, r2, #29
 8005c9a:	f57f ae4a 	bpl.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 8005c9e:	0586      	lsls	r6, r0, #22
 8005ca0:	f57f ae47 	bpl.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005ca4:	2d10      	cmp	r5, #16
 8005ca6:	f000 80f7 	beq.w	8005e98 <HAL_I2C_EV_IRQHandler+0x5c0>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005caa:	4620      	mov	r0, r4
}
 8005cac:	b00c      	add	sp, #48	; 0x30
 8005cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005cb2:	f7ff bc81 	b.w	80055b8 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cb6:	0546      	lsls	r6, r0, #21
 8005cb8:	d5cd      	bpl.n	8005c56 <HAL_I2C_EV_IRQHandler+0x37e>
 8005cba:	0755      	lsls	r5, r2, #29
 8005cbc:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8005cc0:	d4cc      	bmi.n	8005c5c <HAL_I2C_EV_IRQHandler+0x384>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cc2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005cc6:	2a22      	cmp	r2, #34	; 0x22
 8005cc8:	f47f ae33 	bne.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    tmp = hi2c->XferCount;
 8005ccc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005cce:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8005cd0:	2a03      	cmp	r2, #3
 8005cd2:	f240 8197 	bls.w	8006004 <HAL_I2C_EV_IRQHandler+0x72c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005cdc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005cde:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8005ce6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ce8:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8005cea:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8005cec:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8005cee:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8005cf0:	f47f ae1f 	bne.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cf4:	6822      	ldr	r2, [r4, #0]
 8005cf6:	6853      	ldr	r3, [r2, #4]
 8005cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cfc:	6053      	str	r3, [r2, #4]
 8005cfe:	e618      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d00:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005d04:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d06:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d08:	bf16      	itet	ne
 8005d0a:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d0e:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d12:	b2d2      	uxtbne	r2, r2
 8005d14:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d16:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005d18:	b11a      	cbz	r2, 8005d22 <HAL_I2C_EV_IRQHandler+0x44a>
 8005d1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d1c:	2a00      	cmp	r2, #0
 8005d1e:	f47f ae25 	bne.w	800596c <HAL_I2C_EV_IRQHandler+0x94>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	f43f ae04 	beq.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 8005d2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d2c:	2a00      	cmp	r2, #0
 8005d2e:	f47f ae1d 	bne.w	800596c <HAL_I2C_EV_IRQHandler+0x94>
 8005d32:	e5fe      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    I2C_ITError(hi2c);
 8005d34:	4620      	mov	r0, r4
}
 8005d36:	b00c      	add	sp, #48	; 0x30
 8005d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8005d3c:	f7ff bd16 	b.w	800576c <I2C_ITError>
    if (hi2c->EventCount == 0U)
 8005d40:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005d42:	bb3a      	cbnz	r2, 8005d94 <HAL_I2C_EV_IRQHandler+0x4bc>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d44:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005d46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d4a:	611a      	str	r2, [r3, #16]
 8005d4c:	e5f1      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005d4e:	2201      	movs	r2, #1
 8005d50:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005d52:	e61d      	b.n	8005990 <HAL_I2C_EV_IRQHandler+0xb8>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5a:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005d5c:	062e      	lsls	r6, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005d5e:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_UNLOCK(hi2c);
 8005d62:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005d66:	bf54      	ite	pl
 8005d68:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005d6a:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8005d6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005d70:	f001 0101 	and.w	r1, r1, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7ff fc19 	bl	80055ac <HAL_I2C_AddrCallback>
 8005d7a:	e5da      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      else if (hi2c->EventCount == 1U)
 8005d7c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005d7e:	2a01      	cmp	r2, #1
 8005d80:	f47f add7 	bne.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005d84:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005d86:	11d2      	asrs	r2, r2, #7
 8005d88:	f002 0206 	and.w	r2, r2, #6
 8005d8c:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8005d90:	611a      	str	r2, [r3, #16]
 8005d92:	e5ce      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d94:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	611a      	str	r2, [r3, #16]
 8005d9e:	e5c8      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 8005da0:	08005679 	.word	0x08005679
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005da4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005da6:	b911      	cbnz	r1, 8005dae <HAL_I2C_EV_IRQHandler+0x4d6>
 8005da8:	2a40      	cmp	r2, #64	; 0x40
 8005daa:	f000 80a1 	beq.w	8005ef0 <HAL_I2C_EV_IRQHandler+0x618>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005dae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005db0:	b922      	cbnz	r2, 8005dbc <HAL_I2C_EV_IRQHandler+0x4e4>
 8005db2:	6921      	ldr	r1, [r4, #16]
 8005db4:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8005db8:	f000 80a5 	beq.w	8005f06 <HAL_I2C_EV_IRQHandler+0x62e>
      if (hi2c->XferCount == 0U)
 8005dbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005dbe:	b292      	uxth	r2, r2
 8005dc0:	2a00      	cmp	r2, #0
 8005dc2:	d142      	bne.n	8005e4a <HAL_I2C_EV_IRQHandler+0x572>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc4:	9202      	str	r2, [sp, #8]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	9202      	str	r2, [sp, #8]
 8005dca:	699a      	ldr	r2, [r3, #24]
 8005dcc:	9202      	str	r2, [sp, #8]
 8005dce:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6523      	str	r3, [r4, #80]	; 0x50
 8005ddc:	e5a9      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005dde:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005de0:	6802      	ldr	r2, [r0, #0]
 8005de2:	6852      	ldr	r2, [r2, #4]
 8005de4:	b292      	uxth	r2, r2
 8005de6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005de8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005dea:	b292      	uxth	r2, r2
 8005dec:	b11a      	cbz	r2, 8005df6 <HAL_I2C_EV_IRQHandler+0x51e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005df0:	f042 0204 	orr.w	r2, r2, #4
 8005df4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dfc:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dfe:	f7fe f9eb 	bl	80041d8 <HAL_DMA_GetState>
 8005e02:	2801      	cmp	r0, #1
 8005e04:	f43f ae93 	beq.w	8005b2e <HAL_I2C_EV_IRQHandler+0x256>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e08:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005e0a:	4ba9      	ldr	r3, [pc, #676]	; (80060b0 <HAL_I2C_EV_IRQHandler+0x7d8>)
 8005e0c:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e0e:	f7fe f8e1 	bl	8003fd4 <HAL_DMA_Abort_IT>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f43f ae8b 	beq.w	8005b2e <HAL_I2C_EV_IRQHandler+0x256>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e18:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005e1a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005e1c:	4798      	blx	r3
 8005e1e:	e686      	b.n	8005b2e <HAL_I2C_EV_IRQHandler+0x256>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e20:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e22:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e24:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e26:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e2a:	f7ff fbbd 	bl	80055a8 <HAL_I2C_SlaveRxCpltCallback>
 8005e2e:	e6ab      	b.n	8005b88 <HAL_I2C_EV_IRQHandler+0x2b0>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e30:	4ba0      	ldr	r3, [pc, #640]	; (80060b4 <HAL_I2C_EV_IRQHandler+0x7dc>)
 8005e32:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8005e34:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e3a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8005e3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e44:	f7ff fbb4 	bl	80055b0 <HAL_I2C_ListenCpltCallback>
 8005e48:	e573      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      else if (hi2c->XferCount == 1U)
 8005e4a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005e4c:	b292      	uxth	r2, r2
 8005e4e:	2a01      	cmp	r2, #1
 8005e50:	d076      	beq.n	8005f40 <HAL_I2C_EV_IRQHandler+0x668>
      else if (hi2c->XferCount == 2U)
 8005e52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005e54:	b292      	uxth	r2, r2
 8005e56:	2a02      	cmp	r2, #2
 8005e58:	f000 810c 	beq.w	8006074 <HAL_I2C_EV_IRQHandler+0x79c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e62:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	0511      	lsls	r1, r2, #20
 8005e68:	d50e      	bpl.n	8005e88 <HAL_I2C_EV_IRQHandler+0x5b0>
 8005e6a:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8005e6e:	d007      	beq.n	8005e80 <HAL_I2C_EV_IRQHandler+0x5a8>
 8005e70:	3801      	subs	r0, #1
 8005e72:	281f      	cmp	r0, #31
 8005e74:	d808      	bhi.n	8005e88 <HAL_I2C_EV_IRQHandler+0x5b0>
 8005e76:	4a90      	ldr	r2, [pc, #576]	; (80060b8 <HAL_I2C_EV_IRQHandler+0x7e0>)
 8005e78:	fa22 f000 	lsr.w	r0, r2, r0
 8005e7c:	07c2      	lsls	r2, r0, #31
 8005e7e:	d503      	bpl.n	8005e88 <HAL_I2C_EV_IRQHandler+0x5b0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e86:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e88:	2200      	movs	r2, #0
 8005e8a:	9208      	str	r2, [sp, #32]
 8005e8c:	695a      	ldr	r2, [r3, #20]
 8005e8e:	9208      	str	r2, [sp, #32]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	9308      	str	r3, [sp, #32]
 8005e94:	9b08      	ldr	r3, [sp, #32]
 8005e96:	e79f      	b.n	8005dd8 <HAL_I2C_EV_IRQHandler+0x500>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e9a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005e9e:	2a21      	cmp	r2, #33	; 0x21
 8005ea0:	f47f ad47 	bne.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    if (hi2c->XferCount != 0U)
 8005ea4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005ea6:	b292      	uxth	r2, r2
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	f47f aeb9 	bne.w	8005c20 <HAL_I2C_EV_IRQHandler+0x348>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005eae:	2908      	cmp	r1, #8
 8005eb0:	f000 8160 	beq.w	8006174 <HAL_I2C_EV_IRQHandler+0x89c>
 8005eb4:	2920      	cmp	r1, #32
 8005eb6:	f000 815d 	beq.w	8006174 <HAL_I2C_EV_IRQHandler+0x89c>
 8005eba:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8005ebe:	f000 8159 	beq.w	8006174 <HAL_I2C_EV_IRQHandler+0x89c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ec2:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ec4:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ec6:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 8005eca:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ecc:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ece:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ed0:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005ed6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005eda:	f7ff fb5f 	bl	800559c <HAL_I2C_MasterTxCpltCallback>
 8005ede:	e528      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ee0:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee8:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8005eee:	e6cb      	b.n	8005c88 <HAL_I2C_EV_IRQHandler+0x3b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef0:	9100      	str	r1, [sp, #0]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	9200      	str	r2, [sp, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	9b00      	ldr	r3, [sp, #0]
 8005efc:	e519      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005efe:	2a21      	cmp	r2, #33	; 0x21
 8005f00:	f43f add1 	beq.w	8005aa6 <HAL_I2C_EV_IRQHandler+0x1ce>
 8005f04:	e5c9      	b.n	8005a9a <HAL_I2C_EV_IRQHandler+0x1c2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f06:	9201      	str	r2, [sp, #4]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	9201      	str	r2, [sp, #4]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	9201      	str	r2, [sp, #4]
 8005f10:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f18:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005f1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	6523      	str	r3, [r4, #80]	; 0x50
 8005f20:	e507      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f22:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005f24:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005f2c:	f43f aea9 	beq.w	8005c82 <HAL_I2C_EV_IRQHandler+0x3aa>
 8005f30:	2902      	cmp	r1, #2
 8005f32:	f43f aea6 	beq.w	8005c82 <HAL_I2C_EV_IRQHandler+0x3aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e6a0      	b.n	8005c82 <HAL_I2C_EV_IRQHandler+0x3aa>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005f40:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8005f44:	f000 8102 	beq.w	800614c <HAL_I2C_EV_IRQHandler+0x874>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005f48:	2808      	cmp	r0, #8
 8005f4a:	f000 80bb 	beq.w	80060c4 <HAL_I2C_EV_IRQHandler+0x7ec>
 8005f4e:	2820      	cmp	r0, #32
 8005f50:	f000 80b8 	beq.w	80060c4 <HAL_I2C_EV_IRQHandler+0x7ec>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005f54:	2d12      	cmp	r5, #18
 8005f56:	f000 8150 	beq.w	80061fa <HAL_I2C_EV_IRQHandler+0x922>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f5a:	2810      	cmp	r0, #16
 8005f5c:	f200 8150 	bhi.w	8006200 <HAL_I2C_EV_IRQHandler+0x928>
 8005f60:	4a56      	ldr	r2, [pc, #344]	; (80060bc <HAL_I2C_EV_IRQHandler+0x7e4>)
 8005f62:	fa22 f000 	lsr.w	r0, r2, r0
 8005f66:	07c1      	lsls	r1, r0, #31
 8005f68:	f140 814a 	bpl.w	8006200 <HAL_I2C_EV_IRQHandler+0x928>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f72:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f74:	2200      	movs	r2, #0
 8005f76:	9205      	str	r2, [sp, #20]
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	9205      	str	r2, [sp, #20]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	9305      	str	r3, [sp, #20]
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	e729      	b.n	8005dd8 <HAL_I2C_EV_IRQHandler+0x500>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005f84:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f86:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005f88:	f000 80c3 	beq.w	8006112 <HAL_I2C_EV_IRQHandler+0x83a>
 8005f8c:	2910      	cmp	r1, #16
 8005f8e:	f000 80c0 	beq.w	8006112 <HAL_I2C_EV_IRQHandler+0x83a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005f92:	2904      	cmp	r1, #4
 8005f94:	f000 8122 	beq.w	80061dc <HAL_I2C_EV_IRQHandler+0x904>
 8005f98:	2902      	cmp	r1, #2
 8005f9a:	f000 811f 	beq.w	80061dc <HAL_I2C_EV_IRQHandler+0x904>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8005faa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8005fac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fae:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb6:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8005fb8:	1c51      	adds	r1, r2, #1
 8005fba:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fbc:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8005fbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005fc0:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8005fc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005fca:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8005fcc:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 8005fd2:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 8005fd4:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005fd6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005fd8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fdc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	f000 80db 	beq.w	800619c <HAL_I2C_EV_IRQHandler+0x8c4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe6:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005fe8:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fea:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fee:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ff0:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ff2:	f7ff fad5 	bl	80055a0 <HAL_I2C_MasterRxCpltCallback>
 8005ff6:	e49c      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ff8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005ffc:	2a40      	cmp	r2, #64	; 0x40
 8005ffe:	f47f ae0f 	bne.w	8005c20 <HAL_I2C_EV_IRQHandler+0x348>
 8006002:	e652      	b.n	8005caa <HAL_I2C_EV_IRQHandler+0x3d2>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006004:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006006:	2802      	cmp	r0, #2
 8006008:	f43f ac93 	beq.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 800600c:	2a01      	cmp	r2, #1
 800600e:	f63f ac90 	bhi.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006012:	4a2b      	ldr	r2, [pc, #172]	; (80060c0 <HAL_I2C_EV_IRQHandler+0x7e8>)
  __IO uint32_t count = 0U;
 8006014:	910a      	str	r1, [sp, #40]	; 0x28
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800601c:	fbb2 f2f1 	udiv	r2, r2, r1
 8006020:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006024:	920a      	str	r2, [sp, #40]	; 0x28
 8006026:	e004      	b.n	8006032 <HAL_I2C_EV_IRQHandler+0x75a>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 800602e:	f000 80ec 	beq.w	800620a <HAL_I2C_EV_IRQHandler+0x932>
    count--;
 8006032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006034:	3a01      	subs	r2, #1
 8006036:	920a      	str	r2, [sp, #40]	; 0x28
    if (count == 0U)
 8006038:	990a      	ldr	r1, [sp, #40]	; 0x28
 800603a:	2900      	cmp	r1, #0
 800603c:	d1f4      	bne.n	8006028 <HAL_I2C_EV_IRQHandler+0x750>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800603e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006040:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006042:	f042 0220 	orr.w	r2, r2, #32
 8006046:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800604e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8006054:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8006056:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006058:	3b01      	subs	r3, #1
 800605a:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 800605c:	3201      	adds	r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 800605e:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8006060:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8006062:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8006064:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8006068:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800606a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800606e:	f7ff faff 	bl	8005670 <HAL_I2C_ErrorCallback>
 8006072:	e45e      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006074:	2810      	cmp	r0, #16
 8006076:	f240 809a 	bls.w	80061ae <HAL_I2C_EV_IRQHandler+0x8d6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006080:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006088:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	0516      	lsls	r6, r2, #20
 800608e:	d507      	bpl.n	80060a0 <HAL_I2C_EV_IRQHandler+0x7c8>
 8006090:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8006094:	f040 8098 	bne.w	80061c8 <HAL_I2C_EV_IRQHandler+0x8f0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800609e:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a0:	2200      	movs	r2, #0
 80060a2:	9207      	str	r2, [sp, #28]
 80060a4:	695a      	ldr	r2, [r3, #20]
 80060a6:	9207      	str	r2, [sp, #28]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	9307      	str	r3, [sp, #28]
 80060ac:	9b07      	ldr	r3, [sp, #28]
 80060ae:	e693      	b.n	8005dd8 <HAL_I2C_EV_IRQHandler+0x500>
 80060b0:	08005679 	.word	0x08005679
 80060b4:	ffff0000 	.word	0xffff0000
 80060b8:	80008081 	.word	0x80008081
 80060bc:	00010014 	.word	0x00010014
 80060c0:	20000030 	.word	0x20000030
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c4:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c6:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060cc:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ce:	9106      	str	r1, [sp, #24]
 80060d0:	695a      	ldr	r2, [r3, #20]
 80060d2:	9206      	str	r2, [sp, #24]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	9206      	str	r2, [sp, #24]
 80060d8:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e679      	b.n	8005dd8 <HAL_I2C_EV_IRQHandler+0x500>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060e4:	2d08      	cmp	r5, #8
 80060e6:	d018      	beq.n	800611a <HAL_I2C_EV_IRQHandler+0x842>
 80060e8:	2d20      	cmp	r5, #32
 80060ea:	d016      	beq.n	800611a <HAL_I2C_EV_IRQHandler+0x842>
 80060ec:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 80060f0:	d013      	beq.n	800611a <HAL_I2C_EV_IRQHandler+0x842>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060f2:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80060f4:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fa:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80060fc:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060fe:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006100:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006102:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006104:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006108:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800610c:	f7ff fa46 	bl	800559c <HAL_I2C_MasterTxCpltCallback>
 8006110:	e40f      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	e744      	b.n	8005fa4 <HAL_I2C_EV_IRQHandler+0x6cc>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006120:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006122:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006124:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8006126:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006128:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800612c:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800612e:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006130:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006134:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006138:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800613c:	2b40      	cmp	r3, #64	; 0x40
        HAL_I2C_MemTxCpltCallback(hi2c);
 800613e:	4620      	mov	r0, r4
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006140:	f47f aecb 	bne.w	8005eda <HAL_I2C_EV_IRQHandler+0x602>
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006144:	f7ff fa36 	bl	80055b4 <HAL_I2C_MemTxCpltCallback>
 8006148:	f7ff bbf3 	b.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006152:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800615a:	d043      	beq.n	80061e4 <HAL_I2C_EV_IRQHandler+0x90c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800615c:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800615e:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006164:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006166:	9103      	str	r1, [sp, #12]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	9203      	str	r2, [sp, #12]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	9303      	str	r3, [sp, #12]
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	e631      	b.n	8005dd8 <HAL_I2C_EV_IRQHandler+0x500>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800617a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800617c:	681a      	ldr	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800617e:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        hi2c->State = HAL_I2C_STATE_READY;
 8006184:	2520      	movs	r5, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006186:	601a      	str	r2, [r3, #0]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006188:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 800618a:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800618c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006190:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006194:	f7ff fa02 	bl	800559c <HAL_I2C_MasterTxCpltCallback>
 8006198:	f7ff bbcb 	b.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800619c:	2300      	movs	r3, #0
 800619e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 80061a2:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 80061a4:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80061a6:	f7ff fa61 	bl	800566c <HAL_I2C_MemRxCpltCallback>
 80061aa:	f7ff bbc2 	b.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80061ae:	4a28      	ldr	r2, [pc, #160]	; (8006250 <HAL_I2C_EV_IRQHandler+0x978>)
 80061b0:	40c2      	lsrs	r2, r0
 80061b2:	07d2      	lsls	r2, r2, #31
 80061b4:	f57f af61 	bpl.w	800607a <HAL_I2C_EV_IRQHandler+0x7a2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061be:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	0515      	lsls	r5, r2, #20
 80061c4:	f57f af6c 	bpl.w	80060a0 <HAL_I2C_EV_IRQHandler+0x7c8>
 80061c8:	3801      	subs	r0, #1
 80061ca:	281f      	cmp	r0, #31
 80061cc:	f63f af68 	bhi.w	80060a0 <HAL_I2C_EV_IRQHandler+0x7c8>
 80061d0:	4a20      	ldr	r2, [pc, #128]	; (8006254 <HAL_I2C_EV_IRQHandler+0x97c>)
 80061d2:	40c2      	lsrs	r2, r0
 80061d4:	07d0      	lsls	r0, r2, #31
 80061d6:	f57f af63 	bpl.w	80060a0 <HAL_I2C_EV_IRQHandler+0x7c8>
 80061da:	e75d      	b.n	8006098 <HAL_I2C_EV_IRQHandler+0x7c0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	e6df      	b.n	8005fa4 <HAL_I2C_EV_IRQHandler+0x6cc>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061e4:	9204      	str	r2, [sp, #16]
 80061e6:	695a      	ldr	r2, [r3, #20]
 80061e8:	9204      	str	r2, [sp, #16]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	9204      	str	r2, [sp, #16]
 80061ee:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	e5ee      	b.n	8005dd8 <HAL_I2C_EV_IRQHandler+0x500>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80061fa:	2801      	cmp	r0, #1
 80061fc:	f47f af62 	bne.w	80060c4 <HAL_I2C_EV_IRQHandler+0x7ec>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	e6b4      	b.n	8005f74 <HAL_I2C_EV_IRQHandler+0x69c>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620a:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620c:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006212:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006214:	6859      	ldr	r1, [r3, #4]
 8006216:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800621a:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8006220:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8006222:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006224:	3b01      	subs	r3, #1
 8006226:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8006228:	2020      	movs	r0, #32
        hi2c->XferCount--;
 800622a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800622c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006230:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8006234:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006236:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 8006238:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800623a:	f47f aed5 	bne.w	8005fe8 <HAL_I2C_EV_IRQHandler+0x710>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800623e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006242:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8006244:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006246:	f7ff fa11 	bl	800566c <HAL_I2C_MemRxCpltCallback>
 800624a:	f7ff bb72 	b.w	8005932 <HAL_I2C_EV_IRQHandler+0x5a>
 800624e:	bf00      	nop
 8006250:	00010014 	.word	0x00010014
 8006254:	80008081 	.word	0x80008081

08006258 <HAL_I2C_GetState>:
  return hi2c->State;
 8006258:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop

08006260 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8006260:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8006262:	4770      	bx	lr

08006264 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006264:	2800      	cmp	r0, #0
 8006266:	f000 8263 	beq.w	8006730 <HAL_RCC_OscConfig+0x4cc>
{
 800626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800626e:	6803      	ldr	r3, [r0, #0]
 8006270:	2b0f      	cmp	r3, #15
{
 8006272:	b082      	sub	sp, #8
 8006274:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006276:	f200 8137 	bhi.w	80064e8 <HAL_RCC_OscConfig+0x284>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627a:	07dd      	lsls	r5, r3, #31
 800627c:	d537      	bpl.n	80062ee <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800627e:	6863      	ldr	r3, [r4, #4]
 8006280:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8006284:	d003      	beq.n	800628e <HAL_RCC_OscConfig+0x2a>
 8006286:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800628a:	f040 81a4 	bne.w	80065d6 <HAL_RCC_OscConfig+0x372>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800628e:	4ab6      	ldr	r2, [pc, #728]	; (8006568 <HAL_RCC_OscConfig+0x304>)
 8006290:	6893      	ldr	r3, [r2, #8]
 8006292:	f003 030c 	and.w	r3, r3, #12
 8006296:	2b04      	cmp	r3, #4
 8006298:	f000 8180 	beq.w	800659c <HAL_RCC_OscConfig+0x338>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800629c:	6893      	ldr	r3, [r2, #8]
 800629e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	f000 8176 	beq.w	8006594 <HAL_RCC_OscConfig+0x330>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a8:	6863      	ldr	r3, [r4, #4]
 80062aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ae:	f000 817f 	beq.w	80065b0 <HAL_RCC_OscConfig+0x34c>
 80062b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062b6:	f000 8207 	beq.w	80066c8 <HAL_RCC_OscConfig+0x464>
 80062ba:	4dab      	ldr	r5, [pc, #684]	; (8006568 <HAL_RCC_OscConfig+0x304>)
 80062bc:	682a      	ldr	r2, [r5, #0]
 80062be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062c2:	602a      	str	r2, [r5, #0]
 80062c4:	682a      	ldr	r2, [r5, #0]
 80062c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062ca:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 8174 	bne.w	80065ba <HAL_RCC_OscConfig+0x356>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d2:	f7fd fa27 	bl	8003724 <HAL_GetTick>
 80062d6:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062d8:	e005      	b.n	80062e6 <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062da:	f7fd fa23 	bl	8003724 <HAL_GetTick>
 80062de:	1b80      	subs	r0, r0, r6
 80062e0:	2864      	cmp	r0, #100	; 0x64
 80062e2:	f200 819a 	bhi.w	800661a <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e6:	682b      	ldr	r3, [r5, #0]
 80062e8:	039b      	lsls	r3, r3, #14
 80062ea:	d4f6      	bmi.n	80062da <HAL_RCC_OscConfig+0x76>
 80062ec:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ee:	079f      	lsls	r7, r3, #30
 80062f0:	d530      	bpl.n	8006354 <HAL_RCC_OscConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80062f2:	68e3      	ldr	r3, [r4, #12]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	f200 810c 	bhi.w	8006512 <HAL_RCC_OscConfig+0x2ae>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	2b1f      	cmp	r3, #31
 80062fe:	f200 8111 	bhi.w	8006524 <HAL_RCC_OscConfig+0x2c0>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006302:	4b99      	ldr	r3, [pc, #612]	; (8006568 <HAL_RCC_OscConfig+0x304>)
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	f012 0f0c 	tst.w	r2, #12
 800630a:	f000 80f7 	beq.w	80064fc <HAL_RCC_OscConfig+0x298>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006314:	2a08      	cmp	r2, #8
 8006316:	f000 80ed 	beq.w	80064f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800631a:	68e3      	ldr	r3, [r4, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8198 	beq.w	8006652 <HAL_RCC_OscConfig+0x3ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006322:	4b92      	ldr	r3, [pc, #584]	; (800656c <HAL_RCC_OscConfig+0x308>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006324:	4e90      	ldr	r6, [pc, #576]	; (8006568 <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_HSI_ENABLE();
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800632a:	f7fd f9fb 	bl	8003724 <HAL_GetTick>
 800632e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006330:	e005      	b.n	800633e <HAL_RCC_OscConfig+0xda>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006332:	f7fd f9f7 	bl	8003724 <HAL_GetTick>
 8006336:	1b40      	subs	r0, r0, r5
 8006338:	2802      	cmp	r0, #2
 800633a:	f200 816e 	bhi.w	800661a <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633e:	6833      	ldr	r3, [r6, #0]
 8006340:	0798      	lsls	r0, r3, #30
 8006342:	d5f6      	bpl.n	8006332 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006344:	6833      	ldr	r3, [r6, #0]
 8006346:	6922      	ldr	r2, [r4, #16]
 8006348:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800634c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006350:	6033      	str	r3, [r6, #0]
 8006352:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006354:	071a      	lsls	r2, r3, #28
 8006356:	f100 80af 	bmi.w	80064b8 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800635a:	075d      	lsls	r5, r3, #29
 800635c:	d544      	bpl.n	80063e8 <HAL_RCC_OscConfig+0x184>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d906      	bls.n	8006372 <HAL_RCC_OscConfig+0x10e>
 8006364:	2b05      	cmp	r3, #5
 8006366:	d004      	beq.n	8006372 <HAL_RCC_OscConfig+0x10e>
 8006368:	4881      	ldr	r0, [pc, #516]	; (8006570 <HAL_RCC_OscConfig+0x30c>)
 800636a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800636e:	f7fc fde7 	bl	8002f40 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006372:	4a7d      	ldr	r2, [pc, #500]	; (8006568 <HAL_RCC_OscConfig+0x304>)
 8006374:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006376:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800637a:	f040 80f2 	bne.w	8006562 <HAL_RCC_OscConfig+0x2fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006386:	6413      	str	r3, [r2, #64]	; 0x40
 8006388:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800638a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006392:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006394:	4e77      	ldr	r6, [pc, #476]	; (8006574 <HAL_RCC_OscConfig+0x310>)
 8006396:	6833      	ldr	r3, [r6, #0]
 8006398:	05d8      	lsls	r0, r3, #23
 800639a:	f140 812e 	bpl.w	80065fa <HAL_RCC_OscConfig+0x396>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800639e:	68a3      	ldr	r3, [r4, #8]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	f000 813e 	beq.w	8006622 <HAL_RCC_OscConfig+0x3be>
 80063a6:	2b05      	cmp	r3, #5
 80063a8:	f000 81c4 	beq.w	8006734 <HAL_RCC_OscConfig+0x4d0>
 80063ac:	4e6e      	ldr	r6, [pc, #440]	; (8006568 <HAL_RCC_OscConfig+0x304>)
 80063ae:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80063b0:	f022 0201 	bic.w	r2, r2, #1
 80063b4:	6732      	str	r2, [r6, #112]	; 0x70
 80063b6:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80063b8:	f022 0204 	bic.w	r2, r2, #4
 80063bc:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f040 8134 	bne.w	800662c <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063c4:	f7fd f9ae 	bl	8003724 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80063cc:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063ce:	e005      	b.n	80063dc <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063d0:	f7fd f9a8 	bl	8003724 <HAL_GetTick>
 80063d4:	1bc0      	subs	r0, r0, r7
 80063d6:	4540      	cmp	r0, r8
 80063d8:	f200 811f 	bhi.w	800661a <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063dc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80063de:	079b      	lsls	r3, r3, #30
 80063e0:	d4f6      	bmi.n	80063d0 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063e2:	2d00      	cmp	r5, #0
 80063e4:	f040 817a 	bne.w	80066dc <HAL_RCC_OscConfig+0x478>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80063e8:	69a0      	ldr	r0, [r4, #24]
 80063ea:	2802      	cmp	r0, #2
 80063ec:	f200 80c8 	bhi.w	8006580 <HAL_RCC_OscConfig+0x31c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d05d      	beq.n	80064b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063f4:	4d5c      	ldr	r5, [pc, #368]	; (8006568 <HAL_RCC_OscConfig+0x304>)
 80063f6:	68ab      	ldr	r3, [r5, #8]
 80063f8:	f003 030c 	and.w	r3, r3, #12
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	f000 8139 	beq.w	8006674 <HAL_RCC_OscConfig+0x410>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006402:	2802      	cmp	r0, #2
 8006404:	f040 8182 	bne.w	800670c <HAL_RCC_OscConfig+0x4a8>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006408:	69e3      	ldr	r3, [r4, #28]
 800640a:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800640e:	d004      	beq.n	800641a <HAL_RCC_OscConfig+0x1b6>
 8006410:	4857      	ldr	r0, [pc, #348]	; (8006570 <HAL_RCC_OscConfig+0x30c>)
 8006412:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8006416:	f7fc fd93 	bl	8002f40 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800641a:	6a23      	ldr	r3, [r4, #32]
 800641c:	2b3f      	cmp	r3, #63	; 0x3f
 800641e:	f200 816f 	bhi.w	8006700 <HAL_RCC_OscConfig+0x49c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006424:	3b32      	subs	r3, #50	; 0x32
 8006426:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800642a:	f200 8163 	bhi.w	80066f4 <HAL_RCC_OscConfig+0x490>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800642e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006430:	2b08      	cmp	r3, #8
 8006432:	f200 8159 	bhi.w	80066e8 <HAL_RCC_OscConfig+0x484>
 8006436:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800643a:	fa22 f303 	lsr.w	r3, r2, r3
 800643e:	07d8      	lsls	r0, r3, #31
 8006440:	f140 8152 	bpl.w	80066e8 <HAL_RCC_OscConfig+0x484>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006446:	3b02      	subs	r3, #2
 8006448:	2b0d      	cmp	r3, #13
 800644a:	f200 817d 	bhi.w	8006748 <HAL_RCC_OscConfig+0x4e4>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800644e:	4b4a      	ldr	r3, [pc, #296]	; (8006578 <HAL_RCC_OscConfig+0x314>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006450:	4e45      	ldr	r6, [pc, #276]	; (8006568 <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_PLL_DISABLE();
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006456:	f7fd f965 	bl	8003724 <HAL_GetTick>
 800645a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800645c:	e005      	b.n	800646a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800645e:	f7fd f961 	bl	8003724 <HAL_GetTick>
 8006462:	1b40      	subs	r0, r0, r5
 8006464:	2802      	cmp	r0, #2
 8006466:	f200 80d8 	bhi.w	800661a <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800646a:	6833      	ldr	r3, [r6, #0]
 800646c:	0199      	lsls	r1, r3, #6
 800646e:	d4f6      	bmi.n	800645e <HAL_RCC_OscConfig+0x1fa>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006470:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8006474:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8006478:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800647a:	432b      	orrs	r3, r5
 800647c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006480:	0852      	lsrs	r2, r2, #1
 8006482:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006486:	3a01      	subs	r2, #1
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006488:	493b      	ldr	r1, [pc, #236]	; (8006578 <HAL_RCC_OscConfig+0x314>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800648a:	4d37      	ldr	r5, [pc, #220]	; (8006568 <HAL_RCC_OscConfig+0x304>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800648c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8006490:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006492:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8006494:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8006496:	f7fd f945 	bl	8003724 <HAL_GetTick>
 800649a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649c:	e005      	b.n	80064aa <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800649e:	f7fd f941 	bl	8003724 <HAL_GetTick>
 80064a2:	1b00      	subs	r0, r0, r4
 80064a4:	2802      	cmp	r0, #2
 80064a6:	f200 80b8 	bhi.w	800661a <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064aa:	682b      	ldr	r3, [r5, #0]
 80064ac:	019a      	lsls	r2, r3, #6
 80064ae:	d5f6      	bpl.n	800649e <HAL_RCC_OscConfig+0x23a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80064b0:	2000      	movs	r0, #0
}
 80064b2:	b002      	add	sp, #8
 80064b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80064b8:	6963      	ldr	r3, [r4, #20]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d848      	bhi.n	8006550 <HAL_RCC_OscConfig+0x2ec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d036      	beq.n	8006530 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_LSI_ENABLE();
 80064c2:	4b2e      	ldr	r3, [pc, #184]	; (800657c <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064c4:	4e28      	ldr	r6, [pc, #160]	; (8006568 <HAL_RCC_OscConfig+0x304>)
      __HAL_RCC_LSI_ENABLE();
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80064ca:	f7fd f92b 	bl	8003724 <HAL_GetTick>
 80064ce:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064d0:	e005      	b.n	80064de <HAL_RCC_OscConfig+0x27a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064d2:	f7fd f927 	bl	8003724 <HAL_GetTick>
 80064d6:	1b40      	subs	r0, r0, r5
 80064d8:	2802      	cmp	r0, #2
 80064da:	f200 809e 	bhi.w	800661a <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064de:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80064e0:	079b      	lsls	r3, r3, #30
 80064e2:	d5f6      	bpl.n	80064d2 <HAL_RCC_OscConfig+0x26e>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	e738      	b.n	800635a <HAL_RCC_OscConfig+0xf6>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80064e8:	4821      	ldr	r0, [pc, #132]	; (8006570 <HAL_RCC_OscConfig+0x30c>)
 80064ea:	21e8      	movs	r1, #232	; 0xe8
 80064ec:	f7fc fd28 	bl	8002f40 <assert_failed>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	e6c2      	b.n	800627a <HAL_RCC_OscConfig+0x16>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	025e      	lsls	r6, r3, #9
 80064f8:	f53f af0f 	bmi.w	800631a <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064fc:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <HAL_RCC_OscConfig+0x304>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	079d      	lsls	r5, r3, #30
 8006502:	d56d      	bpl.n	80065e0 <HAL_RCC_OscConfig+0x37c>
 8006504:	68e3      	ldr	r3, [r4, #12]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d06a      	beq.n	80065e0 <HAL_RCC_OscConfig+0x37c>
        return HAL_ERROR;
 800650a:	2001      	movs	r0, #1
}
 800650c:	b002      	add	sp, #8
 800650e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006512:	4817      	ldr	r0, [pc, #92]	; (8006570 <HAL_RCC_OscConfig+0x30c>)
 8006514:	f240 111f 	movw	r1, #287	; 0x11f
 8006518:	f7fc fd12 	bl	8002f40 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	2b1f      	cmp	r3, #31
 8006520:	f67f aeef 	bls.w	8006302 <HAL_RCC_OscConfig+0x9e>
 8006524:	4812      	ldr	r0, [pc, #72]	; (8006570 <HAL_RCC_OscConfig+0x30c>)
 8006526:	f44f 7190 	mov.w	r1, #288	; 0x120
 800652a:	f7fc fd09 	bl	8002f40 <assert_failed>
 800652e:	e6e8      	b.n	8006302 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_LSI_DISABLE();
 8006530:	4a12      	ldr	r2, [pc, #72]	; (800657c <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006532:	4e0d      	ldr	r6, [pc, #52]	; (8006568 <HAL_RCC_OscConfig+0x304>)
      __HAL_RCC_LSI_DISABLE();
 8006534:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006536:	f7fd f8f5 	bl	8003724 <HAL_GetTick>
 800653a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800653c:	e004      	b.n	8006548 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800653e:	f7fd f8f1 	bl	8003724 <HAL_GetTick>
 8006542:	1b40      	subs	r0, r0, r5
 8006544:	2802      	cmp	r0, #2
 8006546:	d868      	bhi.n	800661a <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006548:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800654a:	079f      	lsls	r7, r3, #30
 800654c:	d4f7      	bmi.n	800653e <HAL_RCC_OscConfig+0x2da>
 800654e:	e7c9      	b.n	80064e4 <HAL_RCC_OscConfig+0x280>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006550:	4807      	ldr	r0, [pc, #28]	; (8006570 <HAL_RCC_OscConfig+0x30c>)
 8006552:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8006556:	f7fc fcf3 	bl	8002f40 <assert_failed>
 800655a:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0e7      	beq.n	8006530 <HAL_RCC_OscConfig+0x2cc>
 8006560:	e7af      	b.n	80064c2 <HAL_RCC_OscConfig+0x25e>
    FlagStatus       pwrclkchanged = RESET;
 8006562:	2500      	movs	r5, #0
 8006564:	e716      	b.n	8006394 <HAL_RCC_OscConfig+0x130>
 8006566:	bf00      	nop
 8006568:	40023800 	.word	0x40023800
 800656c:	42470000 	.word	0x42470000
 8006570:	0800d108 	.word	0x0800d108
 8006574:	40007000 	.word	0x40007000
 8006578:	42470060 	.word	0x42470060
 800657c:	42470e80 	.word	0x42470e80
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006580:	4874      	ldr	r0, [pc, #464]	; (8006754 <HAL_RCC_OscConfig+0x4f0>)
 8006582:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006586:	f7fc fcdb 	bl	8002f40 <assert_failed>
 800658a:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800658c:	2800      	cmp	r0, #0
 800658e:	f47f af31 	bne.w	80063f4 <HAL_RCC_OscConfig+0x190>
 8006592:	e78d      	b.n	80064b0 <HAL_RCC_OscConfig+0x24c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006594:	6853      	ldr	r3, [r2, #4]
 8006596:	0258      	lsls	r0, r3, #9
 8006598:	f57f ae86 	bpl.w	80062a8 <HAL_RCC_OscConfig+0x44>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800659c:	4b6e      	ldr	r3, [pc, #440]	; (8006758 <HAL_RCC_OscConfig+0x4f4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	0399      	lsls	r1, r3, #14
 80065a2:	f57f aea3 	bpl.w	80062ec <HAL_RCC_OscConfig+0x88>
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f47f ae9f 	bne.w	80062ec <HAL_RCC_OscConfig+0x88>
 80065ae:	e7ac      	b.n	800650a <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065b0:	4a69      	ldr	r2, [pc, #420]	; (8006758 <HAL_RCC_OscConfig+0x4f4>)
 80065b2:	6813      	ldr	r3, [r2, #0]
 80065b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80065ba:	f7fd f8b3 	bl	8003724 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065be:	4e66      	ldr	r6, [pc, #408]	; (8006758 <HAL_RCC_OscConfig+0x4f4>)
        tickstart = HAL_GetTick();
 80065c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c2:	e004      	b.n	80065ce <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065c4:	f7fd f8ae 	bl	8003724 <HAL_GetTick>
 80065c8:	1b40      	subs	r0, r0, r5
 80065ca:	2864      	cmp	r0, #100	; 0x64
 80065cc:	d825      	bhi.n	800661a <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	6833      	ldr	r3, [r6, #0]
 80065d0:	039a      	lsls	r2, r3, #14
 80065d2:	d5f7      	bpl.n	80065c4 <HAL_RCC_OscConfig+0x360>
 80065d4:	e68a      	b.n	80062ec <HAL_RCC_OscConfig+0x88>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80065d6:	485f      	ldr	r0, [pc, #380]	; (8006754 <HAL_RCC_OscConfig+0x4f0>)
 80065d8:	21ed      	movs	r1, #237	; 0xed
 80065da:	f7fc fcb1 	bl	8002f40 <assert_failed>
 80065de:	e656      	b.n	800628e <HAL_RCC_OscConfig+0x2a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e0:	4a5d      	ldr	r2, [pc, #372]	; (8006758 <HAL_RCC_OscConfig+0x4f4>)
 80065e2:	6921      	ldr	r1, [r4, #16]
 80065e4:	6813      	ldr	r3, [r2, #0]
 80065e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80065ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065f2:	071a      	lsls	r2, r3, #28
 80065f4:	f57f aeb1 	bpl.w	800635a <HAL_RCC_OscConfig+0xf6>
 80065f8:	e75e      	b.n	80064b8 <HAL_RCC_OscConfig+0x254>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065fa:	6833      	ldr	r3, [r6, #0]
 80065fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006600:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006602:	f7fd f88f 	bl	8003724 <HAL_GetTick>
 8006606:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006608:	6833      	ldr	r3, [r6, #0]
 800660a:	05d9      	lsls	r1, r3, #23
 800660c:	f53f aec7 	bmi.w	800639e <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006610:	f7fd f888 	bl	8003724 <HAL_GetTick>
 8006614:	1bc0      	subs	r0, r0, r7
 8006616:	2802      	cmp	r0, #2
 8006618:	d9f6      	bls.n	8006608 <HAL_RCC_OscConfig+0x3a4>
            return HAL_TIMEOUT;
 800661a:	2003      	movs	r0, #3
}
 800661c:	b002      	add	sp, #8
 800661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006622:	4a4d      	ldr	r2, [pc, #308]	; (8006758 <HAL_RCC_OscConfig+0x4f4>)
 8006624:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800662c:	f7fd f87a 	bl	8003724 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006630:	4f49      	ldr	r7, [pc, #292]	; (8006758 <HAL_RCC_OscConfig+0x4f4>)
      tickstart = HAL_GetTick();
 8006632:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006634:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006638:	e004      	b.n	8006644 <HAL_RCC_OscConfig+0x3e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800663a:	f7fd f873 	bl	8003724 <HAL_GetTick>
 800663e:	1b80      	subs	r0, r0, r6
 8006640:	4540      	cmp	r0, r8
 8006642:	d8ea      	bhi.n	800661a <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006646:	079a      	lsls	r2, r3, #30
 8006648:	d5f7      	bpl.n	800663a <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 800664a:	2d00      	cmp	r5, #0
 800664c:	f43f aecc 	beq.w	80063e8 <HAL_RCC_OscConfig+0x184>
 8006650:	e044      	b.n	80066dc <HAL_RCC_OscConfig+0x478>
        __HAL_RCC_HSI_DISABLE();
 8006652:	4a42      	ldr	r2, [pc, #264]	; (800675c <HAL_RCC_OscConfig+0x4f8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006654:	4e40      	ldr	r6, [pc, #256]	; (8006758 <HAL_RCC_OscConfig+0x4f4>)
        __HAL_RCC_HSI_DISABLE();
 8006656:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006658:	f7fd f864 	bl	8003724 <HAL_GetTick>
 800665c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800665e:	e004      	b.n	800666a <HAL_RCC_OscConfig+0x406>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006660:	f7fd f860 	bl	8003724 <HAL_GetTick>
 8006664:	1b40      	subs	r0, r0, r5
 8006666:	2802      	cmp	r0, #2
 8006668:	d8d7      	bhi.n	800661a <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800666a:	6833      	ldr	r3, [r6, #0]
 800666c:	0799      	lsls	r1, r3, #30
 800666e:	d4f7      	bmi.n	8006660 <HAL_RCC_OscConfig+0x3fc>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	e66f      	b.n	8006354 <HAL_RCC_OscConfig+0xf0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006674:	2801      	cmp	r0, #1
 8006676:	f43f af1c 	beq.w	80064b2 <HAL_RCC_OscConfig+0x24e>
        pll_config = RCC->PLLCFGR;
 800667a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800667c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006682:	4291      	cmp	r1, r2
 8006684:	f47f af41 	bne.w	800650a <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006688:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800668a:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668e:	4291      	cmp	r1, r2
 8006690:	f47f af3b 	bne.w	800650a <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006694:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006696:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800669a:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800669c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80066a0:	f47f af33 	bne.w	800650a <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80066a6:	0852      	lsrs	r2, r2, #1
 80066a8:	3a01      	subs	r2, #1
 80066aa:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066ae:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80066b2:	f47f af2a 	bne.w	800650a <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80066b8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066bc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 80066c0:	bf14      	ite	ne
 80066c2:	2001      	movne	r0, #1
 80066c4:	2000      	moveq	r0, #0
 80066c6:	e6f4      	b.n	80064b2 <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c8:	4b23      	ldr	r3, [pc, #140]	; (8006758 <HAL_RCC_OscConfig+0x4f4>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80066d8:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066da:	e76e      	b.n	80065ba <HAL_RCC_OscConfig+0x356>
      __HAL_RCC_PWR_CLK_DISABLE();
 80066dc:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <HAL_RCC_OscConfig+0x4f4>)
 80066de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80066e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e4:	6413      	str	r3, [r2, #64]	; 0x40
 80066e6:	e67f      	b.n	80063e8 <HAL_RCC_OscConfig+0x184>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80066e8:	481a      	ldr	r0, [pc, #104]	; (8006754 <HAL_RCC_OscConfig+0x4f0>)
 80066ea:	f240 11db 	movw	r1, #475	; 0x1db
 80066ee:	f7fc fc27 	bl	8002f40 <assert_failed>
 80066f2:	e6a7      	b.n	8006444 <HAL_RCC_OscConfig+0x1e0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80066f4:	4817      	ldr	r0, [pc, #92]	; (8006754 <HAL_RCC_OscConfig+0x4f0>)
 80066f6:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80066fa:	f7fc fc21 	bl	8002f40 <assert_failed>
 80066fe:	e696      	b.n	800642e <HAL_RCC_OscConfig+0x1ca>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006700:	4814      	ldr	r0, [pc, #80]	; (8006754 <HAL_RCC_OscConfig+0x4f0>)
 8006702:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006706:	f7fc fc1b 	bl	8002f40 <assert_failed>
 800670a:	e68a      	b.n	8006422 <HAL_RCC_OscConfig+0x1be>
        __HAL_RCC_PLL_DISABLE();
 800670c:	4b14      	ldr	r3, [pc, #80]	; (8006760 <HAL_RCC_OscConfig+0x4fc>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006712:	f7fd f807 	bl	8003724 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006716:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8006718:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800671a:	e005      	b.n	8006728 <HAL_RCC_OscConfig+0x4c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800671c:	f7fd f802 	bl	8003724 <HAL_GetTick>
 8006720:	1b40      	subs	r0, r0, r5
 8006722:	2802      	cmp	r0, #2
 8006724:	f63f af79 	bhi.w	800661a <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	019b      	lsls	r3, r3, #6
 800672c:	d4f6      	bmi.n	800671c <HAL_RCC_OscConfig+0x4b8>
 800672e:	e6bf      	b.n	80064b0 <HAL_RCC_OscConfig+0x24c>
    return HAL_ERROR;
 8006730:	2001      	movs	r0, #1
}
 8006732:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006734:	4b08      	ldr	r3, [pc, #32]	; (8006758 <HAL_RCC_OscConfig+0x4f4>)
 8006736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006738:	f042 0204 	orr.w	r2, r2, #4
 800673c:	671a      	str	r2, [r3, #112]	; 0x70
 800673e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006740:	f042 0201 	orr.w	r2, r2, #1
 8006744:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006746:	e771      	b.n	800662c <HAL_RCC_OscConfig+0x3c8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006748:	4802      	ldr	r0, [pc, #8]	; (8006754 <HAL_RCC_OscConfig+0x4f0>)
 800674a:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800674e:	f7fc fbf7 	bl	8002f40 <assert_failed>
 8006752:	e67c      	b.n	800644e <HAL_RCC_OscConfig+0x1ea>
 8006754:	0800d108 	.word	0x0800d108
 8006758:	40023800 	.word	0x40023800
 800675c:	42470000 	.word	0x42470000
 8006760:	42470060 	.word	0x42470060

08006764 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006764:	4917      	ldr	r1, [pc, #92]	; (80067c4 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8006766:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006768:	688b      	ldr	r3, [r1, #8]
 800676a:	f003 030c 	and.w	r3, r3, #12
 800676e:	2b04      	cmp	r3, #4
 8006770:	d01b      	beq.n	80067aa <HAL_RCC_GetSysClockFreq+0x46>
 8006772:	2b08      	cmp	r3, #8
 8006774:	d117      	bne.n	80067a6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006776:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006778:	684b      	ldr	r3, [r1, #4]
 800677a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800677e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006782:	d114      	bne.n	80067ae <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006784:	6849      	ldr	r1, [r1, #4]
 8006786:	4810      	ldr	r0, [pc, #64]	; (80067c8 <HAL_RCC_GetSysClockFreq+0x64>)
 8006788:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800678c:	fba1 0100 	umull	r0, r1, r1, r0
 8006790:	f7fa fa0a 	bl	8000ba8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006794:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <HAL_RCC_GetSysClockFreq+0x60>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800679c:	3301      	adds	r3, #1
 800679e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80067a0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80067a4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80067a6:	4808      	ldr	r0, [pc, #32]	; (80067c8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80067a8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067aa:	4808      	ldr	r0, [pc, #32]	; (80067cc <HAL_RCC_GetSysClockFreq+0x68>)
}
 80067ac:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ae:	684b      	ldr	r3, [r1, #4]
 80067b0:	4806      	ldr	r0, [pc, #24]	; (80067cc <HAL_RCC_GetSysClockFreq+0x68>)
 80067b2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80067b6:	fba3 0100 	umull	r0, r1, r3, r0
 80067ba:	2300      	movs	r3, #0
 80067bc:	f7fa f9f4 	bl	8000ba8 <__aeabi_uldivmod>
 80067c0:	e7e8      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x30>
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800
 80067c8:	00f42400 	.word	0x00f42400
 80067cc:	017d7840 	.word	0x017d7840

080067d0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80067d0:	2800      	cmp	r0, #0
 80067d2:	f000 80f2 	beq.w	80069ba <HAL_RCC_ClockConfig+0x1ea>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80067d6:	6803      	ldr	r3, [r0, #0]
 80067d8:	3b01      	subs	r3, #1
 80067da:	2b0e      	cmp	r3, #14
{
 80067dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e0:	460d      	mov	r5, r1
 80067e2:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80067e4:	f200 80d0 	bhi.w	8006988 <HAL_RCC_ClockConfig+0x1b8>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80067e8:	2d07      	cmp	r5, #7
 80067ea:	f200 80c2 	bhi.w	8006972 <HAL_RCC_ClockConfig+0x1a2>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067ee:	4a74      	ldr	r2, [pc, #464]	; (80069c0 <HAL_RCC_ClockConfig+0x1f0>)
 80067f0:	6813      	ldr	r3, [r2, #0]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	42ab      	cmp	r3, r5
 80067f8:	d36a      	bcc.n	80068d0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	0798      	lsls	r0, r3, #30
 80067fe:	d52c      	bpl.n	800685a <HAL_RCC_ClockConfig+0x8a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006800:	0759      	lsls	r1, r3, #29
 8006802:	d504      	bpl.n	800680e <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006804:	496f      	ldr	r1, [pc, #444]	; (80069c4 <HAL_RCC_ClockConfig+0x1f4>)
 8006806:	688a      	ldr	r2, [r1, #8]
 8006808:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800680c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800680e:	071a      	lsls	r2, r3, #28
 8006810:	d504      	bpl.n	800681c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006812:	496c      	ldr	r1, [pc, #432]	; (80069c4 <HAL_RCC_ClockConfig+0x1f4>)
 8006814:	688a      	ldr	r2, [r1, #8]
 8006816:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800681a:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800681c:	68a1      	ldr	r1, [r4, #8]
 800681e:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8006822:	d014      	beq.n	800684e <HAL_RCC_ClockConfig+0x7e>
 8006824:	f021 0220 	bic.w	r2, r1, #32
 8006828:	2a90      	cmp	r2, #144	; 0x90
 800682a:	d010      	beq.n	800684e <HAL_RCC_ClockConfig+0x7e>
 800682c:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8006830:	2aa0      	cmp	r2, #160	; 0xa0
 8006832:	d00c      	beq.n	800684e <HAL_RCC_ClockConfig+0x7e>
 8006834:	f021 0210 	bic.w	r2, r1, #16
 8006838:	2ac0      	cmp	r2, #192	; 0xc0
 800683a:	d008      	beq.n	800684e <HAL_RCC_ClockConfig+0x7e>
 800683c:	29f0      	cmp	r1, #240	; 0xf0
 800683e:	d006      	beq.n	800684e <HAL_RCC_ClockConfig+0x7e>
 8006840:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006844:	4860      	ldr	r0, [pc, #384]	; (80069c8 <HAL_RCC_ClockConfig+0x1f8>)
 8006846:	f7fc fb7b 	bl	8002f40 <assert_failed>
 800684a:	68a1      	ldr	r1, [r4, #8]
 800684c:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800684e:	485d      	ldr	r0, [pc, #372]	; (80069c4 <HAL_RCC_ClockConfig+0x1f4>)
 8006850:	6882      	ldr	r2, [r0, #8]
 8006852:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006856:	430a      	orrs	r2, r1
 8006858:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800685a:	07df      	lsls	r7, r3, #31
 800685c:	d527      	bpl.n	80068ae <HAL_RCC_ClockConfig+0xde>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800685e:	6863      	ldr	r3, [r4, #4]
 8006860:	2b03      	cmp	r3, #3
 8006862:	f200 80a1 	bhi.w	80069a8 <HAL_RCC_ClockConfig+0x1d8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006866:	2b01      	cmp	r3, #1
 8006868:	f000 8098 	beq.w	800699c <HAL_RCC_ClockConfig+0x1cc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800686c:	1e9a      	subs	r2, r3, #2
 800686e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006870:	4a54      	ldr	r2, [pc, #336]	; (80069c4 <HAL_RCC_ClockConfig+0x1f4>)
 8006872:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006874:	f240 808e 	bls.w	8006994 <HAL_RCC_ClockConfig+0x1c4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006878:	0791      	lsls	r1, r2, #30
 800687a:	d525      	bpl.n	80068c8 <HAL_RCC_ClockConfig+0xf8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800687c:	4e51      	ldr	r6, [pc, #324]	; (80069c4 <HAL_RCC_ClockConfig+0x1f4>)
 800687e:	68b2      	ldr	r2, [r6, #8]
 8006880:	f022 0203 	bic.w	r2, r2, #3
 8006884:	4313      	orrs	r3, r2
 8006886:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006888:	f7fc ff4c 	bl	8003724 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800688c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006890:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006892:	e005      	b.n	80068a0 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006894:	f7fc ff46 	bl	8003724 <HAL_GetTick>
 8006898:	1bc0      	subs	r0, r0, r7
 800689a:	4540      	cmp	r0, r8
 800689c:	f200 808b 	bhi.w	80069b6 <HAL_RCC_ClockConfig+0x1e6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068a0:	68b3      	ldr	r3, [r6, #8]
 80068a2:	6862      	ldr	r2, [r4, #4]
 80068a4:	f003 030c 	and.w	r3, r3, #12
 80068a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80068ac:	d1f2      	bne.n	8006894 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068ae:	4a44      	ldr	r2, [pc, #272]	; (80069c0 <HAL_RCC_ClockConfig+0x1f0>)
 80068b0:	6813      	ldr	r3, [r2, #0]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	42ab      	cmp	r3, r5
 80068b8:	d915      	bls.n	80068e6 <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ba:	b2eb      	uxtb	r3, r5
 80068bc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068be:	6813      	ldr	r3, [r2, #0]
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	42ab      	cmp	r3, r5
 80068c6:	d00e      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068d0:	b2eb      	uxtb	r3, r5
 80068d2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d4:	6813      	ldr	r3, [r2, #0]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	42ab      	cmp	r3, r5
 80068dc:	d1f4      	bne.n	80068c8 <HAL_RCC_ClockConfig+0xf8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	0798      	lsls	r0, r3, #30
 80068e2:	d48d      	bmi.n	8006800 <HAL_RCC_ClockConfig+0x30>
 80068e4:	e7b9      	b.n	800685a <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	075a      	lsls	r2, r3, #29
 80068ea:	d518      	bpl.n	800691e <HAL_RCC_ClockConfig+0x14e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80068ec:	68e1      	ldr	r1, [r4, #12]
 80068ee:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 80068f2:	d00e      	beq.n	8006912 <HAL_RCC_ClockConfig+0x142>
 80068f4:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 80068f8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80068fc:	d009      	beq.n	8006912 <HAL_RCC_ClockConfig+0x142>
 80068fe:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 8006902:	d006      	beq.n	8006912 <HAL_RCC_ClockConfig+0x142>
 8006904:	f240 21c5 	movw	r1, #709	; 0x2c5
 8006908:	482f      	ldr	r0, [pc, #188]	; (80069c8 <HAL_RCC_ClockConfig+0x1f8>)
 800690a:	f7fc fb19 	bl	8002f40 <assert_failed>
 800690e:	68e1      	ldr	r1, [r4, #12]
 8006910:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006912:	482c      	ldr	r0, [pc, #176]	; (80069c4 <HAL_RCC_ClockConfig+0x1f4>)
 8006914:	6882      	ldr	r2, [r0, #8]
 8006916:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800691a:	430a      	orrs	r2, r1
 800691c:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800691e:	071b      	lsls	r3, r3, #28
 8006920:	d518      	bpl.n	8006954 <HAL_RCC_ClockConfig+0x184>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006922:	6922      	ldr	r2, [r4, #16]
 8006924:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 8006928:	d00d      	beq.n	8006946 <HAL_RCC_ClockConfig+0x176>
 800692a:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800692e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006932:	d008      	beq.n	8006946 <HAL_RCC_ClockConfig+0x176>
 8006934:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8006938:	d005      	beq.n	8006946 <HAL_RCC_ClockConfig+0x176>
 800693a:	4823      	ldr	r0, [pc, #140]	; (80069c8 <HAL_RCC_ClockConfig+0x1f8>)
 800693c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8006940:	f7fc fafe 	bl	8002f40 <assert_failed>
 8006944:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006946:	491f      	ldr	r1, [pc, #124]	; (80069c4 <HAL_RCC_ClockConfig+0x1f4>)
 8006948:	688b      	ldr	r3, [r1, #8]
 800694a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800694e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006952:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006954:	f7ff ff06 	bl	8006764 <HAL_RCC_GetSysClockFreq>
 8006958:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <HAL_RCC_ClockConfig+0x1f4>)
 800695a:	4c1c      	ldr	r4, [pc, #112]	; (80069cc <HAL_RCC_ClockConfig+0x1fc>)
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	491c      	ldr	r1, [pc, #112]	; (80069d0 <HAL_RCC_ClockConfig+0x200>)
 8006960:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006966:	5ca2      	ldrb	r2, [r4, r2]
 8006968:	40d0      	lsrs	r0, r2
 800696a:	6008      	str	r0, [r1, #0]
}
 800696c:	4618      	mov	r0, r3
 800696e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006972:	4815      	ldr	r0, [pc, #84]	; (80069c8 <HAL_RCC_ClockConfig+0x1f8>)
 8006974:	f240 215d 	movw	r1, #605	; 0x25d
 8006978:	f7fc fae2 	bl	8002f40 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800697c:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <HAL_RCC_ClockConfig+0x1f0>)
    __HAL_FLASH_SET_LATENCY(FLatency);
 800697e:	b2ed      	uxtb	r5, r5
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006980:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006982:	701d      	strb	r5, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	e79f      	b.n	80068c8 <HAL_RCC_ClockConfig+0xf8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006988:	480f      	ldr	r0, [pc, #60]	; (80069c8 <HAL_RCC_ClockConfig+0x1f8>)
 800698a:	f44f 7117 	mov.w	r1, #604	; 0x25c
 800698e:	f7fc fad7 	bl	8002f40 <assert_failed>
 8006992:	e729      	b.n	80067e8 <HAL_RCC_ClockConfig+0x18>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006994:	0190      	lsls	r0, r2, #6
 8006996:	f53f af71 	bmi.w	800687c <HAL_RCC_ClockConfig+0xac>
 800699a:	e795      	b.n	80068c8 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699c:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <HAL_RCC_ClockConfig+0x1f4>)
 800699e:	6812      	ldr	r2, [r2, #0]
 80069a0:	0396      	lsls	r6, r2, #14
 80069a2:	f53f af6b 	bmi.w	800687c <HAL_RCC_ClockConfig+0xac>
 80069a6:	e78f      	b.n	80068c8 <HAL_RCC_ClockConfig+0xf8>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80069a8:	4807      	ldr	r0, [pc, #28]	; (80069c8 <HAL_RCC_ClockConfig+0x1f8>)
 80069aa:	f240 2187 	movw	r1, #647	; 0x287
 80069ae:	f7fc fac7 	bl	8002f40 <assert_failed>
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	e757      	b.n	8006866 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e787      	b.n	80068ca <HAL_RCC_ClockConfig+0xfa>
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
}
 80069bc:	4618      	mov	r0, r3
 80069be:	4770      	bx	lr
 80069c0:	40023c00 	.word	0x40023c00
 80069c4:	40023800 	.word	0x40023800
 80069c8:	0800d108 	.word	0x0800d108
 80069cc:	0800cf8c 	.word	0x0800cf8c
 80069d0:	20000030 	.word	0x20000030

080069d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069d4:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80069d6:	4a05      	ldr	r2, [pc, #20]	; (80069ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80069d8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80069da:	4905      	ldr	r1, [pc, #20]	; (80069f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069dc:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80069e0:	6808      	ldr	r0, [r1, #0]
 80069e2:	5cd3      	ldrb	r3, [r2, r3]
}
 80069e4:	40d8      	lsrs	r0, r3
 80069e6:	4770      	bx	lr
 80069e8:	40023800 	.word	0x40023800
 80069ec:	0800cf9c 	.word	0x0800cf9c
 80069f0:	20000030 	.word	0x20000030

080069f4 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069f4:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80069f6:	220f      	movs	r2, #15
 80069f8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	f002 0203 	and.w	r2, r2, #3
 8006a00:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006a08:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a0a:	689a      	ldr	r2, [r3, #8]
 8006a0c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006a10:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	08db      	lsrs	r3, r3, #3
{
 8006a16:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a18:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a1c:	4c05      	ldr	r4, [pc, #20]	; (8006a34 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a1e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a20:	6823      	ldr	r3, [r4, #0]
}
 8006a22:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	600b      	str	r3, [r1, #0]
}
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40023800 	.word	0x40023800
 8006a34:	40023c00 	.word	0x40023c00

08006a38 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3c:	b082      	sub	sp, #8
 8006a3e:	4698      	mov	r8, r3
 8006a40:	4616      	mov	r6, r2
 8006a42:	460c      	mov	r4, r1
 8006a44:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a46:	f7fc fe6d 	bl	8003724 <HAL_GetTick>
 8006a4a:	44b0      	add	r8, r6
 8006a4c:	eba8 0500 	sub.w	r5, r8, r0
  tmp_tickstart = HAL_GetTick();
 8006a50:	f7fc fe68 	bl	8003724 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a54:	4b27      	ldr	r3, [pc, #156]	; (8006af4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006a5c:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8006a60:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a62:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a64:	1c73      	adds	r3, r6, #1
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	d107      	bne.n	8006a7a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 8006a6a:	688b      	ldr	r3, [r1, #8]
 8006a6c:	ea34 0303 	bics.w	r3, r4, r3
 8006a70:	d0fb      	beq.n	8006a6a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 8006a72:	2000      	movs	r0, #0
}
 8006a74:	b002      	add	sp, #8
 8006a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a7a:	688b      	ldr	r3, [r1, #8]
 8006a7c:	ea34 0303 	bics.w	r3, r4, r3
 8006a80:	d1f7      	bne.n	8006a72 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a82:	f7fc fe4f 	bl	8003724 <HAL_GetTick>
 8006a86:	eba0 0308 	sub.w	r3, r0, r8
 8006a8a:	42ab      	cmp	r3, r5
 8006a8c:	d208      	bcs.n	8006aa0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if(count == 0U)
 8006a8e:	9a01      	ldr	r2, [sp, #4]
      count--;
 8006a90:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8006a92:	2a00      	cmp	r2, #0
      count--;
 8006a94:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8006a98:	bf08      	it	eq
 8006a9a:	2500      	moveq	r5, #0
      count--;
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	e7e1      	b.n	8006a64 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa0:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aa4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aa6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aaa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006aae:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ab0:	d014      	beq.n	8006adc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006ab8:	d007      	beq.n	8006aca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8006aba:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8006abc:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8006abe:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006ac2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8006ac6:	2003      	movs	r0, #3
 8006ac8:	e7d4      	b.n	8006a74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	e7ee      	b.n	8006aba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006ae2:	d002      	beq.n	8006aea <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ae4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006ae8:	d1e3      	bne.n	8006ab2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	e7de      	b.n	8006ab2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
 8006af4:	20000030 	.word	0x20000030

08006af8 <HAL_SPI_MspInit>:
}
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop

08006afc <HAL_SPI_Init>:
  if (hspi == NULL)
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f000 80ec 	beq.w	8006cda <HAL_SPI_Init+0x1de>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006b02:	6803      	ldr	r3, [r0, #0]
 8006b04:	4a7d      	ldr	r2, [pc, #500]	; (8006cfc <HAL_SPI_Init+0x200>)
 8006b06:	4293      	cmp	r3, r2
{
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8006b0c:	d014      	beq.n	8006b38 <HAL_SPI_Init+0x3c>
 8006b0e:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d010      	beq.n	8006b38 <HAL_SPI_Init+0x3c>
 8006b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00c      	beq.n	8006b38 <HAL_SPI_Init+0x3c>
 8006b1e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d008      	beq.n	8006b38 <HAL_SPI_Init+0x3c>
 8006b26:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d004      	beq.n	8006b38 <HAL_SPI_Init+0x3c>
 8006b2e:	4874      	ldr	r0, [pc, #464]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006b30:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8006b34:	f7fc fa04 	bl	8002f40 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	b13b      	cbz	r3, 8006b4c <HAL_SPI_Init+0x50>
 8006b3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b40:	d004      	beq.n	8006b4c <HAL_SPI_Init+0x50>
 8006b42:	486f      	ldr	r0, [pc, #444]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006b44:	f240 1143 	movw	r1, #323	; 0x143
 8006b48:	f7fc f9fa 	bl	8002f40 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006b4c:	68a3      	ldr	r3, [r4, #8]
 8006b4e:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8006b52:	f040 809a 	bne.w	8006c8a <HAL_SPI_Init+0x18e>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006b56:	68e3      	ldr	r3, [r4, #12]
 8006b58:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8006b5c:	f040 80a3 	bne.w	8006ca6 <HAL_SPI_Init+0x1aa>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006b60:	69a3      	ldr	r3, [r4, #24]
 8006b62:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8006b66:	d003      	beq.n	8006b70 <HAL_SPI_Init+0x74>
 8006b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b6c:	f040 80aa 	bne.w	8006cc4 <HAL_SPI_Init+0x1c8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006b70:	69e3      	ldr	r3, [r4, #28]
 8006b72:	f033 0318 	bics.w	r3, r3, #24
 8006b76:	d006      	beq.n	8006b86 <HAL_SPI_Init+0x8a>
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d004      	beq.n	8006b86 <HAL_SPI_Init+0x8a>
 8006b7c:	4860      	ldr	r0, [pc, #384]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006b7e:	f240 1147 	movw	r1, #327	; 0x147
 8006b82:	f7fc f9dd 	bl	8002f40 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8006b86:	6a23      	ldr	r3, [r4, #32]
 8006b88:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8006b8c:	d004      	beq.n	8006b98 <HAL_SPI_Init+0x9c>
 8006b8e:	485c      	ldr	r0, [pc, #368]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006b90:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006b94:	f7fc f9d4 	bl	8002f40 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d15c      	bne.n	8006c58 <HAL_SPI_Init+0x15c>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	f033 0302 	bics.w	r3, r3, #2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_SPI_Init+0xb4>
 8006ba6:	4856      	ldr	r0, [pc, #344]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006ba8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006bac:	f7fc f9c8 	bl	8002f40 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006bb0:	6963      	ldr	r3, [r4, #20]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d904      	bls.n	8006bc0 <HAL_SPI_Init+0xc4>
 8006bb6:	4852      	ldr	r0, [pc, #328]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006bb8:	f240 114d 	movw	r1, #333	; 0x14d
 8006bbc:	f7fc f9c0 	bl	8002f40 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc0:	6863      	ldr	r3, [r4, #4]
 8006bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bc6:	f000 808a 	beq.w	8006cde <HAL_SPI_Init+0x1e2>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bce:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd2:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bd4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bda:	2a00      	cmp	r2, #0
 8006bdc:	d069      	beq.n	8006cb2 <HAL_SPI_Init+0x1b6>
 8006bde:	4619      	mov	r1, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006be0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8006be4:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8006be8:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8006bec:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006bf0:	432b      	orrs	r3, r5
 8006bf2:	f400 6500 	and.w	r5, r0, #2048	; 0x800
 8006bf6:	6960      	ldr	r0, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 8006bf8:	6826      	ldr	r6, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bfa:	432b      	orrs	r3, r5
 8006bfc:	f002 0502 	and.w	r5, r2, #2
 8006c00:	69a2      	ldr	r2, [r4, #24]
 8006c02:	432b      	orrs	r3, r5
 8006c04:	f000 0001 	and.w	r0, r0, #1
 8006c08:	69e5      	ldr	r5, [r4, #28]
 8006c0a:	4303      	orrs	r3, r0
 8006c0c:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8006c10:	4303      	orrs	r3, r0
 8006c12:	f005 0538 	and.w	r5, r5, #56	; 0x38
 8006c16:	6a20      	ldr	r0, [r4, #32]
 8006c18:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8006c1a:	2502      	movs	r5, #2
 8006c1c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c20:	f000 0080 	and.w	r0, r0, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c24:	6a65      	ldr	r5, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c26:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c28:	0c12      	lsrs	r2, r2, #16
  __HAL_SPI_DISABLE(hspi);
 8006c2a:	6830      	ldr	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c2c:	f005 0510 	and.w	r5, r5, #16
 8006c30:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c34:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c36:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8006c38:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8006c3c:	6030      	str	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c3e:	6033      	str	r3, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c40:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c42:	69f3      	ldr	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c44:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8006c4a:	2101      	movs	r1, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c4c:	61f3      	str	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c4e:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c50:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  return HAL_OK;
 8006c54:	4610      	mov	r0, r2
}
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d007      	beq.n	8006c6c <HAL_SPI_Init+0x170>
 8006c5c:	4828      	ldr	r0, [pc, #160]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006c5e:	f240 1149 	movw	r1, #329	; 0x149
 8006c62:	f7fc f96d 	bl	8002f40 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d098      	beq.n	8006b9e <HAL_SPI_Init+0xa2>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006c6c:	69e3      	ldr	r3, [r4, #28]
 8006c6e:	f033 0318 	bics.w	r3, r3, #24
 8006c72:	d006      	beq.n	8006c82 <HAL_SPI_Init+0x186>
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	d004      	beq.n	8006c82 <HAL_SPI_Init+0x186>
 8006c78:	4821      	ldr	r0, [pc, #132]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006c7a:	f240 115b 	movw	r1, #347	; 0x15b
 8006c7e:	f7fc f95f 	bl	8002f40 <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c82:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c84:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8006c88:	e7a1      	b.n	8006bce <HAL_SPI_Init+0xd2>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c8e:	f43f af62 	beq.w	8006b56 <HAL_SPI_Init+0x5a>
 8006c92:	481b      	ldr	r0, [pc, #108]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006c94:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006c98:	f7fc f952 	bl	8002f40 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006c9c:	68e3      	ldr	r3, [r4, #12]
 8006c9e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8006ca2:	f43f af5d 	beq.w	8006b60 <HAL_SPI_Init+0x64>
 8006ca6:	4816      	ldr	r0, [pc, #88]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006ca8:	f240 1145 	movw	r1, #325	; 0x145
 8006cac:	f7fc f948 	bl	8002f40 <assert_failed>
 8006cb0:	e756      	b.n	8006b60 <HAL_SPI_Init+0x64>
    hspi->Lock = HAL_UNLOCKED;
 8006cb2:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7ff ff1e 	bl	8006af8 <HAL_SPI_MspInit>
 8006cbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cbe:	f403 5100 	and.w	r1, r3, #8192	; 0x2000
 8006cc2:	e78d      	b.n	8006be0 <HAL_SPI_Init+0xe4>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006cc4:	480e      	ldr	r0, [pc, #56]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006cc6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006cca:	f7fc f939 	bl	8002f40 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006cce:	69e3      	ldr	r3, [r4, #28]
 8006cd0:	f033 0318 	bics.w	r3, r3, #24
 8006cd4:	f43f af57 	beq.w	8006b86 <HAL_SPI_Init+0x8a>
 8006cd8:	e74e      	b.n	8006b78 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8006cda:	2001      	movs	r0, #1
}
 8006cdc:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006cde:	69e3      	ldr	r3, [r4, #28]
 8006ce0:	f033 0318 	bics.w	r3, r3, #24
 8006ce4:	f43f af73 	beq.w	8006bce <HAL_SPI_Init+0xd2>
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	f43f af70 	beq.w	8006bce <HAL_SPI_Init+0xd2>
 8006cee:	4804      	ldr	r0, [pc, #16]	; (8006d00 <HAL_SPI_Init+0x204>)
 8006cf0:	f240 1151 	movw	r1, #337	; 0x151
 8006cf4:	f7fc f924 	bl	8002f40 <assert_failed>
 8006cf8:	e769      	b.n	8006bce <HAL_SPI_Init+0xd2>
 8006cfa:	bf00      	nop
 8006cfc:	40013000 	.word	0x40013000
 8006d00:	0800d140 	.word	0x0800d140

08006d04 <HAL_SPI_TransmitReceive>:
{
 8006d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d08:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006d0a:	6880      	ldr	r0, [r0, #8]
{
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	4688      	mov	r8, r1
 8006d10:	4691      	mov	r9, r2
 8006d12:	461f      	mov	r7, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006d14:	2800      	cmp	r0, #0
 8006d16:	f040 80a8 	bne.w	8006e6a <HAL_SPI_TransmitReceive+0x166>
  __HAL_LOCK(hspi);
 8006d1a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8006d1e:	2801      	cmp	r0, #1
 8006d20:	f000 80ad 	beq.w	8006e7e <HAL_SPI_TransmitReceive+0x17a>
 8006d24:	2301      	movs	r3, #1
 8006d26:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006d2a:	f7fc fcfb 	bl	8003724 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006d2e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8006d32:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d34:	2e01      	cmp	r6, #1
  tickstart = HAL_GetTick();
 8006d36:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8006d38:	b2f2      	uxtb	r2, r6
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d3a:	d011      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x5c>
 8006d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d40:	d009      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 8006d42:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006d44:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8006d46:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8006d48:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d4c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006d50:	b003      	add	sp, #12
 8006d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d56:	68a1      	ldr	r1, [r4, #8]
 8006d58:	2900      	cmp	r1, #0
 8006d5a:	d1f2      	bne.n	8006d42 <HAL_SPI_TransmitReceive+0x3e>
 8006d5c:	2a04      	cmp	r2, #4
 8006d5e:	d1f0      	bne.n	8006d42 <HAL_SPI_TransmitReceive+0x3e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d60:	f1b8 0f00 	cmp.w	r8, #0
 8006d64:	f000 808f 	beq.w	8006e86 <HAL_SPI_TransmitReceive+0x182>
 8006d68:	f1b9 0f00 	cmp.w	r9, #0
 8006d6c:	f000 808b 	beq.w	8006e86 <HAL_SPI_TransmitReceive+0x182>
 8006d70:	2f00      	cmp	r7, #0
 8006d72:	f000 8088 	beq.w	8006e86 <HAL_SPI_TransmitReceive+0x182>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d76:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d7a:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d7c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d80:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d82:	bf1c      	itt	ne
 8006d84:	2205      	movne	r2, #5
 8006d86:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8006d8e:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8006d90:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d92:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 8006d94:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8006d96:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d9a:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d9c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006da0:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006da2:	d403      	bmi.n	8006dac <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8006da4:	6802      	ldr	r2, [r0, #0]
 8006da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006daa:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dac:	68e2      	ldr	r2, [r4, #12]
 8006dae:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006db2:	f000 80b6 	beq.w	8006f22 <HAL_SPI_TransmitReceive+0x21e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 80a8 	beq.w	8006f0c <HAL_SPI_TransmitReceive+0x208>
 8006dbc:	2f01      	cmp	r7, #1
 8006dbe:	f000 80a5 	beq.w	8006f0c <HAL_SPI_TransmitReceive+0x208>
 8006dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc4:	3301      	adds	r3, #1
        txallowed = 1U;
 8006dc6:	f04f 0601 	mov.w	r6, #1
 8006dca:	d028      	beq.n	8006e1e <HAL_SPI_TransmitReceive+0x11a>
 8006dcc:	e05d      	b.n	8006e8a <HAL_SPI_TransmitReceive+0x186>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	6893      	ldr	r3, [r2, #8]
 8006dd2:	0798      	lsls	r0, r3, #30
 8006dd4:	d50f      	bpl.n	8006df6 <HAL_SPI_TransmitReceive+0xf2>
 8006dd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	b163      	cbz	r3, 8006df6 <HAL_SPI_TransmitReceive+0xf2>
 8006ddc:	b15e      	cbz	r6, 8006df6 <HAL_SPI_TransmitReceive+0xf2>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006dde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8006de4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8006de6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006de8:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8006dee:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8006df0:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8006df2:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8006df4:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006df6:	6893      	ldr	r3, [r2, #8]
 8006df8:	f013 0301 	ands.w	r3, r3, #1
 8006dfc:	d00d      	beq.n	8006e1a <HAL_SPI_TransmitReceive+0x116>
 8006dfe:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006e00:	b289      	uxth	r1, r1
 8006e02:	b151      	cbz	r1, 8006e1a <HAL_SPI_TransmitReceive+0x116>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e04:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e06:	68d2      	ldr	r2, [r2, #12]
 8006e08:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 8006e0a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8006e0c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006e0e:	3a01      	subs	r2, #1
 8006e10:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 8006e12:	3101      	adds	r1, #1
        txallowed = 1U;
 8006e14:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8006e16:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8006e18:	63a1      	str	r1, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e1a:	f7fc fc83 	bl	8003724 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1d3      	bne.n	8006dce <HAL_SPI_TransmitReceive+0xca>
 8006e26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1cf      	bne.n	8006dce <HAL_SPI_TransmitReceive+0xca>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e2e:	4b7e      	ldr	r3, [pc, #504]	; (8007028 <HAL_SPI_TransmitReceive+0x324>)
 8006e30:	4a7e      	ldr	r2, [pc, #504]	; (800702c <HAL_SPI_TransmitReceive+0x328>)
 8006e32:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e34:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e36:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3a:	0d5b      	lsrs	r3, r3, #21
 8006e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e40:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e44:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e48:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e4a:	d150      	bne.n	8006eee <HAL_SPI_TransmitReceive+0x1ea>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e4e:	462b      	mov	r3, r5
 8006e50:	2180      	movs	r1, #128	; 0x80
 8006e52:	4620      	mov	r0, r4
 8006e54:	f7ff fdf0 	bl	8006a38 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d04b      	beq.n	8006ef4 <HAL_SPI_TransmitReceive+0x1f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e5e:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e60:	4313      	orrs	r3, r2
 8006e62:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006e64:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e66:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8006e68:	e76c      	b.n	8006d44 <HAL_SPI_TransmitReceive+0x40>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8006e6a:	4871      	ldr	r0, [pc, #452]	; (8007030 <HAL_SPI_TransmitReceive+0x32c>)
 8006e6c:	f240 417e 	movw	r1, #1150	; 0x47e
 8006e70:	f7fc f866 	bl	8002f40 <assert_failed>
  __HAL_LOCK(hspi);
 8006e74:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8006e78:	2801      	cmp	r0, #1
 8006e7a:	f47f af53 	bne.w	8006d24 <HAL_SPI_TransmitReceive+0x20>
 8006e7e:	2002      	movs	r0, #2
}
 8006e80:	b003      	add	sp, #12
 8006e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8006e86:	2001      	movs	r0, #1
 8006e88:	e75c      	b.n	8006d44 <HAL_SPI_TransmitReceive+0x40>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	b91b      	cbnz	r3, 8006e98 <HAL_SPI_TransmitReceive+0x194>
 8006e90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0ca      	beq.n	8006e2e <HAL_SPI_TransmitReceive+0x12a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e98:	6822      	ldr	r2, [r4, #0]
 8006e9a:	6893      	ldr	r3, [r2, #8]
 8006e9c:	0799      	lsls	r1, r3, #30
 8006e9e:	d50f      	bpl.n	8006ec0 <HAL_SPI_TransmitReceive+0x1bc>
 8006ea0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	b163      	cbz	r3, 8006ec0 <HAL_SPI_TransmitReceive+0x1bc>
 8006ea6:	b15e      	cbz	r6, 8006ec0 <HAL_SPI_TransmitReceive+0x1bc>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ea8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8006eae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8006eb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006eb2:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8006eb8:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8006eba:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8006ebc:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8006ebe:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ec0:	6893      	ldr	r3, [r2, #8]
 8006ec2:	f013 0301 	ands.w	r3, r3, #1
 8006ec6:	d003      	beq.n	8006ed0 <HAL_SPI_TransmitReceive+0x1cc>
 8006ec8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006eca:	b289      	uxth	r1, r1
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	d167      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x29c>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ed0:	f7fc fc28 	bl	8003724 <HAL_GetTick>
 8006ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed6:	1b40      	subs	r0, r0, r5
 8006ed8:	4298      	cmp	r0, r3
 8006eda:	d3d6      	bcc.n	8006e8a <HAL_SPI_TransmitReceive+0x186>
        errorcode = HAL_TIMEOUT;
 8006edc:	2003      	movs	r0, #3
 8006ede:	e731      	b.n	8006d44 <HAL_SPI_TransmitReceive+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8006ee0:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ee2:	6822      	ldr	r2, [r4, #0]
      count--;
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ee8:	6893      	ldr	r3, [r2, #8]
 8006eea:	061b      	lsls	r3, r3, #24
 8006eec:	d502      	bpl.n	8006ef4 <HAL_SPI_TransmitReceive+0x1f0>
      if (count == 0U)
 8006eee:	9b01      	ldr	r3, [sp, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f5      	bne.n	8006ee0 <HAL_SPI_TransmitReceive+0x1dc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ef4:	68a0      	ldr	r0, [r4, #8]
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f040 8093 	bne.w	8007022 <HAL_SPI_TransmitReceive+0x31e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	9000      	str	r0, [sp, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	9200      	str	r2, [sp, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	9b00      	ldr	r3, [sp, #0]
 8006f0a:	e71b      	b.n	8006d44 <HAL_SPI_TransmitReceive+0x40>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f0c:	f898 3000 	ldrb.w	r3, [r8]
 8006f10:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8006f12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f14:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f1a:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8006f1c:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f1e:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006f20:	e74f      	b.n	8006dc2 <HAL_SPI_TransmitReceive+0xbe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d148      	bne.n	8006fb8 <HAL_SPI_TransmitReceive+0x2b4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f26:	4641      	mov	r1, r8
 8006f28:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006f2c:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8006f2e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f30:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	86e3      	strh	r3, [r4, #54]	; 0x36
 8006f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f3a:	3301      	adds	r3, #1
{
 8006f3c:	f04f 0601 	mov.w	r6, #1
 8006f40:	d025      	beq.n	8006f8e <HAL_SPI_TransmitReceive+0x28a>
 8006f42:	e03c      	b.n	8006fbe <HAL_SPI_TransmitReceive+0x2ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	6893      	ldr	r3, [r2, #8]
 8006f48:	079b      	lsls	r3, r3, #30
 8006f4a:	d50d      	bpl.n	8006f68 <HAL_SPI_TransmitReceive+0x264>
 8006f4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	b153      	cbz	r3, 8006f68 <HAL_SPI_TransmitReceive+0x264>
 8006f52:	b14e      	cbz	r6, 8006f68 <HAL_SPI_TransmitReceive+0x264>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f54:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006f56:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006f5a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8006f5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f5e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006f66:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f68:	6893      	ldr	r3, [r2, #8]
 8006f6a:	f013 0301 	ands.w	r3, r3, #1
 8006f6e:	d00c      	beq.n	8006f8a <HAL_SPI_TransmitReceive+0x286>
 8006f70:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006f72:	b289      	uxth	r1, r1
 8006f74:	b149      	cbz	r1, 8006f8a <HAL_SPI_TransmitReceive+0x286>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f78:	68d2      	ldr	r2, [r2, #12]
 8006f7a:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8006f7e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f80:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006f82:	3a01      	subs	r2, #1
 8006f84:	b292      	uxth	r2, r2
        txallowed = 1U;
 8006f86:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8006f88:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f8a:	f7fc fbcb 	bl	8003724 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f8e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1d6      	bne.n	8006f44 <HAL_SPI_TransmitReceive+0x240>
 8006f96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1d2      	bne.n	8006f44 <HAL_SPI_TransmitReceive+0x240>
 8006f9e:	e746      	b.n	8006e2e <HAL_SPI_TransmitReceive+0x12a>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006fa0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006fa2:	68d2      	ldr	r2, [r2, #12]
 8006fa4:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 8006fa6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8006fa8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006faa:	3a01      	subs	r2, #1
 8006fac:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 8006fae:	3101      	adds	r1, #1
        txallowed = 1U;
 8006fb0:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8006fb2:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8006fb4:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 1U;
 8006fb6:	e78b      	b.n	8006ed0 <HAL_SPI_TransmitReceive+0x1cc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb8:	2f01      	cmp	r7, #1
 8006fba:	d1bd      	bne.n	8006f38 <HAL_SPI_TransmitReceive+0x234>
 8006fbc:	e7b3      	b.n	8006f26 <HAL_SPI_TransmitReceive+0x222>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fbe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	b923      	cbnz	r3, 8006fce <HAL_SPI_TransmitReceive+0x2ca>
 8006fc4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f43f af30 	beq.w	8006e2e <HAL_SPI_TransmitReceive+0x12a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	6893      	ldr	r3, [r2, #8]
 8006fd2:	079f      	lsls	r7, r3, #30
 8006fd4:	d50d      	bpl.n	8006ff2 <HAL_SPI_TransmitReceive+0x2ee>
 8006fd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	b153      	cbz	r3, 8006ff2 <HAL_SPI_TransmitReceive+0x2ee>
 8006fdc:	b14e      	cbz	r6, 8006ff2 <HAL_SPI_TransmitReceive+0x2ee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fde:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006fe0:	f831 3b02 	ldrh.w	r3, [r1], #2
 8006fe4:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8006fe6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fe8:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006fea:	3b01      	subs	r3, #1
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006ff0:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ff2:	6893      	ldr	r3, [r2, #8]
 8006ff4:	f013 0301 	ands.w	r3, r3, #1
 8006ff8:	d00c      	beq.n	8007014 <HAL_SPI_TransmitReceive+0x310>
 8006ffa:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006ffc:	b289      	uxth	r1, r1
 8006ffe:	b149      	cbz	r1, 8007014 <HAL_SPI_TransmitReceive+0x310>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007000:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007002:	68d2      	ldr	r2, [r2, #12]
 8007004:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8007008:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800700a:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800700c:	3a01      	subs	r2, #1
 800700e:	b292      	uxth	r2, r2
        txallowed = 1U;
 8007010:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8007012:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007014:	f7fc fb86 	bl	8003724 <HAL_GetTick>
 8007018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800701a:	1b40      	subs	r0, r0, r5
 800701c:	4298      	cmp	r0, r3
 800701e:	d3ce      	bcc.n	8006fbe <HAL_SPI_TransmitReceive+0x2ba>
 8007020:	e75c      	b.n	8006edc <HAL_SPI_TransmitReceive+0x1d8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007022:	2000      	movs	r0, #0
 8007024:	e68e      	b.n	8006d44 <HAL_SPI_TransmitReceive+0x40>
 8007026:	bf00      	nop
 8007028:	20000030 	.word	0x20000030
 800702c:	165e9f81 	.word	0x165e9f81
 8007030:	0800d140 	.word	0x0800d140

08007034 <HAL_SPI_GetState>:
  return hspi->State;
 8007034:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop

0800703c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800703c:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800703e:	688a      	ldr	r2, [r1, #8]
{
 8007040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007044:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007046:	f023 0301 	bic.w	r3, r3, #1
 800704a:	6223      	str	r3, [r4, #32]
  tmpccer = TIMx->CCER;
 800704c:	6a25      	ldr	r5, [r4, #32]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800704e:	4822      	ldr	r0, [pc, #136]	; (80070d8 <TIM_OC1_SetConfig+0x9c>)
  tmpcr2 =  TIMx->CR2;
 8007050:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 8007054:	69a6      	ldr	r6, [r4, #24]
  tmpccmrx |= OC_Config->OCMode;
 8007056:	680b      	ldr	r3, [r1, #0]
  tmpccer &= ~TIM_CCER_CC1P;
 8007058:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800705c:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007060:	4284      	cmp	r4, r0
{
 8007062:	460f      	mov	r7, r1
  tmpccer |= OC_Config->OCPolarity;
 8007064:	ea45 0502 	orr.w	r5, r5, r2
  tmpccmrx |= OC_Config->OCMode;
 8007068:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800706c:	d007      	beq.n	800707e <TIM_OC1_SetConfig+0x42>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800706e:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8007070:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007074:	61a6      	str	r6, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8007076:	6363      	str	r3, [r4, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007078:	6225      	str	r5, [r4, #32]
}
 800707a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800707e:	68ca      	ldr	r2, [r1, #12]
 8007080:	f032 0308 	bics.w	r3, r2, #8
 8007084:	d114      	bne.n	80070b0 <TIM_OC1_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007086:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007088:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800708c:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800708e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 8007092:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007096:	d119      	bne.n	80070cc <TIM_OC1_SetConfig+0x90>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800709e:	d10e      	bne.n	80070be <TIM_OC1_SetConfig+0x82>
    tmpcr2 |= OC_Config->OCNIdleState;
 80070a0:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070a2:	f428 7840 	bic.w	r8, r8, #768	; 0x300
 80070a6:	ea48 0802 	orr.w	r8, r8, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80070aa:	ea48 0803 	orr.w	r8, r8, r3
 80070ae:	e7de      	b.n	800706e <TIM_OC1_SetConfig+0x32>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80070b0:	480a      	ldr	r0, [pc, #40]	; (80070dc <TIM_OC1_SetConfig+0xa0>)
 80070b2:	f641 2108 	movw	r1, #6664	; 0x1a08
 80070b6:	f7fb ff43 	bl	8002f40 <assert_failed>
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	e7e3      	b.n	8007086 <TIM_OC1_SetConfig+0x4a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80070be:	4807      	ldr	r0, [pc, #28]	; (80070dc <TIM_OC1_SetConfig+0xa0>)
 80070c0:	f641 2116 	movw	r1, #6678	; 0x1a16
 80070c4:	f7fb ff3c 	bl	8002f40 <assert_failed>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	e7e9      	b.n	80070a0 <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80070cc:	4803      	ldr	r0, [pc, #12]	; (80070dc <TIM_OC1_SetConfig+0xa0>)
 80070ce:	f641 2115 	movw	r1, #6677	; 0x1a15
 80070d2:	f7fb ff35 	bl	8002f40 <assert_failed>
 80070d6:	e7df      	b.n	8007098 <TIM_OC1_SetConfig+0x5c>
 80070d8:	40010000 	.word	0x40010000
 80070dc:	0800d178 	.word	0x0800d178

080070e0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070e0:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070e2:	688a      	ldr	r2, [r1, #8]
{
 80070e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e8:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ee:	6223      	str	r3, [r4, #32]
  tmpccer = TIMx->CCER;
 80070f0:	6a25      	ldr	r5, [r4, #32]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070f2:	4823      	ldr	r0, [pc, #140]	; (8007180 <TIM_OC3_SetConfig+0xa0>)
  tmpcr2 =  TIMx->CR2;
 80070f4:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 80070f8:	69e6      	ldr	r6, [r4, #28]
  tmpccmrx |= OC_Config->OCMode;
 80070fa:	680b      	ldr	r3, [r1, #0]
  tmpccer &= ~TIM_CCER_CC3P;
 80070fc:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007100:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007104:	4284      	cmp	r4, r0
{
 8007106:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007108:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800710c:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007110:	d007      	beq.n	8007122 <TIM_OC3_SetConfig+0x42>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007112:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8007114:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007118:	61e6      	str	r6, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800711a:	63e3      	str	r3, [r4, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711c:	6225      	str	r5, [r4, #32]
}
 800711e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007122:	68ca      	ldr	r2, [r1, #12]
 8007124:	f032 0308 	bics.w	r3, r2, #8
 8007128:	d115      	bne.n	8007156 <TIM_OC3_SetConfig+0x76>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800712a:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 800712c:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007130:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007134:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 8007138:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800713c:	d119      	bne.n	8007172 <TIM_OC3_SetConfig+0x92>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8007144:	d10e      	bne.n	8007164 <TIM_OC3_SetConfig+0x84>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007146:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007148:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
 800714c:	ea48 1802 	orr.w	r8, r8, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007150:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
 8007154:	e7dd      	b.n	8007112 <TIM_OC3_SetConfig+0x32>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007156:	480b      	ldr	r0, [pc, #44]	; (8007184 <TIM_OC3_SetConfig+0xa4>)
 8007158:	f641 219e 	movw	r1, #6814	; 0x1a9e
 800715c:	f7fb fef0 	bl	8002f40 <assert_failed>
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	e7e2      	b.n	800712a <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007164:	4807      	ldr	r0, [pc, #28]	; (8007184 <TIM_OC3_SetConfig+0xa4>)
 8007166:	f641 21ac 	movw	r1, #6828	; 0x1aac
 800716a:	f7fb fee9 	bl	8002f40 <assert_failed>
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	e7e9      	b.n	8007146 <TIM_OC3_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007172:	4804      	ldr	r0, [pc, #16]	; (8007184 <TIM_OC3_SetConfig+0xa4>)
 8007174:	f641 21ab 	movw	r1, #6827	; 0x1aab
 8007178:	f7fb fee2 	bl	8002f40 <assert_failed>
 800717c:	e7df      	b.n	800713e <TIM_OC3_SetConfig+0x5e>
 800717e:	bf00      	nop
 8007180:	40010000 	.word	0x40010000
 8007184:	0800d178 	.word	0x0800d178

08007188 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007188:	2800      	cmp	r0, #0
 800718a:	f000 80cd 	beq.w	8007328 <HAL_TIM_Base_Init+0x1a0>
{
 800718e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007190:	4a66      	ldr	r2, [pc, #408]	; (800732c <HAL_TIM_Base_Init+0x1a4>)
 8007192:	6803      	ldr	r3, [r0, #0]
 8007194:	4293      	cmp	r3, r2
 8007196:	4604      	mov	r4, r0
 8007198:	d01f      	beq.n	80071da <HAL_TIM_Base_Init+0x52>
 800719a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800719e:	d01c      	beq.n	80071da <HAL_TIM_Base_Init+0x52>
 80071a0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d018      	beq.n	80071da <HAL_TIM_Base_Init+0x52>
 80071a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d014      	beq.n	80071da <HAL_TIM_Base_Init+0x52>
 80071b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d010      	beq.n	80071da <HAL_TIM_Base_Init+0x52>
 80071b8:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00c      	beq.n	80071da <HAL_TIM_Base_Init+0x52>
 80071c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d008      	beq.n	80071da <HAL_TIM_Base_Init+0x52>
 80071c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_TIM_Base_Init+0x52>
 80071d0:	4857      	ldr	r0, [pc, #348]	; (8007330 <HAL_TIM_Base_Init+0x1a8>)
 80071d2:	f240 1113 	movw	r1, #275	; 0x113
 80071d6:	f7fb feb3 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80071da:	68a3      	ldr	r3, [r4, #8]
 80071dc:	f033 0210 	bics.w	r2, r3, #16
 80071e0:	d00a      	beq.n	80071f8 <HAL_TIM_Base_Init+0x70>
 80071e2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80071e6:	2a20      	cmp	r2, #32
 80071e8:	d006      	beq.n	80071f8 <HAL_TIM_Base_Init+0x70>
 80071ea:	2b40      	cmp	r3, #64	; 0x40
 80071ec:	d004      	beq.n	80071f8 <HAL_TIM_Base_Init+0x70>
 80071ee:	4850      	ldr	r0, [pc, #320]	; (8007330 <HAL_TIM_Base_Init+0x1a8>)
 80071f0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80071f4:	f7fb fea4 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80071fe:	d003      	beq.n	8007208 <HAL_TIM_Base_Init+0x80>
 8007200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007204:	f040 8085 	bne.w	8007312 <HAL_TIM_Base_Init+0x18a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007208:	69a3      	ldr	r3, [r4, #24]
 800720a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800720e:	d132      	bne.n	8007276 <HAL_TIM_Base_Init+0xee>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007210:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007214:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007218:	2b00      	cmp	r3, #0
 800721a:	d037      	beq.n	800728c <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800721c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800721e:	4943      	ldr	r1, [pc, #268]	; (800732c <HAL_TIM_Base_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007220:	2302      	movs	r3, #2
 8007222:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007226:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007228:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800722a:	d05e      	beq.n	80072ea <HAL_TIM_Base_Init+0x162>
 800722c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007230:	d032      	beq.n	8007298 <HAL_TIM_Base_Init+0x110>
 8007232:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8007236:	428a      	cmp	r2, r1
 8007238:	d02e      	beq.n	8007298 <HAL_TIM_Base_Init+0x110>
 800723a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800723e:	428a      	cmp	r2, r1
 8007240:	d02a      	beq.n	8007298 <HAL_TIM_Base_Init+0x110>
 8007242:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007246:	428a      	cmp	r2, r1
 8007248:	d026      	beq.n	8007298 <HAL_TIM_Base_Init+0x110>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800724a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800724e:	428a      	cmp	r2, r1
 8007250:	d026      	beq.n	80072a0 <HAL_TIM_Base_Init+0x118>
 8007252:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007256:	428a      	cmp	r2, r1
 8007258:	d022      	beq.n	80072a0 <HAL_TIM_Base_Init+0x118>
 800725a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800725e:	428a      	cmp	r2, r1
 8007260:	d01e      	beq.n	80072a0 <HAL_TIM_Base_Init+0x118>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007262:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007264:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8007266:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800726c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800726e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007270:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007272:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007274:	e021      	b.n	80072ba <HAL_TIM_Base_Init+0x132>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007276:	482e      	ldr	r0, [pc, #184]	; (8007330 <HAL_TIM_Base_Init+0x1a8>)
 8007278:	f44f 718b 	mov.w	r1, #278	; 0x116
 800727c:	f7fb fe60 	bl	8002f40 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007280:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007284:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1c7      	bne.n	800721c <HAL_TIM_Base_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 800728c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007290:	4620      	mov	r0, r4
 8007292:	f7fc f839 	bl	8003308 <HAL_TIM_Base_MspInit>
 8007296:	e7c1      	b.n	800721c <HAL_TIM_Base_Init+0x94>
    tmpcr1 |= Structure->CounterMode;
 8007298:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800729a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800729e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072a0:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072a2:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a4:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80072a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072aa:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b0:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80072b2:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80072b4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072b6:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80072b8:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80072ba:	2301      	movs	r3, #1
 80072bc:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072be:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80072c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80072ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80072ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80072de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80072e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80072e6:	2000      	movs	r0, #0
}
 80072e8:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80072ea:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ec:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072ee:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80072f4:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80072f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072fa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007300:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007302:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007304:	68e3      	ldr	r3, [r4, #12]
 8007306:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007308:	6863      	ldr	r3, [r4, #4]
 800730a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800730c:	6963      	ldr	r3, [r4, #20]
 800730e:	6313      	str	r3, [r2, #48]	; 0x30
 8007310:	e7d3      	b.n	80072ba <HAL_TIM_Base_Init+0x132>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007312:	4807      	ldr	r0, [pc, #28]	; (8007330 <HAL_TIM_Base_Init+0x1a8>)
 8007314:	f240 1115 	movw	r1, #277	; 0x115
 8007318:	f7fb fe12 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800731c:	69a3      	ldr	r3, [r4, #24]
 800731e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007322:	f43f af75 	beq.w	8007210 <HAL_TIM_Base_Init+0x88>
 8007326:	e7a6      	b.n	8007276 <HAL_TIM_Base_Init+0xee>
    return HAL_ERROR;
 8007328:	2001      	movs	r0, #1
}
 800732a:	4770      	bx	lr
 800732c:	40010000 	.word	0x40010000
 8007330:	0800d178 	.word	0x0800d178

08007334 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007334:	4a2a      	ldr	r2, [pc, #168]	; (80073e0 <HAL_TIM_Base_Start_IT+0xac>)
 8007336:	6803      	ldr	r3, [r0, #0]
 8007338:	4293      	cmp	r3, r2
{
 800733a:	b510      	push	{r4, lr}
 800733c:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800733e:	d01f      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x4c>
 8007340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007344:	d01c      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x4c>
 8007346:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800734a:	4293      	cmp	r3, r2
 800734c:	d018      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x4c>
 800734e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007352:	4293      	cmp	r3, r2
 8007354:	d014      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x4c>
 8007356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800735a:	4293      	cmp	r3, r2
 800735c:	d010      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x4c>
 800735e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007362:	4293      	cmp	r3, r2
 8007364:	d00c      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x4c>
 8007366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800736a:	4293      	cmp	r3, r2
 800736c:	d008      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x4c>
 800736e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007372:	4293      	cmp	r3, r2
 8007374:	d004      	beq.n	8007380 <HAL_TIM_Base_Start_IT+0x4c>
 8007376:	481b      	ldr	r0, [pc, #108]	; (80073e4 <HAL_TIM_Base_Start_IT+0xb0>)
 8007378:	f240 11cf 	movw	r1, #463	; 0x1cf
 800737c:	f7fb fde0 	bl	8002f40 <assert_failed>
  if (htim->State != HAL_TIM_STATE_READY)
 8007380:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8007384:	2b01      	cmp	r3, #1
 8007386:	d127      	bne.n	80073d8 <HAL_TIM_Base_Start_IT+0xa4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007388:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800738a:	4915      	ldr	r1, [pc, #84]	; (80073e0 <HAL_TIM_Base_Start_IT+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 800738c:	2202      	movs	r2, #2
 800738e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007392:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007394:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739c:	d011      	beq.n	80073c2 <HAL_TIM_Base_Start_IT+0x8e>
 800739e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a2:	d00e      	beq.n	80073c2 <HAL_TIM_Base_Start_IT+0x8e>
 80073a4:	4a10      	ldr	r2, [pc, #64]	; (80073e8 <HAL_TIM_Base_Start_IT+0xb4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00b      	beq.n	80073c2 <HAL_TIM_Base_Start_IT+0x8e>
 80073aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d007      	beq.n	80073c2 <HAL_TIM_Base_Start_IT+0x8e>
 80073b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d003      	beq.n	80073c2 <HAL_TIM_Base_Start_IT+0x8e>
 80073ba:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80073be:	4293      	cmp	r3, r2
 80073c0:	d104      	bne.n	80073cc <HAL_TIM_Base_Start_IT+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c8:	2a06      	cmp	r2, #6
 80073ca:	d007      	beq.n	80073dc <HAL_TIM_Base_Start_IT+0xa8>
    __HAL_TIM_ENABLE(htim);
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80073d4:	2000      	movs	r0, #0
}
 80073d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80073d8:	2001      	movs	r0, #1
}
 80073da:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80073dc:	2000      	movs	r0, #0
}
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	40010000 	.word	0x40010000
 80073e4:	0800d178 	.word	0x0800d178
 80073e8:	40000400 	.word	0x40000400

080073ec <HAL_TIM_PWM_MspInit>:
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop

080073f0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80073f0:	2800      	cmp	r0, #0
 80073f2:	f000 80cd 	beq.w	8007590 <HAL_TIM_PWM_Init+0x1a0>
{
 80073f6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80073f8:	4a66      	ldr	r2, [pc, #408]	; (8007594 <HAL_TIM_PWM_Init+0x1a4>)
 80073fa:	6803      	ldr	r3, [r0, #0]
 80073fc:	4293      	cmp	r3, r2
 80073fe:	4604      	mov	r4, r0
 8007400:	d01f      	beq.n	8007442 <HAL_TIM_PWM_Init+0x52>
 8007402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007406:	d01c      	beq.n	8007442 <HAL_TIM_PWM_Init+0x52>
 8007408:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800740c:	4293      	cmp	r3, r2
 800740e:	d018      	beq.n	8007442 <HAL_TIM_PWM_Init+0x52>
 8007410:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007414:	4293      	cmp	r3, r2
 8007416:	d014      	beq.n	8007442 <HAL_TIM_PWM_Init+0x52>
 8007418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800741c:	4293      	cmp	r3, r2
 800741e:	d010      	beq.n	8007442 <HAL_TIM_PWM_Init+0x52>
 8007420:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007424:	4293      	cmp	r3, r2
 8007426:	d00c      	beq.n	8007442 <HAL_TIM_PWM_Init+0x52>
 8007428:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800742c:	4293      	cmp	r3, r2
 800742e:	d008      	beq.n	8007442 <HAL_TIM_PWM_Init+0x52>
 8007430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007434:	4293      	cmp	r3, r2
 8007436:	d004      	beq.n	8007442 <HAL_TIM_PWM_Init+0x52>
 8007438:	4857      	ldr	r0, [pc, #348]	; (8007598 <HAL_TIM_PWM_Init+0x1a8>)
 800743a:	f240 510e 	movw	r1, #1294	; 0x50e
 800743e:	f7fb fd7f 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007442:	68a3      	ldr	r3, [r4, #8]
 8007444:	f033 0210 	bics.w	r2, r3, #16
 8007448:	d00a      	beq.n	8007460 <HAL_TIM_PWM_Init+0x70>
 800744a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800744e:	2a20      	cmp	r2, #32
 8007450:	d006      	beq.n	8007460 <HAL_TIM_PWM_Init+0x70>
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	d004      	beq.n	8007460 <HAL_TIM_PWM_Init+0x70>
 8007456:	4850      	ldr	r0, [pc, #320]	; (8007598 <HAL_TIM_PWM_Init+0x1a8>)
 8007458:	f240 510f 	movw	r1, #1295	; 0x50f
 800745c:	f7fb fd70 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8007466:	d003      	beq.n	8007470 <HAL_TIM_PWM_Init+0x80>
 8007468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746c:	f040 8085 	bne.w	800757a <HAL_TIM_PWM_Init+0x18a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007470:	69a3      	ldr	r3, [r4, #24]
 8007472:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8007476:	d132      	bne.n	80074de <HAL_TIM_PWM_Init+0xee>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007478:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800747c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007480:	2b00      	cmp	r3, #0
 8007482:	d037      	beq.n	80074f4 <HAL_TIM_PWM_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007484:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007486:	4943      	ldr	r1, [pc, #268]	; (8007594 <HAL_TIM_PWM_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007488:	2302      	movs	r3, #2
 800748a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800748e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007490:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007492:	d05e      	beq.n	8007552 <HAL_TIM_PWM_Init+0x162>
 8007494:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007498:	d032      	beq.n	8007500 <HAL_TIM_PWM_Init+0x110>
 800749a:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800749e:	428a      	cmp	r2, r1
 80074a0:	d02e      	beq.n	8007500 <HAL_TIM_PWM_Init+0x110>
 80074a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80074a6:	428a      	cmp	r2, r1
 80074a8:	d02a      	beq.n	8007500 <HAL_TIM_PWM_Init+0x110>
 80074aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80074ae:	428a      	cmp	r2, r1
 80074b0:	d026      	beq.n	8007500 <HAL_TIM_PWM_Init+0x110>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074b2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80074b6:	428a      	cmp	r2, r1
 80074b8:	d026      	beq.n	8007508 <HAL_TIM_PWM_Init+0x118>
 80074ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80074be:	428a      	cmp	r2, r1
 80074c0:	d022      	beq.n	8007508 <HAL_TIM_PWM_Init+0x118>
 80074c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80074c6:	428a      	cmp	r2, r1
 80074c8:	d01e      	beq.n	8007508 <HAL_TIM_PWM_Init+0x118>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074ca:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074cc:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80074ce:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074d4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80074d6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074d8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80074da:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074dc:	e021      	b.n	8007522 <HAL_TIM_PWM_Init+0x132>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80074de:	482e      	ldr	r0, [pc, #184]	; (8007598 <HAL_TIM_PWM_Init+0x1a8>)
 80074e0:	f240 5111 	movw	r1, #1297	; 0x511
 80074e4:	f7fb fd2c 	bl	8002f40 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80074e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80074ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1c7      	bne.n	8007484 <HAL_TIM_PWM_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 80074f4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80074f8:	4620      	mov	r0, r4
 80074fa:	f7ff ff77 	bl	80073ec <HAL_TIM_PWM_MspInit>
 80074fe:	e7c1      	b.n	8007484 <HAL_TIM_PWM_Init+0x94>
    tmpcr1 |= Structure->CounterMode;
 8007500:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007506:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007508:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800750a:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800750c:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800750e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007512:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007518:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800751a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800751c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800751e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007520:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007522:	2301      	movs	r3, #1
 8007524:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007526:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800752a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800752e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007532:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007536:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800753a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800753e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007542:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800754a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800754e:	2000      	movs	r0, #0
}
 8007550:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8007552:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007554:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007556:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800755c:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800755e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007562:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007568:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800756a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800756c:	68e3      	ldr	r3, [r4, #12]
 800756e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007570:	6863      	ldr	r3, [r4, #4]
 8007572:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007574:	6963      	ldr	r3, [r4, #20]
 8007576:	6313      	str	r3, [r2, #48]	; 0x30
 8007578:	e7d3      	b.n	8007522 <HAL_TIM_PWM_Init+0x132>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800757a:	4807      	ldr	r0, [pc, #28]	; (8007598 <HAL_TIM_PWM_Init+0x1a8>)
 800757c:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8007580:	f7fb fcde 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007584:	69a3      	ldr	r3, [r4, #24]
 8007586:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800758a:	f43f af75 	beq.w	8007478 <HAL_TIM_PWM_Init+0x88>
 800758e:	e7a6      	b.n	80074de <HAL_TIM_PWM_Init+0xee>
    return HAL_ERROR;
 8007590:	2001      	movs	r0, #1
}
 8007592:	4770      	bx	lr
 8007594:	40010000 	.word	0x40010000
 8007598:	0800d178 	.word	0x0800d178

0800759c <HAL_TIM_PWM_Start>:
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800759c:	4a79      	ldr	r2, [pc, #484]	; (8007784 <HAL_TIM_PWM_Start+0x1e8>)
 800759e:	6803      	ldr	r3, [r0, #0]
 80075a0:	4293      	cmp	r3, r2
{
 80075a2:	b570      	push	{r4, r5, r6, lr}
 80075a4:	4605      	mov	r5, r0
 80075a6:	460c      	mov	r4, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80075a8:	d067      	beq.n	800767a <HAL_TIM_PWM_Start+0xde>
 80075aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ae:	d064      	beq.n	800767a <HAL_TIM_PWM_Start+0xde>
 80075b0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d060      	beq.n	800767a <HAL_TIM_PWM_Start+0xde>
 80075b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075bc:	4293      	cmp	r3, r2
 80075be:	d05c      	beq.n	800767a <HAL_TIM_PWM_Start+0xde>
 80075c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d058      	beq.n	800767a <HAL_TIM_PWM_Start+0xde>
 80075c8:	4a6f      	ldr	r2, [pc, #444]	; (8007788 <HAL_TIM_PWM_Start+0x1ec>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d066      	beq.n	800769c <HAL_TIM_PWM_Start+0x100>
 80075ce:	4a6f      	ldr	r2, [pc, #444]	; (800778c <HAL_TIM_PWM_Start+0x1f0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d003      	beq.n	80075dc <HAL_TIM_PWM_Start+0x40>
 80075d4:	4a6e      	ldr	r2, [pc, #440]	; (8007790 <HAL_TIM_PWM_Start+0x1f4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	f040 80b5 	bne.w	8007746 <HAL_TIM_PWM_Start+0x1aa>
 80075dc:	2c00      	cmp	r4, #0
 80075de:	d05f      	beq.n	80076a0 <HAL_TIM_PWM_Start+0x104>
 80075e0:	486c      	ldr	r0, [pc, #432]	; (8007794 <HAL_TIM_PWM_Start+0x1f8>)
 80075e2:	f240 5194 	movw	r1, #1428	; 0x594
 80075e6:	f7fb fcab 	bl	8002f40 <assert_failed>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075ea:	2c04      	cmp	r4, #4
 80075ec:	f000 80b7 	beq.w	800775e <HAL_TIM_PWM_Start+0x1c2>
 80075f0:	2c08      	cmp	r4, #8
 80075f2:	f000 8083 	beq.w	80076fc <HAL_TIM_PWM_Start+0x160>
 80075f6:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d17c      	bne.n	80076f8 <HAL_TIM_PWM_Start+0x15c>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075fe:	682b      	ldr	r3, [r5, #0]
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007600:	4a60      	ldr	r2, [pc, #384]	; (8007784 <HAL_TIM_PWM_Start+0x1e8>)
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007602:	2102      	movs	r1, #2
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007604:	4293      	cmp	r3, r2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007606:	461e      	mov	r6, r3
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007608:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800760c:	d154      	bne.n	80076b8 <HAL_TIM_PWM_Start+0x11c>
  assert_param(IS_TIM_CHANNELS(Channel));
 800760e:	f034 0304 	bics.w	r3, r4, #4
 8007612:	d004      	beq.n	800761e <HAL_TIM_PWM_Start+0x82>
 8007614:	2b08      	cmp	r3, #8
 8007616:	d002      	beq.n	800761e <HAL_TIM_PWM_Start+0x82>
 8007618:	2c3c      	cmp	r4, #60	; 0x3c
 800761a:	f040 80ad 	bne.w	8007778 <HAL_TIM_PWM_Start+0x1dc>
 800761e:	682b      	ldr	r3, [r5, #0]

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007620:	6a30      	ldr	r0, [r6, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007622:	4d58      	ldr	r5, [pc, #352]	; (8007784 <HAL_TIM_PWM_Start+0x1e8>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007624:	2201      	movs	r2, #1
 8007626:	f004 041f 	and.w	r4, r4, #31
 800762a:	fa02 f404 	lsl.w	r4, r2, r4
  TIMx->CCER &= ~tmp;
 800762e:	ea20 0004 	bic.w	r0, r0, r4
 8007632:	6230      	str	r0, [r6, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007634:	6a32      	ldr	r2, [r6, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007636:	42ab      	cmp	r3, r5
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007638:	ea44 0402 	orr.w	r4, r4, r2
 800763c:	6234      	str	r4, [r6, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800763e:	d076      	beq.n	800772e <HAL_TIM_PWM_Start+0x192>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007644:	d00e      	beq.n	8007664 <HAL_TIM_PWM_Start+0xc8>
 8007646:	4a54      	ldr	r2, [pc, #336]	; (8007798 <HAL_TIM_PWM_Start+0x1fc>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00b      	beq.n	8007664 <HAL_TIM_PWM_Start+0xc8>
 800764c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007650:	4293      	cmp	r3, r2
 8007652:	d007      	beq.n	8007664 <HAL_TIM_PWM_Start+0xc8>
 8007654:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007658:	4293      	cmp	r3, r2
 800765a:	d003      	beq.n	8007664 <HAL_TIM_PWM_Start+0xc8>
 800765c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8007660:	4293      	cmp	r3, r2
 8007662:	d104      	bne.n	800766e <HAL_TIM_PWM_Start+0xd2>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766a:	2a06      	cmp	r2, #6
 800766c:	d069      	beq.n	8007742 <HAL_TIM_PWM_Start+0x1a6>
    __HAL_TIM_ENABLE(htim);
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	f042 0201 	orr.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007676:	2000      	movs	r0, #0
}
 8007678:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800767a:	b18c      	cbz	r4, 80076a0 <HAL_TIM_PWM_Start+0x104>
 800767c:	2c04      	cmp	r4, #4
 800767e:	d06e      	beq.n	800775e <HAL_TIM_PWM_Start+0x1c2>
 8007680:	2c08      	cmp	r4, #8
 8007682:	d03b      	beq.n	80076fc <HAL_TIM_PWM_Start+0x160>
 8007684:	2c0c      	cmp	r4, #12
 8007686:	d0b6      	beq.n	80075f6 <HAL_TIM_PWM_Start+0x5a>
 8007688:	4a3f      	ldr	r2, [pc, #252]	; (8007788 <HAL_TIM_PWM_Start+0x1ec>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d0a8      	beq.n	80075e0 <HAL_TIM_PWM_Start+0x44>
 800768e:	4a3f      	ldr	r2, [pc, #252]	; (800778c <HAL_TIM_PWM_Start+0x1f0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d0a5      	beq.n	80075e0 <HAL_TIM_PWM_Start+0x44>
 8007694:	4a3e      	ldr	r2, [pc, #248]	; (8007790 <HAL_TIM_PWM_Start+0x1f4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d0a0      	beq.n	80075dc <HAL_TIM_PWM_Start+0x40>
 800769a:	e7a1      	b.n	80075e0 <HAL_TIM_PWM_Start+0x44>
 800769c:	2900      	cmp	r1, #0
 800769e:	d15b      	bne.n	8007758 <HAL_TIM_PWM_Start+0x1bc>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076a0:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d127      	bne.n	80076f8 <HAL_TIM_PWM_Start+0x15c>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076a8:	682b      	ldr	r3, [r5, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80076aa:	4a36      	ldr	r2, [pc, #216]	; (8007784 <HAL_TIM_PWM_Start+0x1e8>)
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ac:	2102      	movs	r1, #2
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80076ae:	4293      	cmp	r3, r2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076b0:	461e      	mov	r6, r3
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b2:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80076b6:	d0b3      	beq.n	8007620 <HAL_TIM_PWM_Start+0x84>
 80076b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076bc:	d0a7      	beq.n	800760e <HAL_TIM_PWM_Start+0x72>
 80076be:	4a36      	ldr	r2, [pc, #216]	; (8007798 <HAL_TIM_PWM_Start+0x1fc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d0a4      	beq.n	800760e <HAL_TIM_PWM_Start+0x72>
 80076c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d0a0      	beq.n	800760e <HAL_TIM_PWM_Start+0x72>
 80076cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d09c      	beq.n	800760e <HAL_TIM_PWM_Start+0x72>
 80076d4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80076d8:	4293      	cmp	r3, r2
 80076da:	d098      	beq.n	800760e <HAL_TIM_PWM_Start+0x72>
 80076dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d094      	beq.n	800760e <HAL_TIM_PWM_Start+0x72>
 80076e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d090      	beq.n	800760e <HAL_TIM_PWM_Start+0x72>
 80076ec:	4829      	ldr	r0, [pc, #164]	; (8007794 <HAL_TIM_PWM_Start+0x1f8>)
 80076ee:	f641 41d2 	movw	r1, #7378	; 0x1cd2
 80076f2:	f7fb fc25 	bl	8002f40 <assert_failed>
 80076f6:	e78a      	b.n	800760e <HAL_TIM_PWM_Start+0x72>
    return HAL_ERROR;
 80076f8:	2001      	movs	r0, #1
}
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076fc:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8007700:	2b01      	cmp	r3, #1
 8007702:	d1f9      	bne.n	80076f8 <HAL_TIM_PWM_Start+0x15c>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007704:	682b      	ldr	r3, [r5, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007706:	4a1f      	ldr	r2, [pc, #124]	; (8007784 <HAL_TIM_PWM_Start+0x1e8>)
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007708:	2102      	movs	r1, #2
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800770a:	4293      	cmp	r3, r2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800770c:	461e      	mov	r6, r3
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800770e:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007712:	d1d1      	bne.n	80076b8 <HAL_TIM_PWM_Start+0x11c>
  TIMx->CCER &= ~tmp;
 8007714:	4a1b      	ldr	r2, [pc, #108]	; (8007784 <HAL_TIM_PWM_Start+0x1e8>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007716:	2301      	movs	r3, #1
  TIMx->CCER &= ~tmp;
 8007718:	6a10      	ldr	r0, [r2, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800771a:	f004 041f 	and.w	r4, r4, #31
 800771e:	fa03 f404 	lsl.w	r4, r3, r4
  TIMx->CCER &= ~tmp;
 8007722:	ea20 0004 	bic.w	r0, r0, r4
 8007726:	6210      	str	r0, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007728:	6a13      	ldr	r3, [r2, #32]
 800772a:	431c      	orrs	r4, r3
 800772c:	6214      	str	r4, [r2, #32]
    __HAL_TIM_MOE_ENABLE(htim);
 800772e:	4b15      	ldr	r3, [pc, #84]	; (8007784 <HAL_TIM_PWM_Start+0x1e8>)
 8007730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007736:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800773e:	2a06      	cmp	r2, #6
 8007740:	d195      	bne.n	800766e <HAL_TIM_PWM_Start+0xd2>
  return HAL_OK;
 8007742:	2000      	movs	r0, #0
}
 8007744:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007746:	4813      	ldr	r0, [pc, #76]	; (8007794 <HAL_TIM_PWM_Start+0x1f8>)
 8007748:	f240 5194 	movw	r1, #1428	; 0x594
 800774c:	f7fb fbf8 	bl	8002f40 <assert_failed>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007750:	2c00      	cmp	r4, #0
 8007752:	f47f af4a 	bne.w	80075ea <HAL_TIM_PWM_Start+0x4e>
 8007756:	e7a3      	b.n	80076a0 <HAL_TIM_PWM_Start+0x104>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007758:	2904      	cmp	r1, #4
 800775a:	f47f af41 	bne.w	80075e0 <HAL_TIM_PWM_Start+0x44>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800775e:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
 8007762:	2b01      	cmp	r3, #1
 8007764:	d1c8      	bne.n	80076f8 <HAL_TIM_PWM_Start+0x15c>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007766:	682b      	ldr	r3, [r5, #0]
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007768:	4a06      	ldr	r2, [pc, #24]	; (8007784 <HAL_TIM_PWM_Start+0x1e8>)
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800776a:	2102      	movs	r1, #2
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800776c:	4293      	cmp	r3, r2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800776e:	461e      	mov	r6, r3
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007770:	f885 103f 	strb.w	r1, [r5, #63]	; 0x3f
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007774:	d1a0      	bne.n	80076b8 <HAL_TIM_PWM_Start+0x11c>
 8007776:	e7cd      	b.n	8007714 <HAL_TIM_PWM_Start+0x178>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007778:	4806      	ldr	r0, [pc, #24]	; (8007794 <HAL_TIM_PWM_Start+0x1f8>)
 800777a:	f641 41d3 	movw	r1, #7379	; 0x1cd3
 800777e:	f7fb fbdf 	bl	8002f40 <assert_failed>
 8007782:	e74c      	b.n	800761e <HAL_TIM_PWM_Start+0x82>
 8007784:	40010000 	.word	0x40010000
 8007788:	40014000 	.word	0x40014000
 800778c:	40014400 	.word	0x40014400
 8007790:	40014800 	.word	0x40014800
 8007794:	0800d178 	.word	0x0800d178
 8007798:	40000400 	.word	0x40000400

0800779c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800779c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	f000 8177 	beq.w	8007a94 <HAL_TIM_ConfigClockSource+0x2f8>
  htim->State = HAL_TIM_STATE_BUSY;
 80077a6:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80077a8:	2201      	movs	r2, #1
{
 80077aa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80077ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80077b4:	680b      	ldr	r3, [r1, #0]
 80077b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ba:	4604      	mov	r4, r0
 80077bc:	460d      	mov	r5, r1
 80077be:	f000 8124 	beq.w	8007a0a <HAL_TIM_ConfigClockSource+0x26e>
 80077c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c6:	f000 8153 	beq.w	8007a70 <HAL_TIM_ConfigClockSource+0x2d4>
 80077ca:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 80077ce:	f040 8157 	bne.w	8007a80 <HAL_TIM_ConfigClockSource+0x2e4>
  tmpsmcr = htim->Instance->SMCR;
 80077d2:	6822      	ldr	r2, [r4, #0]
 80077d4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d6:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 80077da:	f021 0177 	bic.w	r1, r1, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 80077de:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80077e0:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80077e2:	f000 81a1 	beq.w	8007b28 <HAL_TIM_ConfigClockSource+0x38c>
 80077e6:	d87e      	bhi.n	80078e6 <HAL_TIM_ConfigClockSource+0x14a>
 80077e8:	2b40      	cmp	r3, #64	; 0x40
 80077ea:	f000 8159 	beq.w	8007aa0 <HAL_TIM_ConfigClockSource+0x304>
 80077ee:	d94c      	bls.n	800788a <HAL_TIM_ConfigClockSource+0xee>
 80077f0:	2b50      	cmp	r3, #80	; 0x50
 80077f2:	d143      	bne.n	800787c <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80077f4:	4ba8      	ldr	r3, [pc, #672]	; (8007a98 <HAL_TIM_ConfigClockSource+0x2fc>)
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d017      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x8e>
 80077fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80077fe:	d014      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x8e>
 8007800:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007804:	429a      	cmp	r2, r3
 8007806:	d010      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x8e>
 8007808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800780c:	429a      	cmp	r2, r3
 800780e:	d00c      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x8e>
 8007810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007814:	429a      	cmp	r2, r3
 8007816:	d008      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x8e>
 8007818:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800781c:	429a      	cmp	r2, r3
 800781e:	d004      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x8e>
 8007820:	489e      	ldr	r0, [pc, #632]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 8007822:	f241 4161 	movw	r1, #5217	; 0x1461
 8007826:	f7fb fb8b 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800782a:	686b      	ldr	r3, [r5, #4]
 800782c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007830:	d009      	beq.n	8007846 <HAL_TIM_ConfigClockSource+0xaa>
 8007832:	f033 0202 	bics.w	r2, r3, #2
 8007836:	d006      	beq.n	8007846 <HAL_TIM_ConfigClockSource+0xaa>
 8007838:	2b0a      	cmp	r3, #10
 800783a:	d004      	beq.n	8007846 <HAL_TIM_ConfigClockSource+0xaa>
 800783c:	4897      	ldr	r0, [pc, #604]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 800783e:	f241 4164 	movw	r1, #5220	; 0x1464
 8007842:	f7fb fb7d 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007846:	68ee      	ldr	r6, [r5, #12]
 8007848:	2e0f      	cmp	r6, #15
 800784a:	f200 81ce 	bhi.w	8007bea <HAL_TIM_ConfigClockSource+0x44e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8007852:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007854:	6a1d      	ldr	r5, [r3, #32]
 8007856:	f025 0501 	bic.w	r5, r5, #1
 800785a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800785c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800785e:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007862:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007866:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800786a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800786c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800786e:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007870:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007872:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007876:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800787a:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800787c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800787e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007880:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007884:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007888:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800788a:	2b20      	cmp	r3, #32
 800788c:	d002      	beq.n	8007894 <HAL_TIM_ConfigClockSource+0xf8>
 800788e:	d926      	bls.n	80078de <HAL_TIM_ConfigClockSource+0x142>
 8007890:	2b30      	cmp	r3, #48	; 0x30
 8007892:	d1f3      	bne.n	800787c <HAL_TIM_ConfigClockSource+0xe0>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007894:	4980      	ldr	r1, [pc, #512]	; (8007a98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8007896:	428a      	cmp	r2, r1
 8007898:	d019      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x132>
 800789a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800789e:	d016      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x132>
 80078a0:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80078a4:	428a      	cmp	r2, r1
 80078a6:	d012      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x132>
 80078a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80078ac:	428a      	cmp	r2, r1
 80078ae:	d00e      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x132>
 80078b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80078b4:	428a      	cmp	r2, r1
 80078b6:	d00a      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x132>
 80078b8:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80078bc:	428a      	cmp	r2, r1
 80078be:	d006      	beq.n	80078ce <HAL_TIM_ConfigClockSource+0x132>
 80078c0:	4876      	ldr	r0, [pc, #472]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 80078c2:	f241 4194 	movw	r1, #5268	; 0x1494
 80078c6:	f7fb fb3b 	bl	8002f40 <assert_failed>
 80078ca:	682b      	ldr	r3, [r5, #0]
 80078cc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80078ce:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80078d0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078d4:	430b      	orrs	r3, r1
 80078d6:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80078da:	6093      	str	r3, [r2, #8]
}
 80078dc:	e7ce      	b.n	800787c <HAL_TIM_ConfigClockSource+0xe0>
  switch (sClockSourceConfig->ClockSource)
 80078de:	f033 0110 	bics.w	r1, r3, #16
 80078e2:	d1cb      	bne.n	800787c <HAL_TIM_ConfigClockSource+0xe0>
 80078e4:	e7d6      	b.n	8007894 <HAL_TIM_ConfigClockSource+0xf8>
 80078e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ea:	f000 8095 	beq.w	8007a18 <HAL_TIM_ConfigClockSource+0x27c>
 80078ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f2:	d141      	bne.n	8007978 <HAL_TIM_ConfigClockSource+0x1dc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80078f4:	4b68      	ldr	r3, [pc, #416]	; (8007a98 <HAL_TIM_ConfigClockSource+0x2fc>)
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d013      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x186>
 80078fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80078fe:	d010      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x186>
 8007900:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007904:	429a      	cmp	r2, r3
 8007906:	d00c      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x186>
 8007908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800790c:	429a      	cmp	r2, r3
 800790e:	d008      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x186>
 8007910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007914:	429a      	cmp	r2, r3
 8007916:	d004      	beq.n	8007922 <HAL_TIM_ConfigClockSource+0x186>
 8007918:	4860      	ldr	r0, [pc, #384]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 800791a:	f241 414d 	movw	r1, #5197	; 0x144d
 800791e:	f7fb fb0f 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007922:	68ab      	ldr	r3, [r5, #8]
 8007924:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8007928:	d004      	beq.n	8007934 <HAL_TIM_ConfigClockSource+0x198>
 800792a:	485c      	ldr	r0, [pc, #368]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 800792c:	f241 4150 	movw	r1, #5200	; 0x1450
 8007930:	f7fb fb06 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007934:	686b      	ldr	r3, [r5, #4]
 8007936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800793a:	d009      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x1b4>
 800793c:	f033 0202 	bics.w	r2, r3, #2
 8007940:	d006      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x1b4>
 8007942:	2b0a      	cmp	r3, #10
 8007944:	d004      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x1b4>
 8007946:	4855      	ldr	r0, [pc, #340]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 8007948:	f241 4151 	movw	r1, #5201	; 0x1451
 800794c:	f7fb faf8 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007950:	68e8      	ldr	r0, [r5, #12]
 8007952:	280f      	cmp	r0, #15
 8007954:	f200 813b 	bhi.w	8007bce <HAL_TIM_ConfigClockSource+0x432>
      TIM_ETR_SetConfig(htim->Instance,
 8007958:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800795a:	68ab      	ldr	r3, [r5, #8]
 800795c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800795e:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007960:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 8007964:	432b      	orrs	r3, r5
 8007966:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007968:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800796c:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800796e:	6893      	ldr	r3, [r2, #8]
 8007970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007974:	6093      	str	r3, [r2, #8]
      break;
 8007976:	e781      	b.n	800787c <HAL_TIM_ConfigClockSource+0xe0>
  switch (sClockSourceConfig->ClockSource)
 8007978:	2b70      	cmp	r3, #112	; 0x70
 800797a:	f47f af7f 	bne.w	800787c <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800797e:	4b46      	ldr	r3, [pc, #280]	; (8007a98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8007980:	429a      	cmp	r2, r3
 8007982:	d017      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0x218>
 8007984:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007988:	d014      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0x218>
 800798a:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800798e:	429a      	cmp	r2, r3
 8007990:	d010      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0x218>
 8007992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007996:	429a      	cmp	r2, r3
 8007998:	d00c      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0x218>
 800799a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800799e:	429a      	cmp	r2, r3
 80079a0:	d008      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0x218>
 80079a2:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d004      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0x218>
 80079aa:	483c      	ldr	r0, [pc, #240]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 80079ac:	f241 4135 	movw	r1, #5173	; 0x1435
 80079b0:	f7fb fac6 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80079b4:	68ab      	ldr	r3, [r5, #8]
 80079b6:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80079ba:	d004      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x22a>
 80079bc:	4837      	ldr	r0, [pc, #220]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 80079be:	f241 4138 	movw	r1, #5176	; 0x1438
 80079c2:	f7fb fabd 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80079c6:	686b      	ldr	r3, [r5, #4]
 80079c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079cc:	d009      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x246>
 80079ce:	f033 0202 	bics.w	r2, r3, #2
 80079d2:	d006      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x246>
 80079d4:	2b0a      	cmp	r3, #10
 80079d6:	d004      	beq.n	80079e2 <HAL_TIM_ConfigClockSource+0x246>
 80079d8:	4830      	ldr	r0, [pc, #192]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 80079da:	f241 4139 	movw	r1, #5177	; 0x1439
 80079de:	f7fb faaf 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80079e2:	68e8      	ldr	r0, [r5, #12]
 80079e4:	280f      	cmp	r0, #15
 80079e6:	f200 80eb 	bhi.w	8007bc0 <HAL_TIM_ConfigClockSource+0x424>
      TIM_ETR_SetConfig(htim->Instance,
 80079ea:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80079ec:	68ab      	ldr	r3, [r5, #8]
 80079ee:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079f0:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079f2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 80079f6:	432b      	orrs	r3, r5
 80079f8:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079fa:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 80079fe:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8007a00:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007a06:	6093      	str	r3, [r2, #8]
      break;
 8007a08:	e738      	b.n	800787c <HAL_TIM_ConfigClockSource+0xe0>
  tmpsmcr = htim->Instance->SMCR;
 8007a0a:	6802      	ldr	r2, [r0, #0]
 8007a0c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007a16:	6093      	str	r3, [r2, #8]
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007a18:	4b1f      	ldr	r3, [pc, #124]	; (8007a98 <HAL_TIM_ConfigClockSource+0x2fc>)
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	f43f af2e 	beq.w	800787c <HAL_TIM_ConfigClockSource+0xe0>
 8007a20:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007a24:	f43f af2a 	beq.w	800787c <HAL_TIM_ConfigClockSource+0xe0>
 8007a28:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	f43f af25 	beq.w	800787c <HAL_TIM_ConfigClockSource+0xe0>
 8007a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a36:	429a      	cmp	r2, r3
 8007a38:	f43f af20 	beq.w	800787c <HAL_TIM_ConfigClockSource+0xe0>
 8007a3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a40:	429a      	cmp	r2, r3
 8007a42:	f43f af1b 	beq.w	800787c <HAL_TIM_ConfigClockSource+0xe0>
 8007a46:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	f43f af16 	beq.w	800787c <HAL_TIM_ConfigClockSource+0xe0>
 8007a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a54:	429a      	cmp	r2, r3
 8007a56:	f43f af11 	beq.w	800787c <HAL_TIM_ConfigClockSource+0xe0>
 8007a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	f43f af0c 	beq.w	800787c <HAL_TIM_ConfigClockSource+0xe0>
 8007a64:	480d      	ldr	r0, [pc, #52]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 8007a66:	f241 412e 	movw	r1, #5166	; 0x142e
 8007a6a:	f7fb fa69 	bl	8002f40 <assert_failed>
 8007a6e:	e705      	b.n	800787c <HAL_TIM_ConfigClockSource+0xe0>
  tmpsmcr = htim->Instance->SMCR;
 8007a70:	6802      	ldr	r2, [r0, #0]
 8007a72:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007a7c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007a7e:	e739      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x158>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007a80:	2a40      	cmp	r2, #64	; 0x40
 8007a82:	f43f aea6 	beq.w	80077d2 <HAL_TIM_ConfigClockSource+0x36>
 8007a86:	4805      	ldr	r0, [pc, #20]	; (8007a9c <HAL_TIM_ConfigClockSource+0x300>)
 8007a88:	f241 4122 	movw	r1, #5154	; 0x1422
 8007a8c:	f7fb fa58 	bl	8002f40 <assert_failed>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	e69e      	b.n	80077d2 <HAL_TIM_ConfigClockSource+0x36>
  __HAL_LOCK(htim);
 8007a94:	2002      	movs	r0, #2
}
 8007a96:	4770      	bx	lr
 8007a98:	40010000 	.word	0x40010000
 8007a9c:	0800d178 	.word	0x0800d178
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007aa0:	4b55      	ldr	r3, [pc, #340]	; (8007bf8 <HAL_TIM_ConfigClockSource+0x45c>)
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d017      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x33a>
 8007aa6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007aaa:	d014      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x33a>
 8007aac:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d010      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x33a>
 8007ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d00c      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x33a>
 8007abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d008      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x33a>
 8007ac4:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d004      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x33a>
 8007acc:	484b      	ldr	r0, [pc, #300]	; (8007bfc <HAL_TIM_ConfigClockSource+0x460>)
 8007ace:	f241 4181 	movw	r1, #5249	; 0x1481
 8007ad2:	f7fb fa35 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007ad6:	686b      	ldr	r3, [r5, #4]
 8007ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007adc:	d009      	beq.n	8007af2 <HAL_TIM_ConfigClockSource+0x356>
 8007ade:	f033 0202 	bics.w	r2, r3, #2
 8007ae2:	d006      	beq.n	8007af2 <HAL_TIM_ConfigClockSource+0x356>
 8007ae4:	2b0a      	cmp	r3, #10
 8007ae6:	d004      	beq.n	8007af2 <HAL_TIM_ConfigClockSource+0x356>
 8007ae8:	4844      	ldr	r0, [pc, #272]	; (8007bfc <HAL_TIM_ConfigClockSource+0x460>)
 8007aea:	f241 4184 	movw	r1, #5252	; 0x1484
 8007aee:	f7fb fa27 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007af2:	68ee      	ldr	r6, [r5, #12]
 8007af4:	2e0f      	cmp	r6, #15
 8007af6:	d871      	bhi.n	8007bdc <HAL_TIM_ConfigClockSource+0x440>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8007afc:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007afe:	6a1d      	ldr	r5, [r3, #32]
 8007b00:	f025 0501 	bic.w	r5, r5, #1
 8007b04:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b06:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b08:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b0c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b10:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8007b14:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b18:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007b1a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b20:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007b24:	609a      	str	r2, [r3, #8]
}
 8007b26:	e6a9      	b.n	800787c <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007b28:	4b33      	ldr	r3, [pc, #204]	; (8007bf8 <HAL_TIM_ConfigClockSource+0x45c>)
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d017      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x3c2>
 8007b2e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007b32:	d014      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x3c2>
 8007b34:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d010      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x3c2>
 8007b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d00c      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x3c2>
 8007b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d008      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x3c2>
 8007b4c:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d004      	beq.n	8007b5e <HAL_TIM_ConfigClockSource+0x3c2>
 8007b54:	4829      	ldr	r0, [pc, #164]	; (8007bfc <HAL_TIM_ConfigClockSource+0x460>)
 8007b56:	f241 4171 	movw	r1, #5233	; 0x1471
 8007b5a:	f7fb f9f1 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007b5e:	686b      	ldr	r3, [r5, #4]
 8007b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b64:	d009      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0x3de>
 8007b66:	f033 0202 	bics.w	r2, r3, #2
 8007b6a:	d006      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0x3de>
 8007b6c:	2b0a      	cmp	r3, #10
 8007b6e:	d004      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0x3de>
 8007b70:	4822      	ldr	r0, [pc, #136]	; (8007bfc <HAL_TIM_ConfigClockSource+0x460>)
 8007b72:	f241 4174 	movw	r1, #5236	; 0x1474
 8007b76:	f7fb f9e3 	bl	8002f40 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007b7a:	68ee      	ldr	r6, [r5, #12]
 8007b7c:	2e0f      	cmp	r6, #15
 8007b7e:	d818      	bhi.n	8007bb2 <HAL_TIM_ConfigClockSource+0x416>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b84:	6a18      	ldr	r0, [r3, #32]
 8007b86:	f020 0010 	bic.w	r0, r0, #16
 8007b8a:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b8c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8007b8e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b90:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b98:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b9c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007ba0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba2:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007ba4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ba6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007baa:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8007bae:	609a      	str	r2, [r3, #8]
}
 8007bb0:	e664      	b.n	800787c <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007bb2:	4812      	ldr	r0, [pc, #72]	; (8007bfc <HAL_TIM_ConfigClockSource+0x460>)
 8007bb4:	f241 4175 	movw	r1, #5237	; 0x1475
 8007bb8:	f7fb f9c2 	bl	8002f40 <assert_failed>
 8007bbc:	68ee      	ldr	r6, [r5, #12]
 8007bbe:	e7df      	b.n	8007b80 <HAL_TIM_ConfigClockSource+0x3e4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007bc0:	480e      	ldr	r0, [pc, #56]	; (8007bfc <HAL_TIM_ConfigClockSource+0x460>)
 8007bc2:	f241 413a 	movw	r1, #5178	; 0x143a
 8007bc6:	f7fb f9bb 	bl	8002f40 <assert_failed>
 8007bca:	68e8      	ldr	r0, [r5, #12]
 8007bcc:	e70d      	b.n	80079ea <HAL_TIM_ConfigClockSource+0x24e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007bce:	480b      	ldr	r0, [pc, #44]	; (8007bfc <HAL_TIM_ConfigClockSource+0x460>)
 8007bd0:	f241 4152 	movw	r1, #5202	; 0x1452
 8007bd4:	f7fb f9b4 	bl	8002f40 <assert_failed>
 8007bd8:	68e8      	ldr	r0, [r5, #12]
 8007bda:	e6bd      	b.n	8007958 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007bdc:	4807      	ldr	r0, [pc, #28]	; (8007bfc <HAL_TIM_ConfigClockSource+0x460>)
 8007bde:	f241 4185 	movw	r1, #5253	; 0x1485
 8007be2:	f7fb f9ad 	bl	8002f40 <assert_failed>
 8007be6:	68ee      	ldr	r6, [r5, #12]
 8007be8:	e786      	b.n	8007af8 <HAL_TIM_ConfigClockSource+0x35c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007bea:	4804      	ldr	r0, [pc, #16]	; (8007bfc <HAL_TIM_ConfigClockSource+0x460>)
 8007bec:	f241 4165 	movw	r1, #5221	; 0x1465
 8007bf0:	f7fb f9a6 	bl	8002f40 <assert_failed>
 8007bf4:	68ee      	ldr	r6, [r5, #12]
 8007bf6:	e62a      	b.n	800784e <HAL_TIM_ConfigClockSource+0xb2>
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	0800d178 	.word	0x0800d178

08007c00 <HAL_TIM_OC_DelayElapsedCallback>:
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop

08007c04 <HAL_TIM_IC_CaptureCallback>:
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop

08007c08 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop

08007c0c <HAL_TIM_TriggerCallback>:
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop

08007c10 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c10:	6803      	ldr	r3, [r0, #0]
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	0791      	lsls	r1, r2, #30
{
 8007c16:	b510      	push	{r4, lr}
 8007c18:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c1a:	d502      	bpl.n	8007c22 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	0792      	lsls	r2, r2, #30
 8007c20:	d45f      	bmi.n	8007ce2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c22:	691a      	ldr	r2, [r3, #16]
 8007c24:	0750      	lsls	r0, r2, #29
 8007c26:	d502      	bpl.n	8007c2e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	0751      	lsls	r1, r2, #29
 8007c2c:	d446      	bmi.n	8007cbc <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c2e:	691a      	ldr	r2, [r3, #16]
 8007c30:	0712      	lsls	r2, r2, #28
 8007c32:	d502      	bpl.n	8007c3a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	0710      	lsls	r0, r2, #28
 8007c38:	d42e      	bmi.n	8007c98 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c3a:	691a      	ldr	r2, [r3, #16]
 8007c3c:	06d2      	lsls	r2, r2, #27
 8007c3e:	d502      	bpl.n	8007c46 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	06d0      	lsls	r0, r2, #27
 8007c44:	d418      	bmi.n	8007c78 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c46:	691a      	ldr	r2, [r3, #16]
 8007c48:	07d1      	lsls	r1, r2, #31
 8007c4a:	d502      	bpl.n	8007c52 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	07d2      	lsls	r2, r2, #31
 8007c50:	d45d      	bmi.n	8007d0e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	0610      	lsls	r0, r2, #24
 8007c56:	d502      	bpl.n	8007c5e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c58:	68da      	ldr	r2, [r3, #12]
 8007c5a:	0611      	lsls	r1, r2, #24
 8007c5c:	d45f      	bmi.n	8007d1e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	0652      	lsls	r2, r2, #25
 8007c62:	d502      	bpl.n	8007c6a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	0650      	lsls	r0, r2, #25
 8007c68:	d461      	bmi.n	8007d2e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	0691      	lsls	r1, r2, #26
 8007c6e:	d502      	bpl.n	8007c76 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	0692      	lsls	r2, r2, #26
 8007c74:	d443      	bmi.n	8007cfe <HAL_TIM_IRQHandler+0xee>
}
 8007c76:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c78:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c7c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c7e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c80:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007c88:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c8a:	d064      	beq.n	8007d56 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8c:	f7ff ffba 	bl	8007c04 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c90:	2200      	movs	r2, #0
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	7722      	strb	r2, [r4, #28]
 8007c96:	e7d6      	b.n	8007c46 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c98:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c9c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c9e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ca0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007ca6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ca8:	d152      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007caa:	f7ff ffa9 	bl	8007c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f7ff ffaa 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	7722      	strb	r2, [r4, #28]
 8007cba:	e7be      	b.n	8007c3a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cbc:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cc0:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cc2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cc4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007ccc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cce:	d13c      	bne.n	8007d4a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd0:	f7ff ff96 	bl	8007c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f7ff ff97 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cda:	2200      	movs	r2, #0
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	7722      	strb	r2, [r4, #28]
 8007ce0:	e7a5      	b.n	8007c2e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ce2:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ce6:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ce8:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cea:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	079b      	lsls	r3, r3, #30
 8007cf0:	d025      	beq.n	8007d3e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8007cf2:	f7ff ff87 	bl	8007c04 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	7722      	strb	r2, [r4, #28]
 8007cfc:	e791      	b.n	8007c22 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cfe:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007d02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d04:	611a      	str	r2, [r3, #16]
}
 8007d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007d0a:	f000 bac9 	b.w	80082a0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d0e:	f06f 0201 	mvn.w	r2, #1
 8007d12:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d14:	4620      	mov	r0, r4
 8007d16:	f7fb fa83 	bl	8003220 <HAL_TIM_PeriodElapsedCallback>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	e799      	b.n	8007c52 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 fabd 	bl	80082a4 <HAL_TIMEx_BreakCallback>
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	e797      	b.n	8007c5e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d32:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007d34:	4620      	mov	r0, r4
 8007d36:	f7ff ff69 	bl	8007c0c <HAL_TIM_TriggerCallback>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	e795      	b.n	8007c6a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3e:	f7ff ff5f 	bl	8007c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d42:	4620      	mov	r0, r4
 8007d44:	f7ff ff60 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
 8007d48:	e7d5      	b.n	8007cf6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d4a:	f7ff ff5b 	bl	8007c04 <HAL_TIM_IC_CaptureCallback>
 8007d4e:	e7c4      	b.n	8007cda <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8007d50:	f7ff ff58 	bl	8007c04 <HAL_TIM_IC_CaptureCallback>
 8007d54:	e7ae      	b.n	8007cb4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d56:	f7ff ff53 	bl	8007c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f7ff ff54 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
 8007d60:	e796      	b.n	8007c90 <HAL_TIM_IRQHandler+0x80>
 8007d62:	bf00      	nop

08007d64 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d64:	6a03      	ldr	r3, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d66:	688a      	ldr	r2, [r1, #8]
{
 8007d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6c:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d6e:	f023 0310 	bic.w	r3, r3, #16
 8007d72:	6223      	str	r3, [r4, #32]
  tmpccer = TIMx->CCER;
 8007d74:	6a25      	ldr	r5, [r4, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d76:	4823      	ldr	r0, [pc, #140]	; (8007e04 <TIM_OC2_SetConfig+0xa0>)
  tmpcr2 =  TIMx->CR2;
 8007d78:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 8007d7c:	69a6      	ldr	r6, [r4, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d7e:	680b      	ldr	r3, [r1, #0]
  tmpccer &= ~TIM_CCER_CC2P;
 8007d80:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d84:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d88:	4284      	cmp	r4, r0
{
 8007d8a:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d8c:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d90:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d94:	d007      	beq.n	8007da6 <TIM_OC2_SetConfig+0x42>
  TIMx->CCR2 = OC_Config->Pulse;
 8007d96:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8007d98:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007d9c:	61a6      	str	r6, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007d9e:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007da0:	6225      	str	r5, [r4, #32]
}
 8007da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007da6:	68ca      	ldr	r2, [r1, #12]
 8007da8:	f032 0308 	bics.w	r3, r2, #8
 8007dac:	d115      	bne.n	8007dda <TIM_OC2_SetConfig+0x76>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007dae:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007db0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007db4:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007db8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 8007dbc:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007dc0:	d119      	bne.n	8007df6 <TIM_OC2_SetConfig+0x92>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8007dc8:	d10e      	bne.n	8007de8 <TIM_OC2_SetConfig+0x84>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dca:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dcc:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
 8007dd0:	ea48 0882 	orr.w	r8, r8, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dd4:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
 8007dd8:	e7dd      	b.n	8007d96 <TIM_OC2_SetConfig+0x32>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007dda:	480b      	ldr	r0, [pc, #44]	; (8007e08 <TIM_OC2_SetConfig+0xa4>)
 8007ddc:	f641 2153 	movw	r1, #6739	; 0x1a53
 8007de0:	f7fb f8ae 	bl	8002f40 <assert_failed>
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	e7e2      	b.n	8007dae <TIM_OC2_SetConfig+0x4a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007de8:	4807      	ldr	r0, [pc, #28]	; (8007e08 <TIM_OC2_SetConfig+0xa4>)
 8007dea:	f641 2162 	movw	r1, #6754	; 0x1a62
 8007dee:	f7fb f8a7 	bl	8002f40 <assert_failed>
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	e7e9      	b.n	8007dca <TIM_OC2_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007df6:	4804      	ldr	r0, [pc, #16]	; (8007e08 <TIM_OC2_SetConfig+0xa4>)
 8007df8:	f641 2161 	movw	r1, #6753	; 0x1a61
 8007dfc:	f7fb f8a0 	bl	8002f40 <assert_failed>
 8007e00:	e7df      	b.n	8007dc2 <TIM_OC2_SetConfig+0x5e>
 8007e02:	bf00      	nop
 8007e04:	40010000 	.word	0x40010000
 8007e08:	0800d178 	.word	0x0800d178

08007e0c <HAL_TIM_PWM_ConfigChannel>:
{
 8007e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_CHANNELS(Channel));
 8007e10:	f032 030c 	bics.w	r3, r2, #12
{
 8007e14:	4616      	mov	r6, r2
 8007e16:	4605      	mov	r5, r0
 8007e18:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8007e1a:	d002      	beq.n	8007e22 <HAL_TIM_PWM_ConfigChannel+0x16>
 8007e1c:	2a3c      	cmp	r2, #60	; 0x3c
 8007e1e:	f040 80fb 	bne.w	8008018 <HAL_TIM_PWM_ConfigChannel+0x20c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	f023 0310 	bic.w	r3, r3, #16
 8007e28:	2b60      	cmp	r3, #96	; 0x60
 8007e2a:	d004      	beq.n	8007e36 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8007e2c:	48a3      	ldr	r0, [pc, #652]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007e2e:	f241 0118 	movw	r1, #4120	; 0x1018
 8007e32:	f7fb f885 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8007e36:	68a3      	ldr	r3, [r4, #8]
 8007e38:	f033 0302 	bics.w	r3, r3, #2
 8007e3c:	d004      	beq.n	8007e48 <HAL_TIM_PWM_ConfigChannel+0x3c>
 8007e3e:	489f      	ldr	r0, [pc, #636]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007e40:	f241 0119 	movw	r1, #4121	; 0x1019
 8007e44:	f7fb f87c 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8007e48:	6923      	ldr	r3, [r4, #16]
 8007e4a:	f033 0304 	bics.w	r3, r3, #4
 8007e4e:	d004      	beq.n	8007e5a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8007e50:	489a      	ldr	r0, [pc, #616]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007e52:	f241 011a 	movw	r1, #4122	; 0x101a
 8007e56:	f7fb f873 	bl	8002f40 <assert_failed>
  __HAL_LOCK(htim);
 8007e5a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	f000 80e0 	beq.w	8008024 <HAL_TIM_PWM_ConfigChannel+0x218>
 8007e64:	2301      	movs	r3, #1
 8007e66:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8007e6a:	2e0c      	cmp	r6, #12
 8007e6c:	d83f      	bhi.n	8007eee <HAL_TIM_PWM_ConfigChannel+0xe2>
 8007e6e:	e8df f006 	tbb	[pc, r6]
 8007e72:	3e44      	.short	0x3e44
 8007e74:	3e7a3e3e 	.word	0x3e7a3e3e
 8007e78:	3ea93e3e 	.word	0x3ea93e3e
 8007e7c:	3e3e      	.short	0x3e3e
 8007e7e:	07          	.byte	0x07
 8007e7f:	00          	.byte	0x00
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80080c4 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 8007e86:	454b      	cmp	r3, r9
 8007e88:	f000 80cf 	beq.w	800802a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e90:	d007      	beq.n	8007ea2 <HAL_TIM_PWM_ConfigChannel+0x96>
 8007e92:	4a8b      	ldr	r2, [pc, #556]	; (80080c0 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d004      	beq.n	8007ea2 <HAL_TIM_PWM_ConfigChannel+0x96>
 8007e98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	f040 80e1 	bne.w	8008064 <HAL_TIM_PWM_ConfigChannel+0x258>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ea2:	6a1a      	ldr	r2, [r3, #32]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ea4:	68a0      	ldr	r0, [r4, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ea6:	6821      	ldr	r1, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ea8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007eac:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8007eae:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8007eb0:	f8d3 8004 	ldr.w	r8, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8007eb4:	69de      	ldr	r6, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8007eb6:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007eba:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ebe:	ea47 3700 	orr.w	r7, r7, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec2:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ec6:	461a      	mov	r2, r3
  TIMx->CCR4 = OC_Config->Pulse;
 8007ec8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR2 = tmpcr2;
 8007eca:	f8c3 8004 	str.w	r8, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007ece:	61de      	str	r6, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8007ed0:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007ed2:	621f      	str	r7, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ed4:	69d1      	ldr	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ed6:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ed8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007edc:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ede:	69d1      	ldr	r1, [r2, #28]
 8007ee0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007ee4:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ee6:	69d3      	ldr	r3, [r2, #28]
 8007ee8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8007eec:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(htim);
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return HAL_OK;
 8007ef4:	4618      	mov	r0, r3
}
 8007ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007efa:	6828      	ldr	r0, [r5, #0]
 8007efc:	4b71      	ldr	r3, [pc, #452]	; (80080c4 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007efe:	4298      	cmp	r0, r3
 8007f00:	d020      	beq.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x138>
 8007f02:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007f06:	d01d      	beq.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x138>
 8007f08:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007f0c:	4298      	cmp	r0, r3
 8007f0e:	d019      	beq.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x138>
 8007f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f14:	4298      	cmp	r0, r3
 8007f16:	d015      	beq.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x138>
 8007f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f1c:	4298      	cmp	r0, r3
 8007f1e:	d011      	beq.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x138>
 8007f20:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8007f24:	4298      	cmp	r0, r3
 8007f26:	d00d      	beq.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x138>
 8007f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f2c:	4298      	cmp	r0, r3
 8007f2e:	d009      	beq.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x138>
 8007f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f34:	4298      	cmp	r0, r3
 8007f36:	d005      	beq.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x138>
 8007f38:	4860      	ldr	r0, [pc, #384]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007f3a:	f241 0124 	movw	r1, #4132	; 0x1024
 8007f3e:	f7fa ffff 	bl	8002f40 <assert_failed>
 8007f42:	6828      	ldr	r0, [r5, #0]
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f44:	4621      	mov	r1, r4
 8007f46:	f7ff f879 	bl	800703c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f4a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f4c:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f4e:	6999      	ldr	r1, [r3, #24]
 8007f50:	f041 0108 	orr.w	r1, r1, #8
 8007f54:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f56:	6999      	ldr	r1, [r3, #24]
 8007f58:	f021 0104 	bic.w	r1, r1, #4
 8007f5c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f5e:	699a      	ldr	r2, [r3, #24]
 8007f60:	4302      	orrs	r2, r0
 8007f62:	619a      	str	r2, [r3, #24]
      break;
 8007f64:	e7c3      	b.n	8007eee <HAL_TIM_PWM_ConfigChannel+0xe2>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8007f66:	6828      	ldr	r0, [r5, #0]
 8007f68:	4b56      	ldr	r3, [pc, #344]	; (80080c4 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007f6a:	4298      	cmp	r0, r3
 8007f6c:	d018      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x194>
 8007f6e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007f72:	d015      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x194>
 8007f74:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007f78:	4298      	cmp	r0, r3
 8007f7a:	d011      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x194>
 8007f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f80:	4298      	cmp	r0, r3
 8007f82:	d00d      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x194>
 8007f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f88:	4298      	cmp	r0, r3
 8007f8a:	d009      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x194>
 8007f8c:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8007f90:	4298      	cmp	r0, r3
 8007f92:	d005      	beq.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x194>
 8007f94:	4849      	ldr	r0, [pc, #292]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007f96:	f241 0135 	movw	r1, #4149	; 0x1035
 8007f9a:	f7fa ffd1 	bl	8002f40 <assert_failed>
 8007f9e:	6828      	ldr	r0, [r5, #0]
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	f7ff fedf 	bl	8007d64 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fa6:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fa8:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007faa:	6999      	ldr	r1, [r3, #24]
 8007fac:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007fb0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fb2:	6999      	ldr	r1, [r3, #24]
 8007fb4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007fb8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fba:	699a      	ldr	r2, [r3, #24]
 8007fbc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007fc0:	619a      	str	r2, [r3, #24]
      break;
 8007fc2:	e794      	b.n	8007eee <HAL_TIM_PWM_ConfigChannel+0xe2>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007fc4:	6828      	ldr	r0, [r5, #0]
 8007fc6:	4b3f      	ldr	r3, [pc, #252]	; (80080c4 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8007fc8:	4298      	cmp	r0, r3
 8007fca:	d014      	beq.n	8007ff6 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8007fcc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007fd0:	d011      	beq.n	8007ff6 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8007fd2:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8007fd6:	4298      	cmp	r0, r3
 8007fd8:	d00d      	beq.n	8007ff6 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8007fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fde:	4298      	cmp	r0, r3
 8007fe0:	d009      	beq.n	8007ff6 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8007fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	d005      	beq.n	8007ff6 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8007fea:	4834      	ldr	r0, [pc, #208]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8007fec:	f241 0146 	movw	r1, #4166	; 0x1046
 8007ff0:	f7fa ffa6 	bl	8002f40 <assert_failed>
 8007ff4:	6828      	ldr	r0, [r5, #0]
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	f7ff f872 	bl	80070e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ffc:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ffe:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008000:	69d9      	ldr	r1, [r3, #28]
 8008002:	f041 0108 	orr.w	r1, r1, #8
 8008006:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008008:	69d9      	ldr	r1, [r3, #28]
 800800a:	f021 0104 	bic.w	r1, r1, #4
 800800e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008010:	69da      	ldr	r2, [r3, #28]
 8008012:	4302      	orrs	r2, r0
 8008014:	61da      	str	r2, [r3, #28]
      break;
 8008016:	e76a      	b.n	8007eee <HAL_TIM_PWM_ConfigChannel+0xe2>
  assert_param(IS_TIM_CHANNELS(Channel));
 8008018:	4828      	ldr	r0, [pc, #160]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800801a:	f241 0117 	movw	r1, #4119	; 0x1017
 800801e:	f7fa ff8f 	bl	8002f40 <assert_failed>
 8008022:	e6fe      	b.n	8007e22 <HAL_TIM_PWM_ConfigChannel+0x16>
  __HAL_LOCK(htim);
 8008024:	2002      	movs	r0, #2
}
 8008026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800802a:	6a1a      	ldr	r2, [r3, #32]
 800802c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008030:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008032:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008034:	f8d3 8004 	ldr.w	r8, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8008038:	69de      	ldr	r6, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800803a:	68a2      	ldr	r2, [r4, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800803c:	6823      	ldr	r3, [r4, #0]
  tmpccer &= ~TIM_CCER_CC4P;
 800803e:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008042:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008046:	ea47 3702 	orr.w	r7, r7, r2, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800804a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800804e:	6961      	ldr	r1, [r4, #20]
 8008050:	f431 7380 	bics.w	r3, r1, #256	; 0x100
 8008054:	d129      	bne.n	80080aa <HAL_TIM_PWM_ConfigChannel+0x29e>
 8008056:	4a1b      	ldr	r2, [pc, #108]	; (80080c4 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008058:	4b1a      	ldr	r3, [pc, #104]	; (80080c4 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
    tmpcr2 &= ~TIM_CR2_OIS4;
 800805a:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800805e:	ea48 1881 	orr.w	r8, r8, r1, lsl #6
 8008062:	e731      	b.n	8007ec8 <HAL_TIM_PWM_ConfigChannel+0xbc>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008068:	4293      	cmp	r3, r2
 800806a:	f43f af1a 	beq.w	8007ea2 <HAL_TIM_PWM_ConfigChannel+0x96>
 800806e:	4813      	ldr	r0, [pc, #76]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8008070:	f241 0157 	movw	r1, #4183	; 0x1057
 8008074:	f7fa ff64 	bl	8002f40 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008078:	682b      	ldr	r3, [r5, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800807a:	68a0      	ldr	r0, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800807c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800807e:	6821      	ldr	r1, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008080:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008084:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008086:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008088:	f8d3 8004 	ldr.w	r8, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800808c:	69de      	ldr	r6, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800808e:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008092:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008096:	454b      	cmp	r3, r9
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008098:	ea47 3700 	orr.w	r7, r7, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800809c:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a0:	bf18      	it	ne
 80080a2:	461a      	movne	r2, r3
 80080a4:	f47f af10 	bne.w	8007ec8 <HAL_TIM_PWM_ConfigChannel+0xbc>
 80080a8:	e7d1      	b.n	800804e <HAL_TIM_PWM_ConfigChannel+0x242>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80080aa:	f641 21ea 	movw	r1, #6890	; 0x1aea
 80080ae:	4803      	ldr	r0, [pc, #12]	; (80080bc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80080b0:	f7fa ff46 	bl	8002f40 <assert_failed>
 80080b4:	6961      	ldr	r1, [r4, #20]
 80080b6:	682a      	ldr	r2, [r5, #0]
 80080b8:	e7ce      	b.n	8008058 <HAL_TIM_PWM_ConfigChannel+0x24c>
 80080ba:	bf00      	nop
 80080bc:	0800d178 	.word	0x0800d178
 80080c0:	40000400 	.word	0x40000400
 80080c4:	40010000 	.word	0x40010000

080080c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80080ca:	4a32      	ldr	r2, [pc, #200]	; (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80080cc:	6803      	ldr	r3, [r0, #0]
 80080ce:	4293      	cmp	r3, r2
{
 80080d0:	4604      	mov	r4, r0
 80080d2:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80080d4:	d013      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080da:	d010      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80080dc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d00c      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80080e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d008      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80080ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d004      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0x36>
 80080f4:	4828      	ldr	r0, [pc, #160]	; (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80080f6:	f240 7177 	movw	r1, #1911	; 0x777
 80080fa:	f7fa ff21 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80080fe:	682b      	ldr	r3, [r5, #0]
 8008100:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8008104:	d006      	beq.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d004      	beq.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800810a:	4823      	ldr	r0, [pc, #140]	; (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800810c:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 8008110:	f7fa ff16 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008114:	686b      	ldr	r3, [r5, #4]
 8008116:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800811a:	d12f      	bne.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xb4>

  /* Check input state */
  __HAL_LOCK(htim);
 800811c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008120:	2b01      	cmp	r3, #1
 8008122:	d034      	beq.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xc6>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008124:	6823      	ldr	r3, [r4, #0]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008126:	481b      	ldr	r0, [pc, #108]	; (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008128:	2202      	movs	r2, #2
 800812a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800812e:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008130:	6829      	ldr	r1, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008132:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008136:	430a      	orrs	r2, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008138:	4283      	cmp	r3, r0
  tmpsmcr = htim->Instance->SMCR;
 800813a:	6899      	ldr	r1, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800813c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800813e:	d011      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8008140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008144:	d00e      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8008146:	4a15      	ldr	r2, [pc, #84]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00b      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800814c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008150:	4293      	cmp	r3, r2
 8008152:	d007      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8008154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800815c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8008160:	4293      	cmp	r3, r2
 8008162:	d104      	bne.n	800816e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008164:	686a      	ldr	r2, [r5, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008166:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800816a:	4311      	orrs	r1, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800816c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800816e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8008170:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008172:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008176:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 800817a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800817c:	4806      	ldr	r0, [pc, #24]	; (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800817e:	f240 7179 	movw	r1, #1913	; 0x779
 8008182:	f7fa fedd 	bl	8002f40 <assert_failed>
  __HAL_LOCK(htim);
 8008186:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800818a:	2b01      	cmp	r3, #1
 800818c:	d1ca      	bne.n	8008124 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800818e:	2002      	movs	r0, #2
}
 8008190:	bd38      	pop	{r3, r4, r5, pc}
 8008192:	bf00      	nop
 8008194:	40010000 	.word	0x40010000
 8008198:	0800d1b0 	.word	0x0800d1b0
 800819c:	40000400 	.word	0x40000400

080081a0 <HAL_TIMEx_ConfigBreakDeadTime>:
{
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80081a0:	4b3d      	ldr	r3, [pc, #244]	; (8008298 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80081a2:	6802      	ldr	r2, [r0, #0]
 80081a4:	429a      	cmp	r2, r3
{
 80081a6:	b570      	push	{r4, r5, r6, lr}
 80081a8:	4604      	mov	r4, r0
 80081aa:	460d      	mov	r5, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80081ac:	d004      	beq.n	80081b8 <HAL_TIMEx_ConfigBreakDeadTime+0x18>
 80081ae:	483b      	ldr	r0, [pc, #236]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 80081b0:	f240 71b4 	movw	r1, #1972	; 0x7b4
 80081b4:	f7fa fec4 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80081be:	d159      	bne.n	8008274 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80081c0:	686b      	ldr	r3, [r5, #4]
 80081c2:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80081c6:	d14f      	bne.n	8008268 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80081c8:	68ab      	ldr	r3, [r5, #8]
 80081ca:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80081ce:	d004      	beq.n	80081da <HAL_TIMEx_ConfigBreakDeadTime+0x3a>
 80081d0:	4832      	ldr	r0, [pc, #200]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 80081d2:	f240 71b7 	movw	r1, #1975	; 0x7b7
 80081d6:	f7fa feb3 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80081da:	68eb      	ldr	r3, [r5, #12]
 80081dc:	2bff      	cmp	r3, #255	; 0xff
 80081de:	d834      	bhi.n	800824a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80081e0:	692b      	ldr	r3, [r5, #16]
 80081e2:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80081e6:	d139      	bne.n	800825c <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80081e8:	696b      	ldr	r3, [r5, #20]
 80081ea:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80081ee:	d004      	beq.n	80081fa <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 80081f0:	482a      	ldr	r0, [pc, #168]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 80081f2:	f240 71ba 	movw	r1, #1978	; 0x7ba
 80081f6:	f7fa fea3 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80081fa:	69eb      	ldr	r3, [r5, #28]
 80081fc:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8008200:	d13e      	bne.n	8008280 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>

  /* Check input state */
  __HAL_LOCK(htim);
 8008202:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008206:	2b01      	cmp	r3, #1
 8008208:	d043      	beq.n	8008292 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800820a:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800820e:	e9d5 2100 	ldrd	r2, r1, [r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008216:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800821c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800821e:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008226:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008228:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800822c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800822e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008232:	69e9      	ldr	r1, [r5, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008234:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008236:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800823c:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 800823e:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8008240:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8008242:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 8008246:	4608      	mov	r0, r1
}
 8008248:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800824a:	4814      	ldr	r0, [pc, #80]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 800824c:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8008250:	f7fa fe76 	bl	8002f40 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8008254:	692b      	ldr	r3, [r5, #16]
 8008256:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800825a:	d0c5      	beq.n	80081e8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800825c:	480f      	ldr	r0, [pc, #60]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 800825e:	f240 71b9 	movw	r1, #1977	; 0x7b9
 8008262:	f7fa fe6d 	bl	8002f40 <assert_failed>
 8008266:	e7bf      	b.n	80081e8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8008268:	480c      	ldr	r0, [pc, #48]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 800826a:	f240 71b6 	movw	r1, #1974	; 0x7b6
 800826e:	f7fa fe67 	bl	8002f40 <assert_failed>
 8008272:	e7a9      	b.n	80081c8 <HAL_TIMEx_ConfigBreakDeadTime+0x28>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8008274:	4809      	ldr	r0, [pc, #36]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8008276:	f240 71b5 	movw	r1, #1973	; 0x7b5
 800827a:	f7fa fe61 	bl	8002f40 <assert_failed>
 800827e:	e79f      	b.n	80081c0 <HAL_TIMEx_ConfigBreakDeadTime+0x20>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8008280:	4806      	ldr	r0, [pc, #24]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8008282:	f240 71bb 	movw	r1, #1979	; 0x7bb
 8008286:	f7fa fe5b 	bl	8002f40 <assert_failed>
  __HAL_LOCK(htim);
 800828a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800828e:	2b01      	cmp	r3, #1
 8008290:	d1bb      	bne.n	800820a <HAL_TIMEx_ConfigBreakDeadTime+0x6a>
 8008292:	2002      	movs	r0, #2
}
 8008294:	bd70      	pop	{r4, r5, r6, pc}
 8008296:	bf00      	nop
 8008298:	40010000 	.word	0x40010000
 800829c:	0800d1b0 	.word	0x0800d1b0

080082a0 <HAL_TIMEx_CommutCallback>:
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop

080082a4 <HAL_TIMEx_BreakCallback>:
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop

080082a8 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 80082a8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
  hci_disconnection_complete_event(rp0->Status,
 80082aa:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 80082ae:	78c2      	ldrb	r2, [r0, #3]
 80082b0:	7800      	ldrb	r0, [r0, #0]
 80082b2:	f7fa f80d 	bl	80022d0 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
}
 80082b6:	2000      	movs	r0, #0
 80082b8:	bd08      	pop	{r3, pc}
 80082ba:	bf00      	nop

080082bc <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 80082bc:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
  hci_encryption_change_event(rp0->Status,
 80082be:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 80082c2:	78c2      	ldrb	r2, [r0, #3]
 80082c4:	7800      	ldrb	r0, [r0, #0]
 80082c6:	f000 faf1 	bl	80088ac <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
}
 80082ca:	2000      	movs	r0, #0
 80082cc:	bd08      	pop	{r3, pc}
 80082ce:	bf00      	nop

080082d0 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 80082d0:	b500      	push	{lr}
 80082d2:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
  hci_read_remote_version_information_complete_event(rp0->Status,
 80082d4:	88c3      	ldrh	r3, [r0, #6]
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	8883      	ldrh	r3, [r0, #4]
 80082da:	78c2      	ldrb	r2, [r0, #3]
 80082dc:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 80082e0:	7800      	ldrb	r0, [r0, #0]
 80082e2:	f000 fae5 	bl	80088b0 <hci_read_remote_version_information_complete_event>
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
}
 80082e6:	2000      	movs	r0, #0
 80082e8:	b003      	add	sp, #12
 80082ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80082ee:	bf00      	nop

080082f0 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80082f0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
  hci_hardware_error_event(rp0->Hardware_Code);
 80082f2:	7800      	ldrb	r0, [r0, #0]
 80082f4:	f000 fade 	bl	80088b4 <hci_hardware_error_event>

  return status;
}
 80082f8:	2000      	movs	r0, #0
 80082fa:	bd08      	pop	{r3, pc}

080082fc <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80082fc:	b530      	push	{r4, r5, lr}
 80082fe:	4602      	mov	r2, r0
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8008300:	7800      	ldrb	r0, [r0, #0]
{
 8008302:	b0a1      	sub	sp, #132	; 0x84
 8008304:	4669      	mov	r1, sp
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8008306:	b148      	cbz	r0, 800831c <hci_number_of_completed_packets_event_process+0x20>
 8008308:	3201      	adds	r2, #1
 800830a:	eb01 0580 	add.w	r5, r1, r0, lsl #2
 800830e:	460b      	mov	r3, r1
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8008310:	f852 4b04 	ldr.w	r4, [r2], #4
 8008314:	f843 4b04 	str.w	r4, [r3], #4
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8008318:	429d      	cmp	r5, r3
 800831a:	d1f9      	bne.n	8008310 <hci_number_of_completed_packets_event_process+0x14>
    size += 2;
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
    size += 2;
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 800831c:	f000 facc 	bl	80088b8 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
}
 8008320:	2000      	movs	r0, #0
 8008322:	b021      	add	sp, #132	; 0x84
 8008324:	bd30      	pop	{r4, r5, pc}
 8008326:	bf00      	nop

08008328 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8008328:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
  hci_data_buffer_overflow_event(rp0->Link_Type);
 800832a:	7800      	ldrb	r0, [r0, #0]
 800832c:	f000 fac6 	bl	80088bc <hci_data_buffer_overflow_event>

  return status;
}
 8008330:	2000      	movs	r0, #0
 8008332:	bd08      	pop	{r3, pc}

08008334 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8008334:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8008336:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800833a:	7800      	ldrb	r0, [r0, #0]
 800833c:	f000 fac0 	bl	80088c0 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
}
 8008340:	2000      	movs	r0, #0
 8008342:	bd08      	pop	{r3, pc}

08008344 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 8008344:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
  aci_blue_initialized_event(rp0->Reason_Code);
 8008346:	7800      	ldrb	r0, [r0, #0]
 8008348:	f000 fb14 	bl	8008974 <aci_blue_initialized_event>

  return status;
}
 800834c:	2000      	movs	r0, #0
 800834e:	bd08      	pop	{r3, pc}

08008350 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8008350:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
  aci_blue_events_lost_event(rp0->Lost_Events);
 8008352:	f000 fb11 	bl	8008978 <aci_blue_events_lost_event>

  return status;
}
 8008356:	2000      	movs	r0, #0
 8008358:	bd08      	pop	{r3, pc}
 800835a:	bf00      	nop

0800835c <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800835c:	b570      	push	{r4, r5, r6, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
  aci_blue_crash_info_event(rp0->Crash_Type,
 800835e:	4603      	mov	r3, r0
{
 8008360:	b088      	sub	sp, #32
 8008362:	4601      	mov	r1, r0
  aci_blue_crash_info_event(rp0->Crash_Type,
 8008364:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8008368:	f813 0b26 	ldrb.w	r0, [r3], #38
 800836c:	f8d1 2021 	ldr.w	r2, [r1, #33]	; 0x21
 8008370:	f8d1 601d 	ldr.w	r6, [r1, #29]
 8008374:	9307      	str	r3, [sp, #28]
 8008376:	f8d1 5019 	ldr.w	r5, [r1, #25]
 800837a:	9406      	str	r4, [sp, #24]
 800837c:	f8d1 4015 	ldr.w	r4, [r1, #21]
 8008380:	9205      	str	r2, [sp, #20]
 8008382:	f8d1 2011 	ldr.w	r2, [r1, #17]
 8008386:	9604      	str	r6, [sp, #16]
 8008388:	f8d1 300d 	ldr.w	r3, [r1, #13]
 800838c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008390:	e9cd 3200 	strd	r3, r2, [sp]
 8008394:	f8d1 3009 	ldr.w	r3, [r1, #9]
 8008398:	f8d1 2005 	ldr.w	r2, [r1, #5]
 800839c:	f8d1 1001 	ldr.w	r1, [r1, #1]
 80083a0:	f000 faec 	bl	800897c <aci_blue_crash_info_event>
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);

  return status;
}
 80083a4:	2000      	movs	r0, #0
 80083a6:	b008      	add	sp, #32
 80083a8:	bd70      	pop	{r4, r5, r6, pc}
 80083aa:	bf00      	nop

080083ac <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80083ac:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80083ae:	f8d0 2002 	ldr.w	r2, [r0, #2]
 80083b2:	7841      	ldrb	r1, [r0, #1]
 80083b4:	7800      	ldrb	r0, [r0, #0]
 80083b6:	f000 fae3 	bl	8008980 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
}
 80083ba:	2000      	movs	r0, #0
 80083bc:	bd08      	pop	{r3, pc}
 80083be:	bf00      	nop

080083c0 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80083c0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
  aci_hal_scan_req_report_event(rp0->RSSI,
 80083c2:	1c82      	adds	r2, r0, #2
 80083c4:	7841      	ldrb	r1, [r0, #1]
 80083c6:	f990 0000 	ldrsb.w	r0, [r0]
 80083ca:	f000 fadb 	bl	8008984 <aci_hal_scan_req_report_event>
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);

  return status;
}
 80083ce:	2000      	movs	r0, #0
 80083d0:	bd08      	pop	{r3, pc}
 80083d2:	bf00      	nop

080083d4 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 80083d4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 80083d6:	1c82      	adds	r2, r0, #2
 80083d8:	7841      	ldrb	r1, [r0, #1]
 80083da:	7800      	ldrb	r0, [r0, #0]
 80083dc:	f000 fad4 	bl	8008988 <aci_hal_fw_error_event>
                         rp0->Data_Length,
                         rp0->Data);

  return status;
}
 80083e0:	2000      	movs	r0, #0
 80083e2:	bd08      	pop	{r3, pc}

080083e4 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 80083e4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_limited_discoverable_event();
 80083e6:	f000 fa7f 	bl	80088e8 <aci_gap_limited_discoverable_event>

  return status;
}
 80083ea:	2000      	movs	r0, #0
 80083ec:	bd08      	pop	{r3, pc}
 80083ee:	bf00      	nop

080083f0 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 80083f0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 80083f2:	78c2      	ldrb	r2, [r0, #3]
 80083f4:	7881      	ldrb	r1, [r0, #2]
 80083f6:	8800      	ldrh	r0, [r0, #0]
 80083f8:	f000 fa78 	bl	80088ec <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
}
 80083fc:	2000      	movs	r0, #0
 80083fe:	bd08      	pop	{r3, pc}

08008400 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8008400:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8008402:	8800      	ldrh	r0, [r0, #0]
 8008404:	f000 fa74 	bl	80088f0 <aci_gap_pass_key_req_event>

  return status;
}
 8008408:	2000      	movs	r0, #0
 800840a:	bd08      	pop	{r3, pc}

0800840c <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800840c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800840e:	8800      	ldrh	r0, [r0, #0]
 8008410:	f000 fa70 	bl	80088f4 <aci_gap_authorization_req_event>

  return status;
}
 8008414:	2000      	movs	r0, #0
 8008416:	bd08      	pop	{r3, pc}

08008418 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8008418:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_slave_security_initiated_event();
 800841a:	f000 fa6d 	bl	80088f8 <aci_gap_slave_security_initiated_event>

  return status;
}
 800841e:	2000      	movs	r0, #0
 8008420:	bd08      	pop	{r3, pc}
 8008422:	bf00      	nop

08008424 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 8008424:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_bond_lost_event();
 8008426:	f000 fa69 	bl	80088fc <aci_gap_bond_lost_event>

  return status;
}
 800842a:	2000      	movs	r0, #0
 800842c:	bd08      	pop	{r3, pc}
 800842e:	bf00      	nop

08008430 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8008430:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8008432:	1cc3      	adds	r3, r0, #3
 8008434:	7882      	ldrb	r2, [r0, #2]
 8008436:	7841      	ldrb	r1, [r0, #1]
 8008438:	7800      	ldrb	r0, [r0, #0]
 800843a:	f000 fa61 	bl	8008900 <aci_gap_proc_complete_event>
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);

  return status;
}
 800843e:	2000      	movs	r0, #0
 8008440:	bd08      	pop	{r3, pc}
 8008442:	bf00      	nop

08008444 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8008444:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8008446:	8800      	ldrh	r0, [r0, #0]
 8008448:	f000 fa5c 	bl	8008904 <aci_gap_addr_not_resolved_event>

  return status;
}
 800844c:	2000      	movs	r0, #0
 800844e:	bd08      	pop	{r3, pc}

08008450 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8008450:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8008452:	f8d0 1002 	ldr.w	r1, [r0, #2]
 8008456:	8800      	ldrh	r0, [r0, #0]
 8008458:	f000 fa56 	bl	8008908 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
}
 800845c:	2000      	movs	r0, #0
 800845e:	bd08      	pop	{r3, pc}

08008460 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8008460:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8008462:	7881      	ldrb	r1, [r0, #2]
 8008464:	8800      	ldrh	r0, [r0, #0]
 8008466:	f000 fa51 	bl	800890c <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
}
 800846a:	2000      	movs	r0, #0
 800846c:	bd08      	pop	{r3, pc}
 800846e:	bf00      	nop

08008470 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8008470:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8008472:	8841      	ldrh	r1, [r0, #2]
 8008474:	8800      	ldrh	r0, [r0, #0]
 8008476:	f000 fa75 	bl	8008964 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
}
 800847a:	2000      	movs	r0, #0
 800847c:	bd08      	pop	{r3, pc}
 800847e:	bf00      	nop

08008480 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8008480:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8008482:	1cc2      	adds	r2, r0, #3
 8008484:	7881      	ldrb	r1, [r0, #2]
 8008486:	8800      	ldrh	r0, [r0, #0]
 8008488:	f000 fa6e 	bl	8008968 <aci_l2cap_proc_timeout_event>
                               rp0->Data_Length,
                               rp0->Data);

  return status;
}
 800848c:	2000      	movs	r0, #0
 800848e:	bd08      	pop	{r3, pc}

08008490 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8008490:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8008492:	f8b0 100b 	ldrh.w	r1, [r0, #11]
 8008496:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800849a:	f8b0 3007 	ldrh.w	r3, [r0, #7]
{
 800849e:	b085      	sub	sp, #20
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 80084a0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 80084aa:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 80084ae:	7881      	ldrb	r1, [r0, #2]
 80084b0:	8800      	ldrh	r0, [r0, #0]
 80084b2:	f000 fa5b 	bl	800896c <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
}
 80084b6:	2000      	movs	r0, #0
 80084b8:	b005      	add	sp, #20
 80084ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80084be:	bf00      	nop

080084c0 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 80084c0:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80084c2:	4602      	mov	r2, r0
{
 80084c4:	b083      	sub	sp, #12
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80084c6:	7943      	ldrb	r3, [r0, #5]
{
 80084c8:	4601      	mov	r1, r0
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 80084ca:	f832 0b06 	ldrh.w	r0, [r2], #6
 80084ce:	9200      	str	r2, [sp, #0]
 80084d0:	f8b1 2003 	ldrh.w	r2, [r1, #3]
 80084d4:	7889      	ldrb	r1, [r1, #2]
 80084d6:	f000 fa4b 	bl	8008970 <aci_l2cap_command_reject_event>
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);

  return status;
}
 80084da:	2000      	movs	r0, #0
 80084dc:	b003      	add	sp, #12
 80084de:	f85d fb04 	ldr.w	pc, [sp], #4
 80084e2:	bf00      	nop

080084e4 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 80084e4:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80084e6:	4602      	mov	r2, r0
{
 80084e8:	b083      	sub	sp, #12
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80084ea:	88c3      	ldrh	r3, [r0, #6]
{
 80084ec:	4601      	mov	r1, r0
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 80084ee:	f832 0b08 	ldrh.w	r0, [r2], #8
 80084f2:	9200      	str	r2, [sp, #0]
 80084f4:	888a      	ldrh	r2, [r1, #4]
 80084f6:	8849      	ldrh	r1, [r1, #2]
 80084f8:	f7f9 ff20 	bl	800233c <aci_gatt_attribute_modified_event>
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);

  return status;
}
 80084fc:	2000      	movs	r0, #0
 80084fe:	b003      	add	sp, #12
 8008500:	f85d fb04 	ldr.w	pc, [sp], #4

08008504 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8008504:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8008506:	8800      	ldrh	r0, [r0, #0]
 8008508:	f000 fa02 	bl	8008910 <aci_gatt_proc_timeout_event>

  return status;
}
 800850c:	2000      	movs	r0, #0
 800850e:	bd08      	pop	{r3, pc}

08008510 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8008510:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8008512:	8841      	ldrh	r1, [r0, #2]
 8008514:	8800      	ldrh	r0, [r0, #0]
 8008516:	f000 f9fd 	bl	8008914 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
}
 800851a:	2000      	movs	r0, #0
 800851c:	bd08      	pop	{r3, pc}
 800851e:	bf00      	nop

08008520 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8008520:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8008522:	1d03      	adds	r3, r0, #4
 8008524:	78c2      	ldrb	r2, [r0, #3]
 8008526:	7881      	ldrb	r1, [r0, #2]
 8008528:	8800      	ldrh	r0, [r0, #0]
 800852a:	f000 f9f5 	bl	8008918 <aci_att_find_info_resp_event>
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);

  return status;
}
 800852e:	2000      	movs	r0, #0
 8008530:	bd08      	pop	{r3, pc}
 8008532:	bf00      	nop

08008534 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8008534:	b570      	push	{r4, r5, r6, lr}
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8008536:	7881      	ldrb	r1, [r0, #2]
{
 8008538:	b0a0      	sub	sp, #128	; 0x80
 800853a:	466a      	mov	r2, sp
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800853c:	b149      	cbz	r1, 8008552 <aci_att_find_by_type_value_resp_event_process+0x1e>
 800853e:	eb02 0681 	add.w	r6, r2, r1, lsl #2
 8008542:	4613      	mov	r3, r2
 8008544:	1cc4      	adds	r4, r0, #3
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8008546:	f854 5b04 	ldr.w	r5, [r4], #4
 800854a:	f843 5b04 	str.w	r5, [r3], #4
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800854e:	429e      	cmp	r6, r3
 8008550:	d1f9      	bne.n	8008546 <aci_att_find_by_type_value_resp_event_process+0x12>
    size += 2;
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
    size += 2;
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8008552:	8800      	ldrh	r0, [r0, #0]
 8008554:	f000 f9e2 	bl	800891c <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
}
 8008558:	2000      	movs	r0, #0
 800855a:	b020      	add	sp, #128	; 0x80
 800855c:	bd70      	pop	{r4, r5, r6, pc}
 800855e:	bf00      	nop

08008560 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8008560:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8008562:	1d03      	adds	r3, r0, #4
 8008564:	78c2      	ldrb	r2, [r0, #3]
 8008566:	7881      	ldrb	r1, [r0, #2]
 8008568:	8800      	ldrh	r0, [r0, #0]
 800856a:	f000 f9d9 	bl	8008920 <aci_att_read_by_type_resp_event>
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);

  return status;
}
 800856e:	2000      	movs	r0, #0
 8008570:	bd08      	pop	{r3, pc}
 8008572:	bf00      	nop

08008574 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8008574:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
  aci_att_read_resp_event(rp0->Connection_Handle,
 8008576:	1cc2      	adds	r2, r0, #3
 8008578:	7881      	ldrb	r1, [r0, #2]
 800857a:	8800      	ldrh	r0, [r0, #0]
 800857c:	f000 f9d2 	bl	8008924 <aci_att_read_resp_event>
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);

  return status;
}
 8008580:	2000      	movs	r0, #0
 8008582:	bd08      	pop	{r3, pc}

08008584 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8008584:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8008586:	1cc2      	adds	r2, r0, #3
 8008588:	7881      	ldrb	r1, [r0, #2]
 800858a:	8800      	ldrh	r0, [r0, #0]
 800858c:	f000 f9cc 	bl	8008928 <aci_att_read_blob_resp_event>
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);

  return status;
}
 8008590:	2000      	movs	r0, #0
 8008592:	bd08      	pop	{r3, pc}

08008594 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8008594:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8008596:	1cc2      	adds	r2, r0, #3
 8008598:	7881      	ldrb	r1, [r0, #2]
 800859a:	8800      	ldrh	r0, [r0, #0]
 800859c:	f000 f9c6 	bl	800892c <aci_att_read_multiple_resp_event>
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);

  return status;
}
 80085a0:	2000      	movs	r0, #0
 80085a2:	bd08      	pop	{r3, pc}

080085a4 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 80085a4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 80085a6:	1d03      	adds	r3, r0, #4
 80085a8:	78c2      	ldrb	r2, [r0, #3]
 80085aa:	7881      	ldrb	r1, [r0, #2]
 80085ac:	8800      	ldrh	r0, [r0, #0]
 80085ae:	f000 f9bf 	bl	8008930 <aci_att_read_by_group_type_resp_event>
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);

  return status;
}
 80085b2:	2000      	movs	r0, #0
 80085b4:	bd08      	pop	{r3, pc}
 80085b6:	bf00      	nop

080085b8 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 80085b8:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 80085ba:	4602      	mov	r2, r0
{
 80085bc:	b083      	sub	sp, #12
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 80085be:	7983      	ldrb	r3, [r0, #6]
{
 80085c0:	4601      	mov	r1, r0
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 80085c2:	f832 0b07 	ldrh.w	r0, [r2], #7
 80085c6:	9200      	str	r2, [sp, #0]
 80085c8:	888a      	ldrh	r2, [r1, #4]
 80085ca:	8849      	ldrh	r1, [r1, #2]
 80085cc:	f000 f9b2 	bl	8008934 <aci_att_prepare_write_resp_event>
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);

  return status;
}
 80085d0:	2000      	movs	r0, #0
 80085d2:	b003      	add	sp, #12
 80085d4:	f85d fb04 	ldr.w	pc, [sp], #4

080085d8 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 80085d8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 80085da:	8800      	ldrh	r0, [r0, #0]
 80085dc:	f000 f9ac 	bl	8008938 <aci_att_exec_write_resp_event>

  return status;
}
 80085e0:	2000      	movs	r0, #0
 80085e2:	bd08      	pop	{r3, pc}

080085e4 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 80085e4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
  aci_gatt_indication_event(rp0->Connection_Handle,
 80085e6:	1d43      	adds	r3, r0, #5
 80085e8:	7902      	ldrb	r2, [r0, #4]
 80085ea:	8841      	ldrh	r1, [r0, #2]
 80085ec:	8800      	ldrh	r0, [r0, #0]
 80085ee:	f000 f9a5 	bl	800893c <aci_gatt_indication_event>
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);

  return status;
}
 80085f2:	2000      	movs	r0, #0
 80085f4:	bd08      	pop	{r3, pc}
 80085f6:	bf00      	nop

080085f8 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 80085f8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
  aci_gatt_notification_event(rp0->Connection_Handle,
 80085fa:	1d43      	adds	r3, r0, #5
 80085fc:	7902      	ldrb	r2, [r0, #4]
 80085fe:	8841      	ldrh	r1, [r0, #2]
 8008600:	8800      	ldrh	r0, [r0, #0]
 8008602:	f7f9 fe99 	bl	8002338 <aci_gatt_notification_event>
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);

  return status;
}
 8008606:	2000      	movs	r0, #0
 8008608:	bd08      	pop	{r3, pc}
 800860a:	bf00      	nop

0800860c <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800860c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800860e:	7881      	ldrb	r1, [r0, #2]
 8008610:	8800      	ldrh	r0, [r0, #0]
 8008612:	f000 f995 	bl	8008940 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
}
 8008616:	2000      	movs	r0, #0
 8008618:	bd08      	pop	{r3, pc}
 800861a:	bf00      	nop

0800861c <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800861c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800861e:	7943      	ldrb	r3, [r0, #5]
 8008620:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8008624:	7881      	ldrb	r1, [r0, #2]
 8008626:	8800      	ldrh	r0, [r0, #0]
 8008628:	f000 f98c 	bl	8008944 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
}
 800862c:	2000      	movs	r0, #0
 800862e:	bd08      	pop	{r3, pc}

08008630 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8008630:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8008632:	1d43      	adds	r3, r0, #5
 8008634:	7902      	ldrb	r2, [r0, #4]
 8008636:	8841      	ldrh	r1, [r0, #2]
 8008638:	8800      	ldrh	r0, [r0, #0]
 800863a:	f000 f985 	bl	8008948 <aci_gatt_disc_read_char_by_uuid_resp_event>
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);

  return status;
}
 800863e:	2000      	movs	r0, #0
 8008640:	bd08      	pop	{r3, pc}
 8008642:	bf00      	nop

08008644 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8008644:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8008646:	1d43      	adds	r3, r0, #5
 8008648:	7902      	ldrb	r2, [r0, #4]
 800864a:	8841      	ldrh	r1, [r0, #2]
 800864c:	8800      	ldrh	r0, [r0, #0]
 800864e:	f000 f97d 	bl	800894c <aci_gatt_write_permit_req_event>
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);

  return status;
}
 8008652:	2000      	movs	r0, #0
 8008654:	bd08      	pop	{r3, pc}
 8008656:	bf00      	nop

08008658 <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8008658:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800865a:	8882      	ldrh	r2, [r0, #4]
 800865c:	8841      	ldrh	r1, [r0, #2]
 800865e:	8800      	ldrh	r0, [r0, #0]
 8008660:	f000 f976 	bl	8008950 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
}
 8008664:	2000      	movs	r0, #0
 8008666:	bd08      	pop	{r3, pc}

08008668 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8008668:	b530      	push	{r4, r5, lr}
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800866a:	7885      	ldrb	r5, [r0, #2]
{
 800866c:	b0a1      	sub	sp, #132	; 0x84
 800866e:	4604      	mov	r4, r0
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8008670:	466b      	mov	r3, sp
 8008672:	b12d      	cbz	r5, 8008680 <aci_gatt_read_multi_permit_req_event_process+0x18>
 8008674:	4618      	mov	r0, r3
 8008676:	006a      	lsls	r2, r5, #1
 8008678:	1ce1      	adds	r1, r4, #3
 800867a:	f003 f9a5 	bl	800b9c8 <memcpy>
 800867e:	4603      	mov	r3, r0
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
    size += 2;
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8008680:	8820      	ldrh	r0, [r4, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	4629      	mov	r1, r5
 8008686:	f000 f965 	bl	8008954 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
}
 800868a:	2000      	movs	r0, #0
 800868c:	b021      	add	sp, #132	; 0x84
 800868e:	bd30      	pop	{r4, r5, pc}

08008690 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8008690:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8008692:	8841      	ldrh	r1, [r0, #2]
 8008694:	8800      	ldrh	r0, [r0, #0]
 8008696:	f000 f95f 	bl	8008958 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
}
 800869a:	2000      	movs	r0, #0
 800869c:	bd08      	pop	{r3, pc}
 800869e:	bf00      	nop

080086a0 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 80086a0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 80086a2:	8800      	ldrh	r0, [r0, #0]
 80086a4:	f000 f95a 	bl	800895c <aci_gatt_server_confirmation_event>

  return status;
}
 80086a8:	2000      	movs	r0, #0
 80086aa:	bd08      	pop	{r3, pc}

080086ac <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 80086ac:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80086ae:	4602      	mov	r2, r0
{
 80086b0:	b083      	sub	sp, #12
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80086b2:	7983      	ldrb	r3, [r0, #6]
{
 80086b4:	4601      	mov	r1, r0
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 80086b6:	f832 0b07 	ldrh.w	r0, [r2], #7
 80086ba:	9200      	str	r2, [sp, #0]
 80086bc:	888a      	ldrh	r2, [r1, #4]
 80086be:	8849      	ldrh	r1, [r1, #2]
 80086c0:	f000 f94e 	bl	8008960 <aci_gatt_prepare_write_permit_req_event>
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);

  return status;
}
 80086c4:	2000      	movs	r0, #0
 80086c6:	b003      	add	sp, #12
 80086c8:	f85d fb04 	ldr.w	pc, [sp], #4

080086cc <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 80086cc:	b530      	push	{r4, r5, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
  hci_le_connection_complete_event(rp0->Status,
 80086ce:	7c45      	ldrb	r5, [r0, #17]
 80086d0:	f8b0 400f 	ldrh.w	r4, [r0, #15]
 80086d4:	f8b0 100d 	ldrh.w	r1, [r0, #13]
 80086d8:	f8b0 200b 	ldrh.w	r2, [r0, #11]
{
 80086dc:	b087      	sub	sp, #28
  hci_le_connection_complete_event(rp0->Status,
 80086de:	e9cd 4503 	strd	r4, r5, [sp, #12]
 80086e2:	e9cd 2101 	strd	r2, r1, [sp, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 80086e6:	1d43      	adds	r3, r0, #5
  hci_le_connection_complete_event(rp0->Status,
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	7903      	ldrb	r3, [r0, #4]
 80086ec:	78c2      	ldrb	r2, [r0, #3]
 80086ee:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 80086f2:	7800      	ldrb	r0, [r0, #0]
 80086f4:	f7f9 fdae 	bl	8002254 <hci_le_connection_complete_event>
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
}
 80086f8:	2000      	movs	r0, #0
 80086fa:	b007      	add	sp, #28
 80086fc:	bd30      	pop	{r4, r5, pc}
 80086fe:	bf00      	nop

08008700 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8008700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008704:	f890 e000 	ldrb.w	lr, [r0]
{
 8008708:	b09f      	sub	sp, #124	; 0x7c
  for (i = 0; i < rp0->Num_Reports; i++) {
 800870a:	f1be 0f00 	cmp.w	lr, #0
 800870e:	d02c      	beq.n	800876a <hci_le_advertising_report_event_process+0x6a>
 8008710:	f100 010a 	add.w	r1, r0, #10
 8008714:	f04f 0c0b 	mov.w	ip, #11
 8008718:	fb1c 1c0e 	smlabb	ip, ip, lr, r1
 800871c:	f10d 0302 	add.w	r3, sp, #2
  uint8_t size = 1;
 8008720:	2201      	movs	r2, #1
    size += 1;
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
    size += 1;
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
    size += 6;
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8008722:	f811 5c01 	ldrb.w	r5, [r1, #-1]
    size += 1;
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 8008726:	f8c3 100a 	str.w	r1, [r3, #10]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800872a:	460c      	mov	r4, r1
    size += rp0->Advertising_Report[i].Length_Data;
 800872c:	f105 0609 	add.w	r6, r5, #9
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8008730:	f854 7d07 	ldr.w	r7, [r4, #-7]!
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 8008734:	719d      	strb	r5, [r3, #6]
    size += rp0->Advertising_Report[i].Length_Data;
 8008736:	4432      	add	r2, r6
 8008738:	b2d2      	uxtb	r2, r2
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800873a:	f811 6c09 	ldrb.w	r6, [r1, #-9]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800873e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 8008742:	f811 4c08 	ldrb.w	r4, [r1, #-8]
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 8008746:	f810 9002 	ldrb.w	r9, [r0, r2]
 800874a:	f883 900e 	strb.w	r9, [r3, #14]
 800874e:	310b      	adds	r1, #11
    size += 1;
 8008750:	3201      	adds	r2, #1
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008752:	4561      	cmp	r1, ip
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 8008754:	f8a3 8004 	strh.w	r8, [r3, #4]
 8008758:	601f      	str	r7, [r3, #0]
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800875a:	f803 6c02 	strb.w	r6, [r3, #-2]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800875e:	f803 4c01 	strb.w	r4, [r3, #-1]
    size += 1;
 8008762:	b2d2      	uxtb	r2, r2
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008764:	f103 0314 	add.w	r3, r3, #20
 8008768:	d1db      	bne.n	8008722 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800876a:	4670      	mov	r0, lr
 800876c:	4669      	mov	r1, sp
 800876e:	f000 f8a9 	bl	80088c4 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
}
 8008772:	2000      	movs	r0, #0
 8008774:	b01f      	add	sp, #124	; 0x7c
 8008776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800877a:	bf00      	nop

0800877c <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800877c:	b500      	push	{lr}
 800877e:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
  hci_le_connection_update_complete_event(rp0->Status,
 8008780:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800878a:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 800878e:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8008792:	7800      	ldrb	r0, [r0, #0]
 8008794:	f000 f898 	bl	80088c8 <hci_le_connection_update_complete_event>
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
}
 8008798:	2000      	movs	r0, #0
 800879a:	b003      	add	sp, #12
 800879c:	f85d fb04 	ldr.w	pc, [sp], #4

080087a0 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 80087a0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 80087a2:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 80087a6:	1cc2      	adds	r2, r0, #3
 80087a8:	7800      	ldrb	r0, [r0, #0]
 80087aa:	f000 f88f 	bl	80088cc <hci_le_read_remote_used_features_complete_event>
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);

  return status;
}
 80087ae:	2000      	movs	r0, #0
 80087b0:	bd08      	pop	{r3, pc}
 80087b2:	bf00      	nop

080087b4 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 80087b4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
                                     rp0->Random_Number,
 80087b6:	4601      	mov	r1, r0
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 80087b8:	8942      	ldrh	r2, [r0, #10]
 80087ba:	f831 0b02 	ldrh.w	r0, [r1], #2
 80087be:	f000 f887 	bl	80088d0 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
}
 80087c2:	2000      	movs	r0, #0
 80087c4:	bd08      	pop	{r3, pc}
 80087c6:	bf00      	nop

080087c8 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 80087c8:	b500      	push	{lr}
 80087ca:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
  hci_le_data_length_change_event(rp0->Connection_Handle,
 80087cc:	8903      	ldrh	r3, [r0, #8]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	88c3      	ldrh	r3, [r0, #6]
 80087d2:	8882      	ldrh	r2, [r0, #4]
 80087d4:	8841      	ldrh	r1, [r0, #2]
 80087d6:	8800      	ldrh	r0, [r0, #0]
 80087d8:	f000 f87c 	bl	80088d4 <hci_le_data_length_change_event>
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
}
 80087dc:	2000      	movs	r0, #0
 80087de:	b003      	add	sp, #12
 80087e0:	f85d fb04 	ldr.w	pc, [sp], #4

080087e4 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 80087e4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
                                                   rp0->Local_P256_Public_Key);
 80087e6:	4601      	mov	r1, r0
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80087e8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80087ec:	f000 f874 	bl	80088d8 <hci_le_read_local_p256_public_key_complete_event>

  return status;
}
 80087f0:	2000      	movs	r0, #0
 80087f2:	bd08      	pop	{r3, pc}

080087f4 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 80087f4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
  hci_le_generate_dhkey_complete_event(rp0->Status,
                                       rp0->DHKey);
 80087f6:	4601      	mov	r1, r0
  hci_le_generate_dhkey_complete_event(rp0->Status,
 80087f8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80087fc:	f000 f86e 	bl	80088dc <hci_le_generate_dhkey_complete_event>

  return status;
}
 8008800:	2000      	movs	r0, #0
 8008802:	bd08      	pop	{r3, pc}

08008804 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8008804:	b530      	push	{r4, r5, lr}
 8008806:	b089      	sub	sp, #36	; 0x24
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8008808:	7f42      	ldrb	r2, [r0, #29]
 800880a:	f8b0 5019 	ldrh.w	r5, [r0, #25]
 800880e:	f8b0 4017 	ldrh.w	r4, [r0, #23]
 8008812:	f8b0 301b 	ldrh.w	r3, [r0, #27]
 8008816:	9206      	str	r2, [sp, #24]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
                                            rp0->Local_Resolvable_Private_Address,
                                            rp0->Peer_Resolvable_Private_Address,
 8008818:	f100 0111 	add.w	r1, r0, #17
                                            rp0->Local_Resolvable_Private_Address,
 800881c:	f100 020b 	add.w	r2, r0, #11
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8008820:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8008824:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008828:	9305      	str	r3, [sp, #20]
                                            rp0->Peer_Address,
 800882a:	1d43      	adds	r3, r0, #5
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	7903      	ldrb	r3, [r0, #4]
 8008830:	78c2      	ldrb	r2, [r0, #3]
 8008832:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8008836:	7800      	ldrb	r0, [r0, #0]
 8008838:	f000 f852 	bl	80088e0 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
}
 800883c:	2000      	movs	r0, #0
 800883e:	b009      	add	sp, #36	; 0x24
 8008840:	bd30      	pop	{r4, r5, pc}
 8008842:	bf00      	nop

08008844 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 8008844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008848:	4603      	mov	r3, r0
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800884a:	7800      	ldrb	r0, [r0, #0]
{
 800884c:	b0a1      	sub	sp, #132	; 0x84
  for (i = 0; i < rp0->Num_Reports; i++) {
 800884e:	b328      	cbz	r0, 800889c <hci_le_direct_advertising_report_event_process+0x58>
 8008850:	3303      	adds	r3, #3
 8008852:	eb03 1900 	add.w	r9, r3, r0, lsl #4
 8008856:	f10d 0209 	add.w	r2, sp, #9
    size += 1;
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
    size += 6;
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
    size += 1;
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800885a:	4619      	mov	r1, r3
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800885c:	f813 cc02 	ldrb.w	ip, [r3, #-2]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8008860:	f851 ef07 	ldr.w	lr, [r1, #7]!
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8008864:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8008868:	681e      	ldr	r6, [r3, #0]
 800886a:	889d      	ldrh	r5, [r3, #4]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800886c:	799c      	ldrb	r4, [r3, #6]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800886e:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    size += 6;
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8008872:	7b59      	ldrb	r1, [r3, #13]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8008874:	f8a2 8004 	strh.w	r8, [r2, #4]
 8008878:	3310      	adds	r3, #16
  for (i = 0; i < rp0->Num_Reports; i++) {
 800887a:	454b      	cmp	r3, r9
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800887c:	f8c2 e000 	str.w	lr, [r2]
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 8008880:	f802 cc09 	strb.w	ip, [r2, #-9]
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8008884:	f802 7c08 	strb.w	r7, [r2, #-8]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8008888:	f842 6c07 	str.w	r6, [r2, #-7]
 800888c:	f822 5c03 	strh.w	r5, [r2, #-3]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8008890:	f802 4c01 	strb.w	r4, [r2, #-1]
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8008894:	7191      	strb	r1, [r2, #6]
  for (i = 0; i < rp0->Num_Reports; i++) {
 8008896:	f102 0210 	add.w	r2, r2, #16
 800889a:	d1de      	bne.n	800885a <hci_le_direct_advertising_report_event_process+0x16>
    size += 1;
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800889c:	4669      	mov	r1, sp
 800889e:	f000 f821 	bl	80088e4 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
}
 80088a2:	2000      	movs	r0, #0
 80088a4:	b021      	add	sp, #132	; 0x84
 80088a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088aa:	bf00      	nop

080088ac <hci_encryption_change_event>:
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop

080088b0 <hci_read_remote_version_information_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop

080088b4 <hci_hardware_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop

080088b8 <hci_number_of_completed_packets_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop

080088bc <hci_data_buffer_overflow_event>:
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop

080088c0 <hci_encryption_key_refresh_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop

080088c4 <hci_le_advertising_report_event>:
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop

080088c8 <hci_le_connection_update_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop

080088cc <hci_le_read_remote_used_features_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop

080088d0 <hci_le_long_term_key_request_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop

080088d4 <hci_le_data_length_change_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop

080088d8 <hci_le_read_local_p256_public_key_complete_event>:
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop

080088dc <hci_le_generate_dhkey_complete_event>:
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop

080088e0 <hci_le_enhanced_connection_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop

080088e4 <hci_le_direct_advertising_report_event>:
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop

080088e8 <aci_gap_limited_discoverable_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop

080088ec <aci_gap_pairing_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop

080088f0 <aci_gap_pass_key_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop

080088f4 <aci_gap_authorization_req_event>:
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop

080088f8 <aci_gap_slave_security_initiated_event>:
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop

080088fc <aci_gap_bond_lost_event>:
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop

08008900 <aci_gap_proc_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop

08008904 <aci_gap_addr_not_resolved_event>:
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <aci_gap_numeric_comparison_value_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop

0800890c <aci_gap_keypress_notification_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop

08008910 <aci_gatt_proc_timeout_event>:
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop

08008914 <aci_att_exchange_mtu_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <aci_att_find_info_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop

0800891c <aci_att_find_by_type_value_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop

08008920 <aci_att_read_by_type_resp_event>:
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop

08008924 <aci_att_read_resp_event>:
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop

08008928 <aci_att_read_blob_resp_event>:
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop

0800892c <aci_att_read_multiple_resp_event>:
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop

08008930 <aci_att_read_by_group_type_resp_event>:
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop

08008934 <aci_att_prepare_write_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop

08008938 <aci_att_exec_write_resp_event>:
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop

0800893c <aci_gatt_indication_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop

08008940 <aci_gatt_proc_complete_event>:
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop

08008944 <aci_gatt_error_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop

08008948 <aci_gatt_disc_read_char_by_uuid_resp_event>:
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop

0800894c <aci_gatt_write_permit_req_event>:
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop

08008950 <aci_gatt_read_permit_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop

08008954 <aci_gatt_read_multi_permit_req_event>:
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop

08008958 <aci_gatt_tx_pool_available_event>:
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop

0800895c <aci_gatt_server_confirmation_event>:
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop

08008960 <aci_gatt_prepare_write_permit_req_event>:
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop

08008964 <aci_l2cap_connection_update_resp_event>:
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop

08008968 <aci_l2cap_proc_timeout_event>:
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop

0800896c <aci_l2cap_connection_update_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop

08008970 <aci_l2cap_command_reject_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop

08008974 <aci_blue_initialized_event>:
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop

08008978 <aci_blue_events_lost_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop

0800897c <aci_blue_crash_info_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop

08008980 <aci_hal_end_of_radio_activity_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop

08008984 <aci_hal_scan_req_report_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop

08008988 <aci_hal_fw_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop

0800898c <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800898c:	b510      	push	{r4, lr}
 800898e:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8008990:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x03;
  rq.ocf = 0x003;
  rq.rparam = &status;
 8008992:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 8008996:	2301      	movs	r3, #1
  rq.ogf = 0x03;
 8008998:	f04f 1403 	mov.w	r4, #196611	; 0x30003
  if (hci_send_req(&rq, FALSE) < 0)
 800899c:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800899e:	e9cd 1103 	strd	r1, r1, [sp, #12]
  rq.rlen = 1;
 80089a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tBleStatus status = 0;
 80089a6:	f88d 1007 	strb.w	r1, [sp, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089aa:	9105      	str	r1, [sp, #20]
  rq.ogf = 0x03;
 80089ac:	9402      	str	r4, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 80089ae:	f000 faff 	bl	8008fb0 <hci_send_req>
 80089b2:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 80089b4:	bfac      	ite	ge
 80089b6:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80089ba:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80089bc:	b008      	add	sp, #32
 80089be:	bd10      	pop	{r4, pc}

080089c0 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 80089c0:	b510      	push	{r4, lr}
 80089c2:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 80089c4:	f10d 0403 	add.w	r4, sp, #3
 80089c8:	2200      	movs	r2, #0
  uint8_t index_input = 0;
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 80089ca:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 80089cc:	7022      	strb	r2, [r4, #0]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 80089ce:	7018      	strb	r0, [r3, #0]
  index_input += 1;
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 80089d0:	b1d1      	cbz	r1, 8008a08 <hci_le_set_scan_response_data+0x48>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 80089d2:	680a      	ldr	r2, [r1, #0]
 80089d4:	6848      	ldr	r0, [r1, #4]
 80089d6:	f8cd 201d 	str.w	r2, [sp, #29]
 80089da:	f8cd 0021 	str.w	r0, [sp, #33]	; 0x21
 80089de:	688a      	ldr	r2, [r1, #8]
 80089e0:	68c8      	ldr	r0, [r1, #12]
 80089e2:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
 80089e6:	f8cd 0029 	str.w	r0, [sp, #41]	; 0x29
 80089ea:	690a      	ldr	r2, [r1, #16]
 80089ec:	6948      	ldr	r0, [r1, #20]
 80089ee:	f8cd 202d 	str.w	r2, [sp, #45]	; 0x2d
 80089f2:	f8cd 0031 	str.w	r0, [sp, #49]	; 0x31
 80089f6:	698a      	ldr	r2, [r1, #24]
 80089f8:	8b88      	ldrh	r0, [r1, #28]
 80089fa:	7f89      	ldrb	r1, [r1, #30]
 80089fc:	f8cd 2035 	str.w	r2, [sp, #53]	; 0x35
 8008a00:	f8ad 0039 	strh.w	r0, [sp, #57]	; 0x39
 8008a04:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
  }
  index_input += 31;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 8008a08:	4809      	ldr	r0, [pc, #36]	; (8008a30 <hci_le_set_scan_response_data+0x70>)
  rq.ocf = 0x009;
  rq.cparam = cmd_buffer;
 8008a0a:	9303      	str	r3, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a0c:	2100      	movs	r1, #0
  rq.clen = index_input;
 8008a0e:	2220      	movs	r2, #32
  rq.ogf = 0x08;
 8008a10:	9001      	str	r0, [sp, #4]
  rq.rparam = &status;
  rq.rlen = 1;
 8008a12:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8008a14:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 8008a16:	9405      	str	r4, [sp, #20]
  rq.clen = index_input;
 8008a18:	9204      	str	r2, [sp, #16]
  rq.rlen = 1;
 8008a1a:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a1c:	9102      	str	r1, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8008a1e:	f000 fac7 	bl	8008fb0 <hci_send_req>
 8008a22:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8008a24:	bfac      	ite	ge
 8008a26:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8008a28:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8008a2a:	b048      	add	sp, #288	; 0x120
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	bf00      	nop
 8008a30:	00090008 	.word	0x00090008

08008a34 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 8008a34:	b510      	push	{r4, lr}
 8008a36:	b08a      	sub	sp, #40	; 0x28
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008a38:	ab01      	add	r3, sp, #4
 8008a3a:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 8008a3c:	4a0f      	ldr	r2, [pc, #60]	; (8008a7c <hci_le_rand+0x48>)
  rq.ocf = 0x018;
  rq.rparam = &resp;
 8008a3e:	9308      	str	r3, [sp, #32]
{
 8008a40:	4604      	mov	r4, r0
  rq.rlen = sizeof(resp);
 8008a42:	2309      	movs	r3, #9
  if (hci_send_req(&rq, FALSE) < 0)
 8008a44:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008a46:	e9cd 1101 	strd	r1, r1, [sp, #4]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a4a:	e9cd 1105 	strd	r1, r1, [sp, #20]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008a4e:	f88d 100c 	strb.w	r1, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a52:	9107      	str	r1, [sp, #28]
  rq.ogf = 0x08;
 8008a54:	9204      	str	r2, [sp, #16]
  rq.rlen = sizeof(resp);
 8008a56:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8008a58:	f000 faaa 	bl	8008fb0 <hci_send_req>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	db0a      	blt.n	8008a76 <hci_le_rand+0x42>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 8008a60:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8008a64:	b928      	cbnz	r0, 8008a72 <hci_le_rand+0x3e>
    return resp.Status;
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 8008a66:	f8dd 2005 	ldr.w	r2, [sp, #5]
 8008a6a:	f8dd 3009 	ldr.w	r3, [sp, #9]
 8008a6e:	6022      	str	r2, [r4, #0]
 8008a70:	6063      	str	r3, [r4, #4]
  return BLE_STATUS_SUCCESS;
}
 8008a72:	b00a      	add	sp, #40	; 0x28
 8008a74:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 8008a76:	20ff      	movs	r0, #255	; 0xff
}
 8008a78:	b00a      	add	sp, #40	; 0x28
 8008a7a:	bd10      	pop	{r4, pc}
 8008a7c:	00180008 	.word	0x00180008

08008a80 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	b0cb      	sub	sp, #300	; 0x12c
 8008a86:	4696      	mov	lr, r2
 8008a88:	f89d 5154 	ldrb.w	r5, [sp, #340]	; 0x154
 8008a8c:	f89d 615c 	ldrb.w	r6, [sp, #348]	; 0x15c
 8008a90:	f8bd 4168 	ldrh.w	r4, [sp, #360]	; 0x168
 8008a94:	f89d c150 	ldrb.w	ip, [sp, #336]	; 0x150
 8008a98:	9401      	str	r4, [sp, #4]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 8008a9a:	f04f 0800 	mov.w	r8, #0
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008a9e:	ac09      	add	r4, sp, #36	; 0x24
 8008aa0:	f105 0a08 	add.w	sl, r5, #8
  uint8_t index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8008aa4:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8008aa8:	f8ad 1025 	strh.w	r1, [sp, #37]	; 0x25
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8008aac:	462a      	mov	r2, r5
 8008aae:	9956      	ldr	r1, [sp, #344]	; 0x158
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8008ab0:	f8ad e027 	strh.w	lr, [sp, #39]	; 0x27
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8008ab4:	a80b      	add	r0, sp, #44	; 0x2c
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8008ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008aba:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
{
 8008abe:	f8bd b164 	ldrh.w	fp, [sp, #356]	; 0x164
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8008ac2:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008ac6:	f106 0709 	add.w	r7, r6, #9
  tBleStatus status = 0;
 8008aca:	f88d 800b 	strb.w	r8, [sp, #11]
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8008ace:	f002 ff7b 	bl	800b9c8 <memcpy>
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008ad2:	eb04 000a 	add.w	r0, r4, sl
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008ad6:	442f      	add	r7, r5
    index_input += Local_Name_Length*sizeof(uint8_t);
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
    }
    index_input += 1;
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8008ad8:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8008ada:	f804 600a 	strb.w	r6, [r4, sl]
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8008ade:	4632      	mov	r2, r6
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	f002 ff71 	bl	800b9c8 <memcpy>
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
    }
    index_input += 2;
 8008ae6:	360d      	adds	r6, #13
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008ae8:	19e2      	adds	r2, r4, r7
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8008aea:	f824 b007 	strh.w	fp, [r4, r7]
    index_input += 2;
 8008aee:	4435      	add	r5, r6
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8008af0:	9f01      	ldr	r7, [sp, #4]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8008af2:	4e0c      	ldr	r6, [pc, #48]	; (8008b24 <aci_gap_set_discoverable+0xa4>)
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8008af4:	8057      	strh	r7, [r2, #2]
  tBleStatus status = 0;
 8008af6:	f10d 090b 	add.w	r9, sp, #11
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8008afa:	2301      	movs	r3, #1
  rq.clen = index_input;
 8008afc:	b2ed      	uxtb	r5, r5
  if (hci_send_req(&rq, FALSE) < 0)
 8008afe:	4641      	mov	r1, r8
 8008b00:	a803      	add	r0, sp, #12
  rq.cparam = cmd_buffer;
 8008b02:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.ogf = 0x3f;
 8008b06:	e9cd 6803 	strd	r6, r8, [sp, #12]
  rq.rparam = &status;
 8008b0a:	f8cd 901c 	str.w	r9, [sp, #28]
  rq.rlen = 1;
 8008b0e:	9308      	str	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 8008b10:	f000 fa4e 	bl	8008fb0 <hci_send_req>
 8008b14:	4540      	cmp	r0, r8
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8008b16:	bfac      	ite	ge
 8008b18:	f899 0000 	ldrbge.w	r0, [r9]
    return BLE_STATUS_TIMEOUT;
 8008b1c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8008b1e:	b04b      	add	sp, #300	; 0x12c
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	0083003f 	.word	0x0083003f

08008b28 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	b0ca      	sub	sp, #296	; 0x128
 8008b2c:	461e      	mov	r6, r3
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8008b2e:	4b18      	ldr	r3, [pc, #96]	; (8008b90 <aci_gap_init+0x68>)
 8008b30:	9303      	str	r3, [sp, #12]
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 8008b32:	2303      	movs	r3, #3
  cp0->Role = htob(Role, 1);
 8008b34:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8008b38:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
  rq.clen = index_input;
 8008b3c:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008b3e:	2100      	movs	r1, #0
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 8008b40:	2307      	movs	r3, #7
  cp0->Role = htob(Role, 1);
 8008b42:	ad09      	add	r5, sp, #36	; 0x24
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008b44:	ac01      	add	r4, sp, #4
  if (hci_send_req(&rq, FALSE) < 0)
 8008b46:	a803      	add	r0, sp, #12
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008b48:	9101      	str	r1, [sp, #4]
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8008b4a:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  rq.cparam = cmd_buffer;
 8008b4e:	9505      	str	r5, [sp, #20]
  rq.rlen = sizeof(resp);
 8008b50:	9308      	str	r3, [sp, #32]
  rq.rparam = &resp;
 8008b52:	9407      	str	r4, [sp, #28]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b54:	9104      	str	r1, [sp, #16]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008b56:	f8cd 1007 	str.w	r1, [sp, #7]
  if (hci_send_req(&rq, FALSE) < 0)
 8008b5a:	f000 fa29 	bl	8008fb0 <hci_send_req>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	db12      	blt.n	8008b88 <aci_gap_init+0x60>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 8008b62:	7820      	ldrb	r0, [r4, #0]
 8008b64:	b970      	cbnz	r0, 8008b84 <aci_gap_init+0x5c>
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008b66:	6821      	ldr	r1, [r4, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008b68:	78e2      	ldrb	r2, [r4, #3]
 8008b6a:	7925      	ldrb	r5, [r4, #4]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008b6c:	6863      	ldr	r3, [r4, #4]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008b6e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8008b72:	8031      	strh	r1, [r6, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008b74:	994e      	ldr	r1, [sp, #312]	; 0x138
 8008b76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8008b7a:	800a      	strh	r2, [r1, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008b7c:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8008b7e:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8008b82:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8008b84:	b04a      	add	sp, #296	; 0x128
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8008b88:	20ff      	movs	r0, #255	; 0xff
}
 8008b8a:	b04a      	add	sp, #296	; 0x128
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	bf00      	nop
 8008b90:	008a003f 	.word	0x008a003f

08008b94 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8008b94:	b510      	push	{r4, lr}
 8008b96:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8008b98:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x101;
  rq.rparam = &status;
 8008b9a:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 8008b9e:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 8008ba0:	4c09      	ldr	r4, [pc, #36]	; (8008bc8 <aci_gatt_init+0x34>)
  tBleStatus status = 0;
 8008ba2:	f88d 1007 	strb.w	r1, [sp, #7]
  if (hci_send_req(&rq, FALSE) < 0)
 8008ba6:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008ba8:	e9cd 1103 	strd	r1, r1, [sp, #12]
  rq.rlen = 1;
 8008bac:	e9cd 2306 	strd	r2, r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008bb0:	9105      	str	r1, [sp, #20]
  rq.ogf = 0x3f;
 8008bb2:	9402      	str	r4, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8008bb4:	f000 f9fc 	bl	8008fb0 <hci_send_req>
 8008bb8:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8008bba:	bfac      	ite	ge
 8008bbc:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8008bc0:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8008bc2:	b008      	add	sp, #32
 8008bc4:	bd10      	pop	{r4, pc}
 8008bc6:	bf00      	nop
 8008bc8:	0101003f 	.word	0x0101003f

08008bcc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8008bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008bd0:	2801      	cmp	r0, #1
{
 8008bd2:	b0c9      	sub	sp, #292	; 0x124
 8008bd4:	4616      	mov	r6, r2
 8008bd6:	461c      	mov	r4, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008bd8:	d031      	beq.n	8008c3e <aci_gatt_add_service+0x72>
 8008bda:	2802      	cmp	r0, #2
 8008bdc:	d003      	beq.n	8008be6 <aci_gatt_add_service+0x1a>
 8008bde:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 8008be0:	b049      	add	sp, #292	; 0x124
 8008be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008be6:	466d      	mov	r5, sp
 8008be8:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008bea:	f10d 081c 	add.w	r8, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008bee:	802b      	strh	r3, [r5, #0]
 8008bf0:	70ab      	strb	r3, [r5, #2]
      case 2: size = 16; break;
 8008bf2:	f04f 0913 	mov.w	r9, #19
 8008bf6:	2210      	movs	r2, #16
 8008bf8:	f10d 072d 	add.w	r7, sp, #45	; 0x2d
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008bfc:	f888 0000 	strb.w	r0, [r8]
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8008c00:	f10d 001d 	add.w	r0, sp, #29
 8008c04:	f002 fee0 	bl	800b9c8 <memcpy>
  rq.ogf = 0x3f;
 8008c08:	4a16      	ldr	r2, [pc, #88]	; (8008c64 <aci_gatt_add_service+0x98>)
      cp1->Service_Type = htob(Service_Type, 1);
 8008c0a:	703e      	strb	r6, [r7, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c0c:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 8008c0e:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8008c10:	a801      	add	r0, sp, #4
  rq.clen = index_input;
 8008c12:	e9cd 8903 	strd	r8, r9, [sp, #12]
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8008c16:	707c      	strb	r4, [r7, #1]
  rq.rparam = &resp;
 8008c18:	9505      	str	r5, [sp, #20]
  rq.ogf = 0x3f;
 8008c1a:	9201      	str	r2, [sp, #4]
  rq.rlen = sizeof(resp);
 8008c1c:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c1e:	9102      	str	r1, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8008c20:	f000 f9c6 	bl	8008fb0 <hci_send_req>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	db18      	blt.n	8008c5a <aci_gatt_add_service+0x8e>
  if (resp.Status) {
 8008c28:	7828      	ldrb	r0, [r5, #0]
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d1d8      	bne.n	8008be0 <aci_gatt_add_service+0x14>
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008c2e:	682b      	ldr	r3, [r5, #0]
 8008c30:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8008c32:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8008c36:	8013      	strh	r3, [r2, #0]
}
 8008c38:	b049      	add	sp, #292	; 0x124
 8008c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008c3e:	466d      	mov	r5, sp
 8008c40:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008c42:	f10d 081c 	add.w	r8, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008c46:	802b      	strh	r3, [r5, #0]
 8008c48:	70ab      	strb	r3, [r5, #2]
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008c4a:	f04f 0905 	mov.w	r9, #5
 8008c4e:	2202      	movs	r2, #2
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008c50:	f10d 071f 	add.w	r7, sp, #31
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008c54:	f888 0000 	strb.w	r0, [r8]
    switch (Service_UUID_Type) {
 8008c58:	e7d2      	b.n	8008c00 <aci_gatt_add_service+0x34>
    return BLE_STATUS_TIMEOUT;
 8008c5a:	20ff      	movs	r0, #255	; 0xff
}
 8008c5c:	b049      	add	sp, #292	; 0x124
 8008c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c62:	bf00      	nop
 8008c64:	0102003f 	.word	0x0102003f

08008c68 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8008c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6c:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008c6e:	2901      	cmp	r1, #1
{
 8008c70:	461c      	mov	r4, r3
 8008c72:	f89d 8150 	ldrb.w	r8, [sp, #336]	; 0x150
 8008c76:	f89d 9154 	ldrb.w	r9, [sp, #340]	; 0x154
 8008c7a:	f89d a158 	ldrb.w	sl, [sp, #344]	; 0x158
 8008c7e:	f89d b15c 	ldrb.w	fp, [sp, #348]	; 0x15c
 8008c82:	f89d 3160 	ldrb.w	r3, [sp, #352]	; 0x160
 8008c86:	4694      	mov	ip, r2
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008c88:	d041      	beq.n	8008d0e <aci_gatt_add_char+0xa6>
 8008c8a:	2902      	cmp	r1, #2
 8008c8c:	d003      	beq.n	8008c96 <aci_gatt_add_char+0x2e>
 8008c8e:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 8008c90:	b04b      	add	sp, #300	; 0x12c
 8008c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008c96:	ad02      	add	r5, sp, #8
 8008c98:	2200      	movs	r2, #0
 8008c9a:	802a      	strh	r2, [r5, #0]
 8008c9c:	70aa      	strb	r2, [r5, #2]
      case 2: size = 16; break;
 8008c9e:	221a      	movs	r2, #26
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008ca0:	af09      	add	r7, sp, #36	; 0x24
      case 2: size = 16; break;
 8008ca2:	9200      	str	r2, [sp, #0]
 8008ca4:	f10d 0637 	add.w	r6, sp, #55	; 0x37
 8008ca8:	2210      	movs	r2, #16
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008caa:	8038      	strh	r0, [r7, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8008cac:	70b9      	strb	r1, [r7, #2]
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8008cae:	4661      	mov	r1, ip
 8008cb0:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	f002 fe87 	bl	800b9c8 <memcpy>
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f368 0207 	bfi	r2, r8, #0, #8
      cp1->Is_Variable = htob(Is_Variable, 1);
 8008cc0:	9b01      	ldr	r3, [sp, #4]
 8008cc2:	71b3      	strb	r3, [r6, #6]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008cc4:	f369 220f 	bfi	r2, r9, #8, #8
  rq.clen = index_input;
 8008cc8:	9b00      	ldr	r3, [sp, #0]
  rq.ogf = 0x3f;
 8008cca:	f8df c064 	ldr.w	ip, [pc, #100]	; 8008d30 <aci_gatt_add_char+0xc8>
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8008cce:	8034      	strh	r4, [r6, #0]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008cd0:	f36a 4217 	bfi	r2, sl, #16, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008cd4:	2100      	movs	r1, #0
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008cd6:	f36b 621f 	bfi	r2, fp, #24, #8
  rq.rlen = sizeof(resp);
 8008cda:	2403      	movs	r4, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8008cdc:	a803      	add	r0, sp, #12
  rq.rparam = &resp;
 8008cde:	e9cd 3506 	strd	r3, r5, [sp, #24]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8008ce2:	f8c6 2002 	str.w	r2, [r6, #2]
  rq.cparam = cmd_buffer;
 8008ce6:	9705      	str	r7, [sp, #20]
  rq.ogf = 0x3f;
 8008ce8:	f8cd c00c 	str.w	ip, [sp, #12]
  rq.rlen = sizeof(resp);
 8008cec:	9408      	str	r4, [sp, #32]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008cee:	9104      	str	r1, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 8008cf0:	f000 f95e 	bl	8008fb0 <hci_send_req>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	db17      	blt.n	8008d28 <aci_gatt_add_char+0xc0>
  if (resp.Status) {
 8008cf8:	7828      	ldrb	r0, [r5, #0]
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d1c8      	bne.n	8008c90 <aci_gatt_add_char+0x28>
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8008d02:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8008d06:	8013      	strh	r3, [r2, #0]
}
 8008d08:	b04b      	add	sp, #300	; 0x12c
 8008d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008d0e:	ad02      	add	r5, sp, #8
 8008d10:	2200      	movs	r2, #0
 8008d12:	802a      	strh	r2, [r5, #0]
 8008d14:	70aa      	strb	r2, [r5, #2]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8008d16:	220c      	movs	r2, #12
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008d18:	af09      	add	r7, sp, #36	; 0x24
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8008d1a:	9200      	str	r2, [sp, #0]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008d1c:	f10d 0629 	add.w	r6, sp, #41	; 0x29
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8008d20:	2202      	movs	r2, #2
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008d22:	8038      	strh	r0, [r7, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8008d24:	70b9      	strb	r1, [r7, #2]
    switch (Char_UUID_Type) {
 8008d26:	e7c2      	b.n	8008cae <aci_gatt_add_char+0x46>
    return BLE_STATUS_TIMEOUT;
 8008d28:	20ff      	movs	r0, #255	; 0xff
}
 8008d2a:	b04b      	add	sp, #300	; 0x12c
 8008d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d30:	0104003f 	.word	0x0104003f

08008d34 <aci_gatt_add_char_desc>:
                                  uint8_t Access_Permissions,
                                  uint8_t GATT_Evt_Mask,
                                  uint8_t Enc_Key_Size,
                                  uint8_t Is_Variable,
                                  uint16_t *Char_Desc_Handle)
{
 8008d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d38:	b0cd      	sub	sp, #308	; 0x134
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_desc_cp0 *cp0 = (aci_gatt_add_char_desc_cp0*)(cmd_buffer);
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8008d3a:	2a01      	cmp	r2, #1
{
 8008d3c:	f89d 5164 	ldrb.w	r5, [sp, #356]	; 0x164
 8008d40:	9500      	str	r5, [sp, #0]
 8008d42:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8008d46:	9501      	str	r5, [sp, #4]
 8008d48:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8008d4c:	f89d 9158 	ldrb.w	r9, [sp, #344]	; 0x158
 8008d50:	f89d 415c 	ldrb.w	r4, [sp, #348]	; 0x15c
 8008d54:	f89d a170 	ldrb.w	sl, [sp, #368]	; 0x170
 8008d58:	f89d b174 	ldrb.w	fp, [sp, #372]	; 0x174
 8008d5c:	9502      	str	r5, [sp, #8]
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8008d5e:	d056      	beq.n	8008e0e <aci_gatt_add_char_desc+0xda>
 8008d60:	2a02      	cmp	r2, #2
 8008d62:	d003      	beq.n	8008d6c <aci_gatt_add_char_desc+0x38>
 8008d64:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 8008d66:	b04d      	add	sp, #308	; 0x134
 8008d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008d6c:	af04      	add	r7, sp, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8008d6e:	ae0b      	add	r6, sp, #44	; 0x2c
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008d70:	f04f 0c00 	mov.w	ip, #0
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8008d74:	f104 0517 	add.w	r5, r4, #23
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008d78:	8030      	strh	r0, [r6, #0]
      case 2: size = 16; break;
 8008d7a:	2010      	movs	r0, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8008d7c:	4435      	add	r5, r6
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008d7e:	f8a7 c000 	strh.w	ip, [r7]
 8008d82:	f887 c002 	strb.w	ip, [r7, #2]
      case 2: size = 16; break;
 8008d86:	9003      	str	r0, [sp, #12]
 8008d88:	f10d 0841 	add.w	r8, sp, #65	; 0x41
  cp0->Char_Handle = htob(Char_Handle, 2);
 8008d8c:	8071      	strh	r1, [r6, #2]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 8008d8e:	7132      	strb	r2, [r6, #4]
    BLUENRG_memcpy((void *) &cp0->Char_Desc_Uuid, (const void *) Char_Desc_Uuid, size);
 8008d90:	4619      	mov	r1, r3
 8008d92:	4602      	mov	r2, r0
 8008d94:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 8008d98:	f002 fe16 	bl	800b9c8 <memcpy>
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Char_Desc_Value_Length = htob(Char_Desc_Value_Length, 1);
 8008da0:	f888 4001 	strb.w	r4, [r8, #1]
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8008da4:	f108 0002 	add.w	r0, r8, #2
      cp1->Char_Desc_Value_Max_Len = htob(Char_Desc_Value_Max_Len, 1);
 8008da8:	f888 9000 	strb.w	r9, [r8]
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8008dac:	f002 fe0c 	bl	800b9c8 <memcpy>
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8008db0:	9a00      	ldr	r2, [sp, #0]
  rq.ogf = 0x3f;
 8008db2:	f8df c088 	ldr.w	ip, [pc, #136]	; 8008e3c <aci_gatt_add_char_desc+0x108>
      cp2->Is_Variable = htob(Is_Variable, 1);
 8008db6:	f885 b004 	strb.w	fp, [r5, #4]
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f362 0307 	bfi	r3, r2, #0, #8
 8008dc0:	9a01      	ldr	r2, [sp, #4]
  rq.rparam = &resp;
 8008dc2:	9709      	str	r7, [sp, #36]	; 0x24
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8008dc4:	f362 230f 	bfi	r3, r2, #8, #8
    index_input += 1;
 8008dc8:	9a03      	ldr	r2, [sp, #12]
  rq.ogf = 0x3f;
 8008dca:	f8cd c014 	str.w	ip, [sp, #20]
    index_input += 1;
 8008dce:	340c      	adds	r4, #12
 8008dd0:	4422      	add	r2, r4
 8008dd2:	4614      	mov	r4, r2
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8008dd4:	9a02      	ldr	r2, [sp, #8]
 8008dd6:	f362 4317 	bfi	r3, r2, #16, #8
 8008dda:	f36a 631f 	bfi	r3, sl, #24, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dde:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 8008de0:	2203      	movs	r2, #3
  rq.clen = index_input;
 8008de2:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 8008de4:	a805      	add	r0, sp, #20
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8008de6:	602b      	str	r3, [r5, #0]
  rq.cparam = cmd_buffer;
 8008de8:	e9cd 6407 	strd	r6, r4, [sp, #28]
  rq.rlen = sizeof(resp);
 8008dec:	920a      	str	r2, [sp, #40]	; 0x28
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008dee:	9106      	str	r1, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8008df0:	f000 f8de 	bl	8008fb0 <hci_send_req>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	db1d      	blt.n	8008e34 <aci_gatt_add_char_desc+0x100>
  if (resp.Status) {
 8008df8:	7838      	ldrb	r0, [r7, #0]
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d1b3      	bne.n	8008d66 <aci_gatt_add_char_desc+0x32>
  *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	9a5e      	ldr	r2, [sp, #376]	; 0x178
 8008e02:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8008e06:	8013      	strh	r3, [r2, #0]
}
 8008e08:	b04d      	add	sp, #308	; 0x134
 8008e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008e0e:	af04      	add	r7, sp, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8008e10:	ae0b      	add	r6, sp, #44	; 0x2c
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008e12:	f04f 0c00 	mov.w	ip, #0
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8008e16:	f104 0509 	add.w	r5, r4, #9
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008e1a:	8030      	strh	r0, [r6, #0]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 8008e1c:	2002      	movs	r0, #2
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8008e1e:	4435      	add	r5, r6
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008e20:	f8a7 c000 	strh.w	ip, [r7]
 8008e24:	f887 c002 	strb.w	ip, [r7, #2]
      case 1: size = 2; break;
 8008e28:	9003      	str	r0, [sp, #12]
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8008e2a:	f10d 0833 	add.w	r8, sp, #51	; 0x33
  cp0->Char_Handle = htob(Char_Handle, 2);
 8008e2e:	8071      	strh	r1, [r6, #2]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 8008e30:	7132      	strb	r2, [r6, #4]
 8008e32:	e7ad      	b.n	8008d90 <aci_gatt_add_char_desc+0x5c>
    return BLE_STATUS_TIMEOUT;
 8008e34:	20ff      	movs	r0, #255	; 0xff
}
 8008e36:	b04d      	add	sp, #308	; 0x134
 8008e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3c:	0105003f 	.word	0x0105003f

08008e40 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8008e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e42:	b0c9      	sub	sp, #292	; 0x124
 8008e44:	461c      	mov	r4, r3
 8008e46:	468c      	mov	ip, r1
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8008e48:	2600      	movs	r6, #0
{
 8008e4a:	4613      	mov	r3, r2
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8008e4c:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008e4e:	f8ad 001c 	strh.w	r0, [sp, #28]
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8008e52:	4622      	mov	r2, r4
 8008e54:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8008e58:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  cp0->Char_Handle = htob(Char_Handle, 2);
 8008e5c:	f8ad c01e 	strh.w	ip, [sp, #30]
  cp0->Val_Offset = htob(Val_Offset, 1);
 8008e60:	f88d 3020 	strb.w	r3, [sp, #32]
  tBleStatus status = 0;
 8008e64:	f88d 6003 	strb.w	r6, [sp, #3]
    index_input += Char_Value_Length*sizeof(uint8_t);
 8008e68:	3406      	adds	r4, #6
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8008e6a:	f002 fdad 	bl	800b9c8 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8008e6e:	4a0b      	ldr	r2, [pc, #44]	; (8008e9c <aci_gatt_update_char_value+0x5c>)
  tBleStatus status = 0;
 8008e70:	f10d 0703 	add.w	r7, sp, #3
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8008e74:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8008e76:	ad07      	add	r5, sp, #28
  rq.clen = index_input;
 8008e78:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	a801      	add	r0, sp, #4
  rq.ogf = 0x3f;
 8008e7e:	e9cd 2601 	strd	r2, r6, [sp, #4]
  rq.cparam = cmd_buffer;
 8008e82:	9503      	str	r5, [sp, #12]
  rq.clen = index_input;
 8008e84:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 8008e86:	9705      	str	r7, [sp, #20]
  rq.rlen = 1;
 8008e88:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8008e8a:	f000 f891 	bl	8008fb0 <hci_send_req>
 8008e8e:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8008e90:	bfac      	ite	ge
 8008e92:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 8008e94:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8008e96:	b049      	add	sp, #292	; 0x124
 8008e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	0106003f 	.word	0x0106003f

08008ea0 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8008ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8008ea6:	2500      	movs	r5, #0
{
 8008ea8:	4603      	mov	r3, r0
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8008eaa:	4611      	mov	r1, r2
 8008eac:	f10d 001e 	add.w	r0, sp, #30
 8008eb0:	4622      	mov	r2, r4
  cp0->Offset = htob(Offset, 1);
 8008eb2:	f88d 301c 	strb.w	r3, [sp, #28]
  cp0->Length = htob(Length, 1);
 8008eb6:	f88d 401d 	strb.w	r4, [sp, #29]
  tBleStatus status = 0;
 8008eba:	f88d 5003 	strb.w	r5, [sp, #3]
    index_input += Length*sizeof(uint8_t);
 8008ebe:	3402      	adds	r4, #2
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8008ec0:	f002 fd82 	bl	800b9c8 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8008ec4:	4a0a      	ldr	r2, [pc, #40]	; (8008ef0 <aci_hal_write_config_data+0x50>)
  tBleStatus status = 0;
 8008ec6:	f10d 0703 	add.w	r7, sp, #3
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8008eca:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 8008ecc:	ae07      	add	r6, sp, #28
  rq.clen = index_input;
 8008ece:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	a801      	add	r0, sp, #4
  rq.ogf = 0x3f;
 8008ed4:	e9cd 2501 	strd	r2, r5, [sp, #4]
  rq.clen = index_input;
 8008ed8:	9404      	str	r4, [sp, #16]
  rq.cparam = cmd_buffer;
 8008eda:	9603      	str	r6, [sp, #12]
  rq.rparam = &status;
 8008edc:	9705      	str	r7, [sp, #20]
  rq.rlen = 1;
 8008ede:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8008ee0:	f000 f866 	bl	8008fb0 <hci_send_req>
 8008ee4:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8008ee6:	bfac      	ite	ge
 8008ee8:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 8008eea:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8008eec:	b049      	add	sp, #292	; 0x124
 8008eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ef0:	000c003f 	.word	0x000c003f

08008ef4 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8008ef8:	2300      	movs	r3, #0
  uint8_t index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 8008efa:	aa07      	add	r2, sp, #28
 8008efc:	f88d 001c 	strb.w	r0, [sp, #28]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 8008f00:	f88d 101d 	strb.w	r1, [sp, #29]
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8008f04:	480b      	ldr	r0, [pc, #44]	; (8008f34 <aci_hal_set_tx_power_level+0x40>)
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
 8008f06:	9203      	str	r2, [sp, #12]
  rq.clen = index_input;
 8008f08:	2102      	movs	r1, #2
  tBleStatus status = 0;
 8008f0a:	f10d 0403 	add.w	r4, sp, #3
  rq.ogf = 0x3f;
 8008f0e:	9001      	str	r0, [sp, #4]
  rq.rparam = &status;
  rq.rlen = 1;
 8008f10:	2201      	movs	r2, #1
  rq.clen = index_input;
 8008f12:	9104      	str	r1, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 8008f14:	a801      	add	r0, sp, #4
 8008f16:	4619      	mov	r1, r3
  rq.rlen = 1;
 8008f18:	9206      	str	r2, [sp, #24]
  rq.rparam = &status;
 8008f1a:	9405      	str	r4, [sp, #20]
  tBleStatus status = 0;
 8008f1c:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f20:	9302      	str	r3, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8008f22:	f000 f845 	bl	8008fb0 <hci_send_req>
 8008f26:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8008f28:	bfac      	ite	ge
 8008f2a:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8008f2c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8008f2e:	b048      	add	sp, #288	; 0x120
 8008f30:	bd10      	pop	{r4, pc}
 8008f32:	bf00      	nop
 8008f34:	000f003f 	.word	0x000f003f

08008f38 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008f3c:	4f10      	ldr	r7, [pc, #64]	; (8008f80 <hci_init+0x48>)
  if(UserEvtRx != NULL)
 8008f3e:	b100      	cbz	r0, 8008f42 <hci_init+0xa>
    hciContext.UserEvtRx = UserEvtRx;
 8008f40:	61f8      	str	r0, [r7, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8008f42:	4810      	ldr	r0, [pc, #64]	; (8008f84 <hci_init+0x4c>)
 8008f44:	4c10      	ldr	r4, [pc, #64]	; (8008f88 <hci_init+0x50>)
  hci_tl_lowlevel_init();

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008f46:	4606      	mov	r6, r0
  list_init_head(&hciReadPktPool);
 8008f48:	f000 f974 	bl	8009234 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008f4c:	480f      	ldr	r0, [pc, #60]	; (8008f8c <hci_init+0x54>)
 8008f4e:	f000 f971 	bl	8009234 <list_init_head>
  hci_tl_lowlevel_init();
 8008f52:	f7f8 fdb1 	bl	8001ab8 <hci_tl_lowlevel_init>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008f56:	f504 65af 	add.w	r5, r4, #1400	; 0x578
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	348c      	adds	r4, #140	; 0x8c
 8008f60:	f000 f984 	bl	800926c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008f64:	42a5      	cmp	r5, r4
 8008f66:	d1f8      	bne.n	8008f5a <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	b10b      	cbz	r3, 8008f70 <hci_init+0x38>
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	b113      	cbz	r3, 8008f7a <hci_init+0x42>
}
 8008f74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008f78:	4718      	bx	r3
}
 8008f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7e:	bf00      	nop
 8008f80:	20000228 	.word	0x20000228
 8008f84:	20009c90 	.word	0x20009c90
 8008f88:	20000248 	.word	0x20000248
 8008f8c:	20009c98 	.word	0x20009c98

08008f90 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008f90:	4b06      	ldr	r3, [pc, #24]	; (8008fac <hci_register_io_bus+0x1c>)
  hciContext.io.Receive = fops->Receive;  
  hciContext.io.Send    = fops->Send;
  hciContext.io.GetTick = fops->GetTick;
 8008f92:	6982      	ldr	r2, [r0, #24]
{
 8008f94:	b430      	push	{r4, r5}
  hciContext.io.Init    = fops->Init; 
 8008f96:	6805      	ldr	r5, [r0, #0]
  hciContext.io.GetTick = fops->GetTick;
 8008f98:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8008f9a:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 8008f9e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8008fa2:	6902      	ldr	r2, [r0, #16]
 8008fa4:	611a      	str	r2, [r3, #16]
  hciContext.io.Init    = fops->Init; 
 8008fa6:	601d      	str	r5, [r3, #0]
}
 8008fa8:	bc30      	pop	{r4, r5}
 8008faa:	4770      	bx	lr
 8008fac:	20000228 	.word	0x20000228

08008fb0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8008fb8:	2300      	movs	r3, #0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008fba:	a802      	add	r0, sp, #8
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008fbc:	8877      	ldrh	r7, [r6, #2]
 8008fbe:	f8b6 9000 	ldrh.w	r9, [r6]
  tHciDataPacket * hciReadPacket = NULL;
 8008fc2:	9301      	str	r3, [sp, #4]
{
 8008fc4:	4688      	mov	r8, r1
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008fc6:	4c6a      	ldr	r4, [pc, #424]	; (8009170 <hci_send_req+0x1c0>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008fc8:	4d6a      	ldr	r5, [pc, #424]	; (8009174 <hci_send_req+0x1c4>)
  list_init_head(&hciTempQueue);
 8008fca:	f000 f933 	bl	8009234 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008fce:	e005      	b.n	8008fdc <hci_send_req+0x2c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008fd0:	f000 f958 	bl	8009284 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008fd4:	9904      	ldr	r1, [sp, #16]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 f948 	bl	800926c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 f985 	bl	80092ec <list_get_size>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b04      	cmp	r3, #4
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008fe6:	a904      	add	r1, sp, #16
 8008fe8:	4628      	mov	r0, r5
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008fea:	ddf1      	ble.n	8008fd0 <hci_send_req+0x20>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008fec:	8873      	ldrh	r3, [r6, #2]
 8008fee:	8832      	ldrh	r2, [r6, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008ff0:	7b34      	ldrb	r4, [r6, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008ff2:	68b1      	ldr	r1, [r6, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008ff4:	f88d 4013 	strb.w	r4, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ffc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 8009000:	2501      	movs	r5, #1
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009002:	4622      	mov	r2, r4
 8009004:	a805      	add	r0, sp, #20
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8009006:	f8ad 3011 	strh.w	r3, [sp, #17]
  payload[0] = HCI_COMMAND_PKT;
 800900a:	f88d 5010 	strb.w	r5, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800900e:	f002 fcdb 	bl	800b9c8 <memcpy>
  if (hciContext.io.Send)
 8009012:	4b59      	ldr	r3, [pc, #356]	; (8009178 <hci_send_req+0x1c8>)
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	b113      	cbz	r3, 800901e <hci_send_req+0x6e>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009018:	1d21      	adds	r1, r4, #4
 800901a:	a804      	add	r0, sp, #16
 800901c:	4798      	blx	r3
  
  if (async)
 800901e:	f1b8 0f00 	cmp.w	r8, #0
 8009022:	f040 808f 	bne.w	8009144 <hci_send_req+0x194>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009026:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800902a:	ea47 2789 	orr.w	r7, r7, r9, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800902e:	4d51      	ldr	r5, [pc, #324]	; (8009174 <hci_send_req+0x1c4>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009030:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8009170 <hci_send_req+0x1c0>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8009034:	b2bf      	uxth	r7, r7
    uint32_t tickstart = HAL_GetTick();
 8009036:	f7fa fb75 	bl	8003724 <HAL_GetTick>
 800903a:	4604      	mov	r4, r0
 800903c:	e002      	b.n	8009044 <hci_send_req+0x94>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800903e:	f000 f8fd 	bl	800923c <list_is_empty>
 8009042:	b1f0      	cbz	r0, 8009082 <hci_send_req+0xd2>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009044:	f7fa fb6e 	bl	8003724 <HAL_GetTick>
 8009048:	1b03      	subs	r3, r0, r4
 800904a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800904e:	4628      	mov	r0, r5
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8009050:	d9f5      	bls.n	800903e <hci_send_req+0x8e>
 8009052:	9901      	ldr	r1, [sp, #4]
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009054:	2900      	cmp	r1, #0
 8009056:	d142      	bne.n	80090de <hci_send_req+0x12e>
    list_insert_head(dest_list, tmp_node);
 8009058:	4c46      	ldr	r4, [pc, #280]	; (8009174 <hci_send_req+0x1c4>)
 800905a:	e005      	b.n	8009068 <hci_send_req+0xb8>
    list_remove_tail(src_list, &tmp_node);
 800905c:	f000 f92c 	bl	80092b8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8009060:	9904      	ldr	r1, [sp, #16]
 8009062:	4620      	mov	r0, r4
 8009064:	f000 f8f6 	bl	8009254 <list_insert_head>
  while (!list_is_empty(src_list))
 8009068:	a802      	add	r0, sp, #8
 800906a:	f000 f8e7 	bl	800923c <list_is_empty>
 800906e:	4603      	mov	r3, r0
    list_remove_tail(src_list, &tmp_node);
 8009070:	a904      	add	r1, sp, #16
 8009072:	a802      	add	r0, sp, #8
  while (!list_is_empty(src_list))
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0f1      	beq.n	800905c <hci_send_req+0xac>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return -1;
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 800907c:	b025      	add	sp, #148	; 0x94
 800907e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8009082:	a901      	add	r1, sp, #4
 8009084:	4628      	mov	r0, r5
 8009086:	f000 f8fd 	bl	8009284 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800908a:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 800908c:	7a0b      	ldrb	r3, [r1, #8]
 800908e:	2b04      	cmp	r3, #4
 8009090:	d112      	bne.n	80090b8 <hci_send_req+0x108>
      switch (event_pckt->evt) 
 8009092:	7a4b      	ldrb	r3, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009094:	f891 4088 	ldrb.w	r4, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8009098:	2b10      	cmp	r3, #16
 800909a:	d020      	beq.n	80090de <hci_send_req+0x12e>
 800909c:	d823      	bhi.n	80090e6 <hci_send_req+0x136>
 800909e:	2b0e      	cmp	r3, #14
 80090a0:	d01a      	beq.n	80090d8 <hci_send_req+0x128>
 80090a2:	2b0f      	cmp	r3, #15
 80090a4:	d108      	bne.n	80090b8 <hci_send_req+0x108>
        if (cs->opcode != opcode)
 80090a6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 80090aa:	42bb      	cmp	r3, r7
 80090ac:	d117      	bne.n	80090de <hci_send_req+0x12e>
        if (r->event != EVT_CMD_STATUS) {
 80090ae:	6873      	ldr	r3, [r6, #4]
 80090b0:	2b0f      	cmp	r3, #15
 80090b2:	d052      	beq.n	800915a <hci_send_req+0x1aa>
          if (cs->status) {
 80090b4:	7acb      	ldrb	r3, [r1, #11]
 80090b6:	b993      	cbnz	r3, 80090de <hci_send_req+0x12e>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80090b8:	4640      	mov	r0, r8
 80090ba:	f000 f8bf 	bl	800923c <list_is_empty>
 80090be:	b120      	cbz	r0, 80090ca <hci_send_req+0x11a>
 80090c0:	4628      	mov	r0, r5
 80090c2:	f000 f8bb 	bl	800923c <list_is_empty>
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d140      	bne.n	800914c <hci_send_req+0x19c>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80090ca:	9901      	ldr	r1, [sp, #4]
 80090cc:	a802      	add	r0, sp, #8
 80090ce:	f000 f8cd 	bl	800926c <list_insert_tail>
      hciReadPacket=NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	e7ae      	b.n	8009036 <hci_send_req+0x86>
        if (cc->opcode != opcode)
 80090d8:	898b      	ldrh	r3, [r1, #12]
 80090da:	42bb      	cmp	r3, r7
 80090dc:	d014      	beq.n	8009108 <hci_send_req+0x158>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80090de:	4824      	ldr	r0, [pc, #144]	; (8009170 <hci_send_req+0x1c0>)
 80090e0:	f000 f8b8 	bl	8009254 <list_insert_head>
 80090e4:	e7b8      	b.n	8009058 <hci_send_req+0xa8>
      switch (event_pckt->evt) 
 80090e6:	2b3e      	cmp	r3, #62	; 0x3e
 80090e8:	d1e6      	bne.n	80090b8 <hci_send_req+0x108>
        if (me->subevent != r->event)
 80090ea:	7aca      	ldrb	r2, [r1, #11]
 80090ec:	6873      	ldr	r3, [r6, #4]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d1e2      	bne.n	80090b8 <hci_send_req+0x108>
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80090f2:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
        len -= 1;
 80090f6:	1f22      	subs	r2, r4, #4
        r->rlen = MIN(len, r->rlen);
 80090f8:	429a      	cmp	r2, r3
 80090fa:	bf28      	it	cs
 80090fc:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80090fe:	310c      	adds	r1, #12
        r->rlen = MIN(len, r->rlen);
 8009100:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009102:	f002 fc61 	bl	800b9c8 <memcpy>
        goto done;
 8009106:	e009      	b.n	800911c <hci_send_req+0x16c>
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009108:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
        len -= EVT_CMD_COMPLETE_SIZE;
 800910c:	1fa2      	subs	r2, r4, #6
        r->rlen = MIN(len, r->rlen);
 800910e:	429a      	cmp	r2, r3
 8009110:	bf28      	it	cs
 8009112:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009114:	310e      	adds	r1, #14
        r->rlen = MIN(len, r->rlen);
 8009116:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009118:	f002 fc56 	bl	800b9c8 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800911c:	9901      	ldr	r1, [sp, #4]
 800911e:	4814      	ldr	r0, [pc, #80]	; (8009170 <hci_send_req+0x1c0>)
    list_insert_head(dest_list, tmp_node);
 8009120:	4c14      	ldr	r4, [pc, #80]	; (8009174 <hci_send_req+0x1c4>)
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009122:	f000 f897 	bl	8009254 <list_insert_head>
static void move_list(tListNode * dest_list, tListNode * src_list)
 8009126:	e005      	b.n	8009134 <hci_send_req+0x184>
    list_remove_tail(src_list, &tmp_node);
 8009128:	f000 f8c6 	bl	80092b8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800912c:	9904      	ldr	r1, [sp, #16]
 800912e:	4620      	mov	r0, r4
 8009130:	f000 f890 	bl	8009254 <list_insert_head>
  while (!list_is_empty(src_list))
 8009134:	a802      	add	r0, sp, #8
 8009136:	f000 f881 	bl	800923c <list_is_empty>
 800913a:	4603      	mov	r3, r0
    list_remove_tail(src_list, &tmp_node);
 800913c:	a904      	add	r1, sp, #16
 800913e:	a802      	add	r0, sp, #8
  while (!list_is_empty(src_list))
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0f1      	beq.n	8009128 <hci_send_req+0x178>
    return 0;
 8009144:	2000      	movs	r0, #0
}
 8009146:	b025      	add	sp, #148	; 0x94
 8009148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800914c:	9901      	ldr	r1, [sp, #4]
 800914e:	4640      	mov	r0, r8
 8009150:	f000 f88c 	bl	800926c <list_insert_tail>
      hciReadPacket=NULL;
 8009154:	2300      	movs	r3, #0
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	e76d      	b.n	8009036 <hci_send_req+0x86>
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800915a:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800915e:	1ee2      	subs	r2, r4, #3
        r->rlen = MIN(len, r->rlen);
 8009160:	429a      	cmp	r2, r3
 8009162:	bf28      	it	cs
 8009164:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009166:	310b      	adds	r1, #11
        r->rlen = MIN(len, r->rlen);
 8009168:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800916a:	f002 fc2d 	bl	800b9c8 <memcpy>
        goto done;
 800916e:	e7d5      	b.n	800911c <hci_send_req+0x16c>
 8009170:	20009c90 	.word	0x20009c90
 8009174:	20009c98 	.word	0x20009c98
 8009178:	20000228 	.word	0x20000228

0800917c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 8009180:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009182:	4c0d      	ldr	r4, [pc, #52]	; (80091b8 <hci_user_evt_proc+0x3c>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
 8009184:	4e0d      	ldr	r6, [pc, #52]	; (80091bc <hci_user_evt_proc+0x40>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009186:	4d0e      	ldr	r5, [pc, #56]	; (80091c0 <hci_user_evt_proc+0x44>)
  tHciDataPacket * hciReadPacket = NULL;
 8009188:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800918a:	e00a      	b.n	80091a2 <hci_user_evt_proc+0x26>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800918c:	f000 f87a 	bl	8009284 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8009190:	69f3      	ldr	r3, [r6, #28]
 8009192:	b113      	cbz	r3, 800919a <hci_user_evt_proc+0x1e>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8009194:	9801      	ldr	r0, [sp, #4]
 8009196:	3008      	adds	r0, #8
 8009198:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800919a:	9901      	ldr	r1, [sp, #4]
 800919c:	4628      	mov	r0, r5
 800919e:	f000 f865 	bl	800926c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80091a2:	4620      	mov	r0, r4
 80091a4:	f000 f84a 	bl	800923c <list_is_empty>
 80091a8:	4603      	mov	r3, r0
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80091aa:	a901      	add	r1, sp, #4
 80091ac:	4620      	mov	r0, r4
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d0ec      	beq.n	800918c <hci_user_evt_proc+0x10>
  }
}
 80091b2:	b002      	add	sp, #8
 80091b4:	bd70      	pop	{r4, r5, r6, pc}
 80091b6:	bf00      	nop
 80091b8:	20009c98 	.word	0x20009c98
 80091bc:	20000228 	.word	0x20000228
 80091c0:	20009c90 	.word	0x20009c90

080091c4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80091c4:	b530      	push	{r4, r5, lr}
 80091c6:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 80091c8:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80091ca:	4817      	ldr	r0, [pc, #92]	; (8009228 <hci_notify_asynch_evt+0x64>)
  tHciDataPacket * hciReadPacket = NULL;
 80091cc:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80091ce:	f000 f835 	bl	800923c <list_is_empty>
 80091d2:	b110      	cbz	r0, 80091da <hci_notify_asynch_evt+0x16>
      }
    }
  }
  else 
  {
    ret = 1;
 80091d4:	2001      	movs	r0, #1
  }
  return ret;
  
}
 80091d6:	b003      	add	sp, #12
 80091d8:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80091da:	4605      	mov	r5, r0
 80091dc:	a901      	add	r1, sp, #4
 80091de:	4812      	ldr	r0, [pc, #72]	; (8009228 <hci_notify_asynch_evt+0x64>)
 80091e0:	f000 f850 	bl	8009284 <list_remove_head>
    if (hciContext.io.Receive)
 80091e4:	4b11      	ldr	r3, [pc, #68]	; (800922c <hci_notify_asynch_evt+0x68>)
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	b1db      	cbz	r3, 8009222 <hci_notify_asynch_evt+0x5e>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80091ea:	9801      	ldr	r0, [sp, #4]
 80091ec:	2180      	movs	r1, #128	; 0x80
 80091ee:	3008      	adds	r0, #8
 80091f0:	4798      	blx	r3
      if (data_len > 0)
 80091f2:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
        hciReadPacket->data_len = data_len;
 80091f6:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 80091f8:	d00d      	beq.n	8009216 <hci_notify_asynch_evt+0x52>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80091fa:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 80091fc:	f881 4088 	strb.w	r4, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8009200:	2b04      	cmp	r3, #4
 8009202:	d108      	bne.n	8009216 <hci_notify_asynch_evt+0x52>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009204:	7a8b      	ldrb	r3, [r1, #10]
 8009206:	3c03      	subs	r4, #3
 8009208:	42a3      	cmp	r3, r4
 800920a:	d104      	bne.n	8009216 <hci_notify_asynch_evt+0x52>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800920c:	4808      	ldr	r0, [pc, #32]	; (8009230 <hci_notify_asynch_evt+0x6c>)
 800920e:	f000 f82d 	bl	800926c <list_insert_tail>
  int32_t ret = 0;
 8009212:	4628      	mov	r0, r5
 8009214:	e7df      	b.n	80091d6 <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009216:	4804      	ldr	r0, [pc, #16]	; (8009228 <hci_notify_asynch_evt+0x64>)
 8009218:	f000 f81c 	bl	8009254 <list_insert_head>
  int32_t ret = 0;
 800921c:	2000      	movs	r0, #0
}
 800921e:	b003      	add	sp, #12
 8009220:	bd30      	pop	{r4, r5, pc}
  int32_t ret = 0;
 8009222:	4618      	mov	r0, r3
  return ret;
 8009224:	e7d7      	b.n	80091d6 <hci_notify_asynch_evt+0x12>
 8009226:	bf00      	nop
 8009228:	20009c90 	.word	0x20009c90
 800922c:	20000228 	.word	0x20000228
 8009230:	20009c98 	.word	0x20009c98

08009234 <list_init_head>:
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;	
 8009234:	e9c0 0000 	strd	r0, r0, [r0]
}
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop

0800923c <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800923c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009240:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009242:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 8009244:	1a18      	subs	r0, r3, r0
 8009246:	fab0 f080 	clz	r0, r0
 800924a:	0940      	lsrs	r0, r0, #5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800924c:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop

08009254 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009254:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009258:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800925a:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 800925c:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 8009260:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8009262:	680a      	ldr	r2, [r1, #0]
 8009264:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009266:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800926a:	4770      	bx	lr

0800926c <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800926c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009270:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 8009272:	6842      	ldr	r2, [r0, #4]
 8009274:	e9c1 0200 	strd	r0, r2, [r1]
  listHead->prev = node;
 8009278:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800927a:	684a      	ldr	r2, [r1, #4]
 800927c:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800927e:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009282:	4770      	bx	lr

08009284 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009284:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009286:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800928a:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800928c:	6803      	ldr	r3, [r0, #0]
 800928e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009290:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009294:	b672      	cpsid	i
  (node->prev)->next = node->next;
 8009296:	e9d3 3200 	ldrd	r3, r2, [r3]
 800929a:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 800929c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800929e:	f380 8810 	msr	PRIMASK, r0
  list_remove_node (listHead->next);
  (*node)->next = NULL;
 80092a2:	680a      	ldr	r2, [r1, #0]
 80092a4:	2300      	movs	r3, #0
 80092a6:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 80092a8:	680a      	ldr	r2, [r1, #0]
 80092aa:	6053      	str	r3, [r2, #4]
 80092ac:	f384 8810 	msr	PRIMASK, r4
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80092b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop

080092b8 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80092b8:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80092be:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80092c0:	6843      	ldr	r3, [r0, #4]
 80092c2:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80092c8:	b672      	cpsid	i
  (node->prev)->next = node->next;
 80092ca:	e9d3 3200 	ldrd	r3, r2, [r3]
 80092ce:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 80092d0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092d2:	f380 8810 	msr	PRIMASK, r0
  list_remove_node (listHead->prev);
  (*node)->next = NULL;
 80092d6:	680a      	ldr	r2, [r1, #0]
 80092d8:	2300      	movs	r3, #0
 80092da:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 80092dc:	680a      	ldr	r2, [r1, #0]
 80092de:	6053      	str	r3, [r2, #4]
 80092e0:	f384 8810 	msr	PRIMASK, r4
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80092e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop

080092ec <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80092ec:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ee:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80092f2:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80092f4:	6803      	ldr	r3, [r0, #0]
  while (temp != listHead)
 80092f6:	429a      	cmp	r2, r3
  int size = 0;
 80092f8:	f04f 0000 	mov.w	r0, #0
  while (temp != listHead)
 80092fc:	d004      	beq.n	8009308 <list_get_size+0x1c>
  {
    size++;
    temp = temp->next;		
 80092fe:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 8009300:	429a      	cmp	r2, r3
    size++;
 8009302:	f100 0001 	add.w	r0, r0, #1
  while (temp != listHead)
 8009306:	d1fa      	bne.n	80092fe <list_get_size+0x12>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009308:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop

08009310 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009310:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8009312:	4b05      	ldr	r3, [pc, #20]	; (8009328 <SysTick_Handler+0x18>)
 8009314:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009316:	f001 fbef 	bl	800aaf8 <xTaskGetSchedulerState>
 800931a:	2801      	cmp	r0, #1
 800931c:	d100      	bne.n	8009320 <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800931e:	bd08      	pop	{r3, pc}
 8009320:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8009324:	f002 b90e 	b.w	800b544 <xPortSysTickHandler>
 8009328:	e000e010 	.word	0xe000e010

0800932c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800932c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009330:	b92b      	cbnz	r3, 800933e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009332:	4b06      	ldr	r3, [pc, #24]	; (800934c <osKernelInitialize+0x20>)
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	b928      	cbnz	r0, 8009344 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009338:	2201      	movs	r2, #1
 800933a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800933c:	4770      	bx	lr
    stat = osErrorISR;
 800933e:	f06f 0005 	mvn.w	r0, #5
 8009342:	4770      	bx	lr
    } else {
      stat = osError;
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	20000a2c 	.word	0x20000a2c

08009350 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009350:	b510      	push	{r4, lr}
 8009352:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009356:	b974      	cbnz	r4, 8009376 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8009358:	4b08      	ldr	r3, [pc, #32]	; (800937c <osKernelStart+0x2c>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	2a01      	cmp	r2, #1
 800935e:	d107      	bne.n	8009370 <osKernelStart+0x20>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009360:	4907      	ldr	r1, [pc, #28]	; (8009380 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009362:	2202      	movs	r2, #2
 8009364:	77cc      	strb	r4, [r1, #31]
 8009366:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009368:	f001 f8e2 	bl	800a530 <vTaskStartScheduler>
      stat = osOK;
 800936c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800936e:	bd10      	pop	{r4, pc}
      stat = osError;
 8009370:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009374:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009376:	f06f 0005 	mvn.w	r0, #5
}
 800937a:	bd10      	pop	{r4, pc}
 800937c:	20000a2c 	.word	0x20000a2c
 8009380:	e000ed00 	.word	0xe000ed00

08009384 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009384:	4b04      	ldr	r3, [pc, #16]	; (8009398 <vApplicationGetIdleTaskMemory+0x14>)
 8009386:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009388:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800938a:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800938c:	4c03      	ldr	r4, [pc, #12]	; (800939c <vApplicationGetIdleTaskMemory+0x18>)
 800938e:	600c      	str	r4, [r1, #0]
}
 8009390:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009394:	6013      	str	r3, [r2, #0]
}
 8009396:	4770      	bx	lr
 8009398:	200009c0 	.word	0x200009c0
 800939c:	200007c0 	.word	0x200007c0

080093a0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <vApplicationGetTimerTaskMemory+0x18>)
 80093a2:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80093a4:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093a6:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093aa:	4c04      	ldr	r4, [pc, #16]	; (80093bc <vApplicationGetTimerTaskMemory+0x1c>)
 80093ac:	600c      	str	r4, [r1, #0]
}
 80093ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093b2:	6013      	str	r3, [r2, #0]
}
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	20001230 	.word	0x20001230
 80093bc:	20000a30 	.word	0x20000a30

080093c0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093c0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093c4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093c8:	2200      	movs	r2, #0
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093ce:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093d0:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093d2:	6043      	str	r3, [r0, #4]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop

080093d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093d8:	2300      	movs	r3, #0
 80093da:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop

080093e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80093e0:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80093e2:	6802      	ldr	r2, [r0, #0]
{
 80093e4:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093e6:	689c      	ldr	r4, [r3, #8]
 80093e8:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093ea:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80093ec:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80093ee:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80093f0:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80093f2:	6099      	str	r1, [r3, #8]
}
 80093f4:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80093f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80093fa:	6002      	str	r2, [r0, #0]
}
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop

08009400 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009400:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009402:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009404:	1c6b      	adds	r3, r5, #1
 8009406:	d010      	beq.n	800942a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009408:	f100 0308 	add.w	r3, r0, #8
 800940c:	461c      	mov	r4, r3
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	42aa      	cmp	r2, r5
 8009414:	d9fa      	bls.n	800940c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009416:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8009418:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800941a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800941c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800941e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009420:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8009422:	6108      	str	r0, [r1, #16]
}
 8009424:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8009426:	6002      	str	r2, [r0, #0]
}
 8009428:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800942a:	6904      	ldr	r4, [r0, #16]
 800942c:	6863      	ldr	r3, [r4, #4]
 800942e:	e7f2      	b.n	8009416 <vListInsert+0x16>

08009430 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009430:	6903      	ldr	r3, [r0, #16]
{
 8009432:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009434:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009438:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800943a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800943c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800943e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009440:	bf08      	it	eq
 8009442:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8009444:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8009446:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800944a:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800944c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800944e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009450:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8009452:	6818      	ldr	r0, [r3, #0]
}
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop

08009458 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800945c:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800945e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009460:	b920      	cbnz	r0, 800946c <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009462:	6825      	ldr	r5, [r4, #0]
 8009464:	b35d      	cbz	r5, 80094be <prvCopyDataToQueue+0x66>
 8009466:	3601      	adds	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009468:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800946a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800946c:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800946e:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 8009470:	b985      	cbnz	r5, 8009494 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009472:	6860      	ldr	r0, [r4, #4]
 8009474:	f002 faa8 	bl	800b9c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009478:	6863      	ldr	r3, [r4, #4]
 800947a:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800947c:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800947e:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009480:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009482:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009484:	f106 0601 	add.w	r6, r6, #1
 8009488:	bf24      	itt	cs
 800948a:	6823      	ldrcs	r3, [r4, #0]
 800948c:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800948e:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009490:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009492:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009494:	68e0      	ldr	r0, [r4, #12]
 8009496:	f002 fa97 	bl	800b9c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800949a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800949c:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800949e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094a0:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094a2:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094a4:	60e3      	str	r3, [r4, #12]
 80094a6:	f1c2 0200 	rsb	r2, r2, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094aa:	d202      	bcs.n	80094b2 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80094ac:	68a3      	ldr	r3, [r4, #8]
 80094ae:	441a      	add	r2, r3
 80094b0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80094b2:	2d02      	cmp	r5, #2
 80094b4:	d008      	beq.n	80094c8 <prvCopyDataToQueue+0x70>
 80094b6:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80094b8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094ba:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80094bc:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094be:	68a0      	ldr	r0, [r4, #8]
 80094c0:	f001 fb2a 	bl	800ab18 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094c4:	60a5      	str	r5, [r4, #8]
 80094c6:	e7ce      	b.n	8009466 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094c8:	2e01      	cmp	r6, #1
 80094ca:	bf38      	it	cc
 80094cc:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 80094ce:	2000      	movs	r0, #0
 80094d0:	e7ca      	b.n	8009468 <prvCopyDataToQueue+0x10>
 80094d2:	bf00      	nop

080094d4 <xQueueGenericCreateStatic>:
	{
 80094d4:	b530      	push	{r4, r5, lr}
 80094d6:	b083      	sub	sp, #12
 80094d8:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094dc:	b940      	cbnz	r0, 80094f0 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80094de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	e7fe      	b.n	80094ee <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80094f0:	461c      	mov	r4, r3
 80094f2:	b1e3      	cbz	r3, 800952e <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80094f4:	b172      	cbz	r2, 8009514 <xQueueGenericCreateStatic+0x40>
 80094f6:	b319      	cbz	r1, 8009540 <xQueueGenericCreateStatic+0x6c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094f8:	2350      	movs	r3, #80	; 0x50
 80094fa:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	2b50      	cmp	r3, #80	; 0x50
 8009500:	d027      	beq.n	8009552 <xQueueGenericCreateStatic+0x7e>
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	e7fe      	b.n	8009512 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009514:	2900      	cmp	r1, #0
 8009516:	d146      	bne.n	80095a6 <xQueueGenericCreateStatic+0xd2>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009518:	2350      	movs	r3, #80	; 0x50
 800951a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800951c:	9b01      	ldr	r3, [sp, #4]
 800951e:	2b50      	cmp	r3, #80	; 0x50
 8009520:	d1ef      	bne.n	8009502 <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009522:	2301      	movs	r3, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009524:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009526:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800952a:	4622      	mov	r2, r4
 800952c:	e015      	b.n	800955a <xQueueGenericCreateStatic+0x86>
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800953e:	e7fe      	b.n	800953e <xQueueGenericCreateStatic+0x6a>
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009550:	e7fe      	b.n	8009550 <xQueueGenericCreateStatic+0x7c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009552:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800955a:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 800955e:	6022      	str	r2, [r4, #0]
	taskENTER_CRITICAL();
 8009560:	f001 ff88 	bl	800b474 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009564:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 8009568:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800956a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800956c:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009570:	1acb      	subs	r3, r1, r3
 8009572:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009574:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009576:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8009578:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800957a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800957c:	e9c4 2302 	strd	r2, r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8009580:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009584:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8009588:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800958c:	f7ff ff18 	bl	80093c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009590:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009594:	f7ff ff14 	bl	80093c0 <vListInitialise>
	taskEXIT_CRITICAL();
 8009598:	f001 ff8e 	bl	800b4b8 <vPortExitCritical>
	}
 800959c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800959e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	}
 80095a2:	b003      	add	sp, #12
 80095a4:	bd30      	pop	{r4, r5, pc}
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80095b6:	e7fe      	b.n	80095b6 <xQueueGenericCreateStatic+0xe2>

080095b8 <xQueueGenericSend>:
{
 80095b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80095c0:	2800      	cmp	r0, #0
 80095c2:	f000 80ac 	beq.w	800971e <xQueueGenericSend+0x166>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095c6:	4688      	mov	r8, r1
 80095c8:	461f      	mov	r7, r3
 80095ca:	4604      	mov	r4, r0
 80095cc:	2900      	cmp	r1, #0
 80095ce:	f000 8099 	beq.w	8009704 <xQueueGenericSend+0x14c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095d2:	2f02      	cmp	r7, #2
 80095d4:	d10b      	bne.n	80095ee <xQueueGenericSend+0x36>
 80095d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d008      	beq.n	80095ee <xQueueGenericSend+0x36>
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	e7fe      	b.n	80095ec <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095ee:	f001 fa83 	bl	800aaf8 <xTaskGetSchedulerState>
 80095f2:	4682      	mov	sl, r0
 80095f4:	2800      	cmp	r0, #0
 80095f6:	f000 809b 	beq.w	8009730 <xQueueGenericSend+0x178>
 80095fa:	f04f 0a00 	mov.w	sl, #0
					portYIELD_WITHIN_API();
 80095fe:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 80098c0 <xQueueGenericSend+0x308>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009602:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8009606:	f001 ff35 	bl	800b474 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800960a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800960c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800960e:	429a      	cmp	r2, r3
 8009610:	f0c0 80f4 	bcc.w	80097fc <xQueueGenericSend+0x244>
 8009614:	2f02      	cmp	r7, #2
 8009616:	f000 80f1 	beq.w	80097fc <xQueueGenericSend+0x244>
				if( xTicksToWait == ( TickType_t ) 0 )
 800961a:	9d01      	ldr	r5, [sp, #4]
 800961c:	2d00      	cmp	r5, #0
 800961e:	f000 814a 	beq.w	80098b6 <xQueueGenericSend+0x2fe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009622:	ad02      	add	r5, sp, #8
				else if( xEntryTimeSet == pdFALSE )
 8009624:	f1ba 0f00 	cmp.w	sl, #0
 8009628:	f000 80e4 	beq.w	80097f4 <xQueueGenericSend+0x23c>
		taskEXIT_CRITICAL();
 800962c:	f001 ff44 	bl	800b4b8 <vPortExitCritical>
		vTaskSuspendAll();
 8009630:	f001 f81c 	bl	800a66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009634:	f001 ff1e 	bl	800b474 <vPortEnterCritical>
 8009638:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800963c:	2bff      	cmp	r3, #255	; 0xff
 800963e:	bf04      	itt	eq
 8009640:	2300      	moveq	r3, #0
 8009642:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8009646:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800964a:	2bff      	cmp	r3, #255	; 0xff
 800964c:	bf04      	itt	eq
 800964e:	2300      	moveq	r3, #0
 8009650:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8009654:	f001 ff30 	bl	800b4b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009658:	4628      	mov	r0, r5
 800965a:	a901      	add	r1, sp, #4
 800965c:	f001 f9dc 	bl	800aa18 <xTaskCheckForTimeOut>
 8009660:	2800      	cmp	r0, #0
 8009662:	f040 80e8 	bne.w	8009836 <xQueueGenericSend+0x27e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009666:	f001 ff05 	bl	800b474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800966a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800966c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800966e:	429a      	cmp	r2, r3
 8009670:	d06b      	beq.n	800974a <xQueueGenericSend+0x192>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8009672:	f001 ff21 	bl	800b4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009676:	f001 fefd 	bl	800b474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800967a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800967e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009680:	2d00      	cmp	r5, #0
 8009682:	dc05      	bgt.n	8009690 <xQueueGenericSend+0xd8>
 8009684:	e012      	b.n	80096ac <xQueueGenericSend+0xf4>
			--cTxLock;
 8009686:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009688:	f013 0fff 	tst.w	r3, #255	; 0xff
 800968c:	b25d      	sxtb	r5, r3
 800968e:	d00d      	beq.n	80096ac <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009690:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009692:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009694:	b153      	cbz	r3, 80096ac <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009696:	f001 f96b 	bl	800a970 <xTaskRemoveFromEventList>
 800969a:	2800      	cmp	r0, #0
 800969c:	d0f3      	beq.n	8009686 <xQueueGenericSend+0xce>
						vTaskMissedYield();
 800969e:	f001 fa0b 	bl	800aab8 <vTaskMissedYield>
			--cTxLock;
 80096a2:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096a8:	b25d      	sxtb	r5, r3
 80096aa:	d1f1      	bne.n	8009690 <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 80096ac:	23ff      	movs	r3, #255	; 0xff
 80096ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80096b2:	f001 ff01 	bl	800b4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80096b6:	f001 fedd 	bl	800b474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80096ba:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80096be:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096c0:	2d00      	cmp	r5, #0
 80096c2:	dd15      	ble.n	80096f0 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096c4:	f104 0a10 	add.w	sl, r4, #16
 80096c8:	e004      	b.n	80096d4 <xQueueGenericSend+0x11c>
				--cRxLock;
 80096ca:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096d0:	b25d      	sxtb	r5, r3
 80096d2:	d00d      	beq.n	80096f0 <xQueueGenericSend+0x138>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096d4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096d6:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096d8:	b153      	cbz	r3, 80096f0 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096da:	f001 f949 	bl	800a970 <xTaskRemoveFromEventList>
 80096de:	2800      	cmp	r0, #0
 80096e0:	d0f3      	beq.n	80096ca <xQueueGenericSend+0x112>
					vTaskMissedYield();
 80096e2:	f001 f9e9 	bl	800aab8 <vTaskMissedYield>
				--cRxLock;
 80096e6:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096ec:	b25d      	sxtb	r5, r3
 80096ee:	d1f1      	bne.n	80096d4 <xQueueGenericSend+0x11c>
		pxQueue->cRxLock = queueUNLOCKED;
 80096f0:	23ff      	movs	r3, #255	; 0xff
 80096f2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80096f6:	f001 fedf 	bl	800b4b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80096fa:	f000 ffbf 	bl	800a67c <xTaskResumeAll>
 80096fe:	f04f 0a01 	mov.w	sl, #1
 8009702:	e780      	b.n	8009606 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009704:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009706:	2b00      	cmp	r3, #0
 8009708:	f43f af63 	beq.w	80095d2 <xQueueGenericSend+0x1a>
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	e7fe      	b.n	800971c <xQueueGenericSend+0x164>
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800972e:	e7fe      	b.n	800972e <xQueueGenericSend+0x176>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009730:	9b01      	ldr	r3, [sp, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	f43f af63 	beq.w	80095fe <xQueueGenericSend+0x46>
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	e7fe      	b.n	8009748 <xQueueGenericSend+0x190>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800974a:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800974e:	f001 feb3 	bl	800b4b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009752:	9901      	ldr	r1, [sp, #4]
 8009754:	4650      	mov	r0, sl
 8009756:	f001 f873 	bl	800a840 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800975a:	f001 fe8b 	bl	800b474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800975e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009762:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009764:	2d00      	cmp	r5, #0
 8009766:	dc05      	bgt.n	8009774 <xQueueGenericSend+0x1bc>
 8009768:	e012      	b.n	8009790 <xQueueGenericSend+0x1d8>
			--cTxLock;
 800976a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800976c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009770:	b25d      	sxtb	r5, r3
 8009772:	d00d      	beq.n	8009790 <xQueueGenericSend+0x1d8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009774:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009776:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009778:	b153      	cbz	r3, 8009790 <xQueueGenericSend+0x1d8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800977a:	f001 f8f9 	bl	800a970 <xTaskRemoveFromEventList>
 800977e:	2800      	cmp	r0, #0
 8009780:	d0f3      	beq.n	800976a <xQueueGenericSend+0x1b2>
						vTaskMissedYield();
 8009782:	f001 f999 	bl	800aab8 <vTaskMissedYield>
			--cTxLock;
 8009786:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009788:	f013 0fff 	tst.w	r3, #255	; 0xff
 800978c:	b25d      	sxtb	r5, r3
 800978e:	d1f1      	bne.n	8009774 <xQueueGenericSend+0x1bc>
		pxQueue->cTxLock = queueUNLOCKED;
 8009790:	23ff      	movs	r3, #255	; 0xff
 8009792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009796:	f001 fe8f 	bl	800b4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800979a:	f001 fe6b 	bl	800b474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800979e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80097a2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097a4:	2d00      	cmp	r5, #0
 80097a6:	dc05      	bgt.n	80097b4 <xQueueGenericSend+0x1fc>
 80097a8:	e012      	b.n	80097d0 <xQueueGenericSend+0x218>
				--cRxLock;
 80097aa:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80097b0:	b25d      	sxtb	r5, r3
 80097b2:	d00d      	beq.n	80097d0 <xQueueGenericSend+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097b4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097b6:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097b8:	b153      	cbz	r3, 80097d0 <xQueueGenericSend+0x218>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097ba:	f001 f8d9 	bl	800a970 <xTaskRemoveFromEventList>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d0f3      	beq.n	80097aa <xQueueGenericSend+0x1f2>
					vTaskMissedYield();
 80097c2:	f001 f979 	bl	800aab8 <vTaskMissedYield>
				--cRxLock;
 80097c6:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80097cc:	b25d      	sxtb	r5, r3
 80097ce:	d1f1      	bne.n	80097b4 <xQueueGenericSend+0x1fc>
		pxQueue->cRxLock = queueUNLOCKED;
 80097d0:	23ff      	movs	r3, #255	; 0xff
 80097d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80097d6:	f001 fe6f 	bl	800b4b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80097da:	f000 ff4f 	bl	800a67c <xTaskResumeAll>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d18d      	bne.n	80096fe <xQueueGenericSend+0x146>
					portYIELD_WITHIN_API();
 80097e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097e6:	f8c9 3000 	str.w	r3, [r9]
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	e784      	b.n	80096fe <xQueueGenericSend+0x146>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097f4:	4628      	mov	r0, r5
 80097f6:	f001 f903 	bl	800aa00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097fa:	e717      	b.n	800962c <xQueueGenericSend+0x74>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097fc:	463a      	mov	r2, r7
 80097fe:	4641      	mov	r1, r8
 8009800:	4620      	mov	r0, r4
 8009802:	f7ff fe29 	bl	8009458 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009808:	b973      	cbnz	r3, 8009828 <xQueueGenericSend+0x270>
					else if( xYieldRequired != pdFALSE )
 800980a:	b138      	cbz	r0, 800981c <xQueueGenericSend+0x264>
						queueYIELD_IF_USING_PREEMPTION();
 800980c:	4b2c      	ldr	r3, [pc, #176]	; (80098c0 <xQueueGenericSend+0x308>)
 800980e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009812:	601a      	str	r2, [r3, #0]
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800981c:	f001 fe4c 	bl	800b4b8 <vPortExitCritical>
				return pdPASS;
 8009820:	2001      	movs	r0, #1
}
 8009822:	b004      	add	sp, #16
 8009824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009828:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800982c:	f001 f8a0 	bl	800a970 <xTaskRemoveFromEventList>
 8009830:	2800      	cmp	r0, #0
 8009832:	d0f3      	beq.n	800981c <xQueueGenericSend+0x264>
 8009834:	e7ea      	b.n	800980c <xQueueGenericSend+0x254>
	taskENTER_CRITICAL();
 8009836:	f001 fe1d 	bl	800b474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800983a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800983e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009840:	2d00      	cmp	r5, #0
 8009842:	dd11      	ble.n	8009868 <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009844:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8009848:	e004      	b.n	8009854 <xQueueGenericSend+0x29c>
			--cTxLock;
 800984a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800984c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009850:	b25d      	sxtb	r5, r3
 8009852:	d009      	beq.n	8009868 <xQueueGenericSend+0x2b0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009854:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009856:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009858:	b133      	cbz	r3, 8009868 <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800985a:	f001 f889 	bl	800a970 <xTaskRemoveFromEventList>
 800985e:	2800      	cmp	r0, #0
 8009860:	d0f3      	beq.n	800984a <xQueueGenericSend+0x292>
						vTaskMissedYield();
 8009862:	f001 f929 	bl	800aab8 <vTaskMissedYield>
 8009866:	e7f0      	b.n	800984a <xQueueGenericSend+0x292>
		pxQueue->cTxLock = queueUNLOCKED;
 8009868:	23ff      	movs	r3, #255	; 0xff
 800986a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800986e:	f001 fe23 	bl	800b4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009872:	f001 fdff 	bl	800b474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009876:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800987a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800987c:	2d00      	cmp	r5, #0
 800987e:	dd11      	ble.n	80098a4 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009880:	f104 0610 	add.w	r6, r4, #16
 8009884:	e004      	b.n	8009890 <xQueueGenericSend+0x2d8>
				--cRxLock;
 8009886:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009888:	f013 0fff 	tst.w	r3, #255	; 0xff
 800988c:	b25d      	sxtb	r5, r3
 800988e:	d009      	beq.n	80098a4 <xQueueGenericSend+0x2ec>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009890:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009892:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009894:	b133      	cbz	r3, 80098a4 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009896:	f001 f86b 	bl	800a970 <xTaskRemoveFromEventList>
 800989a:	2800      	cmp	r0, #0
 800989c:	d0f3      	beq.n	8009886 <xQueueGenericSend+0x2ce>
					vTaskMissedYield();
 800989e:	f001 f90b 	bl	800aab8 <vTaskMissedYield>
 80098a2:	e7f0      	b.n	8009886 <xQueueGenericSend+0x2ce>
		pxQueue->cRxLock = queueUNLOCKED;
 80098a4:	23ff      	movs	r3, #255	; 0xff
 80098a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80098aa:	f001 fe05 	bl	800b4b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80098ae:	f000 fee5 	bl	800a67c <xTaskResumeAll>
			return errQUEUE_FULL;
 80098b2:	2000      	movs	r0, #0
 80098b4:	e7b5      	b.n	8009822 <xQueueGenericSend+0x26a>
					taskEXIT_CRITICAL();
 80098b6:	f001 fdff 	bl	800b4b8 <vPortExitCritical>
					return errQUEUE_FULL;
 80098ba:	4628      	mov	r0, r5
 80098bc:	e7b1      	b.n	8009822 <xQueueGenericSend+0x26a>
 80098be:	bf00      	nop
 80098c0:	e000ed04 	.word	0xe000ed04

080098c4 <xQueueGenericSendFromISR>:
{
 80098c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d035      	beq.n	8009938 <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098cc:	4689      	mov	r9, r1
 80098ce:	4690      	mov	r8, r2
 80098d0:	461f      	mov	r7, r3
 80098d2:	4604      	mov	r4, r0
 80098d4:	b321      	cbz	r1, 8009920 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098d6:	2f02      	cmp	r7, #2
 80098d8:	d10b      	bne.n	80098f2 <xQueueGenericSendFromISR+0x2e>
 80098da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d008      	beq.n	80098f2 <xQueueGenericSendFromISR+0x2e>
 80098e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e4:	f383 8811 	msr	BASEPRI, r3
 80098e8:	f3bf 8f6f 	isb	sy
 80098ec:	f3bf 8f4f 	dsb	sy
 80098f0:	e7fe      	b.n	80098f0 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098f2:	f001 fef7 	bl	800b6e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80098f6:	f3ef 8611 	mrs	r6, BASEPRI
 80098fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800990a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800990c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800990e:	429a      	cmp	r2, r3
 8009910:	d31b      	bcc.n	800994a <xQueueGenericSendFromISR+0x86>
 8009912:	2f02      	cmp	r7, #2
 8009914:	d019      	beq.n	800994a <xQueueGenericSendFromISR+0x86>
			xReturn = errQUEUE_FULL;
 8009916:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009918:	f386 8811 	msr	BASEPRI, r6
}
 800991c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009920:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0d7      	beq.n	80098d6 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	e7fe      	b.n	8009936 <xQueueGenericSendFromISR+0x72>
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009948:	e7fe      	b.n	8009948 <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 800994a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800994e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009950:	463a      	mov	r2, r7
 8009952:	4649      	mov	r1, r9
			const int8_t cTxLock = pxQueue->cTxLock;
 8009954:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009956:	4620      	mov	r0, r4
 8009958:	f7ff fd7e 	bl	8009458 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800995c:	1c6b      	adds	r3, r5, #1
 800995e:	d008      	beq.n	8009972 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009960:	1c6b      	adds	r3, r5, #1
 8009962:	b25b      	sxtb	r3, r3
 8009964:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8009968:	2001      	movs	r0, #1
	__asm volatile
 800996a:	f386 8811 	msr	BASEPRI, r6
}
 800996e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	d0f7      	beq.n	8009968 <xQueueGenericSendFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009978:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800997c:	f000 fff8 	bl	800a970 <xTaskRemoveFromEventList>
 8009980:	2800      	cmp	r0, #0
 8009982:	d0f1      	beq.n	8009968 <xQueueGenericSendFromISR+0xa4>
							if( pxHigherPriorityTaskWoken != NULL )
 8009984:	f1b8 0f00 	cmp.w	r8, #0
 8009988:	d0ee      	beq.n	8009968 <xQueueGenericSendFromISR+0xa4>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800998a:	2001      	movs	r0, #1
 800998c:	f8c8 0000 	str.w	r0, [r8]
 8009990:	e7c2      	b.n	8009918 <xQueueGenericSendFromISR+0x54>
 8009992:	bf00      	nop

08009994 <xQueueReceive>:
{
 8009994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009998:	b085      	sub	sp, #20
 800999a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800999c:	2800      	cmp	r0, #0
 800999e:	f000 80f5 	beq.w	8009b8c <xQueueReceive+0x1f8>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099a2:	460e      	mov	r6, r1
 80099a4:	4604      	mov	r4, r0
 80099a6:	2900      	cmp	r1, #0
 80099a8:	f000 808a 	beq.w	8009ac0 <xQueueReceive+0x12c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099ac:	f001 f8a4 	bl	800aaf8 <xTaskGetSchedulerState>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d079      	beq.n	8009aa8 <xQueueReceive+0x114>
		taskENTER_CRITICAL();
 80099b4:	f001 fd5e 	bl	800b474 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099b8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099ba:	2d00      	cmp	r5, #0
 80099bc:	f040 8148 	bne.w	8009c50 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 80dc 	beq.w	8009b80 <xQueueReceive+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099c8:	a802      	add	r0, sp, #8
 80099ca:	f001 f819 	bl	800aa00 <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 80099ce:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8009c98 <xQueueReceive+0x304>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099d2:	f104 0724 	add.w	r7, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 80099d6:	f001 fd6f 	bl	800b4b8 <vPortExitCritical>
		vTaskSuspendAll();
 80099da:	f000 fe47 	bl	800a66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099de:	f001 fd49 	bl	800b474 <vPortEnterCritical>
 80099e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80099e6:	2bff      	cmp	r3, #255	; 0xff
 80099e8:	bf04      	itt	eq
 80099ea:	2300      	moveq	r3, #0
 80099ec:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80099f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80099f4:	2bff      	cmp	r3, #255	; 0xff
 80099f6:	bf04      	itt	eq
 80099f8:	2300      	moveq	r3, #0
 80099fa:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80099fe:	f001 fd5b 	bl	800b4b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a02:	a901      	add	r1, sp, #4
 8009a04:	a802      	add	r0, sp, #8
 8009a06:	f001 f807 	bl	800aa18 <xTaskCheckForTimeOut>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d165      	bne.n	8009ada <xQueueReceive+0x146>
	taskENTER_CRITICAL();
 8009a0e:	f001 fd31 	bl	800b474 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 80c2 	beq.w	8009b9e <xQueueReceive+0x20a>
	taskEXIT_CRITICAL();
 8009a1a:	f001 fd4d 	bl	800b4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009a1e:	f001 fd29 	bl	800b474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009a22:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009a26:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a28:	2d00      	cmp	r5, #0
 8009a2a:	dc05      	bgt.n	8009a38 <xQueueReceive+0xa4>
 8009a2c:	e012      	b.n	8009a54 <xQueueReceive+0xc0>
			--cTxLock;
 8009a2e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a30:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a34:	b25d      	sxtb	r5, r3
 8009a36:	d00d      	beq.n	8009a54 <xQueueReceive+0xc0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a3a:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a3c:	b153      	cbz	r3, 8009a54 <xQueueReceive+0xc0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a3e:	f000 ff97 	bl	800a970 <xTaskRemoveFromEventList>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d0f3      	beq.n	8009a2e <xQueueReceive+0x9a>
						vTaskMissedYield();
 8009a46:	f001 f837 	bl	800aab8 <vTaskMissedYield>
			--cTxLock;
 8009a4a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a4c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a50:	b25d      	sxtb	r5, r3
 8009a52:	d1f1      	bne.n	8009a38 <xQueueReceive+0xa4>
		pxQueue->cTxLock = queueUNLOCKED;
 8009a54:	23ff      	movs	r3, #255	; 0xff
 8009a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009a5a:	f001 fd2d 	bl	800b4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009a5e:	f001 fd09 	bl	800b474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009a62:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009a66:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a68:	2d00      	cmp	r5, #0
 8009a6a:	dd15      	ble.n	8009a98 <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a6c:	f104 0910 	add.w	r9, r4, #16
 8009a70:	e004      	b.n	8009a7c <xQueueReceive+0xe8>
				--cRxLock;
 8009a72:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a74:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a78:	b25d      	sxtb	r5, r3
 8009a7a:	d00d      	beq.n	8009a98 <xQueueReceive+0x104>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a7c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a7e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a80:	b153      	cbz	r3, 8009a98 <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a82:	f000 ff75 	bl	800a970 <xTaskRemoveFromEventList>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d0f3      	beq.n	8009a72 <xQueueReceive+0xde>
					vTaskMissedYield();
 8009a8a:	f001 f815 	bl	800aab8 <vTaskMissedYield>
				--cRxLock;
 8009a8e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a90:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009a94:	b25d      	sxtb	r5, r3
 8009a96:	d1f1      	bne.n	8009a7c <xQueueReceive+0xe8>
		pxQueue->cRxLock = queueUNLOCKED;
 8009a98:	23ff      	movs	r3, #255	; 0xff
 8009a9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009a9e:	f001 fd0b 	bl	800b4b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8009aa2:	f000 fdeb 	bl	800a67c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009aa6:	e062      	b.n	8009b6e <xQueueReceive+0x1da>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009aa8:	9b01      	ldr	r3, [sp, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d082      	beq.n	80099b4 <xQueueReceive+0x20>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	e7fe      	b.n	8009abe <xQueueReceive+0x12a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ac0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f43f af72 	beq.w	80099ac <xQueueReceive+0x18>
 8009ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	e7fe      	b.n	8009ad8 <xQueueReceive+0x144>
	taskENTER_CRITICAL();
 8009ada:	f001 fccb 	bl	800b474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009ade:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009ae2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ae4:	2d00      	cmp	r5, #0
 8009ae6:	dc05      	bgt.n	8009af4 <xQueueReceive+0x160>
 8009ae8:	e012      	b.n	8009b10 <xQueueReceive+0x17c>
			--cTxLock;
 8009aea:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009aec:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009af0:	b25d      	sxtb	r5, r3
 8009af2:	d00d      	beq.n	8009b10 <xQueueReceive+0x17c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009af6:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009af8:	b153      	cbz	r3, 8009b10 <xQueueReceive+0x17c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009afa:	f000 ff39 	bl	800a970 <xTaskRemoveFromEventList>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d0f3      	beq.n	8009aea <xQueueReceive+0x156>
						vTaskMissedYield();
 8009b02:	f000 ffd9 	bl	800aab8 <vTaskMissedYield>
			--cTxLock;
 8009b06:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b08:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b0c:	b25d      	sxtb	r5, r3
 8009b0e:	d1f1      	bne.n	8009af4 <xQueueReceive+0x160>
		pxQueue->cTxLock = queueUNLOCKED;
 8009b10:	23ff      	movs	r3, #255	; 0xff
 8009b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009b16:	f001 fccf 	bl	800b4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009b1a:	f001 fcab 	bl	800b474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009b1e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009b22:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b24:	2d00      	cmp	r5, #0
 8009b26:	dd15      	ble.n	8009b54 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b28:	f104 0910 	add.w	r9, r4, #16
 8009b2c:	e004      	b.n	8009b38 <xQueueReceive+0x1a4>
				--cRxLock;
 8009b2e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b30:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b34:	b25d      	sxtb	r5, r3
 8009b36:	d00d      	beq.n	8009b54 <xQueueReceive+0x1c0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b38:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b3a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b3c:	b153      	cbz	r3, 8009b54 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b3e:	f000 ff17 	bl	800a970 <xTaskRemoveFromEventList>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d0f3      	beq.n	8009b2e <xQueueReceive+0x19a>
					vTaskMissedYield();
 8009b46:	f000 ffb7 	bl	800aab8 <vTaskMissedYield>
				--cRxLock;
 8009b4a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b4c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b50:	b25d      	sxtb	r5, r3
 8009b52:	d1f1      	bne.n	8009b38 <xQueueReceive+0x1a4>
		pxQueue->cRxLock = queueUNLOCKED;
 8009b54:	23ff      	movs	r3, #255	; 0xff
 8009b56:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009b5a:	f001 fcad 	bl	800b4b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8009b5e:	f000 fd8d 	bl	800a67c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8009b62:	f001 fc87 	bl	800b474 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b68:	b153      	cbz	r3, 8009b80 <xQueueReceive+0x1ec>
	taskEXIT_CRITICAL();
 8009b6a:	f001 fca5 	bl	800b4b8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8009b6e:	f001 fc81 	bl	800b474 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b72:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b74:	2d00      	cmp	r5, #0
 8009b76:	d16b      	bne.n	8009c50 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b78:	9b01      	ldr	r3, [sp, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f47f af2b 	bne.w	80099d6 <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 8009b80:	f001 fc9a 	bl	800b4b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009b84:	2000      	movs	r0, #0
}
 8009b86:	b005      	add	sp, #20
 8009b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009b9c:	e7fe      	b.n	8009b9c <xQueueReceive+0x208>
	taskEXIT_CRITICAL();
 8009b9e:	f001 fc8b 	bl	800b4b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ba2:	9901      	ldr	r1, [sp, #4]
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	f000 fe4b 	bl	800a840 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8009baa:	f001 fc63 	bl	800b474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009bae:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009bb2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bb4:	2d00      	cmp	r5, #0
 8009bb6:	dc05      	bgt.n	8009bc4 <xQueueReceive+0x230>
 8009bb8:	e012      	b.n	8009be0 <xQueueReceive+0x24c>
			--cTxLock;
 8009bba:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bbc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009bc0:	b25d      	sxtb	r5, r3
 8009bc2:	d00d      	beq.n	8009be0 <xQueueReceive+0x24c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bc6:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bc8:	b153      	cbz	r3, 8009be0 <xQueueReceive+0x24c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bca:	f000 fed1 	bl	800a970 <xTaskRemoveFromEventList>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d0f3      	beq.n	8009bba <xQueueReceive+0x226>
						vTaskMissedYield();
 8009bd2:	f000 ff71 	bl	800aab8 <vTaskMissedYield>
			--cTxLock;
 8009bd6:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bd8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009bdc:	b25d      	sxtb	r5, r3
 8009bde:	d1f1      	bne.n	8009bc4 <xQueueReceive+0x230>
		pxQueue->cTxLock = queueUNLOCKED;
 8009be0:	23ff      	movs	r3, #255	; 0xff
 8009be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009be6:	f001 fc67 	bl	800b4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009bea:	f001 fc43 	bl	800b474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009bee:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009bf2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bf4:	2d00      	cmp	r5, #0
 8009bf6:	dd15      	ble.n	8009c24 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bf8:	f104 0910 	add.w	r9, r4, #16
 8009bfc:	e004      	b.n	8009c08 <xQueueReceive+0x274>
				--cRxLock;
 8009bfe:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c00:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c04:	b25d      	sxtb	r5, r3
 8009c06:	d00d      	beq.n	8009c24 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c08:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c0a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c0c:	b153      	cbz	r3, 8009c24 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c0e:	f000 feaf 	bl	800a970 <xTaskRemoveFromEventList>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	d0f3      	beq.n	8009bfe <xQueueReceive+0x26a>
					vTaskMissedYield();
 8009c16:	f000 ff4f 	bl	800aab8 <vTaskMissedYield>
				--cRxLock;
 8009c1a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c1c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c20:	b25d      	sxtb	r5, r3
 8009c22:	d1f1      	bne.n	8009c08 <xQueueReceive+0x274>
		pxQueue->cRxLock = queueUNLOCKED;
 8009c24:	23ff      	movs	r3, #255	; 0xff
 8009c26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009c2a:	f001 fc45 	bl	800b4b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8009c2e:	f000 fd25 	bl	800a67c <xTaskResumeAll>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d19b      	bne.n	8009b6e <xQueueReceive+0x1da>
					portYIELD_WITHIN_API();
 8009c36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c3a:	f8c8 3000 	str.w	r3, [r8]
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8009c46:	f001 fc15 	bl	800b474 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c4a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c4c:	2d00      	cmp	r5, #0
 8009c4e:	d093      	beq.n	8009b78 <xQueueReceive+0x1e4>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009c52:	b152      	cbz	r2, 8009c6a <xQueueReceive+0x2d6>
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c54:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c58:	1899      	adds	r1, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c5a:	4281      	cmp	r1, r0
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c5c:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c5e:	bf24      	itt	cs
 8009c60:	6821      	ldrcs	r1, [r4, #0]
 8009c62:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c64:	4630      	mov	r0, r6
 8009c66:	f001 feaf 	bl	800b9c8 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c6a:	3d01      	subs	r5, #1
 8009c6c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c6e:	6923      	ldr	r3, [r4, #16]
 8009c70:	b91b      	cbnz	r3, 8009c7a <xQueueReceive+0x2e6>
				taskEXIT_CRITICAL();
 8009c72:	f001 fc21 	bl	800b4b8 <vPortExitCritical>
				return pdPASS;
 8009c76:	2001      	movs	r0, #1
 8009c78:	e785      	b.n	8009b86 <xQueueReceive+0x1f2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c7a:	f104 0010 	add.w	r0, r4, #16
 8009c7e:	f000 fe77 	bl	800a970 <xTaskRemoveFromEventList>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d0f5      	beq.n	8009c72 <xQueueReceive+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
 8009c86:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <xQueueReceive+0x304>)
 8009c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	e7ec      	b.n	8009c72 <xQueueReceive+0x2de>
 8009c98:	e000ed04 	.word	0xe000ed04

08009c9c <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c9c:	4b1b      	ldr	r3, [pc, #108]	; (8009d0c <vQueueAddToRegistry+0x70>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	b1ba      	cbz	r2, 8009cd2 <vQueueAddToRegistry+0x36>
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	b1f2      	cbz	r2, 8009ce4 <vQueueAddToRegistry+0x48>
 8009ca6:	691a      	ldr	r2, [r3, #16]
 8009ca8:	b1f2      	cbz	r2, 8009ce8 <vQueueAddToRegistry+0x4c>
 8009caa:	699a      	ldr	r2, [r3, #24]
 8009cac:	b1f2      	cbz	r2, 8009cec <vQueueAddToRegistry+0x50>
 8009cae:	6a1a      	ldr	r2, [r3, #32]
 8009cb0:	b1f2      	cbz	r2, 8009cf0 <vQueueAddToRegistry+0x54>
 8009cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cb4:	b1f2      	cbz	r2, 8009cf4 <vQueueAddToRegistry+0x58>
 8009cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cb8:	b1f2      	cbz	r2, 8009cf8 <vQueueAddToRegistry+0x5c>
 8009cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cbc:	b1f2      	cbz	r2, 8009cfc <vQueueAddToRegistry+0x60>
 8009cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cc0:	b1f2      	cbz	r2, 8009d00 <vQueueAddToRegistry+0x64>
 8009cc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cc4:	b1f2      	cbz	r2, 8009d04 <vQueueAddToRegistry+0x68>
 8009cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cc8:	b112      	cbz	r2, 8009cd0 <vQueueAddToRegistry+0x34>
 8009cca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ccc:	b1e2      	cbz	r2, 8009d08 <vQueueAddToRegistry+0x6c>
 8009cce:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cd0:	220a      	movs	r2, #10
	{
 8009cd2:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009cd4:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009cd8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009cdc:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ce2:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	e7f4      	b.n	8009cd2 <vQueueAddToRegistry+0x36>
 8009ce8:	2202      	movs	r2, #2
 8009cea:	e7f2      	b.n	8009cd2 <vQueueAddToRegistry+0x36>
 8009cec:	2203      	movs	r2, #3
 8009cee:	e7f0      	b.n	8009cd2 <vQueueAddToRegistry+0x36>
 8009cf0:	2204      	movs	r2, #4
 8009cf2:	e7ee      	b.n	8009cd2 <vQueueAddToRegistry+0x36>
 8009cf4:	2205      	movs	r2, #5
 8009cf6:	e7ec      	b.n	8009cd2 <vQueueAddToRegistry+0x36>
 8009cf8:	2206      	movs	r2, #6
 8009cfa:	e7ea      	b.n	8009cd2 <vQueueAddToRegistry+0x36>
 8009cfc:	2207      	movs	r2, #7
 8009cfe:	e7e8      	b.n	8009cd2 <vQueueAddToRegistry+0x36>
 8009d00:	2208      	movs	r2, #8
 8009d02:	e7e6      	b.n	8009cd2 <vQueueAddToRegistry+0x36>
 8009d04:	2209      	movs	r2, #9
 8009d06:	e7e4      	b.n	8009cd2 <vQueueAddToRegistry+0x36>
 8009d08:	220b      	movs	r2, #11
 8009d0a:	e7e2      	b.n	8009cd2 <vQueueAddToRegistry+0x36>
 8009d0c:	20009ca0 	.word	0x20009ca0

08009d10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4604      	mov	r4, r0
 8009d14:	460e      	mov	r6, r1
 8009d16:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d18:	f001 fbac 	bl	800b474 <vPortEnterCritical>
 8009d1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009d20:	2bff      	cmp	r3, #255	; 0xff
 8009d22:	bf04      	itt	eq
 8009d24:	2300      	moveq	r3, #0
 8009d26:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8009d2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009d2e:	2bff      	cmp	r3, #255	; 0xff
 8009d30:	bf04      	itt	eq
 8009d32:	2300      	moveq	r3, #0
 8009d34:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8009d38:	f001 fbbe 	bl	800b4b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d045      	beq.n	8009dce <vQueueWaitForMessageRestricted+0xbe>
	taskENTER_CRITICAL();
 8009d42:	f001 fb97 	bl	800b474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009d46:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8009d4a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d4c:	2d00      	cmp	r5, #0
 8009d4e:	dd15      	ble.n	8009d7c <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d50:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8009d54:	e004      	b.n	8009d60 <vQueueWaitForMessageRestricted+0x50>
			--cTxLock;
 8009d56:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d58:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d5c:	b25d      	sxtb	r5, r3
 8009d5e:	d00d      	beq.n	8009d7c <vQueueWaitForMessageRestricted+0x6c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d62:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d64:	b153      	cbz	r3, 8009d7c <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d66:	f000 fe03 	bl	800a970 <xTaskRemoveFromEventList>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d0f3      	beq.n	8009d56 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8009d6e:	f000 fea3 	bl	800aab8 <vTaskMissedYield>
			--cTxLock;
 8009d72:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d74:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d78:	b25d      	sxtb	r5, r3
 8009d7a:	d1f1      	bne.n	8009d60 <vQueueWaitForMessageRestricted+0x50>
		pxQueue->cTxLock = queueUNLOCKED;
 8009d7c:	23ff      	movs	r3, #255	; 0xff
 8009d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009d82:	f001 fb99 	bl	800b4b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009d86:	f001 fb75 	bl	800b474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009d8a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009d8e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	dd15      	ble.n	8009dc0 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d94:	f104 0610 	add.w	r6, r4, #16
 8009d98:	e004      	b.n	8009da4 <vQueueWaitForMessageRestricted+0x94>
				--cRxLock;
 8009d9a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d9c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009da0:	b25d      	sxtb	r5, r3
 8009da2:	d00d      	beq.n	8009dc0 <vQueueWaitForMessageRestricted+0xb0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009da4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009da6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009da8:	b153      	cbz	r3, 8009dc0 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009daa:	f000 fde1 	bl	800a970 <xTaskRemoveFromEventList>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d0f3      	beq.n	8009d9a <vQueueWaitForMessageRestricted+0x8a>
					vTaskMissedYield();
 8009db2:	f000 fe81 	bl	800aab8 <vTaskMissedYield>
				--cRxLock;
 8009db6:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009db8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009dbc:	b25d      	sxtb	r5, r3
 8009dbe:	d1f1      	bne.n	8009da4 <vQueueWaitForMessageRestricted+0x94>
		pxQueue->cRxLock = queueUNLOCKED;
 8009dc0:	23ff      	movs	r3, #255	; 0xff
 8009dc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8009dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8009dca:	f001 bb75 	b.w	800b4b8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009dce:	462a      	mov	r2, r5
 8009dd0:	4631      	mov	r1, r6
 8009dd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009dd6:	f000 fd7b 	bl	800a8d0 <vTaskPlaceOnEventListRestricted>
 8009dda:	e7b2      	b.n	8009d42 <vQueueWaitForMessageRestricted+0x32>

08009ddc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009de0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009de2:	f001 fb47 	bl	800b474 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009de6:	4a34      	ldr	r2, [pc, #208]	; (8009eb8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8009de8:	4e34      	ldr	r6, [pc, #208]	; (8009ebc <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8009dea:	6813      	ldr	r3, [r2, #0]
 8009dec:	3301      	adds	r3, #1
 8009dee:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009df0:	6833      	ldr	r3, [r6, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d032      	beq.n	8009e5c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009df6:	4d32      	ldr	r5, [pc, #200]	; (8009ec0 <prvAddNewTaskToReadyList+0xe4>)
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	b33b      	cbz	r3, 8009e4c <prvAddNewTaskToReadyList+0x70>
 8009dfc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009dfe:	4f31      	ldr	r7, [pc, #196]	; (8009ec4 <prvAddNewTaskToReadyList+0xe8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e00:	4931      	ldr	r1, [pc, #196]	; (8009ec8 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8009e02:	4a32      	ldr	r2, [pc, #200]	; (8009ecc <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8009e04:	f8d1 c000 	ldr.w	ip, [r1]
		uxTaskNumber++;
 8009e08:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009e0a:	4584      	cmp	ip, r0
		uxTaskNumber++;
 8009e0c:	f103 0301 	add.w	r3, r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8009e10:	bf38      	it	cc
 8009e12:	6008      	strcc	r0, [r1, #0]
 8009e14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e18:	64e3      	str	r3, [r4, #76]	; 0x4c
		prvAddTaskToReadyList( pxNewTCB );
 8009e1a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8009e1e:	1d21      	adds	r1, r4, #4
		uxTaskNumber++;
 8009e20:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009e22:	f7ff fadd 	bl	80093e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e26:	f001 fb47 	bl	800b4b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e2a:	682b      	ldr	r3, [r5, #0]
 8009e2c:	b163      	cbz	r3, 8009e48 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e2e:	6832      	ldr	r2, [r6, #0]
 8009e30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009e32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d207      	bcs.n	8009e48 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e38:	4b25      	ldr	r3, [pc, #148]	; (8009ed0 <prvAddNewTaskToReadyList+0xf4>)
 8009e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e3e:	601a      	str	r2, [r3, #0]
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e4c:	6833      	ldr	r3, [r6, #0]
 8009e4e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	4f1c      	ldr	r7, [pc, #112]	; (8009ec4 <prvAddNewTaskToReadyList+0xe8>)
 8009e54:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8009e56:	bf98      	it	ls
 8009e58:	6034      	strls	r4, [r6, #0]
 8009e5a:	e7d1      	b.n	8009e00 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8009e5c:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e5e:	6813      	ldr	r3, [r2, #0]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d003      	beq.n	8009e6c <prvAddNewTaskToReadyList+0x90>
 8009e64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009e66:	4f17      	ldr	r7, [pc, #92]	; (8009ec4 <prvAddNewTaskToReadyList+0xe8>)
 8009e68:	4d15      	ldr	r5, [pc, #84]	; (8009ec0 <prvAddNewTaskToReadyList+0xe4>)
 8009e6a:	e7c9      	b.n	8009e00 <prvAddNewTaskToReadyList+0x24>
 8009e6c:	4f15      	ldr	r7, [pc, #84]	; (8009ec4 <prvAddNewTaskToReadyList+0xe8>)
 8009e6e:	463d      	mov	r5, r7
 8009e70:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e74:	4628      	mov	r0, r5
 8009e76:	3514      	adds	r5, #20
 8009e78:	f7ff faa2 	bl	80093c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e7c:	45a8      	cmp	r8, r5
 8009e7e:	d1f9      	bne.n	8009e74 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e80:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8009ee8 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 8009e84:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8009eec <prvAddNewTaskToReadyList+0x110>
 8009e88:	4d0d      	ldr	r5, [pc, #52]	; (8009ec0 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8009e8a:	4648      	mov	r0, r9
 8009e8c:	f7ff fa98 	bl	80093c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e90:	4640      	mov	r0, r8
 8009e92:	f7ff fa95 	bl	80093c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e96:	480f      	ldr	r0, [pc, #60]	; (8009ed4 <prvAddNewTaskToReadyList+0xf8>)
 8009e98:	f7ff fa92 	bl	80093c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e9c:	480e      	ldr	r0, [pc, #56]	; (8009ed8 <prvAddNewTaskToReadyList+0xfc>)
 8009e9e:	f7ff fa8f 	bl	80093c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ea2:	480e      	ldr	r0, [pc, #56]	; (8009edc <prvAddNewTaskToReadyList+0x100>)
 8009ea4:	f7ff fa8c 	bl	80093c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ea8:	4a0d      	ldr	r2, [pc, #52]	; (8009ee0 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009eaa:	4b0e      	ldr	r3, [pc, #56]	; (8009ee4 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8009eac:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009eb0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009eb2:	f8c3 8000 	str.w	r8, [r3]
}
 8009eb6:	e7a3      	b.n	8009e00 <prvAddNewTaskToReadyList+0x24>
 8009eb8:	2000170c 	.word	0x2000170c
 8009ebc:	2000129c 	.word	0x2000129c
 8009ec0:	20001768 	.word	0x20001768
 8009ec4:	200012a8 	.word	0x200012a8
 8009ec8:	2000171c 	.word	0x2000171c
 8009ecc:	20001718 	.word	0x20001718
 8009ed0:	e000ed04 	.word	0xe000ed04
 8009ed4:	20001754 	.word	0x20001754
 8009ed8:	20001780 	.word	0x20001780
 8009edc:	2000176c 	.word	0x2000176c
 8009ee0:	200012a0 	.word	0x200012a0
 8009ee4:	200012a4 	.word	0x200012a4
 8009ee8:	20001720 	.word	0x20001720
 8009eec:	20001734 	.word	0x20001734

08009ef0 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009ef6:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8009efa:	465a      	mov	r2, fp
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009efc:	4680      	mov	r8, r0
 8009efe:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009f02:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8009f04:	4699      	mov	r9, r3
 8009f06:	e9dd 6a0a 	ldrd	r6, sl, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f0a:	f001 fd6b 	bl	800b9e4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f10:	f1ab 0b04 	sub.w	fp, fp, #4
 8009f14:	449b      	add	fp, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f16:	f02b 0b07 	bic.w	fp, fp, #7
	if( pcName != NULL )
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	d038      	beq.n	8009f90 <prvInitialiseNewTask.isra.0+0xa0>
 8009f1e:	1e6a      	subs	r2, r5, #1
 8009f20:	f105 0117 	add.w	r1, r5, #23
 8009f24:	f104 0533 	add.w	r5, r4, #51	; 0x33
 8009f28:	e001      	b.n	8009f2e <prvInitialiseNewTask.isra.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f2a:	428a      	cmp	r2, r1
 8009f2c:	d006      	beq.n	8009f3c <prvInitialiseNewTask.isra.0+0x4c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f2e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009f32:	f805 3f01 	strb.w	r3, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8009f36:	7817      	ldrb	r7, [r2, #0]
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	d1f6      	bne.n	8009f2a <prvInitialiseNewTask.isra.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f42:	2e37      	cmp	r6, #55	; 0x37
 8009f44:	bf28      	it	cs
 8009f46:	2637      	movcs	r6, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8009f48:	2500      	movs	r5, #0
 8009f4a:	e9c4 6515 	strd	r6, r5, [r4, #84]	; 0x54
	pxNewTCB->uxPriority = uxPriority;
 8009f4e:	62e6      	str	r6, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f50:	1d20      	adds	r0, r4, #4
 8009f52:	f7ff fa41 	bl	80093d8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f56:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f5a:	f104 0018 	add.w	r0, r4, #24
 8009f5e:	f7ff fa3b 	bl	80093d8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8009f62:	6665      	str	r5, [r4, #100]	; 0x64
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009f64:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f68:	61a6      	str	r6, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f6a:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8009f6e:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f72:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f74:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f76:	464a      	mov	r2, r9
 8009f78:	4641      	mov	r1, r8
 8009f7a:	4658      	mov	r0, fp
 8009f7c:	f001 fa4e 	bl	800b41c <pxPortInitialiseStack>
 8009f80:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009f82:	f1ba 0f00 	cmp.w	sl, #0
 8009f86:	d001      	beq.n	8009f8c <prvInitialiseNewTask.isra.0+0x9c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f88:	f8ca 4000 	str.w	r4, [sl]
}
 8009f8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f90:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8009f94:	e7d5      	b.n	8009f42 <prvInitialiseNewTask.isra.0+0x52>
 8009f96:	bf00      	nop

08009f98 <prvIdleTask>:
{
 8009f98:	4d23      	ldr	r5, [pc, #140]	; (800a028 <prvIdleTask+0x90>)
 8009f9a:	f8df a094 	ldr.w	sl, [pc, #148]	; 800a030 <prvIdleTask+0x98>
 8009f9e:	4e23      	ldr	r6, [pc, #140]	; (800a02c <prvIdleTask+0x94>)
 8009fa0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a034 <prvIdleTask+0x9c>
				taskYIELD();
 8009fa4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800a038 <prvIdleTask+0xa0>
{
 8009fa8:	b580      	push	{r7, lr}
				taskYIELD();
 8009faa:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fae:	682b      	ldr	r3, [r5, #0]
 8009fb0:	b343      	cbz	r3, 800a004 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 8009fb2:	f001 fa5f 	bl	800b474 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fb6:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009fba:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fbc:	1d20      	adds	r0, r4, #4
 8009fbe:	f7ff fa37 	bl	8009430 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009fc2:	6833      	ldr	r3, [r6, #0]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 8009fce:	f001 fa73 	bl	800b4b8 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009fd2:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8009fd6:	b163      	cbz	r3, 8009ff2 <prvIdleTask+0x5a>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d020      	beq.n	800a01e <prvIdleTask+0x86>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d0e6      	beq.n	8009fae <prvIdleTask+0x16>
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	e7fe      	b.n	8009ff0 <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 8009ff2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009ff4:	f001 fc60 	bl	800b8b8 <vPortFree>
				vPortFree( pxTCB );
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f001 fc5d 	bl	800b8b8 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ffe:	682b      	ldr	r3, [r5, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1d6      	bne.n	8009fb2 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a004:	f8d9 3000 	ldr.w	r3, [r9]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d905      	bls.n	800a018 <prvIdleTask+0x80>
				taskYIELD();
 800a00c:	f8c8 7000 	str.w	r7, [r8]
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800a018:	f7f8 fd9e 	bl	8002b58 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a01c:	e7c7      	b.n	8009fae <prvIdleTask+0x16>
				vPortFree( pxTCB );
 800a01e:	4620      	mov	r0, r4
 800a020:	f001 fc4a 	bl	800b8b8 <vPortFree>
 800a024:	e7c3      	b.n	8009fae <prvIdleTask+0x16>
 800a026:	bf00      	nop
 800a028:	20001710 	.word	0x20001710
 800a02c:	2000170c 	.word	0x2000170c
 800a030:	20001780 	.word	0x20001780
 800a034:	200012a8 	.word	0x200012a8
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 800a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a040:	4b47      	ldr	r3, [pc, #284]	; (800a160 <xTaskIncrementTick.part.0+0x124>)
 800a042:	681e      	ldr	r6, [r3, #0]
 800a044:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 800a046:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 800a048:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a04a:	2e00      	cmp	r6, #0
 800a04c:	d041      	beq.n	800a0d2 <xTaskIncrementTick.part.0+0x96>
 800a04e:	4d45      	ldr	r5, [pc, #276]	; (800a164 <xTaskIncrementTick.part.0+0x128>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	429e      	cmp	r6, r3
 800a054:	d34a      	bcc.n	800a0ec <xTaskIncrementTick.part.0+0xb0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a056:	f8df a110 	ldr.w	sl, [pc, #272]	; 800a168 <xTaskIncrementTick.part.0+0x12c>
 800a05a:	f8da 3000 	ldr.w	r3, [sl]
 800a05e:	681c      	ldr	r4, [r3, #0]
 800a060:	2c00      	cmp	r4, #0
 800a062:	d074      	beq.n	800a14e <xTaskIncrementTick.part.0+0x112>
 800a064:	f8df 8110 	ldr.w	r8, [pc, #272]	; 800a178 <xTaskIncrementTick.part.0+0x13c>
 800a068:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800a17c <xTaskIncrementTick.part.0+0x140>
					prvAddTaskToReadyList( pxTCB );
 800a06c:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a180 <xTaskIncrementTick.part.0+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 800a070:	2400      	movs	r4, #0
 800a072:	e023      	b.n	800a0bc <xTaskIncrementTick.part.0+0x80>
 800a074:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a076:	f7ff f9db 	bl	8009430 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a07e:	f107 0018 	add.w	r0, r7, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a082:	b113      	cbz	r3, 800a08a <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a084:	f7ff f9d4 	bl	8009430 <uxListRemove>
 800a088:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	f8db 2000 	ldr.w	r2, [fp]
 800a090:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a094:	4293      	cmp	r3, r2
 800a096:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800a09a:	bf88      	it	hi
 800a09c:	f8cb 3000 	strhi.w	r3, [fp]
 800a0a0:	f7ff f99e 	bl	80093e0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0a4:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0a8:	f8da 3000 	ldr.w	r3, [sl]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0b0:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 800a0b2:	4291      	cmp	r1, r2
 800a0b4:	bf28      	it	cs
 800a0b6:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d04c      	beq.n	800a156 <xTaskIncrementTick.part.0+0x11a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0bc:	f8da 3000 	ldr.w	r3, [sl]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a0c4:	687b      	ldr	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0c6:	1d39      	adds	r1, r7, #4
					if( xConstTickCount < xItemValue )
 800a0c8:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0ca:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 800a0cc:	d2d2      	bcs.n	800a074 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 800a0ce:	602b      	str	r3, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a0d0:	e011      	b.n	800a0f6 <xTaskIncrementTick.part.0+0xba>
			taskSWITCH_DELAYED_LISTS();
 800a0d2:	4b25      	ldr	r3, [pc, #148]	; (800a168 <xTaskIncrementTick.part.0+0x12c>)
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	6812      	ldr	r2, [r2, #0]
 800a0d8:	b30a      	cbz	r2, 800a11e <xTaskIncrementTick.part.0+0xe2>
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	e7fe      	b.n	800a0ea <xTaskIncrementTick.part.0+0xae>
 800a0ec:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800a178 <xTaskIncrementTick.part.0+0x13c>
 800a0f0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a17c <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 800a0f4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0f6:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 800a0fa:	491c      	ldr	r1, [pc, #112]	; (800a16c <xTaskIncrementTick.part.0+0x130>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 800a108:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800a10a:	2a02      	cmp	r2, #2
 800a10c:	bf28      	it	cs
 800a10e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800a110:	2b00      	cmp	r3, #0
}
 800a112:	bf0c      	ite	eq
 800a114:	4620      	moveq	r0, r4
 800a116:	2001      	movne	r0, #1
 800a118:	b003      	add	sp, #12
 800a11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800a11e:	4a14      	ldr	r2, [pc, #80]	; (800a170 <xTaskIncrementTick.part.0+0x134>)
 800a120:	6818      	ldr	r0, [r3, #0]
 800a122:	4914      	ldr	r1, [pc, #80]	; (800a174 <xTaskIncrementTick.part.0+0x138>)
 800a124:	6814      	ldr	r4, [r2, #0]
 800a126:	601c      	str	r4, [r3, #0]
 800a128:	6010      	str	r0, [r2, #0]
 800a12a:	680a      	ldr	r2, [r1, #0]
 800a12c:	3201      	adds	r2, #1
 800a12e:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	6812      	ldr	r2, [r2, #0]
 800a134:	b922      	cbnz	r2, 800a140 <xTaskIncrementTick.part.0+0x104>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a136:	4d0b      	ldr	r5, [pc, #44]	; (800a164 <xTaskIncrementTick.part.0+0x128>)
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
 800a13c:	602b      	str	r3, [r5, #0]
 800a13e:	e787      	b.n	800a050 <xTaskIncrementTick.part.0+0x14>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a140:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a142:	4d08      	ldr	r5, [pc, #32]	; (800a164 <xTaskIncrementTick.part.0+0x128>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a144:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	602b      	str	r3, [r5, #0]
	}
}
 800a14c:	e780      	b.n	800a050 <xTaskIncrementTick.part.0+0x14>
 800a14e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800a178 <xTaskIncrementTick.part.0+0x13c>
 800a152:	f8df 9028 	ldr.w	r9, [pc, #40]	; 800a17c <xTaskIncrementTick.part.0+0x140>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a156:	f04f 33ff 	mov.w	r3, #4294967295
 800a15a:	602b      	str	r3, [r5, #0]
					break;
 800a15c:	e7cb      	b.n	800a0f6 <xTaskIncrementTick.part.0+0xba>
 800a15e:	bf00      	nop
 800a160:	20001794 	.word	0x20001794
 800a164:	20001748 	.word	0x20001748
 800a168:	200012a0 	.word	0x200012a0
 800a16c:	20001798 	.word	0x20001798
 800a170:	200012a4 	.word	0x200012a4
 800a174:	2000174c 	.word	0x2000174c
 800a178:	200012a8 	.word	0x200012a8
 800a17c:	2000129c 	.word	0x2000129c
 800a180:	2000171c 	.word	0x2000171c

0800a184 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 800a188:	4d40      	ldr	r5, [pc, #256]	; (800a28c <xTaskResumeAll.part.0+0x108>)
BaseType_t xTaskResumeAll( void )
 800a18a:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800a18c:	f001 f972 	bl	800b474 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a190:	682b      	ldr	r3, [r5, #0]
 800a192:	3b01      	subs	r3, #1
 800a194:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a196:	682b      	ldr	r3, [r5, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d15f      	bne.n	800a25c <xTaskResumeAll.part.0+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a19c:	4b3c      	ldr	r3, [pc, #240]	; (800a290 <xTaskResumeAll.part.0+0x10c>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d05b      	beq.n	800a25c <xTaskResumeAll.part.0+0xd8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1a4:	4e3b      	ldr	r6, [pc, #236]	; (800a294 <xTaskResumeAll.part.0+0x110>)
 800a1a6:	6833      	ldr	r3, [r6, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d06c      	beq.n	800a286 <xTaskResumeAll.part.0+0x102>
 800a1ac:	4f3a      	ldr	r7, [pc, #232]	; (800a298 <xTaskResumeAll.part.0+0x114>)
 800a1ae:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800a2ac <xTaskResumeAll.part.0+0x128>
 800a1b2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800a2b0 <xTaskResumeAll.part.0+0x12c>
 800a1b6:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 800a2b4 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1ba:	68f3      	ldr	r3, [r6, #12]
 800a1bc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1be:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1c2:	f104 0018 	add.w	r0, r4, #24
 800a1c6:	f7ff f933 	bl	8009430 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1ca:	4658      	mov	r0, fp
 800a1cc:	f7ff f930 	bl	8009430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	4659      	mov	r1, fp
 800a1dc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800a1e0:	bf88      	it	hi
 800a1e2:	603b      	strhi	r3, [r7, #0]
 800a1e4:	f7ff f8fc 	bl	80093e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a1ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d33b      	bcc.n	800a26c <xTaskResumeAll.part.0+0xe8>
						xYieldPending = pdTRUE;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1fa:	6833      	ldr	r3, [r6, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1dc      	bne.n	800a1ba <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a200:	4b26      	ldr	r3, [pc, #152]	; (800a29c <xTaskResumeAll.part.0+0x118>)
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	6812      	ldr	r2, [r2, #0]
 800a206:	2a00      	cmp	r2, #0
 800a208:	d038      	beq.n	800a27c <xTaskResumeAll.part.0+0xf8>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a20a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a20c:	4b24      	ldr	r3, [pc, #144]	; (800a2a0 <xTaskResumeAll.part.0+0x11c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a20e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a210:	68d2      	ldr	r2, [r2, #12]
 800a212:	6852      	ldr	r2, [r2, #4]
 800a214:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a216:	4e23      	ldr	r6, [pc, #140]	; (800a2a4 <xTaskResumeAll.part.0+0x120>)
 800a218:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800a21a:	b194      	cbz	r4, 800a242 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 800a21c:	2701      	movs	r7, #1
 800a21e:	e006      	b.n	800a22e <xTaskResumeAll.part.0+0xaa>
 800a220:	f7ff ff0c 	bl	800a03c <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 800a224:	b108      	cbz	r0, 800a22a <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 800a226:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a22a:	3c01      	subs	r4, #1
 800a22c:	d008      	beq.n	800a240 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a22e:	682b      	ldr	r3, [r5, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d0f5      	beq.n	800a220 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 800a234:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a236:	3c01      	subs	r4, #1
		++xPendedTicks;
 800a238:	f103 0301 	add.w	r3, r3, #1
 800a23c:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a23e:	d1f6      	bne.n	800a22e <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 800a240:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800a242:	f8da 3000 	ldr.w	r3, [sl]
 800a246:	b14b      	cbz	r3, 800a25c <xTaskResumeAll.part.0+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 800a248:	4b17      	ldr	r3, [pc, #92]	; (800a2a8 <xTaskResumeAll.part.0+0x124>)
 800a24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a258:	2001      	movs	r0, #1
 800a25a:	e000      	b.n	800a25e <xTaskResumeAll.part.0+0xda>
BaseType_t xAlreadyYielded = pdFALSE;
 800a25c:	2000      	movs	r0, #0
 800a25e:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 800a260:	f001 f92a 	bl	800b4b8 <vPortExitCritical>
}
 800a264:	9801      	ldr	r0, [sp, #4]
 800a266:	b003      	add	sp, #12
 800a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a26c:	6833      	ldr	r3, [r6, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1a3      	bne.n	800a1ba <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a272:	4b0a      	ldr	r3, [pc, #40]	; (800a29c <xTaskResumeAll.part.0+0x118>)
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	2a00      	cmp	r2, #0
 800a27a:	d1c6      	bne.n	800a20a <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a27c:	4b08      	ldr	r3, [pc, #32]	; (800a2a0 <xTaskResumeAll.part.0+0x11c>)
 800a27e:	f04f 32ff 	mov.w	r2, #4294967295
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	e7c7      	b.n	800a216 <xTaskResumeAll.part.0+0x92>
 800a286:	f8df a02c 	ldr.w	sl, [pc, #44]	; 800a2b4 <xTaskResumeAll.part.0+0x130>
 800a28a:	e7c4      	b.n	800a216 <xTaskResumeAll.part.0+0x92>
 800a28c:	20001714 	.word	0x20001714
 800a290:	2000170c 	.word	0x2000170c
 800a294:	20001754 	.word	0x20001754
 800a298:	2000171c 	.word	0x2000171c
 800a29c:	200012a0 	.word	0x200012a0
 800a2a0:	20001748 	.word	0x20001748
 800a2a4:	20001750 	.word	0x20001750
 800a2a8:	e000ed04 	.word	0xe000ed04
 800a2ac:	200012a8 	.word	0x200012a8
 800a2b0:	2000129c 	.word	0x2000129c
 800a2b4:	20001798 	.word	0x20001798

0800a2b8 <xTaskCreateStatic>:
	{
 800a2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 800a2c0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 800a2c2:	b1bd      	cbz	r5, 800a2f4 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 800a2c4:	b16c      	cbz	r4, 800a2e2 <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2c6:	276c      	movs	r7, #108	; 0x6c
 800a2c8:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2ca:	9f05      	ldr	r7, [sp, #20]
 800a2cc:	2f6c      	cmp	r7, #108	; 0x6c
 800a2ce:	d01a      	beq.n	800a306 <xTaskCreateStatic+0x4e>
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	e7fe      	b.n	800a2e0 <xTaskCreateStatic+0x28>
 800a2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800a2f2:	e7fe      	b.n	800a2f2 <xTaskCreateStatic+0x3a>
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	f383 8811 	msr	BASEPRI, r3
 800a2fc:	f3bf 8f6f 	isb	sy
 800a300:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800a304:	e7fe      	b.n	800a304 <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a306:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a308:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a30a:	ad04      	add	r5, sp, #16
 800a30c:	9402      	str	r4, [sp, #8]
 800a30e:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a310:	f884 7069 	strb.w	r7, [r4, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a314:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a316:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a318:	f7ff fdea 	bl	8009ef0 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a31c:	4620      	mov	r0, r4
 800a31e:	f7ff fd5d 	bl	8009ddc <prvAddNewTaskToReadyList>
	}
 800a322:	9804      	ldr	r0, [sp, #16]
 800a324:	b007      	add	sp, #28
 800a326:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a328 <xTaskCreate>:
	{
 800a328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a32c:	4607      	mov	r7, r0
 800a32e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a330:	0090      	lsls	r0, r2, #2
	{
 800a332:	4615      	mov	r5, r2
 800a334:	4688      	mov	r8, r1
 800a336:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a338:	f001 fa02 	bl	800b740 <pvPortMalloc>
			if( pxStack != NULL )
 800a33c:	b1e0      	cbz	r0, 800a378 <xTaskCreate+0x50>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a33e:	4604      	mov	r4, r0
 800a340:	206c      	movs	r0, #108	; 0x6c
 800a342:	f001 f9fd 	bl	800b740 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a346:	4606      	mov	r6, r0
 800a348:	b1d8      	cbz	r0, 800a382 <xTaskCreate+0x5a>
					pxNewTCB->pxStack = pxStack;
 800a34a:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a34c:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a350:	9c0d      	ldr	r4, [sp, #52]	; 0x34
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a352:	f886 c069 	strb.w	ip, [r6, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a356:	9401      	str	r4, [sp, #4]
 800a358:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a35a:	9602      	str	r6, [sp, #8]
 800a35c:	464b      	mov	r3, r9
 800a35e:	462a      	mov	r2, r5
 800a360:	4641      	mov	r1, r8
 800a362:	4638      	mov	r0, r7
 800a364:	9400      	str	r4, [sp, #0]
 800a366:	f7ff fdc3 	bl	8009ef0 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a36a:	4630      	mov	r0, r6
 800a36c:	f7ff fd36 	bl	8009ddc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a370:	2001      	movs	r0, #1
	}
 800a372:	b005      	add	sp, #20
 800a374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800a37c:	b005      	add	sp, #20
 800a37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800a382:	4620      	mov	r0, r4
 800a384:	f001 fa98 	bl	800b8b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a388:	f04f 30ff 	mov.w	r0, #4294967295
 800a38c:	e7f1      	b.n	800a372 <xTaskCreate+0x4a>
 800a38e:	bf00      	nop

0800a390 <vTaskDelayUntil>:
		configASSERT( pxPreviousWakeTime );
 800a390:	b338      	cbz	r0, 800a3e2 <vTaskDelayUntil+0x52>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a392:	b941      	cbnz	r1, 800a3a6 <vTaskDelayUntil+0x16>
 800a394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	e7fe      	b.n	800a3a4 <vTaskDelayUntil+0x14>
	{
 800a3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		configASSERT( uxSchedulerSuspended == 0 );
 800a3aa:	4f31      	ldr	r7, [pc, #196]	; (800a470 <vTaskDelayUntil+0xe0>)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	bb0b      	cbnz	r3, 800a3f4 <vTaskDelayUntil+0x64>
	++uxSchedulerSuspended;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	603b      	str	r3, [r7, #0]
			const TickType_t xConstTickCount = xTickCount;
 800a3b6:	4d2f      	ldr	r5, [pc, #188]	; (800a474 <vTaskDelayUntil+0xe4>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a3b8:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 800a3ba:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a3bc:	1854      	adds	r4, r2, r1
 800a3be:	bf2c      	ite	cs
 800a3c0:	2101      	movcs	r1, #1
 800a3c2:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 800a3c4:	429a      	cmp	r2, r3
			*pxPreviousWakeTime = xTimeToWake;
 800a3c6:	6004      	str	r4, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 800a3c8:	d92a      	bls.n	800a420 <vTaskDelayUntil+0x90>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a3ca:	bb51      	cbnz	r1, 800a422 <vTaskDelayUntil+0x92>
	configASSERT( uxSchedulerSuspended );
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	b9d3      	cbnz	r3, 800a406 <vTaskDelayUntil+0x76>
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	e7fe      	b.n	800a3e0 <vTaskDelayUntil+0x50>
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 800a3f2:	e7fe      	b.n	800a3f2 <vTaskDelayUntil+0x62>
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
		configASSERT( uxSchedulerSuspended == 0 );
 800a404:	e7fe      	b.n	800a404 <vTaskDelayUntil+0x74>
 800a406:	f7ff febd 	bl	800a184 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800a40a:	b938      	cbnz	r0, 800a41c <vTaskDelayUntil+0x8c>
			portYIELD_WITHIN_API();
 800a40c:	4b1a      	ldr	r3, [pc, #104]	; (800a478 <vTaskDelayUntil+0xe8>)
 800a40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	f3bf 8f6f 	isb	sy
	}
 800a41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a420:	b909      	cbnz	r1, 800a426 <vTaskDelayUntil+0x96>
 800a422:	42a3      	cmp	r3, r4
 800a424:	d2d2      	bcs.n	800a3cc <vTaskDelayUntil+0x3c>
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a426:	4e15      	ldr	r6, [pc, #84]	; (800a47c <vTaskDelayUntil+0xec>)
const TickType_t xConstTickCount = xTickCount;
 800a428:	f8d5 8000 	ldr.w	r8, [r5]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a42c:	6832      	ldr	r2, [r6, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a42e:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a430:	2100      	movs	r1, #0
 800a432:	eba8 0503 	sub.w	r5, r8, r3
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a436:	3004      	adds	r0, #4
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a438:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a43c:	f7fe fff8 	bl	8009430 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a440:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a442:	6833      	ldr	r3, [r6, #0]

			if( xTimeToWake < xConstTickCount )
 800a444:	45a0      	cmp	r8, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a446:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a448:	d906      	bls.n	800a458 <vTaskDelayUntil+0xc8>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a44a:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <vTaskDelayUntil+0xf0>)
 800a44c:	6818      	ldr	r0, [r3, #0]
 800a44e:	6831      	ldr	r1, [r6, #0]
 800a450:	3104      	adds	r1, #4
 800a452:	f7fe ffd5 	bl	8009400 <vListInsert>
 800a456:	e7b9      	b.n	800a3cc <vTaskDelayUntil+0x3c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a458:	4b0a      	ldr	r3, [pc, #40]	; (800a484 <vTaskDelayUntil+0xf4>)
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	6831      	ldr	r1, [r6, #0]
 800a45e:	3104      	adds	r1, #4
 800a460:	f7fe ffce 	bl	8009400 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800a464:	4b08      	ldr	r3, [pc, #32]	; (800a488 <vTaskDelayUntil+0xf8>)
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 800a46a:	bf38      	it	cc
 800a46c:	601c      	strcc	r4, [r3, #0]
 800a46e:	e7ad      	b.n	800a3cc <vTaskDelayUntil+0x3c>
 800a470:	20001714 	.word	0x20001714
 800a474:	20001794 	.word	0x20001794
 800a478:	e000ed04 	.word	0xe000ed04
 800a47c:	2000129c 	.word	0x2000129c
 800a480:	200012a4 	.word	0x200012a4
 800a484:	200012a0 	.word	0x200012a0
 800a488:	20001748 	.word	0x20001748

0800a48c <vTaskResume>:
		configASSERT( xTaskToResume );
 800a48c:	b198      	cbz	r0, 800a4b6 <vTaskResume+0x2a>
	{
 800a48e:	b530      	push	{r4, r5, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a490:	4d21      	ldr	r5, [pc, #132]	; (800a518 <vTaskResume+0x8c>)
 800a492:	682b      	ldr	r3, [r5, #0]
 800a494:	4283      	cmp	r3, r0
	{
 800a496:	b083      	sub	sp, #12
 800a498:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a49a:	d00a      	beq.n	800a4b2 <vTaskResume+0x26>
			taskENTER_CRITICAL();
 800a49c:	f000 ffea 	bl	800b474 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4a0:	4b1e      	ldr	r3, [pc, #120]	; (800a51c <vTaskResume+0x90>)
 800a4a2:	6962      	ldr	r2, [r4, #20]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d00f      	beq.n	800a4c8 <vTaskResume+0x3c>
	}
 800a4a8:	b003      	add	sp, #12
 800a4aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			taskEXIT_CRITICAL();
 800a4ae:	f001 b803 	b.w	800b4b8 <vPortExitCritical>
	}
 800a4b2:	b003      	add	sp, #12
 800a4b4:	bd30      	pop	{r4, r5, pc}
 800a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 800a4c6:	e7fe      	b.n	800a4c6 <vTaskResume+0x3a>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a4c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a4ca:	4a15      	ldr	r2, [pc, #84]	; (800a520 <vTaskResume+0x94>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d0eb      	beq.n	800a4a8 <vTaskResume+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e9      	bne.n	800a4a8 <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a4d4:	1d21      	adds	r1, r4, #4
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	9101      	str	r1, [sp, #4]
 800a4da:	f7fe ffa9 	bl	8009430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4de:	4a11      	ldr	r2, [pc, #68]	; (800a524 <vTaskResume+0x98>)
 800a4e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a4e2:	6810      	ldr	r0, [r2, #0]
 800a4e4:	9901      	ldr	r1, [sp, #4]
 800a4e6:	4283      	cmp	r3, r0
 800a4e8:	480f      	ldr	r0, [pc, #60]	; (800a528 <vTaskResume+0x9c>)
 800a4ea:	bf88      	it	hi
 800a4ec:	6013      	strhi	r3, [r2, #0]
 800a4ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a4f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a4f6:	f7fe ff73 	bl	80093e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4fa:	682b      	ldr	r3, [r5, #0]
 800a4fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	429a      	cmp	r2, r3
 800a502:	d3d1      	bcc.n	800a4a8 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 800a504:	4b09      	ldr	r3, [pc, #36]	; (800a52c <vTaskResume+0xa0>)
 800a506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	e7c8      	b.n	800a4a8 <vTaskResume+0x1c>
 800a516:	bf00      	nop
 800a518:	2000129c 	.word	0x2000129c
 800a51c:	2000176c 	.word	0x2000176c
 800a520:	20001754 	.word	0x20001754
 800a524:	2000171c 	.word	0x2000171c
 800a528:	200012a8 	.word	0x200012a8
 800a52c:	e000ed04 	.word	0xe000ed04

0800a530 <vTaskStartScheduler>:
{
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a534:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a536:	4668      	mov	r0, sp
 800a538:	aa02      	add	r2, sp, #8
 800a53a:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a53c:	e9cd 3300 	strd	r3, r3, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a540:	f7fe ff20 	bl	8009384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a544:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 800a546:	b1c8      	cbz	r0, 800a57c <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a548:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 800a54a:	b174      	cbz	r4, 800a56a <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a54c:	236c      	movs	r3, #108	; 0x6c
 800a54e:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a550:	9b03      	ldr	r3, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a552:	9d02      	ldr	r5, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a554:	2b6c      	cmp	r3, #108	; 0x6c
 800a556:	d01a      	beq.n	800a58e <vTaskStartScheduler+0x5e>
 800a558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	e7fe      	b.n	800a568 <vTaskStartScheduler+0x38>
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800a57a:	e7fe      	b.n	800a57a <vTaskStartScheduler+0x4a>
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800a58c:	e7fe      	b.n	800a58c <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a58e:	00ad      	lsls	r5, r5, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a590:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a592:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a594:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a598:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a59a:	6320      	str	r0, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a59c:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a59e:	f001 fa21 	bl	800b9e4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a5a4:	4a2c      	ldr	r2, [pc, #176]	; (800a658 <vTaskStartScheduler+0x128>)
 800a5a6:	3d04      	subs	r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5a8:	4621      	mov	r1, r4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5aa:	441d      	add	r5, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5ac:	2349      	movs	r3, #73	; 0x49
 800a5ae:	f801 3f34 	strb.w	r3, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5b2:	f025 0607 	bic.w	r6, r5, #7
			if( pcName[ x ] == ( char ) 0x00 )
 800a5b6:	f102 0017 	add.w	r0, r2, #23
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5ba:	4290      	cmp	r0, r2
 800a5bc:	d005      	beq.n	800a5ca <vTaskStartScheduler+0x9a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5be:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800a5c2:	f801 3f01 	strb.w	r3, [r1, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1f7      	bne.n	800a5ba <vTaskStartScheduler+0x8a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5ca:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5cc:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800a5ce:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5d2:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
	pxNewTCB->uxPriority = uxPriority;
 800a5d6:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5d8:	f7fe fefe 	bl	80093d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5dc:	f104 0018 	add.w	r0, r4, #24
 800a5e0:	f7fe fefa 	bl	80093d8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5e4:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5e6:	491d      	ldr	r1, [pc, #116]	; (800a65c <vTaskStartScheduler+0x12c>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5e8:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5ea:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 800a5ec:	6665      	str	r5, [r4, #100]	; 0x64
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a5ee:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5f2:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 800a5f6:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a5fa:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a5fc:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5fe:	4630      	mov	r0, r6
 800a600:	f000 ff0c 	bl	800b41c <pxPortInitialiseStack>
 800a604:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800a606:	4620      	mov	r0, r4
 800a608:	f7ff fbe8 	bl	8009ddc <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 800a60c:	f000 fdd0 	bl	800b1b0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a610:	2801      	cmp	r0, #1
 800a612:	d003      	beq.n	800a61c <vTaskStartScheduler+0xec>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a614:	3001      	adds	r0, #1
 800a616:	d016      	beq.n	800a646 <vTaskStartScheduler+0x116>
}
 800a618:	b004      	add	sp, #16
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a62c:	490c      	ldr	r1, [pc, #48]	; (800a660 <vTaskStartScheduler+0x130>)
		xSchedulerRunning = pdTRUE;
 800a62e:	4a0d      	ldr	r2, [pc, #52]	; (800a664 <vTaskStartScheduler+0x134>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a630:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <vTaskStartScheduler+0x138>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800a632:	f04f 34ff 	mov.w	r4, #4294967295
 800a636:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800a638:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a63a:	601d      	str	r5, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a63c:	f7f8 fa88 	bl	8002b50 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800a640:	f000 ffb4 	bl	800b5ac <xPortStartScheduler>
 800a644:	e7e8      	b.n	800a618 <vTaskStartScheduler+0xe8>
 800a646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a656:	e7fe      	b.n	800a656 <vTaskStartScheduler+0x126>
 800a658:	0800d3cc 	.word	0x0800d3cc
 800a65c:	08009f99 	.word	0x08009f99
 800a660:	20001748 	.word	0x20001748
 800a664:	20001768 	.word	0x20001768
 800a668:	20001794 	.word	0x20001794

0800a66c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a66c:	4a02      	ldr	r2, [pc, #8]	; (800a678 <vTaskSuspendAll+0xc>)
 800a66e:	6813      	ldr	r3, [r2, #0]
 800a670:	3301      	adds	r3, #1
 800a672:	6013      	str	r3, [r2, #0]
}
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	20001714 	.word	0x20001714

0800a67c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800a67c:	4b06      	ldr	r3, [pc, #24]	; (800a698 <xTaskResumeAll+0x1c>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	b943      	cbnz	r3, 800a694 <xTaskResumeAll+0x18>
 800a682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	e7fe      	b.n	800a692 <xTaskResumeAll+0x16>
 800a694:	f7ff bd76 	b.w	800a184 <xTaskResumeAll.part.0>
 800a698:	20001714 	.word	0x20001714

0800a69c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a69c:	4b01      	ldr	r3, [pc, #4]	; (800a6a4 <xTaskGetTickCount+0x8>)
 800a69e:	6818      	ldr	r0, [r3, #0]
}
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	20001794 	.word	0x20001794

0800a6a8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6a8:	4b05      	ldr	r3, [pc, #20]	; (800a6c0 <xTaskIncrementTick+0x18>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	b90b      	cbnz	r3, 800a6b2 <xTaskIncrementTick+0xa>
 800a6ae:	f7ff bcc5 	b.w	800a03c <xTaskIncrementTick.part.0>
		++xPendedTicks;
 800a6b2:	4a04      	ldr	r2, [pc, #16]	; (800a6c4 <xTaskIncrementTick+0x1c>)
 800a6b4:	6813      	ldr	r3, [r2, #0]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	6013      	str	r3, [r2, #0]
}
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	20001714 	.word	0x20001714
 800a6c4:	20001750 	.word	0x20001750

0800a6c8 <vTaskSwitchContext>:
{
 800a6c8:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6ca:	4b20      	ldr	r3, [pc, #128]	; (800a74c <vTaskSwitchContext+0x84>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	b11b      	cbz	r3, 800a6d8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800a6d0:	4b1f      	ldr	r3, [pc, #124]	; (800a750 <vTaskSwitchContext+0x88>)
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]
}
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 800a6d8:	4a1d      	ldr	r2, [pc, #116]	; (800a750 <vTaskSwitchContext+0x88>)
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a6da:	4c1e      	ldr	r4, [pc, #120]	; (800a754 <vTaskSwitchContext+0x8c>)
		xYieldPending = pdFALSE;
 800a6dc:	6013      	str	r3, [r2, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a6de:	f7f8 fa39 	bl	8002b54 <getRunTimeCounterValue>
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a6e2:	491d      	ldr	r1, [pc, #116]	; (800a758 <vTaskSwitchContext+0x90>)
 800a6e4:	680d      	ldr	r5, [r1, #0]
 800a6e6:	42a8      	cmp	r0, r5
 800a6e8:	d904      	bls.n	800a6f4 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a6ea:	6822      	ldr	r2, [r4, #0]
 800a6ec:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800a6ee:	1b5b      	subs	r3, r3, r5
 800a6f0:	4403      	add	r3, r0
 800a6f2:	6613      	str	r3, [r2, #96]	; 0x60
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f4:	4d19      	ldr	r5, [pc, #100]	; (800a75c <vTaskSwitchContext+0x94>)
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a6f6:	6008      	str	r0, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	4a19      	ldr	r2, [pc, #100]	; (800a760 <vTaskSwitchContext+0x98>)
 800a6fc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a700:	0080      	lsls	r0, r0, #2
 800a702:	0099      	lsls	r1, r3, #2
 800a704:	5810      	ldr	r0, [r2, r0]
 800a706:	b940      	cbnz	r0, 800a71a <vTaskSwitchContext+0x52>
 800a708:	b1bb      	cbz	r3, 800a73a <vTaskSwitchContext+0x72>
 800a70a:	3b01      	subs	r3, #1
 800a70c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a710:	0099      	lsls	r1, r3, #2
 800a712:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800a716:	2800      	cmp	r0, #0
 800a718:	d0f6      	beq.n	800a708 <vTaskSwitchContext+0x40>
 800a71a:	4419      	add	r1, r3
 800a71c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800a720:	4602      	mov	r2, r0
 800a722:	6841      	ldr	r1, [r0, #4]
 800a724:	6849      	ldr	r1, [r1, #4]
 800a726:	6041      	str	r1, [r0, #4]
 800a728:	3208      	adds	r2, #8
 800a72a:	4291      	cmp	r1, r2
 800a72c:	bf04      	itt	eq
 800a72e:	6849      	ldreq	r1, [r1, #4]
 800a730:	6041      	streq	r1, [r0, #4]
 800a732:	68ca      	ldr	r2, [r1, #12]
 800a734:	6022      	str	r2, [r4, #0]
 800a736:	602b      	str	r3, [r5, #0]
}
 800a738:	bd38      	pop	{r3, r4, r5, pc}
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a74a:	e7fe      	b.n	800a74a <vTaskSwitchContext+0x82>
 800a74c:	20001714 	.word	0x20001714
 800a750:	20001798 	.word	0x20001798
 800a754:	2000129c 	.word	0x2000129c
 800a758:	20001708 	.word	0x20001708
 800a75c:	2000171c 	.word	0x2000171c
 800a760:	200012a8 	.word	0x200012a8

0800a764 <vTaskSuspend>:
	{
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a768:	4d2d      	ldr	r5, [pc, #180]	; (800a820 <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 800a76a:	f000 fe83 	bl	800b474 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a76e:	2c00      	cmp	r4, #0
 800a770:	d03a      	beq.n	800a7e8 <vTaskSuspend+0x84>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a772:	1d26      	adds	r6, r4, #4
 800a774:	4630      	mov	r0, r6
 800a776:	f7fe fe5b 	bl	8009430 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a77a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a77c:	b11b      	cbz	r3, 800a786 <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a77e:	f104 0018 	add.w	r0, r4, #24
 800a782:	f7fe fe55 	bl	8009430 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a786:	4631      	mov	r1, r6
 800a788:	4826      	ldr	r0, [pc, #152]	; (800a824 <vTaskSuspend+0xc0>)
		if( xSchedulerRunning != pdFALSE )
 800a78a:	4e27      	ldr	r6, [pc, #156]	; (800a828 <vTaskSuspend+0xc4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a78c:	f7fe fe28 	bl	80093e0 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a790:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 800a794:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a796:	bf04      	itt	eq
 800a798:	2300      	moveq	r3, #0
 800a79a:	f884 3068 	strbeq.w	r3, [r4, #104]	; 0x68
		taskEXIT_CRITICAL();
 800a79e:	f000 fe8b 	bl	800b4b8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800a7a2:	6833      	ldr	r3, [r6, #0]
 800a7a4:	b98b      	cbnz	r3, 800a7ca <vTaskSuspend+0x66>
		if( pxTCB == pxCurrentTCB )
 800a7a6:	682b      	ldr	r3, [r5, #0]
 800a7a8:	42a3      	cmp	r3, r4
 800a7aa:	d000      	beq.n	800a7ae <vTaskSuspend+0x4a>
	}
 800a7ac:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 800a7ae:	6833      	ldr	r3, [r6, #0]
 800a7b0:	b30b      	cbz	r3, 800a7f6 <vTaskSuspend+0x92>
				configASSERT( uxSchedulerSuspended == 0 );
 800a7b2:	4b1e      	ldr	r3, [pc, #120]	; (800a82c <vTaskSuspend+0xc8>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	b333      	cbz	r3, 800a806 <vTaskSuspend+0xa2>
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	e7fe      	b.n	800a7c8 <vTaskSuspend+0x64>
			taskENTER_CRITICAL();
 800a7ca:	f000 fe53 	bl	800b474 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7ce:	4b18      	ldr	r3, [pc, #96]	; (800a830 <vTaskSuspend+0xcc>)
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	6812      	ldr	r2, [r2, #0]
 800a7d4:	b152      	cbz	r2, 800a7ec <vTaskSuspend+0x88>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d6:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7d8:	4b16      	ldr	r3, [pc, #88]	; (800a834 <vTaskSuspend+0xd0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7da:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7dc:	68d2      	ldr	r2, [r2, #12]
 800a7de:	6852      	ldr	r2, [r2, #4]
 800a7e0:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 800a7e2:	f000 fe69 	bl	800b4b8 <vPortExitCritical>
 800a7e6:	e7de      	b.n	800a7a6 <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a7e8:	682c      	ldr	r4, [r5, #0]
 800a7ea:	e7c2      	b.n	800a772 <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7ec:	4b11      	ldr	r3, [pc, #68]	; (800a834 <vTaskSuspend+0xd0>)
 800a7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	e7f5      	b.n	800a7e2 <vTaskSuspend+0x7e>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a7f6:	490b      	ldr	r1, [pc, #44]	; (800a824 <vTaskSuspend+0xc0>)
 800a7f8:	4a0f      	ldr	r2, [pc, #60]	; (800a838 <vTaskSuspend+0xd4>)
 800a7fa:	6809      	ldr	r1, [r1, #0]
 800a7fc:	6812      	ldr	r2, [r2, #0]
 800a7fe:	4291      	cmp	r1, r2
 800a800:	d10a      	bne.n	800a818 <vTaskSuspend+0xb4>
					pxCurrentTCB = NULL;
 800a802:	602b      	str	r3, [r5, #0]
	}
 800a804:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 800a806:	4b0d      	ldr	r3, [pc, #52]	; (800a83c <vTaskSuspend+0xd8>)
 800a808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80c:	601a      	str	r2, [r3, #0]
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	f3bf 8f6f 	isb	sy
	}
 800a816:	bd70      	pop	{r4, r5, r6, pc}
 800a818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800a81c:	f7ff bf54 	b.w	800a6c8 <vTaskSwitchContext>
 800a820:	2000129c 	.word	0x2000129c
 800a824:	2000176c 	.word	0x2000176c
 800a828:	20001768 	.word	0x20001768
 800a82c:	20001714 	.word	0x20001714
 800a830:	200012a0 	.word	0x200012a0
 800a834:	20001748 	.word	0x20001748
 800a838:	2000170c 	.word	0x2000170c
 800a83c:	e000ed04 	.word	0xe000ed04

0800a840 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a840:	b1f0      	cbz	r0, 800a880 <vTaskPlaceOnEventList+0x40>
{
 800a842:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a844:	4d1c      	ldr	r5, [pc, #112]	; (800a8b8 <vTaskPlaceOnEventList+0x78>)
 800a846:	460c      	mov	r4, r1
 800a848:	6829      	ldr	r1, [r5, #0]
 800a84a:	3118      	adds	r1, #24
 800a84c:	f7fe fdd8 	bl	8009400 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800a850:	4b1a      	ldr	r3, [pc, #104]	; (800a8bc <vTaskPlaceOnEventList+0x7c>)
 800a852:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a854:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a856:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a858:	2200      	movs	r2, #0
 800a85a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a85e:	3004      	adds	r0, #4
 800a860:	f7fe fde6 	bl	8009430 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a864:	1c63      	adds	r3, r4, #1
 800a866:	d014      	beq.n	800a892 <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	19a4      	adds	r4, r4, r6
 800a86c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a86e:	d317      	bcc.n	800a8a0 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a870:	4b13      	ldr	r3, [pc, #76]	; (800a8c0 <vTaskPlaceOnEventList+0x80>)
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	6829      	ldr	r1, [r5, #0]
}
 800a876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a87a:	3104      	adds	r1, #4
 800a87c:	f7fe bdc0 	b.w	8009400 <vListInsert>
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800a890:	e7fe      	b.n	800a890 <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a892:	6829      	ldr	r1, [r5, #0]
 800a894:	480b      	ldr	r0, [pc, #44]	; (800a8c4 <vTaskPlaceOnEventList+0x84>)
}
 800a896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a89a:	3104      	adds	r1, #4
 800a89c:	f7fe bda0 	b.w	80093e0 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8a0:	4b09      	ldr	r3, [pc, #36]	; (800a8c8 <vTaskPlaceOnEventList+0x88>)
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	6829      	ldr	r1, [r5, #0]
 800a8a6:	3104      	adds	r1, #4
 800a8a8:	f7fe fdaa 	bl	8009400 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8ac:	4b07      	ldr	r3, [pc, #28]	; (800a8cc <vTaskPlaceOnEventList+0x8c>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800a8b2:	bf38      	it	cc
 800a8b4:	601c      	strcc	r4, [r3, #0]
}
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	2000129c 	.word	0x2000129c
 800a8bc:	20001794 	.word	0x20001794
 800a8c0:	200012a4 	.word	0x200012a4
 800a8c4:	2000176c 	.word	0x2000176c
 800a8c8:	200012a0 	.word	0x200012a0
 800a8cc:	20001748 	.word	0x20001748

0800a8d0 <vTaskPlaceOnEventListRestricted>:
	{
 800a8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800a8d2:	b360      	cbz	r0, 800a92e <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8d4:	4d20      	ldr	r5, [pc, #128]	; (800a958 <vTaskPlaceOnEventListRestricted+0x88>)
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	6829      	ldr	r1, [r5, #0]
 800a8da:	4616      	mov	r6, r2
 800a8dc:	3118      	adds	r1, #24
 800a8de:	f7fe fd7f 	bl	80093e0 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800a8e2:	4b1e      	ldr	r3, [pc, #120]	; (800a95c <vTaskPlaceOnEventListRestricted+0x8c>)
		if( xWaitIndefinitely != pdFALSE )
 800a8e4:	b99e      	cbnz	r6, 800a90e <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 800a8e6:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a8e8:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8ea:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a8ec:	f883 606a 	strb.w	r6, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8f0:	3004      	adds	r0, #4
 800a8f2:	f7fe fd9d 	bl	8009430 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8f6:	682b      	ldr	r3, [r5, #0]
 800a8f8:	19e4      	adds	r4, r4, r7
 800a8fa:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8fc:	d320      	bcc.n	800a940 <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8fe:	4b18      	ldr	r3, [pc, #96]	; (800a960 <vTaskPlaceOnEventListRestricted+0x90>)
 800a900:	6818      	ldr	r0, [r3, #0]
 800a902:	6829      	ldr	r1, [r5, #0]
	}
 800a904:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a908:	3104      	adds	r1, #4
 800a90a:	f7fe bd79 	b.w	8009400 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800a90e:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a910:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a912:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a914:	2200      	movs	r2, #0
 800a916:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a91a:	3004      	adds	r0, #4
 800a91c:	f7fe fd88 	bl	8009430 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a920:	6829      	ldr	r1, [r5, #0]
 800a922:	4810      	ldr	r0, [pc, #64]	; (800a964 <vTaskPlaceOnEventListRestricted+0x94>)
	}
 800a924:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a928:	3104      	adds	r1, #4
 800a92a:	f7fe bd59 	b.w	80093e0 <vListInsertEnd>
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800a93e:	e7fe      	b.n	800a93e <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a940:	4b09      	ldr	r3, [pc, #36]	; (800a968 <vTaskPlaceOnEventListRestricted+0x98>)
 800a942:	6818      	ldr	r0, [r3, #0]
 800a944:	6829      	ldr	r1, [r5, #0]
 800a946:	3104      	adds	r1, #4
 800a948:	f7fe fd5a 	bl	8009400 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a94c:	4b07      	ldr	r3, [pc, #28]	; (800a96c <vTaskPlaceOnEventListRestricted+0x9c>)
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800a952:	bf38      	it	cc
 800a954:	601c      	strcc	r4, [r3, #0]
	}
 800a956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a958:	2000129c 	.word	0x2000129c
 800a95c:	20001794 	.word	0x20001794
 800a960:	200012a4 	.word	0x200012a4
 800a964:	2000176c 	.word	0x2000176c
 800a968:	200012a0 	.word	0x200012a0
 800a96c:	20001748 	.word	0x20001748

0800a970 <xTaskRemoveFromEventList>:
{
 800a970:	b510      	push	{r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a972:	68c3      	ldr	r3, [r0, #12]
 800a974:	68dc      	ldr	r4, [r3, #12]
{
 800a976:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 800a978:	2c00      	cmp	r4, #0
 800a97a:	d02c      	beq.n	800a9d6 <xTaskRemoveFromEventList+0x66>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a97c:	f104 0118 	add.w	r1, r4, #24
 800a980:	4608      	mov	r0, r1
 800a982:	9101      	str	r1, [sp, #4]
 800a984:	f7fe fd54 	bl	8009430 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a988:	4b17      	ldr	r3, [pc, #92]	; (800a9e8 <xTaskRemoveFromEventList+0x78>)
 800a98a:	9901      	ldr	r1, [sp, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	b173      	cbz	r3, 800a9ae <xTaskRemoveFromEventList+0x3e>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a990:	4816      	ldr	r0, [pc, #88]	; (800a9ec <xTaskRemoveFromEventList+0x7c>)
 800a992:	f7fe fd25 	bl	80093e0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a996:	4b16      	ldr	r3, [pc, #88]	; (800a9f0 <xTaskRemoveFromEventList+0x80>)
 800a998:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800a9a0:	bf85      	ittet	hi
 800a9a2:	4b14      	ldrhi	r3, [pc, #80]	; (800a9f4 <xTaskRemoveFromEventList+0x84>)
 800a9a4:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 800a9a6:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800a9a8:	6018      	strhi	r0, [r3, #0]
}
 800a9aa:	b002      	add	sp, #8
 800a9ac:	bd10      	pop	{r4, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9ae:	1d21      	adds	r1, r4, #4
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	9101      	str	r1, [sp, #4]
 800a9b4:	f7fe fd3c 	bl	8009430 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a9b8:	4a0f      	ldr	r2, [pc, #60]	; (800a9f8 <xTaskRemoveFromEventList+0x88>)
 800a9ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a9bc:	6810      	ldr	r0, [r2, #0]
 800a9be:	9901      	ldr	r1, [sp, #4]
 800a9c0:	4283      	cmp	r3, r0
 800a9c2:	480e      	ldr	r0, [pc, #56]	; (800a9fc <xTaskRemoveFromEventList+0x8c>)
 800a9c4:	bf88      	it	hi
 800a9c6:	6013      	strhi	r3, [r2, #0]
 800a9c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a9cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800a9d0:	f7fe fd06 	bl	80093e0 <vListInsertEnd>
 800a9d4:	e7df      	b.n	800a996 <xTaskRemoveFromEventList+0x26>
 800a9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800a9e6:	e7fe      	b.n	800a9e6 <xTaskRemoveFromEventList+0x76>
 800a9e8:	20001714 	.word	0x20001714
 800a9ec:	20001754 	.word	0x20001754
 800a9f0:	2000129c 	.word	0x2000129c
 800a9f4:	20001798 	.word	0x20001798
 800a9f8:	2000171c 	.word	0x2000171c
 800a9fc:	200012a8 	.word	0x200012a8

0800aa00 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa00:	4a03      	ldr	r2, [pc, #12]	; (800aa10 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa02:	4b04      	ldr	r3, [pc, #16]	; (800aa14 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa04:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	e9c0 2300 	strd	r2, r3, [r0]
}
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	2000174c 	.word	0x2000174c
 800aa14:	20001794 	.word	0x20001794

0800aa18 <xTaskCheckForTimeOut>:
{
 800aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800aa1a:	b318      	cbz	r0, 800aa64 <xTaskCheckForTimeOut+0x4c>
	configASSERT( pxTicksToWait );
 800aa1c:	460e      	mov	r6, r1
 800aa1e:	b1c1      	cbz	r1, 800aa52 <xTaskCheckForTimeOut+0x3a>
	taskENTER_CRITICAL();
 800aa20:	4605      	mov	r5, r0
 800aa22:	f000 fd27 	bl	800b474 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800aa26:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800aab4 <xTaskCheckForTimeOut+0x9c>
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800aa2a:	4b20      	ldr	r3, [pc, #128]	; (800aaac <xTaskCheckForTimeOut+0x94>)
		const TickType_t xConstTickCount = xTickCount;
 800aa2c:	f8dc 1000 	ldr.w	r1, [ip]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	f892 406a 	ldrb.w	r4, [r2, #106]	; 0x6a
 800aa36:	b9f4      	cbnz	r4, 800aa76 <xTaskCheckForTimeOut+0x5e>
			if( *pxTicksToWait == portMAX_DELAY )
 800aa38:	6833      	ldr	r3, [r6, #0]
 800aa3a:	1c5a      	adds	r2, r3, #1
 800aa3c:	d020      	beq.n	800aa80 <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa3e:	4c1c      	ldr	r4, [pc, #112]	; (800aab0 <xTaskCheckForTimeOut+0x98>)
 800aa40:	e9d5 0200 	ldrd	r0, r2, [r5]
 800aa44:	6827      	ldr	r7, [r4, #0]
 800aa46:	42b8      	cmp	r0, r7
 800aa48:	d01e      	beq.n	800aa88 <xTaskCheckForTimeOut+0x70>
 800aa4a:	428a      	cmp	r2, r1
 800aa4c:	d81c      	bhi.n	800aa88 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 800aa4e:	2401      	movs	r4, #1
 800aa50:	e016      	b.n	800aa80 <xTaskCheckForTimeOut+0x68>
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800aa62:	e7fe      	b.n	800aa62 <xTaskCheckForTimeOut+0x4a>
 800aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800aa74:	e7fe      	b.n	800aa74 <xTaskCheckForTimeOut+0x5c>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 800aa7e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800aa80:	f000 fd1a 	bl	800b4b8 <vPortExitCritical>
}
 800aa84:	4620      	mov	r0, r4
 800aa86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa88:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa8a:	42bb      	cmp	r3, r7
 800aa8c:	d909      	bls.n	800aaa2 <xTaskCheckForTimeOut+0x8a>
			*pxTicksToWait -= xElapsedTime;
 800aa8e:	1a5b      	subs	r3, r3, r1
 800aa90:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa92:	6821      	ldr	r1, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa94:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
 800aa98:	6033      	str	r3, [r6, #0]
			xReturn = pdFALSE;
 800aa9a:	2400      	movs	r4, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa9c:	e9c5 1200 	strd	r1, r2, [r5]
			xReturn = pdFALSE;
 800aaa0:	e7ee      	b.n	800aa80 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6033      	str	r3, [r6, #0]
			xReturn = pdTRUE;
 800aaa6:	2401      	movs	r4, #1
 800aaa8:	e7ea      	b.n	800aa80 <xTaskCheckForTimeOut+0x68>
 800aaaa:	bf00      	nop
 800aaac:	2000129c 	.word	0x2000129c
 800aab0:	2000174c 	.word	0x2000174c
 800aab4:	20001794 	.word	0x20001794

0800aab8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800aab8:	4b01      	ldr	r3, [pc, #4]	; (800aac0 <vTaskMissedYield+0x8>)
 800aaba:	2201      	movs	r2, #1
 800aabc:	601a      	str	r2, [r3, #0]
}
 800aabe:	4770      	bx	lr
 800aac0:	20001798 	.word	0x20001798

0800aac4 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 800aac4:	b168      	cbz	r0, 800aae2 <uxTaskGetStackHighWaterMark+0x1e>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800aac6:	6b03      	ldr	r3, [r0, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800aac8:	781a      	ldrb	r2, [r3, #0]
 800aaca:	2aa5      	cmp	r2, #165	; 0xa5
 800aacc:	d10f      	bne.n	800aaee <uxTaskGetStackHighWaterMark+0x2a>
 800aace:	f1c3 0101 	rsb	r1, r3, #1
			ulCount++;
 800aad2:	18c8      	adds	r0, r1, r3
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800aad4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800aad8:	2aa5      	cmp	r2, #165	; 0xa5
 800aada:	d0fa      	beq.n	800aad2 <uxTaskGetStackHighWaterMark+0xe>
 800aadc:	f3c0 008f 	ubfx	r0, r0, #2, #16
 800aae0:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
 800aae2:	4b04      	ldr	r3, [pc, #16]	; (800aaf4 <uxTaskGetStackHighWaterMark+0x30>)
 800aae4:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800aae6:	6b03      	ldr	r3, [r0, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800aae8:	781a      	ldrb	r2, [r3, #0]
 800aaea:	2aa5      	cmp	r2, #165	; 0xa5
 800aaec:	d0ef      	beq.n	800aace <uxTaskGetStackHighWaterMark+0xa>
 800aaee:	2000      	movs	r0, #0
	}
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	2000129c 	.word	0x2000129c

0800aaf8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800aaf8:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <xTaskGetSchedulerState+0x18>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	b133      	cbz	r3, 800ab0c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aafe:	4b05      	ldr	r3, [pc, #20]	; (800ab14 <xTaskGetSchedulerState+0x1c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab04:	bf0c      	ite	eq
 800ab06:	2002      	moveq	r0, #2
 800ab08:	2000      	movne	r0, #0
 800ab0a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab0c:	2001      	movs	r0, #1
	}
 800ab0e:	4770      	bx	lr
 800ab10:	20001768 	.word	0x20001768
 800ab14:	20001714 	.word	0x20001714

0800ab18 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800ab18:	b1d0      	cbz	r0, 800ab50 <xTaskPriorityDisinherit+0x38>
	{
 800ab1a:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800ab1c:	4b1e      	ldr	r3, [pc, #120]	; (800ab98 <xTaskPriorityDisinherit+0x80>)
 800ab1e:	681c      	ldr	r4, [r3, #0]
 800ab20:	4284      	cmp	r4, r0
	{
 800ab22:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 800ab24:	d008      	beq.n	800ab38 <xTaskPriorityDisinherit+0x20>
 800ab26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2a:	f383 8811 	msr	BASEPRI, r3
 800ab2e:	f3bf 8f6f 	isb	sy
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	e7fe      	b.n	800ab36 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab3a:	b15b      	cbz	r3, 800ab54 <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ab3e:	6d62      	ldr	r2, [r4, #84]	; 0x54
			( pxTCB->uxMutexesHeld )--;
 800ab40:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab42:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800ab44:	65a3      	str	r3, [r4, #88]	; 0x58
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab46:	d000      	beq.n	800ab4a <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab48:	b16b      	cbz	r3, 800ab66 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 800ab4a:	2000      	movs	r0, #0
	}
 800ab4c:	b003      	add	sp, #12
 800ab4e:	bd30      	pop	{r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800ab50:	2000      	movs	r0, #0
	}
 800ab52:	4770      	bx	lr
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800ab64:	e7fe      	b.n	800ab64 <xTaskPriorityDisinherit+0x4c>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab66:	1d21      	adds	r1, r4, #4
 800ab68:	4608      	mov	r0, r1
 800ab6a:	9101      	str	r1, [sp, #4]
 800ab6c:	f7fe fc60 	bl	8009430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab70:	4a0a      	ldr	r2, [pc, #40]	; (800ab9c <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab72:	6d63      	ldr	r3, [r4, #84]	; 0x54
					prvAddTaskToReadyList( pxTCB );
 800ab74:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab76:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ab78:	4283      	cmp	r3, r0
 800ab7a:	4809      	ldr	r0, [pc, #36]	; (800aba0 <xTaskPriorityDisinherit+0x88>)
 800ab7c:	bf88      	it	hi
 800ab7e:	6013      	strhi	r3, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab80:	f1c3 0538 	rsb	r5, r3, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 800ab84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ab88:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ab8c:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab8e:	61a5      	str	r5, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab90:	f7fe fc26 	bl	80093e0 <vListInsertEnd>
					xReturn = pdTRUE;
 800ab94:	2001      	movs	r0, #1
		return xReturn;
 800ab96:	e7d9      	b.n	800ab4c <xTaskPriorityDisinherit+0x34>
 800ab98:	2000129c 	.word	0x2000129c
 800ab9c:	2000171c 	.word	0x2000171c
 800aba0:	200012a8 	.word	0x200012a8

0800aba4 <ulTaskNotifyTake>:
	{
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800aba6:	4c29      	ldr	r4, [pc, #164]	; (800ac4c <ulTaskNotifyTake+0xa8>)
	{
 800aba8:	4606      	mov	r6, r0
 800abaa:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 800abac:	f000 fc62 	bl	800b474 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800abb0:	6823      	ldr	r3, [r4, #0]
 800abb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abb4:	b923      	cbnz	r3, 800abc0 <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800abb6:	6822      	ldr	r2, [r4, #0]
 800abb8:	2101      	movs	r1, #1
 800abba:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
				if( xTicksToWait > ( TickType_t ) 0 )
 800abbe:	b9ad      	cbnz	r5, 800abec <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 800abc0:	f000 fc7a 	bl	800b4b8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800abc4:	f000 fc56 	bl	800b474 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	6e5d      	ldr	r5, [r3, #100]	; 0x64
			if( ulReturn != 0UL )
 800abcc:	b11d      	cbz	r5, 800abd6 <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800abce:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 800abd0:	b14e      	cbz	r6, 800abe6 <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800abd2:	2200      	movs	r2, #0
 800abd4:	665a      	str	r2, [r3, #100]	; 0x64
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		taskEXIT_CRITICAL();
 800abde:	f000 fc6b 	bl	800b4b8 <vPortExitCritical>
	}
 800abe2:	4628      	mov	r0, r5
 800abe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800abe6:	1e6a      	subs	r2, r5, #1
 800abe8:	665a      	str	r2, [r3, #100]	; 0x64
 800abea:	e7f4      	b.n	800abd6 <ulTaskNotifyTake+0x32>
const TickType_t xConstTickCount = xTickCount;
 800abec:	4a18      	ldr	r2, [pc, #96]	; (800ac50 <ulTaskNotifyTake+0xac>)
 800abee:	6817      	ldr	r7, [r2, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800abf0:	6822      	ldr	r2, [r4, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abf2:	6820      	ldr	r0, [r4, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800abf4:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abf8:	3004      	adds	r0, #4
 800abfa:	f7fe fc19 	bl	8009430 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abfe:	1c6b      	adds	r3, r5, #1
 800ac00:	d012      	beq.n	800ac28 <ulTaskNotifyTake+0x84>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	19ed      	adds	r5, r5, r7
 800ac06:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac08:	d314      	bcc.n	800ac34 <ulTaskNotifyTake+0x90>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac0a:	4b12      	ldr	r3, [pc, #72]	; (800ac54 <ulTaskNotifyTake+0xb0>)
 800ac0c:	6818      	ldr	r0, [r3, #0]
 800ac0e:	6821      	ldr	r1, [r4, #0]
 800ac10:	3104      	adds	r1, #4
 800ac12:	f7fe fbf5 	bl	8009400 <vListInsert>
					portYIELD_WITHIN_API();
 800ac16:	4b10      	ldr	r3, [pc, #64]	; (800ac58 <ulTaskNotifyTake+0xb4>)
 800ac18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	e7cb      	b.n	800abc0 <ulTaskNotifyTake+0x1c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac28:	6821      	ldr	r1, [r4, #0]
 800ac2a:	480c      	ldr	r0, [pc, #48]	; (800ac5c <ulTaskNotifyTake+0xb8>)
 800ac2c:	3104      	adds	r1, #4
 800ac2e:	f7fe fbd7 	bl	80093e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac32:	e7f0      	b.n	800ac16 <ulTaskNotifyTake+0x72>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac34:	4b0a      	ldr	r3, [pc, #40]	; (800ac60 <ulTaskNotifyTake+0xbc>)
 800ac36:	6818      	ldr	r0, [r3, #0]
 800ac38:	6821      	ldr	r1, [r4, #0]
 800ac3a:	3104      	adds	r1, #4
 800ac3c:	f7fe fbe0 	bl	8009400 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac40:	4b08      	ldr	r3, [pc, #32]	; (800ac64 <ulTaskNotifyTake+0xc0>)
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	4295      	cmp	r5, r2
					xNextTaskUnblockTime = xTimeToWake;
 800ac46:	bf38      	it	cc
 800ac48:	601d      	strcc	r5, [r3, #0]
 800ac4a:	e7e4      	b.n	800ac16 <ulTaskNotifyTake+0x72>
 800ac4c:	2000129c 	.word	0x2000129c
 800ac50:	20001794 	.word	0x20001794
 800ac54:	200012a4 	.word	0x200012a4
 800ac58:	e000ed04 	.word	0xe000ed04
 800ac5c:	2000176c 	.word	0x2000176c
 800ac60:	200012a0 	.word	0x200012a0
 800ac64:	20001748 	.word	0x20001748

0800ac68 <xTaskGenericNotify>:
		configASSERT( xTaskToNotify );
 800ac68:	b1b8      	cbz	r0, 800ac9a <xTaskGenericNotify+0x32>
	{
 800ac6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac6c:	461f      	mov	r7, r3
 800ac6e:	b083      	sub	sp, #12
 800ac70:	460d      	mov	r5, r1
 800ac72:	4616      	mov	r6, r2
 800ac74:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800ac76:	f000 fbfd 	bl	800b474 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800ac7a:	b10f      	cbz	r7, 800ac80 <xTaskGenericNotify+0x18>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ac7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac7e:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ac80:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ac84:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ac86:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ac88:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
			switch( eAction )
 800ac8c:	2e04      	cmp	r6, #4
 800ac8e:	d84f      	bhi.n	800ad30 <xTaskGenericNotify+0xc8>
 800ac90:	e8df f006 	tbb	[pc, r6]
 800ac94:	3b350c0f 	.word	0x3b350c0f
 800ac98:	39          	.byte	0x39
 800ac99:	00          	.byte	0x00
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800acaa:	e7fe      	b.n	800acaa <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue |= ulValue;
 800acac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acae:	4315      	orrs	r5, r2
 800acb0:	6665      	str	r5, [r4, #100]	; 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d005      	beq.n	800acc2 <xTaskGenericNotify+0x5a>
					taskYIELD_IF_USING_PREEMPTION();
 800acb6:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 800acb8:	f000 fbfe 	bl	800b4b8 <vPortExitCritical>
	}
 800acbc:	4620      	mov	r0, r4
 800acbe:	b003      	add	sp, #12
 800acc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acc2:	1d21      	adds	r1, r4, #4
 800acc4:	4608      	mov	r0, r1
 800acc6:	9101      	str	r1, [sp, #4]
 800acc8:	f7fe fbb2 	bl	8009430 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800accc:	4a1e      	ldr	r2, [pc, #120]	; (800ad48 <xTaskGenericNotify+0xe0>)
 800acce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800acd0:	6810      	ldr	r0, [r2, #0]
 800acd2:	9901      	ldr	r1, [sp, #4]
 800acd4:	4283      	cmp	r3, r0
 800acd6:	481d      	ldr	r0, [pc, #116]	; (800ad4c <xTaskGenericNotify+0xe4>)
 800acd8:	bf88      	it	hi
 800acda:	6013      	strhi	r3, [r2, #0]
 800acdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ace0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ace4:	f7fe fb7c 	bl	80093e0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ace8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800acea:	b183      	cbz	r3, 800ad0e <xTaskGenericNotify+0xa6>
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	e7fe      	b.n	800acfc <xTaskGenericNotify+0x94>
					( pxTCB->ulNotifiedValue )++;
 800acfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad00:	3201      	adds	r2, #1
 800ad02:	6662      	str	r2, [r4, #100]	; 0x64
					break;
 800ad04:	e7d5      	b.n	800acb2 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d010      	beq.n	800ad2c <xTaskGenericNotify+0xc4>
						pxTCB->ulNotifiedValue = ulValue;
 800ad0a:	6665      	str	r5, [r4, #100]	; 0x64
 800ad0c:	e7d1      	b.n	800acb2 <xTaskGenericNotify+0x4a>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad0e:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <xTaskGenericNotify+0xe8>)
 800ad10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d9cd      	bls.n	800acb6 <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 800ad1a:	4b0e      	ldr	r3, [pc, #56]	; (800ad54 <xTaskGenericNotify+0xec>)
 800ad1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	e7c4      	b.n	800acb6 <xTaskGenericNotify+0x4e>
						xReturn = pdFAIL;
 800ad2c:	2400      	movs	r4, #0
 800ad2e:	e7c3      	b.n	800acb8 <xTaskGenericNotify+0x50>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ad30:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad32:	3201      	adds	r2, #1
 800ad34:	d0bd      	beq.n	800acb2 <xTaskGenericNotify+0x4a>
 800ad36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	e7fe      	b.n	800ad46 <xTaskGenericNotify+0xde>
 800ad48:	2000171c 	.word	0x2000171c
 800ad4c:	200012a8 	.word	0x200012a8
 800ad50:	2000129c 	.word	0x2000129c
 800ad54:	e000ed04 	.word	0xe000ed04

0800ad58 <xTaskGenericNotifyFromISR>:
	{
 800ad58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad5c:	b083      	sub	sp, #12
 800ad5e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		configASSERT( xTaskToNotify );
 800ad60:	b318      	cbz	r0, 800adaa <xTaskGenericNotifyFromISR+0x52>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad62:	460d      	mov	r5, r1
 800ad64:	4690      	mov	r8, r2
 800ad66:	4699      	mov	r9, r3
 800ad68:	4604      	mov	r4, r0
 800ad6a:	f000 fcbb 	bl	800b6e4 <vPortValidateInterruptPriority>
	__asm volatile
 800ad6e:	f3ef 8611 	mrs	r6, BASEPRI
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800ad82:	f1b9 0f00 	cmp.w	r9, #0
 800ad86:	d002      	beq.n	800ad8e <xTaskGenericNotifyFromISR+0x36>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ad88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad8a:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ad8e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ad92:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ad94:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ad96:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
			switch( eAction )
 800ad9a:	f1b8 0f04 	cmp.w	r8, #4
 800ad9e:	d856      	bhi.n	800ae4e <xTaskGenericNotifyFromISR+0xf6>
 800ada0:	e8df f008 	tbb	[pc, r8]
 800ada4:	28220c0f 	.word	0x28220c0f
 800ada8:	26          	.byte	0x26
 800ada9:	00          	.byte	0x00
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800adba:	e7fe      	b.n	800adba <xTaskGenericNotifyFromISR+0x62>
					pxTCB->ulNotifiedValue |= ulValue;
 800adbc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adbe:	4315      	orrs	r5, r2
 800adc0:	6665      	str	r5, [r4, #100]	; 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d005      	beq.n	800add2 <xTaskGenericNotifyFromISR+0x7a>
 800adc6:	2001      	movs	r0, #1
	__asm volatile
 800adc8:	f386 8811 	msr	BASEPRI, r6
	}
 800adcc:	b003      	add	sp, #12
 800adce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800add2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800add4:	b183      	cbz	r3, 800adf8 <xTaskGenericNotifyFromISR+0xa0>
	__asm volatile
 800add6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adda:	f383 8811 	msr	BASEPRI, r3
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	e7fe      	b.n	800ade6 <xTaskGenericNotifyFromISR+0x8e>
					( pxTCB->ulNotifiedValue )++;
 800ade8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adea:	3201      	adds	r2, #1
 800adec:	6662      	str	r2, [r4, #100]	; 0x64
					break;
 800adee:	e7e8      	b.n	800adc2 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d02a      	beq.n	800ae4a <xTaskGenericNotifyFromISR+0xf2>
						pxTCB->ulNotifiedValue = ulValue;
 800adf4:	6665      	str	r5, [r4, #100]	; 0x64
 800adf6:	e7e4      	b.n	800adc2 <xTaskGenericNotifyFromISR+0x6a>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adf8:	4b1b      	ldr	r3, [pc, #108]	; (800ae68 <xTaskGenericNotifyFromISR+0x110>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	b9fb      	cbnz	r3, 800ae3e <xTaskGenericNotifyFromISR+0xe6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adfe:	1d21      	adds	r1, r4, #4
 800ae00:	4608      	mov	r0, r1
 800ae02:	9101      	str	r1, [sp, #4]
 800ae04:	f7fe fb14 	bl	8009430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae08:	4a18      	ldr	r2, [pc, #96]	; (800ae6c <xTaskGenericNotifyFromISR+0x114>)
 800ae0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae0c:	6810      	ldr	r0, [r2, #0]
 800ae0e:	9901      	ldr	r1, [sp, #4]
 800ae10:	4283      	cmp	r3, r0
 800ae12:	4817      	ldr	r0, [pc, #92]	; (800ae70 <xTaskGenericNotifyFromISR+0x118>)
 800ae14:	bf88      	it	hi
 800ae16:	6013      	strhi	r3, [r2, #0]
 800ae18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ae1c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ae20:	f7fe fade 	bl	80093e0 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae24:	4b13      	ldr	r3, [pc, #76]	; (800ae74 <xTaskGenericNotifyFromISR+0x11c>)
 800ae26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d9ca      	bls.n	800adc6 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 800ae30:	b10f      	cbz	r7, 800ae36 <xTaskGenericNotifyFromISR+0xde>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ae32:	2301      	movs	r3, #1
 800ae34:	603b      	str	r3, [r7, #0]
					xYieldPending = pdTRUE;
 800ae36:	4b10      	ldr	r3, [pc, #64]	; (800ae78 <xTaskGenericNotifyFromISR+0x120>)
 800ae38:	2001      	movs	r0, #1
 800ae3a:	6018      	str	r0, [r3, #0]
 800ae3c:	e7c4      	b.n	800adc8 <xTaskGenericNotifyFromISR+0x70>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ae3e:	480f      	ldr	r0, [pc, #60]	; (800ae7c <xTaskGenericNotifyFromISR+0x124>)
 800ae40:	f104 0118 	add.w	r1, r4, #24
 800ae44:	f7fe facc 	bl	80093e0 <vListInsertEnd>
 800ae48:	e7ec      	b.n	800ae24 <xTaskGenericNotifyFromISR+0xcc>
						xReturn = pdFAIL;
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e7bc      	b.n	800adc8 <xTaskGenericNotifyFromISR+0x70>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ae4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae50:	3201      	adds	r2, #1
 800ae52:	d0b6      	beq.n	800adc2 <xTaskGenericNotifyFromISR+0x6a>
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	e7fe      	b.n	800ae64 <xTaskGenericNotifyFromISR+0x10c>
 800ae66:	bf00      	nop
 800ae68:	20001714 	.word	0x20001714
 800ae6c:	2000171c 	.word	0x2000171c
 800ae70:	200012a8 	.word	0x200012a8
 800ae74:	2000129c 	.word	0x2000129c
 800ae78:	20001798 	.word	0x20001798
 800ae7c:	20001754 	.word	0x20001754

0800ae80 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae84:	4e22      	ldr	r6, [pc, #136]	; (800af10 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 800ae86:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800af18 <prvSwitchTimerLists+0x98>
{
 800ae8a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800ae8c:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae90:	e00d      	b.n	800aeae <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae92:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae94:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae96:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae98:	1d25      	adds	r5, r4, #4
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	f7fe fac8 	bl	8009430 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aea0:	6a23      	ldr	r3, [r4, #32]
 800aea2:	4620      	mov	r0, r4
 800aea4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aea6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800aeaa:	075b      	lsls	r3, r3, #29
 800aeac:	d40a      	bmi.n	800aec4 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aeae:	6833      	ldr	r3, [r6, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	2a00      	cmp	r2, #0
 800aeb4:	d1ed      	bne.n	800ae92 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800aeb6:	4a17      	ldr	r2, [pc, #92]	; (800af14 <prvSwitchTimerLists+0x94>)
 800aeb8:	6811      	ldr	r1, [r2, #0]
 800aeba:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 800aebc:	6013      	str	r3, [r2, #0]
}
 800aebe:	b005      	add	sp, #20
 800aec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aec4:	69a3      	ldr	r3, [r4, #24]
 800aec6:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800aec8:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aeca:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 800aecc:	d205      	bcs.n	800aeda <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aece:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aed0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aed2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aed4:	f7fe fa94 	bl	8009400 <vListInsert>
 800aed8:	e7e9      	b.n	800aeae <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 800aeda:	f8d9 3000 	ldr.w	r3, [r9]
 800aede:	b16b      	cbz	r3, 800aefc <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aee0:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aee4:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aee6:	f7ff fe07 	bl	800aaf8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aeea:	2300      	movs	r3, #0
 800aeec:	f8d9 0000 	ldr.w	r0, [r9]
 800aef0:	461a      	mov	r2, r3
 800aef2:	4669      	mov	r1, sp
 800aef4:	f7fe fb60 	bl	80095b8 <xQueueGenericSend>
				configASSERT( xResult );
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d1d8      	bne.n	800aeae <prvSwitchTimerLists+0x2e>
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	e7fe      	b.n	800af0c <prvSwitchTimerLists+0x8c>
 800af0e:	bf00      	nop
 800af10:	2000179c 	.word	0x2000179c
 800af14:	200017a0 	.word	0x200017a0
 800af18:	200018c0 	.word	0x200018c0

0800af1c <prvTimerTask>:
{
 800af1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af20:	4e9e      	ldr	r6, [pc, #632]	; (800b19c <prvTimerTask+0x280>)
 800af22:	4d9f      	ldr	r5, [pc, #636]	; (800b1a0 <prvTimerTask+0x284>)
 800af24:	4c9f      	ldr	r4, [pc, #636]	; (800b1a4 <prvTimerTask+0x288>)
 800af26:	b08b      	sub	sp, #44	; 0x2c
 800af28:	f04f 0800 	mov.w	r8, #0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af2c:	6833      	ldr	r3, [r6, #0]
 800af2e:	f8d3 a000 	ldr.w	sl, [r3]
 800af32:	f1ba 0f00 	cmp.w	sl, #0
 800af36:	f000 80ad 	beq.w	800b094 <prvTimerTask+0x178>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 800af40:	f7ff fb94 	bl	800a66c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800af44:	f7ff fbaa 	bl	800a69c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800af48:	682a      	ldr	r2, [r5, #0]
 800af4a:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 800af4c:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800af4e:	f0c0 80b2 	bcc.w	800b0b6 <prvTimerTask+0x19a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af52:	4550      	cmp	r0, sl
	xLastTime = xTimeNow;
 800af54:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af56:	f080 80b8 	bcs.w	800b0ca <prvTimerTask+0x1ae>
 800af5a:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af5c:	6820      	ldr	r0, [r4, #0]
 800af5e:	ebaa 0109 	sub.w	r1, sl, r9
 800af62:	f7fe fed5 	bl	8009d10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af66:	f7ff fb89 	bl	800a67c <xTaskResumeAll>
 800af6a:	b938      	cbnz	r0, 800af7c <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 800af6c:	4b8e      	ldr	r3, [pc, #568]	; (800b1a8 <prvTimerTask+0x28c>)
 800af6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af72:	601a      	str	r2, [r3, #0]
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af7c:	6820      	ldr	r0, [r4, #0]
 800af7e:	2200      	movs	r2, #0
 800af80:	a902      	add	r1, sp, #8
 800af82:	f7fe fd07 	bl	8009994 <xQueueReceive>
 800af86:	2800      	cmp	r0, #0
 800af88:	d0d0      	beq.n	800af2c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af8a:	9b02      	ldr	r3, [sp, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	db78      	blt.n	800b082 <prvTimerTask+0x166>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af90:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	b113      	cbz	r3, 800af9c <prvTimerTask+0x80>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af96:	1d38      	adds	r0, r7, #4
 800af98:	f7fe fa4a 	bl	8009430 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800af9c:	f7ff fb7e 	bl	800a69c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 800afa4:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800afa6:	f0c0 808d 	bcc.w	800b0c4 <prvTimerTask+0x1a8>
	xLastTime = xTimeNow;
 800afaa:	9b02      	ldr	r3, [sp, #8]
 800afac:	f8c5 9000 	str.w	r9, [r5]
			switch( xMessage.xMessageID )
 800afb0:	2b09      	cmp	r3, #9
 800afb2:	d8e3      	bhi.n	800af7c <prvTimerTask+0x60>
 800afb4:	e8df f003 	tbb	[pc, r3]
 800afb8:	55050505 	.word	0x55050505
 800afbc:	05055c3e 	.word	0x05055c3e
 800afc0:	3e55      	.short	0x3e55
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afc2:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800afc6:	9b03      	ldr	r3, [sp, #12]
 800afc8:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afca:	613f      	str	r7, [r7, #16]
 800afcc:	1898      	adds	r0, r3, r2
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afce:	f041 0101 	orr.w	r1, r1, #1
 800afd2:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800afd6:	bf2c      	ite	cs
 800afd8:	2101      	movcs	r1, #1
 800afda:	2100      	movcc	r1, #0
	if( xNextExpiryTime <= xTimeNow )
 800afdc:	4548      	cmp	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800afde:	6078      	str	r0, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800afe0:	f200 808e 	bhi.w	800b100 <prvTimerTask+0x1e4>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afe4:	eba9 0303 	sub.w	r3, r9, r3
 800afe8:	429a      	cmp	r2, r3
 800afea:	f200 8097 	bhi.w	800b11c <prvTimerTask+0x200>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	4638      	mov	r0, r7
 800aff2:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aff4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aff8:	075b      	lsls	r3, r3, #29
 800affa:	d5bf      	bpl.n	800af7c <prvTimerTask+0x60>
	if( xTimerQueue != NULL )
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	b183      	cbz	r3, 800b022 <prvTimerTask+0x106>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b000:	69ba      	ldr	r2, [r7, #24]
 800b002:	9b03      	ldr	r3, [sp, #12]
		xMessage.xMessageID = xCommandID;
 800b004:	f8cd 8018 	str.w	r8, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b008:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b00a:	e9cd 3707 	strd	r3, r7, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b00e:	f7ff fd73 	bl	800aaf8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b012:	2300      	movs	r3, #0
 800b014:	6820      	ldr	r0, [r4, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	a906      	add	r1, sp, #24
 800b01a:	f7fe facd 	bl	80095b8 <xQueueGenericSend>
							configASSERT( xResult );
 800b01e:	2800      	cmp	r0, #0
 800b020:	d1ac      	bne.n	800af7c <prvTimerTask+0x60>
 800b022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	e7fe      	b.n	800b032 <prvTimerTask+0x116>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b034:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b038:	9b03      	ldr	r3, [sp, #12]
 800b03a:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b03c:	f042 0201 	orr.w	r2, r2, #1
 800b040:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 809a 	beq.w	800b17e <prvTimerTask+0x262>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b04a:	444b      	add	r3, r9
	if( xNextExpiryTime <= xTimeNow )
 800b04c:	454b      	cmp	r3, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b04e:	607b      	str	r3, [r7, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b050:	bf96      	itet	ls
 800b052:	4b56      	ldrls	r3, [pc, #344]	; (800b1ac <prvTimerTask+0x290>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b054:	6830      	ldrhi	r0, [r6, #0]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b056:	6818      	ldrls	r0, [r3, #0]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b058:	613f      	str	r7, [r7, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b05a:	1d39      	adds	r1, r7, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b05c:	f7fe f9d0 	bl	8009400 <vListInsert>
 800b060:	e78c      	b.n	800af7c <prvTimerTask+0x60>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b062:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b066:	f023 0301 	bic.w	r3, r3, #1
 800b06a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 800b06e:	e785      	b.n	800af7c <prvTimerTask+0x60>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b070:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b074:	079a      	lsls	r2, r3, #30
 800b076:	d54d      	bpl.n	800b114 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b078:	f023 0301 	bic.w	r3, r3, #1
 800b07c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800b080:	e77c      	b.n	800af7c <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b082:	9b03      	ldr	r3, [sp, #12]
 800b084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b088:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b08a:	9b02      	ldr	r3, [sp, #8]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f6ff af75 	blt.w	800af7c <prvTimerTask+0x60>
 800b092:	e77d      	b.n	800af90 <prvTimerTask+0x74>
	vTaskSuspendAll();
 800b094:	f7ff faea 	bl	800a66c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800b098:	f7ff fb00 	bl	800a69c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800b09c:	682a      	ldr	r2, [r5, #0]
 800b09e:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 800b0a0:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800b0a2:	d808      	bhi.n	800b0b6 <prvTimerTask+0x19a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b0a4:	4b41      	ldr	r3, [pc, #260]	; (800b1ac <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
 800b0a6:	f8c5 9000 	str.w	r9, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	6812      	ldr	r2, [r2, #0]
 800b0ae:	fab2 f282 	clz	r2, r2
 800b0b2:	0952      	lsrs	r2, r2, #5
 800b0b4:	e752      	b.n	800af5c <prvTimerTask+0x40>
		prvSwitchTimerLists();
 800b0b6:	f7ff fee3 	bl	800ae80 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800b0ba:	f8c5 9000 	str.w	r9, [r5]
			( void ) xTaskResumeAll();
 800b0be:	f7ff fadd 	bl	800a67c <xTaskResumeAll>
 800b0c2:	e75b      	b.n	800af7c <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800b0c4:	f7ff fedc 	bl	800ae80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0c8:	e76f      	b.n	800afaa <prvTimerTask+0x8e>
				( void ) xTaskResumeAll();
 800b0ca:	f7ff fad7 	bl	800a67c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0ce:	6832      	ldr	r2, [r6, #0]
 800b0d0:	68d2      	ldr	r2, [r2, #12]
 800b0d2:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0d6:	f10b 0104 	add.w	r1, fp, #4
 800b0da:	4608      	mov	r0, r1
 800b0dc:	9101      	str	r1, [sp, #4]
 800b0de:	f7fe f9a7 	bl	8009430 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0e2:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 800b0e6:	9901      	ldr	r1, [sp, #4]
 800b0e8:	f010 0f04 	tst.w	r0, #4
 800b0ec:	d11c      	bne.n	800b128 <prvTimerTask+0x20c>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0ee:	f020 0001 	bic.w	r0, r0, #1
 800b0f2:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0f6:	f8db 3020 	ldr.w	r3, [fp, #32]
 800b0fa:	4658      	mov	r0, fp
 800b0fc:	4798      	blx	r3
}
 800b0fe:	e73d      	b.n	800af7c <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b100:	454b      	cmp	r3, r9
 800b102:	d902      	bls.n	800b10a <prvTimerTask+0x1ee>
 800b104:	2900      	cmp	r1, #0
 800b106:	f43f af72 	beq.w	800afee <prvTimerTask+0xd2>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b10a:	6830      	ldr	r0, [r6, #0]
 800b10c:	1d39      	adds	r1, r7, #4
 800b10e:	f7fe f977 	bl	8009400 <vListInsert>
	return xProcessTimerNow;
 800b112:	e733      	b.n	800af7c <prvTimerTask+0x60>
							vPortFree( pxTimer );
 800b114:	4638      	mov	r0, r7
 800b116:	f000 fbcf 	bl	800b8b8 <vPortFree>
 800b11a:	e72f      	b.n	800af7c <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b11c:	4b23      	ldr	r3, [pc, #140]	; (800b1ac <prvTimerTask+0x290>)
 800b11e:	1d39      	adds	r1, r7, #4
 800b120:	6818      	ldr	r0, [r3, #0]
 800b122:	f7fe f96d 	bl	8009400 <vListInsert>
	return xProcessTimerNow;
 800b126:	e729      	b.n	800af7c <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b128:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b12c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b130:	eb0a 0300 	add.w	r3, sl, r0
	if( xNextExpiryTime <= xTimeNow )
 800b134:	4599      	cmp	r9, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b136:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800b13a:	d203      	bcs.n	800b144 <prvTimerTask+0x228>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b13c:	6830      	ldr	r0, [r6, #0]
 800b13e:	f7fe f95f 	bl	8009400 <vListInsert>
	return xProcessTimerNow;
 800b142:	e7d8      	b.n	800b0f6 <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b144:	eba9 030a 	sub.w	r3, r9, sl
 800b148:	4298      	cmp	r0, r3
 800b14a:	d821      	bhi.n	800b190 <prvTimerTask+0x274>
	if( xTimerQueue != NULL )
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	b16b      	cbz	r3, 800b16c <prvTimerTask+0x250>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b150:	e9cd 8a06 	strd	r8, sl, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b154:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b158:	f7ff fcce 	bl	800aaf8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b15c:	2300      	movs	r3, #0
 800b15e:	6820      	ldr	r0, [r4, #0]
 800b160:	461a      	mov	r2, r3
 800b162:	a906      	add	r1, sp, #24
 800b164:	f7fe fa28 	bl	80095b8 <xQueueGenericSend>
			configASSERT( xResult );
 800b168:	2800      	cmp	r0, #0
 800b16a:	d1c4      	bne.n	800b0f6 <prvTimerTask+0x1da>
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	e7fe      	b.n	800b17c <prvTimerTask+0x260>
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b18e:	e7fe      	b.n	800b18e <prvTimerTask+0x272>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b190:	4b06      	ldr	r3, [pc, #24]	; (800b1ac <prvTimerTask+0x290>)
 800b192:	6818      	ldr	r0, [r3, #0]
 800b194:	f7fe f934 	bl	8009400 <vListInsert>
	return xProcessTimerNow;
 800b198:	e7ad      	b.n	800b0f6 <prvTimerTask+0x1da>
 800b19a:	bf00      	nop
 800b19c:	2000179c 	.word	0x2000179c
 800b1a0:	2000186c 	.word	0x2000186c
 800b1a4:	200018c0 	.word	0x200018c0
 800b1a8:	e000ed04 	.word	0xe000ed04
 800b1ac:	200017a0 	.word	0x200017a0

0800b1b0 <xTimerCreateTimerTask>:
{
 800b1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800b1b2:	4c23      	ldr	r4, [pc, #140]	; (800b240 <xTimerCreateTimerTask+0x90>)
{
 800b1b4:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 800b1b6:	f000 f95d 	bl	800b474 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800b1ba:	6827      	ldr	r7, [r4, #0]
 800b1bc:	b337      	cbz	r7, 800b20c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1be:	f000 f97b 	bl	800b4b8 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	b1cb      	cbz	r3, 800b1fa <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b1c6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b1c8:	aa07      	add	r2, sp, #28
 800b1ca:	a906      	add	r1, sp, #24
 800b1cc:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b1ce:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b1d2:	f7fe f8e5 	bl	80093a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b1d6:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 800b1da:	2202      	movs	r2, #2
 800b1dc:	e9cd 2100 	strd	r2, r1, [sp]
 800b1e0:	9302      	str	r3, [sp, #8]
 800b1e2:	9a07      	ldr	r2, [sp, #28]
 800b1e4:	4917      	ldr	r1, [pc, #92]	; (800b244 <xTimerCreateTimerTask+0x94>)
 800b1e6:	4818      	ldr	r0, [pc, #96]	; (800b248 <xTimerCreateTimerTask+0x98>)
 800b1e8:	4623      	mov	r3, r4
 800b1ea:	f7ff f865 	bl	800a2b8 <xTaskCreateStatic>
 800b1ee:	4b17      	ldr	r3, [pc, #92]	; (800b24c <xTimerCreateTimerTask+0x9c>)
 800b1f0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800b1f2:	b110      	cbz	r0, 800b1fa <xTimerCreateTimerTask+0x4a>
}
 800b1f4:	2001      	movs	r0, #1
 800b1f6:	b009      	add	sp, #36	; 0x24
 800b1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800b20a:	e7fe      	b.n	800b20a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 800b20c:	4e10      	ldr	r6, [pc, #64]	; (800b250 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 800b20e:	4d11      	ldr	r5, [pc, #68]	; (800b254 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 800b210:	4630      	mov	r0, r6
 800b212:	f7fe f8d5 	bl	80093c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b216:	4628      	mov	r0, r5
 800b218:	f7fe f8d2 	bl	80093c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b21c:	4a0e      	ldr	r2, [pc, #56]	; (800b258 <xTimerCreateTimerTask+0xa8>)
			pxOverflowTimerList = &xActiveTimerList2;
 800b21e:	490f      	ldr	r1, [pc, #60]	; (800b25c <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b220:	9700      	str	r7, [sp, #0]
 800b222:	4b0f      	ldr	r3, [pc, #60]	; (800b260 <xTimerCreateTimerTask+0xb0>)
			pxCurrentTimerList = &xActiveTimerList1;
 800b224:	6016      	str	r6, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b226:	600d      	str	r5, [r1, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b228:	4a0e      	ldr	r2, [pc, #56]	; (800b264 <xTimerCreateTimerTask+0xb4>)
 800b22a:	2110      	movs	r1, #16
 800b22c:	200a      	movs	r0, #10
 800b22e:	f7fe f951 	bl	80094d4 <xQueueGenericCreateStatic>
 800b232:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800b234:	2800      	cmp	r0, #0
 800b236:	d0c2      	beq.n	800b1be <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b238:	490b      	ldr	r1, [pc, #44]	; (800b268 <xTimerCreateTimerTask+0xb8>)
 800b23a:	f7fe fd2f 	bl	8009c9c <vQueueAddToRegistry>
 800b23e:	e7be      	b.n	800b1be <xTimerCreateTimerTask+0xe>
 800b240:	200018c0 	.word	0x200018c0
 800b244:	0800d3dc 	.word	0x0800d3dc
 800b248:	0800af1d 	.word	0x0800af1d
 800b24c:	200018c4 	.word	0x200018c4
 800b250:	20001844 	.word	0x20001844
 800b254:	20001858 	.word	0x20001858
 800b258:	2000179c 	.word	0x2000179c
 800b25c:	200017a0 	.word	0x200017a0
 800b260:	20001870 	.word	0x20001870
 800b264:	200017a4 	.word	0x200017a4
 800b268:	0800d3d4 	.word	0x0800d3d4

0800b26c <xTimerCreate>:
	{
 800b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	4607      	mov	r7, r0
 800b272:	b085      	sub	sp, #20
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b274:	202c      	movs	r0, #44	; 0x2c
	{
 800b276:	4688      	mov	r8, r1
 800b278:	4616      	mov	r6, r2
 800b27a:	461d      	mov	r5, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b27c:	f000 fa60 	bl	800b740 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800b280:	4604      	mov	r4, r0
 800b282:	b1e8      	cbz	r0, 800b2c0 <xTimerCreate+0x54>
			pxNewTimer->ucStatus = 0x00;
 800b284:	2300      	movs	r3, #0
 800b286:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b28a:	f1b8 0f00 	cmp.w	r8, #0
 800b28e:	d01b      	beq.n	800b2c8 <xTimerCreate+0x5c>
		if( xTimerQueue == NULL )
 800b290:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800b330 <xTimerCreate+0xc4>
	taskENTER_CRITICAL();
 800b294:	f000 f8ee 	bl	800b474 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800b298:	f8d9 3000 	ldr.w	r3, [r9]
 800b29c:	b1eb      	cbz	r3, 800b2da <xTimerCreate+0x6e>
	taskEXIT_CRITICAL();
 800b29e:	f000 f90b 	bl	800b4b8 <vPortExitCritical>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		pxNewTimer->pcTimerName = pcTimerName;
 800b2a4:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
 800b2a6:	e9c4 8506 	strd	r8, r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b2aa:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b2ac:	1d20      	adds	r0, r4, #4
 800b2ae:	f7fe f893 	bl	80093d8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b2b2:	b12e      	cbz	r6, 800b2c0 <xTimerCreate+0x54>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b2b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b2b8:	f043 0304 	orr.w	r3, r3, #4
 800b2bc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	b005      	add	sp, #20
 800b2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2cc:	f383 8811 	msr	BASEPRI, r3
 800b2d0:	f3bf 8f6f 	isb	sy
 800b2d4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b2d8:	e7fe      	b.n	800b2d8 <xTimerCreate+0x6c>
			vListInitialise( &xActiveTimerList1 );
 800b2da:	f8df b058 	ldr.w	fp, [pc, #88]	; 800b334 <xTimerCreate+0xc8>
			vListInitialise( &xActiveTimerList2 );
 800b2de:	f8df a058 	ldr.w	sl, [pc, #88]	; 800b338 <xTimerCreate+0xcc>
 800b2e2:	9303      	str	r3, [sp, #12]
			vListInitialise( &xActiveTimerList1 );
 800b2e4:	4658      	mov	r0, fp
 800b2e6:	f7fe f86b 	bl	80093c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b2ea:	4650      	mov	r0, sl
 800b2ec:	f7fe f868 	bl	80093c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2f0:	4a0a      	ldr	r2, [pc, #40]	; (800b31c <xTimerCreate+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 800b2f2:	490b      	ldr	r1, [pc, #44]	; (800b320 <xTimerCreate+0xb4>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 800b2fa:	f8c2 b000 	str.w	fp, [r2]
			pxOverflowTimerList = &xActiveTimerList2;
 800b2fe:	f8c1 a000 	str.w	sl, [r1]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b302:	4b08      	ldr	r3, [pc, #32]	; (800b324 <xTimerCreate+0xb8>)
 800b304:	4a08      	ldr	r2, [pc, #32]	; (800b328 <xTimerCreate+0xbc>)
 800b306:	2110      	movs	r1, #16
 800b308:	f7fe f8e4 	bl	80094d4 <xQueueGenericCreateStatic>
 800b30c:	f8c9 0000 	str.w	r0, [r9]
				if( xTimerQueue != NULL )
 800b310:	2800      	cmp	r0, #0
 800b312:	d0c4      	beq.n	800b29e <xTimerCreate+0x32>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b314:	4905      	ldr	r1, [pc, #20]	; (800b32c <xTimerCreate+0xc0>)
 800b316:	f7fe fcc1 	bl	8009c9c <vQueueAddToRegistry>
 800b31a:	e7c0      	b.n	800b29e <xTimerCreate+0x32>
 800b31c:	2000179c 	.word	0x2000179c
 800b320:	200017a0 	.word	0x200017a0
 800b324:	20001870 	.word	0x20001870
 800b328:	200017a4 	.word	0x200017a4
 800b32c:	0800d3d4 	.word	0x0800d3d4
 800b330:	200018c0 	.word	0x200018c0
 800b334:	20001844 	.word	0x20001844
 800b338:	20001858 	.word	0x20001858

0800b33c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800b33c:	b1b0      	cbz	r0, 800b36c <xTimerGenericCommand+0x30>
{
 800b33e:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 800b340:	4d16      	ldr	r5, [pc, #88]	; (800b39c <xTimerGenericCommand+0x60>)
 800b342:	4604      	mov	r4, r0
 800b344:	6828      	ldr	r0, [r5, #0]
{
 800b346:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 800b348:	b170      	cbz	r0, 800b368 <xTimerGenericCommand+0x2c>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b34a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b34c:	e9cd 1200 	strd	r1, r2, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b350:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b352:	dc14      	bgt.n	800b37e <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b354:	f7ff fbd0 	bl	800aaf8 <xTaskGetSchedulerState>
 800b358:	2802      	cmp	r0, #2
 800b35a:	d017      	beq.n	800b38c <xTimerGenericCommand+0x50>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b35c:	2300      	movs	r3, #0
 800b35e:	6828      	ldr	r0, [r5, #0]
 800b360:	461a      	mov	r2, r3
 800b362:	4669      	mov	r1, sp
 800b364:	f7fe f928 	bl	80095b8 <xQueueGenericSend>
}
 800b368:	b004      	add	sp, #16
 800b36a:	bd70      	pop	{r4, r5, r6, pc}
 800b36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b370:	f383 8811 	msr	BASEPRI, r3
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800b37c:	e7fe      	b.n	800b37c <xTimerGenericCommand+0x40>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b37e:	461a      	mov	r2, r3
 800b380:	4669      	mov	r1, sp
 800b382:	2300      	movs	r3, #0
 800b384:	f7fe fa9e 	bl	80098c4 <xQueueGenericSendFromISR>
}
 800b388:	b004      	add	sp, #16
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b38c:	6828      	ldr	r0, [r5, #0]
 800b38e:	9a08      	ldr	r2, [sp, #32]
 800b390:	2300      	movs	r3, #0
 800b392:	4669      	mov	r1, sp
 800b394:	f7fe f910 	bl	80095b8 <xQueueGenericSend>
 800b398:	e7e6      	b.n	800b368 <xTimerGenericCommand+0x2c>
 800b39a:	bf00      	nop
 800b39c:	200018c0 	.word	0x200018c0

0800b3a0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3a0:	4808      	ldr	r0, [pc, #32]	; (800b3c4 <prvPortStartFirstTask+0x24>)
 800b3a2:	6800      	ldr	r0, [r0, #0]
 800b3a4:	6800      	ldr	r0, [r0, #0]
 800b3a6:	f380 8808 	msr	MSP, r0
 800b3aa:	f04f 0000 	mov.w	r0, #0
 800b3ae:	f380 8814 	msr	CONTROL, r0
 800b3b2:	b662      	cpsie	i
 800b3b4:	b661      	cpsie	f
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	df00      	svc	0
 800b3c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3c2:	0000      	.short	0x0000
 800b3c4:	e000ed08 	.word	0xe000ed08

0800b3c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b3c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b3d8 <vPortEnableVFP+0x10>
 800b3cc:	6801      	ldr	r1, [r0, #0]
 800b3ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b3d2:	6001      	str	r1, [r0, #0]
 800b3d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b3d6:	0000      	.short	0x0000
 800b3d8:	e000ed88 	.word	0xe000ed88

0800b3dc <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800b3dc:	4b0e      	ldr	r3, [pc, #56]	; (800b418 <prvTaskExitError+0x3c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
{
 800b3e0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b3e2:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800b3e4:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800b3e6:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b3e8:	d008      	beq.n	800b3fc <prvTaskExitError+0x20>
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	e7fe      	b.n	800b3fa <prvTaskExitError+0x1e>
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b40c:	9b01      	ldr	r3, [sp, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d0fc      	beq.n	800b40c <prvTaskExitError+0x30>
}
 800b412:	b002      	add	sp, #8
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	20000038 	.word	0x20000038

0800b41c <pxPortInitialiseStack>:
{
 800b41c:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b41e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b422:	4c09      	ldr	r4, [pc, #36]	; (800b448 <pxPortInitialiseStack+0x2c>)
 800b424:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b428:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b42c:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b430:	f840 5c04 	str.w	r5, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b434:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b438:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b43c:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800b440:	bc30      	pop	{r4, r5}
 800b442:	3844      	subs	r0, #68	; 0x44
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	0800b3dd 	.word	0x0800b3dd
 800b44c:	00000000 	.word	0x00000000

0800b450 <SVC_Handler>:
	__asm volatile (
 800b450:	4b07      	ldr	r3, [pc, #28]	; (800b470 <pxCurrentTCBConst2>)
 800b452:	6819      	ldr	r1, [r3, #0]
 800b454:	6808      	ldr	r0, [r1, #0]
 800b456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45a:	f380 8809 	msr	PSP, r0
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f04f 0000 	mov.w	r0, #0
 800b466:	f380 8811 	msr	BASEPRI, r0
 800b46a:	4770      	bx	lr
 800b46c:	f3af 8000 	nop.w

0800b470 <pxCurrentTCBConst2>:
 800b470:	2000129c 	.word	0x2000129c

0800b474 <vPortEnterCritical>:
 800b474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b484:	4a0a      	ldr	r2, [pc, #40]	; (800b4b0 <vPortEnterCritical+0x3c>)
 800b486:	6813      	ldr	r3, [r2, #0]
 800b488:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b48a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b48c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b48e:	d000      	beq.n	800b492 <vPortEnterCritical+0x1e>
}
 800b490:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b492:	4b08      	ldr	r3, [pc, #32]	; (800b4b4 <vPortEnterCritical+0x40>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b49a:	d0f9      	beq.n	800b490 <vPortEnterCritical+0x1c>
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	e7fe      	b.n	800b4ac <vPortEnterCritical+0x38>
 800b4ae:	bf00      	nop
 800b4b0:	20000038 	.word	0x20000038
 800b4b4:	e000ed04 	.word	0xe000ed04

0800b4b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b4b8:	4a08      	ldr	r2, [pc, #32]	; (800b4dc <vPortExitCritical+0x24>)
 800b4ba:	6813      	ldr	r3, [r2, #0]
 800b4bc:	b943      	cbnz	r3, 800b4d0 <vPortExitCritical+0x18>
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	e7fe      	b.n	800b4ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b4d4:	b90b      	cbnz	r3, 800b4da <vPortExitCritical+0x22>
	__asm volatile
 800b4d6:	f383 8811 	msr	BASEPRI, r3
}
 800b4da:	4770      	bx	lr
 800b4dc:	20000038 	.word	0x20000038

0800b4e0 <PendSV_Handler>:
	__asm volatile
 800b4e0:	f3ef 8009 	mrs	r0, PSP
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	4b15      	ldr	r3, [pc, #84]	; (800b540 <pxCurrentTCBConst>)
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	f01e 0f10 	tst.w	lr, #16
 800b4f0:	bf08      	it	eq
 800b4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4fa:	6010      	str	r0, [r2, #0]
 800b4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b500:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b504:	f380 8811 	msr	BASEPRI, r0
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f7ff f8da 	bl	800a6c8 <vTaskSwitchContext>
 800b514:	f04f 0000 	mov.w	r0, #0
 800b518:	f380 8811 	msr	BASEPRI, r0
 800b51c:	bc09      	pop	{r0, r3}
 800b51e:	6819      	ldr	r1, [r3, #0]
 800b520:	6808      	ldr	r0, [r1, #0]
 800b522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b526:	f01e 0f10 	tst.w	lr, #16
 800b52a:	bf08      	it	eq
 800b52c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b530:	f380 8809 	msr	PSP, r0
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	f3af 8000 	nop.w

0800b540 <pxCurrentTCBConst>:
 800b540:	2000129c 	.word	0x2000129c

0800b544 <xPortSysTickHandler>:
{
 800b544:	b508      	push	{r3, lr}
	__asm volatile
 800b546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b556:	f7ff f8a7 	bl	800a6a8 <xTaskIncrementTick>
 800b55a:	b118      	cbz	r0, 800b564 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b55c:	4b03      	ldr	r3, [pc, #12]	; (800b56c <xPortSysTickHandler+0x28>)
 800b55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b562:	601a      	str	r2, [r3, #0]
	__asm volatile
 800b564:	2300      	movs	r3, #0
 800b566:	f383 8811 	msr	BASEPRI, r3
}
 800b56a:	bd08      	pop	{r3, pc}
 800b56c:	e000ed04 	.word	0xe000ed04

0800b570 <vPortSetupTimerInterrupt>:
{
 800b570:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b572:	4a09      	ldr	r2, [pc, #36]	; (800b598 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b574:	4d09      	ldr	r5, [pc, #36]	; (800b59c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b576:	4b0a      	ldr	r3, [pc, #40]	; (800b5a0 <vPortSetupTimerInterrupt+0x30>)
 800b578:	4c0a      	ldr	r4, [pc, #40]	; (800b5a4 <vPortSetupTimerInterrupt+0x34>)
 800b57a:	480b      	ldr	r0, [pc, #44]	; (800b5a8 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b57c:	2100      	movs	r1, #0
 800b57e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b580:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	fba4 1303 	umull	r1, r3, r4, r3
 800b588:	099b      	lsrs	r3, r3, #6
 800b58a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b58c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b58e:	6003      	str	r3, [r0, #0]
}
 800b590:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b592:	6011      	str	r1, [r2, #0]
}
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	e000e010 	.word	0xe000e010
 800b59c:	e000e018 	.word	0xe000e018
 800b5a0:	20000030 	.word	0x20000030
 800b5a4:	10624dd3 	.word	0x10624dd3
 800b5a8:	e000e014 	.word	0xe000e014

0800b5ac <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5ac:	4b44      	ldr	r3, [pc, #272]	; (800b6c0 <xPortStartScheduler+0x114>)
 800b5ae:	4a45      	ldr	r2, [pc, #276]	; (800b6c4 <xPortStartScheduler+0x118>)
 800b5b0:	6819      	ldr	r1, [r3, #0]
 800b5b2:	4291      	cmp	r1, r2
 800b5b4:	d040      	beq.n	800b638 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	4b43      	ldr	r3, [pc, #268]	; (800b6c8 <xPortStartScheduler+0x11c>)
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d033      	beq.n	800b626 <xPortStartScheduler+0x7a>
{
 800b5be:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5c0:	4b42      	ldr	r3, [pc, #264]	; (800b6cc <xPortStartScheduler+0x120>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5c2:	4c43      	ldr	r4, [pc, #268]	; (800b6d0 <xPortStartScheduler+0x124>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5c4:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5c6:	4943      	ldr	r1, [pc, #268]	; (800b6d4 <xPortStartScheduler+0x128>)
{
 800b5c8:	b085      	sub	sp, #20
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ca:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5cc:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ce:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5d0:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5da:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5de:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5e6:	2007      	movs	r0, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5e8:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5ea:	0614      	lsls	r4, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5ec:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5ee:	bf48      	it	mi
 800b5f0:	2206      	movmi	r2, #6
 800b5f2:	d50f      	bpl.n	800b614 <xPortStartScheduler+0x68>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b5f8:	005b      	lsls	r3, r3, #1
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b600:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b604:	0600      	lsls	r0, r0, #24
 800b606:	4613      	mov	r3, r2
 800b608:	f102 32ff 	add.w	r2, r2, #4294967295
 800b60c:	d4f2      	bmi.n	800b5f4 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b60e:	2b03      	cmp	r3, #3
 800b610:	d01b      	beq.n	800b64a <xPortStartScheduler+0x9e>
 800b612:	600b      	str	r3, [r1, #0]
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	e7fe      	b.n	800b624 <xPortStartScheduler+0x78>
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b636:	e7fe      	b.n	800b636 <xPortStartScheduler+0x8a>
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b648:	e7fe      	b.n	800b648 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b64a:	9a02      	ldr	r2, [sp, #8]
 800b64c:	481f      	ldr	r0, [pc, #124]	; (800b6cc <xPortStartScheduler+0x120>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b64e:	4b22      	ldr	r3, [pc, #136]	; (800b6d8 <xPortStartScheduler+0x12c>)
	uxCriticalNesting = 0;
 800b650:	4c22      	ldr	r4, [pc, #136]	; (800b6dc <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b652:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b654:	f44f 7540 	mov.w	r5, #768	; 0x300
 800b658:	600d      	str	r5, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b65a:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800b662:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800b66a:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800b66c:	2500      	movs	r5, #0
	vPortSetupTimerInterrupt();
 800b66e:	f7ff ff7f 	bl	800b570 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b672:	6025      	str	r5, [r4, #0]
	vPortEnableVFP();
 800b674:	f7ff fea8 	bl	800b3c8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b678:	4a19      	ldr	r2, [pc, #100]	; (800b6e0 <xPortStartScheduler+0x134>)
 800b67a:	6813      	ldr	r3, [r2, #0]
 800b67c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b680:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800b682:	f7ff fe8d 	bl	800b3a0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b686:	f7ff f81f 	bl	800a6c8 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800b68a:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0;
 800b68c:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800b68e:	3301      	adds	r3, #1
 800b690:	d008      	beq.n	800b6a4 <xPortStartScheduler+0xf8>
 800b692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	e7fe      	b.n	800b6a2 <xPortStartScheduler+0xf6>
 800b6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d0fc      	beq.n	800b6b4 <xPortStartScheduler+0x108>
}
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	b005      	add	sp, #20
 800b6be:	bd30      	pop	{r4, r5, pc}
 800b6c0:	e000ed00 	.word	0xe000ed00
 800b6c4:	410fc271 	.word	0x410fc271
 800b6c8:	410fc270 	.word	0x410fc270
 800b6cc:	e000e400 	.word	0xe000e400
 800b6d0:	200018c8 	.word	0x200018c8
 800b6d4:	200018cc 	.word	0x200018cc
 800b6d8:	e000ed20 	.word	0xe000ed20
 800b6dc:	20000038 	.word	0x20000038
 800b6e0:	e000ef34 	.word	0xe000ef34

0800b6e4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6e4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6e8:	2b0f      	cmp	r3, #15
 800b6ea:	d90e      	bls.n	800b70a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6ec:	4910      	ldr	r1, [pc, #64]	; (800b730 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6ee:	4a11      	ldr	r2, [pc, #68]	; (800b734 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6f0:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6f2:	7812      	ldrb	r2, [r2, #0]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d908      	bls.n	800b70a <vPortValidateInterruptPriority+0x26>
 800b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	e7fe      	b.n	800b708 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b70a:	4b0b      	ldr	r3, [pc, #44]	; (800b738 <vPortValidateInterruptPriority+0x54>)
 800b70c:	4a0b      	ldr	r2, [pc, #44]	; (800b73c <vPortValidateInterruptPriority+0x58>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6812      	ldr	r2, [r2, #0]
 800b712:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b716:	4293      	cmp	r3, r2
 800b718:	d908      	bls.n	800b72c <vPortValidateInterruptPriority+0x48>
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	e7fe      	b.n	800b72a <vPortValidateInterruptPriority+0x46>
	}
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop
 800b730:	e000e3f0 	.word	0xe000e3f0
 800b734:	200018c8 	.word	0x200018c8
 800b738:	e000ed0c 	.word	0xe000ed0c
 800b73c:	200018cc 	.word	0x200018cc

0800b740 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b744:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800b746:	f7fe ff91 	bl	800a66c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b74a:	4854      	ldr	r0, [pc, #336]	; (800b89c <pvPortMalloc+0x15c>)
 800b74c:	6803      	ldr	r3, [r0, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d03c      	beq.n	800b7cc <pvPortMalloc+0x8c>
 800b752:	4a53      	ldr	r2, [pc, #332]	; (800b8a0 <pvPortMalloc+0x160>)
 800b754:	6815      	ldr	r5, [r2, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b756:	422e      	tst	r6, r5
 800b758:	d130      	bne.n	800b7bc <pvPortMalloc+0x7c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b75a:	b37e      	cbz	r6, 800b7bc <pvPortMalloc+0x7c>
			{
				xWantedSize += xHeapStructSize;
 800b75c:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b760:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b762:	bf1c      	itt	ne
 800b764:	f024 0407 	bicne.w	r4, r4, #7
 800b768:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b76a:	b33c      	cbz	r4, 800b7bc <pvPortMalloc+0x7c>
 800b76c:	f8df c13c 	ldr.w	ip, [pc, #316]	; 800b8ac <pvPortMalloc+0x16c>
 800b770:	f8dc 7000 	ldr.w	r7, [ip]
 800b774:	42a7      	cmp	r7, r4
 800b776:	d321      	bcc.n	800b7bc <pvPortMalloc+0x7c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800b778:	4a4a      	ldr	r2, [pc, #296]	; (800b8a4 <pvPortMalloc+0x164>)
 800b77a:	6811      	ldr	r1, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b77c:	e003      	b.n	800b786 <pvPortMalloc+0x46>
 800b77e:	680e      	ldr	r6, [r1, #0]
 800b780:	b126      	cbz	r6, 800b78c <pvPortMalloc+0x4c>
 800b782:	460a      	mov	r2, r1
 800b784:	4631      	mov	r1, r6
 800b786:	6848      	ldr	r0, [r1, #4]
 800b788:	42a0      	cmp	r0, r4
 800b78a:	d3f8      	bcc.n	800b77e <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b78c:	4299      	cmp	r1, r3
 800b78e:	d015      	beq.n	800b7bc <pvPortMalloc+0x7c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b790:	460e      	mov	r6, r1
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b792:	eba0 0e04 	sub.w	lr, r0, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b796:	f856 8b08 	ldr.w	r8, [r6], #8
 800b79a:	f8c2 8000 	str.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b79e:	f1be 0f10 	cmp.w	lr, #16
 800b7a2:	d950      	bls.n	800b846 <pvPortMalloc+0x106>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b7a4:	190a      	adds	r2, r1, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7a6:	0750      	lsls	r0, r2, #29
 800b7a8:	d034      	beq.n	800b814 <pvPortMalloc+0xd4>
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	e7fe      	b.n	800b7ba <pvPortMalloc+0x7a>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7bc:	f7fe ff5e 	bl	800a67c <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b7c0:	2600      	movs	r6, #0
 800b7c2:	f7f7 f9cb 	bl	8002b5c <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7cc:	4b36      	ldr	r3, [pc, #216]	; (800b8a8 <pvPortMalloc+0x168>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7ce:	4c35      	ldr	r4, [pc, #212]	; (800b8a4 <pvPortMalloc+0x164>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7d0:	4d36      	ldr	r5, [pc, #216]	; (800b8ac <pvPortMalloc+0x16c>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7d2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800b8b0 <pvPortMalloc+0x170>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7d6:	075f      	lsls	r7, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7d8:	bf14      	ite	ne
 800b7da:	1dda      	addne	r2, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7dc:	461a      	moveq	r2, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	uxAddress -= xHeapStructSize;
 800b7e2:	f1a3 0308 	sub.w	r3, r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7e6:	f023 0307 	bic.w	r3, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7ea:	bf18      	it	ne
 800b7ec:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7f0:	6022      	str	r2, [r4, #0]
 800b7f2:	4611      	mov	r1, r2

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b7f4:	4f2a      	ldr	r7, [pc, #168]	; (800b8a0 <pvPortMalloc+0x160>)
	pxEnd = ( void * ) uxAddress;
 800b7f6:	6003      	str	r3, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b7f8:	1a9a      	subs	r2, r3, r2
	xStart.xBlockSize = ( size_t ) 0;
 800b7fa:	2000      	movs	r0, #0
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7fc:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b7fe:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 800b802:	6060      	str	r0, [r4, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b804:	f8cc 2000 	str.w	r2, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 800b808:	e9c3 0000 	strd	r0, r0, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b80c:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b80e:	e9c1 3200 	strd	r3, r2, [r1]
}
 800b812:	e7a0      	b.n	800b756 <pvPortMalloc+0x16>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b814:	4823      	ldr	r0, [pc, #140]	; (800b8a4 <pvPortMalloc+0x164>)
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b816:	f8c2 e004 	str.w	lr, [r2, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b81a:	604c      	str	r4, [r1, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b81c:	4686      	mov	lr, r0
 800b81e:	6800      	ldr	r0, [r0, #0]
 800b820:	4282      	cmp	r2, r0
 800b822:	d8fb      	bhi.n	800b81c <pvPortMalloc+0xdc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b824:	f8de 4004 	ldr.w	r4, [lr, #4]
 800b828:	eb0e 0804 	add.w	r8, lr, r4
 800b82c:	4542      	cmp	r2, r8
 800b82e:	d027      	beq.n	800b880 <pvPortMalloc+0x140>
 800b830:	6854      	ldr	r4, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b832:	eb02 0804 	add.w	r8, r2, r4
 800b836:	4540      	cmp	r0, r8
 800b838:	d028      	beq.n	800b88c <pvPortMalloc+0x14c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b83a:	6010      	str	r0, [r2, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b83c:	4596      	cmp	lr, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b83e:	6848      	ldr	r0, [r1, #4]
 800b840:	bf18      	it	ne
 800b842:	f8ce 2000 	strne.w	r2, [lr]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b846:	4c1a      	ldr	r4, [pc, #104]	; (800b8b0 <pvPortMalloc+0x170>)
 800b848:	6822      	ldr	r2, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b84a:	1a3f      	subs	r7, r7, r0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b84c:	4297      	cmp	r7, r2
					xNumberOfSuccessfulAllocations++;
 800b84e:	4a19      	ldr	r2, [pc, #100]	; (800b8b4 <pvPortMalloc+0x174>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b850:	bf38      	it	cc
 800b852:	6027      	strcc	r7, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800b854:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b856:	f8cc 7000 	str.w	r7, [ip]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b85a:	4328      	orrs	r0, r5
					pxBlock->pxNextFreeBlock = NULL;
 800b85c:	2400      	movs	r4, #0
					xNumberOfSuccessfulAllocations++;
 800b85e:	3301      	adds	r3, #1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b860:	6048      	str	r0, [r1, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b862:	600c      	str	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800b864:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b866:	f7fe ff09 	bl	800a67c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b86a:	0773      	lsls	r3, r6, #29
 800b86c:	d0ab      	beq.n	800b7c6 <pvPortMalloc+0x86>
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	e7fe      	b.n	800b87e <pvPortMalloc+0x13e>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b880:	6852      	ldr	r2, [r2, #4]
 800b882:	4414      	add	r4, r2
 800b884:	f8ce 4004 	str.w	r4, [lr, #4]
		pxBlockToInsert = pxIterator;
 800b888:	4672      	mov	r2, lr
 800b88a:	e7d2      	b.n	800b832 <pvPortMalloc+0xf2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b88c:	4298      	cmp	r0, r3
 800b88e:	d0d4      	beq.n	800b83a <pvPortMalloc+0xfa>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b890:	e9d0 0300 	ldrd	r0, r3, [r0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b894:	441c      	add	r4, r3
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b896:	6010      	str	r0, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b898:	6054      	str	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b89a:	e7cf      	b.n	800b83c <pvPortMalloc+0xfc>
 800b89c:	200018d0 	.word	0x200018d0
 800b8a0:	200098d4 	.word	0x200098d4
 800b8a4:	200098e8 	.word	0x200098e8
 800b8a8:	200018d4 	.word	0x200018d4
 800b8ac:	200098d8 	.word	0x200098d8
 800b8b0:	200098dc 	.word	0x200098dc
 800b8b4:	200098e0 	.word	0x200098e0

0800b8b8 <vPortFree>:
	if( pv != NULL )
 800b8b8:	b1e0      	cbz	r0, 800b8f4 <vPortFree+0x3c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8ba:	4a29      	ldr	r2, [pc, #164]	; (800b960 <vPortFree+0xa8>)
{
 800b8bc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8be:	6812      	ldr	r2, [r2, #0]
 800b8c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b8c4:	4213      	tst	r3, r2
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	d00b      	beq.n	800b8e2 <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b8ca:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b8ce:	b191      	cbz	r1, 800b8f6 <vPortFree+0x3e>
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	e7fe      	b.n	800b8e0 <vPortFree+0x28>
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8f2:	e7fe      	b.n	800b8f2 <vPortFree+0x3a>
 800b8f4:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8f6:	ea23 0302 	bic.w	r3, r3, r2
 800b8fa:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b8fe:	f7fe feb5 	bl	800a66c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b902:	4918      	ldr	r1, [pc, #96]	; (800b964 <vPortFree+0xac>)
 800b904:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800b908:	680b      	ldr	r3, [r1, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b90a:	4a17      	ldr	r2, [pc, #92]	; (800b968 <vPortFree+0xb0>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b90c:	4403      	add	r3, r0
 800b90e:	600b      	str	r3, [r1, #0]
		puc -= xHeapStructSize;
 800b910:	f1a4 0308 	sub.w	r3, r4, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b914:	4611      	mov	r1, r2
 800b916:	6812      	ldr	r2, [r2, #0]
 800b918:	4293      	cmp	r3, r2
 800b91a:	d8fb      	bhi.n	800b914 <vPortFree+0x5c>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b91c:	684c      	ldr	r4, [r1, #4]
 800b91e:	190d      	adds	r5, r1, r4
 800b920:	42ab      	cmp	r3, r5
 800b922:	d00e      	beq.n	800b942 <vPortFree+0x8a>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b924:	181c      	adds	r4, r3, r0
 800b926:	42a2      	cmp	r2, r4
 800b928:	d00f      	beq.n	800b94a <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b92a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulFrees++;
 800b92c:	4a0f      	ldr	r2, [pc, #60]	; (800b96c <vPortFree+0xb4>)
	if( pxIterator != pxBlockToInsert )
 800b92e:	4299      	cmp	r1, r3
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b930:	bf18      	it	ne
 800b932:	600b      	strne	r3, [r1, #0]
					xNumberOfSuccessfulFrees++;
 800b934:	6813      	ldr	r3, [r2, #0]
 800b936:	3301      	adds	r3, #1
 800b938:	6013      	str	r3, [r2, #0]
}
 800b93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 800b93e:	f7fe be9d 	b.w	800a67c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b942:	4420      	add	r0, r4
 800b944:	6048      	str	r0, [r1, #4]
		pxBlockToInsert = pxIterator;
 800b946:	460b      	mov	r3, r1
 800b948:	e7ec      	b.n	800b924 <vPortFree+0x6c>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b94a:	4c09      	ldr	r4, [pc, #36]	; (800b970 <vPortFree+0xb8>)
 800b94c:	6824      	ldr	r4, [r4, #0]
 800b94e:	42a2      	cmp	r2, r4
 800b950:	d0eb      	beq.n	800b92a <vPortFree+0x72>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b952:	e9d2 2400 	ldrd	r2, r4, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b956:	4420      	add	r0, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b958:	601a      	str	r2, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b95a:	6058      	str	r0, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b95c:	e7e6      	b.n	800b92c <vPortFree+0x74>
 800b95e:	bf00      	nop
 800b960:	200098d4 	.word	0x200098d4
 800b964:	200098d8 	.word	0x200098d8
 800b968:	200098e8 	.word	0x200098e8
 800b96c:	200098e4 	.word	0x200098e4
 800b970:	200018d0 	.word	0x200018d0

0800b974 <__errno>:
 800b974:	4b01      	ldr	r3, [pc, #4]	; (800b97c <__errno+0x8>)
 800b976:	6818      	ldr	r0, [r3, #0]
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	2000003c 	.word	0x2000003c

0800b980 <__libc_init_array>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	4d0d      	ldr	r5, [pc, #52]	; (800b9b8 <__libc_init_array+0x38>)
 800b984:	4c0d      	ldr	r4, [pc, #52]	; (800b9bc <__libc_init_array+0x3c>)
 800b986:	1b64      	subs	r4, r4, r5
 800b988:	10a4      	asrs	r4, r4, #2
 800b98a:	2600      	movs	r6, #0
 800b98c:	42a6      	cmp	r6, r4
 800b98e:	d109      	bne.n	800b9a4 <__libc_init_array+0x24>
 800b990:	4d0b      	ldr	r5, [pc, #44]	; (800b9c0 <__libc_init_array+0x40>)
 800b992:	4c0c      	ldr	r4, [pc, #48]	; (800b9c4 <__libc_init_array+0x44>)
 800b994:	f001 f928 	bl	800cbe8 <_init>
 800b998:	1b64      	subs	r4, r4, r5
 800b99a:	10a4      	asrs	r4, r4, #2
 800b99c:	2600      	movs	r6, #0
 800b99e:	42a6      	cmp	r6, r4
 800b9a0:	d105      	bne.n	800b9ae <__libc_init_array+0x2e>
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a8:	4798      	blx	r3
 800b9aa:	3601      	adds	r6, #1
 800b9ac:	e7ee      	b.n	800b98c <__libc_init_array+0xc>
 800b9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b2:	4798      	blx	r3
 800b9b4:	3601      	adds	r6, #1
 800b9b6:	e7f2      	b.n	800b99e <__libc_init_array+0x1e>
 800b9b8:	0800d484 	.word	0x0800d484
 800b9bc:	0800d484 	.word	0x0800d484
 800b9c0:	0800d484 	.word	0x0800d484
 800b9c4:	0800d488 	.word	0x0800d488

0800b9c8 <memcpy>:
 800b9c8:	440a      	add	r2, r1
 800b9ca:	4291      	cmp	r1, r2
 800b9cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9d0:	d100      	bne.n	800b9d4 <memcpy+0xc>
 800b9d2:	4770      	bx	lr
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9de:	4291      	cmp	r1, r2
 800b9e0:	d1f9      	bne.n	800b9d6 <memcpy+0xe>
 800b9e2:	bd10      	pop	{r4, pc}

0800b9e4 <memset>:
 800b9e4:	4402      	add	r2, r0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d100      	bne.n	800b9ee <memset+0xa>
 800b9ec:	4770      	bx	lr
 800b9ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b9f2:	e7f9      	b.n	800b9e8 <memset+0x4>

0800b9f4 <iprintf>:
 800b9f4:	b40f      	push	{r0, r1, r2, r3}
 800b9f6:	4b0a      	ldr	r3, [pc, #40]	; (800ba20 <iprintf+0x2c>)
 800b9f8:	b513      	push	{r0, r1, r4, lr}
 800b9fa:	681c      	ldr	r4, [r3, #0]
 800b9fc:	b124      	cbz	r4, 800ba08 <iprintf+0x14>
 800b9fe:	69a3      	ldr	r3, [r4, #24]
 800ba00:	b913      	cbnz	r3, 800ba08 <iprintf+0x14>
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 fa5e 	bl	800bec4 <__sinit>
 800ba08:	ab05      	add	r3, sp, #20
 800ba0a:	9a04      	ldr	r2, [sp, #16]
 800ba0c:	68a1      	ldr	r1, [r4, #8]
 800ba0e:	9301      	str	r3, [sp, #4]
 800ba10:	4620      	mov	r0, r4
 800ba12:	f000 fc2f 	bl	800c274 <_vfiprintf_r>
 800ba16:	b002      	add	sp, #8
 800ba18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba1c:	b004      	add	sp, #16
 800ba1e:	4770      	bx	lr
 800ba20:	2000003c 	.word	0x2000003c

0800ba24 <_puts_r>:
 800ba24:	b570      	push	{r4, r5, r6, lr}
 800ba26:	460e      	mov	r6, r1
 800ba28:	4605      	mov	r5, r0
 800ba2a:	b118      	cbz	r0, 800ba34 <_puts_r+0x10>
 800ba2c:	6983      	ldr	r3, [r0, #24]
 800ba2e:	b90b      	cbnz	r3, 800ba34 <_puts_r+0x10>
 800ba30:	f000 fa48 	bl	800bec4 <__sinit>
 800ba34:	69ab      	ldr	r3, [r5, #24]
 800ba36:	68ac      	ldr	r4, [r5, #8]
 800ba38:	b913      	cbnz	r3, 800ba40 <_puts_r+0x1c>
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f000 fa42 	bl	800bec4 <__sinit>
 800ba40:	4b2c      	ldr	r3, [pc, #176]	; (800baf4 <_puts_r+0xd0>)
 800ba42:	429c      	cmp	r4, r3
 800ba44:	d120      	bne.n	800ba88 <_puts_r+0x64>
 800ba46:	686c      	ldr	r4, [r5, #4]
 800ba48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba4a:	07db      	lsls	r3, r3, #31
 800ba4c:	d405      	bmi.n	800ba5a <_puts_r+0x36>
 800ba4e:	89a3      	ldrh	r3, [r4, #12]
 800ba50:	0598      	lsls	r0, r3, #22
 800ba52:	d402      	bmi.n	800ba5a <_puts_r+0x36>
 800ba54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba56:	f000 fad3 	bl	800c000 <__retarget_lock_acquire_recursive>
 800ba5a:	89a3      	ldrh	r3, [r4, #12]
 800ba5c:	0719      	lsls	r1, r3, #28
 800ba5e:	d51d      	bpl.n	800ba9c <_puts_r+0x78>
 800ba60:	6923      	ldr	r3, [r4, #16]
 800ba62:	b1db      	cbz	r3, 800ba9c <_puts_r+0x78>
 800ba64:	3e01      	subs	r6, #1
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	60a3      	str	r3, [r4, #8]
 800ba70:	bb39      	cbnz	r1, 800bac2 <_puts_r+0x9e>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	da38      	bge.n	800bae8 <_puts_r+0xc4>
 800ba76:	4622      	mov	r2, r4
 800ba78:	210a      	movs	r1, #10
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f000 f848 	bl	800bb10 <__swbuf_r>
 800ba80:	3001      	adds	r0, #1
 800ba82:	d011      	beq.n	800baa8 <_puts_r+0x84>
 800ba84:	250a      	movs	r5, #10
 800ba86:	e011      	b.n	800baac <_puts_r+0x88>
 800ba88:	4b1b      	ldr	r3, [pc, #108]	; (800baf8 <_puts_r+0xd4>)
 800ba8a:	429c      	cmp	r4, r3
 800ba8c:	d101      	bne.n	800ba92 <_puts_r+0x6e>
 800ba8e:	68ac      	ldr	r4, [r5, #8]
 800ba90:	e7da      	b.n	800ba48 <_puts_r+0x24>
 800ba92:	4b1a      	ldr	r3, [pc, #104]	; (800bafc <_puts_r+0xd8>)
 800ba94:	429c      	cmp	r4, r3
 800ba96:	bf08      	it	eq
 800ba98:	68ec      	ldreq	r4, [r5, #12]
 800ba9a:	e7d5      	b.n	800ba48 <_puts_r+0x24>
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 f888 	bl	800bbb4 <__swsetup_r>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d0dd      	beq.n	800ba64 <_puts_r+0x40>
 800baa8:	f04f 35ff 	mov.w	r5, #4294967295
 800baac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baae:	07da      	lsls	r2, r3, #31
 800bab0:	d405      	bmi.n	800babe <_puts_r+0x9a>
 800bab2:	89a3      	ldrh	r3, [r4, #12]
 800bab4:	059b      	lsls	r3, r3, #22
 800bab6:	d402      	bmi.n	800babe <_puts_r+0x9a>
 800bab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baba:	f000 faa2 	bl	800c002 <__retarget_lock_release_recursive>
 800babe:	4628      	mov	r0, r5
 800bac0:	bd70      	pop	{r4, r5, r6, pc}
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	da04      	bge.n	800bad0 <_puts_r+0xac>
 800bac6:	69a2      	ldr	r2, [r4, #24]
 800bac8:	429a      	cmp	r2, r3
 800baca:	dc06      	bgt.n	800bada <_puts_r+0xb6>
 800bacc:	290a      	cmp	r1, #10
 800bace:	d004      	beq.n	800bada <_puts_r+0xb6>
 800bad0:	6823      	ldr	r3, [r4, #0]
 800bad2:	1c5a      	adds	r2, r3, #1
 800bad4:	6022      	str	r2, [r4, #0]
 800bad6:	7019      	strb	r1, [r3, #0]
 800bad8:	e7c5      	b.n	800ba66 <_puts_r+0x42>
 800bada:	4622      	mov	r2, r4
 800badc:	4628      	mov	r0, r5
 800bade:	f000 f817 	bl	800bb10 <__swbuf_r>
 800bae2:	3001      	adds	r0, #1
 800bae4:	d1bf      	bne.n	800ba66 <_puts_r+0x42>
 800bae6:	e7df      	b.n	800baa8 <_puts_r+0x84>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	250a      	movs	r5, #10
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	6022      	str	r2, [r4, #0]
 800baf0:	701d      	strb	r5, [r3, #0]
 800baf2:	e7db      	b.n	800baac <_puts_r+0x88>
 800baf4:	0800d408 	.word	0x0800d408
 800baf8:	0800d428 	.word	0x0800d428
 800bafc:	0800d3e8 	.word	0x0800d3e8

0800bb00 <puts>:
 800bb00:	4b02      	ldr	r3, [pc, #8]	; (800bb0c <puts+0xc>)
 800bb02:	4601      	mov	r1, r0
 800bb04:	6818      	ldr	r0, [r3, #0]
 800bb06:	f7ff bf8d 	b.w	800ba24 <_puts_r>
 800bb0a:	bf00      	nop
 800bb0c:	2000003c 	.word	0x2000003c

0800bb10 <__swbuf_r>:
 800bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb12:	460e      	mov	r6, r1
 800bb14:	4614      	mov	r4, r2
 800bb16:	4605      	mov	r5, r0
 800bb18:	b118      	cbz	r0, 800bb22 <__swbuf_r+0x12>
 800bb1a:	6983      	ldr	r3, [r0, #24]
 800bb1c:	b90b      	cbnz	r3, 800bb22 <__swbuf_r+0x12>
 800bb1e:	f000 f9d1 	bl	800bec4 <__sinit>
 800bb22:	4b21      	ldr	r3, [pc, #132]	; (800bba8 <__swbuf_r+0x98>)
 800bb24:	429c      	cmp	r4, r3
 800bb26:	d12b      	bne.n	800bb80 <__swbuf_r+0x70>
 800bb28:	686c      	ldr	r4, [r5, #4]
 800bb2a:	69a3      	ldr	r3, [r4, #24]
 800bb2c:	60a3      	str	r3, [r4, #8]
 800bb2e:	89a3      	ldrh	r3, [r4, #12]
 800bb30:	071a      	lsls	r2, r3, #28
 800bb32:	d52f      	bpl.n	800bb94 <__swbuf_r+0x84>
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	b36b      	cbz	r3, 800bb94 <__swbuf_r+0x84>
 800bb38:	6923      	ldr	r3, [r4, #16]
 800bb3a:	6820      	ldr	r0, [r4, #0]
 800bb3c:	1ac0      	subs	r0, r0, r3
 800bb3e:	6963      	ldr	r3, [r4, #20]
 800bb40:	b2f6      	uxtb	r6, r6
 800bb42:	4283      	cmp	r3, r0
 800bb44:	4637      	mov	r7, r6
 800bb46:	dc04      	bgt.n	800bb52 <__swbuf_r+0x42>
 800bb48:	4621      	mov	r1, r4
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f000 f926 	bl	800bd9c <_fflush_r>
 800bb50:	bb30      	cbnz	r0, 800bba0 <__swbuf_r+0x90>
 800bb52:	68a3      	ldr	r3, [r4, #8]
 800bb54:	3b01      	subs	r3, #1
 800bb56:	60a3      	str	r3, [r4, #8]
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	1c5a      	adds	r2, r3, #1
 800bb5c:	6022      	str	r2, [r4, #0]
 800bb5e:	701e      	strb	r6, [r3, #0]
 800bb60:	6963      	ldr	r3, [r4, #20]
 800bb62:	3001      	adds	r0, #1
 800bb64:	4283      	cmp	r3, r0
 800bb66:	d004      	beq.n	800bb72 <__swbuf_r+0x62>
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	07db      	lsls	r3, r3, #31
 800bb6c:	d506      	bpl.n	800bb7c <__swbuf_r+0x6c>
 800bb6e:	2e0a      	cmp	r6, #10
 800bb70:	d104      	bne.n	800bb7c <__swbuf_r+0x6c>
 800bb72:	4621      	mov	r1, r4
 800bb74:	4628      	mov	r0, r5
 800bb76:	f000 f911 	bl	800bd9c <_fflush_r>
 800bb7a:	b988      	cbnz	r0, 800bba0 <__swbuf_r+0x90>
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb80:	4b0a      	ldr	r3, [pc, #40]	; (800bbac <__swbuf_r+0x9c>)
 800bb82:	429c      	cmp	r4, r3
 800bb84:	d101      	bne.n	800bb8a <__swbuf_r+0x7a>
 800bb86:	68ac      	ldr	r4, [r5, #8]
 800bb88:	e7cf      	b.n	800bb2a <__swbuf_r+0x1a>
 800bb8a:	4b09      	ldr	r3, [pc, #36]	; (800bbb0 <__swbuf_r+0xa0>)
 800bb8c:	429c      	cmp	r4, r3
 800bb8e:	bf08      	it	eq
 800bb90:	68ec      	ldreq	r4, [r5, #12]
 800bb92:	e7ca      	b.n	800bb2a <__swbuf_r+0x1a>
 800bb94:	4621      	mov	r1, r4
 800bb96:	4628      	mov	r0, r5
 800bb98:	f000 f80c 	bl	800bbb4 <__swsetup_r>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d0cb      	beq.n	800bb38 <__swbuf_r+0x28>
 800bba0:	f04f 37ff 	mov.w	r7, #4294967295
 800bba4:	e7ea      	b.n	800bb7c <__swbuf_r+0x6c>
 800bba6:	bf00      	nop
 800bba8:	0800d408 	.word	0x0800d408
 800bbac:	0800d428 	.word	0x0800d428
 800bbb0:	0800d3e8 	.word	0x0800d3e8

0800bbb4 <__swsetup_r>:
 800bbb4:	4b32      	ldr	r3, [pc, #200]	; (800bc80 <__swsetup_r+0xcc>)
 800bbb6:	b570      	push	{r4, r5, r6, lr}
 800bbb8:	681d      	ldr	r5, [r3, #0]
 800bbba:	4606      	mov	r6, r0
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	b125      	cbz	r5, 800bbca <__swsetup_r+0x16>
 800bbc0:	69ab      	ldr	r3, [r5, #24]
 800bbc2:	b913      	cbnz	r3, 800bbca <__swsetup_r+0x16>
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f000 f97d 	bl	800bec4 <__sinit>
 800bbca:	4b2e      	ldr	r3, [pc, #184]	; (800bc84 <__swsetup_r+0xd0>)
 800bbcc:	429c      	cmp	r4, r3
 800bbce:	d10f      	bne.n	800bbf0 <__swsetup_r+0x3c>
 800bbd0:	686c      	ldr	r4, [r5, #4]
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbd8:	0719      	lsls	r1, r3, #28
 800bbda:	d42c      	bmi.n	800bc36 <__swsetup_r+0x82>
 800bbdc:	06dd      	lsls	r5, r3, #27
 800bbde:	d411      	bmi.n	800bc04 <__swsetup_r+0x50>
 800bbe0:	2309      	movs	r3, #9
 800bbe2:	6033      	str	r3, [r6, #0]
 800bbe4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbe8:	81a3      	strh	r3, [r4, #12]
 800bbea:	f04f 30ff 	mov.w	r0, #4294967295
 800bbee:	e03e      	b.n	800bc6e <__swsetup_r+0xba>
 800bbf0:	4b25      	ldr	r3, [pc, #148]	; (800bc88 <__swsetup_r+0xd4>)
 800bbf2:	429c      	cmp	r4, r3
 800bbf4:	d101      	bne.n	800bbfa <__swsetup_r+0x46>
 800bbf6:	68ac      	ldr	r4, [r5, #8]
 800bbf8:	e7eb      	b.n	800bbd2 <__swsetup_r+0x1e>
 800bbfa:	4b24      	ldr	r3, [pc, #144]	; (800bc8c <__swsetup_r+0xd8>)
 800bbfc:	429c      	cmp	r4, r3
 800bbfe:	bf08      	it	eq
 800bc00:	68ec      	ldreq	r4, [r5, #12]
 800bc02:	e7e6      	b.n	800bbd2 <__swsetup_r+0x1e>
 800bc04:	0758      	lsls	r0, r3, #29
 800bc06:	d512      	bpl.n	800bc2e <__swsetup_r+0x7a>
 800bc08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc0a:	b141      	cbz	r1, 800bc1e <__swsetup_r+0x6a>
 800bc0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc10:	4299      	cmp	r1, r3
 800bc12:	d002      	beq.n	800bc1a <__swsetup_r+0x66>
 800bc14:	4630      	mov	r0, r6
 800bc16:	f000 fa59 	bl	800c0cc <_free_r>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	6363      	str	r3, [r4, #52]	; 0x34
 800bc1e:	89a3      	ldrh	r3, [r4, #12]
 800bc20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc24:	81a3      	strh	r3, [r4, #12]
 800bc26:	2300      	movs	r3, #0
 800bc28:	6063      	str	r3, [r4, #4]
 800bc2a:	6923      	ldr	r3, [r4, #16]
 800bc2c:	6023      	str	r3, [r4, #0]
 800bc2e:	89a3      	ldrh	r3, [r4, #12]
 800bc30:	f043 0308 	orr.w	r3, r3, #8
 800bc34:	81a3      	strh	r3, [r4, #12]
 800bc36:	6923      	ldr	r3, [r4, #16]
 800bc38:	b94b      	cbnz	r3, 800bc4e <__swsetup_r+0x9a>
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc44:	d003      	beq.n	800bc4e <__swsetup_r+0x9a>
 800bc46:	4621      	mov	r1, r4
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f000 f9ff 	bl	800c04c <__smakebuf_r>
 800bc4e:	89a0      	ldrh	r0, [r4, #12]
 800bc50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc54:	f010 0301 	ands.w	r3, r0, #1
 800bc58:	d00a      	beq.n	800bc70 <__swsetup_r+0xbc>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60a3      	str	r3, [r4, #8]
 800bc5e:	6963      	ldr	r3, [r4, #20]
 800bc60:	425b      	negs	r3, r3
 800bc62:	61a3      	str	r3, [r4, #24]
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	b943      	cbnz	r3, 800bc7a <__swsetup_r+0xc6>
 800bc68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc6c:	d1ba      	bne.n	800bbe4 <__swsetup_r+0x30>
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	0781      	lsls	r1, r0, #30
 800bc72:	bf58      	it	pl
 800bc74:	6963      	ldrpl	r3, [r4, #20]
 800bc76:	60a3      	str	r3, [r4, #8]
 800bc78:	e7f4      	b.n	800bc64 <__swsetup_r+0xb0>
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	e7f7      	b.n	800bc6e <__swsetup_r+0xba>
 800bc7e:	bf00      	nop
 800bc80:	2000003c 	.word	0x2000003c
 800bc84:	0800d408 	.word	0x0800d408
 800bc88:	0800d428 	.word	0x0800d428
 800bc8c:	0800d3e8 	.word	0x0800d3e8

0800bc90 <__sflush_r>:
 800bc90:	898a      	ldrh	r2, [r1, #12]
 800bc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc96:	4605      	mov	r5, r0
 800bc98:	0710      	lsls	r0, r2, #28
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	d458      	bmi.n	800bd50 <__sflush_r+0xc0>
 800bc9e:	684b      	ldr	r3, [r1, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	dc05      	bgt.n	800bcb0 <__sflush_r+0x20>
 800bca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	dc02      	bgt.n	800bcb0 <__sflush_r+0x20>
 800bcaa:	2000      	movs	r0, #0
 800bcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcb2:	2e00      	cmp	r6, #0
 800bcb4:	d0f9      	beq.n	800bcaa <__sflush_r+0x1a>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcbc:	682f      	ldr	r7, [r5, #0]
 800bcbe:	602b      	str	r3, [r5, #0]
 800bcc0:	d032      	beq.n	800bd28 <__sflush_r+0x98>
 800bcc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcc4:	89a3      	ldrh	r3, [r4, #12]
 800bcc6:	075a      	lsls	r2, r3, #29
 800bcc8:	d505      	bpl.n	800bcd6 <__sflush_r+0x46>
 800bcca:	6863      	ldr	r3, [r4, #4]
 800bccc:	1ac0      	subs	r0, r0, r3
 800bcce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcd0:	b10b      	cbz	r3, 800bcd6 <__sflush_r+0x46>
 800bcd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcd4:	1ac0      	subs	r0, r0, r3
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	4602      	mov	r2, r0
 800bcda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcdc:	6a21      	ldr	r1, [r4, #32]
 800bcde:	4628      	mov	r0, r5
 800bce0:	47b0      	blx	r6
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	d106      	bne.n	800bcf6 <__sflush_r+0x66>
 800bce8:	6829      	ldr	r1, [r5, #0]
 800bcea:	291d      	cmp	r1, #29
 800bcec:	d82c      	bhi.n	800bd48 <__sflush_r+0xb8>
 800bcee:	4a2a      	ldr	r2, [pc, #168]	; (800bd98 <__sflush_r+0x108>)
 800bcf0:	40ca      	lsrs	r2, r1
 800bcf2:	07d6      	lsls	r6, r2, #31
 800bcf4:	d528      	bpl.n	800bd48 <__sflush_r+0xb8>
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	6062      	str	r2, [r4, #4]
 800bcfa:	04d9      	lsls	r1, r3, #19
 800bcfc:	6922      	ldr	r2, [r4, #16]
 800bcfe:	6022      	str	r2, [r4, #0]
 800bd00:	d504      	bpl.n	800bd0c <__sflush_r+0x7c>
 800bd02:	1c42      	adds	r2, r0, #1
 800bd04:	d101      	bne.n	800bd0a <__sflush_r+0x7a>
 800bd06:	682b      	ldr	r3, [r5, #0]
 800bd08:	b903      	cbnz	r3, 800bd0c <__sflush_r+0x7c>
 800bd0a:	6560      	str	r0, [r4, #84]	; 0x54
 800bd0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd0e:	602f      	str	r7, [r5, #0]
 800bd10:	2900      	cmp	r1, #0
 800bd12:	d0ca      	beq.n	800bcaa <__sflush_r+0x1a>
 800bd14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd18:	4299      	cmp	r1, r3
 800bd1a:	d002      	beq.n	800bd22 <__sflush_r+0x92>
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f000 f9d5 	bl	800c0cc <_free_r>
 800bd22:	2000      	movs	r0, #0
 800bd24:	6360      	str	r0, [r4, #52]	; 0x34
 800bd26:	e7c1      	b.n	800bcac <__sflush_r+0x1c>
 800bd28:	6a21      	ldr	r1, [r4, #32]
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	47b0      	blx	r6
 800bd30:	1c41      	adds	r1, r0, #1
 800bd32:	d1c7      	bne.n	800bcc4 <__sflush_r+0x34>
 800bd34:	682b      	ldr	r3, [r5, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d0c4      	beq.n	800bcc4 <__sflush_r+0x34>
 800bd3a:	2b1d      	cmp	r3, #29
 800bd3c:	d001      	beq.n	800bd42 <__sflush_r+0xb2>
 800bd3e:	2b16      	cmp	r3, #22
 800bd40:	d101      	bne.n	800bd46 <__sflush_r+0xb6>
 800bd42:	602f      	str	r7, [r5, #0]
 800bd44:	e7b1      	b.n	800bcaa <__sflush_r+0x1a>
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	e7ad      	b.n	800bcac <__sflush_r+0x1c>
 800bd50:	690f      	ldr	r7, [r1, #16]
 800bd52:	2f00      	cmp	r7, #0
 800bd54:	d0a9      	beq.n	800bcaa <__sflush_r+0x1a>
 800bd56:	0793      	lsls	r3, r2, #30
 800bd58:	680e      	ldr	r6, [r1, #0]
 800bd5a:	bf08      	it	eq
 800bd5c:	694b      	ldreq	r3, [r1, #20]
 800bd5e:	600f      	str	r7, [r1, #0]
 800bd60:	bf18      	it	ne
 800bd62:	2300      	movne	r3, #0
 800bd64:	eba6 0807 	sub.w	r8, r6, r7
 800bd68:	608b      	str	r3, [r1, #8]
 800bd6a:	f1b8 0f00 	cmp.w	r8, #0
 800bd6e:	dd9c      	ble.n	800bcaa <__sflush_r+0x1a>
 800bd70:	6a21      	ldr	r1, [r4, #32]
 800bd72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd74:	4643      	mov	r3, r8
 800bd76:	463a      	mov	r2, r7
 800bd78:	4628      	mov	r0, r5
 800bd7a:	47b0      	blx	r6
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	dc06      	bgt.n	800bd8e <__sflush_r+0xfe>
 800bd80:	89a3      	ldrh	r3, [r4, #12]
 800bd82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd86:	81a3      	strh	r3, [r4, #12]
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8c:	e78e      	b.n	800bcac <__sflush_r+0x1c>
 800bd8e:	4407      	add	r7, r0
 800bd90:	eba8 0800 	sub.w	r8, r8, r0
 800bd94:	e7e9      	b.n	800bd6a <__sflush_r+0xda>
 800bd96:	bf00      	nop
 800bd98:	20400001 	.word	0x20400001

0800bd9c <_fflush_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	690b      	ldr	r3, [r1, #16]
 800bda0:	4605      	mov	r5, r0
 800bda2:	460c      	mov	r4, r1
 800bda4:	b913      	cbnz	r3, 800bdac <_fflush_r+0x10>
 800bda6:	2500      	movs	r5, #0
 800bda8:	4628      	mov	r0, r5
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	b118      	cbz	r0, 800bdb6 <_fflush_r+0x1a>
 800bdae:	6983      	ldr	r3, [r0, #24]
 800bdb0:	b90b      	cbnz	r3, 800bdb6 <_fflush_r+0x1a>
 800bdb2:	f000 f887 	bl	800bec4 <__sinit>
 800bdb6:	4b14      	ldr	r3, [pc, #80]	; (800be08 <_fflush_r+0x6c>)
 800bdb8:	429c      	cmp	r4, r3
 800bdba:	d11b      	bne.n	800bdf4 <_fflush_r+0x58>
 800bdbc:	686c      	ldr	r4, [r5, #4]
 800bdbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d0ef      	beq.n	800bda6 <_fflush_r+0xa>
 800bdc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdc8:	07d0      	lsls	r0, r2, #31
 800bdca:	d404      	bmi.n	800bdd6 <_fflush_r+0x3a>
 800bdcc:	0599      	lsls	r1, r3, #22
 800bdce:	d402      	bmi.n	800bdd6 <_fflush_r+0x3a>
 800bdd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdd2:	f000 f915 	bl	800c000 <__retarget_lock_acquire_recursive>
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	4621      	mov	r1, r4
 800bdda:	f7ff ff59 	bl	800bc90 <__sflush_r>
 800bdde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bde0:	07da      	lsls	r2, r3, #31
 800bde2:	4605      	mov	r5, r0
 800bde4:	d4e0      	bmi.n	800bda8 <_fflush_r+0xc>
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	059b      	lsls	r3, r3, #22
 800bdea:	d4dd      	bmi.n	800bda8 <_fflush_r+0xc>
 800bdec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdee:	f000 f908 	bl	800c002 <__retarget_lock_release_recursive>
 800bdf2:	e7d9      	b.n	800bda8 <_fflush_r+0xc>
 800bdf4:	4b05      	ldr	r3, [pc, #20]	; (800be0c <_fflush_r+0x70>)
 800bdf6:	429c      	cmp	r4, r3
 800bdf8:	d101      	bne.n	800bdfe <_fflush_r+0x62>
 800bdfa:	68ac      	ldr	r4, [r5, #8]
 800bdfc:	e7df      	b.n	800bdbe <_fflush_r+0x22>
 800bdfe:	4b04      	ldr	r3, [pc, #16]	; (800be10 <_fflush_r+0x74>)
 800be00:	429c      	cmp	r4, r3
 800be02:	bf08      	it	eq
 800be04:	68ec      	ldreq	r4, [r5, #12]
 800be06:	e7da      	b.n	800bdbe <_fflush_r+0x22>
 800be08:	0800d408 	.word	0x0800d408
 800be0c:	0800d428 	.word	0x0800d428
 800be10:	0800d3e8 	.word	0x0800d3e8

0800be14 <std>:
 800be14:	2300      	movs	r3, #0
 800be16:	b510      	push	{r4, lr}
 800be18:	4604      	mov	r4, r0
 800be1a:	e9c0 3300 	strd	r3, r3, [r0]
 800be1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be22:	6083      	str	r3, [r0, #8]
 800be24:	8181      	strh	r1, [r0, #12]
 800be26:	6643      	str	r3, [r0, #100]	; 0x64
 800be28:	81c2      	strh	r2, [r0, #14]
 800be2a:	6183      	str	r3, [r0, #24]
 800be2c:	4619      	mov	r1, r3
 800be2e:	2208      	movs	r2, #8
 800be30:	305c      	adds	r0, #92	; 0x5c
 800be32:	f7ff fdd7 	bl	800b9e4 <memset>
 800be36:	4b05      	ldr	r3, [pc, #20]	; (800be4c <std+0x38>)
 800be38:	6263      	str	r3, [r4, #36]	; 0x24
 800be3a:	4b05      	ldr	r3, [pc, #20]	; (800be50 <std+0x3c>)
 800be3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800be3e:	4b05      	ldr	r3, [pc, #20]	; (800be54 <std+0x40>)
 800be40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be42:	4b05      	ldr	r3, [pc, #20]	; (800be58 <std+0x44>)
 800be44:	6224      	str	r4, [r4, #32]
 800be46:	6323      	str	r3, [r4, #48]	; 0x30
 800be48:	bd10      	pop	{r4, pc}
 800be4a:	bf00      	nop
 800be4c:	0800c81d 	.word	0x0800c81d
 800be50:	0800c83f 	.word	0x0800c83f
 800be54:	0800c877 	.word	0x0800c877
 800be58:	0800c89b 	.word	0x0800c89b

0800be5c <_cleanup_r>:
 800be5c:	4901      	ldr	r1, [pc, #4]	; (800be64 <_cleanup_r+0x8>)
 800be5e:	f000 b8af 	b.w	800bfc0 <_fwalk_reent>
 800be62:	bf00      	nop
 800be64:	0800bd9d 	.word	0x0800bd9d

0800be68 <__sfmoreglue>:
 800be68:	b570      	push	{r4, r5, r6, lr}
 800be6a:	1e4a      	subs	r2, r1, #1
 800be6c:	2568      	movs	r5, #104	; 0x68
 800be6e:	4355      	muls	r5, r2
 800be70:	460e      	mov	r6, r1
 800be72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be76:	f000 f979 	bl	800c16c <_malloc_r>
 800be7a:	4604      	mov	r4, r0
 800be7c:	b140      	cbz	r0, 800be90 <__sfmoreglue+0x28>
 800be7e:	2100      	movs	r1, #0
 800be80:	e9c0 1600 	strd	r1, r6, [r0]
 800be84:	300c      	adds	r0, #12
 800be86:	60a0      	str	r0, [r4, #8]
 800be88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be8c:	f7ff fdaa 	bl	800b9e4 <memset>
 800be90:	4620      	mov	r0, r4
 800be92:	bd70      	pop	{r4, r5, r6, pc}

0800be94 <__sfp_lock_acquire>:
 800be94:	4801      	ldr	r0, [pc, #4]	; (800be9c <__sfp_lock_acquire+0x8>)
 800be96:	f000 b8b3 	b.w	800c000 <__retarget_lock_acquire_recursive>
 800be9a:	bf00      	nop
 800be9c:	20009d08 	.word	0x20009d08

0800bea0 <__sfp_lock_release>:
 800bea0:	4801      	ldr	r0, [pc, #4]	; (800bea8 <__sfp_lock_release+0x8>)
 800bea2:	f000 b8ae 	b.w	800c002 <__retarget_lock_release_recursive>
 800bea6:	bf00      	nop
 800bea8:	20009d08 	.word	0x20009d08

0800beac <__sinit_lock_acquire>:
 800beac:	4801      	ldr	r0, [pc, #4]	; (800beb4 <__sinit_lock_acquire+0x8>)
 800beae:	f000 b8a7 	b.w	800c000 <__retarget_lock_acquire_recursive>
 800beb2:	bf00      	nop
 800beb4:	20009d03 	.word	0x20009d03

0800beb8 <__sinit_lock_release>:
 800beb8:	4801      	ldr	r0, [pc, #4]	; (800bec0 <__sinit_lock_release+0x8>)
 800beba:	f000 b8a2 	b.w	800c002 <__retarget_lock_release_recursive>
 800bebe:	bf00      	nop
 800bec0:	20009d03 	.word	0x20009d03

0800bec4 <__sinit>:
 800bec4:	b510      	push	{r4, lr}
 800bec6:	4604      	mov	r4, r0
 800bec8:	f7ff fff0 	bl	800beac <__sinit_lock_acquire>
 800becc:	69a3      	ldr	r3, [r4, #24]
 800bece:	b11b      	cbz	r3, 800bed8 <__sinit+0x14>
 800bed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed4:	f7ff bff0 	b.w	800beb8 <__sinit_lock_release>
 800bed8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bedc:	6523      	str	r3, [r4, #80]	; 0x50
 800bede:	4b13      	ldr	r3, [pc, #76]	; (800bf2c <__sinit+0x68>)
 800bee0:	4a13      	ldr	r2, [pc, #76]	; (800bf30 <__sinit+0x6c>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bee6:	42a3      	cmp	r3, r4
 800bee8:	bf04      	itt	eq
 800beea:	2301      	moveq	r3, #1
 800beec:	61a3      	streq	r3, [r4, #24]
 800beee:	4620      	mov	r0, r4
 800bef0:	f000 f820 	bl	800bf34 <__sfp>
 800bef4:	6060      	str	r0, [r4, #4]
 800bef6:	4620      	mov	r0, r4
 800bef8:	f000 f81c 	bl	800bf34 <__sfp>
 800befc:	60a0      	str	r0, [r4, #8]
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 f818 	bl	800bf34 <__sfp>
 800bf04:	2200      	movs	r2, #0
 800bf06:	60e0      	str	r0, [r4, #12]
 800bf08:	2104      	movs	r1, #4
 800bf0a:	6860      	ldr	r0, [r4, #4]
 800bf0c:	f7ff ff82 	bl	800be14 <std>
 800bf10:	68a0      	ldr	r0, [r4, #8]
 800bf12:	2201      	movs	r2, #1
 800bf14:	2109      	movs	r1, #9
 800bf16:	f7ff ff7d 	bl	800be14 <std>
 800bf1a:	68e0      	ldr	r0, [r4, #12]
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	2112      	movs	r1, #18
 800bf20:	f7ff ff78 	bl	800be14 <std>
 800bf24:	2301      	movs	r3, #1
 800bf26:	61a3      	str	r3, [r4, #24]
 800bf28:	e7d2      	b.n	800bed0 <__sinit+0xc>
 800bf2a:	bf00      	nop
 800bf2c:	0800d3e4 	.word	0x0800d3e4
 800bf30:	0800be5d 	.word	0x0800be5d

0800bf34 <__sfp>:
 800bf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf36:	4607      	mov	r7, r0
 800bf38:	f7ff ffac 	bl	800be94 <__sfp_lock_acquire>
 800bf3c:	4b1e      	ldr	r3, [pc, #120]	; (800bfb8 <__sfp+0x84>)
 800bf3e:	681e      	ldr	r6, [r3, #0]
 800bf40:	69b3      	ldr	r3, [r6, #24]
 800bf42:	b913      	cbnz	r3, 800bf4a <__sfp+0x16>
 800bf44:	4630      	mov	r0, r6
 800bf46:	f7ff ffbd 	bl	800bec4 <__sinit>
 800bf4a:	3648      	adds	r6, #72	; 0x48
 800bf4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	d503      	bpl.n	800bf5c <__sfp+0x28>
 800bf54:	6833      	ldr	r3, [r6, #0]
 800bf56:	b30b      	cbz	r3, 800bf9c <__sfp+0x68>
 800bf58:	6836      	ldr	r6, [r6, #0]
 800bf5a:	e7f7      	b.n	800bf4c <__sfp+0x18>
 800bf5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf60:	b9d5      	cbnz	r5, 800bf98 <__sfp+0x64>
 800bf62:	4b16      	ldr	r3, [pc, #88]	; (800bfbc <__sfp+0x88>)
 800bf64:	60e3      	str	r3, [r4, #12]
 800bf66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf6a:	6665      	str	r5, [r4, #100]	; 0x64
 800bf6c:	f000 f847 	bl	800bffe <__retarget_lock_init_recursive>
 800bf70:	f7ff ff96 	bl	800bea0 <__sfp_lock_release>
 800bf74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf7c:	6025      	str	r5, [r4, #0]
 800bf7e:	61a5      	str	r5, [r4, #24]
 800bf80:	2208      	movs	r2, #8
 800bf82:	4629      	mov	r1, r5
 800bf84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf88:	f7ff fd2c 	bl	800b9e4 <memset>
 800bf8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf94:	4620      	mov	r0, r4
 800bf96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf98:	3468      	adds	r4, #104	; 0x68
 800bf9a:	e7d9      	b.n	800bf50 <__sfp+0x1c>
 800bf9c:	2104      	movs	r1, #4
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	f7ff ff62 	bl	800be68 <__sfmoreglue>
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	6030      	str	r0, [r6, #0]
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d1d5      	bne.n	800bf58 <__sfp+0x24>
 800bfac:	f7ff ff78 	bl	800bea0 <__sfp_lock_release>
 800bfb0:	230c      	movs	r3, #12
 800bfb2:	603b      	str	r3, [r7, #0]
 800bfb4:	e7ee      	b.n	800bf94 <__sfp+0x60>
 800bfb6:	bf00      	nop
 800bfb8:	0800d3e4 	.word	0x0800d3e4
 800bfbc:	ffff0001 	.word	0xffff0001

0800bfc0 <_fwalk_reent>:
 800bfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc4:	4606      	mov	r6, r0
 800bfc6:	4688      	mov	r8, r1
 800bfc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfcc:	2700      	movs	r7, #0
 800bfce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfd2:	f1b9 0901 	subs.w	r9, r9, #1
 800bfd6:	d505      	bpl.n	800bfe4 <_fwalk_reent+0x24>
 800bfd8:	6824      	ldr	r4, [r4, #0]
 800bfda:	2c00      	cmp	r4, #0
 800bfdc:	d1f7      	bne.n	800bfce <_fwalk_reent+0xe>
 800bfde:	4638      	mov	r0, r7
 800bfe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfe4:	89ab      	ldrh	r3, [r5, #12]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d907      	bls.n	800bffa <_fwalk_reent+0x3a>
 800bfea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfee:	3301      	adds	r3, #1
 800bff0:	d003      	beq.n	800bffa <_fwalk_reent+0x3a>
 800bff2:	4629      	mov	r1, r5
 800bff4:	4630      	mov	r0, r6
 800bff6:	47c0      	blx	r8
 800bff8:	4307      	orrs	r7, r0
 800bffa:	3568      	adds	r5, #104	; 0x68
 800bffc:	e7e9      	b.n	800bfd2 <_fwalk_reent+0x12>

0800bffe <__retarget_lock_init_recursive>:
 800bffe:	4770      	bx	lr

0800c000 <__retarget_lock_acquire_recursive>:
 800c000:	4770      	bx	lr

0800c002 <__retarget_lock_release_recursive>:
 800c002:	4770      	bx	lr

0800c004 <__swhatbuf_r>:
 800c004:	b570      	push	{r4, r5, r6, lr}
 800c006:	460e      	mov	r6, r1
 800c008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c00c:	2900      	cmp	r1, #0
 800c00e:	b096      	sub	sp, #88	; 0x58
 800c010:	4614      	mov	r4, r2
 800c012:	461d      	mov	r5, r3
 800c014:	da07      	bge.n	800c026 <__swhatbuf_r+0x22>
 800c016:	2300      	movs	r3, #0
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	89b3      	ldrh	r3, [r6, #12]
 800c01c:	061a      	lsls	r2, r3, #24
 800c01e:	d410      	bmi.n	800c042 <__swhatbuf_r+0x3e>
 800c020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c024:	e00e      	b.n	800c044 <__swhatbuf_r+0x40>
 800c026:	466a      	mov	r2, sp
 800c028:	f000 fc5e 	bl	800c8e8 <_fstat_r>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	dbf2      	blt.n	800c016 <__swhatbuf_r+0x12>
 800c030:	9a01      	ldr	r2, [sp, #4]
 800c032:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c036:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c03a:	425a      	negs	r2, r3
 800c03c:	415a      	adcs	r2, r3
 800c03e:	602a      	str	r2, [r5, #0]
 800c040:	e7ee      	b.n	800c020 <__swhatbuf_r+0x1c>
 800c042:	2340      	movs	r3, #64	; 0x40
 800c044:	2000      	movs	r0, #0
 800c046:	6023      	str	r3, [r4, #0]
 800c048:	b016      	add	sp, #88	; 0x58
 800c04a:	bd70      	pop	{r4, r5, r6, pc}

0800c04c <__smakebuf_r>:
 800c04c:	898b      	ldrh	r3, [r1, #12]
 800c04e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c050:	079d      	lsls	r5, r3, #30
 800c052:	4606      	mov	r6, r0
 800c054:	460c      	mov	r4, r1
 800c056:	d507      	bpl.n	800c068 <__smakebuf_r+0x1c>
 800c058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	6123      	str	r3, [r4, #16]
 800c060:	2301      	movs	r3, #1
 800c062:	6163      	str	r3, [r4, #20]
 800c064:	b002      	add	sp, #8
 800c066:	bd70      	pop	{r4, r5, r6, pc}
 800c068:	ab01      	add	r3, sp, #4
 800c06a:	466a      	mov	r2, sp
 800c06c:	f7ff ffca 	bl	800c004 <__swhatbuf_r>
 800c070:	9900      	ldr	r1, [sp, #0]
 800c072:	4605      	mov	r5, r0
 800c074:	4630      	mov	r0, r6
 800c076:	f000 f879 	bl	800c16c <_malloc_r>
 800c07a:	b948      	cbnz	r0, 800c090 <__smakebuf_r+0x44>
 800c07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c080:	059a      	lsls	r2, r3, #22
 800c082:	d4ef      	bmi.n	800c064 <__smakebuf_r+0x18>
 800c084:	f023 0303 	bic.w	r3, r3, #3
 800c088:	f043 0302 	orr.w	r3, r3, #2
 800c08c:	81a3      	strh	r3, [r4, #12]
 800c08e:	e7e3      	b.n	800c058 <__smakebuf_r+0xc>
 800c090:	4b0d      	ldr	r3, [pc, #52]	; (800c0c8 <__smakebuf_r+0x7c>)
 800c092:	62b3      	str	r3, [r6, #40]	; 0x28
 800c094:	89a3      	ldrh	r3, [r4, #12]
 800c096:	6020      	str	r0, [r4, #0]
 800c098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c09c:	81a3      	strh	r3, [r4, #12]
 800c09e:	9b00      	ldr	r3, [sp, #0]
 800c0a0:	6163      	str	r3, [r4, #20]
 800c0a2:	9b01      	ldr	r3, [sp, #4]
 800c0a4:	6120      	str	r0, [r4, #16]
 800c0a6:	b15b      	cbz	r3, 800c0c0 <__smakebuf_r+0x74>
 800c0a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	f000 fc2d 	bl	800c90c <_isatty_r>
 800c0b2:	b128      	cbz	r0, 800c0c0 <__smakebuf_r+0x74>
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	f023 0303 	bic.w	r3, r3, #3
 800c0ba:	f043 0301 	orr.w	r3, r3, #1
 800c0be:	81a3      	strh	r3, [r4, #12]
 800c0c0:	89a0      	ldrh	r0, [r4, #12]
 800c0c2:	4305      	orrs	r5, r0
 800c0c4:	81a5      	strh	r5, [r4, #12]
 800c0c6:	e7cd      	b.n	800c064 <__smakebuf_r+0x18>
 800c0c8:	0800be5d 	.word	0x0800be5d

0800c0cc <_free_r>:
 800c0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0ce:	2900      	cmp	r1, #0
 800c0d0:	d048      	beq.n	800c164 <_free_r+0x98>
 800c0d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0d6:	9001      	str	r0, [sp, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f1a1 0404 	sub.w	r4, r1, #4
 800c0de:	bfb8      	it	lt
 800c0e0:	18e4      	addlt	r4, r4, r3
 800c0e2:	f000 fc35 	bl	800c950 <__malloc_lock>
 800c0e6:	4a20      	ldr	r2, [pc, #128]	; (800c168 <_free_r+0x9c>)
 800c0e8:	9801      	ldr	r0, [sp, #4]
 800c0ea:	6813      	ldr	r3, [r2, #0]
 800c0ec:	4615      	mov	r5, r2
 800c0ee:	b933      	cbnz	r3, 800c0fe <_free_r+0x32>
 800c0f0:	6063      	str	r3, [r4, #4]
 800c0f2:	6014      	str	r4, [r2, #0]
 800c0f4:	b003      	add	sp, #12
 800c0f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0fa:	f000 bc2f 	b.w	800c95c <__malloc_unlock>
 800c0fe:	42a3      	cmp	r3, r4
 800c100:	d90b      	bls.n	800c11a <_free_r+0x4e>
 800c102:	6821      	ldr	r1, [r4, #0]
 800c104:	1862      	adds	r2, r4, r1
 800c106:	4293      	cmp	r3, r2
 800c108:	bf04      	itt	eq
 800c10a:	681a      	ldreq	r2, [r3, #0]
 800c10c:	685b      	ldreq	r3, [r3, #4]
 800c10e:	6063      	str	r3, [r4, #4]
 800c110:	bf04      	itt	eq
 800c112:	1852      	addeq	r2, r2, r1
 800c114:	6022      	streq	r2, [r4, #0]
 800c116:	602c      	str	r4, [r5, #0]
 800c118:	e7ec      	b.n	800c0f4 <_free_r+0x28>
 800c11a:	461a      	mov	r2, r3
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	b10b      	cbz	r3, 800c124 <_free_r+0x58>
 800c120:	42a3      	cmp	r3, r4
 800c122:	d9fa      	bls.n	800c11a <_free_r+0x4e>
 800c124:	6811      	ldr	r1, [r2, #0]
 800c126:	1855      	adds	r5, r2, r1
 800c128:	42a5      	cmp	r5, r4
 800c12a:	d10b      	bne.n	800c144 <_free_r+0x78>
 800c12c:	6824      	ldr	r4, [r4, #0]
 800c12e:	4421      	add	r1, r4
 800c130:	1854      	adds	r4, r2, r1
 800c132:	42a3      	cmp	r3, r4
 800c134:	6011      	str	r1, [r2, #0]
 800c136:	d1dd      	bne.n	800c0f4 <_free_r+0x28>
 800c138:	681c      	ldr	r4, [r3, #0]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	6053      	str	r3, [r2, #4]
 800c13e:	4421      	add	r1, r4
 800c140:	6011      	str	r1, [r2, #0]
 800c142:	e7d7      	b.n	800c0f4 <_free_r+0x28>
 800c144:	d902      	bls.n	800c14c <_free_r+0x80>
 800c146:	230c      	movs	r3, #12
 800c148:	6003      	str	r3, [r0, #0]
 800c14a:	e7d3      	b.n	800c0f4 <_free_r+0x28>
 800c14c:	6825      	ldr	r5, [r4, #0]
 800c14e:	1961      	adds	r1, r4, r5
 800c150:	428b      	cmp	r3, r1
 800c152:	bf04      	itt	eq
 800c154:	6819      	ldreq	r1, [r3, #0]
 800c156:	685b      	ldreq	r3, [r3, #4]
 800c158:	6063      	str	r3, [r4, #4]
 800c15a:	bf04      	itt	eq
 800c15c:	1949      	addeq	r1, r1, r5
 800c15e:	6021      	streq	r1, [r4, #0]
 800c160:	6054      	str	r4, [r2, #4]
 800c162:	e7c7      	b.n	800c0f4 <_free_r+0x28>
 800c164:	b003      	add	sp, #12
 800c166:	bd30      	pop	{r4, r5, pc}
 800c168:	200098f0 	.word	0x200098f0

0800c16c <_malloc_r>:
 800c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16e:	1ccd      	adds	r5, r1, #3
 800c170:	f025 0503 	bic.w	r5, r5, #3
 800c174:	3508      	adds	r5, #8
 800c176:	2d0c      	cmp	r5, #12
 800c178:	bf38      	it	cc
 800c17a:	250c      	movcc	r5, #12
 800c17c:	2d00      	cmp	r5, #0
 800c17e:	4606      	mov	r6, r0
 800c180:	db01      	blt.n	800c186 <_malloc_r+0x1a>
 800c182:	42a9      	cmp	r1, r5
 800c184:	d903      	bls.n	800c18e <_malloc_r+0x22>
 800c186:	230c      	movs	r3, #12
 800c188:	6033      	str	r3, [r6, #0]
 800c18a:	2000      	movs	r0, #0
 800c18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c18e:	f000 fbdf 	bl	800c950 <__malloc_lock>
 800c192:	4921      	ldr	r1, [pc, #132]	; (800c218 <_malloc_r+0xac>)
 800c194:	680a      	ldr	r2, [r1, #0]
 800c196:	4614      	mov	r4, r2
 800c198:	b99c      	cbnz	r4, 800c1c2 <_malloc_r+0x56>
 800c19a:	4f20      	ldr	r7, [pc, #128]	; (800c21c <_malloc_r+0xb0>)
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	b923      	cbnz	r3, 800c1aa <_malloc_r+0x3e>
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f000 fb2a 	bl	800c7fc <_sbrk_r>
 800c1a8:	6038      	str	r0, [r7, #0]
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	f000 fb25 	bl	800c7fc <_sbrk_r>
 800c1b2:	1c43      	adds	r3, r0, #1
 800c1b4:	d123      	bne.n	800c1fe <_malloc_r+0x92>
 800c1b6:	230c      	movs	r3, #12
 800c1b8:	6033      	str	r3, [r6, #0]
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f000 fbce 	bl	800c95c <__malloc_unlock>
 800c1c0:	e7e3      	b.n	800c18a <_malloc_r+0x1e>
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	1b5b      	subs	r3, r3, r5
 800c1c6:	d417      	bmi.n	800c1f8 <_malloc_r+0x8c>
 800c1c8:	2b0b      	cmp	r3, #11
 800c1ca:	d903      	bls.n	800c1d4 <_malloc_r+0x68>
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	441c      	add	r4, r3
 800c1d0:	6025      	str	r5, [r4, #0]
 800c1d2:	e004      	b.n	800c1de <_malloc_r+0x72>
 800c1d4:	6863      	ldr	r3, [r4, #4]
 800c1d6:	42a2      	cmp	r2, r4
 800c1d8:	bf0c      	ite	eq
 800c1da:	600b      	streq	r3, [r1, #0]
 800c1dc:	6053      	strne	r3, [r2, #4]
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f000 fbbc 	bl	800c95c <__malloc_unlock>
 800c1e4:	f104 000b 	add.w	r0, r4, #11
 800c1e8:	1d23      	adds	r3, r4, #4
 800c1ea:	f020 0007 	bic.w	r0, r0, #7
 800c1ee:	1ac2      	subs	r2, r0, r3
 800c1f0:	d0cc      	beq.n	800c18c <_malloc_r+0x20>
 800c1f2:	1a1b      	subs	r3, r3, r0
 800c1f4:	50a3      	str	r3, [r4, r2]
 800c1f6:	e7c9      	b.n	800c18c <_malloc_r+0x20>
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	6864      	ldr	r4, [r4, #4]
 800c1fc:	e7cc      	b.n	800c198 <_malloc_r+0x2c>
 800c1fe:	1cc4      	adds	r4, r0, #3
 800c200:	f024 0403 	bic.w	r4, r4, #3
 800c204:	42a0      	cmp	r0, r4
 800c206:	d0e3      	beq.n	800c1d0 <_malloc_r+0x64>
 800c208:	1a21      	subs	r1, r4, r0
 800c20a:	4630      	mov	r0, r6
 800c20c:	f000 faf6 	bl	800c7fc <_sbrk_r>
 800c210:	3001      	adds	r0, #1
 800c212:	d1dd      	bne.n	800c1d0 <_malloc_r+0x64>
 800c214:	e7cf      	b.n	800c1b6 <_malloc_r+0x4a>
 800c216:	bf00      	nop
 800c218:	200098f0 	.word	0x200098f0
 800c21c:	200098f4 	.word	0x200098f4

0800c220 <__sfputc_r>:
 800c220:	6893      	ldr	r3, [r2, #8]
 800c222:	3b01      	subs	r3, #1
 800c224:	2b00      	cmp	r3, #0
 800c226:	b410      	push	{r4}
 800c228:	6093      	str	r3, [r2, #8]
 800c22a:	da08      	bge.n	800c23e <__sfputc_r+0x1e>
 800c22c:	6994      	ldr	r4, [r2, #24]
 800c22e:	42a3      	cmp	r3, r4
 800c230:	db01      	blt.n	800c236 <__sfputc_r+0x16>
 800c232:	290a      	cmp	r1, #10
 800c234:	d103      	bne.n	800c23e <__sfputc_r+0x1e>
 800c236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c23a:	f7ff bc69 	b.w	800bb10 <__swbuf_r>
 800c23e:	6813      	ldr	r3, [r2, #0]
 800c240:	1c58      	adds	r0, r3, #1
 800c242:	6010      	str	r0, [r2, #0]
 800c244:	7019      	strb	r1, [r3, #0]
 800c246:	4608      	mov	r0, r1
 800c248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <__sfputs_r>:
 800c24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c250:	4606      	mov	r6, r0
 800c252:	460f      	mov	r7, r1
 800c254:	4614      	mov	r4, r2
 800c256:	18d5      	adds	r5, r2, r3
 800c258:	42ac      	cmp	r4, r5
 800c25a:	d101      	bne.n	800c260 <__sfputs_r+0x12>
 800c25c:	2000      	movs	r0, #0
 800c25e:	e007      	b.n	800c270 <__sfputs_r+0x22>
 800c260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c264:	463a      	mov	r2, r7
 800c266:	4630      	mov	r0, r6
 800c268:	f7ff ffda 	bl	800c220 <__sfputc_r>
 800c26c:	1c43      	adds	r3, r0, #1
 800c26e:	d1f3      	bne.n	800c258 <__sfputs_r+0xa>
 800c270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c274 <_vfiprintf_r>:
 800c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c278:	460d      	mov	r5, r1
 800c27a:	b09d      	sub	sp, #116	; 0x74
 800c27c:	4614      	mov	r4, r2
 800c27e:	4698      	mov	r8, r3
 800c280:	4606      	mov	r6, r0
 800c282:	b118      	cbz	r0, 800c28c <_vfiprintf_r+0x18>
 800c284:	6983      	ldr	r3, [r0, #24]
 800c286:	b90b      	cbnz	r3, 800c28c <_vfiprintf_r+0x18>
 800c288:	f7ff fe1c 	bl	800bec4 <__sinit>
 800c28c:	4b89      	ldr	r3, [pc, #548]	; (800c4b4 <_vfiprintf_r+0x240>)
 800c28e:	429d      	cmp	r5, r3
 800c290:	d11b      	bne.n	800c2ca <_vfiprintf_r+0x56>
 800c292:	6875      	ldr	r5, [r6, #4]
 800c294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c296:	07d9      	lsls	r1, r3, #31
 800c298:	d405      	bmi.n	800c2a6 <_vfiprintf_r+0x32>
 800c29a:	89ab      	ldrh	r3, [r5, #12]
 800c29c:	059a      	lsls	r2, r3, #22
 800c29e:	d402      	bmi.n	800c2a6 <_vfiprintf_r+0x32>
 800c2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2a2:	f7ff fead 	bl	800c000 <__retarget_lock_acquire_recursive>
 800c2a6:	89ab      	ldrh	r3, [r5, #12]
 800c2a8:	071b      	lsls	r3, r3, #28
 800c2aa:	d501      	bpl.n	800c2b0 <_vfiprintf_r+0x3c>
 800c2ac:	692b      	ldr	r3, [r5, #16]
 800c2ae:	b9eb      	cbnz	r3, 800c2ec <_vfiprintf_r+0x78>
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f7ff fc7e 	bl	800bbb4 <__swsetup_r>
 800c2b8:	b1c0      	cbz	r0, 800c2ec <_vfiprintf_r+0x78>
 800c2ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2bc:	07dc      	lsls	r4, r3, #31
 800c2be:	d50e      	bpl.n	800c2de <_vfiprintf_r+0x6a>
 800c2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c4:	b01d      	add	sp, #116	; 0x74
 800c2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ca:	4b7b      	ldr	r3, [pc, #492]	; (800c4b8 <_vfiprintf_r+0x244>)
 800c2cc:	429d      	cmp	r5, r3
 800c2ce:	d101      	bne.n	800c2d4 <_vfiprintf_r+0x60>
 800c2d0:	68b5      	ldr	r5, [r6, #8]
 800c2d2:	e7df      	b.n	800c294 <_vfiprintf_r+0x20>
 800c2d4:	4b79      	ldr	r3, [pc, #484]	; (800c4bc <_vfiprintf_r+0x248>)
 800c2d6:	429d      	cmp	r5, r3
 800c2d8:	bf08      	it	eq
 800c2da:	68f5      	ldreq	r5, [r6, #12]
 800c2dc:	e7da      	b.n	800c294 <_vfiprintf_r+0x20>
 800c2de:	89ab      	ldrh	r3, [r5, #12]
 800c2e0:	0598      	lsls	r0, r3, #22
 800c2e2:	d4ed      	bmi.n	800c2c0 <_vfiprintf_r+0x4c>
 800c2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2e6:	f7ff fe8c 	bl	800c002 <__retarget_lock_release_recursive>
 800c2ea:	e7e9      	b.n	800c2c0 <_vfiprintf_r+0x4c>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c2f0:	2320      	movs	r3, #32
 800c2f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2fa:	2330      	movs	r3, #48	; 0x30
 800c2fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4c0 <_vfiprintf_r+0x24c>
 800c300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c304:	f04f 0901 	mov.w	r9, #1
 800c308:	4623      	mov	r3, r4
 800c30a:	469a      	mov	sl, r3
 800c30c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c310:	b10a      	cbz	r2, 800c316 <_vfiprintf_r+0xa2>
 800c312:	2a25      	cmp	r2, #37	; 0x25
 800c314:	d1f9      	bne.n	800c30a <_vfiprintf_r+0x96>
 800c316:	ebba 0b04 	subs.w	fp, sl, r4
 800c31a:	d00b      	beq.n	800c334 <_vfiprintf_r+0xc0>
 800c31c:	465b      	mov	r3, fp
 800c31e:	4622      	mov	r2, r4
 800c320:	4629      	mov	r1, r5
 800c322:	4630      	mov	r0, r6
 800c324:	f7ff ff93 	bl	800c24e <__sfputs_r>
 800c328:	3001      	adds	r0, #1
 800c32a:	f000 80aa 	beq.w	800c482 <_vfiprintf_r+0x20e>
 800c32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c330:	445a      	add	r2, fp
 800c332:	9209      	str	r2, [sp, #36]	; 0x24
 800c334:	f89a 3000 	ldrb.w	r3, [sl]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f000 80a2 	beq.w	800c482 <_vfiprintf_r+0x20e>
 800c33e:	2300      	movs	r3, #0
 800c340:	f04f 32ff 	mov.w	r2, #4294967295
 800c344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c348:	f10a 0a01 	add.w	sl, sl, #1
 800c34c:	9304      	str	r3, [sp, #16]
 800c34e:	9307      	str	r3, [sp, #28]
 800c350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c354:	931a      	str	r3, [sp, #104]	; 0x68
 800c356:	4654      	mov	r4, sl
 800c358:	2205      	movs	r2, #5
 800c35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35e:	4858      	ldr	r0, [pc, #352]	; (800c4c0 <_vfiprintf_r+0x24c>)
 800c360:	f7f3 ff3e 	bl	80001e0 <memchr>
 800c364:	9a04      	ldr	r2, [sp, #16]
 800c366:	b9d8      	cbnz	r0, 800c3a0 <_vfiprintf_r+0x12c>
 800c368:	06d1      	lsls	r1, r2, #27
 800c36a:	bf44      	itt	mi
 800c36c:	2320      	movmi	r3, #32
 800c36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c372:	0713      	lsls	r3, r2, #28
 800c374:	bf44      	itt	mi
 800c376:	232b      	movmi	r3, #43	; 0x2b
 800c378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c37c:	f89a 3000 	ldrb.w	r3, [sl]
 800c380:	2b2a      	cmp	r3, #42	; 0x2a
 800c382:	d015      	beq.n	800c3b0 <_vfiprintf_r+0x13c>
 800c384:	9a07      	ldr	r2, [sp, #28]
 800c386:	4654      	mov	r4, sl
 800c388:	2000      	movs	r0, #0
 800c38a:	f04f 0c0a 	mov.w	ip, #10
 800c38e:	4621      	mov	r1, r4
 800c390:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c394:	3b30      	subs	r3, #48	; 0x30
 800c396:	2b09      	cmp	r3, #9
 800c398:	d94e      	bls.n	800c438 <_vfiprintf_r+0x1c4>
 800c39a:	b1b0      	cbz	r0, 800c3ca <_vfiprintf_r+0x156>
 800c39c:	9207      	str	r2, [sp, #28]
 800c39e:	e014      	b.n	800c3ca <_vfiprintf_r+0x156>
 800c3a0:	eba0 0308 	sub.w	r3, r0, r8
 800c3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	9304      	str	r3, [sp, #16]
 800c3ac:	46a2      	mov	sl, r4
 800c3ae:	e7d2      	b.n	800c356 <_vfiprintf_r+0xe2>
 800c3b0:	9b03      	ldr	r3, [sp, #12]
 800c3b2:	1d19      	adds	r1, r3, #4
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	9103      	str	r1, [sp, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	bfbb      	ittet	lt
 800c3bc:	425b      	neglt	r3, r3
 800c3be:	f042 0202 	orrlt.w	r2, r2, #2
 800c3c2:	9307      	strge	r3, [sp, #28]
 800c3c4:	9307      	strlt	r3, [sp, #28]
 800c3c6:	bfb8      	it	lt
 800c3c8:	9204      	strlt	r2, [sp, #16]
 800c3ca:	7823      	ldrb	r3, [r4, #0]
 800c3cc:	2b2e      	cmp	r3, #46	; 0x2e
 800c3ce:	d10c      	bne.n	800c3ea <_vfiprintf_r+0x176>
 800c3d0:	7863      	ldrb	r3, [r4, #1]
 800c3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d4:	d135      	bne.n	800c442 <_vfiprintf_r+0x1ce>
 800c3d6:	9b03      	ldr	r3, [sp, #12]
 800c3d8:	1d1a      	adds	r2, r3, #4
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	9203      	str	r2, [sp, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	bfb8      	it	lt
 800c3e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3e6:	3402      	adds	r4, #2
 800c3e8:	9305      	str	r3, [sp, #20]
 800c3ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4d0 <_vfiprintf_r+0x25c>
 800c3ee:	7821      	ldrb	r1, [r4, #0]
 800c3f0:	2203      	movs	r2, #3
 800c3f2:	4650      	mov	r0, sl
 800c3f4:	f7f3 fef4 	bl	80001e0 <memchr>
 800c3f8:	b140      	cbz	r0, 800c40c <_vfiprintf_r+0x198>
 800c3fa:	2340      	movs	r3, #64	; 0x40
 800c3fc:	eba0 000a 	sub.w	r0, r0, sl
 800c400:	fa03 f000 	lsl.w	r0, r3, r0
 800c404:	9b04      	ldr	r3, [sp, #16]
 800c406:	4303      	orrs	r3, r0
 800c408:	3401      	adds	r4, #1
 800c40a:	9304      	str	r3, [sp, #16]
 800c40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c410:	482c      	ldr	r0, [pc, #176]	; (800c4c4 <_vfiprintf_r+0x250>)
 800c412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c416:	2206      	movs	r2, #6
 800c418:	f7f3 fee2 	bl	80001e0 <memchr>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d03f      	beq.n	800c4a0 <_vfiprintf_r+0x22c>
 800c420:	4b29      	ldr	r3, [pc, #164]	; (800c4c8 <_vfiprintf_r+0x254>)
 800c422:	bb1b      	cbnz	r3, 800c46c <_vfiprintf_r+0x1f8>
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	3307      	adds	r3, #7
 800c428:	f023 0307 	bic.w	r3, r3, #7
 800c42c:	3308      	adds	r3, #8
 800c42e:	9303      	str	r3, [sp, #12]
 800c430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c432:	443b      	add	r3, r7
 800c434:	9309      	str	r3, [sp, #36]	; 0x24
 800c436:	e767      	b.n	800c308 <_vfiprintf_r+0x94>
 800c438:	fb0c 3202 	mla	r2, ip, r2, r3
 800c43c:	460c      	mov	r4, r1
 800c43e:	2001      	movs	r0, #1
 800c440:	e7a5      	b.n	800c38e <_vfiprintf_r+0x11a>
 800c442:	2300      	movs	r3, #0
 800c444:	3401      	adds	r4, #1
 800c446:	9305      	str	r3, [sp, #20]
 800c448:	4619      	mov	r1, r3
 800c44a:	f04f 0c0a 	mov.w	ip, #10
 800c44e:	4620      	mov	r0, r4
 800c450:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c454:	3a30      	subs	r2, #48	; 0x30
 800c456:	2a09      	cmp	r2, #9
 800c458:	d903      	bls.n	800c462 <_vfiprintf_r+0x1ee>
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d0c5      	beq.n	800c3ea <_vfiprintf_r+0x176>
 800c45e:	9105      	str	r1, [sp, #20]
 800c460:	e7c3      	b.n	800c3ea <_vfiprintf_r+0x176>
 800c462:	fb0c 2101 	mla	r1, ip, r1, r2
 800c466:	4604      	mov	r4, r0
 800c468:	2301      	movs	r3, #1
 800c46a:	e7f0      	b.n	800c44e <_vfiprintf_r+0x1da>
 800c46c:	ab03      	add	r3, sp, #12
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	462a      	mov	r2, r5
 800c472:	4b16      	ldr	r3, [pc, #88]	; (800c4cc <_vfiprintf_r+0x258>)
 800c474:	a904      	add	r1, sp, #16
 800c476:	4630      	mov	r0, r6
 800c478:	f3af 8000 	nop.w
 800c47c:	4607      	mov	r7, r0
 800c47e:	1c78      	adds	r0, r7, #1
 800c480:	d1d6      	bne.n	800c430 <_vfiprintf_r+0x1bc>
 800c482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c484:	07d9      	lsls	r1, r3, #31
 800c486:	d405      	bmi.n	800c494 <_vfiprintf_r+0x220>
 800c488:	89ab      	ldrh	r3, [r5, #12]
 800c48a:	059a      	lsls	r2, r3, #22
 800c48c:	d402      	bmi.n	800c494 <_vfiprintf_r+0x220>
 800c48e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c490:	f7ff fdb7 	bl	800c002 <__retarget_lock_release_recursive>
 800c494:	89ab      	ldrh	r3, [r5, #12]
 800c496:	065b      	lsls	r3, r3, #25
 800c498:	f53f af12 	bmi.w	800c2c0 <_vfiprintf_r+0x4c>
 800c49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c49e:	e711      	b.n	800c2c4 <_vfiprintf_r+0x50>
 800c4a0:	ab03      	add	r3, sp, #12
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	462a      	mov	r2, r5
 800c4a6:	4b09      	ldr	r3, [pc, #36]	; (800c4cc <_vfiprintf_r+0x258>)
 800c4a8:	a904      	add	r1, sp, #16
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	f000 f880 	bl	800c5b0 <_printf_i>
 800c4b0:	e7e4      	b.n	800c47c <_vfiprintf_r+0x208>
 800c4b2:	bf00      	nop
 800c4b4:	0800d408 	.word	0x0800d408
 800c4b8:	0800d428 	.word	0x0800d428
 800c4bc:	0800d3e8 	.word	0x0800d3e8
 800c4c0:	0800d448 	.word	0x0800d448
 800c4c4:	0800d452 	.word	0x0800d452
 800c4c8:	00000000 	.word	0x00000000
 800c4cc:	0800c24f 	.word	0x0800c24f
 800c4d0:	0800d44e 	.word	0x0800d44e

0800c4d4 <_printf_common>:
 800c4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d8:	4616      	mov	r6, r2
 800c4da:	4699      	mov	r9, r3
 800c4dc:	688a      	ldr	r2, [r1, #8]
 800c4de:	690b      	ldr	r3, [r1, #16]
 800c4e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	bfb8      	it	lt
 800c4e8:	4613      	movlt	r3, r2
 800c4ea:	6033      	str	r3, [r6, #0]
 800c4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4f0:	4607      	mov	r7, r0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	b10a      	cbz	r2, 800c4fa <_printf_common+0x26>
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	6033      	str	r3, [r6, #0]
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	0699      	lsls	r1, r3, #26
 800c4fe:	bf42      	ittt	mi
 800c500:	6833      	ldrmi	r3, [r6, #0]
 800c502:	3302      	addmi	r3, #2
 800c504:	6033      	strmi	r3, [r6, #0]
 800c506:	6825      	ldr	r5, [r4, #0]
 800c508:	f015 0506 	ands.w	r5, r5, #6
 800c50c:	d106      	bne.n	800c51c <_printf_common+0x48>
 800c50e:	f104 0a19 	add.w	sl, r4, #25
 800c512:	68e3      	ldr	r3, [r4, #12]
 800c514:	6832      	ldr	r2, [r6, #0]
 800c516:	1a9b      	subs	r3, r3, r2
 800c518:	42ab      	cmp	r3, r5
 800c51a:	dc26      	bgt.n	800c56a <_printf_common+0x96>
 800c51c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c520:	1e13      	subs	r3, r2, #0
 800c522:	6822      	ldr	r2, [r4, #0]
 800c524:	bf18      	it	ne
 800c526:	2301      	movne	r3, #1
 800c528:	0692      	lsls	r2, r2, #26
 800c52a:	d42b      	bmi.n	800c584 <_printf_common+0xb0>
 800c52c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c530:	4649      	mov	r1, r9
 800c532:	4638      	mov	r0, r7
 800c534:	47c0      	blx	r8
 800c536:	3001      	adds	r0, #1
 800c538:	d01e      	beq.n	800c578 <_printf_common+0xa4>
 800c53a:	6823      	ldr	r3, [r4, #0]
 800c53c:	68e5      	ldr	r5, [r4, #12]
 800c53e:	6832      	ldr	r2, [r6, #0]
 800c540:	f003 0306 	and.w	r3, r3, #6
 800c544:	2b04      	cmp	r3, #4
 800c546:	bf08      	it	eq
 800c548:	1aad      	subeq	r5, r5, r2
 800c54a:	68a3      	ldr	r3, [r4, #8]
 800c54c:	6922      	ldr	r2, [r4, #16]
 800c54e:	bf0c      	ite	eq
 800c550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c554:	2500      	movne	r5, #0
 800c556:	4293      	cmp	r3, r2
 800c558:	bfc4      	itt	gt
 800c55a:	1a9b      	subgt	r3, r3, r2
 800c55c:	18ed      	addgt	r5, r5, r3
 800c55e:	2600      	movs	r6, #0
 800c560:	341a      	adds	r4, #26
 800c562:	42b5      	cmp	r5, r6
 800c564:	d11a      	bne.n	800c59c <_printf_common+0xc8>
 800c566:	2000      	movs	r0, #0
 800c568:	e008      	b.n	800c57c <_printf_common+0xa8>
 800c56a:	2301      	movs	r3, #1
 800c56c:	4652      	mov	r2, sl
 800c56e:	4649      	mov	r1, r9
 800c570:	4638      	mov	r0, r7
 800c572:	47c0      	blx	r8
 800c574:	3001      	adds	r0, #1
 800c576:	d103      	bne.n	800c580 <_printf_common+0xac>
 800c578:	f04f 30ff 	mov.w	r0, #4294967295
 800c57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c580:	3501      	adds	r5, #1
 800c582:	e7c6      	b.n	800c512 <_printf_common+0x3e>
 800c584:	18e1      	adds	r1, r4, r3
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	2030      	movs	r0, #48	; 0x30
 800c58a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c58e:	4422      	add	r2, r4
 800c590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c598:	3302      	adds	r3, #2
 800c59a:	e7c7      	b.n	800c52c <_printf_common+0x58>
 800c59c:	2301      	movs	r3, #1
 800c59e:	4622      	mov	r2, r4
 800c5a0:	4649      	mov	r1, r9
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	47c0      	blx	r8
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	d0e6      	beq.n	800c578 <_printf_common+0xa4>
 800c5aa:	3601      	adds	r6, #1
 800c5ac:	e7d9      	b.n	800c562 <_printf_common+0x8e>
	...

0800c5b0 <_printf_i>:
 800c5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	4691      	mov	r9, r2
 800c5b8:	7e27      	ldrb	r7, [r4, #24]
 800c5ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c5bc:	2f78      	cmp	r7, #120	; 0x78
 800c5be:	4680      	mov	r8, r0
 800c5c0:	469a      	mov	sl, r3
 800c5c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5c6:	d807      	bhi.n	800c5d8 <_printf_i+0x28>
 800c5c8:	2f62      	cmp	r7, #98	; 0x62
 800c5ca:	d80a      	bhi.n	800c5e2 <_printf_i+0x32>
 800c5cc:	2f00      	cmp	r7, #0
 800c5ce:	f000 80d8 	beq.w	800c782 <_printf_i+0x1d2>
 800c5d2:	2f58      	cmp	r7, #88	; 0x58
 800c5d4:	f000 80a3 	beq.w	800c71e <_printf_i+0x16e>
 800c5d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c5dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5e0:	e03a      	b.n	800c658 <_printf_i+0xa8>
 800c5e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5e6:	2b15      	cmp	r3, #21
 800c5e8:	d8f6      	bhi.n	800c5d8 <_printf_i+0x28>
 800c5ea:	a001      	add	r0, pc, #4	; (adr r0, 800c5f0 <_printf_i+0x40>)
 800c5ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c5f0:	0800c649 	.word	0x0800c649
 800c5f4:	0800c65d 	.word	0x0800c65d
 800c5f8:	0800c5d9 	.word	0x0800c5d9
 800c5fc:	0800c5d9 	.word	0x0800c5d9
 800c600:	0800c5d9 	.word	0x0800c5d9
 800c604:	0800c5d9 	.word	0x0800c5d9
 800c608:	0800c65d 	.word	0x0800c65d
 800c60c:	0800c5d9 	.word	0x0800c5d9
 800c610:	0800c5d9 	.word	0x0800c5d9
 800c614:	0800c5d9 	.word	0x0800c5d9
 800c618:	0800c5d9 	.word	0x0800c5d9
 800c61c:	0800c769 	.word	0x0800c769
 800c620:	0800c68d 	.word	0x0800c68d
 800c624:	0800c74b 	.word	0x0800c74b
 800c628:	0800c5d9 	.word	0x0800c5d9
 800c62c:	0800c5d9 	.word	0x0800c5d9
 800c630:	0800c78b 	.word	0x0800c78b
 800c634:	0800c5d9 	.word	0x0800c5d9
 800c638:	0800c68d 	.word	0x0800c68d
 800c63c:	0800c5d9 	.word	0x0800c5d9
 800c640:	0800c5d9 	.word	0x0800c5d9
 800c644:	0800c753 	.word	0x0800c753
 800c648:	680b      	ldr	r3, [r1, #0]
 800c64a:	1d1a      	adds	r2, r3, #4
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	600a      	str	r2, [r1, #0]
 800c650:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c658:	2301      	movs	r3, #1
 800c65a:	e0a3      	b.n	800c7a4 <_printf_i+0x1f4>
 800c65c:	6825      	ldr	r5, [r4, #0]
 800c65e:	6808      	ldr	r0, [r1, #0]
 800c660:	062e      	lsls	r6, r5, #24
 800c662:	f100 0304 	add.w	r3, r0, #4
 800c666:	d50a      	bpl.n	800c67e <_printf_i+0xce>
 800c668:	6805      	ldr	r5, [r0, #0]
 800c66a:	600b      	str	r3, [r1, #0]
 800c66c:	2d00      	cmp	r5, #0
 800c66e:	da03      	bge.n	800c678 <_printf_i+0xc8>
 800c670:	232d      	movs	r3, #45	; 0x2d
 800c672:	426d      	negs	r5, r5
 800c674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c678:	485e      	ldr	r0, [pc, #376]	; (800c7f4 <_printf_i+0x244>)
 800c67a:	230a      	movs	r3, #10
 800c67c:	e019      	b.n	800c6b2 <_printf_i+0x102>
 800c67e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c682:	6805      	ldr	r5, [r0, #0]
 800c684:	600b      	str	r3, [r1, #0]
 800c686:	bf18      	it	ne
 800c688:	b22d      	sxthne	r5, r5
 800c68a:	e7ef      	b.n	800c66c <_printf_i+0xbc>
 800c68c:	680b      	ldr	r3, [r1, #0]
 800c68e:	6825      	ldr	r5, [r4, #0]
 800c690:	1d18      	adds	r0, r3, #4
 800c692:	6008      	str	r0, [r1, #0]
 800c694:	0628      	lsls	r0, r5, #24
 800c696:	d501      	bpl.n	800c69c <_printf_i+0xec>
 800c698:	681d      	ldr	r5, [r3, #0]
 800c69a:	e002      	b.n	800c6a2 <_printf_i+0xf2>
 800c69c:	0669      	lsls	r1, r5, #25
 800c69e:	d5fb      	bpl.n	800c698 <_printf_i+0xe8>
 800c6a0:	881d      	ldrh	r5, [r3, #0]
 800c6a2:	4854      	ldr	r0, [pc, #336]	; (800c7f4 <_printf_i+0x244>)
 800c6a4:	2f6f      	cmp	r7, #111	; 0x6f
 800c6a6:	bf0c      	ite	eq
 800c6a8:	2308      	moveq	r3, #8
 800c6aa:	230a      	movne	r3, #10
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c6b2:	6866      	ldr	r6, [r4, #4]
 800c6b4:	60a6      	str	r6, [r4, #8]
 800c6b6:	2e00      	cmp	r6, #0
 800c6b8:	bfa2      	ittt	ge
 800c6ba:	6821      	ldrge	r1, [r4, #0]
 800c6bc:	f021 0104 	bicge.w	r1, r1, #4
 800c6c0:	6021      	strge	r1, [r4, #0]
 800c6c2:	b90d      	cbnz	r5, 800c6c8 <_printf_i+0x118>
 800c6c4:	2e00      	cmp	r6, #0
 800c6c6:	d04d      	beq.n	800c764 <_printf_i+0x1b4>
 800c6c8:	4616      	mov	r6, r2
 800c6ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6ce:	fb03 5711 	mls	r7, r3, r1, r5
 800c6d2:	5dc7      	ldrb	r7, [r0, r7]
 800c6d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6d8:	462f      	mov	r7, r5
 800c6da:	42bb      	cmp	r3, r7
 800c6dc:	460d      	mov	r5, r1
 800c6de:	d9f4      	bls.n	800c6ca <_printf_i+0x11a>
 800c6e0:	2b08      	cmp	r3, #8
 800c6e2:	d10b      	bne.n	800c6fc <_printf_i+0x14c>
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	07df      	lsls	r7, r3, #31
 800c6e8:	d508      	bpl.n	800c6fc <_printf_i+0x14c>
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	6861      	ldr	r1, [r4, #4]
 800c6ee:	4299      	cmp	r1, r3
 800c6f0:	bfde      	ittt	le
 800c6f2:	2330      	movle	r3, #48	; 0x30
 800c6f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c6fc:	1b92      	subs	r2, r2, r6
 800c6fe:	6122      	str	r2, [r4, #16]
 800c700:	f8cd a000 	str.w	sl, [sp]
 800c704:	464b      	mov	r3, r9
 800c706:	aa03      	add	r2, sp, #12
 800c708:	4621      	mov	r1, r4
 800c70a:	4640      	mov	r0, r8
 800c70c:	f7ff fee2 	bl	800c4d4 <_printf_common>
 800c710:	3001      	adds	r0, #1
 800c712:	d14c      	bne.n	800c7ae <_printf_i+0x1fe>
 800c714:	f04f 30ff 	mov.w	r0, #4294967295
 800c718:	b004      	add	sp, #16
 800c71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71e:	4835      	ldr	r0, [pc, #212]	; (800c7f4 <_printf_i+0x244>)
 800c720:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	680e      	ldr	r6, [r1, #0]
 800c728:	061f      	lsls	r7, r3, #24
 800c72a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c72e:	600e      	str	r6, [r1, #0]
 800c730:	d514      	bpl.n	800c75c <_printf_i+0x1ac>
 800c732:	07d9      	lsls	r1, r3, #31
 800c734:	bf44      	itt	mi
 800c736:	f043 0320 	orrmi.w	r3, r3, #32
 800c73a:	6023      	strmi	r3, [r4, #0]
 800c73c:	b91d      	cbnz	r5, 800c746 <_printf_i+0x196>
 800c73e:	6823      	ldr	r3, [r4, #0]
 800c740:	f023 0320 	bic.w	r3, r3, #32
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	2310      	movs	r3, #16
 800c748:	e7b0      	b.n	800c6ac <_printf_i+0xfc>
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	f043 0320 	orr.w	r3, r3, #32
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	2378      	movs	r3, #120	; 0x78
 800c754:	4828      	ldr	r0, [pc, #160]	; (800c7f8 <_printf_i+0x248>)
 800c756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c75a:	e7e3      	b.n	800c724 <_printf_i+0x174>
 800c75c:	065e      	lsls	r6, r3, #25
 800c75e:	bf48      	it	mi
 800c760:	b2ad      	uxthmi	r5, r5
 800c762:	e7e6      	b.n	800c732 <_printf_i+0x182>
 800c764:	4616      	mov	r6, r2
 800c766:	e7bb      	b.n	800c6e0 <_printf_i+0x130>
 800c768:	680b      	ldr	r3, [r1, #0]
 800c76a:	6826      	ldr	r6, [r4, #0]
 800c76c:	6960      	ldr	r0, [r4, #20]
 800c76e:	1d1d      	adds	r5, r3, #4
 800c770:	600d      	str	r5, [r1, #0]
 800c772:	0635      	lsls	r5, r6, #24
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	d501      	bpl.n	800c77c <_printf_i+0x1cc>
 800c778:	6018      	str	r0, [r3, #0]
 800c77a:	e002      	b.n	800c782 <_printf_i+0x1d2>
 800c77c:	0671      	lsls	r1, r6, #25
 800c77e:	d5fb      	bpl.n	800c778 <_printf_i+0x1c8>
 800c780:	8018      	strh	r0, [r3, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	6123      	str	r3, [r4, #16]
 800c786:	4616      	mov	r6, r2
 800c788:	e7ba      	b.n	800c700 <_printf_i+0x150>
 800c78a:	680b      	ldr	r3, [r1, #0]
 800c78c:	1d1a      	adds	r2, r3, #4
 800c78e:	600a      	str	r2, [r1, #0]
 800c790:	681e      	ldr	r6, [r3, #0]
 800c792:	6862      	ldr	r2, [r4, #4]
 800c794:	2100      	movs	r1, #0
 800c796:	4630      	mov	r0, r6
 800c798:	f7f3 fd22 	bl	80001e0 <memchr>
 800c79c:	b108      	cbz	r0, 800c7a2 <_printf_i+0x1f2>
 800c79e:	1b80      	subs	r0, r0, r6
 800c7a0:	6060      	str	r0, [r4, #4]
 800c7a2:	6863      	ldr	r3, [r4, #4]
 800c7a4:	6123      	str	r3, [r4, #16]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7ac:	e7a8      	b.n	800c700 <_printf_i+0x150>
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	4632      	mov	r2, r6
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	47d0      	blx	sl
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d0ab      	beq.n	800c714 <_printf_i+0x164>
 800c7bc:	6823      	ldr	r3, [r4, #0]
 800c7be:	079b      	lsls	r3, r3, #30
 800c7c0:	d413      	bmi.n	800c7ea <_printf_i+0x23a>
 800c7c2:	68e0      	ldr	r0, [r4, #12]
 800c7c4:	9b03      	ldr	r3, [sp, #12]
 800c7c6:	4298      	cmp	r0, r3
 800c7c8:	bfb8      	it	lt
 800c7ca:	4618      	movlt	r0, r3
 800c7cc:	e7a4      	b.n	800c718 <_printf_i+0x168>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	4649      	mov	r1, r9
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	47d0      	blx	sl
 800c7d8:	3001      	adds	r0, #1
 800c7da:	d09b      	beq.n	800c714 <_printf_i+0x164>
 800c7dc:	3501      	adds	r5, #1
 800c7de:	68e3      	ldr	r3, [r4, #12]
 800c7e0:	9903      	ldr	r1, [sp, #12]
 800c7e2:	1a5b      	subs	r3, r3, r1
 800c7e4:	42ab      	cmp	r3, r5
 800c7e6:	dcf2      	bgt.n	800c7ce <_printf_i+0x21e>
 800c7e8:	e7eb      	b.n	800c7c2 <_printf_i+0x212>
 800c7ea:	2500      	movs	r5, #0
 800c7ec:	f104 0619 	add.w	r6, r4, #25
 800c7f0:	e7f5      	b.n	800c7de <_printf_i+0x22e>
 800c7f2:	bf00      	nop
 800c7f4:	0800d459 	.word	0x0800d459
 800c7f8:	0800d46a 	.word	0x0800d46a

0800c7fc <_sbrk_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	4d06      	ldr	r5, [pc, #24]	; (800c818 <_sbrk_r+0x1c>)
 800c800:	2300      	movs	r3, #0
 800c802:	4604      	mov	r4, r0
 800c804:	4608      	mov	r0, r1
 800c806:	602b      	str	r3, [r5, #0]
 800c808:	f7f6 fd52 	bl	80032b0 <_sbrk>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	d102      	bne.n	800c816 <_sbrk_r+0x1a>
 800c810:	682b      	ldr	r3, [r5, #0]
 800c812:	b103      	cbz	r3, 800c816 <_sbrk_r+0x1a>
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	20009d0c 	.word	0x20009d0c

0800c81c <__sread>:
 800c81c:	b510      	push	{r4, lr}
 800c81e:	460c      	mov	r4, r1
 800c820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c824:	f000 f8a0 	bl	800c968 <_read_r>
 800c828:	2800      	cmp	r0, #0
 800c82a:	bfab      	itete	ge
 800c82c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c82e:	89a3      	ldrhlt	r3, [r4, #12]
 800c830:	181b      	addge	r3, r3, r0
 800c832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c836:	bfac      	ite	ge
 800c838:	6563      	strge	r3, [r4, #84]	; 0x54
 800c83a:	81a3      	strhlt	r3, [r4, #12]
 800c83c:	bd10      	pop	{r4, pc}

0800c83e <__swrite>:
 800c83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c842:	461f      	mov	r7, r3
 800c844:	898b      	ldrh	r3, [r1, #12]
 800c846:	05db      	lsls	r3, r3, #23
 800c848:	4605      	mov	r5, r0
 800c84a:	460c      	mov	r4, r1
 800c84c:	4616      	mov	r6, r2
 800c84e:	d505      	bpl.n	800c85c <__swrite+0x1e>
 800c850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c854:	2302      	movs	r3, #2
 800c856:	2200      	movs	r2, #0
 800c858:	f000 f868 	bl	800c92c <_lseek_r>
 800c85c:	89a3      	ldrh	r3, [r4, #12]
 800c85e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c866:	81a3      	strh	r3, [r4, #12]
 800c868:	4632      	mov	r2, r6
 800c86a:	463b      	mov	r3, r7
 800c86c:	4628      	mov	r0, r5
 800c86e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c872:	f000 b817 	b.w	800c8a4 <_write_r>

0800c876 <__sseek>:
 800c876:	b510      	push	{r4, lr}
 800c878:	460c      	mov	r4, r1
 800c87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c87e:	f000 f855 	bl	800c92c <_lseek_r>
 800c882:	1c43      	adds	r3, r0, #1
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	bf15      	itete	ne
 800c888:	6560      	strne	r0, [r4, #84]	; 0x54
 800c88a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c88e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c892:	81a3      	strheq	r3, [r4, #12]
 800c894:	bf18      	it	ne
 800c896:	81a3      	strhne	r3, [r4, #12]
 800c898:	bd10      	pop	{r4, pc}

0800c89a <__sclose>:
 800c89a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c89e:	f000 b813 	b.w	800c8c8 <_close_r>
	...

0800c8a4 <_write_r>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	4d07      	ldr	r5, [pc, #28]	; (800c8c4 <_write_r+0x20>)
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	602a      	str	r2, [r5, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	f7f6 fa9e 	bl	8002df4 <_write>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_write_r+0x1e>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_write_r+0x1e>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	20009d0c 	.word	0x20009d0c

0800c8c8 <_close_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4d06      	ldr	r5, [pc, #24]	; (800c8e4 <_close_r+0x1c>)
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	4608      	mov	r0, r1
 800c8d2:	602b      	str	r3, [r5, #0]
 800c8d4:	f7f6 fcde 	bl	8003294 <_close>
 800c8d8:	1c43      	adds	r3, r0, #1
 800c8da:	d102      	bne.n	800c8e2 <_close_r+0x1a>
 800c8dc:	682b      	ldr	r3, [r5, #0]
 800c8de:	b103      	cbz	r3, 800c8e2 <_close_r+0x1a>
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	20009d0c 	.word	0x20009d0c

0800c8e8 <_fstat_r>:
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	4d07      	ldr	r5, [pc, #28]	; (800c908 <_fstat_r+0x20>)
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	4608      	mov	r0, r1
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	602b      	str	r3, [r5, #0]
 800c8f6:	f7f6 fcd1 	bl	800329c <_fstat>
 800c8fa:	1c43      	adds	r3, r0, #1
 800c8fc:	d102      	bne.n	800c904 <_fstat_r+0x1c>
 800c8fe:	682b      	ldr	r3, [r5, #0]
 800c900:	b103      	cbz	r3, 800c904 <_fstat_r+0x1c>
 800c902:	6023      	str	r3, [r4, #0]
 800c904:	bd38      	pop	{r3, r4, r5, pc}
 800c906:	bf00      	nop
 800c908:	20009d0c 	.word	0x20009d0c

0800c90c <_isatty_r>:
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	4d06      	ldr	r5, [pc, #24]	; (800c928 <_isatty_r+0x1c>)
 800c910:	2300      	movs	r3, #0
 800c912:	4604      	mov	r4, r0
 800c914:	4608      	mov	r0, r1
 800c916:	602b      	str	r3, [r5, #0]
 800c918:	f7f6 fcc6 	bl	80032a8 <_isatty>
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	d102      	bne.n	800c926 <_isatty_r+0x1a>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	b103      	cbz	r3, 800c926 <_isatty_r+0x1a>
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	bd38      	pop	{r3, r4, r5, pc}
 800c928:	20009d0c 	.word	0x20009d0c

0800c92c <_lseek_r>:
 800c92c:	b538      	push	{r3, r4, r5, lr}
 800c92e:	4d07      	ldr	r5, [pc, #28]	; (800c94c <_lseek_r+0x20>)
 800c930:	4604      	mov	r4, r0
 800c932:	4608      	mov	r0, r1
 800c934:	4611      	mov	r1, r2
 800c936:	2200      	movs	r2, #0
 800c938:	602a      	str	r2, [r5, #0]
 800c93a:	461a      	mov	r2, r3
 800c93c:	f7f6 fcb6 	bl	80032ac <_lseek>
 800c940:	1c43      	adds	r3, r0, #1
 800c942:	d102      	bne.n	800c94a <_lseek_r+0x1e>
 800c944:	682b      	ldr	r3, [r5, #0]
 800c946:	b103      	cbz	r3, 800c94a <_lseek_r+0x1e>
 800c948:	6023      	str	r3, [r4, #0]
 800c94a:	bd38      	pop	{r3, r4, r5, pc}
 800c94c:	20009d0c 	.word	0x20009d0c

0800c950 <__malloc_lock>:
 800c950:	4801      	ldr	r0, [pc, #4]	; (800c958 <__malloc_lock+0x8>)
 800c952:	f7ff bb55 	b.w	800c000 <__retarget_lock_acquire_recursive>
 800c956:	bf00      	nop
 800c958:	20009d04 	.word	0x20009d04

0800c95c <__malloc_unlock>:
 800c95c:	4801      	ldr	r0, [pc, #4]	; (800c964 <__malloc_unlock+0x8>)
 800c95e:	f7ff bb50 	b.w	800c002 <__retarget_lock_release_recursive>
 800c962:	bf00      	nop
 800c964:	20009d04 	.word	0x20009d04

0800c968 <_read_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4d07      	ldr	r5, [pc, #28]	; (800c988 <_read_r+0x20>)
 800c96c:	4604      	mov	r4, r0
 800c96e:	4608      	mov	r0, r1
 800c970:	4611      	mov	r1, r2
 800c972:	2200      	movs	r2, #0
 800c974:	602a      	str	r2, [r5, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	f7f6 fc7e 	bl	8003278 <_read>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d102      	bne.n	800c986 <_read_r+0x1e>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	b103      	cbz	r3, 800c986 <_read_r+0x1e>
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	20009d0c 	.word	0x20009d0c

0800c98c <round>:
 800c98c:	ec51 0b10 	vmov	r0, r1, d0
 800c990:	b570      	push	{r4, r5, r6, lr}
 800c992:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800c996:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800c99a:	2c13      	cmp	r4, #19
 800c99c:	ee10 2a10 	vmov	r2, s0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	dc19      	bgt.n	800c9d8 <round+0x4c>
 800c9a4:	2c00      	cmp	r4, #0
 800c9a6:	da09      	bge.n	800c9bc <round+0x30>
 800c9a8:	3401      	adds	r4, #1
 800c9aa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800c9ae:	d103      	bne.n	800c9b8 <round+0x2c>
 800c9b0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c9b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	e028      	b.n	800ca0e <round+0x82>
 800c9bc:	4d15      	ldr	r5, [pc, #84]	; (800ca14 <round+0x88>)
 800c9be:	4125      	asrs	r5, r4
 800c9c0:	ea01 0605 	and.w	r6, r1, r5
 800c9c4:	4332      	orrs	r2, r6
 800c9c6:	d00e      	beq.n	800c9e6 <round+0x5a>
 800c9c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c9cc:	fa42 f404 	asr.w	r4, r2, r4
 800c9d0:	4423      	add	r3, r4
 800c9d2:	ea23 0305 	bic.w	r3, r3, r5
 800c9d6:	e7ef      	b.n	800c9b8 <round+0x2c>
 800c9d8:	2c33      	cmp	r4, #51	; 0x33
 800c9da:	dd07      	ble.n	800c9ec <round+0x60>
 800c9dc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c9e0:	d101      	bne.n	800c9e6 <round+0x5a>
 800c9e2:	f7f3 fc53 	bl	800028c <__adddf3>
 800c9e6:	ec41 0b10 	vmov	d0, r0, r1
 800c9ea:	bd70      	pop	{r4, r5, r6, pc}
 800c9ec:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800c9f0:	f04f 35ff 	mov.w	r5, #4294967295
 800c9f4:	40f5      	lsrs	r5, r6
 800c9f6:	4228      	tst	r0, r5
 800c9f8:	d0f5      	beq.n	800c9e6 <round+0x5a>
 800c9fa:	2101      	movs	r1, #1
 800c9fc:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800ca00:	fa01 f404 	lsl.w	r4, r1, r4
 800ca04:	1912      	adds	r2, r2, r4
 800ca06:	bf28      	it	cs
 800ca08:	185b      	addcs	r3, r3, r1
 800ca0a:	ea22 0105 	bic.w	r1, r2, r5
 800ca0e:	4608      	mov	r0, r1
 800ca10:	4619      	mov	r1, r3
 800ca12:	e7e8      	b.n	800c9e6 <round+0x5a>
 800ca14:	000fffff 	.word	0x000fffff

0800ca18 <sqrt>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	ed2d 8b02 	vpush	{d8}
 800ca1e:	ec55 4b10 	vmov	r4, r5, d0
 800ca22:	f000 f82d 	bl	800ca80 <__ieee754_sqrt>
 800ca26:	4b15      	ldr	r3, [pc, #84]	; (800ca7c <sqrt+0x64>)
 800ca28:	eeb0 8a40 	vmov.f32	s16, s0
 800ca2c:	eef0 8a60 	vmov.f32	s17, s1
 800ca30:	f993 3000 	ldrsb.w	r3, [r3]
 800ca34:	3301      	adds	r3, #1
 800ca36:	d019      	beq.n	800ca6c <sqrt+0x54>
 800ca38:	4622      	mov	r2, r4
 800ca3a:	462b      	mov	r3, r5
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	4629      	mov	r1, r5
 800ca40:	f7f4 f874 	bl	8000b2c <__aeabi_dcmpun>
 800ca44:	b990      	cbnz	r0, 800ca6c <sqrt+0x54>
 800ca46:	2200      	movs	r2, #0
 800ca48:	2300      	movs	r3, #0
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	f7f4 f845 	bl	8000adc <__aeabi_dcmplt>
 800ca52:	b158      	cbz	r0, 800ca6c <sqrt+0x54>
 800ca54:	f7fe ff8e 	bl	800b974 <__errno>
 800ca58:	2321      	movs	r3, #33	; 0x21
 800ca5a:	6003      	str	r3, [r0, #0]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2300      	movs	r3, #0
 800ca60:	4610      	mov	r0, r2
 800ca62:	4619      	mov	r1, r3
 800ca64:	f7f3 fef2 	bl	800084c <__aeabi_ddiv>
 800ca68:	ec41 0b18 	vmov	d8, r0, r1
 800ca6c:	eeb0 0a48 	vmov.f32	s0, s16
 800ca70:	eef0 0a68 	vmov.f32	s1, s17
 800ca74:	ecbd 8b02 	vpop	{d8}
 800ca78:	bd38      	pop	{r3, r4, r5, pc}
 800ca7a:	bf00      	nop
 800ca7c:	200000a0 	.word	0x200000a0

0800ca80 <__ieee754_sqrt>:
 800ca80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca84:	ec55 4b10 	vmov	r4, r5, d0
 800ca88:	4e56      	ldr	r6, [pc, #344]	; (800cbe4 <__ieee754_sqrt+0x164>)
 800ca8a:	43ae      	bics	r6, r5
 800ca8c:	ee10 0a10 	vmov	r0, s0
 800ca90:	ee10 3a10 	vmov	r3, s0
 800ca94:	4629      	mov	r1, r5
 800ca96:	462a      	mov	r2, r5
 800ca98:	d110      	bne.n	800cabc <__ieee754_sqrt+0x3c>
 800ca9a:	ee10 2a10 	vmov	r2, s0
 800ca9e:	462b      	mov	r3, r5
 800caa0:	f7f3 fdaa 	bl	80005f8 <__aeabi_dmul>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	4620      	mov	r0, r4
 800caaa:	4629      	mov	r1, r5
 800caac:	f7f3 fbee 	bl	800028c <__adddf3>
 800cab0:	4604      	mov	r4, r0
 800cab2:	460d      	mov	r5, r1
 800cab4:	ec45 4b10 	vmov	d0, r4, r5
 800cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cabc:	2d00      	cmp	r5, #0
 800cabe:	dc10      	bgt.n	800cae2 <__ieee754_sqrt+0x62>
 800cac0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cac4:	4330      	orrs	r0, r6
 800cac6:	d0f5      	beq.n	800cab4 <__ieee754_sqrt+0x34>
 800cac8:	b15d      	cbz	r5, 800cae2 <__ieee754_sqrt+0x62>
 800caca:	ee10 2a10 	vmov	r2, s0
 800cace:	462b      	mov	r3, r5
 800cad0:	ee10 0a10 	vmov	r0, s0
 800cad4:	f7f3 fbd8 	bl	8000288 <__aeabi_dsub>
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	f7f3 feb6 	bl	800084c <__aeabi_ddiv>
 800cae0:	e7e6      	b.n	800cab0 <__ieee754_sqrt+0x30>
 800cae2:	1509      	asrs	r1, r1, #20
 800cae4:	d076      	beq.n	800cbd4 <__ieee754_sqrt+0x154>
 800cae6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800caea:	07ce      	lsls	r6, r1, #31
 800caec:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800caf0:	bf5e      	ittt	pl
 800caf2:	0fda      	lsrpl	r2, r3, #31
 800caf4:	005b      	lslpl	r3, r3, #1
 800caf6:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cafa:	0fda      	lsrs	r2, r3, #31
 800cafc:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cb00:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cb04:	2000      	movs	r0, #0
 800cb06:	106d      	asrs	r5, r5, #1
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	f04f 0e16 	mov.w	lr, #22
 800cb0e:	4684      	mov	ip, r0
 800cb10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb14:	eb0c 0401 	add.w	r4, ip, r1
 800cb18:	4294      	cmp	r4, r2
 800cb1a:	bfde      	ittt	le
 800cb1c:	1b12      	suble	r2, r2, r4
 800cb1e:	eb04 0c01 	addle.w	ip, r4, r1
 800cb22:	1840      	addle	r0, r0, r1
 800cb24:	0052      	lsls	r2, r2, #1
 800cb26:	f1be 0e01 	subs.w	lr, lr, #1
 800cb2a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cb2e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cb32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cb36:	d1ed      	bne.n	800cb14 <__ieee754_sqrt+0x94>
 800cb38:	4671      	mov	r1, lr
 800cb3a:	2720      	movs	r7, #32
 800cb3c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cb40:	4562      	cmp	r2, ip
 800cb42:	eb04 060e 	add.w	r6, r4, lr
 800cb46:	dc02      	bgt.n	800cb4e <__ieee754_sqrt+0xce>
 800cb48:	d113      	bne.n	800cb72 <__ieee754_sqrt+0xf2>
 800cb4a:	429e      	cmp	r6, r3
 800cb4c:	d811      	bhi.n	800cb72 <__ieee754_sqrt+0xf2>
 800cb4e:	2e00      	cmp	r6, #0
 800cb50:	eb06 0e04 	add.w	lr, r6, r4
 800cb54:	da43      	bge.n	800cbde <__ieee754_sqrt+0x15e>
 800cb56:	f1be 0f00 	cmp.w	lr, #0
 800cb5a:	db40      	blt.n	800cbde <__ieee754_sqrt+0x15e>
 800cb5c:	f10c 0801 	add.w	r8, ip, #1
 800cb60:	eba2 020c 	sub.w	r2, r2, ip
 800cb64:	429e      	cmp	r6, r3
 800cb66:	bf88      	it	hi
 800cb68:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cb6c:	1b9b      	subs	r3, r3, r6
 800cb6e:	4421      	add	r1, r4
 800cb70:	46c4      	mov	ip, r8
 800cb72:	0052      	lsls	r2, r2, #1
 800cb74:	3f01      	subs	r7, #1
 800cb76:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cb7a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cb7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cb82:	d1dd      	bne.n	800cb40 <__ieee754_sqrt+0xc0>
 800cb84:	4313      	orrs	r3, r2
 800cb86:	d006      	beq.n	800cb96 <__ieee754_sqrt+0x116>
 800cb88:	1c4c      	adds	r4, r1, #1
 800cb8a:	bf13      	iteet	ne
 800cb8c:	3101      	addne	r1, #1
 800cb8e:	3001      	addeq	r0, #1
 800cb90:	4639      	moveq	r1, r7
 800cb92:	f021 0101 	bicne.w	r1, r1, #1
 800cb96:	1043      	asrs	r3, r0, #1
 800cb98:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cb9c:	0849      	lsrs	r1, r1, #1
 800cb9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cba2:	07c2      	lsls	r2, r0, #31
 800cba4:	bf48      	it	mi
 800cba6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cbaa:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cbae:	460c      	mov	r4, r1
 800cbb0:	463d      	mov	r5, r7
 800cbb2:	e77f      	b.n	800cab4 <__ieee754_sqrt+0x34>
 800cbb4:	0ada      	lsrs	r2, r3, #11
 800cbb6:	3815      	subs	r0, #21
 800cbb8:	055b      	lsls	r3, r3, #21
 800cbba:	2a00      	cmp	r2, #0
 800cbbc:	d0fa      	beq.n	800cbb4 <__ieee754_sqrt+0x134>
 800cbbe:	02d7      	lsls	r7, r2, #11
 800cbc0:	d50a      	bpl.n	800cbd8 <__ieee754_sqrt+0x158>
 800cbc2:	f1c1 0420 	rsb	r4, r1, #32
 800cbc6:	fa23 f404 	lsr.w	r4, r3, r4
 800cbca:	1e4d      	subs	r5, r1, #1
 800cbcc:	408b      	lsls	r3, r1
 800cbce:	4322      	orrs	r2, r4
 800cbd0:	1b41      	subs	r1, r0, r5
 800cbd2:	e788      	b.n	800cae6 <__ieee754_sqrt+0x66>
 800cbd4:	4608      	mov	r0, r1
 800cbd6:	e7f0      	b.n	800cbba <__ieee754_sqrt+0x13a>
 800cbd8:	0052      	lsls	r2, r2, #1
 800cbda:	3101      	adds	r1, #1
 800cbdc:	e7ef      	b.n	800cbbe <__ieee754_sqrt+0x13e>
 800cbde:	46e0      	mov	r8, ip
 800cbe0:	e7be      	b.n	800cb60 <__ieee754_sqrt+0xe0>
 800cbe2:	bf00      	nop
 800cbe4:	7ff00000 	.word	0x7ff00000

0800cbe8 <_init>:
 800cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbea:	bf00      	nop
 800cbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbee:	bc08      	pop	{r3}
 800cbf0:	469e      	mov	lr, r3
 800cbf2:	4770      	bx	lr

0800cbf4 <_fini>:
 800cbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf6:	bf00      	nop
 800cbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbfa:	bc08      	pop	{r3}
 800cbfc:	469e      	mov	lr, r3
 800cbfe:	4770      	bx	lr
