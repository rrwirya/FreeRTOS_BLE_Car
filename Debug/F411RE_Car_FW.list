
F411RE_Car_FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a484  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  0800a624  0800a624  0001a624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae24  0800ae24  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae24  0800ae24  0001ae24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae2c  0800ae2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae2c  0800ae2c  0001ae2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae30  0800ae30  0001ae30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ae34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c3c  20000070  0800aea4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00003804  20009cac  0800aea4  00029cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005e1a9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008d1b  00000000  00000000  0007e249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d8  00000000  00000000  00086f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00005c10  00000000  00000000  00089040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021bd9  00000000  00000000  0008ec50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00045c3e  00000000  00000000  000b0829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4963  00000000  00000000  000f6467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001aadca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d80  00000000  00000000  001aae20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00032288  00000000  00000000  001b2ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a60c 	.word	0x0800a60c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800a60c 	.word	0x0800a60c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Motor_Init>:
 * @note
 */
void Motor_Init(void)
{
	/* Initialize hardware layer (motor shield driver) */
	__MOTOR_HWInit();
 8000578:	f000 b84c 	b.w	8000614 <__MOTOR_HWInit>

0800057c <Motor_ApplyWheelChanges>:
 * @note	Update g_ShiftRegisterByteToSet value through Motor_ConfigWheelDirection() prior to calling
 * 			this function
 */
void Motor_ApplyWheelChanges(void)
{
	__MOTOR_SetShiftRegister(g_ShiftRegisterByteToSet);
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <Motor_ApplyWheelChanges+0x8>)
 800057e:	7818      	ldrb	r0, [r3, #0]
 8000580:	f000 b850 	b.w	8000624 <__MOTOR_SetShiftRegister>
 8000584:	2000008c 	.word	0x2000008c

08000588 <Motor_ConfigWheelDirection>:
 * @param
 * @note	SR output pin QA might represent LSbit, while QH might represent MSbit
 */
void Motor_ConfigWheelDirection(E_MotorWheel_Pos MotorWheel, E_Dir_SingleWheel WheelDirection)
{
	switch(MotorWheel)
 8000588:	2811      	cmp	r0, #17
 800058a:	d007      	beq.n	800059c <Motor_ConfigWheelDirection+0x14>
 800058c:	2822      	cmp	r0, #34	; 0x22
 800058e:	d104      	bne.n	800059a <Motor_ConfigWheelDirection+0x12>
	{
		case MOTWHEEL_REARRIGHT:
		{
			/* Rear Right Wheel (M2) Selection and direction controlled by pins M2A and M2B */
			switch(WheelDirection)
 8000590:	2901      	cmp	r1, #1
 8000592:	d015      	beq.n	80005c0 <Motor_ConfigWheelDirection+0x38>
 8000594:	2910      	cmp	r1, #16
 8000596:	d031      	beq.n	80005fc <Motor_ConfigWheelDirection+0x74>
 8000598:	b161      	cbz	r1, 80005b4 <Motor_ConfigWheelDirection+0x2c>
		{
			break;
		}
		default: break;
	}
}
 800059a:	4770      	bx	lr
			switch(WheelDirection)
 800059c:	2901      	cmp	r1, #1
 800059e:	d019      	beq.n	80005d4 <Motor_ConfigWheelDirection+0x4c>
 80005a0:	2910      	cmp	r1, #16
 80005a2:	d021      	beq.n	80005e8 <Motor_ConfigWheelDirection+0x60>
 80005a4:	2900      	cmp	r1, #0
 80005a6:	d1f8      	bne.n	800059a <Motor_ConfigWheelDirection+0x12>
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 80005a8:	4a19      	ldr	r2, [pc, #100]	; (8000610 <Motor_ConfigWheelDirection+0x88>)
 80005aa:	7813      	ldrb	r3, [r2, #0]
 80005ac:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
 80005b0:	7013      	strb	r3, [r2, #0]
					break;
 80005b2:	4770      	bx	lr
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 80005b4:	4a16      	ldr	r2, [pc, #88]	; (8000610 <Motor_ConfigWheelDirection+0x88>)
 80005b6:	7813      	ldrb	r3, [r2, #0]
 80005b8:	f003 03b7 	and.w	r3, r3, #183	; 0xb7
 80005bc:	7013      	strb	r3, [r2, #0]
					break;
 80005be:	4770      	bx	lr
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <Motor_ConfigWheelDirection+0x88>)
 80005c2:	781a      	ldrb	r2, [r3, #0]
 80005c4:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 80005c8:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN3_BITMASK;
 80005ca:	781a      	ldrb	r2, [r3, #0]
 80005cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005d0:	701a      	strb	r2, [r3, #0]
					break;
 80005d2:	4770      	bx	lr
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <Motor_ConfigWheelDirection+0x88>)
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 80005dc:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN2_BITMASK;
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	f042 0210 	orr.w	r2, r2, #16
 80005e4:	701a      	strb	r2, [r3, #0]
}
 80005e6:	e7d8      	b.n	800059a <Motor_ConfigWheelDirection+0x12>
					g_ShiftRegisterByteToSet &= ~MOT1_SELECTION_BITMASK;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <Motor_ConfigWheelDirection+0x88>)
 80005ea:	781a      	ldrb	r2, [r3, #0]
 80005ec:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
 80005f0:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT1_SELECTION_IN1_BITMASK;
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	f042 0220 	orr.w	r2, r2, #32
 80005f8:	701a      	strb	r2, [r3, #0]
					break;
 80005fa:	4770      	bx	lr
					g_ShiftRegisterByteToSet &= ~MOT2_SELECTION_BITMASK;
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <Motor_ConfigWheelDirection+0x88>)
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
 8000604:	701a      	strb	r2, [r3, #0]
					g_ShiftRegisterByteToSet |= MOT2_SELECTION_IN4_BITMASK;
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	f042 0208 	orr.w	r2, r2, #8
 800060c:	701a      	strb	r2, [r3, #0]
					break;
 800060e:	4770      	bx	lr
 8000610:	2000008c 	.word	0x2000008c

08000614 <__MOTOR_HWInit>:
 * @note
 */
static void __MOTOR_EnableShiftRegister(void)
{
	/* The input pin is negated, and by default, the Shift Register is disabled */
	HAL_GPIO_WritePin(DIR_EN_GPIO_Port, DIR_EN_Pin, GPIO_PIN_RESET);
 8000614:	4802      	ldr	r0, [pc, #8]	; (8000620 <__MOTOR_HWInit+0xc>)
 8000616:	2200      	movs	r2, #0
 8000618:	2120      	movs	r1, #32
 800061a:	f002 be81 	b.w	8003320 <HAL_GPIO_WritePin>
 800061e:	bf00      	nop
 8000620:	40020400 	.word	0x40020400

08000624 <__MOTOR_SetShiftRegister>:
 * 			QF = 0
 * 			QG = 0
 * 			QH = 0
 */
void __MOTOR_SetShiftRegister(uint8_t cByte)
{
 8000624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Variable declarations and assignments */
	g_RecentShiftRegisterByte = cByte;
 8000628:	4b63      	ldr	r3, [pc, #396]	; (80007b8 <__MOTOR_SetShiftRegister+0x194>)
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_SET);
 800062a:	4f64      	ldr	r7, [pc, #400]	; (80007bc <__MOTOR_SetShiftRegister+0x198>)
		HAL_GPIO_WritePin(DIR_SER_GPIO_Port, DIR_SER_Pin, GPIO_PIN_SET);
 800062c:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80007c0 <__MOTOR_SetShiftRegister+0x19c>
	g_RecentShiftRegisterByte = cByte;
 8000630:	7018      	strb	r0, [r3, #0]
{
 8000632:	b084      	sub	sp, #16
 8000634:	4605      	mov	r5, r0
	g_RecentShiftRegisterByte = cByte;
 8000636:	2408      	movs	r4, #8
	for(volatile uint8_t i=0; i<0x7F; i++);
 8000638:	2600      	movs	r6, #0

	/* Iterate through all 8-bits */
	for(uint8_t i=0; i<8; i++)
	{
		/* Check the zeroth bit each iteration. Note that bits sent must be from least order to highest order */
		if(temp & 0x1)
 800063a:	f015 0301 	ands.w	r3, r5, #1
 800063e:	f000 808e 	beq.w	800075e <__MOTOR_SetShiftRegister+0x13a>
		HAL_GPIO_WritePin(DIR_SER_GPIO_Port, DIR_SER_Pin, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000648:	4640      	mov	r0, r8
 800064a:	f002 fe69 	bl	8003320 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x3F; i++);
 800064e:	f88d 600a 	strb.w	r6, [sp, #10]
 8000652:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8000656:	2b3e      	cmp	r3, #62	; 0x3e
 8000658:	d809      	bhi.n	800066e <__MOTOR_SetShiftRegister+0x4a>
 800065a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800065e:	3301      	adds	r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f88d 300a 	strb.w	r3, [sp, #10]
 8000666:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800066a:	2b3e      	cmp	r3, #62	; 0x3e
 800066c:	d9f5      	bls.n	800065a <__MOTOR_SetShiftRegister+0x36>
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	4611      	mov	r1, r2
 8000672:	4638      	mov	r0, r7
 8000674:	f002 fe54 	bl	8003320 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x7F; i++);
 8000678:	f88d 600b 	strb.w	r6, [sp, #11]
 800067c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8000680:	2b7e      	cmp	r3, #126	; 0x7e
 8000682:	d809      	bhi.n	8000698 <__MOTOR_SetShiftRegister+0x74>
 8000684:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8000688:	3301      	adds	r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f88d 300b 	strb.w	r3, [sp, #11]
 8000690:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8000694:	2b7e      	cmp	r3, #126	; 0x7e
 8000696:	d9f5      	bls.n	8000684 <__MOTOR_SetShiftRegister+0x60>
		HAL_GPIO_WritePin(DIR_SER_GPIO_Port, DIR_SER_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069e:	4640      	mov	r0, r8
 80006a0:	f002 fe3e 	bl	8003320 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x3F; i++);
 80006a4:	f88d 600c 	strb.w	r6, [sp, #12]
 80006a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80006ac:	2b3e      	cmp	r3, #62	; 0x3e
 80006ae:	d809      	bhi.n	80006c4 <__MOTOR_SetShiftRegister+0xa0>
 80006b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80006b4:	3301      	adds	r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f88d 300c 	strb.w	r3, [sp, #12]
 80006bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80006c0:	2b3e      	cmp	r3, #62	; 0x3e
 80006c2:	d9f5      	bls.n	80006b0 <__MOTOR_SetShiftRegister+0x8c>
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2101      	movs	r1, #1
 80006c8:	4638      	mov	r0, r7
 80006ca:	f002 fe29 	bl	8003320 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x3F; i++);
 80006ce:	f88d 6007 	strb.w	r6, [sp, #7]
 80006d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006d6:	2b3e      	cmp	r3, #62	; 0x3e
			/* Send a LO over DIR_SER */
			__MOTOR_SetShiftRegisterBit(RESET);
		}

		/* Parse the following bits and set a small delay in between bit transfers */
		temp = temp >> 1;
 80006d8:	ea4f 0555 	mov.w	r5, r5, lsr #1
	for(volatile uint8_t i=0; i<0x3F; i++);
 80006dc:	d809      	bhi.n	80006f2 <__MOTOR_SetShiftRegister+0xce>
 80006de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006e2:	3301      	adds	r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	f88d 3007 	strb.w	r3, [sp, #7]
 80006ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006ee:	2b3e      	cmp	r3, #62	; 0x3e
 80006f0:	d9f5      	bls.n	80006de <__MOTOR_SetShiftRegister+0xba>
	for(uint8_t i=0; i<8; i++)
 80006f2:	3c01      	subs	r4, #1
 80006f4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80006f8:	d19f      	bne.n	800063a <__MOTOR_SetShiftRegister+0x16>
#if PRIORITIZE_SR_DATA_TRF
	taskEXIT_CRITICAL();
#endif

	/* A pulse must be sent to DIR_LATCH to output byte configured in Shift Register to its output pins */
	HAL_GPIO_WritePin(DIR_LATCH_GPIO_Port, DIR_LATCH_Pin, GPIO_PIN_SET);
 80006fa:	4831      	ldr	r0, [pc, #196]	; (80007c0 <__MOTOR_SetShiftRegister+0x19c>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	2140      	movs	r1, #64	; 0x40
 8000700:	f002 fe0e 	bl	8003320 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0xFF; i++);
 8000704:	f88d 4009 	strb.w	r4, [sp, #9]
 8000708:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800070c:	2bff      	cmp	r3, #255	; 0xff
 800070e:	d009      	beq.n	8000724 <__MOTOR_SetShiftRegister+0x100>
 8000710:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000714:	3301      	adds	r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	f88d 3009 	strb.w	r3, [sp, #9]
 800071c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8000720:	2bff      	cmp	r3, #255	; 0xff
 8000722:	d1f5      	bne.n	8000710 <__MOTOR_SetShiftRegister+0xec>
	__MOTOR_ShiftRegister_Delay();
	HAL_GPIO_WritePin(DIR_LATCH_GPIO_Port, DIR_LATCH_Pin, GPIO_PIN_RESET);
 8000724:	4826      	ldr	r0, [pc, #152]	; (80007c0 <__MOTOR_SetShiftRegister+0x19c>)
 8000726:	2200      	movs	r2, #0
 8000728:	2140      	movs	r1, #64	; 0x40
 800072a:	f002 fdf9 	bl	8003320 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0xFF; i++);
 800072e:	2300      	movs	r3, #0
 8000730:	f88d 3008 	strb.w	r3, [sp, #8]
 8000734:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000738:	2bff      	cmp	r3, #255	; 0xff
 800073a:	d009      	beq.n	8000750 <__MOTOR_SetShiftRegister+0x12c>
 800073c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000740:	3301      	adds	r3, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f88d 3008 	strb.w	r3, [sp, #8]
 8000748:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800074c:	2bff      	cmp	r3, #255	; 0xff
 800074e:	d1f5      	bne.n	800073c <__MOTOR_SetShiftRegister+0x118>
	__MOTOR_ShiftRegister_Delay();

}
 8000750:	b004      	add	sp, #16
 8000752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for(volatile uint8_t i=0; i<0x3F; i++);
 8000756:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800075a:	3301      	adds	r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f88d 300d 	strb.w	r3, [sp, #13]
 8000762:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8000766:	2b3e      	cmp	r3, #62	; 0x3e
 8000768:	d9f5      	bls.n	8000756 <__MOTOR_SetShiftRegister+0x132>
		HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	4611      	mov	r1, r2
 800076e:	4638      	mov	r0, r7
 8000770:	f002 fdd6 	bl	8003320 <HAL_GPIO_WritePin>
	for(volatile uint8_t i=0; i<0x7F; i++);
 8000774:	f88d 600e 	strb.w	r6, [sp, #14]
 8000778:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800077c:	2b7e      	cmp	r3, #126	; 0x7e
 800077e:	d809      	bhi.n	8000794 <__MOTOR_SetShiftRegister+0x170>
 8000780:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000784:	3301      	adds	r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f88d 300e 	strb.w	r3, [sp, #14]
 800078c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000790:	2b7e      	cmp	r3, #126	; 0x7e
 8000792:	d9f5      	bls.n	8000780 <__MOTOR_SetShiftRegister+0x15c>
	for(volatile uint8_t i=0; i<0x3F; i++);
 8000794:	f88d 600f 	strb.w	r6, [sp, #15]
 8000798:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800079c:	2b3e      	cmp	r3, #62	; 0x3e
 800079e:	d891      	bhi.n	80006c4 <__MOTOR_SetShiftRegister+0xa0>
 80007a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	f88d 300f 	strb.w	r3, [sp, #15]
 80007ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80007b0:	2b3e      	cmp	r3, #62	; 0x3e
 80007b2:	d9f5      	bls.n	80007a0 <__MOTOR_SetShiftRegister+0x17c>
 80007b4:	e786      	b.n	80006c4 <__MOTOR_SetShiftRegister+0xa0>
 80007b6:	bf00      	nop
 80007b8:	2000008d 	.word	0x2000008d
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020400 	.word	0x40020400

080007c4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80007c4:	b530      	push	{r4, r5, lr}
 80007c6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <HCI_TL_SPI_Init+0x70>)

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80007ca:	481b      	ldr	r0, [pc, #108]	; (8000838 <HCI_TL_SPI_Init+0x74>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	2100      	movs	r1, #0
 80007ce:	9101      	str	r1, [sp, #4]
 80007d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d2:	f042 0201 	orr.w	r2, r2, #1
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	9104      	str	r1, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <HCI_TL_SPI_Init+0x78>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80007e6:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80007e8:	2201      	movs	r2, #1
 80007ea:	e9cd 2302 	strd	r2, r3, [sp, #8]

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80007ee:	2400      	movs	r4, #0
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80007f0:	f002 fb7e 	bl	8002ef0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80007f4:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80007f6:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80007f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007fc:	2301      	movs	r3, #1
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <HCI_TL_SPI_Init+0x74>)
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000800:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000804:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000808:	f002 fb72 	bl	8002ef0 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800080c:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800080e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000810:	2202      	movs	r2, #2
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <HCI_TL_SPI_Init+0x74>)
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000814:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000818:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800081c:	f002 fb68 	bl	8002ef0 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2102      	movs	r1, #2
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <HCI_TL_SPI_Init+0x74>)
 8000826:	f002 fd7b 	bl	8003320 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 800082a:	f000 ff63 	bl	80016f4 <BSP_SPI1_Init>
}
 800082e:	b009      	add	sp, #36	; 0x24
 8000830:	bd30      	pop	{r4, r5, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000
 800083c:	10110000 	.word	0x10110000

08000840 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000840:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <HCI_TL_SPI_DeInit+0x20>)
 8000844:	2101      	movs	r1, #1
 8000846:	f002 fca3 	bl	8003190 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <HCI_TL_SPI_DeInit+0x20>)
 800084c:	2102      	movs	r1, #2
 800084e:	f002 fc9f 	bl	8003190 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <HCI_TL_SPI_DeInit+0x20>)
 8000854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000858:	f002 fc9a 	bl	8003190 <HAL_GPIO_DeInit>
  return 0;
}
 800085c:	2000      	movs	r0, #0
 800085e:	bd08      	pop	{r3, pc}
 8000860:	40020000 	.word	0x40020000

08000864 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000864:	b510      	push	{r4, lr}
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000866:	4c0d      	ldr	r4, [pc, #52]	; (800089c <HCI_TL_SPI_Reset+0x38>)
 8000868:	2201      	movs	r2, #1
 800086a:	4620      	mov	r0, r4
 800086c:	2102      	movs	r1, #2
 800086e:	f002 fd57 	bl	8003320 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000872:	4620      	mov	r0, r4
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	f002 fd51 	bl	8003320 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800087e:	2005      	movs	r0, #5
 8000880:	f001 fda0 	bl	80023c4 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000884:	4620      	mov	r0, r4
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088c:	f002 fd48 	bl	8003320 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000890:	2005      	movs	r0, #5
 8000892:	f001 fd97 	bl	80023c4 <HAL_Delay>
  return 0;
}
 8000896:	2000      	movs	r0, #0
 8000898:	bd10      	pop	{r4, pc}
 800089a:	bf00      	nop
 800089c:	40020000 	.word	0x40020000

080008a0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_00 = 0x00;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <HCI_TL_SPI_Receive+0x80>)
{
 80008a4:	4606      	mov	r6, r0
 80008a6:	460f      	mov	r7, r1
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80008a8:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 80008ac:	b087      	sub	sp, #28
  uint8_t char_00 = 0x00;
 80008ae:	2400      	movs	r4, #0
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80008b0:	9002      	str	r0, [sp, #8]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80008b2:	2006      	movs	r0, #6
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80008b4:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t char_00 = 0x00;
 80008b8:	f88d 4006 	strb.w	r4, [sp, #6]
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80008bc:	f002 f856 	bl	800296c <HAL_NVIC_DisableIRQ>
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80008c0:	4818      	ldr	r0, [pc, #96]	; (8000924 <HCI_TL_SPI_Receive+0x84>)
 80008c2:	4622      	mov	r2, r4
 80008c4:	2102      	movs	r1, #2
 80008c6:	f002 fd2b 	bl	8003320 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80008ca:	2205      	movs	r2, #5
 80008cc:	a904      	add	r1, sp, #16
 80008ce:	a802      	add	r0, sp, #8
 80008d0:	f000 feda 	bl	8001688 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80008d4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80008d8:	f89d 3013 	ldrb.w	r3, [sp, #19]

  if(byte_count > 0)
 80008dc:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 80008e0:	d013      	beq.n	800090a <HCI_TL_SPI_Receive+0x6a>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80008e2:	42bd      	cmp	r5, r7
 80008e4:	bf28      	it	cs
 80008e6:	463d      	movcs	r5, r7
    {
      byte_count = size;
    }

    for(len = 0; len < byte_count; len++)
 80008e8:	b17d      	cbz	r5, 800090a <HCI_TL_SPI_Receive+0x6a>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	f10d 0107 	add.w	r1, sp, #7
 80008f0:	f10d 0006 	add.w	r0, sp, #6
 80008f4:	f000 fec8 	bl	8001688 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80008f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80008fc:	5532      	strb	r2, [r6, r4]
    for(len = 0; len < byte_count; len++)
 80008fe:	1c63      	adds	r3, r4, #1
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4295      	cmp	r5, r2
 8000904:	4614      	mov	r4, r2
 8000906:	d8f0      	bhi.n	80008ea <HCI_TL_SPI_Receive+0x4a>
 8000908:	4615      	mov	r5, r2
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2102      	movs	r1, #2
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <HCI_TL_SPI_Receive+0x84>)
 8000910:	f002 fd06 	bl	8003320 <HAL_GPIO_WritePin>
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000914:	2006      	movs	r0, #6
 8000916:	f002 f815 	bl	8002944 <HAL_NVIC_EnableIRQ>

  HCI_TL_SPI_Enable_IRQ();

  return len;
}
 800091a:	4628      	mov	r0, r5
 800091c:	b007      	add	sp, #28
 800091e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000920:	0800a624 	.word	0x0800a624
 8000924:	40020000 	.word	0x40020000

08000928 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800092c:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <HCI_TL_SPI_Send+0xc4>)
    uint32_t tickstart_data_available = HAL_GetTick();

    result = 0;

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800092e:	4e30      	ldr	r6, [pc, #192]	; (80009f0 <HCI_TL_SPI_Send+0xc8>)
{
 8000930:	4681      	mov	r9, r0
 8000932:	460f      	mov	r7, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000934:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8000938:	b085      	sub	sp, #20
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800093a:	9000      	str	r0, [sp, #0]
 800093c:	f88d 1004 	strb.w	r1, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000940:	f001 fd3a 	bl	80023b8 <HAL_GetTick>
 8000944:	4680      	mov	r8, r0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000946:	2006      	movs	r0, #6
 8000948:	f002 f810 	bl	800296c <HAL_NVIC_DisableIRQ>
    uint32_t tickstart_data_available = HAL_GetTick();
 800094c:	f001 fd34 	bl	80023b8 <HAL_GetTick>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
    uint32_t tickstart_data_available = HAL_GetTick();
 8000952:	4605      	mov	r5, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000954:	2102      	movs	r1, #2
 8000956:	4630      	mov	r0, r6
 8000958:	f002 fce2 	bl	8003320 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 800095c:	e004      	b.n	8000968 <HCI_TL_SPI_Send+0x40>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 800095e:	f001 fd2b 	bl	80023b8 <HAL_GetTick>
 8000962:	1b40      	subs	r0, r0, r5
 8000964:	280f      	cmp	r0, #15
 8000966:	d83a      	bhi.n	80009de <HCI_TL_SPI_Send+0xb6>
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000968:	4821      	ldr	r0, [pc, #132]	; (80009f0 <HCI_TL_SPI_Send+0xc8>)
 800096a:	2101      	movs	r1, #1
 800096c:	f002 fcc6 	bl	80032fc <HAL_GPIO_ReadPin>
    while(!IsDataAvailable())
 8000970:	2801      	cmp	r0, #1
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000972:	4604      	mov	r4, r0
    while(!IsDataAvailable())
 8000974:	d1f3      	bne.n	800095e <HCI_TL_SPI_Send+0x36>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8000976:	2205      	movs	r2, #5
 8000978:	a902      	add	r1, sp, #8
 800097a:	4668      	mov	r0, sp
 800097c:	f000 fe84 	bl	8001688 <BSP_SPI1_SendRecv>
    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000980:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8000984:	f89d 3009 	ldrb.w	r3, [sp, #9]
    if(rx_bytes >= size)
 8000988:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800098c:	42bb      	cmp	r3, r7
 800098e:	d213      	bcs.n	80009b8 <HCI_TL_SPI_Send+0x90>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000990:	4622      	mov	r2, r4
 8000992:	2102      	movs	r1, #2
 8000994:	4630      	mov	r0, r6
 8000996:	f002 fcc3 	bl	8003320 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800099a:	f001 fd0d 	bl	80023b8 <HAL_GetTick>
 800099e:	eba0 0008 	sub.w	r0, r0, r8
 80009a2:	280f      	cmp	r0, #15
 80009a4:	d9d2      	bls.n	800094c <HCI_TL_SPI_Send+0x24>
      break;
 80009a6:	f06f 0402 	mvn.w	r4, #2
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80009aa:	2006      	movs	r0, #6
 80009ac:	f001 ffca 	bl	8002944 <HAL_NVIC_EnableIRQ>
}
 80009b0:	4620      	mov	r0, r4
 80009b2:	b005      	add	sp, #20
 80009b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80009b8:	490e      	ldr	r1, [pc, #56]	; (80009f4 <HCI_TL_SPI_Send+0xcc>)
 80009ba:	463a      	mov	r2, r7
 80009bc:	4648      	mov	r0, r9
 80009be:	f000 fe63 	bl	8001688 <BSP_SPI1_SendRecv>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80009c2:	4622      	mov	r2, r4
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <HCI_TL_SPI_Send+0xc8>)
 80009c6:	2102      	movs	r1, #2
 80009c8:	f002 fcaa 	bl	8003320 <HAL_GPIO_WritePin>
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80009cc:	f001 fcf4 	bl	80023b8 <HAL_GetTick>
 80009d0:	eba0 0008 	sub.w	r0, r0, r8
 80009d4:	280f      	cmp	r0, #15
 80009d6:	bf98      	it	ls
 80009d8:	2400      	movls	r4, #0
 80009da:	d9e6      	bls.n	80009aa <HCI_TL_SPI_Send+0x82>
 80009dc:	e7e3      	b.n	80009a6 <HCI_TL_SPI_Send+0x7e>
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <HCI_TL_SPI_Send+0xc8>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	2102      	movs	r1, #2
 80009e4:	f002 fc9c 	bl	8003320 <HAL_GPIO_WritePin>
 80009e8:	e7dd      	b.n	80009a6 <HCI_TL_SPI_Send+0x7e>
 80009ea:	bf00      	nop
 80009ec:	0800a62c 	.word	0x0800a62c
 80009f0:	40020000 	.word	0x40020000
 80009f4:	20000090 	.word	0x20000090

080009f8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80009f8:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80009fa:	4c07      	ldr	r4, [pc, #28]	; (8000a18 <hci_tl_lowlevel_isr+0x20>)
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80009fc:	e002      	b.n	8000a04 <hci_tl_lowlevel_isr+0xc>
  {
    if (hci_notify_asynch_evt(NULL))
 80009fe:	f006 fb23 	bl	8007048 <hci_notify_asynch_evt>
 8000a02:	b940      	cbnz	r0, 8000a16 <hci_tl_lowlevel_isr+0x1e>
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000a04:	2101      	movs	r1, #1
 8000a06:	4620      	mov	r0, r4
 8000a08:	f002 fc78 	bl	80032fc <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
  while(IsDataAvailable())
 8000a0e:	2b01      	cmp	r3, #1
    if (hci_notify_asynch_evt(NULL))
 8000a10:	f04f 0000 	mov.w	r0, #0
  while(IsDataAvailable())
 8000a14:	d0f3      	beq.n	80009fe <hci_tl_lowlevel_isr+0x6>
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8000a16:	bd10      	pop	{r4, pc}
 8000a18:	40020000 	.word	0x40020000

08000a1c <hci_tl_lowlevel_init>:
{
 8000a1c:	b530      	push	{r4, r5, lr}
 8000a1e:	b089      	sub	sp, #36	; 0x24
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000a20:	4c11      	ldr	r4, [pc, #68]	; (8000a68 <hci_tl_lowlevel_init+0x4c>)
  fops.Receive = HCI_TL_SPI_Receive;
 8000a22:	4912      	ldr	r1, [pc, #72]	; (8000a6c <hci_tl_lowlevel_init+0x50>)
  fops.Init    = HCI_TL_SPI_Init;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <hci_tl_lowlevel_init+0x54>)
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <hci_tl_lowlevel_init+0x58>)
  fops.Send    = HCI_TL_SPI_Send;
 8000a28:	4d13      	ldr	r5, [pc, #76]	; (8000a78 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 8000a2a:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <hci_tl_lowlevel_init+0x60>)
  fops.Init    = HCI_TL_SPI_Init;
 8000a2c:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000a2e:	9002      	str	r0, [sp, #8]
  fops.GetTick = BSP_GetTick;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <hci_tl_lowlevel_init+0x64>)
 8000a32:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8000a34:	a801      	add	r0, sp, #4
  fops.Reset   = HCI_TL_SPI_Reset;
 8000a36:	9203      	str	r2, [sp, #12]
  fops.Receive = HCI_TL_SPI_Receive;
 8000a38:	e9cd 1504 	strd	r1, r5, [sp, #16]
  hci_register_io_bus (&fops);
 8000a3c:	f006 f9ea 	bl	8006e14 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000a40:	4620      	mov	r0, r4
 8000a42:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000a46:	f002 fa1b 	bl	8002e80 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <hci_tl_lowlevel_init+0x68>)
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f002 fa10 	bl	8002e74 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2105      	movs	r1, #5
 8000a58:	2006      	movs	r0, #6
 8000a5a:	f001 ff29 	bl	80028b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a5e:	2006      	movs	r0, #6
 8000a60:	f001 ff70 	bl	8002944 <HAL_NVIC_EnableIRQ>
}
 8000a64:	b009      	add	sp, #36	; 0x24
 8000a66:	bd30      	pop	{r4, r5, pc}
 8000a68:	200098a4 	.word	0x200098a4
 8000a6c:	080008a1 	.word	0x080008a1
 8000a70:	080007c5 	.word	0x080007c5
 8000a74:	08000841 	.word	0x08000841
 8000a78:	08000929 	.word	0x08000929
 8000a7c:	08000865 	.word	0x08000865
 8000a80:	080016b5 	.word	0x080016b5
 8000a84:	080009f9 	.word	0x080009f9

08000a88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a8a:	4818      	ldr	r0, [pc, #96]	; (8000aec <MX_ADC1_Init+0x64>)
 8000a8c:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_ADC1_Init+0x68>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8e:	4919      	ldr	r1, [pc, #100]	; (8000af4 <MX_ADC1_Init+0x6c>)
  hadc1.Instance = ADC1;
 8000a90:	6003      	str	r3, [r0, #0]
{
 8000a92:	b084      	sub	sp, #16
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a98:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a9a:	6042      	str	r2, [r0, #4]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000a9c:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa2:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa4:	6083      	str	r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa6:	9300      	str	r3, [sp, #0]
  hadc1.Init.ScanConvMode = DISABLE;
 8000aa8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aaa:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aac:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab2:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ab4:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab8:	9303      	str	r3, [sp, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aba:	61c2      	str	r2, [r0, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000abc:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000abe:	f001 fc93 	bl	80023e8 <HAL_ADC_Init>
 8000ac2:	b960      	cbnz	r0, 8000ade <MX_ADC1_Init+0x56>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	2301      	movs	r3, #1
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ac8:	2400      	movs	r4, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aca:	4808      	ldr	r0, [pc, #32]	; (8000aec <MX_ADC1_Init+0x64>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000acc:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ace:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_2;
 8000ad0:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad4:	f001 fde4 	bl	80026a0 <HAL_ADC_ConfigChannel>
 8000ad8:	b920      	cbnz	r0, 8000ae4 <MX_ADC1_Init+0x5c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ada:	b004      	add	sp, #16
 8000adc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ade:	f001 f87b 	bl	8001bd8 <Error_Handler>
 8000ae2:	e7ef      	b.n	8000ac4 <MX_ADC1_Init+0x3c>
    Error_Handler();
 8000ae4:	f001 f878 	bl	8001bd8 <Error_Handler>
}
 8000ae8:	b004      	add	sp, #16
 8000aea:	bd10      	pop	{r4, pc}
 8000aec:	200098ac 	.word	0x200098ac
 8000af0:	40012000 	.word	0x40012000
 8000af4:	0f000001 	.word	0x0f000001

08000af8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000af8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000afa:	6802      	ldr	r2, [r0, #0]
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <HAL_ADC_MspInit+0x98>)
{
 8000afe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8000b02:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000b08:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000b0c:	9406      	str	r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 8000b0e:	d001      	beq.n	8000b14 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b10:	b008      	add	sp, #32
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b14:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000b18:	9400      	str	r4, [sp, #0]
 8000b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8000b1c:	4e1d      	ldr	r6, [pc, #116]	; (8000b94 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b22:	645a      	str	r2, [r3, #68]	; 0x44
 8000b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b26:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000b2a:	9200      	str	r2, [sp, #0]
 8000b2c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	9401      	str	r4, [sp, #4]
 8000b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b32:	f042 0201 	orr.w	r2, r2, #1
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b42:	2204      	movs	r2, #4
 8000b44:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	a902      	add	r1, sp, #8
 8000b48:	4605      	mov	r5, r0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	4812      	ldr	r0, [pc, #72]	; (8000b98 <HAL_ADC_MspInit+0xa0>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f002 f9cd 	bl	8002ef0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000b56:	4811      	ldr	r0, [pc, #68]	; (8000b9c <HAL_ADC_MspInit+0xa4>)
 8000b58:	6030      	str	r0, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b66:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b68:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b6c:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b70:	e9c6 1204 	strd	r1, r2, [r6, #16]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b74:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b76:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b78:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b7a:	f001 ff11 	bl	80029a0 <HAL_DMA_Init>
 8000b7e:	b918      	cbnz	r0, 8000b88 <HAL_ADC_MspInit+0x90>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b80:	63ae      	str	r6, [r5, #56]	; 0x38
 8000b82:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8000b84:	b008      	add	sp, #32
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000b88:	f001 f826 	bl	8001bd8 <Error_Handler>
 8000b8c:	e7f8      	b.n	8000b80 <HAL_ADC_MspInit+0x88>
 8000b8e:	bf00      	nop
 8000b90:	40012000 	.word	0x40012000
 8000b94:	200098f4 	.word	0x200098f4
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40026410 	.word	0x40026410

08000ba0 <APP_UserEvtRx>:
{
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;

  if(hci_pckt->type == HCI_EVENT_PKT)
 8000ba0:	7803      	ldrb	r3, [r0, #0]
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d000      	beq.n	8000ba8 <APP_UserEvtRx+0x8>
 8000ba6:	4770      	bx	lr
{
 8000ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8000baa:	7843      	ldrb	r3, [r0, #1]
 8000bac:	2b3e      	cmp	r3, #62	; 0x3e
{
 8000bae:	b083      	sub	sp, #12
 8000bb0:	4605      	mov	r5, r0
    if(event_pckt->evt == EVT_LE_META_EVENT)
 8000bb2:	d042      	beq.n	8000c3a <APP_UserEvtRx+0x9a>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
        }
      }
    }
    else if(event_pckt->evt == EVT_VENDOR)
 8000bb4:	2bff      	cmp	r3, #255	; 0xff
 8000bb6:	d02f      	beq.n	8000c18 <APP_UserEvtRx+0x78>
    }
    else
    {
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
      {
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8000bb8:	4c48      	ldr	r4, [pc, #288]	; (8000cdc <APP_UserEvtRx+0x13c>)
 8000bba:	8822      	ldrh	r2, [r4, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d103      	bne.n	8000bc8 <APP_UserEvtRx+0x28>
        {
          hci_events_table[i].process((void *)event_pckt->data);
 8000bc0:	6863      	ldr	r3, [r4, #4]
 8000bc2:	3003      	adds	r0, #3
 8000bc4:	4798      	blx	r3
 8000bc6:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8000bc8:	8922      	ldrh	r2, [r4, #8]
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d103      	bne.n	8000bd6 <APP_UserEvtRx+0x36>
          hci_events_table[i].process((void *)event_pckt->data);
 8000bce:	68e3      	ldr	r3, [r4, #12]
 8000bd0:	1ce8      	adds	r0, r5, #3
 8000bd2:	4798      	blx	r3
 8000bd4:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8000bd6:	8a22      	ldrh	r2, [r4, #16]
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d103      	bne.n	8000be4 <APP_UserEvtRx+0x44>
          hci_events_table[i].process((void *)event_pckt->data);
 8000bdc:	6963      	ldr	r3, [r4, #20]
 8000bde:	1ce8      	adds	r0, r5, #3
 8000be0:	4798      	blx	r3
 8000be2:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8000be4:	8b22      	ldrh	r2, [r4, #24]
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d103      	bne.n	8000bf2 <APP_UserEvtRx+0x52>
          hci_events_table[i].process((void *)event_pckt->data);
 8000bea:	69e3      	ldr	r3, [r4, #28]
 8000bec:	1ce8      	adds	r0, r5, #3
 8000bee:	4798      	blx	r3
 8000bf0:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8000bf2:	8c22      	ldrh	r2, [r4, #32]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d103      	bne.n	8000c00 <APP_UserEvtRx+0x60>
          hci_events_table[i].process((void *)event_pckt->data);
 8000bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bfa:	1ce8      	adds	r0, r5, #3
 8000bfc:	4798      	blx	r3
 8000bfe:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8000c00:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d103      	bne.n	8000c0e <APP_UserEvtRx+0x6e>
          hci_events_table[i].process((void *)event_pckt->data);
 8000c06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c08:	1ce8      	adds	r0, r5, #3
 8000c0a:	4798      	blx	r3
 8000c0c:	786b      	ldrb	r3, [r5, #1]
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8000c0e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d05c      	beq.n	8000cce <APP_UserEvtRx+0x12e>
        }
      }
    }
  }
}
 8000c14:	b003      	add	sp, #12
 8000c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c18:	4c31      	ldr	r4, [pc, #196]	; (8000ce0 <APP_UserEvtRx+0x140>)
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8000c1a:	1d47      	adds	r7, r0, #5
 8000c1c:	f504 76ac 	add.w	r6, r4, #344	; 0x158
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8000c20:	f8b5 2003 	ldrh.w	r2, [r5, #3]
 8000c24:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d102      	bne.n	8000c32 <APP_UserEvtRx+0x92>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	4638      	mov	r0, r7
 8000c30:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8000c32:	3408      	adds	r4, #8
 8000c34:	42b4      	cmp	r4, r6
 8000c36:	d1f3      	bne.n	8000c20 <APP_UserEvtRx+0x80>
 8000c38:	e7ec      	b.n	8000c14 <APP_UserEvtRx+0x74>
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000c3a:	4c2a      	ldr	r4, [pc, #168]	; (8000ce4 <APP_UserEvtRx+0x144>)
 8000c3c:	78c3      	ldrb	r3, [r0, #3]
 8000c3e:	8822      	ldrh	r2, [r4, #0]
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d103      	bne.n	8000c4c <APP_UserEvtRx+0xac>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000c44:	6863      	ldr	r3, [r4, #4]
 8000c46:	3004      	adds	r0, #4
 8000c48:	4798      	blx	r3
 8000c4a:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000c4c:	8922      	ldrh	r2, [r4, #8]
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d103      	bne.n	8000c5a <APP_UserEvtRx+0xba>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000c52:	68e3      	ldr	r3, [r4, #12]
 8000c54:	1d28      	adds	r0, r5, #4
 8000c56:	4798      	blx	r3
 8000c58:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000c5a:	8a22      	ldrh	r2, [r4, #16]
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d103      	bne.n	8000c68 <APP_UserEvtRx+0xc8>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000c60:	6963      	ldr	r3, [r4, #20]
 8000c62:	1d28      	adds	r0, r5, #4
 8000c64:	4798      	blx	r3
 8000c66:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000c68:	8b22      	ldrh	r2, [r4, #24]
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d103      	bne.n	8000c76 <APP_UserEvtRx+0xd6>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000c6e:	69e3      	ldr	r3, [r4, #28]
 8000c70:	1d28      	adds	r0, r5, #4
 8000c72:	4798      	blx	r3
 8000c74:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000c76:	8c22      	ldrh	r2, [r4, #32]
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d103      	bne.n	8000c84 <APP_UserEvtRx+0xe4>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c7e:	1d28      	adds	r0, r5, #4
 8000c80:	4798      	blx	r3
 8000c82:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000c84:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d103      	bne.n	8000c92 <APP_UserEvtRx+0xf2>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000c8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c8c:	1d28      	adds	r0, r5, #4
 8000c8e:	4798      	blx	r3
 8000c90:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000c92:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d103      	bne.n	8000ca0 <APP_UserEvtRx+0x100>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000c98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c9a:	1d28      	adds	r0, r5, #4
 8000c9c:	4798      	blx	r3
 8000c9e:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000ca0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d103      	bne.n	8000cae <APP_UserEvtRx+0x10e>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000ca6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ca8:	1d28      	adds	r0, r5, #4
 8000caa:	4798      	blx	r3
 8000cac:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000cae:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d103      	bne.n	8000cbe <APP_UserEvtRx+0x11e>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000cb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cb8:	1d28      	adds	r0, r5, #4
 8000cba:	4798      	blx	r3
 8000cbc:	78eb      	ldrb	r3, [r5, #3]
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8000cbe:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d1a6      	bne.n	8000c14 <APP_UserEvtRx+0x74>
          hci_le_meta_events_table[i].process((void *)evt->data);
 8000cc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	1d28      	adds	r0, r5, #4
 8000ccc:	e002      	b.n	8000cd4 <APP_UserEvtRx+0x134>
          hci_events_table[i].process((void *)event_pckt->data);
 8000cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	1ce8      	adds	r0, r5, #3
}
 8000cd4:	b003      	add	sp, #12
 8000cd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hci_events_table[i].process((void *)event_pckt->data);
 8000cda:	4718      	bx	r3
 8000cdc:	0800ab94 	.word	0x0800ab94
 8000ce0:	0800ac20 	.word	0x0800ac20
 8000ce4:	0800abcc 	.word	0x0800abcc

08000ce8 <BlueNRG_Init>:
{
 8000ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hci_init(APP_UserEvtRx, NULL);
 8000cec:	2100      	movs	r1, #0
{
 8000cee:	b0b7      	sub	sp, #220	; 0xdc
	hci_init(APP_UserEvtRx, NULL);
 8000cf0:	48d2      	ldr	r0, [pc, #840]	; (800103c <BlueNRG_Init+0x354>)
 8000cf2:	f006 f863 	bl	8006dbc <hci_init>
	hci_reset();
 8000cf6:	f005 fd8b 	bl	8006810 <hci_reset>
	HAL_Delay(2000);
 8000cfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cfe:	f001 fb61 	bl	80023c4 <HAL_Delay>
	ret = aci_hal_set_tx_power_level(1, 4);
 8000d02:	2104      	movs	r1, #4
 8000d04:	2001      	movs	r0, #1
 8000d06:	f006 f837 	bl	8006d78 <aci_hal_set_tx_power_level>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	f040 81ec 	bne.w	80010e8 <BlueNRG_Init+0x400>
	uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000d10:	4bcb      	ldr	r3, [pc, #812]	; (8001040 <BlueNRG_Init+0x358>)
 8000d12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d16:	902e      	str	r0, [sp, #184]	; 0xb8
	ret = hci_le_rand(random_number);
 8000d18:	a832      	add	r0, sp, #200	; 0xc8
	uint8_t bdaddr[] = {0x00, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000d1a:	f8ad 10bc 	strh.w	r1, [sp, #188]	; 0xbc
	ret = hci_le_rand(random_number);
 8000d1e:	f005 fdcb 	bl	80068b8 <hci_le_rand>
		discovery_time += (2*random_number[i]);
 8000d22:	f89d 10c8 	ldrb.w	r1, [sp, #200]	; 0xc8
 8000d26:	f89d 20c9 	ldrb.w	r2, [sp, #201]	; 0xc9
 8000d2a:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
 8000d2e:	f89d 00cb 	ldrb.w	r0, [sp, #203]	; 0xcb
	bdaddr[0] = (uint8_t) (random_number[0]);
 8000d32:	f88d 10b8 	strb.w	r1, [sp, #184]	; 0xb8
		discovery_time += (2*random_number[i]);
 8000d36:	440a      	add	r2, r1
 8000d38:	4413      	add	r3, r2
 8000d3a:	f89d 10cc 	ldrb.w	r1, [sp, #204]	; 0xcc
 8000d3e:	f89d 20cd 	ldrb.w	r2, [sp, #205]	; 0xcd
	bdaddr[1] = (uint8_t) (random_number[3]);
 8000d42:	f88d 00b9 	strb.w	r0, [sp, #185]	; 0xb9
		discovery_time += (2*random_number[i]);
 8000d46:	4403      	add	r3, r0
 8000d48:	4419      	add	r1, r3
 8000d4a:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
 8000d4e:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
	bdaddr[2] = (uint8_t) (random_number[6]);
 8000d52:	f88d 00ba 	strb.w	r0, [sp, #186]	; 0xba
		discovery_time += (2*random_number[i]);
 8000d56:	440a      	add	r2, r1
 8000d58:	4402      	add	r2, r0
 8000d5a:	4413      	add	r3, r2
 8000d5c:	48b9      	ldr	r0, [pc, #740]	; (8001044 <BlueNRG_Init+0x35c>)
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000d64:	ac2e      	add	r4, sp, #184	; 0xb8
 8000d66:	8003      	strh	r3, [r0, #0]
 8000d68:	4622      	mov	r2, r4
 8000d6a:	2106      	movs	r1, #6
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f005 ffd9 	bl	8006d24 <aci_hal_write_config_data>
	ret = aci_gatt_init();
 8000d72:	f005 fe51 	bl	8006a18 <aci_gatt_init>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8000d76:	2800      	cmp	r0, #0
 8000d78:	f040 81bb 	bne.w	80010f2 <BlueNRG_Init+0x40a>
	aci_gap_init(GAP_PERIPHERAL_ROLE, GAP_PRIVACY_DISABLED, 0x17, &hGAPService, &hDevNameChar, &hAppearanceChar);
 8000d7c:	4ab2      	ldr	r2, [pc, #712]	; (8001048 <BlueNRG_Init+0x360>)
 8000d7e:	4bb3      	ldr	r3, [pc, #716]	; (800104c <BlueNRG_Init+0x364>)
	const uint8_t char1_uuid[16] =
 8000d80:	4db3      	ldr	r5, [pc, #716]	; (8001050 <BlueNRG_Init+0x368>)
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8000d82:	4fb4      	ldr	r7, [pc, #720]	; (8001054 <BlueNRG_Init+0x36c>)
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8000d84:	f8df b300 	ldr.w	fp, [pc, #768]	; 8001088 <BlueNRG_Init+0x3a0>
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8000d88:	f8df a300 	ldr.w	sl, [pc, #768]	; 800108c <BlueNRG_Init+0x3a4>
	BLUENRG_memcpy(&char_obj_4.Char_UUID_128, char4_uuid, 16);
 8000d8c:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8001090 <BlueNRG_Init+0x3a8>
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8000d90:	f8df 8300 	ldr.w	r8, [pc, #768]	; 8001094 <BlueNRG_Init+0x3ac>
	aci_gap_init(GAP_PERIPHERAL_ROLE, GAP_PRIVACY_DISABLED, 0x17, &hGAPService, &hDevNameChar, &hAppearanceChar);
 8000d94:	e9cd 3200 	strd	r3, r2, [sp]
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4baf      	ldr	r3, [pc, #700]	; (8001058 <BlueNRG_Init+0x370>)
 8000d9c:	2217      	movs	r2, #23
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f005 fe04 	bl	80069ac <aci_gap_init>
	const uint8_t service_uuid[16] =
 8000da4:	4bad      	ldr	r3, [pc, #692]	; (800105c <BlueNRG_Init+0x374>)
 8000da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000da8:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8000dac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	const uint8_t char1_uuid[16] =
 8000db0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
	const uint8_t char2_uuid[16] =
 8000db4:	f105 0e10 	add.w	lr, r5, #16
	const uint8_t char1_uuid[16] =
 8000db8:	ae1e      	add	r6, sp, #120	; 0x78
 8000dba:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char2_uuid[16] =
 8000dbe:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8000dc2:	ae22      	add	r6, sp, #136	; 0x88
	const uint8_t char3_uuid[16] =
 8000dc4:	f105 0e20 	add.w	lr, r5, #32
	const uint8_t char2_uuid[16] =
 8000dc8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char3_uuid[16] =
 8000dcc:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8000dd0:	ae26      	add	r6, sp, #152	; 0x98
	const uint8_t char4_uuid[16] =
 8000dd2:	f105 0e30 	add.w	lr, r5, #48	; 0x30
	const uint8_t char3_uuid[16] =
 8000dd6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	const uint8_t char4_uuid[16] =
 8000dda:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
	const uint8_t char5_uuid[16] =
 8000dde:	f105 0e40 	add.w	lr, r5, #64	; 0x40
	const uint8_t char4_uuid[16] =
 8000de2:	ad2a      	add	r5, sp, #168	; 0xa8
 8000de4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	const uint8_t char5_uuid[16] =
 8000de8:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8000dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(&suuid_object.Service_UUID_128, service_uuid, 16);
 8000df0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000df4:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 8001098 <BlueNRG_Init+0x3b0>
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8000df8:	9700      	str	r7, [sp, #0]
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8000dfa:	ae1e      	add	r6, sp, #120	; 0x78
	BLUENRG_memcpy(&suuid_object.Service_UUID_128, service_uuid, 16);
 8000dfc:	f8cc 0000 	str.w	r0, [ip]
 8000e00:	f8cc 1004 	str.w	r1, [ip, #4]
 8000e04:	f8cc 2008 	str.w	r2, [ip, #8]
 8000e08:	f8cc 300c 	str.w	r3, [ip, #12]
	aci_gatt_add_service(UUID_TYPE_128, &suuid_object, PRIMARY_SERVICE, 20, &hService);
 8000e0c:	4661      	mov	r1, ip
 8000e0e:	2314      	movs	r3, #20
 8000e10:	2201      	movs	r2, #1
 8000e12:	2002      	movs	r0, #2
 8000e14:	f005 fe1c 	bl	8006a50 <aci_gatt_add_service>
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8000e18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e1a:	f8df c280 	ldr.w	ip, [pc, #640]	; 800109c <BlueNRG_Init+0x3b4>
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8000e1e:	ae22      	add	r6, sp, #136	; 0x88
	BLUENRG_memcpy(&char_obj_1.Char_UUID_128, char1_uuid, 16);
 8000e20:	f8cc 0000 	str.w	r0, [ip]
 8000e24:	f8cc 1004 	str.w	r1, [ip, #4]
 8000e28:	f8cc 2008 	str.w	r2, [ip, #8]
 8000e2c:	f8cc 300c 	str.w	r3, [ip, #12]
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8000e30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8000e32:	ae26      	add	r6, sp, #152	; 0x98
	BLUENRG_memcpy(&char_obj_2.Char_UUID_128, char2_uuid, 16);
 8000e34:	f8cb 0000 	str.w	r0, [fp]
 8000e38:	f8cb 1004 	str.w	r1, [fp, #4]
 8000e3c:	f8cb 2008 	str.w	r2, [fp, #8]
 8000e40:	f8cb 300c 	str.w	r3, [fp, #12]
	BLUENRG_memcpy(&char_obj_3.Char_UUID_128, char3_uuid, 16);
 8000e44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e46:	f8ca 0000 	str.w	r0, [sl]
 8000e4a:	f8ca 1004 	str.w	r1, [sl, #4]
 8000e4e:	f8ca 2008 	str.w	r2, [sl, #8]
 8000e52:	f8ca 300c 	str.w	r3, [sl, #12]
	BLUENRG_memcpy(&char_obj_4.Char_UUID_128, char4_uuid, 16);
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	f8c9 0000 	str.w	r0, [r9]
 8000e5c:	f8c9 1004 	str.w	r1, [r9, #4]
 8000e60:	f8c9 2008 	str.w	r2, [r9, #8]
 8000e64:	f8c9 300c 	str.w	r3, [r9, #12]
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8000e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e6a:	f8c8 300c 	str.w	r3, [r8, #12]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8000e6e:	4b7c      	ldr	r3, [pc, #496]	; (8001060 <BlueNRG_Init+0x378>)
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8000e70:	f8c8 0000 	str.w	r0, [r8]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8000e74:	2400      	movs	r4, #0
 8000e76:	2607      	movs	r6, #7
 8000e78:	2510      	movs	r5, #16
	BLUENRG_memcpy(&char_obj_5.Char_UUID_128, char5_uuid, 16);
 8000e7a:	f8c8 1004 	str.w	r1, [r8, #4]
 8000e7e:	f8c8 2008 	str.w	r2, [r8, #8]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_1, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8000e82:	2102      	movs	r1, #2
 8000e84:	4662      	mov	r2, ip
 8000e86:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8000e8a:	9500      	str	r5, [sp, #0]
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000e92:	8838      	ldrh	r0, [r7, #0]
 8000e94:	9603      	str	r6, [sp, #12]
 8000e96:	f005 fe29 	bl	8006aec <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_2, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8000e9a:	9500      	str	r5, [sp, #0]
 8000e9c:	4d71      	ldr	r5, [pc, #452]	; (8001064 <BlueNRG_Init+0x37c>)
 8000e9e:	9505      	str	r5, [sp, #20]
 8000ea0:	465a      	mov	r2, fp
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8000eaa:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000eae:	8838      	ldrh	r0, [r7, #0]
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_3, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_READ,
 8000eb0:	468b      	mov	fp, r1
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_2, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_NOTIFY,
 8000eb2:	f005 fe1b 	bl	8006aec <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_3, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_READ,
 8000eb6:	4b6c      	ldr	r3, [pc, #432]	; (8001068 <BlueNRG_Init+0x380>)
 8000eb8:	9305      	str	r3, [sp, #20]
 8000eba:	4652      	mov	r2, sl
 8000ebc:	4659      	mov	r1, fp
 8000ebe:	f8cd b000 	str.w	fp, [sp]
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8000ec8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000ecc:	8838      	ldrh	r0, [r7, #0]
 8000ece:	f005 fe0d 	bl	8006aec <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_4, MAX_DATA_EXCHANGE_BYTES, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP,
 8000ed2:	2501      	movs	r5, #1
 8000ed4:	f04f 0c0c 	mov.w	ip, #12
 8000ed8:	4b64      	ldr	r3, [pc, #400]	; (800106c <BlueNRG_Init+0x384>)
 8000eda:	f8cd c000 	str.w	ip, [sp]
 8000ede:	464a      	mov	r2, r9
 8000ee0:	4659      	mov	r1, fp
 8000ee2:	9305      	str	r3, [sp, #20]
 8000ee4:	8838      	ldrh	r0, [r7, #0]
 8000ee6:	9404      	str	r4, [sp, #16]
 8000ee8:	2304      	movs	r3, #4
 8000eea:	9603      	str	r6, [sp, #12]
 8000eec:	9401      	str	r4, [sp, #4]
 8000eee:	9502      	str	r5, [sp, #8]
 8000ef0:	f005 fdfc 	bl	8006aec <aci_gatt_add_char>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_5, BLE_DATA_BYTES(6), CHAR_PROP_READ,
 8000ef4:	4b5e      	ldr	r3, [pc, #376]	; (8001070 <BlueNRG_Init+0x388>)
 8000ef6:	f8cd b000 	str.w	fp, [sp]
 8000efa:	4642      	mov	r2, r8
 8000efc:	4659      	mov	r1, fp
 8000efe:	9305      	str	r3, [sp, #20]
 8000f00:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8000f04:	2306      	movs	r3, #6
 8000f06:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000f0a:	8838      	ldrh	r0, [r7, #0]
	const char char2name[] = {'W','R','N','_','C','R','A','S','H'};
 8000f0c:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80010a0 <BlueNRG_Init+0x3b8>
	aci_gatt_add_char(hService, UUID_TYPE_128, &char_obj_5, BLE_DATA_BYTES(6), CHAR_PROP_READ,
 8000f10:	f005 fdec 	bl	8006aec <aci_gatt_add_char>
	const char char1name[] = {'W','R','N','_','S','P','E','E','D'};
 8000f14:	4b57      	ldr	r3, [pc, #348]	; (8001074 <BlueNRG_Init+0x38c>)
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8000f16:	f8df e18c 	ldr.w	lr, [pc, #396]	; 80010a4 <BlueNRG_Init+0x3bc>
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8000f1a:	f8df c18c 	ldr.w	ip, [pc, #396]	; 80010a8 <BlueNRG_Init+0x3c0>
	const char char1name[] = {'W','R','N','_','S','P','E','E','D'};
 8000f1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f22:	ab0b      	add	r3, sp, #44	; 0x2c
 8000f24:	c303      	stmia	r3!, {r0, r1}
 8000f26:	701a      	strb	r2, [r3, #0]
	const char char2name[] = {'W','R','N','_','C','R','A','S','H'};
 8000f28:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8000f2c:	ab0e      	add	r3, sp, #56	; 0x38
 8000f2e:	c303      	stmia	r3!, {r0, r1}
 8000f30:	701a      	strb	r2, [r3, #0]
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8000f32:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8000f36:	ab11      	add	r3, sp, #68	; 0x44
 8000f38:	c303      	stmia	r3!, {r0, r1}
 8000f3a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000f3e:	f823 2b02 	strh.w	r2, [r3], #2
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8000f42:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8000f46:	f8df c164 	ldr.w	ip, [pc, #356]	; 80010ac <BlueNRG_Init+0x3c4>
	aci_gatt_add_char_desc(hService, hClientNotify_OverSpeed, UUID_TYPE_16, &DescriptorProperty,
 8000f4a:	f8df e164 	ldr.w	lr, [pc, #356]	; 80010b0 <BlueNRG_Init+0x3c8>
	const char char3name[] = {'R','D','_','V','E','L','O','C','I','T','Y'};
 8000f4e:	f883 8000 	strb.w	r8, [r3]
	const char char4name[] = {'W','R','_','D','I','R','E','C','T','I','O','N'};
 8000f52:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8000f56:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8000f5a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8000f5e:	f10d 095c 	add.w	r9, sp, #92	; 0x5c
	DescriptorProperty.Char_UUID_16 = CHAR_USER_DESC_UUID;
 8000f62:	f642 1c01 	movw	ip, #10497	; 0x2901
	const char char5name[] = {'R','D','_','D','I','R','E','C','T','I','O','N'};
 8000f66:	e889 0007 	stmia.w	r9, {r0, r1, r2}
	DescriptorProperty.Char_UUID_16 = CHAR_USER_DESC_UUID;
 8000f6a:	f8ad c0c8 	strh.w	ip, [sp, #200]	; 0xc8
	aci_gatt_add_char_desc(hService, hClientNotify_OverSpeed, UUID_TYPE_16, &DescriptorProperty,
 8000f6e:	e9cd 4e07 	strd	r4, lr, [sp, #28]
 8000f72:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8000f76:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8000f7a:	4939      	ldr	r1, [pc, #228]	; (8001060 <BlueNRG_Init+0x378>)
 8000f7c:	8838      	ldrh	r0, [r7, #0]
 8000f7e:	8809      	ldrh	r1, [r1, #0]
 8000f80:	f04f 081e 	mov.w	r8, #30
 8000f84:	f04f 0b09 	mov.w	fp, #9
 8000f88:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8000f8c:	ab0b      	add	r3, sp, #44	; 0x2c
 8000f8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8000f92:	462a      	mov	r2, r5
 8000f94:	4663      	mov	r3, ip
 8000f96:	f8cd 8000 	str.w	r8, [sp]
 8000f9a:	f005 fe0d 	bl	8006bb8 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientNotify_Crash, UUID_TYPE_16, &DescriptorProperty,
 8000f9e:	e9cd 8b00 	strd	r8, fp, [sp]
 8000fa2:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8000fa6:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8000faa:	492e      	ldr	r1, [pc, #184]	; (8001064 <BlueNRG_Init+0x37c>)
 8000fac:	4a32      	ldr	r2, [pc, #200]	; (8001078 <BlueNRG_Init+0x390>)
 8000fae:	9407      	str	r4, [sp, #28]
 8000fb0:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8000fb4:	ab0e      	add	r3, sp, #56	; 0x38
 8000fb6:	8809      	ldrh	r1, [r1, #0]
 8000fb8:	8838      	ldrh	r0, [r7, #0]
 8000fba:	9208      	str	r2, [sp, #32]
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	4663      	mov	r3, ip
 8000fc2:	f005 fdf9 	bl	8006bb8 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientRead_Velocity, UUID_TYPE_16, &DescriptorProperty,
 8000fc6:	e9cd 4605 	strd	r4, r6, [sp, #20]
 8000fca:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8000fce:	4926      	ldr	r1, [pc, #152]	; (8001068 <BlueNRG_Init+0x380>)
 8000fd0:	4a2a      	ldr	r2, [pc, #168]	; (800107c <BlueNRG_Init+0x394>)
 8000fd2:	9407      	str	r4, [sp, #28]
 8000fd4:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 8000fd8:	f04f 0b0b 	mov.w	fp, #11
 8000fdc:	ab11      	add	r3, sp, #68	; 0x44
 8000fde:	f8cd 8000 	str.w	r8, [sp]
 8000fe2:	8809      	ldrh	r1, [r1, #0]
 8000fe4:	8838      	ldrh	r0, [r7, #0]
 8000fe6:	9208      	str	r2, [sp, #32]
 8000fe8:	e9cd b301 	strd	fp, r3, [sp, #4]
 8000fec:	462a      	mov	r2, r5
 8000fee:	4663      	mov	r3, ip
 8000ff0:	f005 fde2 	bl	8006bb8 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientWrite_Direction, UUID_TYPE_16, &DescriptorProperty,
 8000ff4:	e9cd 6406 	strd	r6, r4, [sp, #24]
 8000ff8:	491c      	ldr	r1, [pc, #112]	; (800106c <BlueNRG_Init+0x384>)
 8000ffa:	4a21      	ldr	r2, [pc, #132]	; (8001080 <BlueNRG_Init+0x398>)
 8000ffc:	f8cd a008 	str.w	sl, [sp, #8]
 8001000:	f04f 0c03 	mov.w	ip, #3
 8001004:	230a      	movs	r3, #10
 8001006:	9405      	str	r4, [sp, #20]
 8001008:	9403      	str	r4, [sp, #12]
 800100a:	f8cd 8000 	str.w	r8, [sp]
 800100e:	8809      	ldrh	r1, [r1, #0]
 8001010:	8838      	ldrh	r0, [r7, #0]
 8001012:	9208      	str	r2, [sp, #32]
 8001014:	f8cd c010 	str.w	ip, [sp, #16]
 8001018:	462a      	mov	r2, r5
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	ab32      	add	r3, sp, #200	; 0xc8
 800101e:	f005 fdcb 	bl	8006bb8 <aci_gatt_add_char_desc>
	aci_gatt_add_char_desc(hService, hClientRead_VerifyDirection, UUID_TYPE_16, &DescriptorProperty,
 8001022:	e9cd 6406 	strd	r6, r4, [sp, #24]
 8001026:	e9cd 5404 	strd	r5, r4, [sp, #16]
 800102a:	e9cd 9402 	strd	r9, r4, [sp, #8]
 800102e:	e9cd 8b00 	strd	r8, fp, [sp]
 8001032:	490f      	ldr	r1, [pc, #60]	; (8001070 <BlueNRG_Init+0x388>)
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <BlueNRG_Init+0x39c>)
 8001036:	8809      	ldrh	r1, [r1, #0]
 8001038:	e03c      	b.n	80010b4 <BlueNRG_Init+0x3cc>
 800103a:	bf00      	nop
 800103c:	08000ba1 	.word	0x08000ba1
 8001040:	0800a634 	.word	0x0800a634
 8001044:	20000192 	.word	0x20000192
 8001048:	20000194 	.word	0x20000194
 800104c:	200001a0 	.word	0x200001a0
 8001050:	0800a63c 	.word	0x0800a63c
 8001054:	200001ac 	.word	0x200001ac
 8001058:	200001a8 	.word	0x200001a8
 800105c:	0800a6a8 	.word	0x0800a6a8
 8001060:	20000198 	.word	0x20000198
 8001064:	20000196 	.word	0x20000196
 8001068:	2000019a 	.word	0x2000019a
 800106c:	2000019e 	.word	0x2000019e
 8001070:	2000019c 	.word	0x2000019c
 8001074:	0800a6bc 	.word	0x0800a6bc
 8001078:	200001aa 	.word	0x200001aa
 800107c:	200001ae 	.word	0x200001ae
 8001080:	200001a6 	.word	0x200001a6
 8001084:	200001a2 	.word	0x200001a2
 8001088:	200099b8 	.word	0x200099b8
 800108c:	20009988 	.word	0x20009988
 8001090:	20009954 	.word	0x20009954
 8001094:	200099a8 	.word	0x200099a8
 8001098:	20009998 	.word	0x20009998
 800109c:	20009978 	.word	0x20009978
 80010a0:	0800a6c8 	.word	0x0800a6c8
 80010a4:	0800a6d4 	.word	0x0800a6d4
 80010a8:	0800a6e0 	.word	0x0800a6e0
 80010ac:	0800a6f0 	.word	0x0800a6f0
 80010b0:	200001a4 	.word	0x200001a4
 80010b4:	8838      	ldrh	r0, [r7, #0]
 80010b6:	9308      	str	r3, [sp, #32]
 80010b8:	462a      	mov	r2, r5
 80010ba:	ab32      	add	r3, sp, #200	; 0xc8
 80010bc:	f005 fd7c 	bl	8006bb8 <aci_gatt_add_char_desc>
	if(FunctionAlreadyCalled == SET)
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <BlueNRG_Init+0x440>)
	Conn_Details.deviceRole = 0xFF;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <BlueNRG_Init+0x444>)
	if(FunctionAlreadyCalled == SET)
 80010c4:	7812      	ldrb	r2, [r2, #0]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 80010c6:	741c      	strb	r4, [r3, #16]
	Conn_Details.connectionhandle = 0xFFFF;
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
	Conn_Details.deviceRole = 0xFF;
 80010cc:	20ff      	movs	r0, #255	; 0xff
	if(FunctionAlreadyCalled == SET)
 80010ce:	42aa      	cmp	r2, r5
	BLUENRG_memset(&Conn_Details.BLE_Client_Addr[0], 0, 6);
 80010d0:	601c      	str	r4, [r3, #0]
 80010d2:	809c      	strh	r4, [r3, #4]
	Conn_Details.deviceRole = 0xFF;
 80010d4:	7198      	strb	r0, [r3, #6]
	Conn_Details.connectionhandle = 0xFFFF;
 80010d6:	6099      	str	r1, [r3, #8]
 80010d8:	60d9      	str	r1, [r3, #12]
	if(FunctionAlreadyCalled == SET)
 80010da:	d00f      	beq.n	80010fc <BlueNRG_Init+0x414>
	FunctionAlreadyCalled = SET;
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <BlueNRG_Init+0x440>)
 80010de:	2301      	movs	r3, #1
 80010e0:	7013      	strb	r3, [r2, #0]
}
 80010e2:	b037      	add	sp, #220	; 0xdc
 80010e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	assert_param(ret == BLE_STATUS_SUCCESS);
 80010e8:	4811      	ldr	r0, [pc, #68]	; (8001130 <BlueNRG_Init+0x448>)
 80010ea:	216f      	movs	r1, #111	; 0x6f
 80010ec:	f000 fd76 	bl	8001bdc <assert_failed>
 80010f0:	e60e      	b.n	8000d10 <BlueNRG_Init+0x28>
	assert_param(ret == BLE_STATUS_SUCCESS);
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <BlueNRG_Init+0x448>)
 80010f4:	2176      	movs	r1, #118	; 0x76
 80010f6:	f000 fd71 	bl	8001bdc <assert_failed>
 80010fa:	e63f      	b.n	8000d7c <BlueNRG_Init+0x94>
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 80010fc:	490d      	ldr	r1, [pc, #52]	; (8001134 <BlueNRG_Init+0x44c>)
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80010fe:	9432      	str	r4, [sp, #200]	; 0xc8
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001100:	ab32      	add	r3, sp, #200	; 0xc8
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	6808      	ldr	r0, [r1, #0]
 8001106:	4623      	mov	r3, r4
 8001108:	4611      	mov	r1, r2
 800110a:	f007 fcff 	bl	8008b0c <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800110e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0e3      	beq.n	80010dc <BlueNRG_Init+0x3f4>
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <BlueNRG_Init+0x450>)
 8001116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	f3bf 8f4f 	dsb	sy
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	e7da      	b.n	80010dc <BlueNRG_Init+0x3f4>
 8001126:	bf00      	nop
 8001128:	2000018f 	.word	0x2000018f
 800112c:	20009964 	.word	0x20009964
 8001130:	0800a68c 	.word	0x0800a68c
 8001134:	200099e0 	.word	0x200099e0
 8001138:	e000ed04 	.word	0xe000ed04

0800113c <BlueNRG_MakeDeviceDiscoverable>:
{
 800113c:	b570      	push	{r4, r5, r6, lr}
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <BlueNRG_MakeDeviceDiscoverable+0x6c>)
	uint8_t uuidscanresponse[18] =
 8001140:	4d1a      	ldr	r5, [pc, #104]	; (80011ac <BlueNRG_MakeDeviceDiscoverable+0x70>)
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 8001142:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
{
 8001146:	b090      	sub	sp, #64	; 0x40
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'F','R','T','S','B','L','E','-','C','a','r'};
 8001148:	ae08      	add	r6, sp, #32
 800114a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	hci_le_set_scan_response_data(0, NULL);
 800114e:	2100      	movs	r1, #0
 8001150:	4608      	mov	r0, r1
 8001152:	f005 fb77 	bl	8006844 <hci_le_set_scan_response_data>
	uint8_t uuidscanresponse[18] =
 8001156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001158:	ac0b      	add	r4, sp, #44	; 0x2c
 800115a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	8023      	strh	r3, [r4, #0]
	hci_le_set_scan_response_data(18, uuidscanresponse);
 8001160:	a90b      	add	r1, sp, #44	; 0x2c
 8001162:	2012      	movs	r0, #18
 8001164:	f005 fb6e 	bl	8006844 <hci_le_set_scan_response_data>
	ret = aci_gap_set_discoverable(ADV_IND, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8001168:	2300      	movs	r3, #0
 800116a:	220c      	movs	r2, #12
 800116c:	9201      	str	r2, [sp, #4]
 800116e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001172:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001176:	9602      	str	r6, [sp, #8]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001180:	21a0      	movs	r1, #160	; 0xa0
 8001182:	f005 fbbf 	bl	8006904 <aci_gap_set_discoverable>
	assert_param(ret == BLE_STATUS_SUCCESS);
 8001186:	b920      	cbnz	r0, 8001192 <BlueNRG_MakeDeviceDiscoverable+0x56>
	Conn_Details.ConnectionStatus = STATE_AWAITING_CONNECTION;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <BlueNRG_MakeDeviceDiscoverable+0x74>)
 800118a:	2211      	movs	r2, #17
 800118c:	741a      	strb	r2, [r3, #16]
}
 800118e:	b010      	add	sp, #64	; 0x40
 8001190:	bd70      	pop	{r4, r5, r6, pc}
	assert_param(ret == BLE_STATUS_SUCCESS);
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <BlueNRG_MakeDeviceDiscoverable+0x78>)
 8001194:	f240 11dd 	movw	r1, #477	; 0x1dd
 8001198:	f000 fd20 	bl	8001bdc <assert_failed>
	Conn_Details.ConnectionStatus = STATE_AWAITING_CONNECTION;
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <BlueNRG_MakeDeviceDiscoverable+0x74>)
 800119e:	2211      	movs	r2, #17
 80011a0:	741a      	strb	r2, [r3, #16]
}
 80011a2:	b010      	add	sp, #64	; 0x40
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
 80011a6:	bf00      	nop
 80011a8:	0800a700 	.word	0x0800a700
 80011ac:	0800a710 	.word	0x0800a710
 80011b0:	20009964 	.word	0x20009964
 80011b4:	0800a68c 	.word	0x0800a68c

080011b8 <hci_le_connection_complete_event>:
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)

{
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	b084      	sub	sp, #16
	static FlagStatus FunctionAlreadyCalled = RESET;

	/* This callback function/event only saves connection handle */
	Conn_Details.connectionhandle = Connection_Handle;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <hci_le_connection_complete_event+0x6c>)
{
 80011be:	9808      	ldr	r0, [sp, #32]
	Conn_Details.connectionhandle = Connection_Handle;
 80011c0:	8119      	strh	r1, [r3, #8]

	/* Role should be slave: 0x01 (if 0x00, it is master and incorrect in this example project) */
	Conn_Details.deviceRole = Role;
 80011c2:	719a      	strb	r2, [r3, #6]
	Conn_Details.BLE_SupervisionTimeout = Supervision_Timeout;

	/* Update connection status to connected */
	Conn_Details.ConnectionStatus = STATE_CONNECTED;

	if(FunctionAlreadyCalled == SET)
 80011c4:	4c18      	ldr	r4, [pc, #96]	; (8001228 <hci_le_connection_complete_event+0x70>)
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 80011c6:	6802      	ldr	r2, [r0, #0]
 80011c8:	601a      	str	r2, [r3, #0]
	if(FunctionAlreadyCalled == SET)
 80011ca:	7822      	ldrb	r2, [r4, #0]
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 80011cc:	8881      	ldrh	r1, [r0, #4]
{
 80011ce:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80011d2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80011d6:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
	BLUENRG_memcpy(&Conn_Details.BLE_Client_Addr, Peer_Address, 6);
 80011da:	8099      	strh	r1, [r3, #4]
	if(FunctionAlreadyCalled == SET)
 80011dc:	2a01      	cmp	r2, #1
	Conn_Details.ConnectionStatus = STATE_CONNECTED;
 80011de:	f04f 0199 	mov.w	r1, #153	; 0x99
	Conn_Details.BLE_ConnInterval = Conn_Interval;
 80011e2:	815e      	strh	r6, [r3, #10]
	Conn_Details.BLE_ConnLatency = Conn_Latency;
 80011e4:	819d      	strh	r5, [r3, #12]
	Conn_Details.BLE_SupervisionTimeout = Supervision_Timeout;
 80011e6:	81d8      	strh	r0, [r3, #14]
	Conn_Details.ConnectionStatus = STATE_CONNECTED;
 80011e8:	7419      	strb	r1, [r3, #16]
	if(FunctionAlreadyCalled == SET)
 80011ea:	d003      	beq.n	80011f4 <hci_le_connection_complete_event+0x3c>
		   is pdFALSE */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
	}

	/* Indication that function is called already, and can send notifications to FreeRTOS tasks next time it is executed */
	FunctionAlreadyCalled = SET;
 80011ec:	2301      	movs	r3, #1
 80011ee:	7023      	strb	r3, [r4, #0]
} /* end hci_le_connection_complete_event() */
 80011f0:	b004      	add	sp, #16
 80011f2:	bd70      	pop	{r4, r5, r6, pc}
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <hci_le_connection_complete_event+0x74>)
 80011f6:	a903      	add	r1, sp, #12
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80011f8:	2300      	movs	r3, #0
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 80011fa:	6800      	ldr	r0, [r0, #0]
 80011fc:	9100      	str	r1, [sp, #0]
 80011fe:	2102      	movs	r1, #2
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001200:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_CONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001202:	f007 fc83 	bl	8008b0c <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001206:	9b03      	ldr	r3, [sp, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0ef      	beq.n	80011ec <hci_le_connection_complete_event+0x34>
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <hci_le_connection_complete_event+0x78>)
 800120e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	f3bf 8f4f 	dsb	sy
 8001218:	f3bf 8f6f 	isb	sy
	FunctionAlreadyCalled = SET;
 800121c:	2301      	movs	r3, #1
 800121e:	7023      	strb	r3, [r4, #0]
} /* end hci_le_connection_complete_event() */
 8001220:	b004      	add	sp, #16
 8001222:	bd70      	pop	{r4, r5, r6, pc}
 8001224:	20009964 	.word	0x20009964
 8001228:	20000190 	.word	0x20000190
 800122c:	200099e0 	.word	0x200099e0
 8001230:	e000ed04 	.word	0xe000ed04

08001234 <hci_disconnection_complete_event>:
 * Return         : See file bluenrg1_events.h
 *******************************************************************************/
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8001234:	b530      	push	{r4, r5, lr}
	if(FunctionAlreadyCalled == SET)
 8001236:	4c15      	ldr	r4, [pc, #84]	; (800128c <hci_disconnection_complete_event+0x58>)
	Conn_Details.deviceRole = 0xFF;
 8001238:	4915      	ldr	r1, [pc, #84]	; (8001290 <hci_disconnection_complete_event+0x5c>)
	if(FunctionAlreadyCalled == SET)
 800123a:	7822      	ldrb	r2, [r4, #0]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 800123c:	2300      	movs	r3, #0
	Conn_Details.connectionhandle = 0xFFFF;
 800123e:	f04f 30ff 	mov.w	r0, #4294967295
	Conn_Details.deviceRole = 0xFF;
 8001242:	25ff      	movs	r5, #255	; 0xff
	if(FunctionAlreadyCalled == SET)
 8001244:	2a01      	cmp	r2, #1
{
 8001246:	b085      	sub	sp, #20
	Conn_Details.deviceRole = 0xFF;
 8001248:	718d      	strb	r5, [r1, #6]
	Conn_Details.connectionhandle = 0xFFFF;
 800124a:	6088      	str	r0, [r1, #8]
 800124c:	60c8      	str	r0, [r1, #12]
	Conn_Details.ConnectionStatus = STATE_NOT_CONNECTED;
 800124e:	740b      	strb	r3, [r1, #16]
	BLUENRG_memset(&Conn_Details.BLE_Client_Addr[0], 0, 6);
 8001250:	600b      	str	r3, [r1, #0]
 8001252:	808b      	strh	r3, [r1, #4]
	if(FunctionAlreadyCalled == SET)
 8001254:	d003      	beq.n	800125e <hci_disconnection_complete_event+0x2a>
	FunctionAlreadyCalled = SET;
 8001256:	2301      	movs	r3, #1
 8001258:	7023      	strb	r3, [r4, #0]
	/* Resets all connectivity status details */
	Server_ResetConnectionStatus();

} /* end hci_disconnection_complete_event() */
 800125a:	b005      	add	sp, #20
 800125c:	bd30      	pop	{r4, r5, pc}
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <hci_disconnection_complete_event+0x60>)
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001260:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskBLEConn, FRTOS_TASK_NOTIF_BLE_DISCONNECTED, eSetBits, &xHigherPriorityTaskWoken);
 8001262:	a903      	add	r1, sp, #12
 8001264:	6800      	ldr	r0, [r0, #0]
 8001266:	9100      	str	r1, [sp, #0]
 8001268:	4611      	mov	r1, r2
 800126a:	f007 fc4f 	bl	8008b0c <xTaskGenericNotifyFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800126e:	9b03      	ldr	r3, [sp, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <hci_disconnection_complete_event+0x22>
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <hci_disconnection_complete_event+0x64>)
 8001276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	f3bf 8f4f 	dsb	sy
 8001280:	f3bf 8f6f 	isb	sy
	FunctionAlreadyCalled = SET;
 8001284:	2301      	movs	r3, #1
 8001286:	7023      	strb	r3, [r4, #0]
} /* end hci_disconnection_complete_event() */
 8001288:	b005      	add	sp, #20
 800128a:	bd30      	pop	{r4, r5, pc}
 800128c:	2000018f 	.word	0x2000018f
 8001290:	20009964 	.word	0x20009964
 8001294:	200099e0 	.word	0x200099e0
 8001298:	e000ed04 	.word	0xe000ed04

0800129c <aci_gatt_notification_event>:
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
{


} /* end aci_gatt_notification_event() */
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 80012a0:	b500      	push	{lr}

	/* Determine which characteristic was modified by Client (Indicate and Notify characteristics
	   are modified by Client only if Client acknowledges these features on Server) */
	if(Attr_Handle == hClientWrite_Direction+1)
 80012a2:	4b43      	ldr	r3, [pc, #268]	; (80013b0 <aci_gatt_attribute_modified_event+0x110>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
{
 80012a6:	b083      	sub	sp, #12
	if(Attr_Handle == hClientWrite_Direction+1)
 80012a8:	3301      	adds	r3, #1
 80012aa:	4299      	cmp	r1, r3
{
 80012ac:	9a04      	ldr	r2, [sp, #16]
	if(Attr_Handle == hClientWrite_Direction+1)
 80012ae:	d002      	beq.n	80012b6 <aci_gatt_attribute_modified_event+0x16>
			}
		}

	}

} /* end aci_gatt_attribute_modified_event() */
 80012b0:	b003      	add	sp, #12
 80012b2:	f85d fb04 	ldr.w	pc, [sp], #4
		switch(Attr_Data[0])
 80012b6:	7813      	ldrb	r3, [r2, #0]
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxIncorrectMsgCharBuffer);
 80012b8:	493e      	ldr	r1, [pc, #248]	; (80013b4 <aci_gatt_attribute_modified_event+0x114>)
 80012ba:	3b45      	subs	r3, #69	; 0x45
 80012bc:	2b33      	cmp	r3, #51	; 0x33
 80012be:	d81b      	bhi.n	80012f8 <aci_gatt_attribute_modified_event+0x58>
 80012c0:	e8df f003 	tbb	[pc, r3]
 80012c4:	1a1a1a67 	.word	0x1a1a1a67
 80012c8:	1a1a1a1a 	.word	0x1a1a1a1a
 80012cc:	1a1a581a 	.word	0x1a1a581a
 80012d0:	1a491a1a 	.word	0x1a491a1a
 80012d4:	263a1a1a 	.word	0x263a1a1a
 80012d8:	1a1a1a1a 	.word	0x1a1a1a1a
 80012dc:	1a1a1a1a 	.word	0x1a1a1a1a
 80012e0:	1a1a1a1a 	.word	0x1a1a1a1a
 80012e4:	1a1a1a67 	.word	0x1a1a1a67
 80012e8:	1a1a1a1a 	.word	0x1a1a1a1a
 80012ec:	1a1a581a 	.word	0x1a1a581a
 80012f0:	1a491a1a 	.word	0x1a491a1a
 80012f4:	263a1a1a 	.word	0x263a1a1a
 80012f8:	4a2f      	ldr	r2, [pc, #188]	; (80013b8 <aci_gatt_attribute_modified_event+0x118>)
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <aci_gatt_attribute_modified_event+0x11c>)
 80012fc:	8810      	ldrh	r0, [r2, #0]
 80012fe:	8809      	ldrh	r1, [r1, #0]
 8001300:	9304      	str	r3, [sp, #16]
 8001302:	2200      	movs	r2, #0
 8001304:	2306      	movs	r3, #6
} /* end aci_gatt_attribute_modified_event() */
 8001306:	b003      	add	sp, #12
 8001308:	f85d eb04 	ldr.w	lr, [sp], #4
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxIncorrectMsgCharBuffer);
 800130c:	f005 bcda 	b.w	8006cc4 <aci_gatt_update_char_value>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxForceStopMovingCharBuffer);
 8001310:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <aci_gatt_attribute_modified_event+0x118>)
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <aci_gatt_attribute_modified_event+0x120>)
 8001314:	8809      	ldrh	r1, [r1, #0]
 8001316:	8810      	ldrh	r0, [r2, #0]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	2306      	movs	r3, #6
 800131e:	f005 fcd1 	bl	8006cc4 <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_FORCESTOP, eSetBits);
 8001322:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <aci_gatt_attribute_modified_event+0x124>)
 8001324:	2300      	movs	r3, #0
 8001326:	6810      	ldr	r0, [r2, #0]
 8001328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132c:	2201      	movs	r2, #1
} /* end aci_gatt_attribute_modified_event() */
 800132e:	b003      	add	sp, #12
 8001330:	f85d eb04 	ldr.w	lr, [sp], #4
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_EAST, eSetBits);
 8001334:	f007 bb72 	b.w	8008a1c <xTaskGenericNotify>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxWestDirCharBuffer);
 8001338:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <aci_gatt_attribute_modified_event+0x118>)
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <aci_gatt_attribute_modified_event+0x128>)
 800133c:	8809      	ldrh	r1, [r1, #0]
 800133e:	8810      	ldrh	r0, [r2, #0]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	2306      	movs	r3, #6
 8001346:	f005 fcbd 	bl	8006cc4 <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_WEST, eSetBits);
 800134a:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <aci_gatt_attribute_modified_event+0x124>)
 800134c:	2300      	movs	r3, #0
 800134e:	6810      	ldr	r0, [r2, #0]
 8001350:	2108      	movs	r1, #8
 8001352:	2201      	movs	r2, #1
 8001354:	e7eb      	b.n	800132e <aci_gatt_attribute_modified_event+0x8e>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxSouthDirCharBuffer);
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <aci_gatt_attribute_modified_event+0x118>)
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <aci_gatt_attribute_modified_event+0x12c>)
 800135a:	8809      	ldrh	r1, [r1, #0]
 800135c:	8810      	ldrh	r0, [r2, #0]
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2200      	movs	r2, #0
 8001362:	2306      	movs	r3, #6
 8001364:	f005 fcae 	bl	8006cc4 <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_SOUTH, eSetBits);
 8001368:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <aci_gatt_attribute_modified_event+0x124>)
 800136a:	2300      	movs	r3, #0
 800136c:	6810      	ldr	r0, [r2, #0]
 800136e:	2104      	movs	r1, #4
 8001370:	2201      	movs	r2, #1
 8001372:	e7dc      	b.n	800132e <aci_gatt_attribute_modified_event+0x8e>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxNorthDirCharBuffer);
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <aci_gatt_attribute_modified_event+0x118>)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <aci_gatt_attribute_modified_event+0x130>)
 8001378:	8809      	ldrh	r1, [r1, #0]
 800137a:	8810      	ldrh	r0, [r2, #0]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	2306      	movs	r3, #6
 8001382:	f005 fc9f 	bl	8006cc4 <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_NORTH, eSetBits);
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <aci_gatt_attribute_modified_event+0x124>)
 8001388:	2201      	movs	r2, #1
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	4611      	mov	r1, r2
 800138e:	2300      	movs	r3, #0
 8001390:	e7cd      	b.n	800132e <aci_gatt_attribute_modified_event+0x8e>
				aci_gatt_update_char_value(hService, hClientRead_VerifyDirection, 0, s_BLEVerifyMessageLength, s_pTxEastDirCharBuffer);
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <aci_gatt_attribute_modified_event+0x118>)
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <aci_gatt_attribute_modified_event+0x134>)
 8001396:	8809      	ldrh	r1, [r1, #0]
 8001398:	8810      	ldrh	r0, [r2, #0]
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2200      	movs	r2, #0
 800139e:	2306      	movs	r3, #6
 80013a0:	f005 fc90 	bl	8006cc4 <aci_gatt_update_char_value>
				xTaskNotify(h_TaskBLEMsg, FRTOS_TASK_NOTIF_DIR_EAST, eSetBits);
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <aci_gatt_attribute_modified_event+0x124>)
 80013a6:	2300      	movs	r3, #0
 80013a8:	6810      	ldr	r0, [r2, #0]
 80013aa:	2102      	movs	r1, #2
 80013ac:	2201      	movs	r2, #1
 80013ae:	e7be      	b.n	800132e <aci_gatt_attribute_modified_event+0x8e>
 80013b0:	2000019e 	.word	0x2000019e
 80013b4:	2000019c 	.word	0x2000019c
 80013b8:	200001ac 	.word	0x200001ac
 80013bc:	0800a734 	.word	0x0800a734
 80013c0:	0800a72c 	.word	0x0800a72c
 80013c4:	200099c8 	.word	0x200099c8
 80013c8:	0800a74c 	.word	0x0800a74c
 80013cc:	0800a744 	.word	0x0800a744
 80013d0:	0800a73c 	.word	0x0800a73c
 80013d4:	0800a724 	.word	0x0800a724

080013d8 <Task_ManageBLEEvents>:
 * @brief	FreeRTOS Task responsible for managing BLE events. hci_user_evt_proc() needs to be called
 * 			continuously to manage BLE connections and incoming/outgoing messages.
 * @note
 */
static void Task_ManageBLEEvents(void *argument)
{
 80013d8:	b510      	push	{r4, lr}
 80013da:	4c08      	ldr	r4, [pc, #32]	; (80013fc <Task_ManageBLEEvents+0x24>)
 80013dc:	b082      	sub	sp, #8
	TickType_t LastActiveTime;

	while(1)
	{
		/* Check amount of unused stack. If returned value is 0, stack overflow has occurred */
		g_Task3_RSS = uxTaskGetStackHighWaterMark(NULL);
 80013de:	2000      	movs	r0, #0
 80013e0:	f007 fa4a 	bl	8008878 <uxTaskGetStackHighWaterMark>
 80013e4:	6020      	str	r0, [r4, #0]

		/* Perform accurate blocking delay */
		LastActiveTime = xTaskGetTickCount();
 80013e6:	f007 f833 	bl	8008450 <xTaskGetTickCount>
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 80013ea:	210f      	movs	r1, #15
		LastActiveTime = xTaskGetTickCount();
 80013ec:	4603      	mov	r3, r0
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 80013ee:	a801      	add	r0, sp, #4
		LastActiveTime = xTaskGetTickCount();
 80013f0:	9301      	str	r3, [sp, #4]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 80013f2:	f006 fea7 	bl	8008144 <vTaskDelayUntil>

		/* Need to continuously call this function to process BLE events and connections */
		hci_user_evt_proc();
 80013f6:	f005 fe03 	bl	8007000 <hci_user_evt_proc>
	while(1)
 80013fa:	e7f0      	b.n	80013de <Task_ManageBLEEvents+0x6>
 80013fc:	200099dc 	.word	0x200099dc

08001400 <Task_BlinkLEDIndicator>:
/**
 * @brief	FreeRTOS Task responsible for blinking on-board microcontroller LED every second
 * @note
 */
static void Task_BlinkLEDIndicator(void *argument)
{
 8001400:	b530      	push	{r4, r5, lr}
 8001402:	4d0a      	ldr	r5, [pc, #40]	; (800142c <Task_BlinkLEDIndicator+0x2c>)
		/* Perform accurate blocking delay */
		LastActiveTime = xTaskGetTickCount();
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);

		/* Toggle LED every 1 second */
		HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8001404:	4c0a      	ldr	r4, [pc, #40]	; (8001430 <Task_BlinkLEDIndicator+0x30>)
{
 8001406:	b083      	sub	sp, #12
		g_Task2_RSS = uxTaskGetStackHighWaterMark(NULL);
 8001408:	2000      	movs	r0, #0
 800140a:	f007 fa35 	bl	8008878 <uxTaskGetStackHighWaterMark>
 800140e:	6028      	str	r0, [r5, #0]
		LastActiveTime = xTaskGetTickCount();
 8001410:	f007 f81e 	bl	8008450 <xTaskGetTickCount>
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 8001414:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		LastActiveTime = xTaskGetTickCount();
 8001418:	4603      	mov	r3, r0
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 800141a:	a801      	add	r0, sp, #4
		LastActiveTime = xTaskGetTickCount();
 800141c:	9301      	str	r3, [sp, #4]
		vTaskDelayUntil(&LastActiveTime, DelayFrequency);
 800141e:	f006 fe91 	bl	8008144 <vTaskDelayUntil>
		HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8001422:	2120      	movs	r1, #32
 8001424:	4620      	mov	r0, r4
 8001426:	f001 ff95 	bl	8003354 <HAL_GPIO_TogglePin>
	while(1)
 800142a:	e7ed      	b.n	8001408 <Task_BlinkLEDIndicator+0x8>
 800142c:	200099d8 	.word	0x200099d8
 8001430:	40020000 	.word	0x40020000

08001434 <Task_ParseBLEMessage>:
{
 8001434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001438:	4e1b      	ldr	r6, [pc, #108]	; (80014a8 <Task_ParseBLEMessage+0x74>)
 800143a:	4d1c      	ldr	r5, [pc, #112]	; (80014ac <Task_ParseBLEMessage+0x78>)
 800143c:	4f1c      	ldr	r7, [pc, #112]	; (80014b0 <Task_ParseBLEMessage+0x7c>)
 800143e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80014b4 <Task_ParseBLEMessage+0x80>
 8001442:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80014b8 <Task_ParseBLEMessage+0x84>
 8001446:	f8df a074 	ldr.w	sl, [pc, #116]	; 80014bc <Task_ParseBLEMessage+0x88>
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800144a:	f04f 31ff 	mov.w	r1, #4294967295
 800144e:	2001      	movs	r0, #1
 8001450:	f007 fa82 	bl	8008958 <ulTaskNotifyTake>
 8001454:	4604      	mov	r4, r0
		g_Task1_RSS = uxTaskGetStackHighWaterMark(NULL);
 8001456:	2000      	movs	r0, #0
 8001458:	f007 fa0e 	bl	8008878 <uxTaskGetStackHighWaterMark>
		if(NotificationValue & FRTOS_TASK_NOTIF_DIR_FORCESTOP)
 800145c:	0423      	lsls	r3, r4, #16
		g_Task1_RSS = uxTaskGetStackHighWaterMark(NULL);
 800145e:	6030      	str	r0, [r6, #0]
		if(NotificationValue & FRTOS_TASK_NOTIF_DIR_FORCESTOP)
 8001460:	d503      	bpl.n	800146a <Task_ParseBLEMessage+0x36>
			g_CountDirForceStop++;
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	602b      	str	r3, [r5, #0]
 8001468:	e7ef      	b.n	800144a <Task_ParseBLEMessage+0x16>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_NORTH)
 800146a:	07e0      	lsls	r0, r4, #31
 800146c:	d503      	bpl.n	8001476 <Task_ParseBLEMessage+0x42>
			g_CountDirForward++;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	e7e9      	b.n	800144a <Task_ParseBLEMessage+0x16>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_EAST)
 8001476:	07a1      	lsls	r1, r4, #30
 8001478:	d505      	bpl.n	8001486 <Task_ParseBLEMessage+0x52>
			g_CountDirRight++;
 800147a:	f8d8 3000 	ldr.w	r3, [r8]
 800147e:	3301      	adds	r3, #1
 8001480:	f8c8 3000 	str.w	r3, [r8]
 8001484:	e7e1      	b.n	800144a <Task_ParseBLEMessage+0x16>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_SOUTH)
 8001486:	0762      	lsls	r2, r4, #29
 8001488:	d505      	bpl.n	8001496 <Task_ParseBLEMessage+0x62>
			g_CountDirBack++;
 800148a:	f8d9 3000 	ldr.w	r3, [r9]
 800148e:	3301      	adds	r3, #1
 8001490:	f8c9 3000 	str.w	r3, [r9]
 8001494:	e7d9      	b.n	800144a <Task_ParseBLEMessage+0x16>
		else if(NotificationValue & FRTOS_TASK_NOTIF_DIR_WEST)
 8001496:	0723      	lsls	r3, r4, #28
 8001498:	d5d7      	bpl.n	800144a <Task_ParseBLEMessage+0x16>
			g_CountDirLeft++;
 800149a:	f8da 3000 	ldr.w	r3, [sl]
 800149e:	3301      	adds	r3, #1
 80014a0:	f8ca 3000 	str.w	r3, [sl]
 80014a4:	e7d1      	b.n	800144a <Task_ParseBLEMessage+0x16>
 80014a6:	bf00      	nop
 80014a8:	200099d4 	.word	0x200099d4
 80014ac:	200001b4 	.word	0x200001b4
 80014b0:	200001b8 	.word	0x200001b8
 80014b4:	200001c0 	.word	0x200001c0
 80014b8:	200001b0 	.word	0x200001b0
 80014bc:	200001bc 	.word	0x200001bc

080014c0 <Task_ProcessPushButtonIRQ>:
{
 80014c0:	b530      	push	{r4, r5, lr}
 80014c2:	b083      	sub	sp, #12
	__IO uint32_t PBCounter = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	9301      	str	r3, [sp, #4]
	Motor_Init();
 80014c8:	f7ff f856 	bl	8000578 <Motor_Init>
 80014cc:	4d1c      	ldr	r5, [pc, #112]	; (8001540 <Task_ProcessPushButtonIRQ+0x80>)
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80014ce:	f04f 31ff 	mov.w	r1, #4294967295
 80014d2:	2001      	movs	r0, #1
 80014d4:	f007 fa40 	bl	8008958 <ulTaskNotifyTake>
 80014d8:	4604      	mov	r4, r0
		g_Task4_RSS = uxTaskGetStackHighWaterMark(NULL);
 80014da:	2000      	movs	r0, #0
 80014dc:	f007 f9cc 	bl	8008878 <uxTaskGetStackHighWaterMark>
		if(NotificationValue & FRTOS_TASK_NOTIF_PB_PRESSED)
 80014e0:	07e2      	lsls	r2, r4, #31
		g_Task4_RSS = uxTaskGetStackHighWaterMark(NULL);
 80014e2:	6028      	str	r0, [r5, #0]
		if(NotificationValue & FRTOS_TASK_NOTIF_PB_PRESSED)
 80014e4:	d5f3      	bpl.n	80014ce <Task_ProcessPushButtonIRQ+0xe>
			switch(PBCounter%4)
 80014e6:	9b01      	ldr	r3, [sp, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	2a02      	cmp	r2, #2
					Motor_ConfigWheelDirection(MOTWHEEL_REARLEFT, DIR_WHEEL_BACKWARD);
 80014ee:	f04f 0101 	mov.w	r1, #1
 80014f2:	f04f 0011 	mov.w	r0, #17
			switch(PBCounter%4)
 80014f6:	d018      	beq.n	800152a <Task_ProcessPushButtonIRQ+0x6a>
 80014f8:	07db      	lsls	r3, r3, #31
 80014fa:	d40b      	bmi.n	8001514 <Task_ProcessPushButtonIRQ+0x54>
					Motor_ConfigWheelDirection(MOTWHEEL_REARLEFT, DIR_WHEEL_BACKWARD);
 80014fc:	f7ff f844 	bl	8000588 <Motor_ConfigWheelDirection>
					Motor_ConfigWheelDirection(MOTWHEEL_REARRIGHT, DIR_WHEEL_BACKWARD);
 8001500:	2101      	movs	r1, #1
 8001502:	2022      	movs	r0, #34	; 0x22
 8001504:	f7ff f840 	bl	8000588 <Motor_ConfigWheelDirection>
					Motor_ApplyWheelChanges();
 8001508:	f7ff f838 	bl	800057c <Motor_ApplyWheelChanges>
			PBCounter++;
 800150c:	9b01      	ldr	r3, [sp, #4]
 800150e:	3301      	adds	r3, #1
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	e7dc      	b.n	80014ce <Task_ProcessPushButtonIRQ+0xe>
					Motor_ConfigWheelDirection(MOTWHEEL_REARLEFT, DIR_WHEEL_OFF);
 8001514:	2100      	movs	r1, #0
 8001516:	2011      	movs	r0, #17
 8001518:	f7ff f836 	bl	8000588 <Motor_ConfigWheelDirection>
					Motor_ConfigWheelDirection(MOTWHEEL_REARRIGHT, DIR_WHEEL_OFF);
 800151c:	2100      	movs	r1, #0
 800151e:	2022      	movs	r0, #34	; 0x22
 8001520:	f7ff f832 	bl	8000588 <Motor_ConfigWheelDirection>
					Motor_ApplyWheelChanges();
 8001524:	f7ff f82a 	bl	800057c <Motor_ApplyWheelChanges>
					break;
 8001528:	e7f0      	b.n	800150c <Task_ProcessPushButtonIRQ+0x4c>
					Motor_ConfigWheelDirection(MOTWHEEL_REARLEFT, DIR_WHEEL_FORWARD);
 800152a:	2110      	movs	r1, #16
 800152c:	2011      	movs	r0, #17
 800152e:	f7ff f82b 	bl	8000588 <Motor_ConfigWheelDirection>
					Motor_ConfigWheelDirection(MOTWHEEL_REARRIGHT, DIR_WHEEL_FORWARD);
 8001532:	2110      	movs	r1, #16
 8001534:	2022      	movs	r0, #34	; 0x22
 8001536:	f7ff f827 	bl	8000588 <Motor_ConfigWheelDirection>
					Motor_ApplyWheelChanges();
 800153a:	f7ff f81f 	bl	800057c <Motor_ApplyWheelChanges>
					break;
 800153e:	e7e5      	b.n	800150c <Task_ProcessPushButtonIRQ+0x4c>
 8001540:	200099e4 	.word	0x200099e4

08001544 <Task_ManageBLEConnections>:
{
 8001544:	b570      	push	{r4, r5, r6, lr}
	BlueNRG_Init();
 8001546:	f7ff fbcf 	bl	8000ce8 <BlueNRG_Init>
	BlueNRG_MakeDeviceDiscoverable();
 800154a:	f7ff fdf7 	bl	800113c <BlueNRG_MakeDeviceDiscoverable>
 800154e:	4d0d      	ldr	r5, [pc, #52]	; (8001584 <Task_ManageBLEConnections+0x40>)
 8001550:	4e0d      	ldr	r6, [pc, #52]	; (8001588 <Task_ManageBLEConnections+0x44>)
		NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001552:	f04f 31ff 	mov.w	r1, #4294967295
 8001556:	2001      	movs	r0, #1
 8001558:	f007 f9fe 	bl	8008958 <ulTaskNotifyTake>
 800155c:	4604      	mov	r4, r0
		g_Task0_RSS = uxTaskGetStackHighWaterMark(NULL);
 800155e:	2000      	movs	r0, #0
 8001560:	f007 f98a 	bl	8008878 <uxTaskGetStackHighWaterMark>
		if(NotificationValue & FRTOS_TASK_NOTIF_BLE_CONNECTED)
 8001564:	07a2      	lsls	r2, r4, #30
		g_Task0_RSS = uxTaskGetStackHighWaterMark(NULL);
 8001566:	6028      	str	r0, [r5, #0]
		if(NotificationValue & FRTOS_TASK_NOTIF_BLE_CONNECTED)
 8001568:	d503      	bpl.n	8001572 <Task_ManageBLEConnections+0x2e>
			vTaskResume(h_TaskBLEMsg);
 800156a:	6830      	ldr	r0, [r6, #0]
 800156c:	f006 fe68 	bl	8008240 <vTaskResume>
 8001570:	e7ef      	b.n	8001552 <Task_ManageBLEConnections+0xe>
		else if(NotificationValue & FRTOS_TASK_NOTIF_BLE_DISCONNECTED)
 8001572:	07e3      	lsls	r3, r4, #31
 8001574:	d5ed      	bpl.n	8001552 <Task_ManageBLEConnections+0xe>
			vTaskSuspend(h_TaskBLEMsg);
 8001576:	6830      	ldr	r0, [r6, #0]
 8001578:	f006 ffce 	bl	8008518 <vTaskSuspend>
			BlueNRG_MakeDeviceDiscoverable();
 800157c:	f7ff fdde 	bl	800113c <BlueNRG_MakeDeviceDiscoverable>
 8001580:	e7e7      	b.n	8001552 <Task_ManageBLEConnections+0xe>
 8001582:	bf00      	nop
 8001584:	200099cc 	.word	0x200099cc
 8001588:	200099c8 	.word	0x200099c8

0800158c <FRTOS_Init_Tasks>:
{
 800158c:	b500      	push	{lr}
 800158e:	b083      	sub	sp, #12
	TaskCreationStatus = xTaskCreate( Task_ManageBLEConnections,
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <FRTOS_Init_Tasks+0xbc>)
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	232e      	movs	r3, #46	; 0x2e
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	492c      	ldr	r1, [pc, #176]	; (800164c <FRTOS_Init_Tasks+0xc0>)
 800159a:	482d      	ldr	r0, [pc, #180]	; (8001650 <FRTOS_Init_Tasks+0xc4>)
 800159c:	2300      	movs	r3, #0
 800159e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a2:	f006 fd9b 	bl	80080dc <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 80015a6:	2801      	cmp	r0, #1
 80015a8:	d003      	beq.n	80015b2 <FRTOS_Init_Tasks+0x26>
 80015aa:	482a      	ldr	r0, [pc, #168]	; (8001654 <FRTOS_Init_Tasks+0xc8>)
 80015ac:	218c      	movs	r1, #140	; 0x8c
 80015ae:	f000 fb15 	bl	8001bdc <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_ParseBLEMessage,
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <FRTOS_Init_Tasks+0xcc>)
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	232d      	movs	r3, #45	; 0x2d
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4928      	ldr	r1, [pc, #160]	; (800165c <FRTOS_Init_Tasks+0xd0>)
 80015bc:	4828      	ldr	r0, [pc, #160]	; (8001660 <FRTOS_Init_Tasks+0xd4>)
 80015be:	2300      	movs	r3, #0
 80015c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c4:	f006 fd8a 	bl	80080dc <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 80015c8:	2801      	cmp	r0, #1
 80015ca:	d003      	beq.n	80015d4 <FRTOS_Init_Tasks+0x48>
 80015cc:	4821      	ldr	r0, [pc, #132]	; (8001654 <FRTOS_Init_Tasks+0xc8>)
 80015ce:	2197      	movs	r1, #151	; 0x97
 80015d0:	f000 fb04 	bl	8001bdc <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_ProcessPushButtonIRQ,
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <FRTOS_Init_Tasks+0xd8>)
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	232c      	movs	r3, #44	; 0x2c
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	4922      	ldr	r1, [pc, #136]	; (8001668 <FRTOS_Init_Tasks+0xdc>)
 80015de:	4823      	ldr	r0, [pc, #140]	; (800166c <FRTOS_Init_Tasks+0xe0>)
 80015e0:	2300      	movs	r3, #0
 80015e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e6:	f006 fd79 	bl	80080dc <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 80015ea:	2801      	cmp	r0, #1
 80015ec:	d003      	beq.n	80015f6 <FRTOS_Init_Tasks+0x6a>
 80015ee:	4819      	ldr	r0, [pc, #100]	; (8001654 <FRTOS_Init_Tasks+0xc8>)
 80015f0:	21a2      	movs	r1, #162	; 0xa2
 80015f2:	f000 faf3 	bl	8001bdc <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_BlinkLEDIndicator,
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <FRTOS_Init_Tasks+0xe4>)
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	231e      	movs	r3, #30
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	491d      	ldr	r1, [pc, #116]	; (8001674 <FRTOS_Init_Tasks+0xe8>)
 8001600:	481d      	ldr	r0, [pc, #116]	; (8001678 <FRTOS_Init_Tasks+0xec>)
 8001602:	2300      	movs	r3, #0
 8001604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001608:	f006 fd68 	bl	80080dc <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 800160c:	2801      	cmp	r0, #1
 800160e:	d003      	beq.n	8001618 <FRTOS_Init_Tasks+0x8c>
 8001610:	4810      	ldr	r0, [pc, #64]	; (8001654 <FRTOS_Init_Tasks+0xc8>)
 8001612:	21ad      	movs	r1, #173	; 0xad
 8001614:	f000 fae2 	bl	8001bdc <assert_failed>
	TaskCreationStatus = xTaskCreate( Task_ManageBLEEvents,
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <FRTOS_Init_Tasks+0xf0>)
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	2319      	movs	r3, #25
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	4917      	ldr	r1, [pc, #92]	; (8001680 <FRTOS_Init_Tasks+0xf4>)
 8001622:	4818      	ldr	r0, [pc, #96]	; (8001684 <FRTOS_Init_Tasks+0xf8>)
 8001624:	2300      	movs	r3, #0
 8001626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162a:	f006 fd57 	bl	80080dc <xTaskCreate>
	assert_param(TaskCreationStatus == pdPASS);
 800162e:	2801      	cmp	r0, #1
 8001630:	d102      	bne.n	8001638 <FRTOS_Init_Tasks+0xac>
}
 8001632:	b003      	add	sp, #12
 8001634:	f85d fb04 	ldr.w	pc, [sp], #4
	assert_param(TaskCreationStatus == pdPASS);
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <FRTOS_Init_Tasks+0xc8>)
 800163a:	21b8      	movs	r1, #184	; 0xb8
}
 800163c:	b003      	add	sp, #12
 800163e:	f85d eb04 	ldr.w	lr, [sp], #4
	assert_param(TaskCreationStatus == pdPASS);
 8001642:	f000 bacb 	b.w	8001bdc <assert_failed>
 8001646:	bf00      	nop
 8001648:	200099e0 	.word	0x200099e0
 800164c:	0800a754 	.word	0x0800a754
 8001650:	08001545 	.word	0x08001545
 8001654:	0800a76c 	.word	0x0800a76c
 8001658:	200099c8 	.word	0x200099c8
 800165c:	0800a78c 	.word	0x0800a78c
 8001660:	08001435 	.word	0x08001435
 8001664:	200099d0 	.word	0x200099d0
 8001668:	0800a7a0 	.word	0x0800a7a0
 800166c:	080014c1 	.word	0x080014c1
 8001670:	200001c8 	.word	0x200001c8
 8001674:	0800a7ac 	.word	0x0800a7ac
 8001678:	08001401 	.word	0x08001401
 800167c:	200001c4 	.word	0x200001c4
 8001680:	0800a7bc 	.word	0x0800a7bc
 8001684:	080013d9 	.word	0x080013d9

08001688 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8001688:	b530      	push	{r4, r5, lr}
 800168a:	b083      	sub	sp, #12
 800168c:	460d      	mov	r5, r1
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800168e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
{
 8001692:	4613      	mov	r3, r2
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8001694:	4601      	mov	r1, r0
 8001696:	462a      	mov	r2, r5
 8001698:	9400      	str	r4, [sp, #0]
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <BSP_SPI1_SendRecv+0x28>)
 800169c:	f003 fb74 	bl	8004d88 <HAL_SPI_TransmitReceive>
 80016a0:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 80016a2:	bf14      	ite	ne
 80016a4:	f06f 0005 	mvnne.w	r0, #5
 80016a8:	2000      	moveq	r0, #0
 80016aa:	b003      	add	sp, #12
 80016ac:	bd30      	pop	{r4, r5, pc}
 80016ae:	bf00      	nop
 80016b0:	200099e8 	.word	0x200099e8

080016b4 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 80016b4:	f000 be80 	b.w	80023b8 <HAL_GetTick>

080016b8 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <MX_SPI1_Init+0x38>)
{
 80016ba:	b538      	push	{r3, r4, r5, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 80016bc:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi->Instance = SPI1;
 80016c0:	6002      	str	r2, [r0, #0]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80016c2:	2201      	movs	r2, #1
  hspi->Init.NSS = SPI_NSS_SOFT;
 80016c4:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016c8:	2430      	movs	r4, #48	; 0x30
  hspi->Init.Mode = SPI_MODE_MASTER;
 80016ca:	6041      	str	r1, [r0, #4]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80016cc:	6142      	str	r2, [r0, #20]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 10;
 80016ce:	210a      	movs	r1, #10
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80016d0:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016d2:	e9c0 5406 	strd	r5, r4, [r0, #24]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80016d6:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80016da:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hspi->Init.CRCPolynomial = 10;
 80016de:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e0:	6102      	str	r2, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e2:	6282      	str	r2, [r0, #40]	; 0x28
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80016e4:	f003 fa4c 	bl	8004b80 <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 80016e8:	3800      	subs	r0, #0
 80016ea:	bf18      	it	ne
 80016ec:	2001      	movne	r0, #1
 80016ee:	bd38      	pop	{r3, r4, r5, pc}
 80016f0:	40013000 	.word	0x40013000

080016f4 <BSP_SPI1_Init>:
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(SPI1InitCounter++ == 0)
 80016f6:	4a2f      	ldr	r2, [pc, #188]	; (80017b4 <BSP_SPI1_Init+0xc0>)
  hspi1.Instance  = SPI1;
 80016f8:	4c2f      	ldr	r4, [pc, #188]	; (80017b8 <BSP_SPI1_Init+0xc4>)
  if(SPI1InitCounter++ == 0)
 80016fa:	6813      	ldr	r3, [r2, #0]
  hspi1.Instance  = SPI1;
 80016fc:	492f      	ldr	r1, [pc, #188]	; (80017bc <BSP_SPI1_Init+0xc8>)
 80016fe:	6021      	str	r1, [r4, #0]
  if(SPI1InitCounter++ == 0)
 8001700:	1c59      	adds	r1, r3, #1
{
 8001702:	b08b      	sub	sp, #44	; 0x2c
  if(SPI1InitCounter++ == 0)
 8001704:	6011      	str	r1, [r2, #0]
 8001706:	b113      	cbz	r3, 800170e <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8001708:	2000      	movs	r0, #0
}
 800170a:	b00b      	add	sp, #44	; 0x2c
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800170e:	4620      	mov	r0, r4
 8001710:	f003 fcd2 	bl	80050b8 <HAL_SPI_GetState>
 8001714:	4603      	mov	r3, r0
 8001716:	2800      	cmp	r0, #0
 8001718:	d1f6      	bne.n	8001708 <BSP_SPI1_Init+0x14>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171a:	4a29      	ldr	r2, [pc, #164]	; (80017c0 <BSP_SPI1_Init+0xcc>)
 800171c:	9001      	str	r0, [sp, #4]
 800171e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001720:	4828      	ldr	r0, [pc, #160]	; (80017c4 <BSP_SPI1_Init+0xd0>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001722:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001726:	6451      	str	r1, [r2, #68]	; 0x44
 8001728:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800172a:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 800172e:	9101      	str	r1, [sp, #4]
 8001730:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001736:	f041 0101 	orr.w	r1, r1, #1
 800173a:	6311      	str	r1, [r2, #48]	; 0x30
 800173c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800173e:	f001 0101 	and.w	r1, r1, #1
 8001742:	9102      	str	r1, [sp, #8]
 8001744:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	9303      	str	r3, [sp, #12]
 8001748:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
 8001750:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	2302      	movs	r3, #2
 800175c:	2600      	movs	r6, #0
 800175e:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001760:	2505      	movs	r5, #5
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001762:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001764:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	f8dd c00c 	ldr.w	ip, [sp, #12]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800176c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800176e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001772:	f001 fbbd 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800177a:	4812      	ldr	r0, [pc, #72]	; (80017c4 <BSP_SPI1_Init+0xd0>)
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800177c:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800177e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001780:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001784:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001788:	f001 fbb2 	bl	8002ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800178c:	480e      	ldr	r0, [pc, #56]	; (80017c8 <BSP_SPI1_Init+0xd4>)
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800178e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001790:	2208      	movs	r2, #8
 8001792:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001794:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001796:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800179a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800179e:	f001 fba7 	bl	8002ef0 <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80017a2:	4620      	mov	r0, r4
 80017a4:	f7ff ff88 	bl	80016b8 <MX_SPI1_Init>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d0ad      	beq.n	8001708 <BSP_SPI1_Init+0x14>
				ret = BSP_ERROR_BUS_FAILURE;
 80017ac:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80017b0:	e7ab      	b.n	800170a <BSP_SPI1_Init+0x16>
 80017b2:	bf00      	nop
 80017b4:	200001cc 	.word	0x200001cc
 80017b8:	200099e8 	.word	0x200099e8
 80017bc:	40013000 	.word	0x40013000
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400

080017cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017cc:	b500      	push	{lr}
 80017ce:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <MX_DMA_Init+0x30>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	9201      	str	r2, [sp, #4]
 80017d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017d8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80017dc:	6319      	str	r1, [r3, #48]	; 0x30
 80017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e4:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80017e6:	2105      	movs	r1, #5
 80017e8:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80017ec:	f001 f860 	bl	80028b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017f0:	2038      	movs	r0, #56	; 0x38

}
 80017f2:	b003      	add	sp, #12
 80017f4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017f8:	f001 b8a4 	b.w	8002944 <HAL_NVIC_EnableIRQ>
 80017fc:	40023800 	.word	0x40023800

08001800 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8001804:	2000      	movs	r0, #0
 8001806:	4770      	bx	lr

08001808 <vApplicationIdleHook>:
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <vApplicationMallocFailedHook>:
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <MX_FREERTOS_Init>:

  /* USER CODE BEGIN RTOS_EVENTS */

  /* USER CODE END RTOS_EVENTS */

}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop

08001814 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	2400      	movs	r4, #0
{
 800181a:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001820:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001824:	4b64      	ldr	r3, [pc, #400]	; (80019b8 <MX_GPIO_Init+0x1a4>)
 8001826:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 800182c:	4e63      	ldr	r6, [pc, #396]	; (80019bc <MX_GPIO_Init+0x1a8>)
  HAL_GPIO_WritePin(GPIOB, DIR_LATCH_Pin|DIR_SER_Pin, GPIO_PIN_RESET);
 800182e:	4d64      	ldr	r5, [pc, #400]	; (80019c0 <MX_GPIO_Init+0x1ac>)
  HAL_GPIO_WritePin(GPIOB, DIR_EN_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 8001830:	4f64      	ldr	r7, [pc, #400]	; (80019c4 <MX_GPIO_Init+0x1b0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	f042 0204 	orr.w	r2, r2, #4
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
 8001838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183a:	f002 0204 	and.w	r2, r2, #4
 800183e:	9201      	str	r2, [sp, #4]
 8001840:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	9402      	str	r4, [sp, #8]
 8001844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
 800184c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001852:	9202      	str	r2, [sp, #8]
 8001854:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	9403      	str	r4, [sp, #12]
 8001858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
 8001860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001862:	f002 0201 	and.w	r2, r2, #1
 8001866:	9203      	str	r2, [sp, #12]
 8001868:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	9404      	str	r4, [sp, #16]
 800186c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800186e:	f042 0202 	orr.w	r2, r2, #2
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
 8001874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001876:	f002 0202 	and.w	r2, r2, #2
 800187a:	9204      	str	r2, [sp, #16]
 800187c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187e:	9405      	str	r4, [sp, #20]
 8001880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001882:	f042 0208 	orr.w	r2, r2, #8
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 8001890:	4622      	mov	r2, r4
 8001892:	4630      	mov	r0, r6
 8001894:	f44f 7191 	mov.w	r1, #290	; 0x122
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001898:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin, GPIO_PIN_RESET);
 800189a:	f001 fd41 	bl	8003320 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIR_LATCH_Pin|DIR_SER_Pin, GPIO_PIN_RESET);
 800189e:	4622      	mov	r2, r4
 80018a0:	4628      	mov	r0, r5
 80018a2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80018a6:	f001 fd3b 	bl	8003320 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIR_EN_Pin, GPIO_PIN_SET);
 80018aa:	4628      	mov	r0, r5
 80018ac:	2201      	movs	r2, #1
 80018ae:	2120      	movs	r1, #32
 80018b0:	f001 fd36 	bl	8003320 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_CLK_GPIO_Port, DIR_CLK_Pin, GPIO_PIN_RESET);
 80018b4:	4622      	mov	r2, r4
 80018b6:	4638      	mov	r0, r7
 80018b8:	2101      	movs	r1, #1
 80018ba:	f001 fd31 	bl	8003320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <MX_GPIO_Init+0x1b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 80018c2:	a906      	add	r1, sp, #24
 80018c4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = NUCLEO_PB_Pin;
 80018c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(NUCLEO_PB_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f001 fb0f 	bl	8002ef0 <HAL_GPIO_Init>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	a906      	add	r1, sp, #24
 80018d4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15/*|GPIO_PIN_0*/|GPIO_PIN_1
 80018d6:	f64d 727e 	movw	r2, #57214	; 0xdf7e
 80018da:	2303      	movs	r3, #3
 80018dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e2:	f001 fb05 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e6:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018e8:	2203      	movs	r2, #3
 80018ea:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018ec:	4837      	ldr	r0, [pc, #220]	; (80019cc <MX_GPIO_Init+0x1b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018f4:	f001 fafc 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_Pin;
 80018f8:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <MX_GPIO_Init+0x1b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_GPIO_Port, &GPIO_InitStruct);
 80018fc:	a906      	add	r1, sp, #24
 80018fe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_Pin;
 8001900:	2201      	movs	r2, #1
 8001902:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_GPIO_Port, &GPIO_InitStruct);
 8001906:	f001 faf3 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE Pins and Nucleo LED Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 800190a:	f44f 7291 	mov.w	r2, #290	; 0x122
 800190e:	2301      	movs	r3, #1
 8001910:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	a906      	add	r1, sp, #24
 8001916:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BLE_CS_Pin|NUCLEO_LED_Pin|HCI_TL_RST_Pin;
 8001918:	2200      	movs	r2, #0
 800191a:	2300      	movs	r3, #0
 800191c:	e9cd 2308 	strd	r2, r3, [sp, #32]

  /* Configure GPIO pins : Shift Register Pins */
  GPIO_InitStruct.Pin = DIR_LATCH_Pin|DIR_SER_Pin|DIR_EN_Pin;
 8001920:	f04f 0800 	mov.w	r8, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f001 fae4 	bl	8002ef0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DIR_LATCH_Pin|DIR_SER_Pin|DIR_EN_Pin;
 8001928:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	a906      	add	r1, sp, #24
 800192e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = DIR_LATCH_Pin|DIR_SER_Pin|DIR_EN_Pin;
 8001930:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001934:	2301      	movs	r3, #1
 8001936:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800193a:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f001 fad7 	bl	8002ef0 <HAL_GPIO_Init>
  /* Configure GPIO pins : Shift Register Pins */
  GPIO_InitStruct.Pin = DIR_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(DIR_CLK_GPIO_Port, &GPIO_InitStruct);
 8001942:	4638      	mov	r0, r7
 8001944:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = DIR_CLK_Pin;
 8001946:	2201      	movs	r2, #1
 8001948:	2301      	movs	r3, #1
 800194a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800194e:	e9cd 8908 	strd	r8, r9, [sp, #32]
  HAL_GPIO_Init(DIR_CLK_GPIO_Port, &GPIO_InitStruct);
 8001952:	f001 facd 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	4630      	mov	r0, r6
 8001958:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 800195a:	f649 0218 	movw	r2, #38936	; 0x9818
 800195e:	2303      	movs	r3, #3
 8001960:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f001 fac3 	bl	8002ef0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196a:	4628      	mov	r0, r5
 800196c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800196e:	f24f 0287 	movw	r2, #61575	; 0xf087
 8001972:	2303      	movs	r3, #3
 8001974:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f001 fab9 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800197e:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001980:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001982:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001984:	4812      	ldr	r0, [pc, #72]	; (80019d0 <MX_GPIO_Init+0x1bc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001988:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198c:	f001 fab0 	bl	8002ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 1);
 8001990:	2201      	movs	r2, #1
 8001992:	2105      	movs	r1, #5
 8001994:	2006      	movs	r0, #6
 8001996:	f000 ff8b 	bl	80028b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800199a:	2006      	movs	r0, #6
 800199c:	f000 ffd2 	bl	8002944 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 2);
 80019a0:	2202      	movs	r2, #2
 80019a2:	2106      	movs	r1, #6
 80019a4:	2028      	movs	r0, #40	; 0x28
 80019a6:	f000 ff83 	bl	80028b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019aa:	2028      	movs	r0, #40	; 0x28
 80019ac:	f000 ffca 	bl	8002944 <HAL_NVIC_EnableIRQ>

}
 80019b0:	b00d      	add	sp, #52	; 0x34
 80019b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020400 	.word	0x40020400
 80019c4:	40020800 	.word	0x40020800
 80019c8:	10110000 	.word	0x10110000
 80019cc:	40021c00 	.word	0x40021c00
 80019d0:	40020c00 	.word	0x40020c00

080019d4 <MX_I2C1_Init>:
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 80019d6:	490c      	ldr	r1, [pc, #48]	; (8001a08 <MX_I2C1_Init+0x34>)
{
 80019d8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_I2C1_Init+0x38>)
 80019dc:	6003      	str	r3, [r0, #0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e2:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
 80019e4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 80019e8:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ec:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c1.Init.ClockSpeed = 100000;
 80019f0:	6041      	str	r1, [r0, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f2:	6102      	str	r2, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f4:	f001 fcd0 	bl	8003398 <HAL_I2C_Init>
 80019f8:	b900      	cbnz	r0, 80019fc <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019fa:	bd08      	pop	{r3, pc}
 80019fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a00:	f000 b8ea 	b.w	8001bd8 <Error_Handler>
 8001a04:	20009a40 	.word	0x20009a40
 8001a08:	000186a0 	.word	0x000186a0
 8001a0c:	40005400 	.word	0x40005400

08001a10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a10:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8001a12:	6802      	ldr	r2, [r0, #0]
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_I2C_MspInit+0x78>)
{
 8001a16:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 8001a1a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001a20:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001a24:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a28:	b008      	add	sp, #32
 8001a2a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2c:	4d17      	ldr	r5, [pc, #92]	; (8001a8c <HAL_I2C_MspInit+0x7c>)
 8001a2e:	9400      	str	r4, [sp, #0]
 8001a30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	4817      	ldr	r0, [pc, #92]	; (8001a90 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	632b      	str	r3, [r5, #48]	; 0x30
 8001a3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a46:	2312      	movs	r3, #18
 8001a48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a56:	2304      	movs	r3, #4
 8001a58:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	9e00      	ldr	r6, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5c:	f001 fa48 	bl	8002ef0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a60:	9401      	str	r4, [sp, #4]
 8001a62:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a68:	642b      	str	r3, [r5, #64]	; 0x40
 8001a6a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 1);
 8001a72:	2201      	movs	r2, #1
 8001a74:	2106      	movs	r1, #6
 8001a76:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a78:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 1);
 8001a7a:	f000 ff19 	bl	80028b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a7e:	201f      	movs	r0, #31
 8001a80:	f000 ff60 	bl	8002944 <HAL_NVIC_EnableIRQ>
}
 8001a84:	b008      	add	sp, #32
 8001a86:	bd70      	pop	{r4, r5, r6, pc}
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020400 	.word	0x40020400

08001a94 <_write>:
/* Private user code ---------------------------------------------------------*/

int _write(int file, char *ptr, int len)
{
	/* Implement your write code here, this is used by puts and printf for example */
	for(uint16_t i=0 ; i<len ; i++)
 8001a94:	1e10      	subs	r0, r2, #0
 8001a96:	dd1c      	ble.n	8001ad2 <_write+0x3e>
{
 8001a98:	b430      	push	{r4, r5}
	for(uint16_t i=0 ; i<len ; i++)
 8001a9a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a9c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8001aa0:	f8d4 5e80 	ldr.w	r5, [r4, #3712]	; 0xe80
 8001aa4:	07ed      	lsls	r5, r5, #31
		ITM_SendChar((*ptr++));
 8001aa6:	f101 0101 	add.w	r1, r1, #1
 8001aaa:	d50c      	bpl.n	8001ac6 <_write+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001aac:	f8d4 2e00 	ldr.w	r2, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001ab0:	07d2      	lsls	r2, r2, #31
 8001ab2:	d508      	bpl.n	8001ac6 <_write+0x32>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001ab4:	6825      	ldr	r5, [r4, #0]
 8001ab6:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8001aba:	b91d      	cbnz	r5, 8001ac4 <_write+0x30>
    {
      __NOP();
 8001abc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001abe:	6825      	ldr	r5, [r4, #0]
 8001ac0:	2d00      	cmp	r5, #0
 8001ac2:	d0fb      	beq.n	8001abc <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001ac4:	7022      	strb	r2, [r4, #0]
	for(uint16_t i=0 ; i<len ; i++)
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	4283      	cmp	r3, r0
 8001acc:	dbe8      	blt.n	8001aa0 <_write+0xc>

	return len;
}
 8001ace:	bc30      	pop	{r4, r5}
 8001ad0:	4770      	bx	lr
 8001ad2:	4770      	bx	lr

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad6:	2300      	movs	r3, #0
{
 8001ad8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ada:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001ade:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001ae6:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4922      	ldr	r1, [pc, #136]	; (8001b74 <SystemClock_Config+0xa0>)
 8001aec:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aee:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001afa:	6408      	str	r0, [r1, #64]	; 0x40
 8001afc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001afe:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001b02:	9100      	str	r1, [sp, #0]
 8001b04:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	6813      	ldr	r3, [r2, #0]
 8001b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	6813      	ldr	r3, [r2, #0]
 8001b12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b16:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b18:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b1a:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1c:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b1e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b20:	2202      	movs	r2, #2
 8001b22:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b24:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b26:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b2a:	e9cd 410b 	strd	r4, r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2e:	25c8      	movs	r5, #200	; 0xc8
 8001b30:	2410      	movs	r4, #16
 8001b32:	2202      	movs	r2, #2
 8001b34:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 200;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b36:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b38:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8001b3c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b40:	f002 fbd2 	bl	80042e8 <HAL_RCC_OscConfig>
 8001b44:	b108      	cbz	r0, 8001b4a <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b46:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001b4a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4c:	240f      	movs	r4, #15
 8001b4e:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b50:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b52:	2200      	movs	r2, #0
 8001b54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b58:	a802      	add	r0, sp, #8
 8001b5a:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b5c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001b60:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b64:	f002 fe76 	bl	8004854 <HAL_RCC_ClockConfig>
 8001b68:	b108      	cbz	r0, 8001b6e <SystemClock_Config+0x9a>
 8001b6a:	b672      	cpsid	i
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <SystemClock_Config+0x98>
}
 8001b6e:	b015      	add	sp, #84	; 0x54
 8001b70:	bd30      	pop	{r4, r5, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40007000 	.word	0x40007000

08001b7c <main>:
{
 8001b7c:	b508      	push	{r3, lr}
  HAL_Init();
 8001b7e:	f000 fbf5 	bl	800236c <HAL_Init>
  SystemClock_Config();
 8001b82:	f7ff ffa7 	bl	8001ad4 <SystemClock_Config>
  MX_GPIO_Init();
 8001b86:	f7ff fe45 	bl	8001814 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b8a:	f7ff fe1f 	bl	80017cc <MX_DMA_Init>
  MX_ADC1_Init();
 8001b8e:	f7fe ff7b 	bl	8000a88 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001b92:	f7ff ff1f 	bl	80019d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001b96:	f000 facf 	bl	8002138 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001b9a:	f000 fb57 	bl	800224c <MX_TIM3_Init>
  printf("STM32F411RE Nucleo-64 Board\n");
 8001b9e:	480b      	ldr	r0, [pc, #44]	; (8001bcc <main+0x50>)
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8001ba0:	4c0b      	ldr	r4, [pc, #44]	; (8001bd0 <main+0x54>)
  printf("STM32F411RE Nucleo-64 Board\n");
 8001ba2:	f007 fded 	bl	8009780 <puts>
  printf("FreeRTOS-BLE-Car\n\n");
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <main+0x58>)
 8001ba8:	f007 fdea 	bl	8009780 <puts>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001bac:	f005 fb00 	bl	80071b0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001bb0:	f7ff fe2e 	bl	8001810 <MX_FREERTOS_Init>
  FRTOS_Init_Tasks();
 8001bb4:	f7ff fcea 	bl	800158c <FRTOS_Init_Tasks>
  osKernelStart();
 8001bb8:	f005 fb0c 	bl	80071d4 <osKernelStart>
	  HAL_GPIO_TogglePin(NUCLEO_LED_GPIO_Port, NUCLEO_LED_Pin);
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	f001 fbc8 	bl	8003354 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001bc4:	2064      	movs	r0, #100	; 0x64
 8001bc6:	f000 fbfd 	bl	80023c4 <HAL_Delay>
  while (1)
 8001bca:	e7f7      	b.n	8001bbc <main+0x40>
 8001bcc:	0800a7d0 	.word	0x0800a7d0
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	0800a7ec 	.word	0x0800a7ec

08001bd8 <Error_Handler>:
 8001bd8:	b672      	cpsid	i
  while (1)
 8001bda:	e7fe      	b.n	8001bda <Error_Handler+0x2>

08001bdc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001bdc:	460a      	mov	r2, r1
 8001bde:	b508      	push	{r3, lr}
	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8001be0:	4601      	mov	r1, r0
 8001be2:	4802      	ldr	r0, [pc, #8]	; (8001bec <assert_failed+0x10>)
 8001be4:	f007 fd46 	bl	8009674 <iprintf>
	for(;;);
 8001be8:	e7fe      	b.n	8001be8 <assert_failed+0xc>
 8001bea:	bf00      	nop
 8001bec:	0800a800 	.word	0x0800a800

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_MspInit+0x3c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	9200      	str	r2, [sp, #0]
 8001bf8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001bfa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001bfe:	6459      	str	r1, [r3, #68]	; 0x44
 8001c00:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c02:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001c06:	9100      	str	r1, [sp, #0]
 8001c08:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	9201      	str	r2, [sp, #4]
 8001c0c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c0e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001c12:	6419      	str	r1, [r3, #64]	; 0x40
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c24:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c26:	f000 be43 	b.w	80028b0 <HAL_NVIC_SetPriority>
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b530      	push	{r4, r5, lr}
 8001c32:	4601      	mov	r1, r0
 8001c34:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	201c      	movs	r0, #28
 8001c3a:	f000 fe39 	bl	80028b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c3e:	201c      	movs	r0, #28
 8001c40:	f000 fe80 	bl	8002944 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c44:	2500      	movs	r5, #0
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_InitTick+0x70>)
 8001c48:	9502      	str	r5, [sp, #8]
 8001c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c4c:	4c15      	ldr	r4, [pc, #84]	; (8001ca4 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c5a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5c:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c5e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c60:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c62:	f002 ff09 	bl	8004a78 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c66:	f002 fef7 	bl	8004a58 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_InitTick+0x78>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8001c6c:	6125      	str	r5, [r4, #16]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c6e:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	0c9b      	lsrs	r3, r3, #18
 8001c76:	3b01      	subs	r3, #1
  htim2.Instance = TIM2;
 8001c78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c7c:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001c80:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c82:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim2.Instance = TIM2;
 8001c86:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c88:	60e2      	str	r2, [r4, #12]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001c8a:	f003 fabf 	bl	800520c <HAL_TIM_Base_Init>
 8001c8e:	b110      	cbz	r0, 8001c96 <HAL_InitTick+0x66>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
 8001c90:	2001      	movs	r0, #1
}
 8001c92:	b009      	add	sp, #36	; 0x24
 8001c94:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim2);
 8001c96:	4620      	mov	r0, r4
 8001c98:	f003 fb8e 	bl	80053b8 <HAL_TIM_Base_Start_IT>
}
 8001c9c:	b009      	add	sp, #36	; 0x24
 8001c9e:	bd30      	pop	{r4, r5, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	20009a94 	.word	0x20009a94
 8001ca8:	431bde83 	.word	0x431bde83

08001cac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler>
 8001cae:	bf00      	nop

08001cb0 <HardFault_Handler>:
 * It extracts the location of stack frame and passes it to the handler written
 * in C as a pointer. We also extract the LR value as second parameter.
 */
void HardFault_Handler(void)
{
	asm(
 8001cb0:	f01e 0f04 	tst.w	lr, #4
 8001cb4:	bf0c      	ite	eq
 8001cb6:	f3ef 8008 	mrseq	r0, MSP
 8001cba:	f3ef 8009 	mrsne	r0, PSP
 8001cbe:	4671      	mov	r1, lr
 8001cc0:	f000 b802 	b.w	8001cc8 <HardFault_Handler_C>
		"MRSEQ  R0, MSP\n\t"
		"MRSNE  R0, PSP\n\t"
		"MOV    R1, LR\n\t"
		"B      (HardFault_Handler_C)\n\t"
	);
}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop

08001cc8 <HardFault_Handler_C>:
 * HardFault handler in C, with stack frame location and LR value extracted
 * from the assembly wrapper as input parameters
 */
void HardFault_Handler_C(unsigned long * hardfault_args, unsigned int lr_value)
{
	bus_fault_address       = SCB->BFAR;
 8001cc8:	4c43      	ldr	r4, [pc, #268]	; (8001dd8 <HardFault_Handler_C+0x110>)
 8001cca:	4a44      	ldr	r2, [pc, #272]	; (8001ddc <HardFault_Handler_C+0x114>)
	memmanage_fault_address = SCB->MMFAR;
	cfsr                    = SCB->CFSR;
 8001ccc:	4d44      	ldr	r5, [pc, #272]	; (8001de0 <HardFault_Handler_C+0x118>)

	stacked_r0  = ((unsigned long) hardfault_args[0]);
	stacked_r1  = ((unsigned long) hardfault_args[1]);
	stacked_r2  = ((unsigned long) hardfault_args[2]);
	stacked_r3  = ((unsigned long) hardfault_args[3]);
 8001cce:	f8df a174 	ldr.w	sl, [pc, #372]	; 8001e44 <HardFault_Handler_C+0x17c>
	stacked_r12 = ((unsigned long) hardfault_args[4]);
 8001cd2:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8001e48 <HardFault_Handler_C+0x180>
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 8001cd6:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8001e4c <HardFault_Handler_C+0x184>
{
 8001cda:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	bus_fault_address       = SCB->BFAR;
 8001cde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ce0:	6013      	str	r3, [r2, #0]
	memmanage_fault_address = SCB->MMFAR;
 8001ce2:	4a40      	ldr	r2, [pc, #256]	; (8001de4 <HardFault_Handler_C+0x11c>)
 8001ce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ce6:	6013      	str	r3, [r2, #0]
	cfsr                    = SCB->CFSR;
 8001ce8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cea:	602b      	str	r3, [r5, #0]
	stacked_r0  = ((unsigned long) hardfault_args[0]);
 8001cec:	4a3e      	ldr	r2, [pc, #248]	; (8001de8 <HardFault_Handler_C+0x120>)
 8001cee:	6806      	ldr	r6, [r0, #0]
	stacked_r1  = ((unsigned long) hardfault_args[1]);
 8001cf0:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <HardFault_Handler_C+0x124>)
	stacked_r0  = ((unsigned long) hardfault_args[0]);
 8001cf2:	6016      	str	r6, [r2, #0]
	stacked_r2  = ((unsigned long) hardfault_args[2]);
 8001cf4:	f8df b158 	ldr.w	fp, [pc, #344]	; 8001e50 <HardFault_Handler_C+0x188>
	stacked_r1  = ((unsigned long) hardfault_args[1]);
 8001cf8:	6842      	ldr	r2, [r0, #4]
 8001cfa:	601a      	str	r2, [r3, #0]
	stacked_r2  = ((unsigned long) hardfault_args[2]);
 8001cfc:	6883      	ldr	r3, [r0, #8]
 8001cfe:	f8cb 3000 	str.w	r3, [fp]
	stacked_r3  = ((unsigned long) hardfault_args[3]);
 8001d02:	68c3      	ldr	r3, [r0, #12]
 8001d04:	f8ca 3000 	str.w	r3, [sl]
	stacked_r12 = ((unsigned long) hardfault_args[4]);
 8001d08:	6903      	ldr	r3, [r0, #16]
 8001d0a:	f8c9 3000 	str.w	r3, [r9]
	stacked_pc  = ((unsigned long) hardfault_args[6]);
	stacked_psr = ((unsigned long) hardfault_args[7]);
 8001d0e:	e9d0 c206 	ldrd	ip, r2, [r0, #24]
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 8001d12:	6943      	ldr	r3, [r0, #20]
	stacked_pc  = ((unsigned long) hardfault_args[6]);
 8001d14:	4f36      	ldr	r7, [pc, #216]	; (8001df0 <HardFault_Handler_C+0x128>)
	stacked_lr  = ((unsigned long) hardfault_args[5]);
 8001d16:	f8c8 3000 	str.w	r3, [r8]
	stacked_psr = ((unsigned long) hardfault_args[7]);
 8001d1a:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HardFault_Handler_C+0x12c>)

	printf ("[HardFault]\n");
 8001d1c:	4836      	ldr	r0, [pc, #216]	; (8001df8 <HardFault_Handler_C+0x130>)
	stacked_pc  = ((unsigned long) hardfault_args[6]);
 8001d1e:	f8c7 c000 	str.w	ip, [r7]
	stacked_psr = ((unsigned long) hardfault_args[7]);
 8001d22:	601a      	str	r2, [r3, #0]
{
 8001d24:	460e      	mov	r6, r1
	printf ("[HardFault]\n");
 8001d26:	f007 fd2b 	bl	8009780 <puts>
	printf ("- Stack frame:\n");
 8001d2a:	4834      	ldr	r0, [pc, #208]	; (8001dfc <HardFault_Handler_C+0x134>)
 8001d2c:	f007 fd28 	bl	8009780 <puts>
	printf (" R0  = %lx\n", stacked_r0);
 8001d30:	4a2d      	ldr	r2, [pc, #180]	; (8001de8 <HardFault_Handler_C+0x120>)
 8001d32:	4833      	ldr	r0, [pc, #204]	; (8001e00 <HardFault_Handler_C+0x138>)
 8001d34:	6811      	ldr	r1, [r2, #0]
 8001d36:	f007 fc9d 	bl	8009674 <iprintf>
	printf (" R1  = %lx\n", stacked_r1);
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HardFault_Handler_C+0x124>)
 8001d3c:	4831      	ldr	r0, [pc, #196]	; (8001e04 <HardFault_Handler_C+0x13c>)
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	f007 fc98 	bl	8009674 <iprintf>
	printf (" R2  = %lx\n", stacked_r2);
 8001d44:	f8db 1000 	ldr.w	r1, [fp]
 8001d48:	482f      	ldr	r0, [pc, #188]	; (8001e08 <HardFault_Handler_C+0x140>)
 8001d4a:	f007 fc93 	bl	8009674 <iprintf>
	printf (" R3  = %lx\n", stacked_r3);
 8001d4e:	f8da 1000 	ldr.w	r1, [sl]
 8001d52:	482e      	ldr	r0, [pc, #184]	; (8001e0c <HardFault_Handler_C+0x144>)
 8001d54:	f007 fc8e 	bl	8009674 <iprintf>
	printf (" R12 = %lx\n", stacked_r12);
 8001d58:	f8d9 1000 	ldr.w	r1, [r9]
 8001d5c:	482c      	ldr	r0, [pc, #176]	; (8001e10 <HardFault_Handler_C+0x148>)
 8001d5e:	f007 fc89 	bl	8009674 <iprintf>
	printf (" LR  = %lx\n", stacked_lr);
 8001d62:	f8d8 1000 	ldr.w	r1, [r8]
 8001d66:	482b      	ldr	r0, [pc, #172]	; (8001e14 <HardFault_Handler_C+0x14c>)
 8001d68:	f007 fc84 	bl	8009674 <iprintf>
	printf (" PC  = %lx\n", stacked_pc);
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	482a      	ldr	r0, [pc, #168]	; (8001e18 <HardFault_Handler_C+0x150>)
 8001d70:	f007 fc80 	bl	8009674 <iprintf>
	printf (" PSR = %lx\n", stacked_psr);
 8001d74:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <HardFault_Handler_C+0x12c>)
 8001d76:	4829      	ldr	r0, [pc, #164]	; (8001e1c <HardFault_Handler_C+0x154>)
 8001d78:	6819      	ldr	r1, [r3, #0]
 8001d7a:	f007 fc7b 	bl	8009674 <iprintf>
	printf ("- FSR/FAR:\n");
 8001d7e:	4828      	ldr	r0, [pc, #160]	; (8001e20 <HardFault_Handler_C+0x158>)
 8001d80:	f007 fcfe 	bl	8009780 <puts>
	printf (" CFSR = %lx\n", cfsr);
 8001d84:	6829      	ldr	r1, [r5, #0]
 8001d86:	4827      	ldr	r0, [pc, #156]	; (8001e24 <HardFault_Handler_C+0x15c>)
 8001d88:	f007 fc74 	bl	8009674 <iprintf>
	printf (" HFSR = 0x%08X\n", (unsigned int)(SCB->HFSR));
 8001d8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d8e:	4826      	ldr	r0, [pc, #152]	; (8001e28 <HardFault_Handler_C+0x160>)
 8001d90:	f007 fc70 	bl	8009674 <iprintf>
	printf (" DFSR = 0x%08X\n", (unsigned int)(SCB->DFSR));
 8001d94:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d96:	4825      	ldr	r0, [pc, #148]	; (8001e2c <HardFault_Handler_C+0x164>)
 8001d98:	f007 fc6c 	bl	8009674 <iprintf>
	printf (" AFSR = 0x%08X\n", (unsigned int)(SCB->AFSR));
 8001d9c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d9e:	4824      	ldr	r0, [pc, #144]	; (8001e30 <HardFault_Handler_C+0x168>)
 8001da0:	f007 fc68 	bl	8009674 <iprintf>
	if (cfsr & 0x0080) printf (" MMFAR = %lx\n", memmanage_fault_address);
 8001da4:	682b      	ldr	r3, [r5, #0]
 8001da6:	061a      	lsls	r2, r3, #24
 8001da8:	d409      	bmi.n	8001dbe <HardFault_Handler_C+0xf6>
	if (cfsr & 0x8000) printf (" BFAR = %lx\n", bus_fault_address);
 8001daa:	041b      	lsls	r3, r3, #16
 8001dac:	d40e      	bmi.n	8001dcc <HardFault_Handler_C+0x104>
	printf ("- Misc\n");
 8001dae:	4821      	ldr	r0, [pc, #132]	; (8001e34 <HardFault_Handler_C+0x16c>)
 8001db0:	f007 fce6 	bl	8009780 <puts>
	printf (" LR/EXC_RETURN= %x\n", lr_value);
 8001db4:	4820      	ldr	r0, [pc, #128]	; (8001e38 <HardFault_Handler_C+0x170>)
 8001db6:	4631      	mov	r1, r6
 8001db8:	f007 fc5c 	bl	8009674 <iprintf>

	while(1); // endless loop
 8001dbc:	e7fe      	b.n	8001dbc <HardFault_Handler_C+0xf4>
	if (cfsr & 0x0080) printf (" MMFAR = %lx\n", memmanage_fault_address);
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HardFault_Handler_C+0x11c>)
 8001dc0:	481e      	ldr	r0, [pc, #120]	; (8001e3c <HardFault_Handler_C+0x174>)
 8001dc2:	6819      	ldr	r1, [r3, #0]
 8001dc4:	f007 fc56 	bl	8009674 <iprintf>
 8001dc8:	682b      	ldr	r3, [r5, #0]
 8001dca:	e7ee      	b.n	8001daa <HardFault_Handler_C+0xe2>
	if (cfsr & 0x8000) printf (" BFAR = %lx\n", bus_fault_address);
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HardFault_Handler_C+0x114>)
 8001dce:	481c      	ldr	r0, [pc, #112]	; (8001e40 <HardFault_Handler_C+0x178>)
 8001dd0:	6819      	ldr	r1, [r3, #0]
 8001dd2:	f007 fc4f 	bl	8009674 <iprintf>
 8001dd6:	e7ea      	b.n	8001dae <HardFault_Handler_C+0xe6>
 8001dd8:	e000ed00 	.word	0xe000ed00
 8001ddc:	20009ae0 	.word	0x20009ae0
 8001de0:	20009b04 	.word	0x20009b04
 8001de4:	20009adc 	.word	0x20009adc
 8001de8:	20009af4 	.word	0x20009af4
 8001dec:	20009ae4 	.word	0x20009ae4
 8001df0:	20009af0 	.word	0x20009af0
 8001df4:	20009afc 	.word	0x20009afc
 8001df8:	0800a830 	.word	0x0800a830
 8001dfc:	0800a83c 	.word	0x0800a83c
 8001e00:	0800a84c 	.word	0x0800a84c
 8001e04:	0800a858 	.word	0x0800a858
 8001e08:	0800a864 	.word	0x0800a864
 8001e0c:	0800a870 	.word	0x0800a870
 8001e10:	0800a87c 	.word	0x0800a87c
 8001e14:	0800a888 	.word	0x0800a888
 8001e18:	0800a894 	.word	0x0800a894
 8001e1c:	0800a8a0 	.word	0x0800a8a0
 8001e20:	0800a8ac 	.word	0x0800a8ac
 8001e24:	0800a8b8 	.word	0x0800a8b8
 8001e28:	0800a8c8 	.word	0x0800a8c8
 8001e2c:	0800a8d8 	.word	0x0800a8d8
 8001e30:	0800a8e8 	.word	0x0800a8e8
 8001e34:	0800a918 	.word	0x0800a918
 8001e38:	0800a920 	.word	0x0800a920
 8001e3c:	0800a8f8 	.word	0x0800a8f8
 8001e40:	0800a908 	.word	0x0800a908
 8001e44:	20009ae8 	.word	0x20009ae8
 8001e48:	20009af8 	.word	0x20009af8
 8001e4c:	20009aec 	.word	0x20009aec
 8001e50:	20009b00 	.word	0x20009b00

08001e54 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <MemManage_Handler>
 8001e56:	bf00      	nop

08001e58 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <BusFault_Handler>
 8001e5a:	bf00      	nop

08001e5c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler>
 8001e5e:	bf00      	nop

08001e60 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop

08001e64 <EXTI0_IRQHandler>:
/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001e64:	4801      	ldr	r0, [pc, #4]	; (8001e6c <EXTI0_IRQHandler+0x8>)
 8001e66:	f001 b82d 	b.w	8002ec4 <HAL_EXTI_IRQHandler>
 8001e6a:	bf00      	nop
 8001e6c:	200098a4 	.word	0x200098a4

08001e70 <TIM1_BRK_TIM9_IRQHandler>:
/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim9);
 8001e70:	4801      	ldr	r0, [pc, #4]	; (8001e78 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 8001e72:	f003 be0f 	b.w	8005a94 <HAL_TIM_IRQHandler>
 8001e76:	bf00      	nop
 8001e78:	20009be0 	.word	0x20009be0

08001e7c <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim2);
 8001e7c:	4801      	ldr	r0, [pc, #4]	; (8001e84 <TIM2_IRQHandler+0x8>)
 8001e7e:	f003 be09 	b.w	8005a94 <HAL_TIM_IRQHandler>
 8001e82:	bf00      	nop
 8001e84:	20009a94 	.word	0x20009a94

08001e88 <I2C1_EV_IRQHandler>:
/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e88:	4801      	ldr	r0, [pc, #4]	; (8001e90 <I2C1_EV_IRQHandler+0x8>)
 8001e8a:	f001 bd6d 	b.w	8003968 <HAL_I2C_EV_IRQHandler>
 8001e8e:	bf00      	nop
 8001e90:	20009a40 	.word	0x20009a40

08001e94 <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e98:	f001 ba72 	b.w	8003380 <HAL_GPIO_EXTI_IRQHandler>

08001e9c <TIM5_IRQHandler>:
/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim5);
 8001e9c:	4801      	ldr	r0, [pc, #4]	; (8001ea4 <TIM5_IRQHandler+0x8>)
 8001e9e:	f003 bdf9 	b.w	8005a94 <HAL_TIM_IRQHandler>
 8001ea2:	bf00      	nop
 8001ea4:	20009b08 	.word	0x20009b08

08001ea8 <DMA2_Stream0_IRQHandler>:
/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ea8:	4801      	ldr	r0, [pc, #4]	; (8001eb0 <DMA2_Stream0_IRQHandler+0x8>)
 8001eaa:	f000 beef 	b.w	8002c8c <HAL_DMA_IRQHandler>
 8001eae:	bf00      	nop
 8001eb0:	200098f4 	.word	0x200098f4

08001eb4 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM2)
 8001eb4:	6803      	ldr	r3, [r0, #0]
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d000      	beq.n	8001ebe <HAL_TIM_PeriodElapsedCallback+0xa>
	}
	else if(htim->Instance == TIM9)
	{

	}
}
 8001ebc:	4770      	bx	lr
		HAL_IncTick();
 8001ebe:	f000 ba6f 	b.w	80023a0 <HAL_IncTick>
 8001ec2:	bf00      	nop

08001ec4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == NUCLEO_PB_Pin)
 8001ec4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001ec8:	d000      	beq.n	8001ecc <HAL_GPIO_EXTI_Callback+0x8>
 8001eca:	4770      	bx	lr
{
 8001ecc:	b500      	push	{lr}
	{
		/* 10ms debounce button */
		HAL_Delay(10);
 8001ece:	200a      	movs	r0, #10
{
 8001ed0:	b085      	sub	sp, #20
		HAL_Delay(10);
 8001ed2:	f000 fa77 	bl	80023c4 <HAL_Delay>
		/* This value becomes pdTRUE if giving the notification caused a task to unblock, and the unblocked task has a
		   higher priority than the currently running task, in which a context switch should occur */
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;

		/* Notify task that manages BLE connections that a connection was successfully created */
		xTaskNotifyFromISR(h_TaskPBProcessing, FRTOS_TASK_NOTIF_PB_PRESSED, eSetBits, &xHigherPriorityTaskWoken);
 8001ed6:	480b      	ldr	r0, [pc, #44]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x40>)
 8001ed8:	a903      	add	r1, sp, #12
 8001eda:	2201      	movs	r2, #1
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001edc:	2300      	movs	r3, #0
		xTaskNotifyFromISR(h_TaskPBProcessing, FRTOS_TASK_NOTIF_PB_PRESSED, eSetBits, &xHigherPriorityTaskWoken);
 8001ede:	6800      	ldr	r0, [r0, #0]
 8001ee0:	9100      	str	r1, [sp, #0]
 8001ee2:	4611      	mov	r1, r2
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001ee4:	9303      	str	r3, [sp, #12]
		xTaskNotifyFromISR(h_TaskPBProcessing, FRTOS_TASK_NOTIF_PB_PRESSED, eSetBits, &xHigherPriorityTaskWoken);
 8001ee6:	f006 fe11 	bl	8008b0c <xTaskGenericNotifyFromISR>

		/* Force context switch if xHigherPriorityTaskWoken == pdTRUE. This does nothing if xHigherPriorityTaskWoken
		   is pdFALSE */
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001eea:	9b03      	ldr	r3, [sp, #12]
 8001eec:	b13b      	cbz	r3, 8001efe <HAL_GPIO_EXTI_Callback+0x3a>
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x44>)
 8001ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	f3bf 8f4f 	dsb	sy
 8001efa:	f3bf 8f6f 	isb	sy
	}
}
 8001efe:	b005      	add	sp, #20
 8001f00:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f04:	200099d0 	.word	0x200099d0
 8001f08:	e000ed04 	.word	0xe000ed04

08001f0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f0c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0e:	1e16      	subs	r6, r2, #0
 8001f10:	dd07      	ble.n	8001f22 <_read+0x16>
 8001f12:	460c      	mov	r4, r1
 8001f14:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001f16:	f3af 8000 	nop.w
 8001f1a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	42a5      	cmp	r5, r4
 8001f20:	d1f9      	bne.n	8001f16 <_read+0xa>
	}

return len;
}
 8001f22:	4630      	mov	r0, r6
 8001f24:	bd70      	pop	{r4, r5, r6, pc}
 8001f26:	bf00      	nop

08001f28 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop

08001f30 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f34:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001f36:	2000      	movs	r0, #0
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	4770      	bx	lr

08001f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f40:	2000      	movs	r0, #0
 8001f42:	4770      	bx	lr

08001f44 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001f48:	680b      	ldr	r3, [r1, #0]
{
 8001f4a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4c0c      	ldr	r4, [pc, #48]	; (8001f80 <_sbrk+0x3c>)
 8001f4e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001f50:	b12b      	cbz	r3, 8001f5e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f52:	4418      	add	r0, r3
 8001f54:	4290      	cmp	r0, r2
 8001f56:	d807      	bhi.n	8001f68 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f58:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <_sbrk+0x40>)
 8001f60:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001f62:	4418      	add	r0, r3
 8001f64:	4290      	cmp	r0, r2
 8001f66:	d9f7      	bls.n	8001f58 <_sbrk+0x14>
    errno = ENOMEM;
 8001f68:	f007 fb44 	bl	80095f4 <__errno>
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd10      	pop	{r4, pc}
 8001f78:	200001d0 	.word	0x200001d0
 8001f7c:	20020000 	.word	0x20020000
 8001f80:	00001f00 	.word	0x00001f00
 8001f84:	20009cb0 	.word	0x20009cb0

08001f88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f88:	4a03      	ldr	r2, [pc, #12]	; (8001f98 <SystemInit+0x10>)
 8001f8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM9_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f9c:	b500      	push	{lr}
	if(tim_baseHandle->Instance==TIM1)
 8001f9e:	4a2c      	ldr	r2, [pc, #176]	; (8002050 <HAL_TIM_Base_MspInit+0xb4>)
 8001fa0:	6803      	ldr	r3, [r0, #0]
 8001fa2:	4293      	cmp	r3, r2
{
 8001fa4:	b085      	sub	sp, #20
	if(tim_baseHandle->Instance==TIM1)
 8001fa6:	d01a      	beq.n	8001fde <HAL_TIM_Base_MspInit+0x42>
		__HAL_RCC_TIM1_CLK_ENABLE();
		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}
	else if(tim_baseHandle->Instance==TIM3)
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	; (8002054 <HAL_TIM_Base_MspInit+0xb8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d008      	beq.n	8001fc0 <HAL_TIM_Base_MspInit+0x24>
		__HAL_RCC_TIM3_CLK_ENABLE();
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
	else if(tim_baseHandle->Instance==TIM5)
 8001fae:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <HAL_TIM_Base_MspInit+0xbc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d023      	beq.n	8001ffc <HAL_TIM_Base_MspInit+0x60>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
		/* USER CODE BEGIN TIM5_MspInit 1 */

		/* USER CODE END TIM5_MspInit 1 */
	}
	else if(tim_baseHandle->Instance==TIM9)
 8001fb4:	4a29      	ldr	r2, [pc, #164]	; (800205c <HAL_TIM_Base_MspInit+0xc0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d037      	beq.n	800202a <HAL_TIM_Base_MspInit+0x8e>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
		/* USER CODE BEGIN TIM9_MspInit 1 */

		/* USER CODE END TIM9_MspInit 1 */
	}
}
 8001fba:	b005      	add	sp, #20
 8001fbc:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM3_CLK_ENABLE();
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_TIM_Base_MspInit+0xc4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	9201      	str	r2, [sp, #4]
 8001fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc8:	f042 0202 	orr.w	r2, r2, #2
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	9b01      	ldr	r3, [sp, #4]
}
 8001fd8:	b005      	add	sp, #20
 8001fda:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_TIM_Base_MspInit+0xc4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	9200      	str	r2, [sp, #0]
 8001fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	645a      	str	r2, [r3, #68]	; 0x44
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	9b00      	ldr	r3, [sp, #0]
}
 8001ff6:	b005      	add	sp, #20
 8001ff8:	f85d fb04 	ldr.w	pc, [sp], #4
		__HAL_RCC_TIM5_CLK_ENABLE();
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_TIM_Base_MspInit+0xc4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	9202      	str	r2, [sp, #8]
 8002002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002004:	f042 0208 	orr.w	r2, r2, #8
 8002008:	641a      	str	r2, [r3, #64]	; 0x40
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	9302      	str	r3, [sp, #8]
		HAL_NVIC_SetPriority(TIM5_IRQn, 7, 1);
 8002012:	2032      	movs	r0, #50	; 0x32
 8002014:	2201      	movs	r2, #1
 8002016:	2107      	movs	r1, #7
		__HAL_RCC_TIM5_CLK_ENABLE();
 8002018:	9b02      	ldr	r3, [sp, #8]
		HAL_NVIC_SetPriority(TIM5_IRQn, 7, 1);
 800201a:	f000 fc49 	bl	80028b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800201e:	2032      	movs	r0, #50	; 0x32
}
 8002020:	b005      	add	sp, #20
 8002022:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002026:	f000 bc8d 	b.w	8002944 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM9_CLK_ENABLE();
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_TIM_Base_MspInit+0xc4>)
 800202c:	2200      	movs	r2, #0
 800202e:	9203      	str	r2, [sp, #12]
 8002030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002032:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002036:	645a      	str	r2, [r3, #68]	; 0x44
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	9303      	str	r3, [sp, #12]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 2);
 8002040:	2018      	movs	r0, #24
 8002042:	2202      	movs	r2, #2
 8002044:	2107      	movs	r1, #7
		__HAL_RCC_TIM9_CLK_ENABLE();
 8002046:	9b03      	ldr	r3, [sp, #12]
		HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 7, 2);
 8002048:	f000 fc32 	bl	80028b0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800204c:	2018      	movs	r0, #24
 800204e:	e7e7      	b.n	8002020 <HAL_TIM_Base_MspInit+0x84>
 8002050:	40010000 	.word	0x40010000
 8002054:	40000400 	.word	0x40000400
 8002058:	40000c00 	.word	0x40000c00
 800205c:	40014000 	.word	0x40014000
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002064:	b570      	push	{r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
	if(timHandle->Instance==TIM1)
 8002066:	6802      	ldr	r2, [r0, #0]
 8002068:	492d      	ldr	r1, [pc, #180]	; (8002120 <HAL_TIM_MspPostInit+0xbc>)
{
 800206a:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	2300      	movs	r3, #0
	if(timHandle->Instance==TIM1)
 800206e:	428a      	cmp	r2, r1
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002074:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002078:	9308      	str	r3, [sp, #32]
	if(timHandle->Instance==TIM1)
 800207a:	d004      	beq.n	8002086 <HAL_TIM_MspPostInit+0x22>

		/* USER CODE BEGIN TIM1_MspPostInit 1 */

		/* USER CODE END TIM1_MspPostInit 1 */
	}
	else if(timHandle->Instance==TIM3)
 800207c:	4929      	ldr	r1, [pc, #164]	; (8002124 <HAL_TIM_MspPostInit+0xc0>)
 800207e:	428a      	cmp	r2, r1
 8002080:	d01d      	beq.n	80020be <HAL_TIM_MspPostInit+0x5a>
		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}

}
 8002082:	b00a      	add	sp, #40	; 0x28
 8002084:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002086:	4a28      	ldr	r2, [pc, #160]	; (8002128 <HAL_TIM_MspPostInit+0xc4>)
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	6b13      	ldr	r3, [r2, #48]	; 0x30
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	4827      	ldr	r0, [pc, #156]	; (800212c <HAL_TIM_MspPostInit+0xc8>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	9301      	str	r3, [sp, #4]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800209c:	2301      	movs	r3, #1
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	9a01      	ldr	r2, [sp, #4]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020a0:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020a2:	2200      	movs	r2, #0
 80020a4:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	a904      	add	r1, sp, #16
		GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020a8:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80020ac:	2502      	movs	r5, #2
 80020ae:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80020b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b6:	f000 ff1b 	bl	8002ef0 <HAL_GPIO_Init>
}
 80020ba:	b00a      	add	sp, #40	; 0x28
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <HAL_TIM_MspPostInit+0xc4>)
 80020c0:	9302      	str	r3, [sp, #8]
 80020c2:	6b11      	ldr	r1, [r2, #48]	; 0x30
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c4:	481a      	ldr	r0, [pc, #104]	; (8002130 <HAL_TIM_MspPostInit+0xcc>)
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80020c6:	f041 0104 	orr.w	r1, r1, #4
 80020ca:	6311      	str	r1, [r2, #48]	; 0x30
 80020cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80020ce:	f001 0104 	and.w	r1, r1, #4
 80020d2:	9102      	str	r1, [sp, #8]
 80020d4:	9902      	ldr	r1, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	9303      	str	r3, [sp, #12]
 80020d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	6313      	str	r3, [r2, #48]	; 0x30
 80020e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	9303      	str	r3, [sp, #12]
 80020e8:	9903      	ldr	r1, [sp, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	2302      	movs	r3, #2
 80020ee:	2400      	movs	r4, #0
 80020f0:	2500      	movs	r5, #0
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f2:	2602      	movs	r6, #2
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f4:	a904      	add	r1, sp, #16
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80020fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020fe:	9608      	str	r6, [sp, #32]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f000 fef6 	bl	8002ef0 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002104:	2210      	movs	r2, #16
 8002106:	2302      	movs	r3, #2
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002108:	480a      	ldr	r0, [pc, #40]	; (8002134 <HAL_TIM_MspPostInit+0xd0>)
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800210a:	9608      	str	r6, [sp, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210c:	a904      	add	r1, sp, #16
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 800210e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002112:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f000 feeb 	bl	8002ef0 <HAL_GPIO_Init>
}
 800211a:	b00a      	add	sp, #40	; 0x28
 800211c:	bd70      	pop	{r4, r5, r6, pc}
 800211e:	bf00      	nop
 8002120:	40010000 	.word	0x40010000
 8002124:	40000400 	.word	0x40000400
 8002128:	40023800 	.word	0x40023800
 800212c:	40020000 	.word	0x40020000
 8002130:	40020800 	.word	0x40020800
 8002134:	40020400 	.word	0x40020400

08002138 <MX_TIM1_Init>:
{
 8002138:	b570      	push	{r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213a:	2400      	movs	r4, #0
{
 800213c:	b096      	sub	sp, #88	; 0x58
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800213e:	4621      	mov	r1, r4
 8002140:	2220      	movs	r2, #32
 8002142:	a80e      	add	r0, sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002144:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002148:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002150:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002154:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002158:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800215a:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	9401      	str	r4, [sp, #4]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800215e:	f007 fa81 	bl	8009664 <memset>
  htim1.Instance = TIM1;
 8002162:	4838      	ldr	r0, [pc, #224]	; (8002244 <MX_TIM1_Init+0x10c>)
 8002164:	4938      	ldr	r1, [pc, #224]	; (8002248 <MX_TIM1_Init+0x110>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	6084      	str	r4, [r0, #8]
  htim1.Init.Prescaler = 9;
 8002168:	2209      	movs	r2, #9
  htim1.Init.Period = 999;
 800216a:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Init.RepetitionCounter = 0;
 800216e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  htim1.Init.Prescaler = 9;
 8002172:	e9c0 1200 	strd	r1, r2, [r0]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002176:	6184      	str	r4, [r0, #24]
  htim1.Init.Period = 999;
 8002178:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800217a:	f003 f847 	bl	800520c <HAL_TIM_Base_Init>
 800217e:	2800      	cmp	r0, #0
 8002180:	d146      	bne.n	8002210 <MX_TIM1_Init+0xd8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002186:	482f      	ldr	r0, [pc, #188]	; (8002244 <MX_TIM1_Init+0x10c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002188:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800218a:	a902      	add	r1, sp, #8
 800218c:	f003 fa48 	bl	8005620 <HAL_TIM_ConfigClockSource>
 8002190:	2800      	cmp	r0, #0
 8002192:	d153      	bne.n	800223c <MX_TIM1_Init+0x104>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002194:	482b      	ldr	r0, [pc, #172]	; (8002244 <MX_TIM1_Init+0x10c>)
 8002196:	f003 f96d 	bl	8005474 <HAL_TIM_PWM_Init>
 800219a:	2800      	cmp	r0, #0
 800219c:	d14b      	bne.n	8002236 <MX_TIM1_Init+0xfe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219e:	2200      	movs	r2, #0
 80021a0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021a2:	4828      	ldr	r0, [pc, #160]	; (8002244 <MX_TIM1_Init+0x10c>)
 80021a4:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021aa:	f003 fecf 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 80021ae:	2800      	cmp	r0, #0
 80021b0:	d13e      	bne.n	8002230 <MX_TIM1_Init+0xf8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b2:	2060      	movs	r0, #96	; 0x60
 80021b4:	2100      	movs	r1, #0
 80021b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80021ba:	2000      	movs	r0, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80021c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021c6:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021c8:	481e      	ldr	r0, [pc, #120]	; (8002244 <MX_TIM1_Init+0x10c>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021ca:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021cc:	2204      	movs	r2, #4
 80021ce:	a906      	add	r1, sp, #24
 80021d0:	f003 fd5e 	bl	8005c90 <HAL_TIM_PWM_ConfigChannel>
 80021d4:	bb48      	cbnz	r0, 800222a <MX_TIM1_Init+0xf2>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021d6:	481b      	ldr	r0, [pc, #108]	; (8002244 <MX_TIM1_Init+0x10c>)
 80021d8:	a906      	add	r1, sp, #24
 80021da:	2208      	movs	r2, #8
 80021dc:	f003 fd58 	bl	8005c90 <HAL_TIM_PWM_ConfigChannel>
 80021e0:	bb00      	cbnz	r0, 8002224 <MX_TIM1_Init+0xec>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021e2:	2200      	movs	r2, #0
 80021e4:	2300      	movs	r3, #0
 80021e6:	2400      	movs	r4, #0
 80021e8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021ec:	2600      	movs	r6, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021ee:	4815      	ldr	r0, [pc, #84]	; (8002244 <MX_TIM1_Init+0x10c>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021f0:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021f2:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80021f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80021fc:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002200:	f003 ff10 	bl	8006024 <HAL_TIMEx_ConfigBreakDeadTime>
 8002204:	b938      	cbnz	r0, 8002216 <MX_TIM1_Init+0xde>
  HAL_TIM_MspPostInit(&htim1);
 8002206:	480f      	ldr	r0, [pc, #60]	; (8002244 <MX_TIM1_Init+0x10c>)
 8002208:	f7ff ff2c 	bl	8002064 <HAL_TIM_MspPostInit>
}
 800220c:	b016      	add	sp, #88	; 0x58
 800220e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002210:	f7ff fce2 	bl	8001bd8 <Error_Handler>
 8002214:	e7b5      	b.n	8002182 <MX_TIM1_Init+0x4a>
    Error_Handler();
 8002216:	f7ff fcdf 	bl	8001bd8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 800221a:	480a      	ldr	r0, [pc, #40]	; (8002244 <MX_TIM1_Init+0x10c>)
 800221c:	f7ff ff22 	bl	8002064 <HAL_TIM_MspPostInit>
}
 8002220:	b016      	add	sp, #88	; 0x58
 8002222:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002224:	f7ff fcd8 	bl	8001bd8 <Error_Handler>
 8002228:	e7db      	b.n	80021e2 <MX_TIM1_Init+0xaa>
    Error_Handler();
 800222a:	f7ff fcd5 	bl	8001bd8 <Error_Handler>
 800222e:	e7d2      	b.n	80021d6 <MX_TIM1_Init+0x9e>
    Error_Handler();
 8002230:	f7ff fcd2 	bl	8001bd8 <Error_Handler>
 8002234:	e7bd      	b.n	80021b2 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8002236:	f7ff fccf 	bl	8001bd8 <Error_Handler>
 800223a:	e7b0      	b.n	800219e <MX_TIM1_Init+0x66>
    Error_Handler();
 800223c:	f7ff fccc 	bl	8001bd8 <Error_Handler>
 8002240:	e7a8      	b.n	8002194 <MX_TIM1_Init+0x5c>
 8002242:	bf00      	nop
 8002244:	20009b98 	.word	0x20009b98
 8002248:	40010000 	.word	0x40010000

0800224c <MX_TIM3_Init>:
{
 800224c:	b530      	push	{r4, r5, lr}
  htim3.Instance = TIM3;
 800224e:	4830      	ldr	r0, [pc, #192]	; (8002310 <MX_TIM3_Init+0xc4>)
 8002250:	4b30      	ldr	r3, [pc, #192]	; (8002314 <MX_TIM3_Init+0xc8>)
 8002252:	6003      	str	r3, [r0, #0]
{
 8002254:	b08f      	sub	sp, #60	; 0x3c
  htim3.Init.Period = 999;
 8002256:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim3.Init.Prescaler = 9;
 800225a:	2209      	movs	r2, #9
  htim3.Init.Period = 999;
 800225c:	60c3      	str	r3, [r0, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225e:	2300      	movs	r3, #0
 8002260:	e9cd 3303 	strd	r3, r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002264:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8002268:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800226c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  htim3.Init.Prescaler = 9;
 8002270:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	6083      	str	r3, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002274:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002276:	9300      	str	r3, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002278:	9306      	str	r3, [sp, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227c:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227e:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002280:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002282:	f002 ffc3 	bl	800520c <HAL_TIM_Base_Init>
 8002286:	bb60      	cbnz	r0, 80022e2 <MX_TIM3_Init+0x96>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800228c:	4820      	ldr	r0, [pc, #128]	; (8002310 <MX_TIM3_Init+0xc4>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800228e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002290:	a902      	add	r1, sp, #8
 8002292:	f003 f9c5 	bl	8005620 <HAL_TIM_ConfigClockSource>
 8002296:	2800      	cmp	r0, #0
 8002298:	d136      	bne.n	8002308 <MX_TIM3_Init+0xbc>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800229a:	481d      	ldr	r0, [pc, #116]	; (8002310 <MX_TIM3_Init+0xc4>)
 800229c:	f003 f8ea 	bl	8005474 <HAL_TIM_PWM_Init>
 80022a0:	bb78      	cbnz	r0, 8002302 <MX_TIM3_Init+0xb6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a2:	2200      	movs	r2, #0
 80022a4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022a6:	481a      	ldr	r0, [pc, #104]	; (8002310 <MX_TIM3_Init+0xc4>)
 80022a8:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022aa:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022ae:	f003 fe4d 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	bb18      	cbnz	r0, 80022fc <MX_TIM3_Init+0xb0>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b4:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b6:	2460      	movs	r4, #96	; 0x60
 80022b8:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ba:	4815      	ldr	r0, [pc, #84]	; (8002310 <MX_TIM3_Init+0xc4>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022bc:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022be:	a906      	add	r1, sp, #24
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c4:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c6:	f003 fce3 	bl	8005c90 <HAL_TIM_PWM_ConfigChannel>
 80022ca:	b9a0      	cbnz	r0, 80022f6 <MX_TIM3_Init+0xaa>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022cc:	4810      	ldr	r0, [pc, #64]	; (8002310 <MX_TIM3_Init+0xc4>)
 80022ce:	a906      	add	r1, sp, #24
 80022d0:	2204      	movs	r2, #4
 80022d2:	f003 fcdd 	bl	8005c90 <HAL_TIM_PWM_ConfigChannel>
 80022d6:	b938      	cbnz	r0, 80022e8 <MX_TIM3_Init+0x9c>
  HAL_TIM_MspPostInit(&htim3);
 80022d8:	480d      	ldr	r0, [pc, #52]	; (8002310 <MX_TIM3_Init+0xc4>)
 80022da:	f7ff fec3 	bl	8002064 <HAL_TIM_MspPostInit>
}
 80022de:	b00f      	add	sp, #60	; 0x3c
 80022e0:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80022e2:	f7ff fc79 	bl	8001bd8 <Error_Handler>
 80022e6:	e7cf      	b.n	8002288 <MX_TIM3_Init+0x3c>
    Error_Handler();
 80022e8:	f7ff fc76 	bl	8001bd8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 80022ec:	4808      	ldr	r0, [pc, #32]	; (8002310 <MX_TIM3_Init+0xc4>)
 80022ee:	f7ff feb9 	bl	8002064 <HAL_TIM_MspPostInit>
}
 80022f2:	b00f      	add	sp, #60	; 0x3c
 80022f4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80022f6:	f7ff fc6f 	bl	8001bd8 <Error_Handler>
 80022fa:	e7e7      	b.n	80022cc <MX_TIM3_Init+0x80>
    Error_Handler();
 80022fc:	f7ff fc6c 	bl	8001bd8 <Error_Handler>
 8002300:	e7d8      	b.n	80022b4 <MX_TIM3_Init+0x68>
    Error_Handler();
 8002302:	f7ff fc69 	bl	8001bd8 <Error_Handler>
 8002306:	e7cc      	b.n	80022a2 <MX_TIM3_Init+0x56>
    Error_Handler();
 8002308:	f7ff fc66 	bl	8001bd8 <Error_Handler>
 800230c:	e7c5      	b.n	800229a <MX_TIM3_Init+0x4e>
 800230e:	bf00      	nop
 8002310:	20009b50 	.word	0x20009b50
 8002314:	40000400 	.word	0x40000400

08002318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002350 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800231c:	480d      	ldr	r0, [pc, #52]	; (8002354 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800231e:	490e      	ldr	r1, [pc, #56]	; (8002358 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002320:	4a0e      	ldr	r2, [pc, #56]	; (800235c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002324:	e002      	b.n	800232c <LoopCopyDataInit>

08002326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232a:	3304      	adds	r3, #4

0800232c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800232c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002330:	d3f9      	bcc.n	8002326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002334:	4c0b      	ldr	r4, [pc, #44]	; (8002364 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002338:	e001      	b.n	800233e <LoopFillZerobss>

0800233a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800233c:	3204      	adds	r2, #4

0800233e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002340:	d3fb      	bcc.n	800233a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002342:	f7ff fe21 	bl	8001f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002346:	f007 f95b 	bl	8009600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234a:	f7ff fc17 	bl	8001b7c <main>
  bx  lr    
 800234e:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8002350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002358:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800235c:	0800ae34 	.word	0x0800ae34
  ldr r2, =_sbss
 8002360:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002364:	20009cac 	.word	0x20009cac

08002368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC_IRQHandler>
	...

0800236c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800236c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_Init+0x30>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800237e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002386:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002388:	2003      	movs	r0, #3
 800238a:	f000 fa73 	bl	8002874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800238e:	2000      	movs	r0, #0
 8002390:	f7ff fc4e 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002394:	f7ff fc2c 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002398:	2000      	movs	r0, #0
 800239a:	bd08      	pop	{r3, pc}
 800239c:	40023c00 	.word	0x40023c00

080023a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80023a0:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <HAL_IncTick+0x10>)
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HAL_IncTick+0x14>)
 80023a4:	6811      	ldr	r1, [r2, #0]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	440b      	add	r3, r1
 80023aa:	6013      	str	r3, [r2, #0]
}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20009c28 	.word	0x20009c28
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80023b8:	4b01      	ldr	r3, [pc, #4]	; (80023c0 <HAL_GetTick+0x8>)
 80023ba:	6818      	ldr	r0, [r3, #0]
}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20009c28 	.word	0x20009c28

080023c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff fff6 	bl	80023b8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023cc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80023ce:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80023d0:	d002      	beq.n	80023d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d2:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <HAL_Delay+0x20>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d8:	f7ff ffee 	bl	80023b8 <HAL_GetTick>
 80023dc:	1b43      	subs	r3, r0, r5
 80023de:	42a3      	cmp	r3, r4
 80023e0:	d3fa      	bcc.n	80023d8 <HAL_Delay+0x14>
  {
  }
}
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	20000004 	.word	0x20000004

080023e8 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023e8:	2800      	cmp	r0, #0
 80023ea:	f000 8140 	beq.w	800266e <HAL_ADC_Init+0x286>
{
 80023ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80023f0:	6802      	ldr	r2, [r0, #0]
 80023f2:	4ba7      	ldr	r3, [pc, #668]	; (8002690 <HAL_ADC_Init+0x2a8>)
 80023f4:	429a      	cmp	r2, r3
 80023f6:	4604      	mov	r4, r0
 80023f8:	d004      	beq.n	8002404 <HAL_ADC_Init+0x1c>
 80023fa:	48a6      	ldr	r0, [pc, #664]	; (8002694 <HAL_ADC_Init+0x2ac>)
 80023fc:	f240 1143 	movw	r1, #323	; 0x143
 8002400:	f7ff fbec 	bl	8001bdc <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002404:	6863      	ldr	r3, [r4, #4]
 8002406:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800240a:	d004      	beq.n	8002416 <HAL_ADC_Init+0x2e>
 800240c:	48a1      	ldr	r0, [pc, #644]	; (8002694 <HAL_ADC_Init+0x2ac>)
 800240e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002412:	f7ff fbe3 	bl	8001bdc <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002416:	68a3      	ldr	r3, [r4, #8]
 8002418:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800241c:	d004      	beq.n	8002428 <HAL_ADC_Init+0x40>
 800241e:	489d      	ldr	r0, [pc, #628]	; (8002694 <HAL_ADC_Init+0x2ac>)
 8002420:	f240 1145 	movw	r1, #325	; 0x145
 8002424:	f7ff fbda 	bl	8001bdc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002428:	6923      	ldr	r3, [r4, #16]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d879      	bhi.n	8002522 <HAL_ADC_Init+0x13a>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800242e:	7e23      	ldrb	r3, [r4, #24]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d86a      	bhi.n	800250a <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002434:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002436:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 800243a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800243e:	d014      	beq.n	800246a <HAL_ADC_Init+0x82>
 8002440:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8002444:	d011      	beq.n	800246a <HAL_ADC_Init+0x82>
 8002446:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800244a:	d00e      	beq.n	800246a <HAL_ADC_Init+0x82>
 800244c:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
 8002450:	d00b      	beq.n	800246a <HAL_ADC_Init+0x82>
 8002452:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002456:	d008      	beq.n	800246a <HAL_ADC_Init+0x82>
 8002458:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 800245c:	2b01      	cmp	r3, #1
 800245e:	d904      	bls.n	800246a <HAL_ADC_Init+0x82>
 8002460:	488c      	ldr	r0, [pc, #560]	; (8002694 <HAL_ADC_Init+0x2ac>)
 8002462:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002466:	f7ff fbb9 	bl	8001bdc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800246a:	68e3      	ldr	r3, [r4, #12]
 800246c:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8002470:	d122      	bne.n	80024b8 <HAL_ADC_Init+0xd0>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002472:	69e3      	ldr	r3, [r4, #28]
 8002474:	3b01      	subs	r3, #1
 8002476:	2b0f      	cmp	r3, #15
 8002478:	d827      	bhi.n	80024ca <HAL_ADC_Init+0xe2>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800247a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800247e:	2b01      	cmp	r3, #1
 8002480:	d82c      	bhi.n	80024dc <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002482:	6963      	ldr	r3, [r4, #20]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d831      	bhi.n	80024ec <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002488:	f894 3020 	ldrb.w	r3, [r4, #32]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d836      	bhi.n	80024fe <HAL_ADC_Init+0x116>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002490:	4b81      	ldr	r3, [pc, #516]	; (8002698 <HAL_ADC_Init+0x2b0>)
 8002492:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002494:	429a      	cmp	r2, r3
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_Init+0xba>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002498:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800249a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800249e:	f040 80d7 	bne.w	8002650 <HAL_ADC_Init+0x268>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024a2:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80024a4:	2d00      	cmp	r5, #0
 80024a6:	d045      	beq.n	8002534 <HAL_ADC_Init+0x14c>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024aa:	06db      	lsls	r3, r3, #27
 80024ac:	d54b      	bpl.n	8002546 <HAL_ADC_Init+0x15e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024ae:	2300      	movs	r3, #0
 80024b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 80024b4:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 80024b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80024b8:	4876      	ldr	r0, [pc, #472]	; (8002694 <HAL_ADC_Init+0x2ac>)
 80024ba:	f240 1149 	movw	r1, #329	; 0x149
 80024be:	f7ff fb8d 	bl	8001bdc <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80024c2:	69e3      	ldr	r3, [r4, #28]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	2b0f      	cmp	r3, #15
 80024c8:	d9d7      	bls.n	800247a <HAL_ADC_Init+0x92>
 80024ca:	4872      	ldr	r0, [pc, #456]	; (8002694 <HAL_ADC_Init+0x2ac>)
 80024cc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80024d0:	f7ff fb84 	bl	8001bdc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80024d4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d9d2      	bls.n	8002482 <HAL_ADC_Init+0x9a>
 80024dc:	486d      	ldr	r0, [pc, #436]	; (8002694 <HAL_ADC_Init+0x2ac>)
 80024de:	f240 114b 	movw	r1, #331	; 0x14b
 80024e2:	f7ff fb7b 	bl	8001bdc <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80024e6:	6963      	ldr	r3, [r4, #20]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d9cd      	bls.n	8002488 <HAL_ADC_Init+0xa0>
 80024ec:	4869      	ldr	r0, [pc, #420]	; (8002694 <HAL_ADC_Init+0x2ac>)
 80024ee:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80024f2:	f7ff fb73 	bl	8001bdc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80024f6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d9c8      	bls.n	8002490 <HAL_ADC_Init+0xa8>
 80024fe:	4865      	ldr	r0, [pc, #404]	; (8002694 <HAL_ADC_Init+0x2ac>)
 8002500:	f240 114d 	movw	r1, #333	; 0x14d
 8002504:	f7ff fb6a 	bl	8001bdc <assert_failed>
 8002508:	e7c2      	b.n	8002490 <HAL_ADC_Init+0xa8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800250a:	f240 1147 	movw	r1, #327	; 0x147
 800250e:	4861      	ldr	r0, [pc, #388]	; (8002694 <HAL_ADC_Init+0x2ac>)
 8002510:	f7ff fb64 	bl	8001bdc <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002514:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002516:	f033 7240 	bics.w	r2, r3, #50331648	; 0x3000000
 800251a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800251e:	d0a4      	beq.n	800246a <HAL_ADC_Init+0x82>
 8002520:	e78e      	b.n	8002440 <HAL_ADC_Init+0x58>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002522:	485c      	ldr	r0, [pc, #368]	; (8002694 <HAL_ADC_Init+0x2ac>)
 8002524:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002528:	f7ff fb58 	bl	8001bdc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800252c:	7e23      	ldrb	r3, [r4, #24]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d980      	bls.n	8002434 <HAL_ADC_Init+0x4c>
 8002532:	e7ea      	b.n	800250a <HAL_ADC_Init+0x122>
    HAL_ADC_MspInit(hadc);
 8002534:	4620      	mov	r0, r4
 8002536:	f7fe fadf 	bl	8000af8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800253a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800253c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800253e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002542:	06db      	lsls	r3, r3, #27
 8002544:	d4b3      	bmi.n	80024ae <HAL_ADC_Init+0xc6>
    ADC_STATE_CLR_SET(hadc->State,
 8002546:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002548:	4954      	ldr	r1, [pc, #336]	; (800269c <HAL_ADC_Init+0x2b4>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800254a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800254c:	4d52      	ldr	r5, [pc, #328]	; (8002698 <HAL_ADC_Init+0x2b0>)
    ADC_STATE_CLR_SET(hadc->State,
 800254e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002552:	f022 0202 	bic.w	r2, r2, #2
 8002556:	f042 0202 	orr.w	r2, r2, #2
 800255a:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800255c:	684a      	ldr	r2, [r1, #4]
 800255e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002562:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002564:	684a      	ldr	r2, [r1, #4]
 8002566:	6860      	ldr	r0, [r4, #4]
 8002568:	4302      	orrs	r2, r0
 800256a:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800256c:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800256e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002570:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002572:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002574:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002578:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002582:	6858      	ldr	r0, [r3, #4]
 8002584:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8002588:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800258a:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800258e:	4339      	orrs	r1, r7
 8002590:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002598:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800259a:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259c:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800259e:	ea42 0206 	orr.w	r2, r2, r6
 80025a2:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a4:	d05a      	beq.n	800265c <HAL_ADC_Init+0x274>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a6:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025a8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025aa:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80025ae:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	4310      	orrs	r0, r2
 80025b4:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025b6:	6899      	ldr	r1, [r3, #8]
 80025b8:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80025bc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	432a      	orrs	r2, r5
 80025c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	f022 0202 	bic.w	r2, r2, #2
 80025ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	7e21      	ldrb	r1, [r4, #24]
 80025d0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80025d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025d6:	f894 2020 	ldrb.w	r2, [r4, #32]
 80025da:	2a00      	cmp	r2, #0
 80025dc:	d049      	beq.n	8002672 <HAL_ADC_Init+0x28a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80025de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025e0:	3a01      	subs	r2, #1
 80025e2:	2a07      	cmp	r2, #7
 80025e4:	d84a      	bhi.n	800267c <HAL_ADC_Init+0x294>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80025ec:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80025f4:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 80025fc:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002600:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002602:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002604:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002608:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800260a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800260c:	3801      	subs	r0, #1
 800260e:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8002612:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800261a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002622:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8002626:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800262e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002630:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002632:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002634:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8002638:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800263a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800263c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002648:	2300      	movs	r3, #0
 800264a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800264e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002650:	4810      	ldr	r0, [pc, #64]	; (8002694 <HAL_ADC_Init+0x2ac>)
 8002652:	f240 1151 	movw	r1, #337	; 0x151
 8002656:	f7ff fac1 	bl	8001bdc <assert_failed>
 800265a:	e722      	b.n	80024a2 <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002662:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	e7aa      	b.n	80025c4 <HAL_ADC_Init+0x1dc>
    return HAL_ERROR;
 800266e:	2001      	movs	r0, #1
}
 8002670:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	e7c0      	b.n	80025fe <HAL_ADC_Init+0x216>
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800267c:	4805      	ldr	r0, [pc, #20]	; (8002694 <HAL_ADC_Init+0x2ac>)
 800267e:	f240 71a6 	movw	r1, #1958	; 0x7a6
 8002682:	f7ff faab 	bl	8001bdc <assert_failed>
 8002686:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	3a01      	subs	r2, #1
 800268c:	e7ab      	b.n	80025e6 <HAL_ADC_Init+0x1fe>
 800268e:	bf00      	nop
 8002690:	40012000 	.word	0x40012000
 8002694:	0800a94c 	.word	0x0800a94c
 8002698:	0f000001 	.word	0x0f000001
 800269c:	40012300 	.word	0x40012300

080026a0 <HAL_ADC_ConfigChannel>:
{
 80026a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80026a2:	680b      	ldr	r3, [r1, #0]
{
 80026a4:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80026a6:	2200      	movs	r2, #0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80026a8:	2b12      	cmp	r3, #18
{
 80026aa:	460e      	mov	r6, r1
 80026ac:	4604      	mov	r4, r0
  __IO uint32_t counter = 0U;
 80026ae:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80026b0:	d903      	bls.n	80026ba <HAL_ADC_ConfigChannel+0x1a>
 80026b2:	4a6a      	ldr	r2, [pc, #424]	; (800285c <HAL_ADC_ConfigChannel+0x1bc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	f040 8087 	bne.w	80027c8 <HAL_ADC_ConfigChannel+0x128>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80026ba:	6873      	ldr	r3, [r6, #4]
 80026bc:	3b01      	subs	r3, #1
 80026be:	2b0f      	cmp	r3, #15
 80026c0:	f200 808c 	bhi.w	80027dc <HAL_ADC_ConfigChannel+0x13c>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80026c4:	68b3      	ldr	r3, [r6, #8]
 80026c6:	2b07      	cmp	r3, #7
 80026c8:	f200 8091 	bhi.w	80027ee <HAL_ADC_ConfigChannel+0x14e>
  __HAL_LOCK(hadc);
 80026cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	f000 8096 	beq.w	8002802 <HAL_ADC_ConfigChannel+0x162>
 80026d6:	2301      	movs	r3, #1
 80026d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026dc:	6835      	ldr	r5, [r6, #0]
 80026de:	2d09      	cmp	r5, #9
 80026e0:	d827      	bhi.n	8002732 <HAL_ADC_ConfigChannel+0x92>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026e2:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026e4:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026e6:	6902      	ldr	r2, [r0, #16]
 80026e8:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80026ec:	2107      	movs	r1, #7
 80026ee:	40b9      	lsls	r1, r7
 80026f0:	ea22 0201 	bic.w	r2, r2, r1
 80026f4:	6102      	str	r2, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026f6:	6902      	ldr	r2, [r0, #16]
 80026f8:	40bb      	lsls	r3, r7
 80026fa:	4313      	orrs	r3, r2
 80026fc:	6103      	str	r3, [r0, #16]
  if (sConfig->Rank < 7U)
 80026fe:	6873      	ldr	r3, [r6, #4]
 8002700:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002702:	462f      	mov	r7, r5
  if (sConfig->Rank < 7U)
 8002704:	d82a      	bhi.n	800275c <HAL_ADC_ConfigChannel+0xbc>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002706:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800270a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800270c:	3b05      	subs	r3, #5
 800270e:	211f      	movs	r1, #31
 8002710:	4099      	lsls	r1, r3
 8002712:	ea22 0201 	bic.w	r2, r2, r1
 8002716:	6342      	str	r2, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002718:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800271a:	fa07 f303 	lsl.w	r3, r7, r3
 800271e:	4313      	orrs	r3, r2
 8002720:	6343      	str	r3, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002722:	4b4f      	ldr	r3, [pc, #316]	; (8002860 <HAL_ADC_ConfigChannel+0x1c0>)
 8002724:	4298      	cmp	r0, r3
 8002726:	d02d      	beq.n	8002784 <HAL_ADC_ConfigChannel+0xe4>
  __HAL_UNLOCK(hadc);
 8002728:	2000      	movs	r0, #0
 800272a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800272e:	b003      	add	sp, #12
 8002730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002732:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002734:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002736:	68c1      	ldr	r1, [r0, #12]
 8002738:	b2af      	uxth	r7, r5
 800273a:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 800273e:	3a1e      	subs	r2, #30
 8002740:	f04f 0c07 	mov.w	ip, #7
 8002744:	fa0c fc02 	lsl.w	ip, ip, r2
 8002748:	ea21 010c 	bic.w	r1, r1, ip
 800274c:	60c1      	str	r1, [r0, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800274e:	68c1      	ldr	r1, [r0, #12]
 8002750:	4093      	lsls	r3, r2
 8002752:	430b      	orrs	r3, r1
 8002754:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7U)
 8002756:	6873      	ldr	r3, [r6, #4]
 8002758:	2b06      	cmp	r3, #6
 800275a:	d9d4      	bls.n	8002706 <HAL_ADC_ConfigChannel+0x66>
  else if (sConfig->Rank < 13U)
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d853      	bhi.n	8002808 <HAL_ADC_ConfigChannel+0x168>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002760:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002764:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8002768:	221f      	movs	r2, #31
 800276a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800276c:	408a      	lsls	r2, r1
 800276e:	ea23 0302 	bic.w	r3, r3, r2
 8002772:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002774:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002776:	fa07 f101 	lsl.w	r1, r7, r1
 800277a:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800277c:	4b38      	ldr	r3, [pc, #224]	; (8002860 <HAL_ADC_ConfigChannel+0x1c0>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800277e:	6301      	str	r1, [r0, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002780:	4298      	cmp	r0, r3
 8002782:	d1d1      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x88>
 8002784:	2d12      	cmp	r5, #18
 8002786:	d04e      	beq.n	8002826 <HAL_ADC_ConfigChannel+0x186>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_ADC_ConfigChannel+0x1bc>)
 800278a:	429d      	cmp	r5, r3
 800278c:	d158      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1a0>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800278e:	4a35      	ldr	r2, [pc, #212]	; (8002864 <HAL_ADC_ConfigChannel+0x1c4>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002790:	4b35      	ldr	r3, [pc, #212]	; (8002868 <HAL_ADC_ConfigChannel+0x1c8>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002792:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002794:	4835      	ldr	r0, [pc, #212]	; (800286c <HAL_ADC_ConfigChannel+0x1cc>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002796:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800279a:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800279c:	6851      	ldr	r1, [r2, #4]
 800279e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80027a2:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	fba0 2303 	umull	r2, r3, r0, r3
 80027aa:	0c9b      	lsrs	r3, r3, #18
 80027ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80027b4:	9b01      	ldr	r3, [sp, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0b6      	beq.n	8002728 <HAL_ADC_ConfigChannel+0x88>
        counter--;
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	3b01      	subs	r3, #1
 80027be:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80027c0:	9b01      	ldr	r3, [sp, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f9      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x11a>
 80027c6:	e7af      	b.n	8002728 <HAL_ADC_ConfigChannel+0x88>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80027c8:	4829      	ldr	r0, [pc, #164]	; (8002870 <HAL_ADC_ConfigChannel+0x1d0>)
 80027ca:	f240 6189 	movw	r1, #1673	; 0x689
 80027ce:	f7ff fa05 	bl	8001bdc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80027d2:	6873      	ldr	r3, [r6, #4]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	f67f af74 	bls.w	80026c4 <HAL_ADC_ConfigChannel+0x24>
 80027dc:	4824      	ldr	r0, [pc, #144]	; (8002870 <HAL_ADC_ConfigChannel+0x1d0>)
 80027de:	f240 618a 	movw	r1, #1674	; 0x68a
 80027e2:	f7ff f9fb 	bl	8001bdc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80027e6:	68b3      	ldr	r3, [r6, #8]
 80027e8:	2b07      	cmp	r3, #7
 80027ea:	f67f af6f 	bls.w	80026cc <HAL_ADC_ConfigChannel+0x2c>
 80027ee:	4820      	ldr	r0, [pc, #128]	; (8002870 <HAL_ADC_ConfigChannel+0x1d0>)
 80027f0:	f240 618b 	movw	r1, #1675	; 0x68b
 80027f4:	f7ff f9f2 	bl	8001bdc <assert_failed>
  __HAL_LOCK(hadc);
 80027f8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	f47f af6a 	bne.w	80026d6 <HAL_ADC_ConfigChannel+0x36>
 8002802:	2002      	movs	r0, #2
}
 8002804:	b003      	add	sp, #12
 8002806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002808:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800280c:	3a41      	subs	r2, #65	; 0x41
 800280e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002810:	211f      	movs	r1, #31
 8002812:	4091      	lsls	r1, r2
 8002814:	ea23 0301 	bic.w	r3, r3, r1
 8002818:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800281a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800281c:	fa07 f102 	lsl.w	r1, r7, r2
 8002820:	4319      	orrs	r1, r3
 8002822:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002824:	e77d      	b.n	8002722 <HAL_ADC_ConfigChannel+0x82>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002826:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 800282a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800282e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002832:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
 8002836:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800283a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800283e:	e773      	b.n	8002728 <HAL_ADC_ConfigChannel+0x88>
 8002840:	2d11      	cmp	r5, #17
 8002842:	f47f af71 	bne.w	8002728 <HAL_ADC_ConfigChannel+0x88>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <HAL_ADC_ConfigChannel+0x1c4>)
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800284e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002856:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002858:	e766      	b.n	8002728 <HAL_ADC_ConfigChannel+0x88>
 800285a:	bf00      	nop
 800285c:	10000012 	.word	0x10000012
 8002860:	40012000 	.word	0x40012000
 8002864:	40012300 	.word	0x40012300
 8002868:	20000000 	.word	0x20000000
 800286c:	431bde83 	.word	0x431bde83
 8002870:	0800a94c 	.word	0x0800a94c

08002874 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002874:	1ec3      	subs	r3, r0, #3
 8002876:	2b04      	cmp	r3, #4
{
 8002878:	b510      	push	{r4, lr}
 800287a:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800287c:	d80e      	bhi.n	800289c <HAL_NVIC_SetPriorityGrouping+0x28>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287e:	490a      	ldr	r1, [pc, #40]	; (80028a8 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8002880:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002882:	0223      	lsls	r3, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002884:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288c:	4014      	ands	r4, r2
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800288e:	4323      	orrs	r3, r4
  reg_value  =  (reg_value                                   |
 8002890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002898:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800289a:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800289c:	4803      	ldr	r0, [pc, #12]	; (80028ac <HAL_NVIC_SetPriorityGrouping+0x38>)
 800289e:	2192      	movs	r1, #146	; 0x92
 80028a0:	f7ff f99c 	bl	8001bdc <assert_failed>
 80028a4:	e7eb      	b.n	800287e <HAL_NVIC_SetPriorityGrouping+0xa>
 80028a6:	bf00      	nop
 80028a8:	e000ed00 	.word	0xe000ed00
 80028ac:	0800a984 	.word	0x0800a984

080028b0 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80028b0:	2a0f      	cmp	r2, #15
{ 
 80028b2:	b570      	push	{r4, r5, r6, lr}
 80028b4:	4616      	mov	r6, r2
 80028b6:	4605      	mov	r5, r0
 80028b8:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80028ba:	d837      	bhi.n	800292c <HAL_NVIC_SetPriority+0x7c>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80028bc:	2c0f      	cmp	r4, #15
 80028be:	d830      	bhi.n	8002922 <HAL_NVIC_SetPriority+0x72>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_NVIC_SetPriority+0x88>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c8:	f1c3 0007 	rsb	r0, r3, #7
 80028cc:	2804      	cmp	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d2:	bf28      	it	cs
 80028d4:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d6:	2a06      	cmp	r2, #6
 80028d8:	d918      	bls.n	800290c <HAL_NVIC_SetPriority+0x5c>
 80028da:	3b03      	subs	r3, #3
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	409a      	lsls	r2, r3
 80028e2:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e6:	f04f 31ff 	mov.w	r1, #4294967295
 80028ea:	4081      	lsls	r1, r0
 80028ec:	ea24 0401 	bic.w	r4, r4, r1
 80028f0:	409c      	lsls	r4, r3
  if ((int32_t)(IRQn) >= 0)
 80028f2:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 80028f8:	db0b      	blt.n	8002912 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fa:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 80028fe:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8002902:	0124      	lsls	r4, r4, #4
 8002904:	b2e4      	uxtb	r4, r4
 8002906:	f885 4300 	strb.w	r4, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800290a:	bd70      	pop	{r4, r5, r6, pc}
 800290c:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	4633      	mov	r3, r6
 8002910:	e7e9      	b.n	80028e6 <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_NVIC_SetPriority+0x8c>)
 8002914:	f005 050f 	and.w	r5, r5, #15
 8002918:	0124      	lsls	r4, r4, #4
 800291a:	442b      	add	r3, r5
 800291c:	b2e4      	uxtb	r4, r4
 800291e:	761c      	strb	r4, [r3, #24]
 8002920:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002922:	4807      	ldr	r0, [pc, #28]	; (8002940 <HAL_NVIC_SetPriority+0x90>)
 8002924:	21ab      	movs	r1, #171	; 0xab
 8002926:	f7ff f959 	bl	8001bdc <assert_failed>
 800292a:	e7c9      	b.n	80028c0 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800292c:	4804      	ldr	r0, [pc, #16]	; (8002940 <HAL_NVIC_SetPriority+0x90>)
 800292e:	21aa      	movs	r1, #170	; 0xaa
 8002930:	f7ff f954 	bl	8001bdc <assert_failed>
 8002934:	e7c2      	b.n	80028bc <HAL_NVIC_SetPriority+0xc>
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00
 800293c:	e000ecfc 	.word	0xe000ecfc
 8002940:	0800a984 	.word	0x0800a984

08002944 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002944:	2800      	cmp	r0, #0
 8002946:	db08      	blt.n	800295a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002948:	f000 011f 	and.w	r1, r0, #31
 800294c:	4a05      	ldr	r2, [pc, #20]	; (8002964 <HAL_NVIC_EnableIRQ+0x20>)
 800294e:	0940      	lsrs	r0, r0, #5
 8002950:	2301      	movs	r3, #1
 8002952:	408b      	lsls	r3, r1
 8002954:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002958:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800295a:	4803      	ldr	r0, [pc, #12]	; (8002968 <HAL_NVIC_EnableIRQ+0x24>)
 800295c:	21be      	movs	r1, #190	; 0xbe
 800295e:	f7ff b93d 	b.w	8001bdc <assert_failed>
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100
 8002968:	0800a984 	.word	0x0800a984

0800296c <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800296c:	2800      	cmp	r0, #0
 800296e:	db0e      	blt.n	800298e <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002970:	0943      	lsrs	r3, r0, #5
 8002972:	4909      	ldr	r1, [pc, #36]	; (8002998 <HAL_NVIC_DisableIRQ+0x2c>)
 8002974:	3320      	adds	r3, #32
 8002976:	2201      	movs	r2, #1
 8002978:	f000 001f 	and.w	r0, r0, #31
 800297c:	fa02 f000 	lsl.w	r0, r2, r0
 8002980:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002984:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002988:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800298c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800298e:	4803      	ldr	r0, [pc, #12]	; (800299c <HAL_NVIC_DisableIRQ+0x30>)
 8002990:	21ce      	movs	r1, #206	; 0xce
 8002992:	f7ff b923 	b.w	8001bdc <assert_failed>
 8002996:	bf00      	nop
 8002998:	e000e100 	.word	0xe000e100
 800299c:	0800a984 	.word	0x0800a984

080029a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff fd08 	bl	80023b8 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029a8:	2c00      	cmp	r4, #0
 80029aa:	f000 8114 	beq.w	8002bd6 <HAL_DMA_Init+0x236>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80029ae:	6823      	ldr	r3, [r4, #0]
 80029b0:	4aa8      	ldr	r2, [pc, #672]	; (8002c54 <HAL_DMA_Init+0x2b4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	4605      	mov	r5, r0
 80029b6:	d031      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029b8:	3218      	adds	r2, #24
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02e      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029be:	3218      	adds	r2, #24
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d02b      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029c4:	3218      	adds	r2, #24
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d028      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029ca:	3218      	adds	r2, #24
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d025      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029d0:	3218      	adds	r2, #24
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d022      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029d6:	3218      	adds	r2, #24
 80029d8:	4293      	cmp	r3, r2
 80029da:	d01f      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029dc:	3218      	adds	r2, #24
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01c      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029e2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d018      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029ea:	3218      	adds	r2, #24
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d015      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029f0:	3218      	adds	r2, #24
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d012      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029f6:	3218      	adds	r2, #24
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00f      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 80029fc:	3218      	adds	r2, #24
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00c      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 8002a02:	3218      	adds	r2, #24
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d009      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 8002a08:	3218      	adds	r2, #24
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d006      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 8002a0e:	3218      	adds	r2, #24
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <HAL_DMA_Init+0x7c>
 8002a14:	4890      	ldr	r0, [pc, #576]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002a16:	21b8      	movs	r1, #184	; 0xb8
 8002a18:	f7ff f8e0 	bl	8001bdc <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002a1c:	6863      	ldr	r3, [r4, #4]
 8002a1e:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 8002a22:	d006      	beq.n	8002a32 <HAL_DMA_Init+0x92>
 8002a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a28:	d003      	beq.n	8002a32 <HAL_DMA_Init+0x92>
 8002a2a:	488b      	ldr	r0, [pc, #556]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002a2c:	21b9      	movs	r1, #185	; 0xb9
 8002a2e:	f7ff f8d5 	bl	8001bdc <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002a32:	68a3      	ldr	r3, [r4, #8]
 8002a34:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8002a38:	f040 8098 	bne.w	8002b6c <HAL_DMA_Init+0x1cc>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002a3c:	68e3      	ldr	r3, [r4, #12]
 8002a3e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8002a42:	f040 809f 	bne.w	8002b84 <HAL_DMA_Init+0x1e4>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002a46:	6923      	ldr	r3, [r4, #16]
 8002a48:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8002a4c:	f040 80a3 	bne.w	8002b96 <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002a50:	6963      	ldr	r3, [r4, #20]
 8002a52:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8002a56:	d003      	beq.n	8002a60 <HAL_DMA_Init+0xc0>
 8002a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5c:	f040 80a7 	bne.w	8002bae <HAL_DMA_Init+0x20e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002a60:	69a3      	ldr	r3, [r4, #24]
 8002a62:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8002a66:	d003      	beq.n	8002a70 <HAL_DMA_Init+0xd0>
 8002a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a6c:	f040 80a9 	bne.w	8002bc2 <HAL_DMA_Init+0x222>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002a70:	69e3      	ldr	r3, [r4, #28]
 8002a72:	f033 0220 	bics.w	r2, r3, #32
 8002a76:	d006      	beq.n	8002a86 <HAL_DMA_Init+0xe6>
 8002a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7c:	d003      	beq.n	8002a86 <HAL_DMA_Init+0xe6>
 8002a7e:	4876      	ldr	r0, [pc, #472]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002a80:	21bf      	movs	r1, #191	; 0xbf
 8002a82:	f7ff f8ab 	bl	8001bdc <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002a86:	6a23      	ldr	r3, [r4, #32]
 8002a88:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8002a8c:	d003      	beq.n	8002a96 <HAL_DMA_Init+0xf6>
 8002a8e:	4872      	ldr	r0, [pc, #456]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002a90:	21c0      	movs	r1, #192	; 0xc0
 8002a92:	f7ff f8a3 	bl	8001bdc <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a98:	b1db      	cbz	r3, 8002ad2 <HAL_DMA_Init+0x132>
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d005      	beq.n	8002aaa <HAL_DMA_Init+0x10a>
 8002a9e:	486e      	ldr	r0, [pc, #440]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002aa0:	21c1      	movs	r1, #193	; 0xc1
 8002aa2:	f7ff f89b 	bl	8001bdc <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aa8:	b19b      	cbz	r3, 8002ad2 <HAL_DMA_Init+0x132>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002aaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	f200 80b3 	bhi.w	8002c18 <HAL_DMA_Init+0x278>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ab4:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8002ab8:	d003      	beq.n	8002ac2 <HAL_DMA_Init+0x122>
 8002aba:	4867      	ldr	r0, [pc, #412]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002abc:	21c7      	movs	r1, #199	; 0xc7
 8002abe:	f7ff f88d 	bl	8001bdc <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002ac2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ac4:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8002ac8:	d003      	beq.n	8002ad2 <HAL_DMA_Init+0x132>
 8002aca:	4863      	ldr	r0, [pc, #396]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002acc:	21c8      	movs	r1, #200	; 0xc8
 8002ace:	f7ff f885 	bl	8001bdc <assert_failed>

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ad2:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad4:	2202      	movs	r2, #2
  __HAL_UNLOCK(hdma);
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002adc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae8:	e005      	b.n	8002af6 <HAL_DMA_Init+0x156>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aea:	f7ff fc65 	bl	80023b8 <HAL_GetTick>
 8002aee:	1b40      	subs	r0, r0, r5
 8002af0:	2805      	cmp	r0, #5
 8002af2:	d855      	bhi.n	8002ba0 <HAL_DMA_Init+0x200>
 8002af4:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	07d1      	lsls	r1, r2, #31
 8002afa:	d4f6      	bmi.n	8002aea <HAL_DMA_Init+0x14a>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afc:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b00:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b04:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	6961      	ldr	r1, [r4, #20]
  tmp = hdma->Instance->CR;
 8002b08:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b0a:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0c:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b10:	4302      	orrs	r2, r0
 8002b12:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b14:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b16:	4951      	ldr	r1, [pc, #324]	; (8002c5c <HAL_DMA_Init+0x2bc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b18:	4332      	orrs	r2, r6
 8002b1a:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1c:	4302      	orrs	r2, r0

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b20:	4039      	ands	r1, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b22:	2804      	cmp	r0, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b24:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b28:	d057      	beq.n	8002bda <HAL_DMA_Init+0x23a>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b2a:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b2c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b2e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b32:	4310      	orrs	r0, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	494a      	ldr	r1, [pc, #296]	; (8002c60 <HAL_DMA_Init+0x2c0>)
  hdma->Instance->FCR = tmp;
 8002b38:	6158      	str	r0, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b3a:	3a10      	subs	r2, #16
 8002b3c:	fba1 0102 	umull	r0, r1, r1, r2
 8002b40:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b42:	4848      	ldr	r0, [pc, #288]	; (8002c64 <HAL_DMA_Init+0x2c4>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b44:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b48:	5c41      	ldrb	r1, [r0, r1]
 8002b4a:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b4c:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8002b50:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b52:	bf88      	it	hi
 8002b54:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b56:	223f      	movs	r2, #63	; 0x3f
 8002b58:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	65a3      	str	r3, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b60:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b62:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002b64:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  return HAL_OK;
 8002b68:	4608      	mov	r0, r1
}
 8002b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	f43f af65 	beq.w	8002a3c <HAL_DMA_Init+0x9c>
 8002b72:	4839      	ldr	r0, [pc, #228]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002b74:	21ba      	movs	r1, #186	; 0xba
 8002b76:	f7ff f831 	bl	8001bdc <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002b7a:	68e3      	ldr	r3, [r4, #12]
 8002b7c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8002b80:	f43f af61 	beq.w	8002a46 <HAL_DMA_Init+0xa6>
 8002b84:	4834      	ldr	r0, [pc, #208]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002b86:	21bb      	movs	r1, #187	; 0xbb
 8002b88:	f7ff f828 	bl	8001bdc <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002b8c:	6923      	ldr	r3, [r4, #16]
 8002b8e:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8002b92:	f43f af5d 	beq.w	8002a50 <HAL_DMA_Init+0xb0>
 8002b96:	4830      	ldr	r0, [pc, #192]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002b98:	21bc      	movs	r1, #188	; 0xbc
 8002b9a:	f7ff f81f 	bl	8001bdc <assert_failed>
 8002b9e:	e757      	b.n	8002a50 <HAL_DMA_Init+0xb0>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8002baa:	4618      	mov	r0, r3
}
 8002bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002bae:	482a      	ldr	r0, [pc, #168]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002bb0:	21bd      	movs	r1, #189	; 0xbd
 8002bb2:	f7ff f813 	bl	8001bdc <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002bb6:	69a3      	ldr	r3, [r4, #24]
 8002bb8:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8002bbc:	f43f af58 	beq.w	8002a70 <HAL_DMA_Init+0xd0>
 8002bc0:	e752      	b.n	8002a68 <HAL_DMA_Init+0xc8>
 8002bc2:	4825      	ldr	r0, [pc, #148]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002bc4:	21be      	movs	r1, #190	; 0xbe
 8002bc6:	f7ff f809 	bl	8001bdc <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002bca:	69e3      	ldr	r3, [r4, #28]
 8002bcc:	f033 0220 	bics.w	r2, r3, #32
 8002bd0:	f43f af59 	beq.w	8002a86 <HAL_DMA_Init+0xe6>
 8002bd4:	e750      	b.n	8002a78 <HAL_DMA_Init+0xd8>
    return HAL_ERROR;
 8002bd6:	2001      	movs	r0, #1
}
 8002bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bda:	e9d4 500b 	ldrd	r5, r0, [r4, #44]	; 0x2c
 8002bde:	4328      	orrs	r0, r5
 8002be0:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8002be2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8002be4:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002be6:	6958      	ldr	r0, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002be8:	f020 0007 	bic.w	r0, r0, #7
 8002bec:	4310      	orrs	r0, r2
    tmp |= hdma->Init.FIFOThreshold;
 8002bee:	f040 0004 	orr.w	r0, r0, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bf2:	2d00      	cmp	r5, #0
 8002bf4:	d09e      	beq.n	8002b34 <HAL_DMA_Init+0x194>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bf6:	b1a6      	cbz	r6, 8002c22 <HAL_DMA_Init+0x282>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bf8:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002bfc:	d017      	beq.n	8002c2e <HAL_DMA_Init+0x28e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bfe:	2a02      	cmp	r2, #2
 8002c00:	d903      	bls.n	8002c0a <HAL_DMA_Init+0x26a>
 8002c02:	2a03      	cmp	r2, #3
 8002c04:	d196      	bne.n	8002b34 <HAL_DMA_Init+0x194>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c06:	01ea      	lsls	r2, r5, #7
 8002c08:	d594      	bpl.n	8002b34 <HAL_DMA_Init+0x194>
        hdma->State = HAL_DMA_STATE_READY;
 8002c0a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c0c:	2240      	movs	r2, #64	; 0x40
 8002c0e:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002c10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002c14:	4618      	mov	r0, r3
}
 8002c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002c18:	480f      	ldr	r0, [pc, #60]	; (8002c58 <HAL_DMA_Init+0x2b8>)
 8002c1a:	21c6      	movs	r1, #198	; 0xc6
 8002c1c:	f7fe ffde 	bl	8001bdc <assert_failed>
 8002c20:	e747      	b.n	8002ab2 <HAL_DMA_Init+0x112>
    switch (tmp)
 8002c22:	2a01      	cmp	r2, #1
 8002c24:	d010      	beq.n	8002c48 <HAL_DMA_Init+0x2a8>
 8002c26:	f032 0202 	bics.w	r2, r2, #2
 8002c2a:	d183      	bne.n	8002b34 <HAL_DMA_Init+0x194>
 8002c2c:	e7eb      	b.n	8002c06 <HAL_DMA_Init+0x266>
    switch (tmp)
 8002c2e:	2a03      	cmp	r2, #3
 8002c30:	d880      	bhi.n	8002b34 <HAL_DMA_Init+0x194>
 8002c32:	a101      	add	r1, pc, #4	; (adr r1, 8002c38 <HAL_DMA_Init+0x298>)
 8002c34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002c38:	08002c0b 	.word	0x08002c0b
 8002c3c:	08002c07 	.word	0x08002c07
 8002c40:	08002c0b 	.word	0x08002c0b
 8002c44:	08002c49 	.word	0x08002c49
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c48:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002c4c:	f47f af72 	bne.w	8002b34 <HAL_DMA_Init+0x194>
 8002c50:	e7db      	b.n	8002c0a <HAL_DMA_Init+0x26a>
 8002c52:	bf00      	nop
 8002c54:	40026010 	.word	0x40026010
 8002c58:	0800a9c0 	.word	0x0800a9c0
 8002c5c:	f010803f 	.word	0xf010803f
 8002c60:	aaaaaaab 	.word	0xaaaaaaab
 8002c64:	0800a9f8 	.word	0x0800a9f8

08002c68 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c68:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d003      	beq.n	8002c78 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002c74:	2001      	movs	r0, #1
 8002c76:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002c78:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c7a:	2305      	movs	r3, #5
 8002c7c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002c80:	6813      	ldr	r3, [r2, #0]
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002c88:	2000      	movs	r0, #0
}
 8002c8a:	4770      	bx	lr

08002c8c <HAL_DMA_IRQHandler>:
{
 8002c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c90:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002c92:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c94:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8002c96:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c98:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002c9a:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c9c:	4971      	ldr	r1, [pc, #452]	; (8002e64 <HAL_DMA_IRQHandler+0x1d8>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	4222      	tst	r2, r4
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ca4:	680d      	ldr	r5, [r1, #0]
{
 8002ca6:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca8:	d004      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002caa:	6801      	ldr	r1, [r0, #0]
 8002cac:	680f      	ldr	r7, [r1, #0]
 8002cae:	0778      	lsls	r0, r7, #29
 8002cb0:	f100 808a 	bmi.w	8002dc8 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	4222      	tst	r2, r4
 8002cba:	d004      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cbc:	f8d8 1000 	ldr.w	r1, [r8]
 8002cc0:	6949      	ldr	r1, [r1, #20]
 8002cc2:	0609      	lsls	r1, r1, #24
 8002cc4:	d478      	bmi.n	8002db8 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	4222      	tst	r2, r4
 8002ccc:	d004      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cce:	f8d8 1000 	ldr.w	r1, [r8]
 8002cd2:	6809      	ldr	r1, [r1, #0]
 8002cd4:	078f      	lsls	r7, r1, #30
 8002cd6:	d467      	bmi.n	8002da8 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd8:	2210      	movs	r2, #16
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	4222      	tst	r2, r4
 8002cde:	d004      	beq.n	8002cea <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ce0:	f8d8 1000 	ldr.w	r1, [r8]
 8002ce4:	680f      	ldr	r7, [r1, #0]
 8002ce6:	0738      	lsls	r0, r7, #28
 8002ce8:	d449      	bmi.n	8002d7e <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cea:	2220      	movs	r2, #32
 8002cec:	409a      	lsls	r2, r3
 8002cee:	4222      	tst	r2, r4
 8002cf0:	d017      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cf2:	f8d8 1000 	ldr.w	r1, [r8]
 8002cf6:	680c      	ldr	r4, [r1, #0]
 8002cf8:	06e0      	lsls	r0, r4, #27
 8002cfa:	d512      	bpl.n	8002d22 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cfc:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cfe:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8002d02:	2a05      	cmp	r2, #5
 8002d04:	d073      	beq.n	8002dee <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d06:	680b      	ldr	r3, [r1, #0]
 8002d08:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d0c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d0e:	f000 8090 	beq.w	8002e32 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d12:	0319      	lsls	r1, r3, #12
 8002d14:	f140 809b 	bpl.w	8002e4e <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8002d18:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8002d1c:	b10b      	cbz	r3, 8002d22 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 8002d1e:	4640      	mov	r0, r8
 8002d20:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d22:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002d26:	b33b      	cbz	r3, 8002d78 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d28:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8002d2c:	07da      	lsls	r2, r3, #31
 8002d2e:	d51b      	bpl.n	8002d68 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8002d30:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d34:	494c      	ldr	r1, [pc, #304]	; (8002e68 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d36:	2305      	movs	r3, #5
 8002d38:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002d3c:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d3e:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d48:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8002d4a:	e002      	b.n	8002d52 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d4c:	6813      	ldr	r3, [r2, #0]
 8002d4e:	07db      	lsls	r3, r3, #31
 8002d50:	d504      	bpl.n	8002d5c <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8002d52:	9b01      	ldr	r3, [sp, #4]
 8002d54:	3301      	adds	r3, #1
 8002d56:	42ab      	cmp	r3, r5
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	d9f7      	bls.n	8002d4c <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 8002d5c:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8002d5e:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8002d60:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002d64:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002d68:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8002d6c:	b123      	cbz	r3, 8002d78 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8002d6e:	4640      	mov	r0, r8
}
 8002d70:	b002      	add	sp, #8
 8002d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8002d76:	4718      	bx	r3
}
 8002d78:	b002      	add	sp, #8
 8002d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d7e:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d80:	680a      	ldr	r2, [r1, #0]
 8002d82:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d86:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d88:	d12a      	bne.n	8002de0 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8a:	05d7      	lsls	r7, r2, #23
 8002d8c:	d403      	bmi.n	8002d96 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d8e:	680a      	ldr	r2, [r1, #0]
 8002d90:	f022 0208 	bic.w	r2, r2, #8
 8002d94:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002d96:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8002d9a:	2a00      	cmp	r2, #0
 8002d9c:	d0a5      	beq.n	8002cea <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8002d9e:	4640      	mov	r0, r8
 8002da0:	4790      	blx	r2
 8002da2:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8002da6:	e7a0      	b.n	8002cea <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002da8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002daa:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002dae:	f042 0204 	orr.w	r2, r2, #4
 8002db2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002db6:	e78f      	b.n	8002cd8 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002db8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dba:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002dbe:	f042 0202 	orr.w	r2, r2, #2
 8002dc2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002dc6:	e77e      	b.n	8002cc6 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dc8:	680f      	ldr	r7, [r1, #0]
 8002dca:	f027 0704 	bic.w	r7, r7, #4
 8002dce:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dd0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dd2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8002dde:	e769      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de0:	0312      	lsls	r2, r2, #12
 8002de2:	d5d8      	bpl.n	8002d96 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002de4:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d1d8      	bne.n	8002d9e <HAL_DMA_IRQHandler+0x112>
 8002dec:	e77d      	b.n	8002cea <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dee:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df0:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df4:	f022 0216 	bic.w	r2, r2, #22
 8002df8:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dfa:	694a      	ldr	r2, [r1, #20]
 8002dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e00:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e02:	b354      	cbz	r4, 8002e5a <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e04:	680a      	ldr	r2, [r1, #0]
 8002e06:	f022 0208 	bic.w	r2, r2, #8
 8002e0a:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0c:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8002e0e:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8002e16:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002e18:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e1a:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 8002e1c:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002e20:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002e24:	2900      	cmp	r1, #0
 8002e26:	d0a7      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8002e28:	4640      	mov	r0, r8
}
 8002e2a:	b002      	add	sp, #8
 8002e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8002e30:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e32:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002e36:	f47f af6f 	bne.w	8002d18 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e3a:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002e3c:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e3e:	f022 0210 	bic.w	r2, r2, #16
 8002e42:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8002e44:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002e48:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 8002e4c:	e764      	b.n	8002d18 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8002e4e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f47f af63 	bne.w	8002d1e <HAL_DMA_IRQHandler+0x92>
 8002e58:	e763      	b.n	8002d22 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e5a:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8002e5e:	2a00      	cmp	r2, #0
 8002e60:	d1d0      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x178>
 8002e62:	e7d3      	b.n	8002e0c <HAL_DMA_IRQHandler+0x180>
 8002e64:	20000000 	.word	0x20000000
 8002e68:	1b4e81b5 	.word	0x1b4e81b5

08002e6c <HAL_DMA_GetState>:
  return hdma->State;
 8002e6c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop

08002e74 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8002e74:	b911      	cbnz	r1, 8002e7c <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002e76:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	4608      	mov	r0, r1
      break;
 8002e7a:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8002e7c:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002e80:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
 8002e82:	f021 63c0 	bic.w	r3, r1, #100663296	; 0x6000000
 8002e86:	f023 031f 	bic.w	r3, r3, #31
{
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	4605      	mov	r5, r0
  assert_param(IS_EXTI_LINE(ExtiLine));
 8002e8e:	b90b      	cbnz	r3, 8002e94 <HAL_EXTI_GetHandle+0x14>
 8002e90:	018b      	lsls	r3, r1, #6
 8002e92:	d408      	bmi.n	8002ea6 <HAL_EXTI_GetHandle+0x26>
 8002e94:	480a      	ldr	r0, [pc, #40]	; (8002ec0 <HAL_EXTI_GetHandle+0x40>)
 8002e96:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002e9a:	f7fe fe9f 	bl	8001bdc <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
 8002e9e:	b165      	cbz	r5, 8002eba <HAL_EXTI_GetHandle+0x3a>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002ea0:	602c      	str	r4, [r5, #0]

    return HAL_OK;
 8002ea2:	2000      	movs	r0, #0
  }
}
 8002ea4:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_EXTI_LINE(ExtiLine));
 8002ea6:	f001 031f 	and.w	r3, r1, #31
 8002eaa:	2b16      	cmp	r3, #22
 8002eac:	d9f7      	bls.n	8002e9e <HAL_EXTI_GetHandle+0x1e>
 8002eae:	4804      	ldr	r0, [pc, #16]	; (8002ec0 <HAL_EXTI_GetHandle+0x40>)
 8002eb0:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002eb4:	f7fe fe92 	bl	8001bdc <assert_failed>
 8002eb8:	e7f1      	b.n	8002e9e <HAL_EXTI_GetHandle+0x1e>
    return HAL_ERROR;
 8002eba:	2001      	movs	r0, #1
}
 8002ebc:	bd38      	pop	{r3, r4, r5, pc}
 8002ebe:	bf00      	nop
 8002ec0:	0800aa00 	.word	0x0800aa00

08002ec4 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002ec4:	6803      	ldr	r3, [r0, #0]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8002ec6:	4909      	ldr	r1, [pc, #36]	; (8002eec <HAL_EXTI_IRQHandler+0x28>)
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002ec8:	f003 021f 	and.w	r2, r3, #31
{
 8002ecc:	b410      	push	{r4}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002ece:	2301      	movs	r3, #1
  regval = (EXTI->PR & maskline);
 8002ed0:	694c      	ldr	r4, [r1, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002ed2:	4093      	lsls	r3, r2
  if (regval != 0x00u)
 8002ed4:	421c      	tst	r4, r3
 8002ed6:	d005      	beq.n	8002ee4 <HAL_EXTI_IRQHandler+0x20>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002ed8:	6842      	ldr	r2, [r0, #4]
    EXTI->PR = maskline;
 8002eda:	614b      	str	r3, [r1, #20]
    if (hexti->PendingCallback != NULL)
 8002edc:	b112      	cbz	r2, 8002ee4 <HAL_EXTI_IRQHandler+0x20>
    {
      hexti->PendingCallback();
    }
  }
}
 8002ede:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 8002ee2:	4710      	bx	r2
}
 8002ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002ef4:	4b9c      	ldr	r3, [pc, #624]	; (8003168 <HAL_GPIO_Init+0x278>)
 8002ef6:	4298      	cmp	r0, r3
{
 8002ef8:	b083      	sub	sp, #12
 8002efa:	4605      	mov	r5, r0
 8002efc:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002efe:	d017      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
 8002f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f04:	4298      	cmp	r0, r3
 8002f06:	d013      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
 8002f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f0c:	4298      	cmp	r0, r3
 8002f0e:	d00f      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
 8002f10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f14:	4298      	cmp	r0, r3
 8002f16:	d00b      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
 8002f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	d007      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
 8002f20:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002f24:	4298      	cmp	r0, r3
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
 8002f28:	4890      	ldr	r0, [pc, #576]	; (800316c <HAL_GPIO_Init+0x27c>)
 8002f2a:	21ac      	movs	r1, #172	; 0xac
 8002f2c:	f7fe fe56 	bl	8001bdc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	2a00      	cmp	r2, #0
 8002f36:	f000 80d2 	beq.w	80030de <HAL_GPIO_Init+0x1ee>
 8002f3a:	0c1b      	lsrs	r3, r3, #16
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 80cd 	bne.w	80030de <HAL_GPIO_Init+0x1ee>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d917      	bls.n	8002f7a <HAL_GPIO_Init+0x8a>
 8002f4a:	f1a3 0211 	sub.w	r2, r3, #17
 8002f4e:	2a01      	cmp	r2, #1
 8002f50:	d913      	bls.n	8002f7a <HAL_GPIO_Init+0x8a>
 8002f52:	4987      	ldr	r1, [pc, #540]	; (8003170 <HAL_GPIO_Init+0x280>)
 8002f54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f58:	428a      	cmp	r2, r1
 8002f5a:	d00e      	beq.n	8002f7a <HAL_GPIO_Init+0x8a>
 8002f5c:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8002f60:	428b      	cmp	r3, r1
 8002f62:	d00a      	beq.n	8002f7a <HAL_GPIO_Init+0x8a>
 8002f64:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8002f68:	428a      	cmp	r2, r1
 8002f6a:	d006      	beq.n	8002f7a <HAL_GPIO_Init+0x8a>
 8002f6c:	4a81      	ldr	r2, [pc, #516]	; (8003174 <HAL_GPIO_Init+0x284>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x8a>
 8002f72:	487e      	ldr	r0, [pc, #504]	; (800316c <HAL_GPIO_Init+0x27c>)
 8002f74:	21ae      	movs	r1, #174	; 0xae
 8002f76:	f7fe fe31 	bl	8001bdc <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	f200 80e9 	bhi.w	8003154 <HAL_GPIO_Init+0x264>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f82:	f8df a208 	ldr.w	sl, [pc, #520]	; 800318c <HAL_GPIO_Init+0x29c>
{
 8002f86:	2400      	movs	r4, #0
 8002f88:	e003      	b.n	8002f92 <HAL_GPIO_Init+0xa2>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	3401      	adds	r4, #1
 8002f8c:	2c10      	cmp	r4, #16
 8002f8e:	f000 80a3 	beq.w	80030d8 <HAL_GPIO_Init+0x1e8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f92:	683b      	ldr	r3, [r7, #0]
    ioposition = 0x01U << position;
 8002f94:	2601      	movs	r6, #1
 8002f96:	40a6      	lsls	r6, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f98:	ea06 0803 	and.w	r8, r6, r3
    if(iocurrent == ioposition)
 8002f9c:	ea36 0303 	bics.w	r3, r6, r3
 8002fa0:	d1f3      	bne.n	8002f8a <HAL_GPIO_Init+0x9a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	f001 0303 	and.w	r3, r1, #3
 8002fa8:	1e5a      	subs	r2, r3, #1
 8002faa:	2a01      	cmp	r2, #1
 8002fac:	f240 809c 	bls.w	80030e8 <HAL_GPIO_Init+0x1f8>
 8002fb0:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8002fb4:	f04f 0903 	mov.w	r9, #3
 8002fb8:	fa09 f90b 	lsl.w	r9, r9, fp
 8002fbc:	ea6f 0909 	mvn.w	r9, r9
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d028      	beq.n	8003016 <HAL_GPIO_Init+0x126>
        temp = GPIOx->PUPDR;
 8002fc4:	68e8      	ldr	r0, [r5, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc6:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc8:	ea00 0009 	and.w	r0, r0, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fcc:	fa02 f20b 	lsl.w	r2, r2, fp
 8002fd0:	4302      	orrs	r2, r0
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd2:	2b02      	cmp	r3, #2
        GPIOx->PUPDR = temp;
 8002fd4:	60ea      	str	r2, [r5, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd6:	d11e      	bne.n	8003016 <HAL_GPIO_Init+0x126>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	2a0f      	cmp	r2, #15
 8002fdc:	f240 80a0 	bls.w	8003120 <HAL_GPIO_Init+0x230>
 8002fe0:	21dc      	movs	r1, #220	; 0xdc
 8002fe2:	4862      	ldr	r0, [pc, #392]	; (800316c <HAL_GPIO_Init+0x27c>)
 8002fe4:	f7fe fdfa 	bl	8001bdc <assert_failed>
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	f001 0303 	and.w	r3, r1, #3
        temp = GPIOx->AFR[position >> 3U];
 8002ff0:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
 8002ff4:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ff8:	f004 0607 	and.w	r6, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8002ffc:	f8dc 0020 	ldr.w	r0, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003000:	00b6      	lsls	r6, r6, #2
 8003002:	f04f 0e0f 	mov.w	lr, #15
 8003006:	fa0e fe06 	lsl.w	lr, lr, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800300a:	40b2      	lsls	r2, r6
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800300c:	ea20 000e 	bic.w	r0, r0, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	4302      	orrs	r2, r0
        GPIOx->AFR[position >> 3U] = temp;
 8003012:	f8cc 2020 	str.w	r2, [ip, #32]
      temp = GPIOx->MODER;
 8003016:	682a      	ldr	r2, [r5, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003018:	fa03 f30b 	lsl.w	r3, r3, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800301c:	ea02 0909 	and.w	r9, r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003020:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->MODER = temp;
 8003024:	602b      	str	r3, [r5, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003026:	00cb      	lsls	r3, r1, #3
 8003028:	d5af      	bpl.n	8002f8a <HAL_GPIO_Init+0x9a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	4b53      	ldr	r3, [pc, #332]	; (8003178 <HAL_GPIO_Init+0x288>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800302c:	4e4e      	ldr	r6, [pc, #312]	; (8003168 <HAL_GPIO_Init+0x278>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302e:	2200      	movs	r2, #0
 8003030:	9201      	str	r2, [sp, #4]
 8003032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
 800303a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800303c:	f024 0303 	bic.w	r3, r4, #3
 8003040:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003044:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003048:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800304c:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800304e:	f004 0203 	and.w	r2, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003052:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003054:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	200f      	movs	r0, #15
 800305c:	4090      	lsls	r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800305e:	42b5      	cmp	r5, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003060:	ea2c 0000 	bic.w	r0, ip, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003064:	d00f      	beq.n	8003086 <HAL_GPIO_Init+0x196>
 8003066:	4555      	cmp	r5, sl
 8003068:	d06a      	beq.n	8003140 <HAL_GPIO_Init+0x250>
 800306a:	4e44      	ldr	r6, [pc, #272]	; (800317c <HAL_GPIO_Init+0x28c>)
 800306c:	42b5      	cmp	r5, r6
 800306e:	d06c      	beq.n	800314a <HAL_GPIO_Init+0x25a>
 8003070:	4e43      	ldr	r6, [pc, #268]	; (8003180 <HAL_GPIO_Init+0x290>)
 8003072:	42b5      	cmp	r5, r6
 8003074:	d073      	beq.n	800315e <HAL_GPIO_Init+0x26e>
 8003076:	4e43      	ldr	r6, [pc, #268]	; (8003184 <HAL_GPIO_Init+0x294>)
 8003078:	42b5      	cmp	r5, r6
 800307a:	bf0c      	ite	eq
 800307c:	2604      	moveq	r6, #4
 800307e:	2607      	movne	r6, #7
 8003080:	fa06 f202 	lsl.w	r2, r6, r2
 8003084:	4310      	orrs	r0, r2
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003086:	4a40      	ldr	r2, [pc, #256]	; (8003188 <HAL_GPIO_Init+0x298>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003088:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 800308a:	6812      	ldr	r2, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800308c:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 800308e:	ea6f 0008 	mvn.w	r0, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003092:	03ce      	lsls	r6, r1, #15
        temp &= ~((uint32_t)iocurrent);
 8003094:	bf54      	ite	pl
 8003096:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8003098:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 800309c:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800309e:	685a      	ldr	r2, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a0:	038b      	lsls	r3, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80030a2:	4b39      	ldr	r3, [pc, #228]	; (8003188 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 80030a4:	bf54      	ite	pl
 80030a6:	4002      	andpl	r2, r0
          temp |= iocurrent;
 80030a8:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 80030ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ae:	689a      	ldr	r2, [r3, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80030b0:	4b35      	ldr	r3, [pc, #212]	; (8003188 <HAL_GPIO_Init+0x298>)
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030b2:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80030b4:	bf54      	ite	pl
 80030b6:	4002      	andpl	r2, r0
          temp |= iocurrent;
 80030b8:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80030bc:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80030be:	68db      	ldr	r3, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030c0:	028a      	lsls	r2, r1, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c2:	f104 0401 	add.w	r4, r4, #1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80030c6:	4a30      	ldr	r2, [pc, #192]	; (8003188 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 80030c8:	bf54      	ite	pl
 80030ca:	4003      	andpl	r3, r0
          temp |= iocurrent;
 80030cc:	ea48 0303 	orrmi.w	r3, r8, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030d0:	2c10      	cmp	r4, #16
        EXTI->FTSR = temp;
 80030d2:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030d4:	f47f af5d 	bne.w	8002f92 <HAL_GPIO_Init+0xa2>
      }
    }
  }
}
 80030d8:	b003      	add	sp, #12
 80030da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80030de:	4823      	ldr	r0, [pc, #140]	; (800316c <HAL_GPIO_Init+0x27c>)
 80030e0:	21ad      	movs	r1, #173	; 0xad
 80030e2:	f7fe fd7b 	bl	8001bdc <assert_failed>
 80030e6:	e72d      	b.n	8002f44 <HAL_GPIO_Init+0x54>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	2a03      	cmp	r2, #3
 80030ec:	d81f      	bhi.n	800312e <HAL_GPIO_Init+0x23e>
        temp = GPIOx->OSPEEDR; 
 80030ee:	68a8      	ldr	r0, [r5, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030f0:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 80030f4:	f04f 0903 	mov.w	r9, #3
 80030f8:	fa09 f90b 	lsl.w	r9, r9, fp
 80030fc:	ea20 0009 	bic.w	r0, r0, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003100:	fa02 f20b 	lsl.w	r2, r2, fp
 8003104:	4302      	orrs	r2, r0
        GPIOx->OSPEEDR = temp;
 8003106:	60aa      	str	r2, [r5, #8]
        temp = GPIOx->OTYPER;
 8003108:	6868      	ldr	r0, [r5, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800310a:	f3c1 1200 	ubfx	r2, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800310e:	ea20 0006 	bic.w	r0, r0, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003112:	4616      	mov	r6, r2
 8003114:	40a6      	lsls	r6, r4
 8003116:	4306      	orrs	r6, r0
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003118:	ea6f 0909 	mvn.w	r9, r9
        GPIOx->OTYPER = temp;
 800311c:	606e      	str	r6, [r5, #4]
 800311e:	e74f      	b.n	8002fc0 <HAL_GPIO_Init+0xd0>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003120:	f249 70f7 	movw	r0, #38903	; 0x97f7
 8003124:	40d0      	lsrs	r0, r2
 8003126:	07c0      	lsls	r0, r0, #31
 8003128:	f53f af62 	bmi.w	8002ff0 <HAL_GPIO_Init+0x100>
 800312c:	e758      	b.n	8002fe0 <HAL_GPIO_Init+0xf0>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800312e:	21c1      	movs	r1, #193	; 0xc1
 8003130:	480e      	ldr	r0, [pc, #56]	; (800316c <HAL_GPIO_Init+0x27c>)
 8003132:	f7fe fd53 	bl	8001bdc <assert_failed>
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	f001 0303 	and.w	r3, r1, #3
 800313e:	e7d6      	b.n	80030ee <HAL_GPIO_Init+0x1fe>
 8003140:	2601      	movs	r6, #1
 8003142:	fa06 f202 	lsl.w	r2, r6, r2
 8003146:	4310      	orrs	r0, r2
 8003148:	e79d      	b.n	8003086 <HAL_GPIO_Init+0x196>
 800314a:	2602      	movs	r6, #2
 800314c:	fa06 f202 	lsl.w	r2, r6, r2
 8003150:	4310      	orrs	r0, r2
 8003152:	e798      	b.n	8003086 <HAL_GPIO_Init+0x196>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003154:	4805      	ldr	r0, [pc, #20]	; (800316c <HAL_GPIO_Init+0x27c>)
 8003156:	21af      	movs	r1, #175	; 0xaf
 8003158:	f7fe fd40 	bl	8001bdc <assert_failed>
 800315c:	e711      	b.n	8002f82 <HAL_GPIO_Init+0x92>
 800315e:	2603      	movs	r6, #3
 8003160:	fa06 f202 	lsl.w	r2, r6, r2
 8003164:	4310      	orrs	r0, r2
 8003166:	e78e      	b.n	8003086 <HAL_GPIO_Init+0x196>
 8003168:	40020000 	.word	0x40020000
 800316c:	0800aa3c 	.word	0x0800aa3c
 8003170:	10110000 	.word	0x10110000
 8003174:	10220000 	.word	0x10220000
 8003178:	40023800 	.word	0x40023800
 800317c:	40020800 	.word	0x40020800
 8003180:	40020c00 	.word	0x40020c00
 8003184:	40021000 	.word	0x40021000
 8003188:	40013c00 	.word	0x40013c00
 800318c:	40020400 	.word	0x40020400

08003190 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t tmp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003194:	4b52      	ldr	r3, [pc, #328]	; (80032e0 <HAL_GPIO_DeInit+0x150>)
 8003196:	4298      	cmp	r0, r3
{
 8003198:	b083      	sub	sp, #12
 800319a:	4604      	mov	r4, r0
 800319c:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800319e:	d018      	beq.n	80031d2 <HAL_GPIO_DeInit+0x42>
 80031a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031a4:	4298      	cmp	r0, r3
 80031a6:	d014      	beq.n	80031d2 <HAL_GPIO_DeInit+0x42>
 80031a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ac:	4298      	cmp	r0, r3
 80031ae:	d010      	beq.n	80031d2 <HAL_GPIO_DeInit+0x42>
 80031b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031b4:	4298      	cmp	r0, r3
 80031b6:	d00c      	beq.n	80031d2 <HAL_GPIO_DeInit+0x42>
 80031b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031bc:	4298      	cmp	r0, r3
 80031be:	d008      	beq.n	80031d2 <HAL_GPIO_DeInit+0x42>
 80031c0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80031c4:	4298      	cmp	r0, r3
 80031c6:	d004      	beq.n	80031d2 <HAL_GPIO_DeInit+0x42>
 80031c8:	4846      	ldr	r0, [pc, #280]	; (80032e4 <HAL_GPIO_DeInit+0x154>)
 80031ca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80031ce:	f7fe fd05 	bl	8001bdc <assert_failed>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031d2:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80032e0 <HAL_GPIO_DeInit+0x150>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031d6:	f8df e120 	ldr.w	lr, [pc, #288]	; 80032f8 <HAL_GPIO_DeInit+0x168>
{
 80031da:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80031dc:	f04f 0c01 	mov.w	ip, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031e0:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031e4:	f04f 0a03 	mov.w	sl, #3
 80031e8:	e002      	b.n	80031f0 <HAL_GPIO_DeInit+0x60>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	3301      	adds	r3, #1
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d068      	beq.n	80032c2 <HAL_GPIO_DeInit+0x132>
    ioposition = 0x01U << position;
 80031f0:	fa0c f203 	lsl.w	r2, ip, r3
    if(iocurrent == ioposition)
 80031f4:	ea32 0106 	bics.w	r1, r2, r6
    iocurrent = (GPIO_Pin) & ioposition;
 80031f8:	ea02 0506 	and.w	r5, r2, r6
    if(iocurrent == ioposition)
 80031fc:	d1f5      	bne.n	80031ea <HAL_GPIO_DeInit+0x5a>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80031fe:	f023 0003 	bic.w	r0, r3, #3
 8003202:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003206:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800320a:	f003 0103 	and.w	r1, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 800320e:	6887      	ldr	r7, [r0, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003210:	0089      	lsls	r1, r1, #2
 8003212:	fa09 f801 	lsl.w	r8, r9, r1
 8003216:	ea08 0707 	and.w	r7, r8, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800321a:	455c      	cmp	r4, fp
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800321c:	9701      	str	r7, [sp, #4]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800321e:	d053      	beq.n	80032c8 <HAL_GPIO_DeInit+0x138>
 8003220:	4f31      	ldr	r7, [pc, #196]	; (80032e8 <HAL_GPIO_DeInit+0x158>)
 8003222:	42bc      	cmp	r4, r7
 8003224:	d052      	beq.n	80032cc <HAL_GPIO_DeInit+0x13c>
 8003226:	4f31      	ldr	r7, [pc, #196]	; (80032ec <HAL_GPIO_DeInit+0x15c>)
 8003228:	42bc      	cmp	r4, r7
 800322a:	d052      	beq.n	80032d2 <HAL_GPIO_DeInit+0x142>
 800322c:	4f30      	ldr	r7, [pc, #192]	; (80032f0 <HAL_GPIO_DeInit+0x160>)
 800322e:	42bc      	cmp	r4, r7
 8003230:	d053      	beq.n	80032da <HAL_GPIO_DeInit+0x14a>
 8003232:	4f30      	ldr	r7, [pc, #192]	; (80032f4 <HAL_GPIO_DeInit+0x164>)
 8003234:	42bc      	cmp	r4, r7
 8003236:	bf14      	ite	ne
 8003238:	2707      	movne	r7, #7
 800323a:	2704      	moveq	r7, #4
 800323c:	fa07 f101 	lsl.w	r1, r7, r1
 8003240:	9f01      	ldr	r7, [sp, #4]
 8003242:	428f      	cmp	r7, r1
 8003244:	d11b      	bne.n	800327e <HAL_GPIO_DeInit+0xee>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003246:	f8de 1000 	ldr.w	r1, [lr]
 800324a:	ea21 0105 	bic.w	r1, r1, r5
 800324e:	f8ce 1000 	str.w	r1, [lr]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003252:	f8de 1004 	ldr.w	r1, [lr, #4]
 8003256:	ea21 0105 	bic.w	r1, r1, r5
 800325a:	f8ce 1004 	str.w	r1, [lr, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800325e:	f8de 1008 	ldr.w	r1, [lr, #8]
 8003262:	ea21 0105 	bic.w	r1, r1, r5
 8003266:	f8ce 1008 	str.w	r1, [lr, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800326a:	f8de 100c 	ldr.w	r1, [lr, #12]
 800326e:	ea21 0505 	bic.w	r5, r1, r5
 8003272:	f8ce 500c 	str.w	r5, [lr, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003276:	6881      	ldr	r1, [r0, #8]
 8003278:	ea21 0108 	bic.w	r1, r1, r8
 800327c:	6081      	str	r1, [r0, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327e:	6821      	ldr	r1, [r4, #0]
 8003280:	005d      	lsls	r5, r3, #1
 8003282:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003286:	08d8      	lsrs	r0, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003288:	ea21 0105 	bic.w	r1, r1, r5
 800328c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003290:	6021      	str	r1, [r4, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003292:	f003 0107 	and.w	r1, r3, #7
 8003296:	6a07      	ldr	r7, [r0, #32]
 8003298:	0089      	lsls	r1, r1, #2
 800329a:	fa09 f101 	lsl.w	r1, r9, r1
 800329e:	ea27 0101 	bic.w	r1, r7, r1
 80032a2:	6201      	str	r1, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032a4:	68e1      	ldr	r1, [r4, #12]
 80032a6:	ea21 0105 	bic.w	r1, r1, r5
 80032aa:	60e1      	str	r1, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ac:	6861      	ldr	r1, [r4, #4]
 80032ae:	ea21 0202 	bic.w	r2, r1, r2
 80032b2:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b4:	68a2      	ldr	r2, [r4, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b6:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b8:	ea22 0505 	bic.w	r5, r2, r5
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032bc:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032be:	60a5      	str	r5, [r4, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c0:	d196      	bne.n	80031f0 <HAL_GPIO_DeInit+0x60>
    }
  }
}
 80032c2:	b003      	add	sp, #12
 80032c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c8:	2100      	movs	r1, #0
 80032ca:	e7b9      	b.n	8003240 <HAL_GPIO_DeInit+0xb0>
 80032cc:	fa0c f101 	lsl.w	r1, ip, r1
 80032d0:	e7b6      	b.n	8003240 <HAL_GPIO_DeInit+0xb0>
 80032d2:	2702      	movs	r7, #2
 80032d4:	fa07 f101 	lsl.w	r1, r7, r1
 80032d8:	e7b2      	b.n	8003240 <HAL_GPIO_DeInit+0xb0>
 80032da:	fa0a f101 	lsl.w	r1, sl, r1
 80032de:	e7af      	b.n	8003240 <HAL_GPIO_DeInit+0xb0>
 80032e0:	40020000 	.word	0x40020000
 80032e4:	0800aa3c 	.word	0x0800aa3c
 80032e8:	40020400 	.word	0x40020400
 80032ec:	40020800 	.word	0x40020800
 80032f0:	40020c00 	.word	0x40020c00
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40013c00 	.word	0x40013c00

080032fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003300:	460c      	mov	r4, r1
 8003302:	b129      	cbz	r1, 8003310 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003304:	692b      	ldr	r3, [r5, #16]
 8003306:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003308:	bf14      	ite	ne
 800330a:	2001      	movne	r0, #1
 800330c:	2000      	moveq	r0, #0
 800330e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003310:	4802      	ldr	r0, [pc, #8]	; (800331c <HAL_GPIO_ReadPin+0x20>)
 8003312:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003316:	f7fe fc61 	bl	8001bdc <assert_failed>
 800331a:	e7f3      	b.n	8003304 <HAL_GPIO_ReadPin+0x8>
 800331c:	0800aa3c 	.word	0x0800aa3c

08003320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	4606      	mov	r6, r0
 8003324:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003326:	460c      	mov	r4, r1
 8003328:	b161      	cbz	r1, 8003344 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800332a:	2d01      	cmp	r5, #1
 800332c:	d803      	bhi.n	8003336 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800332e:	b905      	cbnz	r5, 8003332 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003330:	0424      	lsls	r4, r4, #16
 8003332:	61b4      	str	r4, [r6, #24]
  }
}
 8003334:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003336:	4806      	ldr	r0, [pc, #24]	; (8003350 <HAL_GPIO_WritePin+0x30>)
 8003338:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800333c:	f7fe fc4e 	bl	8001bdc <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003340:	61b4      	str	r4, [r6, #24]
}
 8003342:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003344:	4802      	ldr	r0, [pc, #8]	; (8003350 <HAL_GPIO_WritePin+0x30>)
 8003346:	f240 119b 	movw	r1, #411	; 0x19b
 800334a:	f7fe fc47 	bl	8001bdc <assert_failed>
 800334e:	e7ec      	b.n	800332a <HAL_GPIO_WritePin+0xa>
 8003350:	0800aa3c 	.word	0x0800aa3c

08003354 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003358:	460c      	mov	r4, r1
 800335a:	b141      	cbz	r1, 800336e <HAL_GPIO_TogglePin+0x1a>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800335c:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800335e:	ea04 0301 	and.w	r3, r4, r1
 8003362:	ea24 0401 	bic.w	r4, r4, r1
 8003366:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800336a:	61ac      	str	r4, [r5, #24]
}
 800336c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800336e:	4803      	ldr	r0, [pc, #12]	; (800337c <HAL_GPIO_TogglePin+0x28>)
 8003370:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003374:	f7fe fc32 	bl	8001bdc <assert_failed>
 8003378:	e7f0      	b.n	800335c <HAL_GPIO_TogglePin+0x8>
 800337a:	bf00      	nop
 800337c:	0800aa3c 	.word	0x0800aa3c

08003380 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003382:	6951      	ldr	r1, [r2, #20]
 8003384:	4201      	tst	r1, r0
 8003386:	d100      	bne.n	800338a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003388:	4770      	bx	lr
{
 800338a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800338c:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800338e:	f7fe fd99 	bl	8001ec4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003392:	bd08      	pop	{r3, pc}
 8003394:	40013c00 	.word	0x40013c00

08003398 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003398:	2800      	cmp	r0, #0
 800339a:	f000 8135 	beq.w	8003608 <HAL_I2C_Init+0x270>
{
 800339e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80033a0:	4a9a      	ldr	r2, [pc, #616]	; (800360c <HAL_I2C_Init+0x274>)
 80033a2:	6803      	ldr	r3, [r0, #0]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	4604      	mov	r4, r0
 80033a8:	d00c      	beq.n	80033c4 <HAL_I2C_Init+0x2c>
 80033aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d008      	beq.n	80033c4 <HAL_I2C_Init+0x2c>
 80033b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <HAL_I2C_Init+0x2c>
 80033ba:	4895      	ldr	r0, [pc, #596]	; (8003610 <HAL_I2C_Init+0x278>)
 80033bc:	f240 11bf 	movw	r1, #447	; 0x1bf
 80033c0:	f7fe fc0c 	bl	8001bdc <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80033c4:	6863      	ldr	r3, [r4, #4]
 80033c6:	4a93      	ldr	r2, [pc, #588]	; (8003614 <HAL_I2C_Init+0x27c>)
 80033c8:	3b01      	subs	r3, #1
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f200 8103 	bhi.w	80035d6 <HAL_I2C_Init+0x23e>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80033d0:	68a3      	ldr	r3, [r4, #8]
 80033d2:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80033d6:	f040 80d9 	bne.w	800358c <HAL_I2C_Init+0x1f4>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80033da:	68e3      	ldr	r3, [r4, #12]
 80033dc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033e0:	f023 0303 	bic.w	r3, r3, #3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f040 80de 	bne.w	80035a6 <HAL_I2C_Init+0x20e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033f4:	d004      	beq.n	8003400 <HAL_I2C_Init+0x68>
 80033f6:	4886      	ldr	r0, [pc, #536]	; (8003610 <HAL_I2C_Init+0x278>)
 80033f8:	f240 11c3 	movw	r1, #451	; 0x1c3
 80033fc:	f7fe fbee 	bl	8001bdc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003400:	6963      	ldr	r3, [r4, #20]
 8003402:	2b01      	cmp	r3, #1
 8003404:	f200 80d5 	bhi.w	80035b2 <HAL_I2C_Init+0x21a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003408:	69a3      	ldr	r3, [r4, #24]
 800340a:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 800340e:	f040 80da 	bne.w	80035c6 <HAL_I2C_Init+0x22e>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003412:	69e3      	ldr	r3, [r4, #28]
 8003414:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 8003418:	d004      	beq.n	8003424 <HAL_I2C_Init+0x8c>
 800341a:	487d      	ldr	r0, [pc, #500]	; (8003610 <HAL_I2C_Init+0x278>)
 800341c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003420:	f7fe fbdc 	bl	8001bdc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003424:	6a23      	ldr	r3, [r4, #32]
 8003426:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800342a:	f040 809d 	bne.w	8003568 <HAL_I2C_Init+0x1d0>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800342e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003432:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a2 	beq.w	8003580 <HAL_I2C_Init+0x1e8>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800343c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800343e:	2224      	movs	r2, #36	; 0x24
 8003440:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003452:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800345a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800345c:	f001 fafc 	bl	8004a58 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003460:	6865      	ldr	r5, [r4, #4]
 8003462:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_I2C_Init+0x280>)
 8003464:	429d      	cmp	r5, r3
 8003466:	d84e      	bhi.n	8003506 <HAL_I2C_Init+0x16e>
 8003468:	4b6c      	ldr	r3, [pc, #432]	; (800361c <HAL_I2C_Init+0x284>)
 800346a:	4298      	cmp	r0, r3
 800346c:	f240 80b1 	bls.w	80035d2 <HAL_I2C_Init+0x23a>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003470:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003472:	4b6b      	ldr	r3, [pc, #428]	; (8003620 <HAL_I2C_Init+0x288>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003474:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003476:	fba3 6300 	umull	r6, r3, r3, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800347a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800347e:	ea41 4193 	orr.w	r1, r1, r3, lsr #18
 8003482:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003484:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8003486:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003488:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800348c:	3301      	adds	r3, #1
 800348e:	430b      	orrs	r3, r1
 8003490:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003492:	69d1      	ldr	r1, [r2, #28]
 8003494:	3801      	subs	r0, #1
 8003496:	006b      	lsls	r3, r5, #1
 8003498:	fbb0 f3f3 	udiv	r3, r0, r3
 800349c:	f640 70fc 	movw	r0, #4092	; 0xffc
 80034a0:	3301      	adds	r3, #1
 80034a2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80034a6:	4203      	tst	r3, r0
 80034a8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80034ac:	f040 8099 	bne.w	80035e2 <HAL_I2C_Init+0x24a>
 80034b0:	2304      	movs	r3, #4
 80034b2:	430b      	orrs	r3, r1
 80034b4:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034b6:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 80034ba:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034bc:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034be:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80034c2:	432b      	orrs	r3, r5
 80034c4:	4303      	orrs	r3, r0
 80034c6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034c8:	6890      	ldr	r0, [r2, #8]
 80034ca:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034cc:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034ce:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 80034d2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80034d6:	4329      	orrs	r1, r5
 80034d8:	4301      	orrs	r1, r0
 80034da:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034dc:	68d1      	ldr	r1, [r2, #12]
 80034de:	69a0      	ldr	r0, [r4, #24]
 80034e0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80034e4:	4303      	orrs	r3, r0
 80034e6:	430b      	orrs	r3, r1
 80034e8:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034ea:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80034ee:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 80034f4:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f6:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034f8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 8003502:	4618      	mov	r0, r3
}
 8003504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_I2C_Init+0x28c>)
 8003508:	4298      	cmp	r0, r3
 800350a:	d962      	bls.n	80035d2 <HAL_I2C_Init+0x23a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800350c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800350e:	4944      	ldr	r1, [pc, #272]	; (8003620 <HAL_I2C_Init+0x288>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003510:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003512:	4f45      	ldr	r7, [pc, #276]	; (8003628 <HAL_I2C_Init+0x290>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003514:	fba1 3100 	umull	r3, r1, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003518:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800351c:	ea46 4691 	orr.w	r6, r6, r1, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003520:	f44f 7396 	mov.w	r3, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003524:	0c89      	lsrs	r1, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003526:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003528:	fb03 f301 	mul.w	r3, r3, r1
 800352c:	fba7 1303 	umull	r1, r3, r7, r3
 8003530:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003532:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800353a:	3301      	adds	r3, #1
 800353c:	430b      	orrs	r3, r1
 800353e:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003540:	69d1      	ldr	r1, [r2, #28]
 8003542:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003546:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800354a:	2e00      	cmp	r6, #0
 800354c:	d14c      	bne.n	80035e8 <HAL_I2C_Init+0x250>
 800354e:	3801      	subs	r0, #1
 8003550:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8003554:	fbb0 f3f3 	udiv	r3, r0, r3
 8003558:	3301      	adds	r3, #1
 800355a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355e:	2b00      	cmp	r3, #0
 8003560:	d050      	beq.n	8003604 <HAL_I2C_Init+0x26c>
 8003562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003566:	e7a4      	b.n	80034b2 <HAL_I2C_Init+0x11a>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003568:	4829      	ldr	r0, [pc, #164]	; (8003610 <HAL_I2C_Init+0x278>)
 800356a:	f240 11c7 	movw	r1, #455	; 0x1c7
 800356e:	f7fe fb35 	bl	8001bdc <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003572:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003576:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800357a:	2b00      	cmp	r3, #0
 800357c:	f47f af5e 	bne.w	800343c <HAL_I2C_Init+0xa4>
    hi2c->Lock = HAL_UNLOCKED;
 8003580:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003584:	4620      	mov	r0, r4
 8003586:	f7fe fa43 	bl	8001a10 <HAL_I2C_MspInit>
 800358a:	e757      	b.n	800343c <HAL_I2C_Init+0xa4>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800358c:	4820      	ldr	r0, [pc, #128]	; (8003610 <HAL_I2C_Init+0x278>)
 800358e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003592:	f7fe fb23 	bl	8001bdc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003596:	68e3      	ldr	r3, [r4, #12]
 8003598:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800359c:	f023 0303 	bic.w	r3, r3, #3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f43f af22 	beq.w	80033ea <HAL_I2C_Init+0x52>
 80035a6:	481a      	ldr	r0, [pc, #104]	; (8003610 <HAL_I2C_Init+0x278>)
 80035a8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80035ac:	f7fe fb16 	bl	8001bdc <assert_failed>
 80035b0:	e71b      	b.n	80033ea <HAL_I2C_Init+0x52>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80035b2:	4817      	ldr	r0, [pc, #92]	; (8003610 <HAL_I2C_Init+0x278>)
 80035b4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80035b8:	f7fe fb10 	bl	8001bdc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80035bc:	69a3      	ldr	r3, [r4, #24]
 80035be:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 80035c2:	f43f af26 	beq.w	8003412 <HAL_I2C_Init+0x7a>
 80035c6:	4812      	ldr	r0, [pc, #72]	; (8003610 <HAL_I2C_Init+0x278>)
 80035c8:	f240 11c5 	movw	r1, #453	; 0x1c5
 80035cc:	f7fe fb06 	bl	8001bdc <assert_failed>
 80035d0:	e71f      	b.n	8003412 <HAL_I2C_Init+0x7a>
    return HAL_ERROR;
 80035d2:	2001      	movs	r0, #1
}
 80035d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80035d6:	480e      	ldr	r0, [pc, #56]	; (8003610 <HAL_I2C_Init+0x278>)
 80035d8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80035dc:	f7fe fafe 	bl	8001bdc <assert_failed>
 80035e0:	e6f6      	b.n	80033d0 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e6:	e764      	b.n	80034b2 <HAL_I2C_Init+0x11a>
 80035e8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80035ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035f0:	3801      	subs	r0, #1
 80035f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fc:	b113      	cbz	r3, 8003604 <HAL_I2C_Init+0x26c>
 80035fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003602:	e756      	b.n	80034b2 <HAL_I2C_Init+0x11a>
 8003604:	2301      	movs	r3, #1
 8003606:	e754      	b.n	80034b2 <HAL_I2C_Init+0x11a>
    return HAL_ERROR;
 8003608:	2001      	movs	r0, #1
}
 800360a:	4770      	bx	lr
 800360c:	40005400 	.word	0x40005400
 8003610:	0800aa78 	.word	0x0800aa78
 8003614:	00061a7f 	.word	0x00061a7f
 8003618:	000186a0 	.word	0x000186a0
 800361c:	001e847f 	.word	0x001e847f
 8003620:	431bde83 	.word	0x431bde83
 8003624:	003d08ff 	.word	0x003d08ff
 8003628:	10624dd3 	.word	0x10624dd3

0800362c <HAL_I2C_MasterTxCpltCallback>:
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop

08003630 <HAL_I2C_MasterRxCpltCallback>:
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop

08003634 <HAL_I2C_SlaveTxCpltCallback>:
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop

08003638 <HAL_I2C_SlaveRxCpltCallback>:
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop

0800363c <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop

08003640 <HAL_I2C_ListenCpltCallback>:
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop

08003644 <HAL_I2C_MemTxCpltCallback>:
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003648:	b538      	push	{r3, r4, r5, lr}
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800364a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d

  if (hi2c->EventCount == 0U)
 800364e:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003650:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8003652:	b959      	cbnz	r1, 800366c <I2C_MemoryTransmit_TXE_BTF+0x24>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003654:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003656:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003658:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800365a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800365c:	d032      	beq.n	80036c4 <I2C_MemoryTransmit_TXE_BTF+0x7c>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800365e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003662:	610a      	str	r2, [r1, #16]

      hi2c->EventCount++;
 8003664:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003666:	3201      	adds	r2, #1
 8003668:	6502      	str	r2, [r0, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800366a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->EventCount == 1U)
 800366c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800366e:	2901      	cmp	r1, #1
 8003670:	d020      	beq.n	80036b4 <I2C_MemoryTransmit_TXE_BTF+0x6c>
  else if (hi2c->EventCount == 2U)
 8003672:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003674:	2902      	cmp	r1, #2
 8003676:	d1f8      	bne.n	800366a <I2C_MemoryTransmit_TXE_BTF+0x22>
 8003678:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800367a:	2a22      	cmp	r2, #34	; 0x22
 800367c:	d02c      	beq.n	80036d8 <I2C_MemoryTransmit_TXE_BTF+0x90>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800367e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8003680:	b289      	uxth	r1, r1
 8003682:	bb29      	cbnz	r1, 80036d0 <I2C_MemoryTransmit_TXE_BTF+0x88>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003684:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8003686:	b289      	uxth	r1, r1
 8003688:	2900      	cmp	r1, #0
 800368a:	d1ee      	bne.n	800366a <I2C_MemoryTransmit_TXE_BTF+0x22>
 800368c:	2a21      	cmp	r2, #33	; 0x21
 800368e:	d1ec      	bne.n	800366a <I2C_MemoryTransmit_TXE_BTF+0x22>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003690:	6802      	ldr	r2, [r0, #0]
 8003692:	6854      	ldr	r4, [r2, #4]
 8003694:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8003698:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369a:	6814      	ldr	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800369c:	2520      	movs	r5, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80036a2:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036a4:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036aa:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80036ae:	f7ff ffc9 	bl	8003644 <HAL_I2C_MemTxCpltCallback>
}
 80036b2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036b4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80036b6:	6801      	ldr	r1, [r0, #0]
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 80036bc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80036be:	3201      	adds	r2, #1
 80036c0:	6502      	str	r2, [r0, #80]	; 0x50
}
 80036c2:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 80036c8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80036ca:	3202      	adds	r2, #2
 80036cc:	6502      	str	r2, [r0, #80]	; 0x50
}
 80036ce:	bd38      	pop	{r3, r4, r5, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036d0:	2a21      	cmp	r2, #33	; 0x21
 80036d2:	d007      	beq.n	80036e4 <I2C_MemoryTransmit_TXE_BTF+0x9c>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
}
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80036d8:	6802      	ldr	r2, [r0, #0]
 80036da:	6813      	ldr	r3, [r2, #0]
 80036dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e0:	6013      	str	r3, [r2, #0]
}
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80036e6:	6802      	ldr	r2, [r0, #0]
 80036e8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80036ec:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 80036ee:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80036f0:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80036f2:	3a01      	subs	r2, #1
 80036f4:	b292      	uxth	r2, r2
 80036f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80036f8:	bd38      	pop	{r3, r4, r5, pc}
 80036fa:	bf00      	nop

080036fc <HAL_I2C_MemRxCpltCallback>:
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop

08003700 <HAL_I2C_ErrorCallback>:
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop

08003704 <HAL_I2C_AbortCpltCallback>:
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop

08003708 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003708:	b570      	push	{r4, r5, r6, lr}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800370a:	4b3a      	ldr	r3, [pc, #232]	; (80037f4 <I2C_DMAAbort+0xec>)
 800370c:	4a3a      	ldr	r2, [pc, #232]	; (80037f8 <I2C_DMAAbort+0xf0>)
 800370e:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003710:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003712:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003714:	08db      	lsrs	r3, r3, #3
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
  __IO uint32_t count = 0U;
 800371a:	2200      	movs	r2, #0
 800371c:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800371e:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003720:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8003724:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003726:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800372a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800372e:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003730:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003732:	e005      	b.n	8003740 <I2C_DMAAbort+0x38>
    if (count == 0U)
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
 8003734:	9b01      	ldr	r3, [sp, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	9301      	str	r3, [sp, #4]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800373a:	6813      	ldr	r3, [r2, #0]
 800373c:	059b      	lsls	r3, r3, #22
 800373e:	d506      	bpl.n	800374e <I2C_DMAAbort+0x46>
    if (count == 0U)
 8003740:	9b01      	ldr	r3, [sp, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f6      	bne.n	8003734 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003746:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003748:	f043 0320 	orr.w	r3, r3, #32
 800374c:	6403      	str	r3, [r0, #64]	; 0x40
  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
  }
  if (hi2c->hdmarx != NULL)
 800374e:	e9d0 430d 	ldrd	r4, r3, [r0, #52]	; 0x34
  if (hi2c->hdmatx != NULL)
 8003752:	b344      	cbz	r4, 80037a6 <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003754:	2500      	movs	r5, #0
 8003756:	63e5      	str	r5, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8003758:	b1f3      	cbz	r3, 8003798 <I2C_DMAAbort+0x90>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375a:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 800375c:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375e:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8003762:	6016      	str	r6, [r2, #0]

  hi2c->XferCount = 0U;
 8003764:	8545      	strh	r5, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003766:	6525      	str	r5, [r4, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003768:	2400      	movs	r4, #0
 800376a:	651c      	str	r4, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800376c:	6813      	ldr	r3, [r2, #0]
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	6013      	str	r3, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003774:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003778:	2b60      	cmp	r3, #96	; 0x60
 800377a:	d029      	beq.n	80037d0 <I2C_DMAAbort+0xc8>
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800377c:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8003780:	2928      	cmp	r1, #40	; 0x28
 8003782:	d018      	beq.n	80037b6 <I2C_DMAAbort+0xae>
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_LISTEN;
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003784:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003788:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800378c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003790:	f7ff ffb6 	bl	8003700 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003794:	b002      	add	sp, #8
 8003796:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003798:	6815      	ldr	r5, [r2, #0]
 800379a:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800379e:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80037a0:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037a2:	6523      	str	r3, [r4, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 80037a4:	e7e2      	b.n	800376c <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 80037a6:	b1f3      	cbz	r3, 80037e6 <I2C_DMAAbort+0xde>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a8:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80037aa:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ac:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 80037b0:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80037b2:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 80037b4:	e7d8      	b.n	8003768 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80037b6:	6813      	ldr	r3, [r2, #0]
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037c0:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c6:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037c8:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037ca:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 80037ce:	e7df      	b.n	8003790 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037d0:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80037d2:	2220      	movs	r2, #32
 80037d4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037d8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80037dc:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80037de:	f7ff ff91 	bl	8003704 <HAL_I2C_AbortCpltCallback>
}
 80037e2:	b002      	add	sp, #8
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e6:	6814      	ldr	r4, [r2, #0]
 80037e8:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80037ec:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 80037ee:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 80037f0:	e7bc      	b.n	800376c <I2C_DMAAbort+0x64>
 80037f2:	bf00      	nop
 80037f4:	20000000 	.word	0x20000000
 80037f8:	14f8b589 	.word	0x14f8b589

080037fc <I2C_ITError>:
{
 80037fc:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037fe:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003802:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003806:	2b10      	cmp	r3, #16
{
 8003808:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800380a:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800380c:	d039      	beq.n	8003882 <I2C_ITError+0x86>
 800380e:	b2d9      	uxtb	r1, r3
 8003810:	2940      	cmp	r1, #64	; 0x40
 8003812:	d036      	beq.n	8003882 <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003814:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8003818:	2928      	cmp	r1, #40	; 0x28
 800381a:	d03d      	beq.n	8003898 <I2C_ITError+0x9c>
 800381c:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	0508      	lsls	r0, r1, #20
 8003822:	d407      	bmi.n	8003834 <I2C_ITError+0x38>
 8003824:	2a60      	cmp	r2, #96	; 0x60
 8003826:	d005      	beq.n	8003834 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8003828:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800382a:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800382c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003834:	2200      	movs	r2, #0
 8003836:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800383e:	d134      	bne.n	80038aa <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003840:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003844:	2960      	cmp	r1, #96	; 0x60
 8003846:	d075      	beq.n	8003934 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	0650      	lsls	r0, r2, #25
 800384c:	d505      	bpl.n	800385a <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003856:	3301      	adds	r3, #1
 8003858:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800385a:	4620      	mov	r0, r4
 800385c:	f7ff ff50 	bl	8003700 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003860:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003862:	0719      	lsls	r1, r3, #28
 8003864:	d004      	beq.n	8003870 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	6853      	ldr	r3, [r2, #4]
 800386a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800386e:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003870:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003874:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003876:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8003878:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800387a:	d501      	bpl.n	8003880 <I2C_ITError+0x84>
 800387c:	2b28      	cmp	r3, #40	; 0x28
 800387e:	d02f      	beq.n	80038e0 <I2C_ITError+0xe4>
}
 8003880:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003882:	2a22      	cmp	r2, #34	; 0x22
 8003884:	d1c6      	bne.n	8003814 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800388e:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	0512      	lsls	r2, r2, #20
 8003894:	d5c8      	bpl.n	8003828 <I2C_ITError+0x2c>
 8003896:	e7cd      	b.n	8003834 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003898:	2300      	movs	r3, #0
 800389a:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800389c:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800389e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80038a8:	d0ca      	beq.n	8003840 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80038aa:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80038ac:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80038ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b2:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80038b4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d01e      	beq.n	80038fa <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <I2C_ITError+0x164>)
 80038be:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038c0:	f7ff f9d2 	bl	8002c68 <HAL_DMA_Abort_IT>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d0cb      	beq.n	8003860 <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 80038c8:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80038cc:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038da:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80038dc:	4798      	blx	r3
 80038de:	e7bf      	b.n	8003860 <I2C_ITError+0x64>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038e0:	4b20      	ldr	r3, [pc, #128]	; (8003964 <I2C_ITError+0x168>)
 80038e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 80038e4:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80038ea:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80038ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80038f4:	f7ff fea4 	bl	8003640 <HAL_I2C_ListenCpltCallback>
}
 80038f8:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038fa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80038fc:	4b18      	ldr	r3, [pc, #96]	; (8003960 <I2C_ITError+0x164>)
 80038fe:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003900:	f7ff f9b2 	bl	8002c68 <HAL_DMA_Abort_IT>
 8003904:	2800      	cmp	r0, #0
 8003906:	d0ab      	beq.n	8003860 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	0651      	lsls	r1, r2, #25
 800390e:	d506      	bpl.n	800391e <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8003916:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	3201      	adds	r2, #1
 800391c:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800391e:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003920:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003922:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8003926:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003928:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800392a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800392e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003930:	4798      	blx	r3
 8003932:	e795      	b.n	8003860 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8003934:	2120      	movs	r1, #32
 8003936:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800393a:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	0652      	lsls	r2, r2, #25
 8003940:	d506      	bpl.n	8003950 <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003942:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003948:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	3201      	adds	r2, #1
 800394e:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003958:	4620      	mov	r0, r4
 800395a:	f7ff fed3 	bl	8003704 <HAL_I2C_AbortCpltCallback>
 800395e:	e77f      	b.n	8003860 <I2C_ITError+0x64>
 8003960:	08003709 	.word	0x08003709
 8003964:	ffff0000 	.word	0xffff0000

08003968 <HAL_I2C_EV_IRQHandler>:
{
 8003968:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800396a:	6803      	ldr	r3, [r0, #0]
{
 800396c:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800396e:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003972:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003976:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800397a:	2910      	cmp	r1, #16
{
 800397c:	b08c      	sub	sp, #48	; 0x30
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800397e:	b2cd      	uxtb	r5, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003980:	d021      	beq.n	80039c6 <HAL_I2C_EV_IRQHandler+0x5e>
 8003982:	2d40      	cmp	r5, #64	; 0x40
 8003984:	d01f      	beq.n	80039c6 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003986:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	2900      	cmp	r1, #0
 800398c:	f000 8093 	beq.w	8003ab6 <HAL_I2C_EV_IRQHandler+0x14e>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003990:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8003992:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003994:	f011 0f02 	tst.w	r1, #2
 8003998:	f3c1 0640 	ubfx	r6, r1, #1, #1
 800399c:	d056      	beq.n	8003a4c <HAL_I2C_EV_IRQHandler+0xe4>
 800399e:	0586      	lsls	r6, r0, #22
 80039a0:	d556      	bpl.n	8003a50 <HAL_I2C_EV_IRQHandler+0xe8>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039a4:	b102      	cbz	r2, 80039a8 <HAL_I2C_EV_IRQHandler+0x40>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039a6:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039a8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80039ac:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80039b0:	2a28      	cmp	r2, #40	; 0x28
 80039b2:	f000 8217 	beq.w	8003de4 <HAL_I2C_EV_IRQHandler+0x47c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039b6:	f06f 0102 	mvn.w	r1, #2
    __HAL_UNLOCK(hi2c);
 80039ba:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039bc:	6159      	str	r1, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80039be:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80039c2:	b00c      	add	sp, #48	; 0x30
 80039c4:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80039c6:	6999      	ldr	r1, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80039c8:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80039ca:	f012 0f01 	tst.w	r2, #1
 80039ce:	d11a      	bne.n	8003a06 <HAL_I2C_EV_IRQHandler+0x9e>
 80039d0:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 80039d4:	d0f5      	beq.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 80039d6:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 80039da:	d0f2      	beq.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039dc:	0716      	lsls	r6, r2, #28
 80039de:	d56d      	bpl.n	8003abc <HAL_I2C_EV_IRQHandler+0x154>
 80039e0:	0586      	lsls	r6, r0, #22
 80039e2:	f140 8083 	bpl.w	8003aec <HAL_I2C_EV_IRQHandler+0x184>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039ea:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039ec:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039ee:	2900      	cmp	r1, #0
 80039f0:	f000 81df 	beq.w	8003db2 <HAL_I2C_EV_IRQHandler+0x44a>
 80039f4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80039f6:	2a00      	cmp	r2, #0
 80039f8:	f000 81db 	beq.w	8003db2 <HAL_I2C_EV_IRQHandler+0x44a>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	e7dd      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a06:	0586      	lsls	r6, r0, #22
 8003a08:	d56e      	bpl.n	8003ae8 <HAL_I2C_EV_IRQHandler+0x180>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003a0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a0c:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8003a10:	f000 81e5 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x476>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003a14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a16:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003a1a:	bf04      	itt	eq
 8003a1c:	2208      	moveq	r2, #8
 8003a1e:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a20:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003a24:	2a40      	cmp	r2, #64	; 0x40
 8003a26:	f000 81d3 	beq.w	8003dd0 <HAL_I2C_EV_IRQHandler+0x468>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a2a:	6922      	ldr	r2, [r4, #16]
 8003a2c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003a30:	f000 81ae 	beq.w	8003d90 <HAL_I2C_EV_IRQHandler+0x428>
      if (hi2c->EventCount == 0U)
 8003a34:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	f040 81e8 	bne.w	8003e0c <HAL_I2C_EV_IRQHandler+0x4a4>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003a3e:	11d2      	asrs	r2, r2, #7
 8003a40:	f002 0206 	and.w	r2, r2, #6
 8003a44:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003a48:	611a      	str	r2, [r3, #16]
 8003a4a:	e7ba      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4c:	06cd      	lsls	r5, r1, #27
 8003a4e:	d47c      	bmi.n	8003b4a <HAL_I2C_EV_IRQHandler+0x1e2>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a50:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8003a54:	2a21      	cmp	r2, #33	; 0x21
 8003a56:	f000 80f5 	beq.w	8003c44 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a5a:	064a      	lsls	r2, r1, #25
 8003a5c:	f140 8132 	bpl.w	8003cc4 <HAL_I2C_EV_IRQHandler+0x35c>
 8003a60:	0546      	lsls	r6, r0, #21
 8003a62:	f140 812f 	bpl.w	8003cc4 <HAL_I2C_EV_IRQHandler+0x35c>
 8003a66:	074d      	lsls	r5, r1, #29
 8003a68:	f100 812f 	bmi.w	8003cca <HAL_I2C_EV_IRQHandler+0x362>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a6c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003a70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a72:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a74:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	d0a3      	beq.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8003a80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003a82:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003a8c:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a8e:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003a90:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d195      	bne.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 8003a96:	292a      	cmp	r1, #42	; 0x2a
 8003a98:	d193      	bne.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a9e:	2522      	movs	r5, #34	; 0x22
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aa4:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa6:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aa8:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003aaa:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aac:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ab0:	f7ff fdc2 	bl	8003638 <HAL_I2C_SlaveRxCpltCallback>
 8003ab4:	e785      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ab6:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ab8:	6959      	ldr	r1, [r3, #20]
 8003aba:	e76b      	b.n	8003994 <HAL_I2C_EV_IRQHandler+0x2c>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003abc:	0796      	lsls	r6, r2, #30
 8003abe:	d515      	bpl.n	8003aec <HAL_I2C_EV_IRQHandler+0x184>
 8003ac0:	0586      	lsls	r6, r0, #22
 8003ac2:	d513      	bpl.n	8003aec <HAL_I2C_EV_IRQHandler+0x184>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ac4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ac8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003aca:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003acc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003ad0:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ad2:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ad4:	f000 81ae 	beq.w	8003e34 <HAL_I2C_EV_IRQHandler+0x4cc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	9209      	str	r2, [sp, #36]	; 0x24
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	9209      	str	r2, [sp, #36]	; 0x24
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae6:	e76c      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae8:	0716      	lsls	r6, r2, #28
 8003aea:	d5e7      	bpl.n	8003abc <HAL_I2C_EV_IRQHandler+0x154>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003aec:	f011 0f04 	tst.w	r1, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003af0:	6859      	ldr	r1, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003af2:	f000 80f3 	beq.w	8003cdc <HAL_I2C_EV_IRQHandler+0x374>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003af6:	050e      	lsls	r6, r1, #20
 8003af8:	f53f af63 	bmi.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003afc:	0611      	lsls	r1, r2, #24
 8003afe:	f140 8113 	bpl.w	8003d28 <HAL_I2C_EV_IRQHandler+0x3c0>
 8003b02:	0546      	lsls	r6, r0, #21
 8003b04:	f140 8110 	bpl.w	8003d28 <HAL_I2C_EV_IRQHandler+0x3c0>
 8003b08:	0751      	lsls	r1, r2, #29
 8003b0a:	f100 8110 	bmi.w	8003d2e <HAL_I2C_EV_IRQHandler+0x3c6>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b0e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b12:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b14:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b18:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b1a:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b1c:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	f040 8235 	bne.w	8003f8e <HAL_I2C_EV_IRQHandler+0x626>
 8003b24:	2a21      	cmp	r2, #33	; 0x21
 8003b26:	f000 8325 	beq.w	8004174 <HAL_I2C_EV_IRQHandler+0x80c>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b2a:	2940      	cmp	r1, #64	; 0x40
 8003b2c:	f47f af49 	bne.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b30:	2a22      	cmp	r2, #34	; 0x22
 8003b32:	f47f af46 	bne.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    if (hi2c->XferCount == 0U)
 8003b36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b38:	b292      	uxth	r2, r2
 8003b3a:	2a00      	cmp	r2, #0
 8003b3c:	f040 82a4 	bne.w	8004088 <HAL_I2C_EV_IRQHandler+0x720>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	e73b      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b4a:	0585      	lsls	r5, r0, #22
 8003b4c:	d580      	bpl.n	8003a50 <HAL_I2C_EV_IRQHandler+0xe8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b4e:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b58:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b5a:	960b      	str	r6, [sp, #44]	; 0x2c
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b70:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	0510      	lsls	r0, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b76:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b78:	d521      	bpl.n	8003bbe <HAL_I2C_EV_IRQHandler+0x256>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b7a:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8003b7e:	2a22      	cmp	r2, #34	; 0x22
 8003b80:	f000 8175 	beq.w	8003e6e <HAL_I2C_EV_IRQHandler+0x506>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003b84:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003b86:	6802      	ldr	r2, [r0, #0]
 8003b88:	6852      	ldr	r2, [r2, #4]
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003b8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b90:	b292      	uxth	r2, r2
 8003b92:	b11a      	cbz	r2, 8003b9c <HAL_I2C_EV_IRQHandler+0x234>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b94:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b96:	f042 0204 	orr.w	r2, r2, #4
 8003b9a:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba2:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ba4:	f7ff f962 	bl	8002e6c <HAL_DMA_GetState>
 8003ba8:	2801      	cmp	r0, #1
 8003baa:	d008      	beq.n	8003bbe <HAL_I2C_EV_IRQHandler+0x256>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bac:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003bae:	4ba0      	ldr	r3, [pc, #640]	; (8003e30 <HAL_I2C_EV_IRQHandler+0x4c8>)
 8003bb0:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bb2:	f7ff f859 	bl	8002c68 <HAL_DMA_Abort_IT>
 8003bb6:	b110      	cbz	r0, 8003bbe <HAL_I2C_EV_IRQHandler+0x256>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003bb8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003bba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003bbc:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8003bbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	b313      	cbz	r3, 8003c0a <HAL_I2C_EV_IRQHandler+0x2a2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	0751      	lsls	r1, r2, #29
 8003bca:	d50a      	bpl.n	8003be2 <HAL_I2C_EV_IRQHandler+0x27a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8003bd2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003bd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003bd6:	6823      	ldr	r3, [r4, #0]
      hi2c->XferCount--;
 8003bd8:	3a01      	subs	r2, #1
 8003bda:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8003bdc:	3101      	adds	r1, #1
      hi2c->XferCount--;
 8003bde:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003be0:	6261      	str	r1, [r4, #36]	; 0x24
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	0652      	lsls	r2, r2, #25
 8003be6:	d509      	bpl.n	8003bfc <HAL_I2C_EV_IRQHandler+0x294>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8003bee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003bf0:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003bf6:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8003bf8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003bfa:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount != 0U)
 8003bfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	b11b      	cbz	r3, 8003c0a <HAL_I2C_EV_IRQHandler+0x2a2>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f040 80d9 	bne.w	8003dc4 <HAL_I2C_EV_IRQHandler+0x45c>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c12:	2d2a      	cmp	r5, #42	; 0x2a
 8003c14:	f000 814c 	beq.w	8003eb0 <HAL_I2C_EV_IRQHandler+0x548>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c18:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003c1c:	2b28      	cmp	r3, #40	; 0x28
 8003c1e:	f000 814f 	beq.w	8003ec0 <HAL_I2C_EV_IRQHandler+0x558>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c24:	2b22      	cmp	r3, #34	; 0x22
 8003c26:	d002      	beq.n	8003c2e <HAL_I2C_EV_IRQHandler+0x2c6>
 8003c28:	2d22      	cmp	r5, #34	; 0x22
 8003c2a:	f47f aeca 	bne.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c2e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c32:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c34:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c3e:	f7ff fcfb 	bl	8003638 <HAL_I2C_SlaveRxCpltCallback>
 8003c42:	e6be      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c44:	060e      	lsls	r6, r1, #24
 8003c46:	d528      	bpl.n	8003c9a <HAL_I2C_EV_IRQHandler+0x332>
 8003c48:	0545      	lsls	r5, r0, #21
 8003c4a:	d526      	bpl.n	8003c9a <HAL_I2C_EV_IRQHandler+0x332>
 8003c4c:	074e      	lsls	r6, r1, #29
 8003c4e:	d427      	bmi.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x338>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c50:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003c54:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003c56:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c58:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003c5a:	2900      	cmp	r1, #0
 8003c5c:	f43f aeb1 	beq.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003c62:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003c66:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8003c68:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003c6a:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003c6c:	3901      	subs	r1, #1
 8003c6e:	b289      	uxth	r1, r1
 8003c70:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c72:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003c74:	b289      	uxth	r1, r1
 8003c76:	2900      	cmp	r1, #0
 8003c78:	f47f aea3 	bne.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 8003c7c:	2829      	cmp	r0, #41	; 0x29
 8003c7e:	f47f aea0 	bne.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c82:	6859      	ldr	r1, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c84:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c86:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003c8a:	6059      	str	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c8c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c8e:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c90:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c94:	f7ff fcce 	bl	8003634 <HAL_I2C_SlaveTxCpltCallback>
 8003c98:	e693      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9a:	074d      	lsls	r5, r1, #29
 8003c9c:	f57f ae91 	bpl.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 8003ca0:	0581      	lsls	r1, r0, #22
 8003ca2:	f57f ae8e 	bpl.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
  if (hi2c->XferCount != 0U)
 8003ca6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ca8:	b292      	uxth	r2, r2
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	f43f ae89 	beq.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003cb2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003cb6:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8003cb8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003cba:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003cc2:	e67e      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc4:	0749      	lsls	r1, r1, #29
 8003cc6:	f57f ae7c 	bpl.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 8003cca:	0582      	lsls	r2, r0, #22
 8003ccc:	f57f ae79 	bpl.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
  if (hi2c->XferCount != 0U)
 8003cd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cd2:	b292      	uxth	r2, r2
 8003cd4:	2a00      	cmp	r2, #0
 8003cd6:	f43f ae74 	beq.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 8003cda:	e01a      	b.n	8003d12 <HAL_I2C_EV_IRQHandler+0x3aa>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003cdc:	050d      	lsls	r5, r1, #20
 8003cde:	f53f ae70 	bmi.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ce2:	0651      	lsls	r1, r2, #25
 8003ce4:	d42f      	bmi.n	8003d46 <HAL_I2C_EV_IRQHandler+0x3de>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce6:	0751      	lsls	r1, r2, #29
 8003ce8:	f57f ae6b 	bpl.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 8003cec:	0582      	lsls	r2, r0, #22
 8003cee:	f57f ae68 	bpl.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8003cf4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cf6:	b292      	uxth	r2, r2
 8003cf8:	2a04      	cmp	r2, #4
 8003cfa:	f000 8139 	beq.w	8003f70 <HAL_I2C_EV_IRQHandler+0x608>
  else if (hi2c->XferCount == 3U)
 8003cfe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d00:	b292      	uxth	r2, r2
 8003d02:	2a03      	cmp	r2, #3
 8003d04:	f000 8155 	beq.w	8003fb2 <HAL_I2C_EV_IRQHandler+0x64a>
  else if (hi2c->XferCount == 2U)
 8003d08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d0a:	b292      	uxth	r2, r2
 8003d0c:	2a02      	cmp	r2, #2
 8003d0e:	f000 8181 	beq.w	8004014 <HAL_I2C_EV_IRQHandler+0x6ac>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8003d18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003d1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003d20:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8003d22:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8003d24:	6262      	str	r2, [r4, #36]	; 0x24
      }
 8003d26:	e64c      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d28:	0752      	lsls	r2, r2, #29
 8003d2a:	f57f ae4a 	bpl.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 8003d2e:	0586      	lsls	r6, r0, #22
 8003d30:	f57f ae47 	bpl.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003d34:	2d10      	cmp	r5, #16
 8003d36:	f000 80f7 	beq.w	8003f28 <HAL_I2C_EV_IRQHandler+0x5c0>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d3a:	4620      	mov	r0, r4
}
 8003d3c:	b00c      	add	sp, #48	; 0x30
 8003d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d42:	f7ff bc81 	b.w	8003648 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d46:	0546      	lsls	r6, r0, #21
 8003d48:	d5cd      	bpl.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x37e>
 8003d4a:	0755      	lsls	r5, r2, #29
 8003d4c:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8003d50:	d4cc      	bmi.n	8003cec <HAL_I2C_EV_IRQHandler+0x384>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d52:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003d56:	2a22      	cmp	r2, #34	; 0x22
 8003d58:	f47f ae33 	bne.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    tmp = hi2c->XferCount;
 8003d5c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d5e:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8003d60:	2a03      	cmp	r2, #3
 8003d62:	f240 8197 	bls.w	8004094 <HAL_I2C_EV_IRQHandler+0x72c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8003d6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003d6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003d76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d78:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003d7a:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8003d7c:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8003d7e:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8003d80:	f47f ae1f 	bne.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d84:	6822      	ldr	r2, [r4, #0]
 8003d86:	6853      	ldr	r3, [r2, #4]
 8003d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d8c:	6053      	str	r3, [r2, #4]
 8003d8e:	e618      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d90:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003d94:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d96:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d98:	bf16      	itet	ne
 8003d9a:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d9e:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003da2:	b2d2      	uxtbne	r2, r2
 8003da4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003da6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003da8:	b11a      	cbz	r2, 8003db2 <HAL_I2C_EV_IRQHandler+0x44a>
 8003daa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dac:	2a00      	cmp	r2, #0
 8003dae:	f47f ae25 	bne.w	80039fc <HAL_I2C_EV_IRQHandler+0x94>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003db2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003db4:	2a00      	cmp	r2, #0
 8003db6:	f43f ae04 	beq.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 8003dba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dbc:	2a00      	cmp	r2, #0
 8003dbe:	f47f ae1d 	bne.w	80039fc <HAL_I2C_EV_IRQHandler+0x94>
 8003dc2:	e5fe      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    I2C_ITError(hi2c);
 8003dc4:	4620      	mov	r0, r4
}
 8003dc6:	b00c      	add	sp, #48	; 0x30
 8003dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8003dcc:	f7ff bd16 	b.w	80037fc <I2C_ITError>
    if (hi2c->EventCount == 0U)
 8003dd0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003dd2:	bb3a      	cbnz	r2, 8003e24 <HAL_I2C_EV_IRQHandler+0x4bc>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003dd4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003dd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dda:	611a      	str	r2, [r3, #16]
 8003ddc:	e5f1      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003dde:	2201      	movs	r2, #1
 8003de0:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003de2:	e61d      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0xb8>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dea:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003dec:	062e      	lsls	r6, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003dee:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_UNLOCK(hi2c);
 8003df2:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003df6:	bf54      	ite	pl
 8003df8:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003dfa:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8003dfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003e00:	f001 0101 	and.w	r1, r1, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7ff fc19 	bl	800363c <HAL_I2C_AddrCallback>
 8003e0a:	e5da      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      else if (hi2c->EventCount == 1U)
 8003e0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e0e:	2a01      	cmp	r2, #1
 8003e10:	f47f add7 	bne.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e14:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e16:	11d2      	asrs	r2, r2, #7
 8003e18:	f002 0206 	and.w	r2, r2, #6
 8003e1c:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8003e20:	611a      	str	r2, [r3, #16]
 8003e22:	e5ce      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e24:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	611a      	str	r2, [r3, #16]
 8003e2e:	e5c8      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 8003e30:	08003709 	.word	0x08003709
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e34:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003e36:	b911      	cbnz	r1, 8003e3e <HAL_I2C_EV_IRQHandler+0x4d6>
 8003e38:	2a40      	cmp	r2, #64	; 0x40
 8003e3a:	f000 80a1 	beq.w	8003f80 <HAL_I2C_EV_IRQHandler+0x618>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e3e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e40:	b922      	cbnz	r2, 8003e4c <HAL_I2C_EV_IRQHandler+0x4e4>
 8003e42:	6921      	ldr	r1, [r4, #16]
 8003e44:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8003e48:	f000 80a5 	beq.w	8003f96 <HAL_I2C_EV_IRQHandler+0x62e>
      if (hi2c->XferCount == 0U)
 8003e4c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e4e:	b292      	uxth	r2, r2
 8003e50:	2a00      	cmp	r2, #0
 8003e52:	d142      	bne.n	8003eda <HAL_I2C_EV_IRQHandler+0x572>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e54:	9202      	str	r2, [sp, #8]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	9202      	str	r2, [sp, #8]
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	9202      	str	r2, [sp, #8]
 8003e5e:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e66:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6523      	str	r3, [r4, #80]	; 0x50
 8003e6c:	e5a9      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003e6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e70:	6802      	ldr	r2, [r0, #0]
 8003e72:	6852      	ldr	r2, [r2, #4]
 8003e74:	b292      	uxth	r2, r2
 8003e76:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003e78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e7a:	b292      	uxth	r2, r2
 8003e7c:	b11a      	cbz	r2, 8003e86 <HAL_I2C_EV_IRQHandler+0x51e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e80:	f042 0204 	orr.w	r2, r2, #4
 8003e84:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e8c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e8e:	f7fe ffed 	bl	8002e6c <HAL_DMA_GetState>
 8003e92:	2801      	cmp	r0, #1
 8003e94:	f43f ae93 	beq.w	8003bbe <HAL_I2C_EV_IRQHandler+0x256>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e9a:	4ba9      	ldr	r3, [pc, #676]	; (8004140 <HAL_I2C_EV_IRQHandler+0x7d8>)
 8003e9c:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e9e:	f7fe fee3 	bl	8002c68 <HAL_DMA_Abort_IT>
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	f43f ae8b 	beq.w	8003bbe <HAL_I2C_EV_IRQHandler+0x256>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ea8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003eaa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003eac:	4798      	blx	r3
 8003eae:	e686      	b.n	8003bbe <HAL_I2C_EV_IRQHandler+0x256>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eb0:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8003eb2:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003eb4:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eb6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003eba:	f7ff fbbd 	bl	8003638 <HAL_I2C_SlaveRxCpltCallback>
 8003ebe:	e6ab      	b.n	8003c18 <HAL_I2C_EV_IRQHandler+0x2b0>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec0:	4ba0      	ldr	r3, [pc, #640]	; (8004144 <HAL_I2C_EV_IRQHandler+0x7dc>)
 8003ec2:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8003eca:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003ed4:	f7ff fbb4 	bl	8003640 <HAL_I2C_ListenCpltCallback>
 8003ed8:	e573      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      else if (hi2c->XferCount == 1U)
 8003eda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003edc:	b292      	uxth	r2, r2
 8003ede:	2a01      	cmp	r2, #1
 8003ee0:	d076      	beq.n	8003fd0 <HAL_I2C_EV_IRQHandler+0x668>
      else if (hi2c->XferCount == 2U)
 8003ee2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ee4:	b292      	uxth	r2, r2
 8003ee6:	2a02      	cmp	r2, #2
 8003ee8:	f000 810c 	beq.w	8004104 <HAL_I2C_EV_IRQHandler+0x79c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ef2:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	0511      	lsls	r1, r2, #20
 8003ef8:	d50e      	bpl.n	8003f18 <HAL_I2C_EV_IRQHandler+0x5b0>
 8003efa:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003efe:	d007      	beq.n	8003f10 <HAL_I2C_EV_IRQHandler+0x5a8>
 8003f00:	3801      	subs	r0, #1
 8003f02:	281f      	cmp	r0, #31
 8003f04:	d808      	bhi.n	8003f18 <HAL_I2C_EV_IRQHandler+0x5b0>
 8003f06:	4a90      	ldr	r2, [pc, #576]	; (8004148 <HAL_I2C_EV_IRQHandler+0x7e0>)
 8003f08:	fa22 f000 	lsr.w	r0, r2, r0
 8003f0c:	07c2      	lsls	r2, r0, #31
 8003f0e:	d503      	bpl.n	8003f18 <HAL_I2C_EV_IRQHandler+0x5b0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f16:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	9208      	str	r2, [sp, #32]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	9208      	str	r2, [sp, #32]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	9308      	str	r3, [sp, #32]
 8003f24:	9b08      	ldr	r3, [sp, #32]
 8003f26:	e79f      	b.n	8003e68 <HAL_I2C_EV_IRQHandler+0x500>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f2a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003f2e:	2a21      	cmp	r2, #33	; 0x21
 8003f30:	f47f ad47 	bne.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    if (hi2c->XferCount != 0U)
 8003f34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f36:	b292      	uxth	r2, r2
 8003f38:	2a00      	cmp	r2, #0
 8003f3a:	f47f aeb9 	bne.w	8003cb0 <HAL_I2C_EV_IRQHandler+0x348>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f3e:	2908      	cmp	r1, #8
 8003f40:	f000 8160 	beq.w	8004204 <HAL_I2C_EV_IRQHandler+0x89c>
 8003f44:	2920      	cmp	r1, #32
 8003f46:	f000 815d 	beq.w	8004204 <HAL_I2C_EV_IRQHandler+0x89c>
 8003f4a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003f4e:	f000 8159 	beq.w	8004204 <HAL_I2C_EV_IRQHandler+0x89c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f52:	6859      	ldr	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f54:	2611      	movs	r6, #17
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f56:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
        hi2c->State = HAL_I2C_STATE_READY;
 8003f5a:	2520      	movs	r5, #32
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f5c:	6059      	str	r1, [r3, #4]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f5e:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f60:	6326      	str	r6, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f62:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f6a:	f7ff fb5f 	bl	800362c <HAL_I2C_MasterTxCpltCallback>
 8003f6e:	e528      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f70:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f72:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003f7e:	e6cb      	b.n	8003d18 <HAL_I2C_EV_IRQHandler+0x3b0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f80:	9100      	str	r1, [sp, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	9200      	str	r2, [sp, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	9b00      	ldr	r3, [sp, #0]
 8003f8c:	e519      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f8e:	2a21      	cmp	r2, #33	; 0x21
 8003f90:	f43f add1 	beq.w	8003b36 <HAL_I2C_EV_IRQHandler+0x1ce>
 8003f94:	e5c9      	b.n	8003b2a <HAL_I2C_EV_IRQHandler+0x1c2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	9201      	str	r2, [sp, #4]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	9201      	str	r2, [sp, #4]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	9201      	str	r2, [sp, #4]
 8003fa0:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003faa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003fac:	3301      	adds	r3, #1
 8003fae:	6523      	str	r3, [r4, #80]	; 0x50
 8003fb0:	e507      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fb2:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003fb4:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fba:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003fbc:	f43f aea9 	beq.w	8003d12 <HAL_I2C_EV_IRQHandler+0x3aa>
 8003fc0:	2902      	cmp	r1, #2
 8003fc2:	f43f aea6 	beq.w	8003d12 <HAL_I2C_EV_IRQHandler+0x3aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e6a0      	b.n	8003d12 <HAL_I2C_EV_IRQHandler+0x3aa>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fd0:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003fd4:	f000 8102 	beq.w	80041dc <HAL_I2C_EV_IRQHandler+0x874>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003fd8:	2808      	cmp	r0, #8
 8003fda:	f000 80bb 	beq.w	8004154 <HAL_I2C_EV_IRQHandler+0x7ec>
 8003fde:	2820      	cmp	r0, #32
 8003fe0:	f000 80b8 	beq.w	8004154 <HAL_I2C_EV_IRQHandler+0x7ec>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003fe4:	2d12      	cmp	r5, #18
 8003fe6:	f000 8150 	beq.w	800428a <HAL_I2C_EV_IRQHandler+0x922>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fea:	2810      	cmp	r0, #16
 8003fec:	f200 8150 	bhi.w	8004290 <HAL_I2C_EV_IRQHandler+0x928>
 8003ff0:	4a56      	ldr	r2, [pc, #344]	; (800414c <HAL_I2C_EV_IRQHandler+0x7e4>)
 8003ff2:	fa22 f000 	lsr.w	r0, r2, r0
 8003ff6:	07c1      	lsls	r1, r0, #31
 8003ff8:	f140 814a 	bpl.w	8004290 <HAL_I2C_EV_IRQHandler+0x928>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004002:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004004:	2200      	movs	r2, #0
 8004006:	9205      	str	r2, [sp, #20]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	9205      	str	r2, [sp, #20]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	9305      	str	r3, [sp, #20]
 8004010:	9b05      	ldr	r3, [sp, #20]
 8004012:	e729      	b.n	8003e68 <HAL_I2C_EV_IRQHandler+0x500>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004014:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004018:	f000 80c3 	beq.w	80041a2 <HAL_I2C_EV_IRQHandler+0x83a>
 800401c:	2910      	cmp	r1, #16
 800401e:	f000 80c0 	beq.w	80041a2 <HAL_I2C_EV_IRQHandler+0x83a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004022:	2904      	cmp	r1, #4
 8004024:	f000 8122 	beq.w	800426c <HAL_I2C_EV_IRQHandler+0x904>
 8004028:	2902      	cmp	r1, #2
 800402a:	f000 811f 	beq.w	800426c <HAL_I2C_EV_IRQHandler+0x904>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004032:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004034:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 800403a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 800403c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403e:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8004040:	3b01      	subs	r3, #1
 8004042:	b29b      	uxth	r3, r3
 8004044:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004046:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 8004048:	1c51      	adds	r1, r2, #1
 800404a:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404c:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 800404e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004050:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8004052:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004054:	3b01      	subs	r3, #1
 8004056:	b29b      	uxth	r3, r3
 8004058:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800405a:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 800405c:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 8004062:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 8004064:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004066:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004068:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800406c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	f000 80db 	beq.w	800422c <HAL_I2C_EV_IRQHandler+0x8c4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004076:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004078:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800407e:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004080:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004082:	f7ff fad5 	bl	8003630 <HAL_I2C_MasterRxCpltCallback>
 8004086:	e49c      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004088:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800408c:	2a40      	cmp	r2, #64	; 0x40
 800408e:	f47f ae0f 	bne.w	8003cb0 <HAL_I2C_EV_IRQHandler+0x348>
 8004092:	e652      	b.n	8003d3a <HAL_I2C_EV_IRQHandler+0x3d2>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004094:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004096:	2802      	cmp	r0, #2
 8004098:	f43f ac93 	beq.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 800409c:	2a01      	cmp	r2, #1
 800409e:	f63f ac90 	bhi.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040a2:	4a2b      	ldr	r2, [pc, #172]	; (8004150 <HAL_I2C_EV_IRQHandler+0x7e8>)
  __IO uint32_t count = 0U;
 80040a4:	910a      	str	r1, [sp, #40]	; 0x28
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80040ac:	fbb2 f2f1 	udiv	r2, r2, r1
 80040b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80040b4:	920a      	str	r2, [sp, #40]	; 0x28
 80040b6:	e004      	b.n	80040c2 <HAL_I2C_EV_IRQHandler+0x75a>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80040be:	f000 80ec 	beq.w	800429a <HAL_I2C_EV_IRQHandler+0x932>
    count--;
 80040c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040c4:	3a01      	subs	r2, #1
 80040c6:	920a      	str	r2, [sp, #40]	; 0x28
    if (count == 0U)
 80040c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040ca:	2900      	cmp	r1, #0
 80040cc:	d1f4      	bne.n	80040b8 <HAL_I2C_EV_IRQHandler+0x750>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 80040e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80040e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80040ec:	3201      	adds	r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	2020      	movs	r0, #32
        hi2c->XferCount--;
 80040f0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80040f2:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 80040f8:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fa:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80040fe:	f7ff faff 	bl	8003700 <HAL_I2C_ErrorCallback>
 8004102:	e45e      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004104:	2810      	cmp	r0, #16
 8004106:	f240 809a 	bls.w	800423e <HAL_I2C_EV_IRQHandler+0x8d6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004110:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004118:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	0516      	lsls	r6, r2, #20
 800411e:	d507      	bpl.n	8004130 <HAL_I2C_EV_IRQHandler+0x7c8>
 8004120:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004124:	f040 8098 	bne.w	8004258 <HAL_I2C_EV_IRQHandler+0x8f0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800412e:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004130:	2200      	movs	r2, #0
 8004132:	9207      	str	r2, [sp, #28]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	9207      	str	r2, [sp, #28]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	9307      	str	r3, [sp, #28]
 800413c:	9b07      	ldr	r3, [sp, #28]
 800413e:	e693      	b.n	8003e68 <HAL_I2C_EV_IRQHandler+0x500>
 8004140:	08003709 	.word	0x08003709
 8004144:	ffff0000 	.word	0xffff0000
 8004148:	80008081 	.word	0x80008081
 800414c:	00010014 	.word	0x00010014
 8004150:	20000000 	.word	0x20000000
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004154:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004156:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	9106      	str	r1, [sp, #24]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	9206      	str	r2, [sp, #24]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	9206      	str	r2, [sp, #24]
 8004168:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e679      	b.n	8003e68 <HAL_I2C_EV_IRQHandler+0x500>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004174:	2d08      	cmp	r5, #8
 8004176:	d018      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0x842>
 8004178:	2d20      	cmp	r5, #32
 800417a:	d016      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0x842>
 800417c:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 8004180:	d013      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0x842>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004182:	685a      	ldr	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004184:	2611      	movs	r6, #17
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004186:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800418a:	2500      	movs	r5, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800418c:	2120      	movs	r1, #32
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800418e:	605a      	str	r2, [r3, #4]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004190:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004192:	6326      	str	r6, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004198:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800419c:	f7ff fa46 	bl	800362c <HAL_I2C_MasterTxCpltCallback>
 80041a0:	e40f      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e744      	b.n	8004034 <HAL_I2C_EV_IRQHandler+0x6cc>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041b0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	6819      	ldr	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041b4:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80041b6:	2020      	movs	r0, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80041bc:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041be:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041c4:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041cc:	2b40      	cmp	r3, #64	; 0x40
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041ce:	4620      	mov	r0, r4
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041d0:	f47f aecb 	bne.w	8003f6a <HAL_I2C_EV_IRQHandler+0x602>
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041d4:	f7ff fa36 	bl	8003644 <HAL_I2C_MemTxCpltCallback>
 80041d8:	f7ff bbf3 	b.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e2:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80041ea:	d043      	beq.n	8004274 <HAL_I2C_EV_IRQHandler+0x90c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ec:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ee:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f4:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f6:	9103      	str	r1, [sp, #12]
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	9203      	str	r2, [sp, #12]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	9303      	str	r3, [sp, #12]
 8004200:	9b03      	ldr	r3, [sp, #12]
 8004202:	e631      	b.n	8003e68 <HAL_I2C_EV_IRQHandler+0x500>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800420a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	681a      	ldr	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800420e:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        hi2c->State = HAL_I2C_STATE_READY;
 8004214:	2520      	movs	r5, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	601a      	str	r2, [r3, #0]
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004218:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 800421a:	6321      	str	r1, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800421c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004220:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004224:	f7ff fa02 	bl	800362c <HAL_I2C_MasterTxCpltCallback>
 8004228:	f7ff bbcb 	b.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800422c:	2300      	movs	r3, #0
 800422e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004232:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8004234:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004236:	f7ff fa61 	bl	80036fc <HAL_I2C_MemRxCpltCallback>
 800423a:	f7ff bbc2 	b.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800423e:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <HAL_I2C_EV_IRQHandler+0x978>)
 8004240:	40c2      	lsrs	r2, r0
 8004242:	07d2      	lsls	r2, r2, #31
 8004244:	f57f af61 	bpl.w	800410a <HAL_I2C_EV_IRQHandler+0x7a2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800424e:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	0515      	lsls	r5, r2, #20
 8004254:	f57f af6c 	bpl.w	8004130 <HAL_I2C_EV_IRQHandler+0x7c8>
 8004258:	3801      	subs	r0, #1
 800425a:	281f      	cmp	r0, #31
 800425c:	f63f af68 	bhi.w	8004130 <HAL_I2C_EV_IRQHandler+0x7c8>
 8004260:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <HAL_I2C_EV_IRQHandler+0x97c>)
 8004262:	40c2      	lsrs	r2, r0
 8004264:	07d0      	lsls	r0, r2, #31
 8004266:	f57f af63 	bpl.w	8004130 <HAL_I2C_EV_IRQHandler+0x7c8>
 800426a:	e75d      	b.n	8004128 <HAL_I2C_EV_IRQHandler+0x7c0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e6df      	b.n	8004034 <HAL_I2C_EV_IRQHandler+0x6cc>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004274:	9204      	str	r2, [sp, #16]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	9204      	str	r2, [sp, #16]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	9204      	str	r2, [sp, #16]
 800427e:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e5ee      	b.n	8003e68 <HAL_I2C_EV_IRQHandler+0x500>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800428a:	2801      	cmp	r0, #1
 800428c:	f47f af62 	bne.w	8004154 <HAL_I2C_EV_IRQHandler+0x7ec>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e6b4      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x69c>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429a:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429c:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80042a2:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042a4:	6859      	ldr	r1, [r3, #4]
 80042a6:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80042aa:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 80042b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 80042b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 80042b8:	2020      	movs	r0, #32
        hi2c->XferCount--;
 80042ba:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042bc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042c0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 80042c4:	3101      	adds	r1, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042c6:	2b40      	cmp	r3, #64	; 0x40
        hi2c->pBuffPtr++;
 80042c8:	6261      	str	r1, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ca:	f47f aed5 	bne.w	8004078 <HAL_I2C_EV_IRQHandler+0x710>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ce:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 80042d2:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 80042d4:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80042d6:	f7ff fa11 	bl	80036fc <HAL_I2C_MemRxCpltCallback>
 80042da:	f7ff bb72 	b.w	80039c2 <HAL_I2C_EV_IRQHandler+0x5a>
 80042de:	bf00      	nop
 80042e0:	00010014 	.word	0x00010014
 80042e4:	80008081 	.word	0x80008081

080042e8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e8:	2800      	cmp	r0, #0
 80042ea:	f000 8263 	beq.w	80047b4 <HAL_RCC_OscConfig+0x4cc>
{
 80042ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80042f2:	6803      	ldr	r3, [r0, #0]
 80042f4:	2b0f      	cmp	r3, #15
{
 80042f6:	b082      	sub	sp, #8
 80042f8:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80042fa:	f200 8137 	bhi.w	800456c <HAL_RCC_OscConfig+0x284>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fe:	07dd      	lsls	r5, r3, #31
 8004300:	d537      	bpl.n	8004372 <HAL_RCC_OscConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004302:	6863      	ldr	r3, [r4, #4]
 8004304:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8004308:	d003      	beq.n	8004312 <HAL_RCC_OscConfig+0x2a>
 800430a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800430e:	f040 81a4 	bne.w	800465a <HAL_RCC_OscConfig+0x372>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004312:	4ab6      	ldr	r2, [pc, #728]	; (80045ec <HAL_RCC_OscConfig+0x304>)
 8004314:	6893      	ldr	r3, [r2, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b04      	cmp	r3, #4
 800431c:	f000 8180 	beq.w	8004620 <HAL_RCC_OscConfig+0x338>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004320:	6893      	ldr	r3, [r2, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004326:	2b08      	cmp	r3, #8
 8004328:	f000 8176 	beq.w	8004618 <HAL_RCC_OscConfig+0x330>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800432c:	6863      	ldr	r3, [r4, #4]
 800432e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004332:	f000 817f 	beq.w	8004634 <HAL_RCC_OscConfig+0x34c>
 8004336:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800433a:	f000 8207 	beq.w	800474c <HAL_RCC_OscConfig+0x464>
 800433e:	4dab      	ldr	r5, [pc, #684]	; (80045ec <HAL_RCC_OscConfig+0x304>)
 8004340:	682a      	ldr	r2, [r5, #0]
 8004342:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004346:	602a      	str	r2, [r5, #0]
 8004348:	682a      	ldr	r2, [r5, #0]
 800434a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800434e:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 8174 	bne.w	800463e <HAL_RCC_OscConfig+0x356>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fe f82f 	bl	80023b8 <HAL_GetTick>
 800435a:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435c:	e005      	b.n	800436a <HAL_RCC_OscConfig+0x82>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800435e:	f7fe f82b 	bl	80023b8 <HAL_GetTick>
 8004362:	1b80      	subs	r0, r0, r6
 8004364:	2864      	cmp	r0, #100	; 0x64
 8004366:	f200 819a 	bhi.w	800469e <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	682b      	ldr	r3, [r5, #0]
 800436c:	039b      	lsls	r3, r3, #14
 800436e:	d4f6      	bmi.n	800435e <HAL_RCC_OscConfig+0x76>
 8004370:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004372:	079f      	lsls	r7, r3, #30
 8004374:	d530      	bpl.n	80043d8 <HAL_RCC_OscConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004376:	68e3      	ldr	r3, [r4, #12]
 8004378:	2b01      	cmp	r3, #1
 800437a:	f200 810c 	bhi.w	8004596 <HAL_RCC_OscConfig+0x2ae>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800437e:	6923      	ldr	r3, [r4, #16]
 8004380:	2b1f      	cmp	r3, #31
 8004382:	f200 8111 	bhi.w	80045a8 <HAL_RCC_OscConfig+0x2c0>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004386:	4b99      	ldr	r3, [pc, #612]	; (80045ec <HAL_RCC_OscConfig+0x304>)
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	f012 0f0c 	tst.w	r2, #12
 800438e:	f000 80f7 	beq.w	8004580 <HAL_RCC_OscConfig+0x298>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004398:	2a08      	cmp	r2, #8
 800439a:	f000 80ed 	beq.w	8004578 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800439e:	68e3      	ldr	r3, [r4, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8198 	beq.w	80046d6 <HAL_RCC_OscConfig+0x3ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a6:	4b92      	ldr	r3, [pc, #584]	; (80045f0 <HAL_RCC_OscConfig+0x308>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a8:	4e90      	ldr	r6, [pc, #576]	; (80045ec <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_HSI_ENABLE();
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043ae:	f7fe f803 	bl	80023b8 <HAL_GetTick>
 80043b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	e005      	b.n	80043c2 <HAL_RCC_OscConfig+0xda>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b6:	f7fd ffff 	bl	80023b8 <HAL_GetTick>
 80043ba:	1b40      	subs	r0, r0, r5
 80043bc:	2802      	cmp	r0, #2
 80043be:	f200 816e 	bhi.w	800469e <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	6833      	ldr	r3, [r6, #0]
 80043c4:	0798      	lsls	r0, r3, #30
 80043c6:	d5f6      	bpl.n	80043b6 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c8:	6833      	ldr	r3, [r6, #0]
 80043ca:	6922      	ldr	r2, [r4, #16]
 80043cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80043d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043d8:	071a      	lsls	r2, r3, #28
 80043da:	f100 80af 	bmi.w	800453c <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043de:	075d      	lsls	r5, r3, #29
 80043e0:	d544      	bpl.n	800446c <HAL_RCC_OscConfig+0x184>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80043e2:	68a3      	ldr	r3, [r4, #8]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d906      	bls.n	80043f6 <HAL_RCC_OscConfig+0x10e>
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	d004      	beq.n	80043f6 <HAL_RCC_OscConfig+0x10e>
 80043ec:	4881      	ldr	r0, [pc, #516]	; (80045f4 <HAL_RCC_OscConfig+0x30c>)
 80043ee:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80043f2:	f7fd fbf3 	bl	8001bdc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f6:	4a7d      	ldr	r2, [pc, #500]	; (80045ec <HAL_RCC_OscConfig+0x304>)
 80043f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80043fa:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80043fe:	f040 80f2 	bne.w	80045e6 <HAL_RCC_OscConfig+0x2fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440a:	6413      	str	r3, [r2, #64]	; 0x40
 800440c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004416:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004418:	4e77      	ldr	r6, [pc, #476]	; (80045f8 <HAL_RCC_OscConfig+0x310>)
 800441a:	6833      	ldr	r3, [r6, #0]
 800441c:	05d8      	lsls	r0, r3, #23
 800441e:	f140 812e 	bpl.w	800467e <HAL_RCC_OscConfig+0x396>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004422:	68a3      	ldr	r3, [r4, #8]
 8004424:	2b01      	cmp	r3, #1
 8004426:	f000 813e 	beq.w	80046a6 <HAL_RCC_OscConfig+0x3be>
 800442a:	2b05      	cmp	r3, #5
 800442c:	f000 81c4 	beq.w	80047b8 <HAL_RCC_OscConfig+0x4d0>
 8004430:	4e6e      	ldr	r6, [pc, #440]	; (80045ec <HAL_RCC_OscConfig+0x304>)
 8004432:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	6732      	str	r2, [r6, #112]	; 0x70
 800443a:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800443c:	f022 0204 	bic.w	r2, r2, #4
 8004440:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 8134 	bne.w	80046b0 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004448:	f7fd ffb6 	bl	80023b8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004450:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004452:	e005      	b.n	8004460 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fd ffb0 	bl	80023b8 <HAL_GetTick>
 8004458:	1bc0      	subs	r0, r0, r7
 800445a:	4540      	cmp	r0, r8
 800445c:	f200 811f 	bhi.w	800469e <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004460:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004462:	079b      	lsls	r3, r3, #30
 8004464:	d4f6      	bmi.n	8004454 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004466:	2d00      	cmp	r5, #0
 8004468:	f040 817a 	bne.w	8004760 <HAL_RCC_OscConfig+0x478>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800446c:	69a0      	ldr	r0, [r4, #24]
 800446e:	2802      	cmp	r0, #2
 8004470:	f200 80c8 	bhi.w	8004604 <HAL_RCC_OscConfig+0x31c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004474:	2800      	cmp	r0, #0
 8004476:	d05d      	beq.n	8004534 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004478:	4d5c      	ldr	r5, [pc, #368]	; (80045ec <HAL_RCC_OscConfig+0x304>)
 800447a:	68ab      	ldr	r3, [r5, #8]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	2b08      	cmp	r3, #8
 8004482:	f000 8139 	beq.w	80046f8 <HAL_RCC_OscConfig+0x410>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004486:	2802      	cmp	r0, #2
 8004488:	f040 8182 	bne.w	8004790 <HAL_RCC_OscConfig+0x4a8>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800448c:	69e3      	ldr	r3, [r4, #28]
 800448e:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8004492:	d004      	beq.n	800449e <HAL_RCC_OscConfig+0x1b6>
 8004494:	4857      	ldr	r0, [pc, #348]	; (80045f4 <HAL_RCC_OscConfig+0x30c>)
 8004496:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800449a:	f7fd fb9f 	bl	8001bdc <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800449e:	6a23      	ldr	r3, [r4, #32]
 80044a0:	2b3f      	cmp	r3, #63	; 0x3f
 80044a2:	f200 816f 	bhi.w	8004784 <HAL_RCC_OscConfig+0x49c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80044a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a8:	3b32      	subs	r3, #50	; 0x32
 80044aa:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 80044ae:	f200 8163 	bhi.w	8004778 <HAL_RCC_OscConfig+0x490>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80044b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	f200 8159 	bhi.w	800476c <HAL_RCC_OscConfig+0x484>
 80044ba:	f44f 72aa 	mov.w	r2, #340	; 0x154
 80044be:	fa22 f303 	lsr.w	r3, r2, r3
 80044c2:	07d8      	lsls	r0, r3, #31
 80044c4:	f140 8152 	bpl.w	800476c <HAL_RCC_OscConfig+0x484>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80044c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044ca:	3b02      	subs	r3, #2
 80044cc:	2b0d      	cmp	r3, #13
 80044ce:	f200 817d 	bhi.w	80047cc <HAL_RCC_OscConfig+0x4e4>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b4a      	ldr	r3, [pc, #296]	; (80045fc <HAL_RCC_OscConfig+0x314>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d4:	4e45      	ldr	r6, [pc, #276]	; (80045ec <HAL_RCC_OscConfig+0x304>)
        __HAL_RCC_PLL_DISABLE();
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80044da:	f7fd ff6d 	bl	80023b8 <HAL_GetTick>
 80044de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e0:	e005      	b.n	80044ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e2:	f7fd ff69 	bl	80023b8 <HAL_GetTick>
 80044e6:	1b40      	subs	r0, r0, r5
 80044e8:	2802      	cmp	r0, #2
 80044ea:	f200 80d8 	bhi.w	800469e <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	6833      	ldr	r3, [r6, #0]
 80044f0:	0199      	lsls	r1, r3, #6
 80044f2:	d4f6      	bmi.n	80044e2 <HAL_RCC_OscConfig+0x1fa>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044f4:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 80044f8:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80044fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80044fe:	432b      	orrs	r3, r5
 8004500:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004504:	0852      	lsrs	r2, r2, #1
 8004506:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800450a:	3a01      	subs	r2, #1
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800450c:	493b      	ldr	r1, [pc, #236]	; (80045fc <HAL_RCC_OscConfig+0x314>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450e:	4d37      	ldr	r5, [pc, #220]	; (80045ec <HAL_RCC_OscConfig+0x304>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004514:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004516:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8004518:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800451a:	f7fd ff4d 	bl	80023b8 <HAL_GetTick>
 800451e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004520:	e005      	b.n	800452e <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004522:	f7fd ff49 	bl	80023b8 <HAL_GetTick>
 8004526:	1b00      	subs	r0, r0, r4
 8004528:	2802      	cmp	r0, #2
 800452a:	f200 80b8 	bhi.w	800469e <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452e:	682b      	ldr	r3, [r5, #0]
 8004530:	019a      	lsls	r2, r3, #6
 8004532:	d5f6      	bpl.n	8004522 <HAL_RCC_OscConfig+0x23a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004534:	2000      	movs	r0, #0
}
 8004536:	b002      	add	sp, #8
 8004538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800453c:	6963      	ldr	r3, [r4, #20]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d848      	bhi.n	80045d4 <HAL_RCC_OscConfig+0x2ec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004542:	2b00      	cmp	r3, #0
 8004544:	d036      	beq.n	80045b4 <HAL_RCC_OscConfig+0x2cc>
      __HAL_RCC_LSI_ENABLE();
 8004546:	4b2e      	ldr	r3, [pc, #184]	; (8004600 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004548:	4e28      	ldr	r6, [pc, #160]	; (80045ec <HAL_RCC_OscConfig+0x304>)
      __HAL_RCC_LSI_ENABLE();
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800454e:	f7fd ff33 	bl	80023b8 <HAL_GetTick>
 8004552:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004554:	e005      	b.n	8004562 <HAL_RCC_OscConfig+0x27a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004556:	f7fd ff2f 	bl	80023b8 <HAL_GetTick>
 800455a:	1b40      	subs	r0, r0, r5
 800455c:	2802      	cmp	r0, #2
 800455e:	f200 809e 	bhi.w	800469e <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004564:	079b      	lsls	r3, r3, #30
 8004566:	d5f6      	bpl.n	8004556 <HAL_RCC_OscConfig+0x26e>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	e738      	b.n	80043de <HAL_RCC_OscConfig+0xf6>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800456c:	4821      	ldr	r0, [pc, #132]	; (80045f4 <HAL_RCC_OscConfig+0x30c>)
 800456e:	21e8      	movs	r1, #232	; 0xe8
 8004570:	f7fd fb34 	bl	8001bdc <assert_failed>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	e6c2      	b.n	80042fe <HAL_RCC_OscConfig+0x16>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	025e      	lsls	r6, r3, #9
 800457c:	f53f af0f 	bmi.w	800439e <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <HAL_RCC_OscConfig+0x304>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	079d      	lsls	r5, r3, #30
 8004586:	d56d      	bpl.n	8004664 <HAL_RCC_OscConfig+0x37c>
 8004588:	68e3      	ldr	r3, [r4, #12]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d06a      	beq.n	8004664 <HAL_RCC_OscConfig+0x37c>
        return HAL_ERROR;
 800458e:	2001      	movs	r0, #1
}
 8004590:	b002      	add	sp, #8
 8004592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004596:	4817      	ldr	r0, [pc, #92]	; (80045f4 <HAL_RCC_OscConfig+0x30c>)
 8004598:	f240 111f 	movw	r1, #287	; 0x11f
 800459c:	f7fd fb1e 	bl	8001bdc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80045a0:	6923      	ldr	r3, [r4, #16]
 80045a2:	2b1f      	cmp	r3, #31
 80045a4:	f67f aeef 	bls.w	8004386 <HAL_RCC_OscConfig+0x9e>
 80045a8:	4812      	ldr	r0, [pc, #72]	; (80045f4 <HAL_RCC_OscConfig+0x30c>)
 80045aa:	f44f 7190 	mov.w	r1, #288	; 0x120
 80045ae:	f7fd fb15 	bl	8001bdc <assert_failed>
 80045b2:	e6e8      	b.n	8004386 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_LSI_DISABLE();
 80045b4:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b6:	4e0d      	ldr	r6, [pc, #52]	; (80045ec <HAL_RCC_OscConfig+0x304>)
      __HAL_RCC_LSI_DISABLE();
 80045b8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80045ba:	f7fd fefd 	bl	80023b8 <HAL_GetTick>
 80045be:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	e004      	b.n	80045cc <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fd fef9 	bl	80023b8 <HAL_GetTick>
 80045c6:	1b40      	subs	r0, r0, r5
 80045c8:	2802      	cmp	r0, #2
 80045ca:	d868      	bhi.n	800469e <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045cc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80045ce:	079f      	lsls	r7, r3, #30
 80045d0:	d4f7      	bmi.n	80045c2 <HAL_RCC_OscConfig+0x2da>
 80045d2:	e7c9      	b.n	8004568 <HAL_RCC_OscConfig+0x280>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80045d4:	4807      	ldr	r0, [pc, #28]	; (80045f4 <HAL_RCC_OscConfig+0x30c>)
 80045d6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80045da:	f7fd faff 	bl	8001bdc <assert_failed>
 80045de:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0e7      	beq.n	80045b4 <HAL_RCC_OscConfig+0x2cc>
 80045e4:	e7af      	b.n	8004546 <HAL_RCC_OscConfig+0x25e>
    FlagStatus       pwrclkchanged = RESET;
 80045e6:	2500      	movs	r5, #0
 80045e8:	e716      	b.n	8004418 <HAL_RCC_OscConfig+0x130>
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800
 80045f0:	42470000 	.word	0x42470000
 80045f4:	0800aab0 	.word	0x0800aab0
 80045f8:	40007000 	.word	0x40007000
 80045fc:	42470060 	.word	0x42470060
 8004600:	42470e80 	.word	0x42470e80
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004604:	4874      	ldr	r0, [pc, #464]	; (80047d8 <HAL_RCC_OscConfig+0x4f0>)
 8004606:	f240 11cf 	movw	r1, #463	; 0x1cf
 800460a:	f7fd fae7 	bl	8001bdc <assert_failed>
 800460e:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004610:	2800      	cmp	r0, #0
 8004612:	f47f af31 	bne.w	8004478 <HAL_RCC_OscConfig+0x190>
 8004616:	e78d      	b.n	8004534 <HAL_RCC_OscConfig+0x24c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004618:	6853      	ldr	r3, [r2, #4]
 800461a:	0258      	lsls	r0, r3, #9
 800461c:	f57f ae86 	bpl.w	800432c <HAL_RCC_OscConfig+0x44>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004620:	4b6e      	ldr	r3, [pc, #440]	; (80047dc <HAL_RCC_OscConfig+0x4f4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	0399      	lsls	r1, r3, #14
 8004626:	f57f aea3 	bpl.w	8004370 <HAL_RCC_OscConfig+0x88>
 800462a:	6863      	ldr	r3, [r4, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	f47f ae9f 	bne.w	8004370 <HAL_RCC_OscConfig+0x88>
 8004632:	e7ac      	b.n	800458e <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004634:	4a69      	ldr	r2, [pc, #420]	; (80047dc <HAL_RCC_OscConfig+0x4f4>)
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800463c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800463e:	f7fd febb 	bl	80023b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	4e66      	ldr	r6, [pc, #408]	; (80047dc <HAL_RCC_OscConfig+0x4f4>)
        tickstart = HAL_GetTick();
 8004644:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	e004      	b.n	8004652 <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004648:	f7fd feb6 	bl	80023b8 <HAL_GetTick>
 800464c:	1b40      	subs	r0, r0, r5
 800464e:	2864      	cmp	r0, #100	; 0x64
 8004650:	d825      	bhi.n	800469e <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	6833      	ldr	r3, [r6, #0]
 8004654:	039a      	lsls	r2, r3, #14
 8004656:	d5f7      	bpl.n	8004648 <HAL_RCC_OscConfig+0x360>
 8004658:	e68a      	b.n	8004370 <HAL_RCC_OscConfig+0x88>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800465a:	485f      	ldr	r0, [pc, #380]	; (80047d8 <HAL_RCC_OscConfig+0x4f0>)
 800465c:	21ed      	movs	r1, #237	; 0xed
 800465e:	f7fd fabd 	bl	8001bdc <assert_failed>
 8004662:	e656      	b.n	8004312 <HAL_RCC_OscConfig+0x2a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004664:	4a5d      	ldr	r2, [pc, #372]	; (80047dc <HAL_RCC_OscConfig+0x4f4>)
 8004666:	6921      	ldr	r1, [r4, #16]
 8004668:	6813      	ldr	r3, [r2, #0]
 800466a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800466e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004676:	071a      	lsls	r2, r3, #28
 8004678:	f57f aeb1 	bpl.w	80043de <HAL_RCC_OscConfig+0xf6>
 800467c:	e75e      	b.n	800453c <HAL_RCC_OscConfig+0x254>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800467e:	6833      	ldr	r3, [r6, #0]
 8004680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004684:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004686:	f7fd fe97 	bl	80023b8 <HAL_GetTick>
 800468a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	05d9      	lsls	r1, r3, #23
 8004690:	f53f aec7 	bmi.w	8004422 <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004694:	f7fd fe90 	bl	80023b8 <HAL_GetTick>
 8004698:	1bc0      	subs	r0, r0, r7
 800469a:	2802      	cmp	r0, #2
 800469c:	d9f6      	bls.n	800468c <HAL_RCC_OscConfig+0x3a4>
            return HAL_TIMEOUT;
 800469e:	2003      	movs	r0, #3
}
 80046a0:	b002      	add	sp, #8
 80046a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a6:	4a4d      	ldr	r2, [pc, #308]	; (80047dc <HAL_RCC_OscConfig+0x4f4>)
 80046a8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80046b0:	f7fd fe82 	bl	80023b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b4:	4f49      	ldr	r7, [pc, #292]	; (80047dc <HAL_RCC_OscConfig+0x4f4>)
      tickstart = HAL_GetTick();
 80046b6:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046bc:	e004      	b.n	80046c8 <HAL_RCC_OscConfig+0x3e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fd fe7b 	bl	80023b8 <HAL_GetTick>
 80046c2:	1b80      	subs	r0, r0, r6
 80046c4:	4540      	cmp	r0, r8
 80046c6:	d8ea      	bhi.n	800469e <HAL_RCC_OscConfig+0x3b6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ca:	079a      	lsls	r2, r3, #30
 80046cc:	d5f7      	bpl.n	80046be <HAL_RCC_OscConfig+0x3d6>
    if(pwrclkchanged == SET)
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	f43f aecc 	beq.w	800446c <HAL_RCC_OscConfig+0x184>
 80046d4:	e044      	b.n	8004760 <HAL_RCC_OscConfig+0x478>
        __HAL_RCC_HSI_DISABLE();
 80046d6:	4a42      	ldr	r2, [pc, #264]	; (80047e0 <HAL_RCC_OscConfig+0x4f8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d8:	4e40      	ldr	r6, [pc, #256]	; (80047dc <HAL_RCC_OscConfig+0x4f4>)
        __HAL_RCC_HSI_DISABLE();
 80046da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80046dc:	f7fd fe6c 	bl	80023b8 <HAL_GetTick>
 80046e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e2:	e004      	b.n	80046ee <HAL_RCC_OscConfig+0x406>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e4:	f7fd fe68 	bl	80023b8 <HAL_GetTick>
 80046e8:	1b40      	subs	r0, r0, r5
 80046ea:	2802      	cmp	r0, #2
 80046ec:	d8d7      	bhi.n	800469e <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ee:	6833      	ldr	r3, [r6, #0]
 80046f0:	0799      	lsls	r1, r3, #30
 80046f2:	d4f7      	bmi.n	80046e4 <HAL_RCC_OscConfig+0x3fc>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	e66f      	b.n	80043d8 <HAL_RCC_OscConfig+0xf0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f8:	2801      	cmp	r0, #1
 80046fa:	f43f af1c 	beq.w	8004536 <HAL_RCC_OscConfig+0x24e>
        pll_config = RCC->PLLCFGR;
 80046fe:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004700:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004706:	4291      	cmp	r1, r2
 8004708:	f47f af41 	bne.w	800458e <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470c:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800470e:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	4291      	cmp	r1, r2
 8004714:	f47f af3b 	bne.w	800458e <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004718:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800471a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800471e:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004720:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004724:	f47f af33 	bne.w	800458e <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004728:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800472a:	0852      	lsrs	r2, r2, #1
 800472c:	3a01      	subs	r2, #1
 800472e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004732:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004736:	f47f af2a 	bne.w	800458e <HAL_RCC_OscConfig+0x2a6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800473a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800473c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004740:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8004744:	bf14      	ite	ne
 8004746:	2001      	movne	r0, #1
 8004748:	2000      	moveq	r0, #0
 800474a:	e6f4      	b.n	8004536 <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474c:	4b23      	ldr	r3, [pc, #140]	; (80047dc <HAL_RCC_OscConfig+0x4f4>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800475c:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800475e:	e76e      	b.n	800463e <HAL_RCC_OscConfig+0x356>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004760:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <HAL_RCC_OscConfig+0x4f4>)
 8004762:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	e67f      	b.n	800446c <HAL_RCC_OscConfig+0x184>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800476c:	481a      	ldr	r0, [pc, #104]	; (80047d8 <HAL_RCC_OscConfig+0x4f0>)
 800476e:	f240 11db 	movw	r1, #475	; 0x1db
 8004772:	f7fd fa33 	bl	8001bdc <assert_failed>
 8004776:	e6a7      	b.n	80044c8 <HAL_RCC_OscConfig+0x1e0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004778:	4817      	ldr	r0, [pc, #92]	; (80047d8 <HAL_RCC_OscConfig+0x4f0>)
 800477a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800477e:	f7fd fa2d 	bl	8001bdc <assert_failed>
 8004782:	e696      	b.n	80044b2 <HAL_RCC_OscConfig+0x1ca>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004784:	4814      	ldr	r0, [pc, #80]	; (80047d8 <HAL_RCC_OscConfig+0x4f0>)
 8004786:	f240 11d9 	movw	r1, #473	; 0x1d9
 800478a:	f7fd fa27 	bl	8001bdc <assert_failed>
 800478e:	e68a      	b.n	80044a6 <HAL_RCC_OscConfig+0x1be>
        __HAL_RCC_PLL_DISABLE();
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <HAL_RCC_OscConfig+0x4fc>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004796:	f7fd fe0f 	bl	80023b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800479c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e005      	b.n	80047ac <HAL_RCC_OscConfig+0x4c4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fd fe0a 	bl	80023b8 <HAL_GetTick>
 80047a4:	1b40      	subs	r0, r0, r5
 80047a6:	2802      	cmp	r0, #2
 80047a8:	f63f af79 	bhi.w	800469e <HAL_RCC_OscConfig+0x3b6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	019b      	lsls	r3, r3, #6
 80047b0:	d4f6      	bmi.n	80047a0 <HAL_RCC_OscConfig+0x4b8>
 80047b2:	e6bf      	b.n	8004534 <HAL_RCC_OscConfig+0x24c>
    return HAL_ERROR;
 80047b4:	2001      	movs	r0, #1
}
 80047b6:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b8:	4b08      	ldr	r3, [pc, #32]	; (80047dc <HAL_RCC_OscConfig+0x4f4>)
 80047ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047bc:	f042 0204 	orr.w	r2, r2, #4
 80047c0:	671a      	str	r2, [r3, #112]	; 0x70
 80047c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ca:	e771      	b.n	80046b0 <HAL_RCC_OscConfig+0x3c8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80047cc:	4802      	ldr	r0, [pc, #8]	; (80047d8 <HAL_RCC_OscConfig+0x4f0>)
 80047ce:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80047d2:	f7fd fa03 	bl	8001bdc <assert_failed>
 80047d6:	e67c      	b.n	80044d2 <HAL_RCC_OscConfig+0x1ea>
 80047d8:	0800aab0 	.word	0x0800aab0
 80047dc:	40023800 	.word	0x40023800
 80047e0:	42470000 	.word	0x42470000
 80047e4:	42470060 	.word	0x42470060

080047e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047e8:	4917      	ldr	r1, [pc, #92]	; (8004848 <HAL_RCC_GetSysClockFreq+0x60>)
{
 80047ea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ec:	688b      	ldr	r3, [r1, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d01b      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0x46>
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d117      	bne.n	800482a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047fa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fc:	684b      	ldr	r3, [r1, #4]
 80047fe:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004802:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004806:	d114      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004808:	6849      	ldr	r1, [r1, #4]
 800480a:	4810      	ldr	r0, [pc, #64]	; (800484c <HAL_RCC_GetSysClockFreq+0x64>)
 800480c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004810:	fba1 0100 	umull	r0, r1, r1, r0
 8004814:	f7fb fd34 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004818:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCC_GetSysClockFreq+0x60>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004820:	3301      	adds	r3, #1
 8004822:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004824:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004828:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800482a:	4808      	ldr	r0, [pc, #32]	; (800484c <HAL_RCC_GetSysClockFreq+0x64>)
}
 800482c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800482e:	4808      	ldr	r0, [pc, #32]	; (8004850 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8004830:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004832:	684b      	ldr	r3, [r1, #4]
 8004834:	4806      	ldr	r0, [pc, #24]	; (8004850 <HAL_RCC_GetSysClockFreq+0x68>)
 8004836:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800483a:	fba3 0100 	umull	r0, r1, r3, r0
 800483e:	2300      	movs	r3, #0
 8004840:	f7fb fd1e 	bl	8000280 <__aeabi_uldivmod>
 8004844:	e7e8      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x30>
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800
 800484c:	00f42400 	.word	0x00f42400
 8004850:	017d7840 	.word	0x017d7840

08004854 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004854:	2800      	cmp	r0, #0
 8004856:	f000 80f2 	beq.w	8004a3e <HAL_RCC_ClockConfig+0x1ea>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800485a:	6803      	ldr	r3, [r0, #0]
 800485c:	3b01      	subs	r3, #1
 800485e:	2b0e      	cmp	r3, #14
{
 8004860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004864:	460d      	mov	r5, r1
 8004866:	4604      	mov	r4, r0
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004868:	f200 80d0 	bhi.w	8004a0c <HAL_RCC_ClockConfig+0x1b8>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800486c:	2d07      	cmp	r5, #7
 800486e:	f200 80c2 	bhi.w	80049f6 <HAL_RCC_ClockConfig+0x1a2>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004872:	4a74      	ldr	r2, [pc, #464]	; (8004a44 <HAL_RCC_ClockConfig+0x1f0>)
 8004874:	6813      	ldr	r3, [r2, #0]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	42ab      	cmp	r3, r5
 800487c:	d36a      	bcc.n	8004954 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	0798      	lsls	r0, r3, #30
 8004882:	d52c      	bpl.n	80048de <HAL_RCC_ClockConfig+0x8a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	0759      	lsls	r1, r3, #29
 8004886:	d504      	bpl.n	8004892 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004888:	496f      	ldr	r1, [pc, #444]	; (8004a48 <HAL_RCC_ClockConfig+0x1f4>)
 800488a:	688a      	ldr	r2, [r1, #8]
 800488c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004890:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004892:	071a      	lsls	r2, r3, #28
 8004894:	d504      	bpl.n	80048a0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004896:	496c      	ldr	r1, [pc, #432]	; (8004a48 <HAL_RCC_ClockConfig+0x1f4>)
 8004898:	688a      	ldr	r2, [r1, #8]
 800489a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800489e:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80048a0:	68a1      	ldr	r1, [r4, #8]
 80048a2:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 80048a6:	d014      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x7e>
 80048a8:	f021 0220 	bic.w	r2, r1, #32
 80048ac:	2a90      	cmp	r2, #144	; 0x90
 80048ae:	d010      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x7e>
 80048b0:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 80048b4:	2aa0      	cmp	r2, #160	; 0xa0
 80048b6:	d00c      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x7e>
 80048b8:	f021 0210 	bic.w	r2, r1, #16
 80048bc:	2ac0      	cmp	r2, #192	; 0xc0
 80048be:	d008      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x7e>
 80048c0:	29f0      	cmp	r1, #240	; 0xf0
 80048c2:	d006      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x7e>
 80048c4:	f44f 7120 	mov.w	r1, #640	; 0x280
 80048c8:	4860      	ldr	r0, [pc, #384]	; (8004a4c <HAL_RCC_ClockConfig+0x1f8>)
 80048ca:	f7fd f987 	bl	8001bdc <assert_failed>
 80048ce:	68a1      	ldr	r1, [r4, #8]
 80048d0:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d2:	485d      	ldr	r0, [pc, #372]	; (8004a48 <HAL_RCC_ClockConfig+0x1f4>)
 80048d4:	6882      	ldr	r2, [r0, #8]
 80048d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048da:	430a      	orrs	r2, r1
 80048dc:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048de:	07df      	lsls	r7, r3, #31
 80048e0:	d527      	bpl.n	8004932 <HAL_RCC_ClockConfig+0xde>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	2b03      	cmp	r3, #3
 80048e6:	f200 80a1 	bhi.w	8004a2c <HAL_RCC_ClockConfig+0x1d8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	f000 8098 	beq.w	8004a20 <HAL_RCC_ClockConfig+0x1cc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f0:	1e9a      	subs	r2, r3, #2
 80048f2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f4:	4a54      	ldr	r2, [pc, #336]	; (8004a48 <HAL_RCC_ClockConfig+0x1f4>)
 80048f6:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f8:	f240 808e 	bls.w	8004a18 <HAL_RCC_ClockConfig+0x1c4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fc:	0791      	lsls	r1, r2, #30
 80048fe:	d525      	bpl.n	800494c <HAL_RCC_ClockConfig+0xf8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004900:	4e51      	ldr	r6, [pc, #324]	; (8004a48 <HAL_RCC_ClockConfig+0x1f4>)
 8004902:	68b2      	ldr	r2, [r6, #8]
 8004904:	f022 0203 	bic.w	r2, r2, #3
 8004908:	4313      	orrs	r3, r2
 800490a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800490c:	f7fd fd54 	bl	80023b8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004910:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004914:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	e005      	b.n	8004924 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004918:	f7fd fd4e 	bl	80023b8 <HAL_GetTick>
 800491c:	1bc0      	subs	r0, r0, r7
 800491e:	4540      	cmp	r0, r8
 8004920:	f200 808b 	bhi.w	8004a3a <HAL_RCC_ClockConfig+0x1e6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004924:	68b3      	ldr	r3, [r6, #8]
 8004926:	6862      	ldr	r2, [r4, #4]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004930:	d1f2      	bne.n	8004918 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004932:	4a44      	ldr	r2, [pc, #272]	; (8004a44 <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	6813      	ldr	r3, [r2, #0]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	42ab      	cmp	r3, r5
 800493c:	d915      	bls.n	800496a <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	b2eb      	uxtb	r3, r5
 8004940:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	42ab      	cmp	r3, r5
 800494a:	d00e      	beq.n	800496a <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
}
 800494e:	4618      	mov	r0, r3
 8004950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004954:	b2eb      	uxtb	r3, r5
 8004956:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004958:	6813      	ldr	r3, [r2, #0]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	42ab      	cmp	r3, r5
 8004960:	d1f4      	bne.n	800494c <HAL_RCC_ClockConfig+0xf8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	0798      	lsls	r0, r3, #30
 8004966:	d48d      	bmi.n	8004884 <HAL_RCC_ClockConfig+0x30>
 8004968:	e7b9      	b.n	80048de <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	075a      	lsls	r2, r3, #29
 800496e:	d518      	bpl.n	80049a2 <HAL_RCC_ClockConfig+0x14e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004970:	68e1      	ldr	r1, [r4, #12]
 8004972:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8004976:	d00e      	beq.n	8004996 <HAL_RCC_ClockConfig+0x142>
 8004978:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 800497c:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x142>
 8004982:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 8004986:	d006      	beq.n	8004996 <HAL_RCC_ClockConfig+0x142>
 8004988:	f240 21c5 	movw	r1, #709	; 0x2c5
 800498c:	482f      	ldr	r0, [pc, #188]	; (8004a4c <HAL_RCC_ClockConfig+0x1f8>)
 800498e:	f7fd f925 	bl	8001bdc <assert_failed>
 8004992:	68e1      	ldr	r1, [r4, #12]
 8004994:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004996:	482c      	ldr	r0, [pc, #176]	; (8004a48 <HAL_RCC_ClockConfig+0x1f4>)
 8004998:	6882      	ldr	r2, [r0, #8]
 800499a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800499e:	430a      	orrs	r2, r1
 80049a0:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a2:	071b      	lsls	r3, r3, #28
 80049a4:	d518      	bpl.n	80049d8 <HAL_RCC_ClockConfig+0x184>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80049a6:	6922      	ldr	r2, [r4, #16]
 80049a8:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 80049ac:	d00d      	beq.n	80049ca <HAL_RCC_ClockConfig+0x176>
 80049ae:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 80049b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049b6:	d008      	beq.n	80049ca <HAL_RCC_ClockConfig+0x176>
 80049b8:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 80049bc:	d005      	beq.n	80049ca <HAL_RCC_ClockConfig+0x176>
 80049be:	4823      	ldr	r0, [pc, #140]	; (8004a4c <HAL_RCC_ClockConfig+0x1f8>)
 80049c0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80049c4:	f7fd f90a 	bl	8001bdc <assert_failed>
 80049c8:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ca:	491f      	ldr	r1, [pc, #124]	; (8004a48 <HAL_RCC_ClockConfig+0x1f4>)
 80049cc:	688b      	ldr	r3, [r1, #8]
 80049ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80049d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80049d6:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049d8:	f7ff ff06 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 80049dc:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <HAL_RCC_ClockConfig+0x1f4>)
 80049de:	4c1c      	ldr	r4, [pc, #112]	; (8004a50 <HAL_RCC_ClockConfig+0x1fc>)
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	491c      	ldr	r1, [pc, #112]	; (8004a54 <HAL_RCC_ClockConfig+0x200>)
 80049e4:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ea:	5ca2      	ldrb	r2, [r4, r2]
 80049ec:	40d0      	lsrs	r0, r2
 80049ee:	6008      	str	r0, [r1, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 80049f6:	4815      	ldr	r0, [pc, #84]	; (8004a4c <HAL_RCC_ClockConfig+0x1f8>)
 80049f8:	f240 215d 	movw	r1, #605	; 0x25d
 80049fc:	f7fd f8ee 	bl	8001bdc <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a00:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <HAL_RCC_ClockConfig+0x1f0>)
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	b2ed      	uxtb	r5, r5
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a06:	701d      	strb	r5, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	e79f      	b.n	800494c <HAL_RCC_ClockConfig+0xf8>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004a0c:	480f      	ldr	r0, [pc, #60]	; (8004a4c <HAL_RCC_ClockConfig+0x1f8>)
 8004a0e:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8004a12:	f7fd f8e3 	bl	8001bdc <assert_failed>
 8004a16:	e729      	b.n	800486c <HAL_RCC_ClockConfig+0x18>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a18:	0190      	lsls	r0, r2, #6
 8004a1a:	f53f af71 	bmi.w	8004900 <HAL_RCC_ClockConfig+0xac>
 8004a1e:	e795      	b.n	800494c <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a20:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <HAL_RCC_ClockConfig+0x1f4>)
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	0396      	lsls	r6, r2, #14
 8004a26:	f53f af6b 	bmi.w	8004900 <HAL_RCC_ClockConfig+0xac>
 8004a2a:	e78f      	b.n	800494c <HAL_RCC_ClockConfig+0xf8>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004a2c:	4807      	ldr	r0, [pc, #28]	; (8004a4c <HAL_RCC_ClockConfig+0x1f8>)
 8004a2e:	f240 2187 	movw	r1, #647	; 0x287
 8004a32:	f7fd f8d3 	bl	8001bdc <assert_failed>
 8004a36:	6863      	ldr	r3, [r4, #4]
 8004a38:	e757      	b.n	80048ea <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e787      	b.n	800494e <HAL_RCC_ClockConfig+0xfa>
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	4770      	bx	lr
 8004a44:	40023c00 	.word	0x40023c00
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	0800aab0 	.word	0x0800aab0
 8004a50:	0800a934 	.word	0x0800a934
 8004a54:	20000000 	.word	0x20000000

08004a58 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x14>)
 8004a5a:	4a05      	ldr	r2, [pc, #20]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004a5e:	4905      	ldr	r1, [pc, #20]	; (8004a74 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a60:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004a64:	6808      	ldr	r0, [r1, #0]
 8004a66:	5cd3      	ldrb	r3, [r2, r3]
}
 8004a68:	40d8      	lsrs	r0, r3
 8004a6a:	4770      	bx	lr
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	0800a944 	.word	0x0800a944
 8004a74:	20000000 	.word	0x20000000

08004a78 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a78:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a7a:	220f      	movs	r2, #15
 8004a7c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	f002 0203 	and.w	r2, r2, #3
 8004a84:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004a8c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004a94:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	08db      	lsrs	r3, r3, #3
{
 8004a9a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a9c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aa0:	4c05      	ldr	r4, [pc, #20]	; (8004ab8 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004aa2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aa4:	6823      	ldr	r3, [r4, #0]
}
 8004aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	600b      	str	r3, [r1, #0]
}
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40023c00 	.word	0x40023c00

08004abc <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	4698      	mov	r8, r3
 8004ac4:	4616      	mov	r6, r2
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004aca:	f7fd fc75 	bl	80023b8 <HAL_GetTick>
 8004ace:	44b0      	add	r8, r6
 8004ad0:	eba8 0500 	sub.w	r5, r8, r0
  tmp_tickstart = HAL_GetTick();
 8004ad4:	f7fd fc70 	bl	80023b8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ad8:	4b27      	ldr	r3, [pc, #156]	; (8004b78 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004ae0:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 8004ae4:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ae6:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ae8:	1c73      	adds	r3, r6, #1
 8004aea:	6839      	ldr	r1, [r7, #0]
 8004aec:	d107      	bne.n	8004afe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 8004aee:	688b      	ldr	r3, [r1, #8]
 8004af0:	ea34 0303 	bics.w	r3, r4, r3
 8004af4:	d0fb      	beq.n	8004aee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
      }
      count--;
    }
  }

  return HAL_OK;
 8004af6:	2000      	movs	r0, #0
}
 8004af8:	b002      	add	sp, #8
 8004afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004afe:	688b      	ldr	r3, [r1, #8]
 8004b00:	ea34 0303 	bics.w	r3, r4, r3
 8004b04:	d1f7      	bne.n	8004af6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b06:	f7fd fc57 	bl	80023b8 <HAL_GetTick>
 8004b0a:	eba0 0308 	sub.w	r3, r0, r8
 8004b0e:	42ab      	cmp	r3, r5
 8004b10:	d208      	bcs.n	8004b24 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if(count == 0U)
 8004b12:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004b14:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004b16:	2a00      	cmp	r2, #0
      count--;
 8004b18:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8004b1c:	bf08      	it	eq
 8004b1e:	2500      	moveq	r5, #0
      count--;
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	e7e1      	b.n	8004ae8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b24:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b28:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b2a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b2e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b32:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b34:	d014      	beq.n	8004b60 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b38:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004b3c:	d007      	beq.n	8004b4e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 8004b3e:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004b40:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8004b42:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004b46:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8004b4a:	2003      	movs	r0, #3
 8004b4c:	e7d4      	b.n	8004af8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
          SPI_RESET_CRC(hspi);
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e7ee      	b.n	8004b3e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004b66:	d002      	beq.n	8004b6e <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb2>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b68:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004b6c:	d1e3      	bne.n	8004b36 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e7de      	b.n	8004b36 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7a>
 8004b78:	20000000 	.word	0x20000000

08004b7c <HAL_SPI_MspInit>:
}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop

08004b80 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f000 80ec 	beq.w	8004d5e <HAL_SPI_Init+0x1de>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004b86:	6803      	ldr	r3, [r0, #0]
 8004b88:	4a7d      	ldr	r2, [pc, #500]	; (8004d80 <HAL_SPI_Init+0x200>)
 8004b8a:	4293      	cmp	r3, r2
{
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004b90:	d014      	beq.n	8004bbc <HAL_SPI_Init+0x3c>
 8004b92:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d010      	beq.n	8004bbc <HAL_SPI_Init+0x3c>
 8004b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00c      	beq.n	8004bbc <HAL_SPI_Init+0x3c>
 8004ba2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d008      	beq.n	8004bbc <HAL_SPI_Init+0x3c>
 8004baa:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_SPI_Init+0x3c>
 8004bb2:	4874      	ldr	r0, [pc, #464]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004bb4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004bb8:	f7fd f810 	bl	8001bdc <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004bbc:	6863      	ldr	r3, [r4, #4]
 8004bbe:	b13b      	cbz	r3, 8004bd0 <HAL_SPI_Init+0x50>
 8004bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc4:	d004      	beq.n	8004bd0 <HAL_SPI_Init+0x50>
 8004bc6:	486f      	ldr	r0, [pc, #444]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004bc8:	f240 1143 	movw	r1, #323	; 0x143
 8004bcc:	f7fd f806 	bl	8001bdc <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004bd0:	68a3      	ldr	r3, [r4, #8]
 8004bd2:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8004bd6:	f040 809a 	bne.w	8004d0e <HAL_SPI_Init+0x18e>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8004be0:	f040 80a3 	bne.w	8004d2a <HAL_SPI_Init+0x1aa>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004be4:	69a3      	ldr	r3, [r4, #24]
 8004be6:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8004bea:	d003      	beq.n	8004bf4 <HAL_SPI_Init+0x74>
 8004bec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bf0:	f040 80aa 	bne.w	8004d48 <HAL_SPI_Init+0x1c8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004bf4:	69e3      	ldr	r3, [r4, #28]
 8004bf6:	f033 0318 	bics.w	r3, r3, #24
 8004bfa:	d006      	beq.n	8004c0a <HAL_SPI_Init+0x8a>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d004      	beq.n	8004c0a <HAL_SPI_Init+0x8a>
 8004c00:	4860      	ldr	r0, [pc, #384]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004c02:	f240 1147 	movw	r1, #327	; 0x147
 8004c06:	f7fc ffe9 	bl	8001bdc <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004c0a:	6a23      	ldr	r3, [r4, #32]
 8004c0c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8004c10:	d004      	beq.n	8004c1c <HAL_SPI_Init+0x9c>
 8004c12:	485c      	ldr	r0, [pc, #368]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004c14:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004c18:	f7fc ffe0 	bl	8001bdc <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d15c      	bne.n	8004cdc <HAL_SPI_Init+0x15c>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004c22:	6923      	ldr	r3, [r4, #16]
 8004c24:	f033 0302 	bics.w	r3, r3, #2
 8004c28:	d004      	beq.n	8004c34 <HAL_SPI_Init+0xb4>
 8004c2a:	4856      	ldr	r0, [pc, #344]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004c2c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004c30:	f7fc ffd4 	bl	8001bdc <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004c34:	6963      	ldr	r3, [r4, #20]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d904      	bls.n	8004c44 <HAL_SPI_Init+0xc4>
 8004c3a:	4852      	ldr	r0, [pc, #328]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004c3c:	f240 114d 	movw	r1, #333	; 0x14d
 8004c40:	f7fc ffcc 	bl	8001bdc <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c44:	6863      	ldr	r3, [r4, #4]
 8004c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4a:	f000 808a 	beq.w	8004d62 <HAL_SPI_Init+0x1e2>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c52:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c56:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c58:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c5c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	d069      	beq.n	8004d36 <HAL_SPI_Init+0x1b6>
 8004c62:	4619      	mov	r1, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c64:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8004c68:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8004c6c:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8004c70:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004c74:	432b      	orrs	r3, r5
 8004c76:	f400 6500 	and.w	r5, r0, #2048	; 0x800
 8004c7a:	6960      	ldr	r0, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 8004c7c:	6826      	ldr	r6, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c7e:	432b      	orrs	r3, r5
 8004c80:	f002 0502 	and.w	r5, r2, #2
 8004c84:	69a2      	ldr	r2, [r4, #24]
 8004c86:	432b      	orrs	r3, r5
 8004c88:	f000 0001 	and.w	r0, r0, #1
 8004c8c:	69e5      	ldr	r5, [r4, #28]
 8004c8e:	4303      	orrs	r3, r0
 8004c90:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8004c94:	4303      	orrs	r3, r0
 8004c96:	f005 0538 	and.w	r5, r5, #56	; 0x38
 8004c9a:	6a20      	ldr	r0, [r4, #32]
 8004c9c:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8004c9e:	2502      	movs	r5, #2
 8004ca0:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca4:	f000 0080 	and.w	r0, r0, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ca8:	6a65      	ldr	r5, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004caa:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cac:	0c12      	lsrs	r2, r2, #16
  __HAL_SPI_DISABLE(hspi);
 8004cae:	6830      	ldr	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cb0:	f005 0510 	and.w	r5, r5, #16
 8004cb4:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb8:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cba:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8004cbc:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8004cc0:	6030      	str	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc2:	6033      	str	r3, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cc4:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cc6:	69f3      	ldr	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cc8:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004cce:	2101      	movs	r1, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cd0:	61f3      	str	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cd2:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cd4:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  return HAL_OK;
 8004cd8:	4610      	mov	r0, r2
}
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d007      	beq.n	8004cf0 <HAL_SPI_Init+0x170>
 8004ce0:	4828      	ldr	r0, [pc, #160]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004ce2:	f240 1149 	movw	r1, #329	; 0x149
 8004ce6:	f7fc ff79 	bl	8001bdc <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d098      	beq.n	8004c22 <HAL_SPI_Init+0xa2>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004cf0:	69e3      	ldr	r3, [r4, #28]
 8004cf2:	f033 0318 	bics.w	r3, r3, #24
 8004cf6:	d006      	beq.n	8004d06 <HAL_SPI_Init+0x186>
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d004      	beq.n	8004d06 <HAL_SPI_Init+0x186>
 8004cfc:	4821      	ldr	r0, [pc, #132]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004cfe:	f240 115b 	movw	r1, #347	; 0x15b
 8004d02:	f7fc ff6b 	bl	8001bdc <assert_failed>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d06:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d08:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8004d0c:	e7a1      	b.n	8004c52 <HAL_SPI_Init+0xd2>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d12:	f43f af62 	beq.w	8004bda <HAL_SPI_Init+0x5a>
 8004d16:	481b      	ldr	r0, [pc, #108]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004d18:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004d1c:	f7fc ff5e 	bl	8001bdc <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004d20:	68e3      	ldr	r3, [r4, #12]
 8004d22:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8004d26:	f43f af5d 	beq.w	8004be4 <HAL_SPI_Init+0x64>
 8004d2a:	4816      	ldr	r0, [pc, #88]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004d2c:	f240 1145 	movw	r1, #325	; 0x145
 8004d30:	f7fc ff54 	bl	8001bdc <assert_failed>
 8004d34:	e756      	b.n	8004be4 <HAL_SPI_Init+0x64>
    hspi->Lock = HAL_UNLOCKED;
 8004d36:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f7ff ff1e 	bl	8004b7c <HAL_SPI_MspInit>
 8004d40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d42:	f403 5100 	and.w	r1, r3, #8192	; 0x2000
 8004d46:	e78d      	b.n	8004c64 <HAL_SPI_Init+0xe4>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004d48:	480e      	ldr	r0, [pc, #56]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004d4a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004d4e:	f7fc ff45 	bl	8001bdc <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004d52:	69e3      	ldr	r3, [r4, #28]
 8004d54:	f033 0318 	bics.w	r3, r3, #24
 8004d58:	f43f af57 	beq.w	8004c0a <HAL_SPI_Init+0x8a>
 8004d5c:	e74e      	b.n	8004bfc <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8004d5e:	2001      	movs	r0, #1
}
 8004d60:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004d62:	69e3      	ldr	r3, [r4, #28]
 8004d64:	f033 0318 	bics.w	r3, r3, #24
 8004d68:	f43f af73 	beq.w	8004c52 <HAL_SPI_Init+0xd2>
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	f43f af70 	beq.w	8004c52 <HAL_SPI_Init+0xd2>
 8004d72:	4804      	ldr	r0, [pc, #16]	; (8004d84 <HAL_SPI_Init+0x204>)
 8004d74:	f240 1151 	movw	r1, #337	; 0x151
 8004d78:	f7fc ff30 	bl	8001bdc <assert_failed>
 8004d7c:	e769      	b.n	8004c52 <HAL_SPI_Init+0xd2>
 8004d7e:	bf00      	nop
 8004d80:	40013000 	.word	0x40013000
 8004d84:	0800aae8 	.word	0x0800aae8

08004d88 <HAL_SPI_TransmitReceive>:
{
 8004d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d8c:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004d8e:	6880      	ldr	r0, [r0, #8]
{
 8004d90:	b083      	sub	sp, #12
 8004d92:	4688      	mov	r8, r1
 8004d94:	4691      	mov	r9, r2
 8004d96:	461f      	mov	r7, r3
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	f040 80a8 	bne.w	8004eee <HAL_SPI_TransmitReceive+0x166>
  __HAL_LOCK(hspi);
 8004d9e:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8004da2:	2801      	cmp	r0, #1
 8004da4:	f000 80ad 	beq.w	8004f02 <HAL_SPI_TransmitReceive+0x17a>
 8004da8:	2301      	movs	r3, #1
 8004daa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004dae:	f7fd fb03 	bl	80023b8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004db2:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8004db6:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004db8:	2e01      	cmp	r6, #1
  tickstart = HAL_GetTick();
 8004dba:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8004dbc:	b2f2      	uxtb	r2, r6
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dbe:	d011      	beq.n	8004de4 <HAL_SPI_TransmitReceive+0x5c>
 8004dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc4:	d009      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 8004dc6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004dc8:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004dca:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004dcc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dd0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004dd4:	b003      	add	sp, #12
 8004dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dda:	68a1      	ldr	r1, [r4, #8]
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	d1f2      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x3e>
 8004de0:	2a04      	cmp	r2, #4
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x3e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004de4:	f1b8 0f00 	cmp.w	r8, #0
 8004de8:	f000 808f 	beq.w	8004f0a <HAL_SPI_TransmitReceive+0x182>
 8004dec:	f1b9 0f00 	cmp.w	r9, #0
 8004df0:	f000 808b 	beq.w	8004f0a <HAL_SPI_TransmitReceive+0x182>
 8004df4:	2f00      	cmp	r7, #0
 8004df6:	f000 8088 	beq.w	8004f0a <HAL_SPI_TransmitReceive+0x182>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dfa:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dfe:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e00:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e04:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e06:	bf1c      	itt	ne
 8004e08:	2205      	movne	r2, #5
 8004e0a:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e0e:	2200      	movs	r2, #0
 8004e10:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8004e12:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004e14:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e16:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 8004e18:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 8004e1a:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e1e:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e20:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e24:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e26:	d403      	bmi.n	8004e30 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8004e28:	6802      	ldr	r2, [r0, #0]
 8004e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e2e:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e30:	68e2      	ldr	r2, [r4, #12]
 8004e32:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004e36:	f000 80b6 	beq.w	8004fa6 <HAL_SPI_TransmitReceive+0x21e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80a8 	beq.w	8004f90 <HAL_SPI_TransmitReceive+0x208>
 8004e40:	2f01      	cmp	r7, #1
 8004e42:	f000 80a5 	beq.w	8004f90 <HAL_SPI_TransmitReceive+0x208>
 8004e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e48:	3301      	adds	r3, #1
        txallowed = 1U;
 8004e4a:	f04f 0601 	mov.w	r6, #1
 8004e4e:	d028      	beq.n	8004ea2 <HAL_SPI_TransmitReceive+0x11a>
 8004e50:	e05d      	b.n	8004f0e <HAL_SPI_TransmitReceive+0x186>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e52:	6822      	ldr	r2, [r4, #0]
 8004e54:	6893      	ldr	r3, [r2, #8]
 8004e56:	0798      	lsls	r0, r3, #30
 8004e58:	d50f      	bpl.n	8004e7a <HAL_SPI_TransmitReceive+0xf2>
 8004e5a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	b163      	cbz	r3, 8004e7a <HAL_SPI_TransmitReceive+0xf2>
 8004e60:	b15e      	cbz	r6, 8004e7a <HAL_SPI_TransmitReceive+0xf2>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8004e68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004e6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004e6c:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004e72:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8004e74:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004e76:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8004e78:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e7a:	6893      	ldr	r3, [r2, #8]
 8004e7c:	f013 0301 	ands.w	r3, r3, #1
 8004e80:	d00d      	beq.n	8004e9e <HAL_SPI_TransmitReceive+0x116>
 8004e82:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004e84:	b289      	uxth	r1, r1
 8004e86:	b151      	cbz	r1, 8004e9e <HAL_SPI_TransmitReceive+0x116>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e88:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e8a:	68d2      	ldr	r2, [r2, #12]
 8004e8c:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 8004e8e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004e90:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004e92:	3a01      	subs	r2, #1
 8004e94:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 8004e96:	3101      	adds	r1, #1
        txallowed = 1U;
 8004e98:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8004e9a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004e9c:	63a1      	str	r1, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e9e:	f7fd fa8b 	bl	80023b8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1d3      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0xca>
 8004eaa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1cf      	bne.n	8004e52 <HAL_SPI_TransmitReceive+0xca>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004eb2:	4b7e      	ldr	r3, [pc, #504]	; (80050ac <HAL_SPI_TransmitReceive+0x324>)
 8004eb4:	4a7e      	ldr	r2, [pc, #504]	; (80050b0 <HAL_SPI_TransmitReceive+0x328>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb8:	6861      	ldr	r1, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0d5b      	lsrs	r3, r3, #21
 8004ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ec8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ecc:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ece:	d150      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x1ea>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ed2:	462b      	mov	r3, r5
 8004ed4:	2180      	movs	r1, #128	; 0x80
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f7ff fdf0 	bl	8004abc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d04b      	beq.n	8004f78 <HAL_SPI_TransmitReceive+0x1f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ee2:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004ee8:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eea:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8004eec:	e76c      	b.n	8004dc8 <HAL_SPI_TransmitReceive+0x40>
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004eee:	4871      	ldr	r0, [pc, #452]	; (80050b4 <HAL_SPI_TransmitReceive+0x32c>)
 8004ef0:	f240 417e 	movw	r1, #1150	; 0x47e
 8004ef4:	f7fc fe72 	bl	8001bdc <assert_failed>
  __HAL_LOCK(hspi);
 8004ef8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8004efc:	2801      	cmp	r0, #1
 8004efe:	f47f af53 	bne.w	8004da8 <HAL_SPI_TransmitReceive+0x20>
 8004f02:	2002      	movs	r0, #2
}
 8004f04:	b003      	add	sp, #12
 8004f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	e75c      	b.n	8004dc8 <HAL_SPI_TransmitReceive+0x40>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f0e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	b91b      	cbnz	r3, 8004f1c <HAL_SPI_TransmitReceive+0x194>
 8004f14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0ca      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x12a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f1c:	6822      	ldr	r2, [r4, #0]
 8004f1e:	6893      	ldr	r3, [r2, #8]
 8004f20:	0799      	lsls	r1, r3, #30
 8004f22:	d50f      	bpl.n	8004f44 <HAL_SPI_TransmitReceive+0x1bc>
 8004f24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	b163      	cbz	r3, 8004f44 <HAL_SPI_TransmitReceive+0x1bc>
 8004f2a:	b15e      	cbz	r6, 8004f44 <HAL_SPI_TransmitReceive+0x1bc>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8004f32:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004f34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f36:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004f3c:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8004f3e:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004f40:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 8004f42:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f44:	6893      	ldr	r3, [r2, #8]
 8004f46:	f013 0301 	ands.w	r3, r3, #1
 8004f4a:	d003      	beq.n	8004f54 <HAL_SPI_TransmitReceive+0x1cc>
 8004f4c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004f4e:	b289      	uxth	r1, r1
 8004f50:	2900      	cmp	r1, #0
 8004f52:	d167      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x29c>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f54:	f7fd fa30 	bl	80023b8 <HAL_GetTick>
 8004f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f5a:	1b40      	subs	r0, r0, r5
 8004f5c:	4298      	cmp	r0, r3
 8004f5e:	d3d6      	bcc.n	8004f0e <HAL_SPI_TransmitReceive+0x186>
        errorcode = HAL_TIMEOUT;
 8004f60:	2003      	movs	r0, #3
 8004f62:	e731      	b.n	8004dc8 <HAL_SPI_TransmitReceive+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8004f64:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f66:	6822      	ldr	r2, [r4, #0]
      count--;
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f6c:	6893      	ldr	r3, [r2, #8]
 8004f6e:	061b      	lsls	r3, r3, #24
 8004f70:	d502      	bpl.n	8004f78 <HAL_SPI_TransmitReceive+0x1f0>
      if (count == 0U)
 8004f72:	9b01      	ldr	r3, [sp, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f5      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x1dc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f78:	68a0      	ldr	r0, [r4, #8]
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	f040 8093 	bne.w	80050a6 <HAL_SPI_TransmitReceive+0x31e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	9000      	str	r0, [sp, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	9200      	str	r2, [sp, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	9b00      	ldr	r3, [sp, #0]
 8004f8e:	e71b      	b.n	8004dc8 <HAL_SPI_TransmitReceive+0x40>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f90:	f898 3000 	ldrb.w	r3, [r8]
 8004f94:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8004f96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f98:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f9e:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004fa0:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fa2:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004fa4:	e74f      	b.n	8004e46 <HAL_SPI_TransmitReceive+0xbe>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d148      	bne.n	800503c <HAL_SPI_TransmitReceive+0x2b4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004faa:	4641      	mov	r1, r8
 8004fac:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004fb0:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8004fb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb4:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fbe:	3301      	adds	r3, #1
{
 8004fc0:	f04f 0601 	mov.w	r6, #1
 8004fc4:	d025      	beq.n	8005012 <HAL_SPI_TransmitReceive+0x28a>
 8004fc6:	e03c      	b.n	8005042 <HAL_SPI_TransmitReceive+0x2ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fc8:	6822      	ldr	r2, [r4, #0]
 8004fca:	6893      	ldr	r3, [r2, #8]
 8004fcc:	079b      	lsls	r3, r3, #30
 8004fce:	d50d      	bpl.n	8004fec <HAL_SPI_TransmitReceive+0x264>
 8004fd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	b153      	cbz	r3, 8004fec <HAL_SPI_TransmitReceive+0x264>
 8004fd6:	b14e      	cbz	r6, 8004fec <HAL_SPI_TransmitReceive+0x264>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004fda:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004fde:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8004fe0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe2:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004fea:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fec:	6893      	ldr	r3, [r2, #8]
 8004fee:	f013 0301 	ands.w	r3, r3, #1
 8004ff2:	d00c      	beq.n	800500e <HAL_SPI_TransmitReceive+0x286>
 8004ff4:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004ff6:	b289      	uxth	r1, r1
 8004ff8:	b149      	cbz	r1, 800500e <HAL_SPI_TransmitReceive+0x286>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ffa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ffc:	68d2      	ldr	r2, [r2, #12]
 8004ffe:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8005002:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005004:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005006:	3a01      	subs	r2, #1
 8005008:	b292      	uxth	r2, r2
        txallowed = 1U;
 800500a:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 800500c:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800500e:	f7fd f9d3 	bl	80023b8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005012:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1d6      	bne.n	8004fc8 <HAL_SPI_TransmitReceive+0x240>
 800501a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1d2      	bne.n	8004fc8 <HAL_SPI_TransmitReceive+0x240>
 8005022:	e746      	b.n	8004eb2 <HAL_SPI_TransmitReceive+0x12a>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005024:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005026:	68d2      	ldr	r2, [r2, #12]
 8005028:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 800502a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800502c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800502e:	3a01      	subs	r2, #1
 8005030:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 8005032:	3101      	adds	r1, #1
        txallowed = 1U;
 8005034:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8005036:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8005038:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 1U;
 800503a:	e78b      	b.n	8004f54 <HAL_SPI_TransmitReceive+0x1cc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800503c:	2f01      	cmp	r7, #1
 800503e:	d1bd      	bne.n	8004fbc <HAL_SPI_TransmitReceive+0x234>
 8005040:	e7b3      	b.n	8004faa <HAL_SPI_TransmitReceive+0x222>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005042:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005044:	b29b      	uxth	r3, r3
 8005046:	b923      	cbnz	r3, 8005052 <HAL_SPI_TransmitReceive+0x2ca>
 8005048:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	f43f af30 	beq.w	8004eb2 <HAL_SPI_TransmitReceive+0x12a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	6893      	ldr	r3, [r2, #8]
 8005056:	079f      	lsls	r7, r3, #30
 8005058:	d50d      	bpl.n	8005076 <HAL_SPI_TransmitReceive+0x2ee>
 800505a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800505c:	b29b      	uxth	r3, r3
 800505e:	b153      	cbz	r3, 8005076 <HAL_SPI_TransmitReceive+0x2ee>
 8005060:	b14e      	cbz	r6, 8005076 <HAL_SPI_TransmitReceive+0x2ee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005062:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005064:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005068:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800506a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800506c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800506e:	3b01      	subs	r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005074:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005076:	6893      	ldr	r3, [r2, #8]
 8005078:	f013 0301 	ands.w	r3, r3, #1
 800507c:	d00c      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x310>
 800507e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8005080:	b289      	uxth	r1, r1
 8005082:	b149      	cbz	r1, 8005098 <HAL_SPI_TransmitReceive+0x310>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005084:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005086:	68d2      	ldr	r2, [r2, #12]
 8005088:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800508c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800508e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005090:	3a01      	subs	r2, #1
 8005092:	b292      	uxth	r2, r2
        txallowed = 1U;
 8005094:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8005096:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005098:	f7fd f98e 	bl	80023b8 <HAL_GetTick>
 800509c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800509e:	1b40      	subs	r0, r0, r5
 80050a0:	4298      	cmp	r0, r3
 80050a2:	d3ce      	bcc.n	8005042 <HAL_SPI_TransmitReceive+0x2ba>
 80050a4:	e75c      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x1d8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050a6:	2000      	movs	r0, #0
 80050a8:	e68e      	b.n	8004dc8 <HAL_SPI_TransmitReceive+0x40>
 80050aa:	bf00      	nop
 80050ac:	20000000 	.word	0x20000000
 80050b0:	165e9f81 	.word	0x165e9f81
 80050b4:	0800aae8 	.word	0x0800aae8

080050b8 <HAL_SPI_GetState>:
  return hspi->State;
 80050b8:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop

080050c0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c0:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050c2:	688a      	ldr	r2, [r1, #8]
{
 80050c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c8:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	6223      	str	r3, [r4, #32]
  tmpccer = TIMx->CCER;
 80050d0:	6a25      	ldr	r5, [r4, #32]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050d2:	4822      	ldr	r0, [pc, #136]	; (800515c <TIM_OC1_SetConfig+0x9c>)
  tmpcr2 =  TIMx->CR2;
 80050d4:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 80050d8:	69a6      	ldr	r6, [r4, #24]
  tmpccmrx |= OC_Config->OCMode;
 80050da:	680b      	ldr	r3, [r1, #0]
  tmpccer &= ~TIM_CCER_CC1P;
 80050dc:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e0:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050e4:	4284      	cmp	r4, r0
{
 80050e6:	460f      	mov	r7, r1
  tmpccer |= OC_Config->OCPolarity;
 80050e8:	ea45 0502 	orr.w	r5, r5, r2
  tmpccmrx |= OC_Config->OCMode;
 80050ec:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f0:	d007      	beq.n	8005102 <TIM_OC1_SetConfig+0x42>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050f2:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 80050f4:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 80050f8:	61a6      	str	r6, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80050fa:	6363      	str	r3, [r4, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fc:	6225      	str	r5, [r4, #32]
}
 80050fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005102:	68ca      	ldr	r2, [r1, #12]
 8005104:	f032 0308 	bics.w	r3, r2, #8
 8005108:	d114      	bne.n	8005134 <TIM_OC1_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800510a:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 800510c:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005110:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005112:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 8005116:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800511a:	d119      	bne.n	8005150 <TIM_OC1_SetConfig+0x90>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8005122:	d10e      	bne.n	8005142 <TIM_OC1_SetConfig+0x82>
    tmpcr2 |= OC_Config->OCNIdleState;
 8005124:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005126:	f428 7840 	bic.w	r8, r8, #768	; 0x300
 800512a:	ea48 0802 	orr.w	r8, r8, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 800512e:	ea48 0803 	orr.w	r8, r8, r3
 8005132:	e7de      	b.n	80050f2 <TIM_OC1_SetConfig+0x32>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005134:	480a      	ldr	r0, [pc, #40]	; (8005160 <TIM_OC1_SetConfig+0xa0>)
 8005136:	f641 2108 	movw	r1, #6664	; 0x1a08
 800513a:	f7fc fd4f 	bl	8001bdc <assert_failed>
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	e7e3      	b.n	800510a <TIM_OC1_SetConfig+0x4a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005142:	4807      	ldr	r0, [pc, #28]	; (8005160 <TIM_OC1_SetConfig+0xa0>)
 8005144:	f641 2116 	movw	r1, #6678	; 0x1a16
 8005148:	f7fc fd48 	bl	8001bdc <assert_failed>
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	e7e9      	b.n	8005124 <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005150:	4803      	ldr	r0, [pc, #12]	; (8005160 <TIM_OC1_SetConfig+0xa0>)
 8005152:	f641 2115 	movw	r1, #6677	; 0x1a15
 8005156:	f7fc fd41 	bl	8001bdc <assert_failed>
 800515a:	e7df      	b.n	800511c <TIM_OC1_SetConfig+0x5c>
 800515c:	40010000 	.word	0x40010000
 8005160:	0800ab20 	.word	0x0800ab20

08005164 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005164:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005166:	688a      	ldr	r2, [r1, #8]
{
 8005168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800516c:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800516e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005172:	6223      	str	r3, [r4, #32]
  tmpccer = TIMx->CCER;
 8005174:	6a25      	ldr	r5, [r4, #32]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005176:	4823      	ldr	r0, [pc, #140]	; (8005204 <TIM_OC3_SetConfig+0xa0>)
  tmpcr2 =  TIMx->CR2;
 8005178:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800517c:	69e6      	ldr	r6, [r4, #28]
  tmpccmrx |= OC_Config->OCMode;
 800517e:	680b      	ldr	r3, [r1, #0]
  tmpccer &= ~TIM_CCER_CC3P;
 8005180:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005184:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005188:	4284      	cmp	r4, r0
{
 800518a:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800518c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005190:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005194:	d007      	beq.n	80051a6 <TIM_OC3_SetConfig+0x42>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005196:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8005198:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800519c:	61e6      	str	r6, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800519e:	63e3      	str	r3, [r4, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a0:	6225      	str	r5, [r4, #32]
}
 80051a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80051a6:	68ca      	ldr	r2, [r1, #12]
 80051a8:	f032 0308 	bics.w	r3, r2, #8
 80051ac:	d115      	bne.n	80051da <TIM_OC3_SetConfig+0x76>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80051ae:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80051b0:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b4:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80051b8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 80051bc:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80051c0:	d119      	bne.n	80051f6 <TIM_OC3_SetConfig+0x92>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80051c8:	d10e      	bne.n	80051e8 <TIM_OC3_SetConfig+0x84>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ca:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051cc:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
 80051d0:	ea48 1802 	orr.w	r8, r8, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051d4:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
 80051d8:	e7dd      	b.n	8005196 <TIM_OC3_SetConfig+0x32>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80051da:	480b      	ldr	r0, [pc, #44]	; (8005208 <TIM_OC3_SetConfig+0xa4>)
 80051dc:	f641 219e 	movw	r1, #6814	; 0x1a9e
 80051e0:	f7fc fcfc 	bl	8001bdc <assert_failed>
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	e7e2      	b.n	80051ae <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80051e8:	4807      	ldr	r0, [pc, #28]	; (8005208 <TIM_OC3_SetConfig+0xa4>)
 80051ea:	f641 21ac 	movw	r1, #6828	; 0x1aac
 80051ee:	f7fc fcf5 	bl	8001bdc <assert_failed>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	e7e9      	b.n	80051ca <TIM_OC3_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80051f6:	4804      	ldr	r0, [pc, #16]	; (8005208 <TIM_OC3_SetConfig+0xa4>)
 80051f8:	f641 21ab 	movw	r1, #6827	; 0x1aab
 80051fc:	f7fc fcee 	bl	8001bdc <assert_failed>
 8005200:	e7df      	b.n	80051c2 <TIM_OC3_SetConfig+0x5e>
 8005202:	bf00      	nop
 8005204:	40010000 	.word	0x40010000
 8005208:	0800ab20 	.word	0x0800ab20

0800520c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800520c:	2800      	cmp	r0, #0
 800520e:	f000 80cd 	beq.w	80053ac <HAL_TIM_Base_Init+0x1a0>
{
 8005212:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005214:	4a66      	ldr	r2, [pc, #408]	; (80053b0 <HAL_TIM_Base_Init+0x1a4>)
 8005216:	6803      	ldr	r3, [r0, #0]
 8005218:	4293      	cmp	r3, r2
 800521a:	4604      	mov	r4, r0
 800521c:	d01f      	beq.n	800525e <HAL_TIM_Base_Init+0x52>
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d01c      	beq.n	800525e <HAL_TIM_Base_Init+0x52>
 8005224:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005228:	4293      	cmp	r3, r2
 800522a:	d018      	beq.n	800525e <HAL_TIM_Base_Init+0x52>
 800522c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005230:	4293      	cmp	r3, r2
 8005232:	d014      	beq.n	800525e <HAL_TIM_Base_Init+0x52>
 8005234:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005238:	4293      	cmp	r3, r2
 800523a:	d010      	beq.n	800525e <HAL_TIM_Base_Init+0x52>
 800523c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005240:	4293      	cmp	r3, r2
 8005242:	d00c      	beq.n	800525e <HAL_TIM_Base_Init+0x52>
 8005244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005248:	4293      	cmp	r3, r2
 800524a:	d008      	beq.n	800525e <HAL_TIM_Base_Init+0x52>
 800524c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_Base_Init+0x52>
 8005254:	4857      	ldr	r0, [pc, #348]	; (80053b4 <HAL_TIM_Base_Init+0x1a8>)
 8005256:	f240 1113 	movw	r1, #275	; 0x113
 800525a:	f7fc fcbf 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800525e:	68a3      	ldr	r3, [r4, #8]
 8005260:	f033 0210 	bics.w	r2, r3, #16
 8005264:	d00a      	beq.n	800527c <HAL_TIM_Base_Init+0x70>
 8005266:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800526a:	2a20      	cmp	r2, #32
 800526c:	d006      	beq.n	800527c <HAL_TIM_Base_Init+0x70>
 800526e:	2b40      	cmp	r3, #64	; 0x40
 8005270:	d004      	beq.n	800527c <HAL_TIM_Base_Init+0x70>
 8005272:	4850      	ldr	r0, [pc, #320]	; (80053b4 <HAL_TIM_Base_Init+0x1a8>)
 8005274:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005278:	f7fc fcb0 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8005282:	d003      	beq.n	800528c <HAL_TIM_Base_Init+0x80>
 8005284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005288:	f040 8085 	bne.w	8005396 <HAL_TIM_Base_Init+0x18a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800528c:	69a3      	ldr	r3, [r4, #24]
 800528e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8005292:	d132      	bne.n	80052fa <HAL_TIM_Base_Init+0xee>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005294:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005298:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800529c:	2b00      	cmp	r3, #0
 800529e:	d037      	beq.n	8005310 <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a0:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a2:	4943      	ldr	r1, [pc, #268]	; (80053b0 <HAL_TIM_Base_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	2302      	movs	r3, #2
 80052a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052aa:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80052ac:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052ae:	d05e      	beq.n	800536e <HAL_TIM_Base_Init+0x162>
 80052b0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80052b4:	d032      	beq.n	800531c <HAL_TIM_Base_Init+0x110>
 80052b6:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80052ba:	428a      	cmp	r2, r1
 80052bc:	d02e      	beq.n	800531c <HAL_TIM_Base_Init+0x110>
 80052be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052c2:	428a      	cmp	r2, r1
 80052c4:	d02a      	beq.n	800531c <HAL_TIM_Base_Init+0x110>
 80052c6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052ca:	428a      	cmp	r2, r1
 80052cc:	d026      	beq.n	800531c <HAL_TIM_Base_Init+0x110>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ce:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80052d2:	428a      	cmp	r2, r1
 80052d4:	d026      	beq.n	8005324 <HAL_TIM_Base_Init+0x118>
 80052d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052da:	428a      	cmp	r2, r1
 80052dc:	d022      	beq.n	8005324 <HAL_TIM_Base_Init+0x118>
 80052de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052e2:	428a      	cmp	r2, r1
 80052e4:	d01e      	beq.n	8005324 <HAL_TIM_Base_Init+0x118>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e6:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e8:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 80052ea:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80052f2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f4:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80052f6:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f8:	e021      	b.n	800533e <HAL_TIM_Base_Init+0x132>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80052fa:	482e      	ldr	r0, [pc, #184]	; (80053b4 <HAL_TIM_Base_Init+0x1a8>)
 80052fc:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005300:	f7fc fc6c 	bl	8001bdc <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005304:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005308:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1c7      	bne.n	80052a0 <HAL_TIM_Base_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 8005310:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005314:	4620      	mov	r0, r4
 8005316:	f7fc fe41 	bl	8001f9c <HAL_TIM_Base_MspInit>
 800531a:	e7c1      	b.n	80052a0 <HAL_TIM_Base_Init+0x94>
    tmpcr1 |= Structure->CounterMode;
 800531c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005322:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005324:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005326:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005328:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800532a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005334:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005336:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005338:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800533a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800533c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800533e:	2301      	movs	r3, #1
 8005340:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005342:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005346:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800534a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800534e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005352:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005356:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800535a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800535e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005366:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800536a:	2000      	movs	r0, #0
}
 800536c:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800536e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005370:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005372:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005378:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800537a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800537e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005384:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005386:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005388:	68e3      	ldr	r3, [r4, #12]
 800538a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005390:	6963      	ldr	r3, [r4, #20]
 8005392:	6313      	str	r3, [r2, #48]	; 0x30
 8005394:	e7d3      	b.n	800533e <HAL_TIM_Base_Init+0x132>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005396:	4807      	ldr	r0, [pc, #28]	; (80053b4 <HAL_TIM_Base_Init+0x1a8>)
 8005398:	f240 1115 	movw	r1, #277	; 0x115
 800539c:	f7fc fc1e 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80053a0:	69a3      	ldr	r3, [r4, #24]
 80053a2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80053a6:	f43f af75 	beq.w	8005294 <HAL_TIM_Base_Init+0x88>
 80053aa:	e7a6      	b.n	80052fa <HAL_TIM_Base_Init+0xee>
    return HAL_ERROR;
 80053ac:	2001      	movs	r0, #1
}
 80053ae:	4770      	bx	lr
 80053b0:	40010000 	.word	0x40010000
 80053b4:	0800ab20 	.word	0x0800ab20

080053b8 <HAL_TIM_Base_Start_IT>:
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80053b8:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <HAL_TIM_Base_Start_IT+0xac>)
 80053ba:	6803      	ldr	r3, [r0, #0]
 80053bc:	4293      	cmp	r3, r2
{
 80053be:	b510      	push	{r4, lr}
 80053c0:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80053c2:	d01f      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x4c>
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c8:	d01c      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x4c>
 80053ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d018      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x4c>
 80053d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d014      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x4c>
 80053da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053de:	4293      	cmp	r3, r2
 80053e0:	d010      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x4c>
 80053e2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00c      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x4c>
 80053ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d008      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x4c>
 80053f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x4c>
 80053fa:	481b      	ldr	r0, [pc, #108]	; (8005468 <HAL_TIM_Base_Start_IT+0xb0>)
 80053fc:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005400:	f7fc fbec 	bl	8001bdc <assert_failed>
  if (htim->State != HAL_TIM_STATE_READY)
 8005404:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005408:	2b01      	cmp	r3, #1
 800540a:	d127      	bne.n	800545c <HAL_TIM_Base_Start_IT+0xa4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800540c:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540e:	4915      	ldr	r1, [pc, #84]	; (8005464 <HAL_TIM_Base_Start_IT+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	2202      	movs	r2, #2
 8005412:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005416:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005418:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005420:	d011      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x8e>
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005426:	d00e      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x8e>
 8005428:	4a10      	ldr	r2, [pc, #64]	; (800546c <HAL_TIM_Base_Start_IT+0xb4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00b      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x8e>
 800542e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005432:	4293      	cmp	r3, r2
 8005434:	d007      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x8e>
 8005436:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800543a:	4293      	cmp	r3, r2
 800543c:	d003      	beq.n	8005446 <HAL_TIM_Base_Start_IT+0x8e>
 800543e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005442:	4293      	cmp	r3, r2
 8005444:	d104      	bne.n	8005450 <HAL_TIM_Base_Start_IT+0x98>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544c:	2a06      	cmp	r2, #6
 800544e:	d007      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0xa8>
    __HAL_TIM_ENABLE(htim);
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005458:	2000      	movs	r0, #0
}
 800545a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800545c:	2001      	movs	r0, #1
}
 800545e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005460:	2000      	movs	r0, #0
}
 8005462:	bd10      	pop	{r4, pc}
 8005464:	40010000 	.word	0x40010000
 8005468:	0800ab20 	.word	0x0800ab20
 800546c:	40000400 	.word	0x40000400

08005470 <HAL_TIM_PWM_MspInit>:
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop

08005474 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005474:	2800      	cmp	r0, #0
 8005476:	f000 80cd 	beq.w	8005614 <HAL_TIM_PWM_Init+0x1a0>
{
 800547a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800547c:	4a66      	ldr	r2, [pc, #408]	; (8005618 <HAL_TIM_PWM_Init+0x1a4>)
 800547e:	6803      	ldr	r3, [r0, #0]
 8005480:	4293      	cmp	r3, r2
 8005482:	4604      	mov	r4, r0
 8005484:	d01f      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x52>
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d01c      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x52>
 800548c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x52>
 8005494:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005498:	4293      	cmp	r3, r2
 800549a:	d014      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x52>
 800549c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d010      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x52>
 80054a4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00c      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x52>
 80054ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d008      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x52>
 80054b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIM_PWM_Init+0x52>
 80054bc:	4857      	ldr	r0, [pc, #348]	; (800561c <HAL_TIM_PWM_Init+0x1a8>)
 80054be:	f240 510e 	movw	r1, #1294	; 0x50e
 80054c2:	f7fc fb8b 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80054c6:	68a3      	ldr	r3, [r4, #8]
 80054c8:	f033 0210 	bics.w	r2, r3, #16
 80054cc:	d00a      	beq.n	80054e4 <HAL_TIM_PWM_Init+0x70>
 80054ce:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80054d2:	2a20      	cmp	r2, #32
 80054d4:	d006      	beq.n	80054e4 <HAL_TIM_PWM_Init+0x70>
 80054d6:	2b40      	cmp	r3, #64	; 0x40
 80054d8:	d004      	beq.n	80054e4 <HAL_TIM_PWM_Init+0x70>
 80054da:	4850      	ldr	r0, [pc, #320]	; (800561c <HAL_TIM_PWM_Init+0x1a8>)
 80054dc:	f240 510f 	movw	r1, #1295	; 0x50f
 80054e0:	f7fc fb7c 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80054ea:	d003      	beq.n	80054f4 <HAL_TIM_PWM_Init+0x80>
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f0:	f040 8085 	bne.w	80055fe <HAL_TIM_PWM_Init+0x18a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80054f4:	69a3      	ldr	r3, [r4, #24]
 80054f6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80054fa:	d132      	bne.n	8005562 <HAL_TIM_PWM_Init+0xee>
  if (htim->State == HAL_TIM_STATE_RESET)
 80054fc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005500:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005504:	2b00      	cmp	r3, #0
 8005506:	d037      	beq.n	8005578 <HAL_TIM_PWM_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800550a:	4943      	ldr	r1, [pc, #268]	; (8005618 <HAL_TIM_PWM_Init+0x1a4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800550c:	2302      	movs	r3, #2
 800550e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005512:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005514:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005516:	d05e      	beq.n	80055d6 <HAL_TIM_PWM_Init+0x162>
 8005518:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800551c:	d032      	beq.n	8005584 <HAL_TIM_PWM_Init+0x110>
 800551e:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005522:	428a      	cmp	r2, r1
 8005524:	d02e      	beq.n	8005584 <HAL_TIM_PWM_Init+0x110>
 8005526:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800552a:	428a      	cmp	r2, r1
 800552c:	d02a      	beq.n	8005584 <HAL_TIM_PWM_Init+0x110>
 800552e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005532:	428a      	cmp	r2, r1
 8005534:	d026      	beq.n	8005584 <HAL_TIM_PWM_Init+0x110>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005536:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800553a:	428a      	cmp	r2, r1
 800553c:	d026      	beq.n	800558c <HAL_TIM_PWM_Init+0x118>
 800553e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005542:	428a      	cmp	r2, r1
 8005544:	d022      	beq.n	800558c <HAL_TIM_PWM_Init+0x118>
 8005546:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800554a:	428a      	cmp	r2, r1
 800554c:	d01e      	beq.n	800558c <HAL_TIM_PWM_Init+0x118>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800554e:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005550:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005552:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005558:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800555a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800555c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800555e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005560:	e021      	b.n	80055a6 <HAL_TIM_PWM_Init+0x132>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005562:	482e      	ldr	r0, [pc, #184]	; (800561c <HAL_TIM_PWM_Init+0x1a8>)
 8005564:	f240 5111 	movw	r1, #1297	; 0x511
 8005568:	f7fc fb38 	bl	8001bdc <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800556c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005570:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1c7      	bne.n	8005508 <HAL_TIM_PWM_Init+0x94>
    htim->Lock = HAL_UNLOCKED;
 8005578:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800557c:	4620      	mov	r0, r4
 800557e:	f7ff ff77 	bl	8005470 <HAL_TIM_PWM_MspInit>
 8005582:	e7c1      	b.n	8005508 <HAL_TIM_PWM_Init+0x94>
    tmpcr1 |= Structure->CounterMode;
 8005584:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800558a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800558c:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558e:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005590:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005596:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800559e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80055a0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a2:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055a4:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 80055a6:	2301      	movs	r3, #1
 80055a8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055aa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80055b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80055b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80055ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80055ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80055ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80055d2:	2000      	movs	r0, #0
}
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80055d6:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055da:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055e0:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80055e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ec:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80055ee:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f0:	68e3      	ldr	r3, [r4, #12]
 80055f2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055f4:	6863      	ldr	r3, [r4, #4]
 80055f6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80055f8:	6963      	ldr	r3, [r4, #20]
 80055fa:	6313      	str	r3, [r2, #48]	; 0x30
 80055fc:	e7d3      	b.n	80055a6 <HAL_TIM_PWM_Init+0x132>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80055fe:	4807      	ldr	r0, [pc, #28]	; (800561c <HAL_TIM_PWM_Init+0x1a8>)
 8005600:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8005604:	f7fc faea 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005608:	69a3      	ldr	r3, [r4, #24]
 800560a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800560e:	f43f af75 	beq.w	80054fc <HAL_TIM_PWM_Init+0x88>
 8005612:	e7a6      	b.n	8005562 <HAL_TIM_PWM_Init+0xee>
    return HAL_ERROR;
 8005614:	2001      	movs	r0, #1
}
 8005616:	4770      	bx	lr
 8005618:	40010000 	.word	0x40010000
 800561c:	0800ab20 	.word	0x0800ab20

08005620 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005620:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005624:	2b01      	cmp	r3, #1
 8005626:	f000 8177 	beq.w	8005918 <HAL_TIM_ConfigClockSource+0x2f8>
  htim->State = HAL_TIM_STATE_BUSY;
 800562a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800562c:	2201      	movs	r2, #1
{
 800562e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005630:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005638:	680b      	ldr	r3, [r1, #0]
 800563a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563e:	4604      	mov	r4, r0
 8005640:	460d      	mov	r5, r1
 8005642:	f000 8124 	beq.w	800588e <HAL_TIM_ConfigClockSource+0x26e>
 8005646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564a:	f000 8153 	beq.w	80058f4 <HAL_TIM_ConfigClockSource+0x2d4>
 800564e:	f033 0230 	bics.w	r2, r3, #48	; 0x30
 8005652:	f040 8157 	bne.w	8005904 <HAL_TIM_ConfigClockSource+0x2e4>
  tmpsmcr = htim->Instance->SMCR;
 8005656:	6822      	ldr	r2, [r4, #0]
 8005658:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800565a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800565e:	f021 0177 	bic.w	r1, r1, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8005662:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8005664:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005666:	f000 81a1 	beq.w	80059ac <HAL_TIM_ConfigClockSource+0x38c>
 800566a:	d87e      	bhi.n	800576a <HAL_TIM_ConfigClockSource+0x14a>
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	f000 8159 	beq.w	8005924 <HAL_TIM_ConfigClockSource+0x304>
 8005672:	d94c      	bls.n	800570e <HAL_TIM_ConfigClockSource+0xee>
 8005674:	2b50      	cmp	r3, #80	; 0x50
 8005676:	d143      	bne.n	8005700 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005678:	4ba8      	ldr	r3, [pc, #672]	; (800591c <HAL_TIM_ConfigClockSource+0x2fc>)
 800567a:	429a      	cmp	r2, r3
 800567c:	d017      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x8e>
 800567e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005682:	d014      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x8e>
 8005684:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8005688:	429a      	cmp	r2, r3
 800568a:	d010      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x8e>
 800568c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005690:	429a      	cmp	r2, r3
 8005692:	d00c      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x8e>
 8005694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005698:	429a      	cmp	r2, r3
 800569a:	d008      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x8e>
 800569c:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d004      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0x8e>
 80056a4:	489e      	ldr	r0, [pc, #632]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 80056a6:	f241 4161 	movw	r1, #5217	; 0x1461
 80056aa:	f7fc fa97 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80056ae:	686b      	ldr	r3, [r5, #4]
 80056b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056b4:	d009      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0xaa>
 80056b6:	f033 0202 	bics.w	r2, r3, #2
 80056ba:	d006      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0xaa>
 80056bc:	2b0a      	cmp	r3, #10
 80056be:	d004      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0xaa>
 80056c0:	4897      	ldr	r0, [pc, #604]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 80056c2:	f241 4164 	movw	r1, #5220	; 0x1464
 80056c6:	f7fc fa89 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80056ca:	68ee      	ldr	r6, [r5, #12]
 80056cc:	2e0f      	cmp	r6, #15
 80056ce:	f200 81ce 	bhi.w	8005a6e <HAL_TIM_ConfigClockSource+0x44e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	6869      	ldr	r1, [r5, #4]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056d6:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056d8:	6a1d      	ldr	r5, [r3, #32]
 80056da:	f025 0501 	bic.w	r5, r5, #1
 80056de:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e0:	699a      	ldr	r2, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e2:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056ea:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80056ee:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f2:	6219      	str	r1, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056f4:	689a      	ldr	r2, [r3, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056fa:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fe:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005700:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005702:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005704:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005708:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800570c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800570e:	2b20      	cmp	r3, #32
 8005710:	d002      	beq.n	8005718 <HAL_TIM_ConfigClockSource+0xf8>
 8005712:	d926      	bls.n	8005762 <HAL_TIM_ConfigClockSource+0x142>
 8005714:	2b30      	cmp	r3, #48	; 0x30
 8005716:	d1f3      	bne.n	8005700 <HAL_TIM_ConfigClockSource+0xe0>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8005718:	4980      	ldr	r1, [pc, #512]	; (800591c <HAL_TIM_ConfigClockSource+0x2fc>)
 800571a:	428a      	cmp	r2, r1
 800571c:	d019      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x132>
 800571e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005722:	d016      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x132>
 8005724:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005728:	428a      	cmp	r2, r1
 800572a:	d012      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x132>
 800572c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005730:	428a      	cmp	r2, r1
 8005732:	d00e      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x132>
 8005734:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005738:	428a      	cmp	r2, r1
 800573a:	d00a      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x132>
 800573c:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8005740:	428a      	cmp	r2, r1
 8005742:	d006      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x132>
 8005744:	4876      	ldr	r0, [pc, #472]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 8005746:	f241 4194 	movw	r1, #5268	; 0x1494
 800574a:	f7fc fa47 	bl	8001bdc <assert_failed>
 800574e:	682b      	ldr	r3, [r5, #0]
 8005750:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005752:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005754:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005758:	430b      	orrs	r3, r1
 800575a:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800575e:	6093      	str	r3, [r2, #8]
}
 8005760:	e7ce      	b.n	8005700 <HAL_TIM_ConfigClockSource+0xe0>
  switch (sClockSourceConfig->ClockSource)
 8005762:	f033 0110 	bics.w	r1, r3, #16
 8005766:	d1cb      	bne.n	8005700 <HAL_TIM_ConfigClockSource+0xe0>
 8005768:	e7d6      	b.n	8005718 <HAL_TIM_ConfigClockSource+0xf8>
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576e:	f000 8095 	beq.w	800589c <HAL_TIM_ConfigClockSource+0x27c>
 8005772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005776:	d141      	bne.n	80057fc <HAL_TIM_ConfigClockSource+0x1dc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005778:	4b68      	ldr	r3, [pc, #416]	; (800591c <HAL_TIM_ConfigClockSource+0x2fc>)
 800577a:	429a      	cmp	r2, r3
 800577c:	d013      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x186>
 800577e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005782:	d010      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x186>
 8005784:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8005788:	429a      	cmp	r2, r3
 800578a:	d00c      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x186>
 800578c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005790:	429a      	cmp	r2, r3
 8005792:	d008      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x186>
 8005794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005798:	429a      	cmp	r2, r3
 800579a:	d004      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0x186>
 800579c:	4860      	ldr	r0, [pc, #384]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 800579e:	f241 414d 	movw	r1, #5197	; 0x144d
 80057a2:	f7fc fa1b 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80057a6:	68ab      	ldr	r3, [r5, #8]
 80057a8:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80057ac:	d004      	beq.n	80057b8 <HAL_TIM_ConfigClockSource+0x198>
 80057ae:	485c      	ldr	r0, [pc, #368]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 80057b0:	f241 4150 	movw	r1, #5200	; 0x1450
 80057b4:	f7fc fa12 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80057b8:	686b      	ldr	r3, [r5, #4]
 80057ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057be:	d009      	beq.n	80057d4 <HAL_TIM_ConfigClockSource+0x1b4>
 80057c0:	f033 0202 	bics.w	r2, r3, #2
 80057c4:	d006      	beq.n	80057d4 <HAL_TIM_ConfigClockSource+0x1b4>
 80057c6:	2b0a      	cmp	r3, #10
 80057c8:	d004      	beq.n	80057d4 <HAL_TIM_ConfigClockSource+0x1b4>
 80057ca:	4855      	ldr	r0, [pc, #340]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 80057cc:	f241 4151 	movw	r1, #5201	; 0x1451
 80057d0:	f7fc fa04 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80057d4:	68e8      	ldr	r0, [r5, #12]
 80057d6:	280f      	cmp	r0, #15
 80057d8:	f200 813b 	bhi.w	8005a52 <HAL_TIM_ConfigClockSource+0x432>
      TIM_ETR_SetConfig(htim->Instance,
 80057dc:	6822      	ldr	r2, [r4, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057de:	68ab      	ldr	r3, [r5, #8]
 80057e0:	6891      	ldr	r1, [r2, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e2:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 80057e8:	432b      	orrs	r3, r5
 80057ea:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057ec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f0:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f2:	6893      	ldr	r3, [r2, #8]
 80057f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057f8:	6093      	str	r3, [r2, #8]
      break;
 80057fa:	e781      	b.n	8005700 <HAL_TIM_ConfigClockSource+0xe0>
  switch (sClockSourceConfig->ClockSource)
 80057fc:	2b70      	cmp	r3, #112	; 0x70
 80057fe:	f47f af7f 	bne.w	8005700 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005802:	4b46      	ldr	r3, [pc, #280]	; (800591c <HAL_TIM_ConfigClockSource+0x2fc>)
 8005804:	429a      	cmp	r2, r3
 8005806:	d017      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x218>
 8005808:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800580c:	d014      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x218>
 800580e:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8005812:	429a      	cmp	r2, r3
 8005814:	d010      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x218>
 8005816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800581a:	429a      	cmp	r2, r3
 800581c:	d00c      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x218>
 800581e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005822:	429a      	cmp	r2, r3
 8005824:	d008      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x218>
 8005826:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800582a:	429a      	cmp	r2, r3
 800582c:	d004      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x218>
 800582e:	483c      	ldr	r0, [pc, #240]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 8005830:	f241 4135 	movw	r1, #5173	; 0x1435
 8005834:	f7fc f9d2 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005838:	68ab      	ldr	r3, [r5, #8]
 800583a:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800583e:	d004      	beq.n	800584a <HAL_TIM_ConfigClockSource+0x22a>
 8005840:	4837      	ldr	r0, [pc, #220]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 8005842:	f241 4138 	movw	r1, #5176	; 0x1438
 8005846:	f7fc f9c9 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800584a:	686b      	ldr	r3, [r5, #4]
 800584c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005850:	d009      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x246>
 8005852:	f033 0202 	bics.w	r2, r3, #2
 8005856:	d006      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x246>
 8005858:	2b0a      	cmp	r3, #10
 800585a:	d004      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x246>
 800585c:	4830      	ldr	r0, [pc, #192]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 800585e:	f241 4139 	movw	r1, #5177	; 0x1439
 8005862:	f7fc f9bb 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005866:	68e8      	ldr	r0, [r5, #12]
 8005868:	280f      	cmp	r0, #15
 800586a:	f200 80eb 	bhi.w	8005a44 <HAL_TIM_ConfigClockSource+0x424>
      TIM_ETR_SetConfig(htim->Instance,
 800586e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005870:	68ab      	ldr	r3, [r5, #8]
 8005872:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005874:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005876:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800587a:	432b      	orrs	r3, r5
 800587c:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800587e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 8005882:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005884:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005886:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800588a:	6093      	str	r3, [r2, #8]
      break;
 800588c:	e738      	b.n	8005700 <HAL_TIM_ConfigClockSource+0xe0>
  tmpsmcr = htim->Instance->SMCR;
 800588e:	6802      	ldr	r2, [r0, #0]
 8005890:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800589a:	6093      	str	r3, [r2, #8]
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800589c:	4b1f      	ldr	r3, [pc, #124]	; (800591c <HAL_TIM_ConfigClockSource+0x2fc>)
 800589e:	429a      	cmp	r2, r3
 80058a0:	f43f af2e 	beq.w	8005700 <HAL_TIM_ConfigClockSource+0xe0>
 80058a4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80058a8:	f43f af2a 	beq.w	8005700 <HAL_TIM_ConfigClockSource+0xe0>
 80058ac:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80058b0:	429a      	cmp	r2, r3
 80058b2:	f43f af25 	beq.w	8005700 <HAL_TIM_ConfigClockSource+0xe0>
 80058b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f43f af20 	beq.w	8005700 <HAL_TIM_ConfigClockSource+0xe0>
 80058c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c4:	429a      	cmp	r2, r3
 80058c6:	f43f af1b 	beq.w	8005700 <HAL_TIM_ConfigClockSource+0xe0>
 80058ca:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 80058ce:	429a      	cmp	r2, r3
 80058d0:	f43f af16 	beq.w	8005700 <HAL_TIM_ConfigClockSource+0xe0>
 80058d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d8:	429a      	cmp	r2, r3
 80058da:	f43f af11 	beq.w	8005700 <HAL_TIM_ConfigClockSource+0xe0>
 80058de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e2:	429a      	cmp	r2, r3
 80058e4:	f43f af0c 	beq.w	8005700 <HAL_TIM_ConfigClockSource+0xe0>
 80058e8:	480d      	ldr	r0, [pc, #52]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 80058ea:	f241 412e 	movw	r1, #5166	; 0x142e
 80058ee:	f7fc f975 	bl	8001bdc <assert_failed>
 80058f2:	e705      	b.n	8005700 <HAL_TIM_ConfigClockSource+0xe0>
  tmpsmcr = htim->Instance->SMCR;
 80058f4:	6802      	ldr	r2, [r0, #0]
 80058f6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005900:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005902:	e739      	b.n	8005778 <HAL_TIM_ConfigClockSource+0x158>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005904:	2a40      	cmp	r2, #64	; 0x40
 8005906:	f43f aea6 	beq.w	8005656 <HAL_TIM_ConfigClockSource+0x36>
 800590a:	4805      	ldr	r0, [pc, #20]	; (8005920 <HAL_TIM_ConfigClockSource+0x300>)
 800590c:	f241 4122 	movw	r1, #5154	; 0x1422
 8005910:	f7fc f964 	bl	8001bdc <assert_failed>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	e69e      	b.n	8005656 <HAL_TIM_ConfigClockSource+0x36>
  __HAL_LOCK(htim);
 8005918:	2002      	movs	r0, #2
}
 800591a:	4770      	bx	lr
 800591c:	40010000 	.word	0x40010000
 8005920:	0800ab20 	.word	0x0800ab20
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005924:	4b55      	ldr	r3, [pc, #340]	; (8005a7c <HAL_TIM_ConfigClockSource+0x45c>)
 8005926:	429a      	cmp	r2, r3
 8005928:	d017      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x33a>
 800592a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800592e:	d014      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x33a>
 8005930:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8005934:	429a      	cmp	r2, r3
 8005936:	d010      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x33a>
 8005938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593c:	429a      	cmp	r2, r3
 800593e:	d00c      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x33a>
 8005940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005944:	429a      	cmp	r2, r3
 8005946:	d008      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x33a>
 8005948:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 800594c:	429a      	cmp	r2, r3
 800594e:	d004      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x33a>
 8005950:	484b      	ldr	r0, [pc, #300]	; (8005a80 <HAL_TIM_ConfigClockSource+0x460>)
 8005952:	f241 4181 	movw	r1, #5249	; 0x1481
 8005956:	f7fc f941 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800595a:	686b      	ldr	r3, [r5, #4]
 800595c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005960:	d009      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x356>
 8005962:	f033 0202 	bics.w	r2, r3, #2
 8005966:	d006      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x356>
 8005968:	2b0a      	cmp	r3, #10
 800596a:	d004      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x356>
 800596c:	4844      	ldr	r0, [pc, #272]	; (8005a80 <HAL_TIM_ConfigClockSource+0x460>)
 800596e:	f241 4184 	movw	r1, #5252	; 0x1484
 8005972:	f7fc f933 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005976:	68ee      	ldr	r6, [r5, #12]
 8005978:	2e0f      	cmp	r6, #15
 800597a:	d871      	bhi.n	8005a60 <HAL_TIM_ConfigClockSource+0x440>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 8005980:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005982:	6a1d      	ldr	r5, [r3, #32]
 8005984:	f025 0501 	bic.w	r5, r5, #1
 8005988:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800598a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800598c:	f020 000a 	bic.w	r0, r0, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005990:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005994:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005998:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800599a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800599c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800599e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80059a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059a4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80059a8:	609a      	str	r2, [r3, #8]
}
 80059aa:	e6a9      	b.n	8005700 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80059ac:	4b33      	ldr	r3, [pc, #204]	; (8005a7c <HAL_TIM_ConfigClockSource+0x45c>)
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d017      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x3c2>
 80059b2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80059b6:	d014      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x3c2>
 80059b8:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 80059bc:	429a      	cmp	r2, r3
 80059be:	d010      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x3c2>
 80059c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d00c      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x3c2>
 80059c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d008      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x3c2>
 80059d0:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d004      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x3c2>
 80059d8:	4829      	ldr	r0, [pc, #164]	; (8005a80 <HAL_TIM_ConfigClockSource+0x460>)
 80059da:	f241 4171 	movw	r1, #5233	; 0x1471
 80059de:	f7fc f8fd 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80059e2:	686b      	ldr	r3, [r5, #4]
 80059e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e8:	d009      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x3de>
 80059ea:	f033 0202 	bics.w	r2, r3, #2
 80059ee:	d006      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x3de>
 80059f0:	2b0a      	cmp	r3, #10
 80059f2:	d004      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x3de>
 80059f4:	4822      	ldr	r0, [pc, #136]	; (8005a80 <HAL_TIM_ConfigClockSource+0x460>)
 80059f6:	f241 4174 	movw	r1, #5236	; 0x1474
 80059fa:	f7fc f8ef 	bl	8001bdc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80059fe:	68ee      	ldr	r6, [r5, #12]
 8005a00:	2e0f      	cmp	r6, #15
 8005a02:	d818      	bhi.n	8005a36 <HAL_TIM_ConfigClockSource+0x416>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a08:	6a18      	ldr	r0, [r3, #32]
 8005a0a:	f020 0010 	bic.w	r0, r0, #16
 8005a0e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a10:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8005a12:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a14:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a1c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a20:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005a24:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a26:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8005a28:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a2e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	e664      	b.n	8005700 <HAL_TIM_ConfigClockSource+0xe0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005a36:	4812      	ldr	r0, [pc, #72]	; (8005a80 <HAL_TIM_ConfigClockSource+0x460>)
 8005a38:	f241 4175 	movw	r1, #5237	; 0x1475
 8005a3c:	f7fc f8ce 	bl	8001bdc <assert_failed>
 8005a40:	68ee      	ldr	r6, [r5, #12]
 8005a42:	e7df      	b.n	8005a04 <HAL_TIM_ConfigClockSource+0x3e4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005a44:	480e      	ldr	r0, [pc, #56]	; (8005a80 <HAL_TIM_ConfigClockSource+0x460>)
 8005a46:	f241 413a 	movw	r1, #5178	; 0x143a
 8005a4a:	f7fc f8c7 	bl	8001bdc <assert_failed>
 8005a4e:	68e8      	ldr	r0, [r5, #12]
 8005a50:	e70d      	b.n	800586e <HAL_TIM_ConfigClockSource+0x24e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005a52:	480b      	ldr	r0, [pc, #44]	; (8005a80 <HAL_TIM_ConfigClockSource+0x460>)
 8005a54:	f241 4152 	movw	r1, #5202	; 0x1452
 8005a58:	f7fc f8c0 	bl	8001bdc <assert_failed>
 8005a5c:	68e8      	ldr	r0, [r5, #12]
 8005a5e:	e6bd      	b.n	80057dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005a60:	4807      	ldr	r0, [pc, #28]	; (8005a80 <HAL_TIM_ConfigClockSource+0x460>)
 8005a62:	f241 4185 	movw	r1, #5253	; 0x1485
 8005a66:	f7fc f8b9 	bl	8001bdc <assert_failed>
 8005a6a:	68ee      	ldr	r6, [r5, #12]
 8005a6c:	e786      	b.n	800597c <HAL_TIM_ConfigClockSource+0x35c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005a6e:	4804      	ldr	r0, [pc, #16]	; (8005a80 <HAL_TIM_ConfigClockSource+0x460>)
 8005a70:	f241 4165 	movw	r1, #5221	; 0x1465
 8005a74:	f7fc f8b2 	bl	8001bdc <assert_failed>
 8005a78:	68ee      	ldr	r6, [r5, #12]
 8005a7a:	e62a      	b.n	80056d2 <HAL_TIM_ConfigClockSource+0xb2>
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	0800ab20 	.word	0x0800ab20

08005a84 <HAL_TIM_OC_DelayElapsedCallback>:
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop

08005a88 <HAL_TIM_IC_CaptureCallback>:
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop

08005a8c <HAL_TIM_PWM_PulseFinishedCallback>:
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop

08005a90 <HAL_TIM_TriggerCallback>:
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop

08005a94 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a94:	6803      	ldr	r3, [r0, #0]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	0791      	lsls	r1, r2, #30
{
 8005a9a:	b510      	push	{r4, lr}
 8005a9c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a9e:	d502      	bpl.n	8005aa6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	0792      	lsls	r2, r2, #30
 8005aa4:	d45f      	bmi.n	8005b66 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	0750      	lsls	r0, r2, #29
 8005aaa:	d502      	bpl.n	8005ab2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	0751      	lsls	r1, r2, #29
 8005ab0:	d446      	bmi.n	8005b40 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	0712      	lsls	r2, r2, #28
 8005ab6:	d502      	bpl.n	8005abe <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	0710      	lsls	r0, r2, #28
 8005abc:	d42e      	bmi.n	8005b1c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	06d2      	lsls	r2, r2, #27
 8005ac2:	d502      	bpl.n	8005aca <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	06d0      	lsls	r0, r2, #27
 8005ac8:	d418      	bmi.n	8005afc <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	07d1      	lsls	r1, r2, #31
 8005ace:	d502      	bpl.n	8005ad6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	07d2      	lsls	r2, r2, #31
 8005ad4:	d45d      	bmi.n	8005b92 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	0610      	lsls	r0, r2, #24
 8005ada:	d502      	bpl.n	8005ae2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	0611      	lsls	r1, r2, #24
 8005ae0:	d45f      	bmi.n	8005ba2 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	0652      	lsls	r2, r2, #25
 8005ae6:	d502      	bpl.n	8005aee <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	0650      	lsls	r0, r2, #25
 8005aec:	d461      	bmi.n	8005bb2 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	0691      	lsls	r1, r2, #26
 8005af2:	d502      	bpl.n	8005afa <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	0692      	lsls	r2, r2, #26
 8005af8:	d443      	bmi.n	8005b82 <HAL_TIM_IRQHandler+0xee>
}
 8005afa:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005afc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b00:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b02:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b04:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b0e:	d064      	beq.n	8005bda <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b10:	f7ff ffba 	bl	8005a88 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b14:	2200      	movs	r2, #0
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	7722      	strb	r2, [r4, #28]
 8005b1a:	e7d6      	b.n	8005aca <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b1c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b20:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b22:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b24:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b2c:	d152      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	f7ff ffa9 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b32:	4620      	mov	r0, r4
 8005b34:	f7ff ffaa 	bl	8005a8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b38:	2200      	movs	r2, #0
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	7722      	strb	r2, [r4, #28]
 8005b3e:	e7be      	b.n	8005abe <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b40:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b44:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b46:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b48:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005b50:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b52:	d13c      	bne.n	8005bce <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b54:	f7ff ff96 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f7ff ff97 	bl	8005a8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	2200      	movs	r2, #0
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	7722      	strb	r2, [r4, #28]
 8005b64:	e7a5      	b.n	8005ab2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b66:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b6a:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b6c:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b6e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	079b      	lsls	r3, r3, #30
 8005b74:	d025      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005b76:	f7ff ff87 	bl	8005a88 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	7722      	strb	r2, [r4, #28]
 8005b80:	e791      	b.n	8005aa6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b82:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005b86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b88:	611a      	str	r2, [r3, #16]
}
 8005b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005b8e:	f000 bac9 	b.w	8006124 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b92:	f06f 0201 	mvn.w	r2, #1
 8005b96:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f7fc f98b 	bl	8001eb4 <HAL_TIM_PeriodElapsedCallback>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	e799      	b.n	8005ad6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f000 fabd 	bl	8006128 <HAL_TIMEx_BreakCallback>
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	e797      	b.n	8005ae2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bb6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7ff ff69 	bl	8005a90 <HAL_TIM_TriggerCallback>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	e795      	b.n	8005aee <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	f7ff ff5f 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f7ff ff60 	bl	8005a8c <HAL_TIM_PWM_PulseFinishedCallback>
 8005bcc:	e7d5      	b.n	8005b7a <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	f7ff ff5b 	bl	8005a88 <HAL_TIM_IC_CaptureCallback>
 8005bd2:	e7c4      	b.n	8005b5e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd4:	f7ff ff58 	bl	8005a88 <HAL_TIM_IC_CaptureCallback>
 8005bd8:	e7ae      	b.n	8005b38 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bda:	f7ff ff53 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff ff54 	bl	8005a8c <HAL_TIM_PWM_PulseFinishedCallback>
 8005be4:	e796      	b.n	8005b14 <HAL_TIM_IRQHandler+0x80>
 8005be6:	bf00      	nop

08005be8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be8:	6a03      	ldr	r3, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bea:	688a      	ldr	r2, [r1, #8]
{
 8005bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf0:	4604      	mov	r4, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf2:	f023 0310 	bic.w	r3, r3, #16
 8005bf6:	6223      	str	r3, [r4, #32]
  tmpccer = TIMx->CCER;
 8005bf8:	6a25      	ldr	r5, [r4, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bfa:	4823      	ldr	r0, [pc, #140]	; (8005c88 <TIM_OC2_SetConfig+0xa0>)
  tmpcr2 =  TIMx->CR2;
 8005bfc:	f8d4 8004 	ldr.w	r8, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 8005c00:	69a6      	ldr	r6, [r4, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c02:	680b      	ldr	r3, [r1, #0]
  tmpccer &= ~TIM_CCER_CC2P;
 8005c04:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c08:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c0c:	4284      	cmp	r4, r0
{
 8005c0e:	460f      	mov	r7, r1
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c10:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c14:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c18:	d007      	beq.n	8005c2a <TIM_OC2_SetConfig+0x42>
  TIMx->CCR2 = OC_Config->Pulse;
 8005c1a:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8005c1c:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005c20:	61a6      	str	r6, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005c22:	63a3      	str	r3, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005c24:	6225      	str	r5, [r4, #32]
}
 8005c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005c2a:	68ca      	ldr	r2, [r1, #12]
 8005c2c:	f032 0308 	bics.w	r3, r2, #8
 8005c30:	d115      	bne.n	8005c5e <TIM_OC2_SetConfig+0x76>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005c32:	69bb      	ldr	r3, [r7, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c34:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c38:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005c3c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c40:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005c44:	d119      	bne.n	8005c7a <TIM_OC2_SetConfig+0x92>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8005c4c:	d10e      	bne.n	8005c6c <TIM_OC2_SetConfig+0x84>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c4e:	69ba      	ldr	r2, [r7, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c50:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
 8005c54:	ea48 0882 	orr.w	r8, r8, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c58:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
 8005c5c:	e7dd      	b.n	8005c1a <TIM_OC2_SetConfig+0x32>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005c5e:	480b      	ldr	r0, [pc, #44]	; (8005c8c <TIM_OC2_SetConfig+0xa4>)
 8005c60:	f641 2153 	movw	r1, #6739	; 0x1a53
 8005c64:	f7fb ffba 	bl	8001bdc <assert_failed>
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	e7e2      	b.n	8005c32 <TIM_OC2_SetConfig+0x4a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005c6c:	4807      	ldr	r0, [pc, #28]	; (8005c8c <TIM_OC2_SetConfig+0xa4>)
 8005c6e:	f641 2162 	movw	r1, #6754	; 0x1a62
 8005c72:	f7fb ffb3 	bl	8001bdc <assert_failed>
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	e7e9      	b.n	8005c4e <TIM_OC2_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005c7a:	4804      	ldr	r0, [pc, #16]	; (8005c8c <TIM_OC2_SetConfig+0xa4>)
 8005c7c:	f641 2161 	movw	r1, #6753	; 0x1a61
 8005c80:	f7fb ffac 	bl	8001bdc <assert_failed>
 8005c84:	e7df      	b.n	8005c46 <TIM_OC2_SetConfig+0x5e>
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	0800ab20 	.word	0x0800ab20

08005c90 <HAL_TIM_PWM_ConfigChannel>:
{
 8005c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_CHANNELS(Channel));
 8005c94:	f032 030c 	bics.w	r3, r2, #12
{
 8005c98:	4616      	mov	r6, r2
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8005c9e:	d002      	beq.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x16>
 8005ca0:	2a3c      	cmp	r2, #60	; 0x3c
 8005ca2:	f040 80fb 	bne.w	8005e9c <HAL_TIM_PWM_ConfigChannel+0x20c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	f023 0310 	bic.w	r3, r3, #16
 8005cac:	2b60      	cmp	r3, #96	; 0x60
 8005cae:	d004      	beq.n	8005cba <HAL_TIM_PWM_ConfigChannel+0x2a>
 8005cb0:	48a3      	ldr	r0, [pc, #652]	; (8005f40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8005cb2:	f241 0118 	movw	r1, #4120	; 0x1018
 8005cb6:	f7fb ff91 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005cba:	68a3      	ldr	r3, [r4, #8]
 8005cbc:	f033 0302 	bics.w	r3, r3, #2
 8005cc0:	d004      	beq.n	8005ccc <HAL_TIM_PWM_ConfigChannel+0x3c>
 8005cc2:	489f      	ldr	r0, [pc, #636]	; (8005f40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8005cc4:	f241 0119 	movw	r1, #4121	; 0x1019
 8005cc8:	f7fb ff88 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005ccc:	6923      	ldr	r3, [r4, #16]
 8005cce:	f033 0304 	bics.w	r3, r3, #4
 8005cd2:	d004      	beq.n	8005cde <HAL_TIM_PWM_ConfigChannel+0x4e>
 8005cd4:	489a      	ldr	r0, [pc, #616]	; (8005f40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8005cd6:	f241 011a 	movw	r1, #4122	; 0x101a
 8005cda:	f7fb ff7f 	bl	8001bdc <assert_failed>
  __HAL_LOCK(htim);
 8005cde:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	f000 80e0 	beq.w	8005ea8 <HAL_TIM_PWM_ConfigChannel+0x218>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8005cee:	2e0c      	cmp	r6, #12
 8005cf0:	d83f      	bhi.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0xe2>
 8005cf2:	e8df f006 	tbb	[pc, r6]
 8005cf6:	3e44      	.short	0x3e44
 8005cf8:	3e7a3e3e 	.word	0x3e7a3e3e
 8005cfc:	3ea93e3e 	.word	0x3ea93e3e
 8005d00:	3e3e      	.short	0x3e3e
 8005d02:	07          	.byte	0x07
 8005d03:	00          	.byte	0x00
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8005f48 <HAL_TIM_PWM_ConfigChannel+0x2b8>
 8005d0a:	454b      	cmp	r3, r9
 8005d0c:	f000 80cf 	beq.w	8005eae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d14:	d007      	beq.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x96>
 8005d16:	4a8b      	ldr	r2, [pc, #556]	; (8005f44 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d004      	beq.n	8005d26 <HAL_TIM_PWM_ConfigChannel+0x96>
 8005d1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d20:	4293      	cmp	r3, r2
 8005d22:	f040 80e1 	bne.w	8005ee8 <HAL_TIM_PWM_ConfigChannel+0x258>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d26:	6a1a      	ldr	r2, [r3, #32]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d28:	68a0      	ldr	r0, [r4, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d2a:	6821      	ldr	r1, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d30:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005d32:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005d34:	f8d3 8004 	ldr.w	r8, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005d38:	69de      	ldr	r6, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005d3a:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d3e:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d42:	ea47 3700 	orr.w	r7, r7, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d46:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d4a:	461a      	mov	r2, r3
  TIMx->CCR4 = OC_Config->Pulse;
 8005d4c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR2 = tmpcr2;
 8005d4e:	f8c3 8004 	str.w	r8, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005d52:	61de      	str	r6, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005d54:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005d56:	621f      	str	r7, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d58:	69d1      	ldr	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d5a:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d5c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005d60:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d62:	69d1      	ldr	r1, [r2, #28]
 8005d64:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005d68:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d6a:	69d3      	ldr	r3, [r2, #28]
 8005d6c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005d70:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(htim);
 8005d72:	2300      	movs	r3, #0
 8005d74:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return HAL_OK;
 8005d78:	4618      	mov	r0, r3
}
 8005d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005d7e:	6828      	ldr	r0, [r5, #0]
 8005d80:	4b71      	ldr	r3, [pc, #452]	; (8005f48 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8005d82:	4298      	cmp	r0, r3
 8005d84:	d020      	beq.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x138>
 8005d86:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x138>
 8005d8c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8005d90:	4298      	cmp	r0, r3
 8005d92:	d019      	beq.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x138>
 8005d94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d98:	4298      	cmp	r0, r3
 8005d9a:	d015      	beq.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x138>
 8005d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da0:	4298      	cmp	r0, r3
 8005da2:	d011      	beq.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x138>
 8005da4:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8005da8:	4298      	cmp	r0, r3
 8005daa:	d00d      	beq.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x138>
 8005dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005db0:	4298      	cmp	r0, r3
 8005db2:	d009      	beq.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x138>
 8005db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005db8:	4298      	cmp	r0, r3
 8005dba:	d005      	beq.n	8005dc8 <HAL_TIM_PWM_ConfigChannel+0x138>
 8005dbc:	4860      	ldr	r0, [pc, #384]	; (8005f40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8005dbe:	f241 0124 	movw	r1, #4132	; 0x1024
 8005dc2:	f7fb ff0b 	bl	8001bdc <assert_failed>
 8005dc6:	6828      	ldr	r0, [r5, #0]
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dc8:	4621      	mov	r1, r4
 8005dca:	f7ff f979 	bl	80050c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dce:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005dd0:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dd2:	6999      	ldr	r1, [r3, #24]
 8005dd4:	f041 0108 	orr.w	r1, r1, #8
 8005dd8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dda:	6999      	ldr	r1, [r3, #24]
 8005ddc:	f021 0104 	bic.w	r1, r1, #4
 8005de0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005de2:	699a      	ldr	r2, [r3, #24]
 8005de4:	4302      	orrs	r2, r0
 8005de6:	619a      	str	r2, [r3, #24]
      break;
 8005de8:	e7c3      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0xe2>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005dea:	6828      	ldr	r0, [r5, #0]
 8005dec:	4b56      	ldr	r3, [pc, #344]	; (8005f48 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8005dee:	4298      	cmp	r0, r3
 8005df0:	d018      	beq.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005df2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005df6:	d015      	beq.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005df8:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8005dfc:	4298      	cmp	r0, r3
 8005dfe:	d011      	beq.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005e00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e04:	4298      	cmp	r0, r3
 8005e06:	d00d      	beq.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e0c:	4298      	cmp	r0, r3
 8005e0e:	d009      	beq.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005e10:	f503 339a 	add.w	r3, r3, #78848	; 0x13400
 8005e14:	4298      	cmp	r0, r3
 8005e16:	d005      	beq.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005e18:	4849      	ldr	r0, [pc, #292]	; (8005f40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8005e1a:	f241 0135 	movw	r1, #4149	; 0x1035
 8005e1e:	f7fb fedd 	bl	8001bdc <assert_failed>
 8005e22:	6828      	ldr	r0, [r5, #0]
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e24:	4621      	mov	r1, r4
 8005e26:	f7ff fedf 	bl	8005be8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e2a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e2c:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e2e:	6999      	ldr	r1, [r3, #24]
 8005e30:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005e34:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e36:	6999      	ldr	r1, [r3, #24]
 8005e38:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005e3c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005e44:	619a      	str	r2, [r3, #24]
      break;
 8005e46:	e794      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0xe2>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005e48:	6828      	ldr	r0, [r5, #0]
 8005e4a:	4b3f      	ldr	r3, [pc, #252]	; (8005f48 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 8005e4c:	4298      	cmp	r0, r3
 8005e4e:	d014      	beq.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8005e50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005e54:	d011      	beq.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8005e56:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8005e5a:	4298      	cmp	r0, r3
 8005e5c:	d00d      	beq.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8005e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e62:	4298      	cmp	r0, r3
 8005e64:	d009      	beq.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8005e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6a:	4298      	cmp	r0, r3
 8005e6c:	d005      	beq.n	8005e7a <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8005e6e:	4834      	ldr	r0, [pc, #208]	; (8005f40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8005e70:	f241 0146 	movw	r1, #4166	; 0x1046
 8005e74:	f7fb feb2 	bl	8001bdc <assert_failed>
 8005e78:	6828      	ldr	r0, [r5, #0]
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	f7ff f972 	bl	8005164 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e80:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e82:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e84:	69d9      	ldr	r1, [r3, #28]
 8005e86:	f041 0108 	orr.w	r1, r1, #8
 8005e8a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e8c:	69d9      	ldr	r1, [r3, #28]
 8005e8e:	f021 0104 	bic.w	r1, r1, #4
 8005e92:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e94:	69da      	ldr	r2, [r3, #28]
 8005e96:	4302      	orrs	r2, r0
 8005e98:	61da      	str	r2, [r3, #28]
      break;
 8005e9a:	e76a      	b.n	8005d72 <HAL_TIM_PWM_ConfigChannel+0xe2>
  assert_param(IS_TIM_CHANNELS(Channel));
 8005e9c:	4828      	ldr	r0, [pc, #160]	; (8005f40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8005e9e:	f241 0117 	movw	r1, #4119	; 0x1017
 8005ea2:	f7fb fe9b 	bl	8001bdc <assert_failed>
 8005ea6:	e6fe      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x16>
  __HAL_LOCK(htim);
 8005ea8:	2002      	movs	r0, #2
}
 8005eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005eb4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005eb6:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005eb8:	f8d3 8004 	ldr.w	r8, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005ebc:	69de      	ldr	r6, [r3, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ebe:	68a2      	ldr	r2, [r4, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec0:	6823      	ldr	r3, [r4, #0]
  tmpccer &= ~TIM_CCER_CC4P;
 8005ec2:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ec6:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eca:	ea47 3702 	orr.w	r7, r7, r2, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ece:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005ed2:	6961      	ldr	r1, [r4, #20]
 8005ed4:	f431 7380 	bics.w	r3, r1, #256	; 0x100
 8005ed8:	d129      	bne.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x29e>
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005edc:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ede:	f428 4880 	bic.w	r8, r8, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ee2:	ea48 1881 	orr.w	r8, r8, r1, lsl #6
 8005ee6:	e731      	b.n	8005d4c <HAL_TIM_PWM_ConfigChannel+0xbc>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005eec:	4293      	cmp	r3, r2
 8005eee:	f43f af1a 	beq.w	8005d26 <HAL_TIM_PWM_ConfigChannel+0x96>
 8005ef2:	4813      	ldr	r0, [pc, #76]	; (8005f40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8005ef4:	f241 0157 	movw	r1, #4183	; 0x1057
 8005ef8:	f7fb fe70 	bl	8001bdc <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005efc:	682b      	ldr	r3, [r5, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005efe:	68a0      	ldr	r0, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f00:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f02:	6821      	ldr	r1, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f08:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005f0a:	6a1f      	ldr	r7, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005f0c:	f8d3 8004 	ldr.w	r8, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005f10:	69de      	ldr	r6, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005f12:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f16:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1a:	454b      	cmp	r3, r9
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f1c:	ea47 3700 	orr.w	r7, r7, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f20:	ea46 2601 	orr.w	r6, r6, r1, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f24:	bf18      	it	ne
 8005f26:	461a      	movne	r2, r3
 8005f28:	f47f af10 	bne.w	8005d4c <HAL_TIM_PWM_ConfigChannel+0xbc>
 8005f2c:	e7d1      	b.n	8005ed2 <HAL_TIM_PWM_ConfigChannel+0x242>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005f2e:	f641 21ea 	movw	r1, #6890	; 0x1aea
 8005f32:	4803      	ldr	r0, [pc, #12]	; (8005f40 <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8005f34:	f7fb fe52 	bl	8001bdc <assert_failed>
 8005f38:	6961      	ldr	r1, [r4, #20]
 8005f3a:	682a      	ldr	r2, [r5, #0]
 8005f3c:	e7ce      	b.n	8005edc <HAL_TIM_PWM_ConfigChannel+0x24c>
 8005f3e:	bf00      	nop
 8005f40:	0800ab20 	.word	0x0800ab20
 8005f44:	40000400 	.word	0x40000400
 8005f48:	40010000 	.word	0x40010000

08005f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005f4e:	4a32      	ldr	r2, [pc, #200]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f50:	6803      	ldr	r3, [r0, #0]
 8005f52:	4293      	cmp	r3, r2
{
 8005f54:	4604      	mov	r4, r0
 8005f56:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8005f58:	d013      	beq.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5e:	d010      	beq.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8005f60:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00c      	beq.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8005f68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d008      	beq.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8005f70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d004      	beq.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0x36>
 8005f78:	4828      	ldr	r0, [pc, #160]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f7a:	f240 7177 	movw	r1, #1911	; 0x777
 8005f7e:	f7fb fe2d 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8005f88:	d006      	beq.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d004      	beq.n	8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f8e:	4823      	ldr	r0, [pc, #140]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f90:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 8005f94:	f7fb fe22 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8005f98:	686b      	ldr	r3, [r5, #4]
 8005f9a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8005f9e:	d12f      	bne.n	8006000 <HAL_TIMEx_MasterConfigSynchronization+0xb4>

  /* Check input state */
  __HAL_LOCK(htim);
 8005fa0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d034      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xc6>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fa8:	6823      	ldr	r3, [r4, #0]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005faa:	481b      	ldr	r0, [pc, #108]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005fac:	2202      	movs	r2, #2
 8005fae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005fb2:	685a      	ldr	r2, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fb4:	6829      	ldr	r1, [r5, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fba:	430a      	orrs	r2, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fbc:	4283      	cmp	r3, r0
  tmpsmcr = htim->Instance->SMCR;
 8005fbe:	6899      	ldr	r1, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8005fc0:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc2:	d011      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005fca:	4a15      	ldr	r2, [pc, #84]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005fd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005fe0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fe8:	686a      	ldr	r2, [r5, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fea:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fee:	4311      	orrs	r1, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff0:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ff2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005ff4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005ff6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005ffa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006000:	4806      	ldr	r0, [pc, #24]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006002:	f240 7179 	movw	r1, #1913	; 0x779
 8006006:	f7fb fde9 	bl	8001bdc <assert_failed>
  __HAL_LOCK(htim);
 800600a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d1ca      	bne.n	8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8006012:	2002      	movs	r0, #2
}
 8006014:	bd38      	pop	{r3, r4, r5, pc}
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	0800ab58 	.word	0x0800ab58
 8006020:	40000400 	.word	0x40000400

08006024 <HAL_TIMEx_ConfigBreakDeadTime>:
{
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006024:	4b3d      	ldr	r3, [pc, #244]	; (800611c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006026:	6802      	ldr	r2, [r0, #0]
 8006028:	429a      	cmp	r2, r3
{
 800602a:	b570      	push	{r4, r5, r6, lr}
 800602c:	4604      	mov	r4, r0
 800602e:	460d      	mov	r5, r1
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006030:	d004      	beq.n	800603c <HAL_TIMEx_ConfigBreakDeadTime+0x18>
 8006032:	483b      	ldr	r0, [pc, #236]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8006034:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8006038:	f7fb fdd0 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8006042:	d159      	bne.n	80060f8 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8006044:	686b      	ldr	r3, [r5, #4]
 8006046:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800604a:	d14f      	bne.n	80060ec <HAL_TIMEx_ConfigBreakDeadTime+0xc8>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800604c:	68ab      	ldr	r3, [r5, #8]
 800604e:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8006052:	d004      	beq.n	800605e <HAL_TIMEx_ConfigBreakDeadTime+0x3a>
 8006054:	4832      	ldr	r0, [pc, #200]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8006056:	f240 71b7 	movw	r1, #1975	; 0x7b7
 800605a:	f7fb fdbf 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800605e:	68eb      	ldr	r3, [r5, #12]
 8006060:	2bff      	cmp	r3, #255	; 0xff
 8006062:	d834      	bhi.n	80060ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8006064:	692b      	ldr	r3, [r5, #16]
 8006066:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800606a:	d139      	bne.n	80060e0 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800606c:	696b      	ldr	r3, [r5, #20]
 800606e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8006072:	d004      	beq.n	800607e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8006074:	482a      	ldr	r0, [pc, #168]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8006076:	f240 71ba 	movw	r1, #1978	; 0x7ba
 800607a:	f7fb fdaf 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800607e:	69eb      	ldr	r3, [r5, #28]
 8006080:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8006084:	d13e      	bne.n	8006104 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>

  /* Check input state */
  __HAL_LOCK(htim);
 8006086:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800608a:	2b01      	cmp	r3, #1
 800608c:	d043      	beq.n	8006116 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800608e:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006092:	e9d5 2100 	ldrd	r2, r1, [r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800609c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060a0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060a2:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060aa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b0:	4333      	orrs	r3, r6
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060b6:	69e9      	ldr	r1, [r5, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060b8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060ba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060c0:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 80060c2:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80060c4:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80060c6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 80060ca:	4608      	mov	r0, r1
}
 80060cc:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80060ce:	4814      	ldr	r0, [pc, #80]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 80060d0:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 80060d4:	f7fb fd82 	bl	8001bdc <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80060d8:	692b      	ldr	r3, [r5, #16]
 80060da:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80060de:	d0c5      	beq.n	800606c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80060e0:	480f      	ldr	r0, [pc, #60]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 80060e2:	f240 71b9 	movw	r1, #1977	; 0x7b9
 80060e6:	f7fb fd79 	bl	8001bdc <assert_failed>
 80060ea:	e7bf      	b.n	800606c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80060ec:	480c      	ldr	r0, [pc, #48]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 80060ee:	f240 71b6 	movw	r1, #1974	; 0x7b6
 80060f2:	f7fb fd73 	bl	8001bdc <assert_failed>
 80060f6:	e7a9      	b.n	800604c <HAL_TIMEx_ConfigBreakDeadTime+0x28>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80060f8:	4809      	ldr	r0, [pc, #36]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 80060fa:	f240 71b5 	movw	r1, #1973	; 0x7b5
 80060fe:	f7fb fd6d 	bl	8001bdc <assert_failed>
 8006102:	e79f      	b.n	8006044 <HAL_TIMEx_ConfigBreakDeadTime+0x20>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006104:	4806      	ldr	r0, [pc, #24]	; (8006120 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>)
 8006106:	f240 71bb 	movw	r1, #1979	; 0x7bb
 800610a:	f7fb fd67 	bl	8001bdc <assert_failed>
  __HAL_LOCK(htim);
 800610e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006112:	2b01      	cmp	r3, #1
 8006114:	d1bb      	bne.n	800608e <HAL_TIMEx_ConfigBreakDeadTime+0x6a>
 8006116:	2002      	movs	r0, #2
}
 8006118:	bd70      	pop	{r4, r5, r6, pc}
 800611a:	bf00      	nop
 800611c:	40010000 	.word	0x40010000
 8006120:	0800ab58 	.word	0x0800ab58

08006124 <HAL_TIMEx_CommutCallback>:
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop

08006128 <HAL_TIMEx_BreakCallback>:
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop

0800612c <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800612c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
  hci_disconnection_complete_event(rp0->Status,
 800612e:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8006132:	78c2      	ldrb	r2, [r0, #3]
 8006134:	7800      	ldrb	r0, [r0, #0]
 8006136:	f7fb f87d 	bl	8001234 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
}
 800613a:	2000      	movs	r0, #0
 800613c:	bd08      	pop	{r3, pc}
 800613e:	bf00      	nop

08006140 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8006140:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
  hci_encryption_change_event(rp0->Status,
 8006142:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8006146:	78c2      	ldrb	r2, [r0, #3]
 8006148:	7800      	ldrb	r0, [r0, #0]
 800614a:	f000 faf1 	bl	8006730 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
}
 800614e:	2000      	movs	r0, #0
 8006150:	bd08      	pop	{r3, pc}
 8006152:	bf00      	nop

08006154 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8006154:	b500      	push	{lr}
 8006156:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
  hci_read_remote_version_information_complete_event(rp0->Status,
 8006158:	88c3      	ldrh	r3, [r0, #6]
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	8883      	ldrh	r3, [r0, #4]
 800615e:	78c2      	ldrb	r2, [r0, #3]
 8006160:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8006164:	7800      	ldrb	r0, [r0, #0]
 8006166:	f000 fae5 	bl	8006734 <hci_read_remote_version_information_complete_event>
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
}
 800616a:	2000      	movs	r0, #0
 800616c:	b003      	add	sp, #12
 800616e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006172:	bf00      	nop

08006174 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 8006174:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
  hci_hardware_error_event(rp0->Hardware_Code);
 8006176:	7800      	ldrb	r0, [r0, #0]
 8006178:	f000 fade 	bl	8006738 <hci_hardware_error_event>

  return status;
}
 800617c:	2000      	movs	r0, #0
 800617e:	bd08      	pop	{r3, pc}

08006180 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 8006180:	b530      	push	{r4, r5, lr}
 8006182:	4602      	mov	r2, r0
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8006184:	7800      	ldrb	r0, [r0, #0]
{
 8006186:	b0a1      	sub	sp, #132	; 0x84
 8006188:	4669      	mov	r1, sp
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800618a:	b148      	cbz	r0, 80061a0 <hci_number_of_completed_packets_event_process+0x20>
 800618c:	3201      	adds	r2, #1
 800618e:	eb01 0580 	add.w	r5, r1, r0, lsl #2
 8006192:	460b      	mov	r3, r1
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8006194:	f852 4b04 	ldr.w	r4, [r2], #4
 8006198:	f843 4b04 	str.w	r4, [r3], #4
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800619c:	429d      	cmp	r5, r3
 800619e:	d1f9      	bne.n	8006194 <hci_number_of_completed_packets_event_process+0x14>
    size += 2;
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
    size += 2;
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 80061a0:	f000 facc 	bl	800673c <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
}
 80061a4:	2000      	movs	r0, #0
 80061a6:	b021      	add	sp, #132	; 0x84
 80061a8:	bd30      	pop	{r4, r5, pc}
 80061aa:	bf00      	nop

080061ac <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80061ac:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80061ae:	7800      	ldrb	r0, [r0, #0]
 80061b0:	f000 fac6 	bl	8006740 <hci_data_buffer_overflow_event>

  return status;
}
 80061b4:	2000      	movs	r0, #0
 80061b6:	bd08      	pop	{r3, pc}

080061b8 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80061b8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80061ba:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 80061be:	7800      	ldrb	r0, [r0, #0]
 80061c0:	f000 fac0 	bl	8006744 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
}
 80061c4:	2000      	movs	r0, #0
 80061c6:	bd08      	pop	{r3, pc}

080061c8 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80061c8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
  aci_blue_initialized_event(rp0->Reason_Code);
 80061ca:	7800      	ldrb	r0, [r0, #0]
 80061cc:	f000 fb14 	bl	80067f8 <aci_blue_initialized_event>

  return status;
}
 80061d0:	2000      	movs	r0, #0
 80061d2:	bd08      	pop	{r3, pc}

080061d4 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 80061d4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
  aci_blue_events_lost_event(rp0->Lost_Events);
 80061d6:	f000 fb11 	bl	80067fc <aci_blue_events_lost_event>

  return status;
}
 80061da:	2000      	movs	r0, #0
 80061dc:	bd08      	pop	{r3, pc}
 80061de:	bf00      	nop

080061e0 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 80061e0:	b570      	push	{r4, r5, r6, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
  aci_blue_crash_info_event(rp0->Crash_Type,
 80061e2:	4603      	mov	r3, r0
{
 80061e4:	b088      	sub	sp, #32
 80061e6:	4601      	mov	r1, r0
  aci_blue_crash_info_event(rp0->Crash_Type,
 80061e8:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80061ec:	f813 0b26 	ldrb.w	r0, [r3], #38
 80061f0:	f8d1 2021 	ldr.w	r2, [r1, #33]	; 0x21
 80061f4:	f8d1 601d 	ldr.w	r6, [r1, #29]
 80061f8:	9307      	str	r3, [sp, #28]
 80061fa:	f8d1 5019 	ldr.w	r5, [r1, #25]
 80061fe:	9406      	str	r4, [sp, #24]
 8006200:	f8d1 4015 	ldr.w	r4, [r1, #21]
 8006204:	9205      	str	r2, [sp, #20]
 8006206:	f8d1 2011 	ldr.w	r2, [r1, #17]
 800620a:	9604      	str	r6, [sp, #16]
 800620c:	f8d1 300d 	ldr.w	r3, [r1, #13]
 8006210:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006214:	e9cd 3200 	strd	r3, r2, [sp]
 8006218:	f8d1 3009 	ldr.w	r3, [r1, #9]
 800621c:	f8d1 2005 	ldr.w	r2, [r1, #5]
 8006220:	f8d1 1001 	ldr.w	r1, [r1, #1]
 8006224:	f000 faec 	bl	8006800 <aci_blue_crash_info_event>
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);

  return status;
}
 8006228:	2000      	movs	r0, #0
 800622a:	b008      	add	sp, #32
 800622c:	bd70      	pop	{r4, r5, r6, pc}
 800622e:	bf00      	nop

08006230 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 8006230:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 8006232:	f8d0 2002 	ldr.w	r2, [r0, #2]
 8006236:	7841      	ldrb	r1, [r0, #1]
 8006238:	7800      	ldrb	r0, [r0, #0]
 800623a:	f000 fae3 	bl	8006804 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
}
 800623e:	2000      	movs	r0, #0
 8006240:	bd08      	pop	{r3, pc}
 8006242:	bf00      	nop

08006244 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 8006244:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
  aci_hal_scan_req_report_event(rp0->RSSI,
 8006246:	1c82      	adds	r2, r0, #2
 8006248:	7841      	ldrb	r1, [r0, #1]
 800624a:	f990 0000 	ldrsb.w	r0, [r0]
 800624e:	f000 fadb 	bl	8006808 <aci_hal_scan_req_report_event>
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);

  return status;
}
 8006252:	2000      	movs	r0, #0
 8006254:	bd08      	pop	{r3, pc}
 8006256:	bf00      	nop

08006258 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 8006258:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800625a:	1c82      	adds	r2, r0, #2
 800625c:	7841      	ldrb	r1, [r0, #1]
 800625e:	7800      	ldrb	r0, [r0, #0]
 8006260:	f000 fad4 	bl	800680c <aci_hal_fw_error_event>
                         rp0->Data_Length,
                         rp0->Data);

  return status;
}
 8006264:	2000      	movs	r0, #0
 8006266:	bd08      	pop	{r3, pc}

08006268 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8006268:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_limited_discoverable_event();
 800626a:	f000 fa7f 	bl	800676c <aci_gap_limited_discoverable_event>

  return status;
}
 800626e:	2000      	movs	r0, #0
 8006270:	bd08      	pop	{r3, pc}
 8006272:	bf00      	nop

08006274 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8006274:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8006276:	78c2      	ldrb	r2, [r0, #3]
 8006278:	7881      	ldrb	r1, [r0, #2]
 800627a:	8800      	ldrh	r0, [r0, #0]
 800627c:	f000 fa78 	bl	8006770 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
}
 8006280:	2000      	movs	r0, #0
 8006282:	bd08      	pop	{r3, pc}

08006284 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 8006284:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 8006286:	8800      	ldrh	r0, [r0, #0]
 8006288:	f000 fa74 	bl	8006774 <aci_gap_pass_key_req_event>

  return status;
}
 800628c:	2000      	movs	r0, #0
 800628e:	bd08      	pop	{r3, pc}

08006290 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8006290:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8006292:	8800      	ldrh	r0, [r0, #0]
 8006294:	f000 fa70 	bl	8006778 <aci_gap_authorization_req_event>

  return status;
}
 8006298:	2000      	movs	r0, #0
 800629a:	bd08      	pop	{r3, pc}

0800629c <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800629c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_slave_security_initiated_event();
 800629e:	f000 fa6d 	bl	800677c <aci_gap_slave_security_initiated_event>

  return status;
}
 80062a2:	2000      	movs	r0, #0
 80062a4:	bd08      	pop	{r3, pc}
 80062a6:	bf00      	nop

080062a8 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 80062a8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  aci_gap_bond_lost_event();
 80062aa:	f000 fa69 	bl	8006780 <aci_gap_bond_lost_event>

  return status;
}
 80062ae:	2000      	movs	r0, #0
 80062b0:	bd08      	pop	{r3, pc}
 80062b2:	bf00      	nop

080062b4 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 80062b4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 80062b6:	1cc3      	adds	r3, r0, #3
 80062b8:	7882      	ldrb	r2, [r0, #2]
 80062ba:	7841      	ldrb	r1, [r0, #1]
 80062bc:	7800      	ldrb	r0, [r0, #0]
 80062be:	f000 fa61 	bl	8006784 <aci_gap_proc_complete_event>
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);

  return status;
}
 80062c2:	2000      	movs	r0, #0
 80062c4:	bd08      	pop	{r3, pc}
 80062c6:	bf00      	nop

080062c8 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 80062c8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 80062ca:	8800      	ldrh	r0, [r0, #0]
 80062cc:	f000 fa5c 	bl	8006788 <aci_gap_addr_not_resolved_event>

  return status;
}
 80062d0:	2000      	movs	r0, #0
 80062d2:	bd08      	pop	{r3, pc}

080062d4 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 80062d4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 80062d6:	f8d0 1002 	ldr.w	r1, [r0, #2]
 80062da:	8800      	ldrh	r0, [r0, #0]
 80062dc:	f000 fa56 	bl	800678c <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
}
 80062e0:	2000      	movs	r0, #0
 80062e2:	bd08      	pop	{r3, pc}

080062e4 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 80062e4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 80062e6:	7881      	ldrb	r1, [r0, #2]
 80062e8:	8800      	ldrh	r0, [r0, #0]
 80062ea:	f000 fa51 	bl	8006790 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
}
 80062ee:	2000      	movs	r0, #0
 80062f0:	bd08      	pop	{r3, pc}
 80062f2:	bf00      	nop

080062f4 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 80062f4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 80062f6:	8841      	ldrh	r1, [r0, #2]
 80062f8:	8800      	ldrh	r0, [r0, #0]
 80062fa:	f000 fa75 	bl	80067e8 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
}
 80062fe:	2000      	movs	r0, #0
 8006300:	bd08      	pop	{r3, pc}
 8006302:	bf00      	nop

08006304 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006304:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8006306:	1cc2      	adds	r2, r0, #3
 8006308:	7881      	ldrb	r1, [r0, #2]
 800630a:	8800      	ldrh	r0, [r0, #0]
 800630c:	f000 fa6e 	bl	80067ec <aci_l2cap_proc_timeout_event>
                               rp0->Data_Length,
                               rp0->Data);

  return status;
}
 8006310:	2000      	movs	r0, #0
 8006312:	bd08      	pop	{r3, pc}

08006314 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8006314:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8006316:	f8b0 100b 	ldrh.w	r1, [r0, #11]
 800631a:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800631e:	f8b0 3007 	ldrh.w	r3, [r0, #7]
{
 8006322:	b085      	sub	sp, #20
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8006324:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800632e:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8006332:	7881      	ldrb	r1, [r0, #2]
 8006334:	8800      	ldrh	r0, [r0, #0]
 8006336:	f000 fa5b 	bl	80067f0 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
}
 800633a:	2000      	movs	r0, #0
 800633c:	b005      	add	sp, #20
 800633e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006342:	bf00      	nop

08006344 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8006344:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8006346:	4602      	mov	r2, r0
{
 8006348:	b083      	sub	sp, #12
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800634a:	7943      	ldrb	r3, [r0, #5]
{
 800634c:	4601      	mov	r1, r0
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800634e:	f832 0b06 	ldrh.w	r0, [r2], #6
 8006352:	9200      	str	r2, [sp, #0]
 8006354:	f8b1 2003 	ldrh.w	r2, [r1, #3]
 8006358:	7889      	ldrb	r1, [r1, #2]
 800635a:	f000 fa4b 	bl	80067f4 <aci_l2cap_command_reject_event>
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);

  return status;
}
 800635e:	2000      	movs	r0, #0
 8006360:	b003      	add	sp, #12
 8006362:	f85d fb04 	ldr.w	pc, [sp], #4
 8006366:	bf00      	nop

08006368 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8006368:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800636a:	4602      	mov	r2, r0
{
 800636c:	b083      	sub	sp, #12
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800636e:	88c3      	ldrh	r3, [r0, #6]
{
 8006370:	4601      	mov	r1, r0
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8006372:	f832 0b08 	ldrh.w	r0, [r2], #8
 8006376:	9200      	str	r2, [sp, #0]
 8006378:	888a      	ldrh	r2, [r1, #4]
 800637a:	8849      	ldrh	r1, [r1, #2]
 800637c:	f7fa ff90 	bl	80012a0 <aci_gatt_attribute_modified_event>
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);

  return status;
}
 8006380:	2000      	movs	r0, #0
 8006382:	b003      	add	sp, #12
 8006384:	f85d fb04 	ldr.w	pc, [sp], #4

08006388 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8006388:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800638a:	8800      	ldrh	r0, [r0, #0]
 800638c:	f000 fa02 	bl	8006794 <aci_gatt_proc_timeout_event>

  return status;
}
 8006390:	2000      	movs	r0, #0
 8006392:	bd08      	pop	{r3, pc}

08006394 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8006394:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8006396:	8841      	ldrh	r1, [r0, #2]
 8006398:	8800      	ldrh	r0, [r0, #0]
 800639a:	f000 f9fd 	bl	8006798 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
}
 800639e:	2000      	movs	r0, #0
 80063a0:	bd08      	pop	{r3, pc}
 80063a2:	bf00      	nop

080063a4 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 80063a4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 80063a6:	1d03      	adds	r3, r0, #4
 80063a8:	78c2      	ldrb	r2, [r0, #3]
 80063aa:	7881      	ldrb	r1, [r0, #2]
 80063ac:	8800      	ldrh	r0, [r0, #0]
 80063ae:	f000 f9f5 	bl	800679c <aci_att_find_info_resp_event>
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);

  return status;
}
 80063b2:	2000      	movs	r0, #0
 80063b4:	bd08      	pop	{r3, pc}
 80063b6:	bf00      	nop

080063b8 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 80063b8:	b570      	push	{r4, r5, r6, lr}
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80063ba:	7881      	ldrb	r1, [r0, #2]
{
 80063bc:	b0a0      	sub	sp, #128	; 0x80
 80063be:	466a      	mov	r2, sp
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80063c0:	b149      	cbz	r1, 80063d6 <aci_att_find_by_type_value_resp_event_process+0x1e>
 80063c2:	eb02 0681 	add.w	r6, r2, r1, lsl #2
 80063c6:	4613      	mov	r3, r2
 80063c8:	1cc4      	adds	r4, r0, #3
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 80063ca:	f854 5b04 	ldr.w	r5, [r4], #4
 80063ce:	f843 5b04 	str.w	r5, [r3], #4
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 80063d2:	429e      	cmp	r6, r3
 80063d4:	d1f9      	bne.n	80063ca <aci_att_find_by_type_value_resp_event_process+0x12>
    size += 2;
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
    size += 2;
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 80063d6:	8800      	ldrh	r0, [r0, #0]
 80063d8:	f000 f9e2 	bl	80067a0 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
}
 80063dc:	2000      	movs	r0, #0
 80063de:	b020      	add	sp, #128	; 0x80
 80063e0:	bd70      	pop	{r4, r5, r6, pc}
 80063e2:	bf00      	nop

080063e4 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 80063e4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 80063e6:	1d03      	adds	r3, r0, #4
 80063e8:	78c2      	ldrb	r2, [r0, #3]
 80063ea:	7881      	ldrb	r1, [r0, #2]
 80063ec:	8800      	ldrh	r0, [r0, #0]
 80063ee:	f000 f9d9 	bl	80067a4 <aci_att_read_by_type_resp_event>
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);

  return status;
}
 80063f2:	2000      	movs	r0, #0
 80063f4:	bd08      	pop	{r3, pc}
 80063f6:	bf00      	nop

080063f8 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 80063f8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
  aci_att_read_resp_event(rp0->Connection_Handle,
 80063fa:	1cc2      	adds	r2, r0, #3
 80063fc:	7881      	ldrb	r1, [r0, #2]
 80063fe:	8800      	ldrh	r0, [r0, #0]
 8006400:	f000 f9d2 	bl	80067a8 <aci_att_read_resp_event>
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);

  return status;
}
 8006404:	2000      	movs	r0, #0
 8006406:	bd08      	pop	{r3, pc}

08006408 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8006408:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800640a:	1cc2      	adds	r2, r0, #3
 800640c:	7881      	ldrb	r1, [r0, #2]
 800640e:	8800      	ldrh	r0, [r0, #0]
 8006410:	f000 f9cc 	bl	80067ac <aci_att_read_blob_resp_event>
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);

  return status;
}
 8006414:	2000      	movs	r0, #0
 8006416:	bd08      	pop	{r3, pc}

08006418 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8006418:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800641a:	1cc2      	adds	r2, r0, #3
 800641c:	7881      	ldrb	r1, [r0, #2]
 800641e:	8800      	ldrh	r0, [r0, #0]
 8006420:	f000 f9c6 	bl	80067b0 <aci_att_read_multiple_resp_event>
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);

  return status;
}
 8006424:	2000      	movs	r0, #0
 8006426:	bd08      	pop	{r3, pc}

08006428 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8006428:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800642a:	1d03      	adds	r3, r0, #4
 800642c:	78c2      	ldrb	r2, [r0, #3]
 800642e:	7881      	ldrb	r1, [r0, #2]
 8006430:	8800      	ldrh	r0, [r0, #0]
 8006432:	f000 f9bf 	bl	80067b4 <aci_att_read_by_group_type_resp_event>
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);

  return status;
}
 8006436:	2000      	movs	r0, #0
 8006438:	bd08      	pop	{r3, pc}
 800643a:	bf00      	nop

0800643c <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800643c:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800643e:	4602      	mov	r2, r0
{
 8006440:	b083      	sub	sp, #12
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8006442:	7983      	ldrb	r3, [r0, #6]
{
 8006444:	4601      	mov	r1, r0
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8006446:	f832 0b07 	ldrh.w	r0, [r2], #7
 800644a:	9200      	str	r2, [sp, #0]
 800644c:	888a      	ldrh	r2, [r1, #4]
 800644e:	8849      	ldrh	r1, [r1, #2]
 8006450:	f000 f9b2 	bl	80067b8 <aci_att_prepare_write_resp_event>
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);

  return status;
}
 8006454:	2000      	movs	r0, #0
 8006456:	b003      	add	sp, #12
 8006458:	f85d fb04 	ldr.w	pc, [sp], #4

0800645c <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800645c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800645e:	8800      	ldrh	r0, [r0, #0]
 8006460:	f000 f9ac 	bl	80067bc <aci_att_exec_write_resp_event>

  return status;
}
 8006464:	2000      	movs	r0, #0
 8006466:	bd08      	pop	{r3, pc}

08006468 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8006468:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
  aci_gatt_indication_event(rp0->Connection_Handle,
 800646a:	1d43      	adds	r3, r0, #5
 800646c:	7902      	ldrb	r2, [r0, #4]
 800646e:	8841      	ldrh	r1, [r0, #2]
 8006470:	8800      	ldrh	r0, [r0, #0]
 8006472:	f000 f9a5 	bl	80067c0 <aci_gatt_indication_event>
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);

  return status;
}
 8006476:	2000      	movs	r0, #0
 8006478:	bd08      	pop	{r3, pc}
 800647a:	bf00      	nop

0800647c <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800647c:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
  aci_gatt_notification_event(rp0->Connection_Handle,
 800647e:	1d43      	adds	r3, r0, #5
 8006480:	7902      	ldrb	r2, [r0, #4]
 8006482:	8841      	ldrh	r1, [r0, #2]
 8006484:	8800      	ldrh	r0, [r0, #0]
 8006486:	f7fa ff09 	bl	800129c <aci_gatt_notification_event>
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);

  return status;
}
 800648a:	2000      	movs	r0, #0
 800648c:	bd08      	pop	{r3, pc}
 800648e:	bf00      	nop

08006490 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8006490:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8006492:	7881      	ldrb	r1, [r0, #2]
 8006494:	8800      	ldrh	r0, [r0, #0]
 8006496:	f000 f995 	bl	80067c4 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
}
 800649a:	2000      	movs	r0, #0
 800649c:	bd08      	pop	{r3, pc}
 800649e:	bf00      	nop

080064a0 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 80064a0:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 80064a2:	7943      	ldrb	r3, [r0, #5]
 80064a4:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 80064a8:	7881      	ldrb	r1, [r0, #2]
 80064aa:	8800      	ldrh	r0, [r0, #0]
 80064ac:	f000 f98c 	bl	80067c8 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
}
 80064b0:	2000      	movs	r0, #0
 80064b2:	bd08      	pop	{r3, pc}

080064b4 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 80064b4:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 80064b6:	1d43      	adds	r3, r0, #5
 80064b8:	7902      	ldrb	r2, [r0, #4]
 80064ba:	8841      	ldrh	r1, [r0, #2]
 80064bc:	8800      	ldrh	r0, [r0, #0]
 80064be:	f000 f985 	bl	80067cc <aci_gatt_disc_read_char_by_uuid_resp_event>
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);

  return status;
}
 80064c2:	2000      	movs	r0, #0
 80064c4:	bd08      	pop	{r3, pc}
 80064c6:	bf00      	nop

080064c8 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 80064c8:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 80064ca:	1d43      	adds	r3, r0, #5
 80064cc:	7902      	ldrb	r2, [r0, #4]
 80064ce:	8841      	ldrh	r1, [r0, #2]
 80064d0:	8800      	ldrh	r0, [r0, #0]
 80064d2:	f000 f97d 	bl	80067d0 <aci_gatt_write_permit_req_event>
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);

  return status;
}
 80064d6:	2000      	movs	r0, #0
 80064d8:	bd08      	pop	{r3, pc}
 80064da:	bf00      	nop

080064dc <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 80064dc:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 80064de:	8882      	ldrh	r2, [r0, #4]
 80064e0:	8841      	ldrh	r1, [r0, #2]
 80064e2:	8800      	ldrh	r0, [r0, #0]
 80064e4:	f000 f976 	bl	80067d4 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
}
 80064e8:	2000      	movs	r0, #0
 80064ea:	bd08      	pop	{r3, pc}

080064ec <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 80064ec:	b530      	push	{r4, r5, lr}
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
  uint8_t size = 3;
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80064ee:	7885      	ldrb	r5, [r0, #2]
{
 80064f0:	b0a1      	sub	sp, #132	; 0x84
 80064f2:	4604      	mov	r4, r0
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80064f4:	466b      	mov	r3, sp
 80064f6:	b12d      	cbz	r5, 8006504 <aci_gatt_read_multi_permit_req_event_process+0x18>
 80064f8:	4618      	mov	r0, r3
 80064fa:	006a      	lsls	r2, r5, #1
 80064fc:	1ce1      	adds	r1, r4, #3
 80064fe:	f003 f8a3 	bl	8009648 <memcpy>
 8006502:	4603      	mov	r3, r0
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
    size += 2;
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8006504:	8820      	ldrh	r0, [r4, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	4629      	mov	r1, r5
 800650a:	f000 f965 	bl	80067d8 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
}
 800650e:	2000      	movs	r0, #0
 8006510:	b021      	add	sp, #132	; 0x84
 8006512:	bd30      	pop	{r4, r5, pc}

08006514 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8006514:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8006516:	8841      	ldrh	r1, [r0, #2]
 8006518:	8800      	ldrh	r0, [r0, #0]
 800651a:	f000 f95f 	bl	80067dc <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
}
 800651e:	2000      	movs	r0, #0
 8006520:	bd08      	pop	{r3, pc}
 8006522:	bf00      	nop

08006524 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8006524:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8006526:	8800      	ldrh	r0, [r0, #0]
 8006528:	f000 f95a 	bl	80067e0 <aci_gatt_server_confirmation_event>

  return status;
}
 800652c:	2000      	movs	r0, #0
 800652e:	bd08      	pop	{r3, pc}

08006530 <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8006530:	b500      	push	{lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8006532:	4602      	mov	r2, r0
{
 8006534:	b083      	sub	sp, #12
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8006536:	7983      	ldrb	r3, [r0, #6]
{
 8006538:	4601      	mov	r1, r0
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800653a:	f832 0b07 	ldrh.w	r0, [r2], #7
 800653e:	9200      	str	r2, [sp, #0]
 8006540:	888a      	ldrh	r2, [r1, #4]
 8006542:	8849      	ldrh	r1, [r1, #2]
 8006544:	f000 f94e 	bl	80067e4 <aci_gatt_prepare_write_permit_req_event>
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);

  return status;
}
 8006548:	2000      	movs	r0, #0
 800654a:	b003      	add	sp, #12
 800654c:	f85d fb04 	ldr.w	pc, [sp], #4

08006550 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8006550:	b530      	push	{r4, r5, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
  hci_le_connection_complete_event(rp0->Status,
 8006552:	7c45      	ldrb	r5, [r0, #17]
 8006554:	f8b0 400f 	ldrh.w	r4, [r0, #15]
 8006558:	f8b0 100d 	ldrh.w	r1, [r0, #13]
 800655c:	f8b0 200b 	ldrh.w	r2, [r0, #11]
{
 8006560:	b087      	sub	sp, #28
  hci_le_connection_complete_event(rp0->Status,
 8006562:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8006566:	e9cd 2101 	strd	r2, r1, [sp, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800656a:	1d43      	adds	r3, r0, #5
  hci_le_connection_complete_event(rp0->Status,
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	7903      	ldrb	r3, [r0, #4]
 8006570:	78c2      	ldrb	r2, [r0, #3]
 8006572:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8006576:	7800      	ldrb	r0, [r0, #0]
 8006578:	f7fa fe1e 	bl	80011b8 <hci_le_connection_complete_event>
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
}
 800657c:	2000      	movs	r0, #0
 800657e:	b007      	add	sp, #28
 8006580:	bd30      	pop	{r4, r5, pc}
 8006582:	bf00      	nop

08006584 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8006584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 8006588:	f890 e000 	ldrb.w	lr, [r0]
{
 800658c:	b09f      	sub	sp, #124	; 0x7c
  for (i = 0; i < rp0->Num_Reports; i++) {
 800658e:	f1be 0f00 	cmp.w	lr, #0
 8006592:	d02c      	beq.n	80065ee <hci_le_advertising_report_event_process+0x6a>
 8006594:	f100 010a 	add.w	r1, r0, #10
 8006598:	f04f 0c0b 	mov.w	ip, #11
 800659c:	fb1c 1c0e 	smlabb	ip, ip, lr, r1
 80065a0:	f10d 0302 	add.w	r3, sp, #2
  uint8_t size = 1;
 80065a4:	2201      	movs	r2, #1
    size += 1;
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
    size += 1;
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
    size += 6;
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 80065a6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
    size += 1;
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 80065aa:	f8c3 100a 	str.w	r1, [r3, #10]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80065ae:	460c      	mov	r4, r1
    size += rp0->Advertising_Report[i].Length_Data;
 80065b0:	f105 0609 	add.w	r6, r5, #9
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80065b4:	f854 7d07 	ldr.w	r7, [r4, #-7]!
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 80065b8:	719d      	strb	r5, [r3, #6]
    size += rp0->Advertising_Report[i].Length_Data;
 80065ba:	4432      	add	r2, r6
 80065bc:	b2d2      	uxtb	r2, r2
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 80065be:	f811 6c09 	ldrb.w	r6, [r1, #-9]
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80065c2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 80065c6:	f811 4c08 	ldrb.w	r4, [r1, #-8]
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 80065ca:	f810 9002 	ldrb.w	r9, [r0, r2]
 80065ce:	f883 900e 	strb.w	r9, [r3, #14]
 80065d2:	310b      	adds	r1, #11
    size += 1;
 80065d4:	3201      	adds	r2, #1
  for (i = 0; i < rp0->Num_Reports; i++) {
 80065d6:	4561      	cmp	r1, ip
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80065d8:	f8a3 8004 	strh.w	r8, [r3, #4]
 80065dc:	601f      	str	r7, [r3, #0]
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 80065de:	f803 6c02 	strb.w	r6, [r3, #-2]
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 80065e2:	f803 4c01 	strb.w	r4, [r3, #-1]
    size += 1;
 80065e6:	b2d2      	uxtb	r2, r2
  for (i = 0; i < rp0->Num_Reports; i++) {
 80065e8:	f103 0314 	add.w	r3, r3, #20
 80065ec:	d1db      	bne.n	80065a6 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80065ee:	4670      	mov	r0, lr
 80065f0:	4669      	mov	r1, sp
 80065f2:	f000 f8a9 	bl	8006748 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
}
 80065f6:	2000      	movs	r0, #0
 80065f8:	b01f      	add	sp, #124	; 0x7c
 80065fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065fe:	bf00      	nop

08006600 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 8006600:	b500      	push	{lr}
 8006602:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
  hci_le_connection_update_complete_event(rp0->Status,
 8006604:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800660e:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8006612:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 8006616:	7800      	ldrb	r0, [r0, #0]
 8006618:	f000 f898 	bl	800674c <hci_le_connection_update_complete_event>
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
}
 800661c:	2000      	movs	r0, #0
 800661e:	b003      	add	sp, #12
 8006620:	f85d fb04 	ldr.w	pc, [sp], #4

08006624 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 8006624:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 8006626:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 800662a:	1cc2      	adds	r2, r0, #3
 800662c:	7800      	ldrb	r0, [r0, #0]
 800662e:	f000 f88f 	bl	8006750 <hci_le_read_remote_used_features_complete_event>
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);

  return status;
}
 8006632:	2000      	movs	r0, #0
 8006634:	bd08      	pop	{r3, pc}
 8006636:	bf00      	nop

08006638 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 8006638:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
                                     rp0->Random_Number,
 800663a:	4601      	mov	r1, r0
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800663c:	8942      	ldrh	r2, [r0, #10]
 800663e:	f831 0b02 	ldrh.w	r0, [r1], #2
 8006642:	f000 f887 	bl	8006754 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
}
 8006646:	2000      	movs	r0, #0
 8006648:	bd08      	pop	{r3, pc}
 800664a:	bf00      	nop

0800664c <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800664c:	b500      	push	{lr}
 800664e:	b083      	sub	sp, #12
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
  hci_le_data_length_change_event(rp0->Connection_Handle,
 8006650:	8903      	ldrh	r3, [r0, #8]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	88c3      	ldrh	r3, [r0, #6]
 8006656:	8882      	ldrh	r2, [r0, #4]
 8006658:	8841      	ldrh	r1, [r0, #2]
 800665a:	8800      	ldrh	r0, [r0, #0]
 800665c:	f000 f87c 	bl	8006758 <hci_le_data_length_change_event>
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
}
 8006660:	2000      	movs	r0, #0
 8006662:	b003      	add	sp, #12
 8006664:	f85d fb04 	ldr.w	pc, [sp], #4

08006668 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 8006668:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
                                                   rp0->Local_P256_Public_Key);
 800666a:	4601      	mov	r1, r0
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800666c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006670:	f000 f874 	bl	800675c <hci_le_read_local_p256_public_key_complete_event>

  return status;
}
 8006674:	2000      	movs	r0, #0
 8006676:	bd08      	pop	{r3, pc}

08006678 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 8006678:	b508      	push	{r3, lr}
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
  hci_le_generate_dhkey_complete_event(rp0->Status,
                                       rp0->DHKey);
 800667a:	4601      	mov	r1, r0
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800667c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006680:	f000 f86e 	bl	8006760 <hci_le_generate_dhkey_complete_event>

  return status;
}
 8006684:	2000      	movs	r0, #0
 8006686:	bd08      	pop	{r3, pc}

08006688 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8006688:	b530      	push	{r4, r5, lr}
 800668a:	b089      	sub	sp, #36	; 0x24
  tBleStatus status = BLE_STATUS_SUCCESS;
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800668c:	7f42      	ldrb	r2, [r0, #29]
 800668e:	f8b0 5019 	ldrh.w	r5, [r0, #25]
 8006692:	f8b0 4017 	ldrh.w	r4, [r0, #23]
 8006696:	f8b0 301b 	ldrh.w	r3, [r0, #27]
 800669a:	9206      	str	r2, [sp, #24]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
                                            rp0->Local_Resolvable_Private_Address,
                                            rp0->Peer_Resolvable_Private_Address,
 800669c:	f100 0111 	add.w	r1, r0, #17
                                            rp0->Local_Resolvable_Private_Address,
 80066a0:	f100 020b 	add.w	r2, r0, #11
  hci_le_enhanced_connection_complete_event(rp0->Status,
 80066a4:	e9cd 4503 	strd	r4, r5, [sp, #12]
 80066a8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80066ac:	9305      	str	r3, [sp, #20]
                                            rp0->Peer_Address,
 80066ae:	1d43      	adds	r3, r0, #5
  hci_le_enhanced_connection_complete_event(rp0->Status,
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	7903      	ldrb	r3, [r0, #4]
 80066b4:	78c2      	ldrb	r2, [r0, #3]
 80066b6:	f8b0 1001 	ldrh.w	r1, [r0, #1]
 80066ba:	7800      	ldrb	r0, [r0, #0]
 80066bc:	f000 f852 	bl	8006764 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
}
 80066c0:	2000      	movs	r0, #0
 80066c2:	b009      	add	sp, #36	; 0x24
 80066c4:	bd30      	pop	{r4, r5, pc}
 80066c6:	bf00      	nop

080066c8 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 80066c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066cc:	4603      	mov	r3, r0
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
  uint8_t size = 1;
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80066ce:	7800      	ldrb	r0, [r0, #0]
{
 80066d0:	b0a1      	sub	sp, #132	; 0x84
  for (i = 0; i < rp0->Num_Reports; i++) {
 80066d2:	b328      	cbz	r0, 8006720 <hci_le_direct_advertising_report_event_process+0x58>
 80066d4:	3303      	adds	r3, #3
 80066d6:	eb03 1900 	add.w	r9, r3, r0, lsl #4
 80066da:	f10d 0209 	add.w	r2, sp, #9
    size += 1;
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
    size += 6;
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
    size += 1;
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80066de:	4619      	mov	r1, r3
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80066e0:	f813 cc02 	ldrb.w	ip, [r3, #-2]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80066e4:	f851 ef07 	ldr.w	lr, [r1, #7]!
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80066e8:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 80066ec:	681e      	ldr	r6, [r3, #0]
 80066ee:	889d      	ldrh	r5, [r3, #4]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 80066f0:	799c      	ldrb	r4, [r3, #6]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80066f2:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    size += 6;
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 80066f6:	7b59      	ldrb	r1, [r3, #13]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 80066f8:	f8a2 8004 	strh.w	r8, [r2, #4]
 80066fc:	3310      	adds	r3, #16
  for (i = 0; i < rp0->Num_Reports; i++) {
 80066fe:	454b      	cmp	r3, r9
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 8006700:	f8c2 e000 	str.w	lr, [r2]
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 8006704:	f802 cc09 	strb.w	ip, [r2, #-9]
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 8006708:	f802 7c08 	strb.w	r7, [r2, #-8]
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800670c:	f842 6c07 	str.w	r6, [r2, #-7]
 8006710:	f822 5c03 	strh.w	r5, [r2, #-3]
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8006714:	f802 4c01 	strb.w	r4, [r2, #-1]
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 8006718:	7191      	strb	r1, [r2, #6]
  for (i = 0; i < rp0->Num_Reports; i++) {
 800671a:	f102 0210 	add.w	r2, r2, #16
 800671e:	d1de      	bne.n	80066de <hci_le_direct_advertising_report_event_process+0x16>
    size += 1;
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 8006720:	4669      	mov	r1, sp
 8006722:	f000 f821 	bl	8006768 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
}
 8006726:	2000      	movs	r0, #0
 8006728:	b021      	add	sp, #132	; 0x84
 800672a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800672e:	bf00      	nop

08006730 <hci_encryption_change_event>:
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop

08006734 <hci_read_remote_version_information_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop

08006738 <hci_hardware_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop

0800673c <hci_number_of_completed_packets_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <hci_data_buffer_overflow_event>:
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop

08006744 <hci_encryption_key_refresh_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop

08006748 <hci_le_advertising_report_event>:
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop

0800674c <hci_le_connection_update_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop

08006750 <hci_le_read_remote_used_features_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop

08006754 <hci_le_long_term_key_request_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop

08006758 <hci_le_data_length_change_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop

0800675c <hci_le_read_local_p256_public_key_complete_event>:
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop

08006760 <hci_le_generate_dhkey_complete_event>:
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop

08006764 <hci_le_enhanced_connection_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop

08006768 <hci_le_direct_advertising_report_event>:
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop

0800676c <aci_gap_limited_discoverable_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop

08006770 <aci_gap_pairing_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop

08006774 <aci_gap_pass_key_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop

08006778 <aci_gap_authorization_req_event>:
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop

0800677c <aci_gap_slave_security_initiated_event>:
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop

08006780 <aci_gap_bond_lost_event>:
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop

08006784 <aci_gap_proc_complete_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop

08006788 <aci_gap_addr_not_resolved_event>:
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop

0800678c <aci_gap_numeric_comparison_value_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop

08006790 <aci_gap_keypress_notification_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop

08006794 <aci_gatt_proc_timeout_event>:
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop

08006798 <aci_att_exchange_mtu_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop

0800679c <aci_att_find_info_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop

080067a0 <aci_att_find_by_type_value_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop

080067a4 <aci_att_read_by_type_resp_event>:
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop

080067a8 <aci_att_read_resp_event>:
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop

080067ac <aci_att_read_blob_resp_event>:
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop

080067b0 <aci_att_read_multiple_resp_event>:
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <aci_att_read_by_group_type_resp_event>:
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop

080067b8 <aci_att_prepare_write_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop

080067bc <aci_att_exec_write_resp_event>:
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <aci_gatt_indication_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop

080067c4 <aci_gatt_proc_complete_event>:
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop

080067c8 <aci_gatt_error_resp_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop

080067cc <aci_gatt_disc_read_char_by_uuid_resp_event>:
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop

080067d0 <aci_gatt_write_permit_req_event>:
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop

080067d4 <aci_gatt_read_permit_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop

080067d8 <aci_gatt_read_multi_permit_req_event>:
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop

080067dc <aci_gatt_tx_pool_available_event>:
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop

080067e0 <aci_gatt_server_confirmation_event>:
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop

080067e4 <aci_gatt_prepare_write_permit_req_event>:
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop

080067e8 <aci_l2cap_connection_update_resp_event>:
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop

080067ec <aci_l2cap_proc_timeout_event>:
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop

080067f0 <aci_l2cap_connection_update_req_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop

080067f4 <aci_l2cap_command_reject_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop

080067f8 <aci_blue_initialized_event>:
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop

080067fc <aci_blue_events_lost_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop

08006800 <aci_blue_crash_info_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop

08006804 <aci_hal_end_of_radio_activity_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop

08006808 <aci_hal_scan_req_report_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop

0800680c <aci_hal_fw_error_event>:
{
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop

08006810 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8006810:	b510      	push	{r4, lr}
 8006812:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8006814:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x03;
  rq.ocf = 0x003;
  rq.rparam = &status;
 8006816:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 800681a:	2301      	movs	r3, #1
  rq.ogf = 0x03;
 800681c:	f04f 1403 	mov.w	r4, #196611	; 0x30003
  if (hci_send_req(&rq, FALSE) < 0)
 8006820:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006822:	e9cd 1103 	strd	r1, r1, [sp, #12]
  rq.rlen = 1;
 8006826:	e9cd 2306 	strd	r2, r3, [sp, #24]
  tBleStatus status = 0;
 800682a:	f88d 1007 	strb.w	r1, [sp, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800682e:	9105      	str	r1, [sp, #20]
  rq.ogf = 0x03;
 8006830:	9402      	str	r4, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8006832:	f000 faff 	bl	8006e34 <hci_send_req>
 8006836:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8006838:	bfac      	ite	ge
 800683a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800683e:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8006840:	b008      	add	sp, #32
 8006842:	bd10      	pop	{r4, pc}

08006844 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 8006844:	b510      	push	{r4, lr}
 8006846:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8006848:	f10d 0403 	add.w	r4, sp, #3
 800684c:	2200      	movs	r2, #0
  uint8_t index_input = 0;
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800684e:	ab07      	add	r3, sp, #28
  tBleStatus status = 0;
 8006850:	7022      	strb	r2, [r4, #0]
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 8006852:	7018      	strb	r0, [r3, #0]
  index_input += 1;
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 8006854:	b1d1      	cbz	r1, 800688c <hci_le_set_scan_response_data+0x48>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8006856:	680a      	ldr	r2, [r1, #0]
 8006858:	6848      	ldr	r0, [r1, #4]
 800685a:	f8cd 201d 	str.w	r2, [sp, #29]
 800685e:	f8cd 0021 	str.w	r0, [sp, #33]	; 0x21
 8006862:	688a      	ldr	r2, [r1, #8]
 8006864:	68c8      	ldr	r0, [r1, #12]
 8006866:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
 800686a:	f8cd 0029 	str.w	r0, [sp, #41]	; 0x29
 800686e:	690a      	ldr	r2, [r1, #16]
 8006870:	6948      	ldr	r0, [r1, #20]
 8006872:	f8cd 202d 	str.w	r2, [sp, #45]	; 0x2d
 8006876:	f8cd 0031 	str.w	r0, [sp, #49]	; 0x31
 800687a:	698a      	ldr	r2, [r1, #24]
 800687c:	8b88      	ldrh	r0, [r1, #28]
 800687e:	7f89      	ldrb	r1, [r1, #30]
 8006880:	f8cd 2035 	str.w	r2, [sp, #53]	; 0x35
 8006884:	f8ad 0039 	strh.w	r0, [sp, #57]	; 0x39
 8006888:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
  }
  index_input += 31;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 800688c:	4809      	ldr	r0, [pc, #36]	; (80068b4 <hci_le_set_scan_response_data+0x70>)
  rq.ocf = 0x009;
  rq.cparam = cmd_buffer;
 800688e:	9303      	str	r3, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006890:	2100      	movs	r1, #0
  rq.clen = index_input;
 8006892:	2220      	movs	r2, #32
  rq.ogf = 0x08;
 8006894:	9001      	str	r0, [sp, #4]
  rq.rparam = &status;
  rq.rlen = 1;
 8006896:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8006898:	a801      	add	r0, sp, #4
  rq.rparam = &status;
 800689a:	9405      	str	r4, [sp, #20]
  rq.clen = index_input;
 800689c:	9204      	str	r2, [sp, #16]
  rq.rlen = 1;
 800689e:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80068a0:	9102      	str	r1, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 80068a2:	f000 fac7 	bl	8006e34 <hci_send_req>
 80068a6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 80068a8:	bfac      	ite	ge
 80068aa:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 80068ac:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80068ae:	b048      	add	sp, #288	; 0x120
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	bf00      	nop
 80068b4:	00090008 	.word	0x00090008

080068b8 <hci_le_rand>:
  }
  BLUENRG_memcpy((void *) Encrypted_Data, (const void *) resp.Encrypted_Data, 16);
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_rand(uint8_t Random_Number[8])
{
 80068b8:	b510      	push	{r4, lr}
 80068ba:	b08a      	sub	sp, #40	; 0x28
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80068bc:	ab01      	add	r3, sp, #4
 80068be:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x08;
 80068c0:	4a0f      	ldr	r2, [pc, #60]	; (8006900 <hci_le_rand+0x48>)
  rq.ocf = 0x018;
  rq.rparam = &resp;
 80068c2:	9308      	str	r3, [sp, #32]
{
 80068c4:	4604      	mov	r4, r0
  rq.rlen = sizeof(resp);
 80068c6:	2309      	movs	r3, #9
  if (hci_send_req(&rq, FALSE) < 0)
 80068c8:	a804      	add	r0, sp, #16
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80068ca:	e9cd 1101 	strd	r1, r1, [sp, #4]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80068ce:	e9cd 1105 	strd	r1, r1, [sp, #20]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80068d2:	f88d 100c 	strb.w	r1, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80068d6:	9107      	str	r1, [sp, #28]
  rq.ogf = 0x08;
 80068d8:	9204      	str	r2, [sp, #16]
  rq.rlen = sizeof(resp);
 80068da:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80068dc:	f000 faaa 	bl	8006e34 <hci_send_req>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	db0a      	blt.n	80068fa <hci_le_rand+0x42>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 80068e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80068e8:	b928      	cbnz	r0, 80068f6 <hci_le_rand+0x3e>
    return resp.Status;
  }
  BLUENRG_memcpy((void *) Random_Number, (const void *) resp.Random_Number, 8);
 80068ea:	f8dd 2005 	ldr.w	r2, [sp, #5]
 80068ee:	f8dd 3009 	ldr.w	r3, [sp, #9]
 80068f2:	6022      	str	r2, [r4, #0]
 80068f4:	6063      	str	r3, [r4, #4]
  return BLE_STATUS_SUCCESS;
}
 80068f6:	b00a      	add	sp, #40	; 0x28
 80068f8:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 80068fa:	20ff      	movs	r0, #255	; 0xff
}
 80068fc:	b00a      	add	sp, #40	; 0x28
 80068fe:	bd10      	pop	{r4, pc}
 8006900:	00180008 	.word	0x00180008

08006904 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8006904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006908:	b0cb      	sub	sp, #300	; 0x12c
 800690a:	4696      	mov	lr, r2
 800690c:	f89d 5154 	ldrb.w	r5, [sp, #340]	; 0x154
 8006910:	f89d 615c 	ldrb.w	r6, [sp, #348]	; 0x15c
 8006914:	f8bd 4168 	ldrh.w	r4, [sp, #360]	; 0x168
 8006918:	f89d c150 	ldrb.w	ip, [sp, #336]	; 0x150
 800691c:	9401      	str	r4, [sp, #4]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
  tBleStatus status = 0;
 800691e:	f04f 0800 	mov.w	r8, #0
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006922:	ac09      	add	r4, sp, #36	; 0x24
 8006924:	f105 0a08 	add.w	sl, r5, #8
  uint8_t index_input = 0;
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8006928:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  index_input += 1;
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800692c:	f8ad 1025 	strh.w	r1, [sp, #37]	; 0x25
  index_input += 1;
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8006930:	462a      	mov	r2, r5
 8006932:	9956      	ldr	r1, [sp, #344]	; 0x158
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8006934:	f8ad e027 	strh.w	lr, [sp, #39]	; 0x27
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8006938:	a80b      	add	r0, sp, #44	; 0x2c
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800693a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800693e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
{
 8006942:	f8bd b164 	ldrh.w	fp, [sp, #356]	; 0x164
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8006946:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800694a:	f106 0709 	add.w	r7, r6, #9
  tBleStatus status = 0;
 800694e:	f88d 800b 	strb.w	r8, [sp, #11]
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8006952:	f002 fe79 	bl	8009648 <memcpy>
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006956:	eb04 000a 	add.w	r0, r4, sl
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800695a:	442f      	add	r7, r5
    index_input += Local_Name_Length*sizeof(uint8_t);
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
    }
    index_input += 1;
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800695c:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800695e:	f804 600a 	strb.w	r6, [r4, sl]
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8006962:	4632      	mov	r2, r6
 8006964:	3001      	adds	r0, #1
 8006966:	f002 fe6f 	bl	8009648 <memcpy>
    }
    index_input += 2;
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
    }
    index_input += 2;
 800696a:	360d      	adds	r6, #13
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800696c:	19e2      	adds	r2, r4, r7
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800696e:	f824 b007 	strh.w	fp, [r4, r7]
    index_input += 2;
 8006972:	4435      	add	r5, r6
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8006974:	9f01      	ldr	r7, [sp, #4]
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8006976:	4e0c      	ldr	r6, [pc, #48]	; (80069a8 <aci_gap_set_discoverable+0xa4>)
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8006978:	8057      	strh	r7, [r2, #2]
  tBleStatus status = 0;
 800697a:	f10d 090b 	add.w	r9, sp, #11
  rq.ocf = 0x083;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 800697e:	2301      	movs	r3, #1
  rq.clen = index_input;
 8006980:	b2ed      	uxtb	r5, r5
  if (hci_send_req(&rq, FALSE) < 0)
 8006982:	4641      	mov	r1, r8
 8006984:	a803      	add	r0, sp, #12
  rq.cparam = cmd_buffer;
 8006986:	e9cd 4505 	strd	r4, r5, [sp, #20]
  rq.ogf = 0x3f;
 800698a:	e9cd 6803 	strd	r6, r8, [sp, #12]
  rq.rparam = &status;
 800698e:	f8cd 901c 	str.w	r9, [sp, #28]
  rq.rlen = 1;
 8006992:	9308      	str	r3, [sp, #32]
  if (hci_send_req(&rq, FALSE) < 0)
 8006994:	f000 fa4e 	bl	8006e34 <hci_send_req>
 8006998:	4540      	cmp	r0, r8
    return BLE_STATUS_TIMEOUT;
  if (status) {
 800699a:	bfac      	ite	ge
 800699c:	f899 0000 	ldrbge.w	r0, [r9]
    return BLE_STATUS_TIMEOUT;
 80069a0:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 80069a2:	b04b      	add	sp, #300	; 0x12c
 80069a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a8:	0083003f 	.word	0x0083003f

080069ac <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	b0ca      	sub	sp, #296	; 0x128
 80069b0:	461e      	mov	r6, r3
  cp0->privacy_enabled = htob(privacy_enabled, 1);
  index_input += 1;
  cp0->device_name_char_len = htob(device_name_char_len, 1);
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 80069b2:	4b18      	ldr	r3, [pc, #96]	; (8006a14 <aci_gap_init+0x68>)
 80069b4:	9303      	str	r3, [sp, #12]
  rq.ocf = 0x08a;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
 80069b6:	2303      	movs	r3, #3
  cp0->Role = htob(Role, 1);
 80069b8:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 80069bc:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
  rq.clen = index_input;
 80069c0:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80069c2:	2100      	movs	r1, #0
  rq.rparam = &resp;
  rq.rlen = sizeof(resp);
 80069c4:	2307      	movs	r3, #7
  cp0->Role = htob(Role, 1);
 80069c6:	ad09      	add	r5, sp, #36	; 0x24
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80069c8:	ac01      	add	r4, sp, #4
  if (hci_send_req(&rq, FALSE) < 0)
 80069ca:	a803      	add	r0, sp, #12
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80069cc:	9101      	str	r1, [sp, #4]
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 80069ce:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
  rq.cparam = cmd_buffer;
 80069d2:	9505      	str	r5, [sp, #20]
  rq.rlen = sizeof(resp);
 80069d4:	9308      	str	r3, [sp, #32]
  rq.rparam = &resp;
 80069d6:	9407      	str	r4, [sp, #28]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80069d8:	9104      	str	r1, [sp, #16]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80069da:	f8cd 1007 	str.w	r1, [sp, #7]
  if (hci_send_req(&rq, FALSE) < 0)
 80069de:	f000 fa29 	bl	8006e34 <hci_send_req>
 80069e2:	2800      	cmp	r0, #0
 80069e4:	db12      	blt.n	8006a0c <aci_gap_init+0x60>
    return BLE_STATUS_TIMEOUT;
  if (resp.Status) {
 80069e6:	7820      	ldrb	r0, [r4, #0]
 80069e8:	b970      	cbnz	r0, 8006a08 <aci_gap_init+0x5c>
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80069ea:	6821      	ldr	r1, [r4, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80069ec:	78e2      	ldrb	r2, [r4, #3]
 80069ee:	7925      	ldrb	r5, [r4, #4]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80069f0:	6863      	ldr	r3, [r4, #4]
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80069f2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80069f6:	8031      	strh	r1, [r6, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80069f8:	994e      	ldr	r1, [sp, #312]	; 0x138
 80069fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80069fe:	800a      	strh	r2, [r1, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8006a00:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
 8006a02:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8006a06:	8013      	strh	r3, [r2, #0]
  return BLE_STATUS_SUCCESS;
}
 8006a08:	b04a      	add	sp, #296	; 0x128
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8006a0c:	20ff      	movs	r0, #255	; 0xff
}
 8006a0e:	b04a      	add	sp, #296	; 0x128
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	bf00      	nop
 8006a14:	008a003f 	.word	0x008a003f

08006a18 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8006a18:	b510      	push	{r4, lr}
 8006a1a:	b088      	sub	sp, #32
  struct hci_request rq;
  tBleStatus status = 0;
 8006a1c:	2100      	movs	r1, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
  rq.ocf = 0x101;
  rq.rparam = &status;
 8006a1e:	f10d 0207 	add.w	r2, sp, #7
  rq.rlen = 1;
 8006a22:	2301      	movs	r3, #1
  rq.ogf = 0x3f;
 8006a24:	4c09      	ldr	r4, [pc, #36]	; (8006a4c <aci_gatt_init+0x34>)
  tBleStatus status = 0;
 8006a26:	f88d 1007 	strb.w	r1, [sp, #7]
  if (hci_send_req(&rq, FALSE) < 0)
 8006a2a:	a802      	add	r0, sp, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006a2c:	e9cd 1103 	strd	r1, r1, [sp, #12]
  rq.rlen = 1;
 8006a30:	e9cd 2306 	strd	r2, r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006a34:	9105      	str	r1, [sp, #20]
  rq.ogf = 0x3f;
 8006a36:	9402      	str	r4, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8006a38:	f000 f9fc 	bl	8006e34 <hci_send_req>
 8006a3c:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8006a3e:	bfac      	ite	ge
 8006a40:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8006a44:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8006a46:	b008      	add	sp, #32
 8006a48:	bd10      	pop	{r4, pc}
 8006a4a:	bf00      	nop
 8006a4c:	0101003f 	.word	0x0101003f

08006a50 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8006a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006a54:	2801      	cmp	r0, #1
{
 8006a56:	b0c9      	sub	sp, #292	; 0x124
 8006a58:	4616      	mov	r6, r2
 8006a5a:	461c      	mov	r4, r3
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006a5c:	d031      	beq.n	8006ac2 <aci_gatt_add_service+0x72>
 8006a5e:	2802      	cmp	r0, #2
 8006a60:	d003      	beq.n	8006a6a <aci_gatt_add_service+0x1a>
 8006a62:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 8006a64:	b049      	add	sp, #292	; 0x124
 8006a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006a6a:	466d      	mov	r5, sp
 8006a6c:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8006a6e:	f10d 081c 	add.w	r8, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006a72:	802b      	strh	r3, [r5, #0]
 8006a74:	70ab      	strb	r3, [r5, #2]
      case 2: size = 16; break;
 8006a76:	f04f 0913 	mov.w	r9, #19
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	f10d 072d 	add.w	r7, sp, #45	; 0x2d
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8006a80:	f888 0000 	strb.w	r0, [r8]
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8006a84:	f10d 001d 	add.w	r0, sp, #29
 8006a88:	f002 fdde 	bl	8009648 <memcpy>
  rq.ogf = 0x3f;
 8006a8c:	4a16      	ldr	r2, [pc, #88]	; (8006ae8 <aci_gatt_add_service+0x98>)
      cp1->Service_Type = htob(Service_Type, 1);
 8006a8e:	703e      	strb	r6, [r7, #0]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006a90:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 8006a92:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8006a94:	a801      	add	r0, sp, #4
  rq.clen = index_input;
 8006a96:	e9cd 8903 	strd	r8, r9, [sp, #12]
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8006a9a:	707c      	strb	r4, [r7, #1]
  rq.rparam = &resp;
 8006a9c:	9505      	str	r5, [sp, #20]
  rq.ogf = 0x3f;
 8006a9e:	9201      	str	r2, [sp, #4]
  rq.rlen = sizeof(resp);
 8006aa0:	9306      	str	r3, [sp, #24]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006aa2:	9102      	str	r1, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8006aa4:	f000 f9c6 	bl	8006e34 <hci_send_req>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	db18      	blt.n	8006ade <aci_gatt_add_service+0x8e>
  if (resp.Status) {
 8006aac:	7828      	ldrb	r0, [r5, #0]
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d1d8      	bne.n	8006a64 <aci_gatt_add_service+0x14>
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8006ab2:	682b      	ldr	r3, [r5, #0]
 8006ab4:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8006ab6:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8006aba:	8013      	strh	r3, [r2, #0]
}
 8006abc:	b049      	add	sp, #292	; 0x124
 8006abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006ac2:	466d      	mov	r5, sp
 8006ac4:	2300      	movs	r3, #0
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8006ac6:	f10d 081c 	add.w	r8, sp, #28
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006aca:	802b      	strh	r3, [r5, #0]
 8006acc:	70ab      	strb	r3, [r5, #2]
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8006ace:	f04f 0905 	mov.w	r9, #5
 8006ad2:	2202      	movs	r2, #2
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006ad4:	f10d 071f 	add.w	r7, sp, #31
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8006ad8:	f888 0000 	strb.w	r0, [r8]
    switch (Service_UUID_Type) {
 8006adc:	e7d2      	b.n	8006a84 <aci_gatt_add_service+0x34>
    return BLE_STATUS_TIMEOUT;
 8006ade:	20ff      	movs	r0, #255	; 0xff
}
 8006ae0:	b049      	add	sp, #292	; 0x124
 8006ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ae6:	bf00      	nop
 8006ae8:	0102003f 	.word	0x0102003f

08006aec <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8006aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af0:	b0cb      	sub	sp, #300	; 0x12c
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006af2:	2901      	cmp	r1, #1
{
 8006af4:	461c      	mov	r4, r3
 8006af6:	f89d 8150 	ldrb.w	r8, [sp, #336]	; 0x150
 8006afa:	f89d 9154 	ldrb.w	r9, [sp, #340]	; 0x154
 8006afe:	f89d a158 	ldrb.w	sl, [sp, #344]	; 0x158
 8006b02:	f89d b15c 	ldrb.w	fp, [sp, #348]	; 0x15c
 8006b06:	f89d 3160 	ldrb.w	r3, [sp, #352]	; 0x160
 8006b0a:	4694      	mov	ip, r2
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006b0c:	d041      	beq.n	8006b92 <aci_gatt_add_char+0xa6>
 8006b0e:	2902      	cmp	r1, #2
 8006b10:	d003      	beq.n	8006b1a <aci_gatt_add_char+0x2e>
 8006b12:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 8006b14:	b04b      	add	sp, #300	; 0x12c
 8006b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006b1a:	ad02      	add	r5, sp, #8
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	802a      	strh	r2, [r5, #0]
 8006b20:	70aa      	strb	r2, [r5, #2]
      case 2: size = 16; break;
 8006b22:	221a      	movs	r2, #26
  cp0->Service_Handle = htob(Service_Handle, 2);
 8006b24:	af09      	add	r7, sp, #36	; 0x24
      case 2: size = 16; break;
 8006b26:	9200      	str	r2, [sp, #0]
 8006b28:	f10d 0637 	add.w	r6, sp, #55	; 0x37
 8006b2c:	2210      	movs	r2, #16
  cp0->Service_Handle = htob(Service_Handle, 2);
 8006b2e:	8038      	strh	r0, [r7, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8006b30:	70b9      	strb	r1, [r7, #2]
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 8006b32:	4661      	mov	r1, ip
 8006b34:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	f002 fd85 	bl	8009648 <memcpy>
      cp1->Char_Properties = htob(Char_Properties, 1);
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f368 0207 	bfi	r2, r8, #0, #8
      cp1->Is_Variable = htob(Is_Variable, 1);
 8006b44:	9b01      	ldr	r3, [sp, #4]
 8006b46:	71b3      	strb	r3, [r6, #6]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8006b48:	f369 220f 	bfi	r2, r9, #8, #8
  rq.clen = index_input;
 8006b4c:	9b00      	ldr	r3, [sp, #0]
  rq.ogf = 0x3f;
 8006b4e:	f8df c064 	ldr.w	ip, [pc, #100]	; 8006bb4 <aci_gatt_add_char+0xc8>
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8006b52:	8034      	strh	r4, [r6, #0]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8006b54:	f36a 4217 	bfi	r2, sl, #16, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006b58:	2100      	movs	r1, #0
      cp1->Char_Properties = htob(Char_Properties, 1);
 8006b5a:	f36b 621f 	bfi	r2, fp, #24, #8
  rq.rlen = sizeof(resp);
 8006b5e:	2403      	movs	r4, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8006b60:	a803      	add	r0, sp, #12
  rq.rparam = &resp;
 8006b62:	e9cd 3506 	strd	r3, r5, [sp, #24]
      cp1->Char_Properties = htob(Char_Properties, 1);
 8006b66:	f8c6 2002 	str.w	r2, [r6, #2]
  rq.cparam = cmd_buffer;
 8006b6a:	9705      	str	r7, [sp, #20]
  rq.ogf = 0x3f;
 8006b6c:	f8cd c00c 	str.w	ip, [sp, #12]
  rq.rlen = sizeof(resp);
 8006b70:	9408      	str	r4, [sp, #32]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006b72:	9104      	str	r1, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 8006b74:	f000 f95e 	bl	8006e34 <hci_send_req>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	db17      	blt.n	8006bac <aci_gatt_add_char+0xc0>
  if (resp.Status) {
 8006b7c:	7828      	ldrb	r0, [r5, #0]
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d1c8      	bne.n	8006b14 <aci_gatt_add_char+0x28>
  *Char_Handle = btoh(resp.Char_Handle, 2);
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	9a59      	ldr	r2, [sp, #356]	; 0x164
 8006b86:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8006b8a:	8013      	strh	r3, [r2, #0]
}
 8006b8c:	b04b      	add	sp, #300	; 0x12c
 8006b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006b92:	ad02      	add	r5, sp, #8
 8006b94:	2200      	movs	r2, #0
 8006b96:	802a      	strh	r2, [r5, #0]
 8006b98:	70aa      	strb	r2, [r5, #2]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8006b9a:	220c      	movs	r2, #12
  cp0->Service_Handle = htob(Service_Handle, 2);
 8006b9c:	af09      	add	r7, sp, #36	; 0x24
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8006b9e:	9200      	str	r2, [sp, #0]
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006ba0:	f10d 0629 	add.w	r6, sp, #41	; 0x29
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8006ba4:	2202      	movs	r2, #2
  cp0->Service_Handle = htob(Service_Handle, 2);
 8006ba6:	8038      	strh	r0, [r7, #0]
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8006ba8:	70b9      	strb	r1, [r7, #2]
    switch (Char_UUID_Type) {
 8006baa:	e7c2      	b.n	8006b32 <aci_gatt_add_char+0x46>
    return BLE_STATUS_TIMEOUT;
 8006bac:	20ff      	movs	r0, #255	; 0xff
}
 8006bae:	b04b      	add	sp, #300	; 0x12c
 8006bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb4:	0104003f 	.word	0x0104003f

08006bb8 <aci_gatt_add_char_desc>:
                                  uint8_t Access_Permissions,
                                  uint8_t GATT_Evt_Mask,
                                  uint8_t Enc_Key_Size,
                                  uint8_t Is_Variable,
                                  uint16_t *Char_Desc_Handle)
{
 8006bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bbc:	b0cd      	sub	sp, #308	; 0x134
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_desc_cp0 *cp0 = (aci_gatt_add_char_desc_cp0*)(cmd_buffer);
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8006bbe:	2a01      	cmp	r2, #1
{
 8006bc0:	f89d 5164 	ldrb.w	r5, [sp, #356]	; 0x164
 8006bc4:	9500      	str	r5, [sp, #0]
 8006bc6:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 8006bca:	9501      	str	r5, [sp, #4]
 8006bcc:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 8006bd0:	f89d 9158 	ldrb.w	r9, [sp, #344]	; 0x158
 8006bd4:	f89d 415c 	ldrb.w	r4, [sp, #348]	; 0x15c
 8006bd8:	f89d a170 	ldrb.w	sl, [sp, #368]	; 0x170
 8006bdc:	f89d b174 	ldrb.w	fp, [sp, #372]	; 0x174
 8006be0:	9502      	str	r5, [sp, #8]
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8006be2:	d056      	beq.n	8006c92 <aci_gatt_add_char_desc+0xda>
 8006be4:	2a02      	cmp	r2, #2
 8006be6:	d003      	beq.n	8006bf0 <aci_gatt_add_char_desc+0x38>
 8006be8:	2047      	movs	r0, #71	; 0x47
  if (resp.Status) {
    return resp.Status;
  }
  *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
  return BLE_STATUS_SUCCESS;
}
 8006bea:	b04d      	add	sp, #308	; 0x134
 8006bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006bf0:	af04      	add	r7, sp, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8006bf2:	ae0b      	add	r6, sp, #44	; 0x2c
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006bf4:	f04f 0c00 	mov.w	ip, #0
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8006bf8:	f104 0517 	add.w	r5, r4, #23
  cp0->Service_Handle = htob(Service_Handle, 2);
 8006bfc:	8030      	strh	r0, [r6, #0]
      case 2: size = 16; break;
 8006bfe:	2010      	movs	r0, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8006c00:	4435      	add	r5, r6
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006c02:	f8a7 c000 	strh.w	ip, [r7]
 8006c06:	f887 c002 	strb.w	ip, [r7, #2]
      case 2: size = 16; break;
 8006c0a:	9003      	str	r0, [sp, #12]
 8006c0c:	f10d 0841 	add.w	r8, sp, #65	; 0x41
  cp0->Char_Handle = htob(Char_Handle, 2);
 8006c10:	8071      	strh	r1, [r6, #2]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 8006c12:	7132      	strb	r2, [r6, #4]
    BLUENRG_memcpy((void *) &cp0->Char_Desc_Uuid, (const void *) Char_Desc_Uuid, size);
 8006c14:	4619      	mov	r1, r3
 8006c16:	4602      	mov	r2, r0
 8006c18:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 8006c1c:	f002 fd14 	bl	8009648 <memcpy>
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8006c20:	4622      	mov	r2, r4
 8006c22:	9958      	ldr	r1, [sp, #352]	; 0x160
      cp1->Char_Desc_Value_Length = htob(Char_Desc_Value_Length, 1);
 8006c24:	f888 4001 	strb.w	r4, [r8, #1]
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8006c28:	f108 0002 	add.w	r0, r8, #2
      cp1->Char_Desc_Value_Max_Len = htob(Char_Desc_Value_Max_Len, 1);
 8006c2c:	f888 9000 	strb.w	r9, [r8]
    BLUENRG_memcpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length*sizeof(uint8_t));
 8006c30:	f002 fd0a 	bl	8009648 <memcpy>
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8006c34:	9a00      	ldr	r2, [sp, #0]
  rq.ogf = 0x3f;
 8006c36:	f8df c088 	ldr.w	ip, [pc, #136]	; 8006cc0 <aci_gatt_add_char_desc+0x108>
      cp2->Is_Variable = htob(Is_Variable, 1);
 8006c3a:	f885 b004 	strb.w	fp, [r5, #4]
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f362 0307 	bfi	r3, r2, #0, #8
 8006c44:	9a01      	ldr	r2, [sp, #4]
  rq.rparam = &resp;
 8006c46:	9709      	str	r7, [sp, #36]	; 0x24
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8006c48:	f362 230f 	bfi	r3, r2, #8, #8
    index_input += 1;
 8006c4c:	9a03      	ldr	r2, [sp, #12]
  rq.ogf = 0x3f;
 8006c4e:	f8cd c014 	str.w	ip, [sp, #20]
    index_input += 1;
 8006c52:	340c      	adds	r4, #12
 8006c54:	4422      	add	r2, r4
 8006c56:	4614      	mov	r4, r2
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8006c58:	9a02      	ldr	r2, [sp, #8]
 8006c5a:	f362 4317 	bfi	r3, r2, #16, #8
 8006c5e:	f36a 631f 	bfi	r3, sl, #24, #8
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006c62:	2100      	movs	r1, #0
  rq.rlen = sizeof(resp);
 8006c64:	2203      	movs	r2, #3
  rq.clen = index_input;
 8006c66:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 8006c68:	a805      	add	r0, sp, #20
      cp2->Security_Permissions = htob(Security_Permissions, 1);
 8006c6a:	602b      	str	r3, [r5, #0]
  rq.cparam = cmd_buffer;
 8006c6c:	e9cd 6407 	strd	r6, r4, [sp, #28]
  rq.rlen = sizeof(resp);
 8006c70:	920a      	str	r2, [sp, #40]	; 0x28
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006c72:	9106      	str	r1, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8006c74:	f000 f8de 	bl	8006e34 <hci_send_req>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	db1d      	blt.n	8006cb8 <aci_gatt_add_char_desc+0x100>
  if (resp.Status) {
 8006c7c:	7838      	ldrb	r0, [r7, #0]
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d1b3      	bne.n	8006bea <aci_gatt_add_char_desc+0x32>
  *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	9a5e      	ldr	r2, [sp, #376]	; 0x178
 8006c86:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8006c8a:	8013      	strh	r3, [r2, #0]
}
 8006c8c:	b04d      	add	sp, #308	; 0x134
 8006c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006c92:	af04      	add	r7, sp, #16
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8006c94:	ae0b      	add	r6, sp, #44	; 0x2c
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006c96:	f04f 0c00 	mov.w	ip, #0
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8006c9a:	f104 0509 	add.w	r5, r4, #9
  cp0->Service_Handle = htob(Service_Handle, 2);
 8006c9e:	8030      	strh	r0, [r6, #0]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 8006ca0:	2002      	movs	r0, #2
  aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
 8006ca2:	4435      	add	r5, r6
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006ca4:	f8a7 c000 	strh.w	ip, [r7]
 8006ca8:	f887 c002 	strb.w	ip, [r7, #2]
      case 1: size = 2; break;
 8006cac:	9003      	str	r0, [sp, #12]
  aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
 8006cae:	f10d 0833 	add.w	r8, sp, #51	; 0x33
  cp0->Char_Handle = htob(Char_Handle, 2);
 8006cb2:	8071      	strh	r1, [r6, #2]
  cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
 8006cb4:	7132      	strb	r2, [r6, #4]
 8006cb6:	e7ad      	b.n	8006c14 <aci_gatt_add_char_desc+0x5c>
    return BLE_STATUS_TIMEOUT;
 8006cb8:	20ff      	movs	r0, #255	; 0xff
}
 8006cba:	b04d      	add	sp, #308	; 0x134
 8006cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc0:	0105003f 	.word	0x0105003f

08006cc4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 8006cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc6:	b0c9      	sub	sp, #292	; 0x124
 8006cc8:	461c      	mov	r4, r3
 8006cca:	468c      	mov	ip, r1
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8006ccc:	2600      	movs	r6, #0
{
 8006cce:	4613      	mov	r3, r2
  index_input += 1;
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8006cd0:	994e      	ldr	r1, [sp, #312]	; 0x138
  cp0->Service_Handle = htob(Service_Handle, 2);
 8006cd2:	f8ad 001c 	strh.w	r0, [sp, #28]
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8006cdc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  cp0->Char_Handle = htob(Char_Handle, 2);
 8006ce0:	f8ad c01e 	strh.w	ip, [sp, #30]
  cp0->Val_Offset = htob(Val_Offset, 1);
 8006ce4:	f88d 3020 	strb.w	r3, [sp, #32]
  tBleStatus status = 0;
 8006ce8:	f88d 6003 	strb.w	r6, [sp, #3]
    index_input += Char_Value_Length*sizeof(uint8_t);
 8006cec:	3406      	adds	r4, #6
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8006cee:	f002 fcab 	bl	8009648 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8006cf2:	4a0b      	ldr	r2, [pc, #44]	; (8006d20 <aci_gatt_update_char_value+0x5c>)
  tBleStatus status = 0;
 8006cf4:	f10d 0703 	add.w	r7, sp, #3
  rq.ocf = 0x106;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8006cf8:	2301      	movs	r3, #1
  cp0->Service_Handle = htob(Service_Handle, 2);
 8006cfa:	ad07      	add	r5, sp, #28
  rq.clen = index_input;
 8006cfc:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 8006cfe:	4631      	mov	r1, r6
 8006d00:	a801      	add	r0, sp, #4
  rq.ogf = 0x3f;
 8006d02:	e9cd 2601 	strd	r2, r6, [sp, #4]
  rq.cparam = cmd_buffer;
 8006d06:	9503      	str	r5, [sp, #12]
  rq.clen = index_input;
 8006d08:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
 8006d0a:	9705      	str	r7, [sp, #20]
  rq.rlen = 1;
 8006d0c:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8006d0e:	f000 f891 	bl	8006e34 <hci_send_req>
 8006d12:	42b0      	cmp	r0, r6
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8006d14:	bfac      	ite	ge
 8006d16:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 8006d18:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8006d1a:	b049      	add	sp, #292	; 0x124
 8006d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	0106003f 	.word	0x0106003f

08006d24 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8006d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d26:	460c      	mov	r4, r1
 8006d28:	b0c9      	sub	sp, #292	; 0x124
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8006d2a:	2500      	movs	r5, #0
{
 8006d2c:	4603      	mov	r3, r0
  index_input += 1;
  cp0->Length = htob(Length, 1);
  index_input += 1;
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8006d2e:	4611      	mov	r1, r2
 8006d30:	f10d 001e 	add.w	r0, sp, #30
 8006d34:	4622      	mov	r2, r4
  cp0->Offset = htob(Offset, 1);
 8006d36:	f88d 301c 	strb.w	r3, [sp, #28]
  cp0->Length = htob(Length, 1);
 8006d3a:	f88d 401d 	strb.w	r4, [sp, #29]
  tBleStatus status = 0;
 8006d3e:	f88d 5003 	strb.w	r5, [sp, #3]
    index_input += Length*sizeof(uint8_t);
 8006d42:	3402      	adds	r4, #2
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8006d44:	f002 fc80 	bl	8009648 <memcpy>
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8006d48:	4a0a      	ldr	r2, [pc, #40]	; (8006d74 <aci_hal_write_config_data+0x50>)
  tBleStatus status = 0;
 8006d4a:	f10d 0703 	add.w	r7, sp, #3
  rq.ocf = 0x00c;
  rq.cparam = cmd_buffer;
  rq.clen = index_input;
  rq.rparam = &status;
  rq.rlen = 1;
 8006d4e:	2301      	movs	r3, #1
  cp0->Offset = htob(Offset, 1);
 8006d50:	ae07      	add	r6, sp, #28
  rq.clen = index_input;
 8006d52:	b2e4      	uxtb	r4, r4
  if (hci_send_req(&rq, FALSE) < 0)
 8006d54:	4629      	mov	r1, r5
 8006d56:	a801      	add	r0, sp, #4
  rq.ogf = 0x3f;
 8006d58:	e9cd 2501 	strd	r2, r5, [sp, #4]
  rq.clen = index_input;
 8006d5c:	9404      	str	r4, [sp, #16]
  rq.cparam = cmd_buffer;
 8006d5e:	9603      	str	r6, [sp, #12]
  rq.rparam = &status;
 8006d60:	9705      	str	r7, [sp, #20]
  rq.rlen = 1;
 8006d62:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8006d64:	f000 f866 	bl	8006e34 <hci_send_req>
 8006d68:	42a8      	cmp	r0, r5
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8006d6a:	bfac      	ite	ge
 8006d6c:	7838      	ldrbge	r0, [r7, #0]
    return BLE_STATUS_TIMEOUT;
 8006d6e:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8006d70:	b049      	add	sp, #292	; 0x124
 8006d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d74:	000c003f 	.word	0x000c003f

08006d78 <aci_hal_set_tx_power_level>:
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8006d78:	b510      	push	{r4, lr}
 8006d7a:	b0c8      	sub	sp, #288	; 0x120
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
  tBleStatus status = 0;
 8006d7c:	2300      	movs	r3, #0
  uint8_t index_input = 0;
  cp0->En_High_Power = htob(En_High_Power, 1);
 8006d7e:	aa07      	add	r2, sp, #28
 8006d80:	f88d 001c 	strb.w	r0, [sp, #28]
  index_input += 1;
  cp0->PA_Level = htob(PA_Level, 1);
 8006d84:	f88d 101d 	strb.w	r1, [sp, #29]
  index_input += 1;
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = 0x3f;
 8006d88:	480b      	ldr	r0, [pc, #44]	; (8006db8 <aci_hal_set_tx_power_level+0x40>)
  rq.ocf = 0x00f;
  rq.cparam = cmd_buffer;
 8006d8a:	9203      	str	r2, [sp, #12]
  rq.clen = index_input;
 8006d8c:	2102      	movs	r1, #2
  tBleStatus status = 0;
 8006d8e:	f10d 0403 	add.w	r4, sp, #3
  rq.ogf = 0x3f;
 8006d92:	9001      	str	r0, [sp, #4]
  rq.rparam = &status;
  rq.rlen = 1;
 8006d94:	2201      	movs	r2, #1
  rq.clen = index_input;
 8006d96:	9104      	str	r1, [sp, #16]
  if (hci_send_req(&rq, FALSE) < 0)
 8006d98:	a801      	add	r0, sp, #4
 8006d9a:	4619      	mov	r1, r3
  rq.rlen = 1;
 8006d9c:	9206      	str	r2, [sp, #24]
  rq.rparam = &status;
 8006d9e:	9405      	str	r4, [sp, #20]
  tBleStatus status = 0;
 8006da0:	f88d 3003 	strb.w	r3, [sp, #3]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006da4:	9302      	str	r3, [sp, #8]
  if (hci_send_req(&rq, FALSE) < 0)
 8006da6:	f000 f845 	bl	8006e34 <hci_send_req>
 8006daa:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  if (status) {
 8006dac:	bfac      	ite	ge
 8006dae:	7820      	ldrbge	r0, [r4, #0]
    return BLE_STATUS_TIMEOUT;
 8006db0:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
 8006db2:	b048      	add	sp, #288	; 0x120
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	bf00      	nop
 8006db8:	000f003f 	.word	0x000f003f

08006dbc <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
  {
    hciContext.UserEvtRx = UserEvtRx;
 8006dc0:	4f10      	ldr	r7, [pc, #64]	; (8006e04 <hci_init+0x48>)
  if(UserEvtRx != NULL)
 8006dc2:	b100      	cbz	r0, 8006dc6 <hci_init+0xa>
    hciContext.UserEvtRx = UserEvtRx;
 8006dc4:	61f8      	str	r0, [r7, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8006dc6:	4810      	ldr	r0, [pc, #64]	; (8006e08 <hci_init+0x4c>)
 8006dc8:	4c10      	ldr	r4, [pc, #64]	; (8006e0c <hci_init+0x50>)
  hci_tl_lowlevel_init();

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8006dca:	4606      	mov	r6, r0
  list_init_head(&hciReadPktPool);
 8006dcc:	f000 f974 	bl	80070b8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8006dd0:	480f      	ldr	r0, [pc, #60]	; (8006e10 <hci_init+0x54>)
 8006dd2:	f000 f971 	bl	80070b8 <list_init_head>
  hci_tl_lowlevel_init();
 8006dd6:	f7f9 fe21 	bl	8000a1c <hci_tl_lowlevel_init>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8006dda:	f504 65af 	add.w	r5, r4, #1400	; 0x578
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8006dde:	4621      	mov	r1, r4
 8006de0:	4630      	mov	r0, r6
 8006de2:	348c      	adds	r4, #140	; 0x8c
 8006de4:	f000 f984 	bl	80070f0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8006de8:	42a5      	cmp	r5, r4
 8006dea:	d1f8      	bne.n	8006dde <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	b10b      	cbz	r3, 8006df4 <hci_init+0x38>
 8006df0:	2000      	movs	r0, #0
 8006df2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	b113      	cbz	r3, 8006dfe <hci_init+0x42>
}
 8006df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 8006dfc:	4718      	bx	r3
}
 8006dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e02:	bf00      	nop
 8006e04:	200001d4 	.word	0x200001d4
 8006e08:	20009c2c 	.word	0x20009c2c
 8006e0c:	200001f4 	.word	0x200001f4
 8006e10:	20009c34 	.word	0x20009c34

08006e14 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <hci_register_io_bus+0x1c>)
  hciContext.io.Receive = fops->Receive;  
  hciContext.io.Send    = fops->Send;
  hciContext.io.GetTick = fops->GetTick;
 8006e16:	6982      	ldr	r2, [r0, #24]
{
 8006e18:	b430      	push	{r4, r5}
  hciContext.io.Init    = fops->Init; 
 8006e1a:	6805      	ldr	r5, [r0, #0]
  hciContext.io.GetTick = fops->GetTick;
 8006e1c:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 8006e1e:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
 8006e22:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8006e26:	6902      	ldr	r2, [r0, #16]
 8006e28:	611a      	str	r2, [r3, #16]
  hciContext.io.Init    = fops->Init; 
 8006e2a:	601d      	str	r5, [r3, #0]
}
 8006e2c:	bc30      	pop	{r4, r5}
 8006e2e:	4770      	bx	lr
 8006e30:	200001d4 	.word	0x200001d4

08006e34 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8006e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e38:	4606      	mov	r6, r0
 8006e3a:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8006e3c:	2300      	movs	r3, #0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8006e3e:	a802      	add	r0, sp, #8
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8006e40:	8877      	ldrh	r7, [r6, #2]
 8006e42:	f8b6 9000 	ldrh.w	r9, [r6]
  tHciDataPacket * hciReadPacket = NULL;
 8006e46:	9301      	str	r3, [sp, #4]
{
 8006e48:	4688      	mov	r8, r1
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8006e4a:	4c6a      	ldr	r4, [pc, #424]	; (8006ff4 <hci_send_req+0x1c0>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8006e4c:	4d6a      	ldr	r5, [pc, #424]	; (8006ff8 <hci_send_req+0x1c4>)
  list_init_head(&hciTempQueue);
 8006e4e:	f000 f933 	bl	80070b8 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8006e52:	e005      	b.n	8006e60 <hci_send_req+0x2c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8006e54:	f000 f958 	bl	8007108 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8006e58:	9904      	ldr	r1, [sp, #16]
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 f948 	bl	80070f0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 f985 	bl	8007170 <list_get_size>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b04      	cmp	r3, #4
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8006e6a:	a904      	add	r1, sp, #16
 8006e6c:	4628      	mov	r0, r5
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8006e6e:	ddf1      	ble.n	8006e54 <hci_send_req+0x20>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8006e70:	8873      	ldrh	r3, [r6, #2]
 8006e72:	8832      	ldrh	r2, [r6, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8006e74:	7b34      	ldrb	r4, [r6, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8006e76:	68b1      	ldr	r1, [r6, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8006e78:	f88d 4013 	strb.w	r4, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8006e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e80:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 8006e84:	2501      	movs	r5, #1
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8006e86:	4622      	mov	r2, r4
 8006e88:	a805      	add	r0, sp, #20
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8006e8a:	f8ad 3011 	strh.w	r3, [sp, #17]
  payload[0] = HCI_COMMAND_PKT;
 8006e8e:	f88d 5010 	strb.w	r5, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8006e92:	f002 fbd9 	bl	8009648 <memcpy>
  if (hciContext.io.Send)
 8006e96:	4b59      	ldr	r3, [pc, #356]	; (8006ffc <hci_send_req+0x1c8>)
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	b113      	cbz	r3, 8006ea2 <hci_send_req+0x6e>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8006e9c:	1d21      	adds	r1, r4, #4
 8006e9e:	a804      	add	r0, sp, #16
 8006ea0:	4798      	blx	r3
  
  if (async)
 8006ea2:	f1b8 0f00 	cmp.w	r8, #0
 8006ea6:	f040 808f 	bne.w	8006fc8 <hci_send_req+0x194>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8006eaa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006eae:	ea47 2789 	orr.w	r7, r7, r9, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8006eb2:	4d51      	ldr	r5, [pc, #324]	; (8006ff8 <hci_send_req+0x1c4>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8006eb4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8006ff4 <hci_send_req+0x1c0>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8006eb8:	b2bf      	uxth	r7, r7
    uint32_t tickstart = HAL_GetTick();
 8006eba:	f7fb fa7d 	bl	80023b8 <HAL_GetTick>
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	e002      	b.n	8006ec8 <hci_send_req+0x94>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8006ec2:	f000 f8fd 	bl	80070c0 <list_is_empty>
 8006ec6:	b1f0      	cbz	r0, 8006f06 <hci_send_req+0xd2>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006ec8:	f7fb fa76 	bl	80023b8 <HAL_GetTick>
 8006ecc:	1b03      	subs	r3, r0, r4
 8006ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8006ed2:	4628      	mov	r0, r5
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006ed4:	d9f5      	bls.n	8006ec2 <hci_send_req+0x8e>
 8006ed6:	9901      	ldr	r1, [sp, #4]
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8006ed8:	2900      	cmp	r1, #0
 8006eda:	d142      	bne.n	8006f62 <hci_send_req+0x12e>
    list_insert_head(dest_list, tmp_node);
 8006edc:	4c46      	ldr	r4, [pc, #280]	; (8006ff8 <hci_send_req+0x1c4>)
 8006ede:	e005      	b.n	8006eec <hci_send_req+0xb8>
    list_remove_tail(src_list, &tmp_node);
 8006ee0:	f000 f92c 	bl	800713c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8006ee4:	9904      	ldr	r1, [sp, #16]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 f8f6 	bl	80070d8 <list_insert_head>
  while (!list_is_empty(src_list))
 8006eec:	a802      	add	r0, sp, #8
 8006eee:	f000 f8e7 	bl	80070c0 <list_is_empty>
 8006ef2:	4603      	mov	r3, r0
    list_remove_tail(src_list, &tmp_node);
 8006ef4:	a904      	add	r1, sp, #16
 8006ef6:	a802      	add	r0, sp, #8
  while (!list_is_empty(src_list))
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0f1      	beq.n	8006ee0 <hci_send_req+0xac>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return -1;
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 8006f00:	b025      	add	sp, #148	; 0x94
 8006f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8006f06:	a901      	add	r1, sp, #4
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f000 f8fd 	bl	8007108 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8006f0e:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 8006f10:	7a0b      	ldrb	r3, [r1, #8]
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d112      	bne.n	8006f3c <hci_send_req+0x108>
      switch (event_pckt->evt) 
 8006f16:	7a4b      	ldrb	r3, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8006f18:	f891 4088 	ldrb.w	r4, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8006f1c:	2b10      	cmp	r3, #16
 8006f1e:	d020      	beq.n	8006f62 <hci_send_req+0x12e>
 8006f20:	d823      	bhi.n	8006f6a <hci_send_req+0x136>
 8006f22:	2b0e      	cmp	r3, #14
 8006f24:	d01a      	beq.n	8006f5c <hci_send_req+0x128>
 8006f26:	2b0f      	cmp	r3, #15
 8006f28:	d108      	bne.n	8006f3c <hci_send_req+0x108>
        if (cs->opcode != opcode)
 8006f2a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8006f2e:	42bb      	cmp	r3, r7
 8006f30:	d117      	bne.n	8006f62 <hci_send_req+0x12e>
        if (r->event != EVT_CMD_STATUS) {
 8006f32:	6873      	ldr	r3, [r6, #4]
 8006f34:	2b0f      	cmp	r3, #15
 8006f36:	d052      	beq.n	8006fde <hci_send_req+0x1aa>
          if (cs->status) {
 8006f38:	7acb      	ldrb	r3, [r1, #11]
 8006f3a:	b993      	cbnz	r3, 8006f62 <hci_send_req+0x12e>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	f000 f8bf 	bl	80070c0 <list_is_empty>
 8006f42:	b120      	cbz	r0, 8006f4e <hci_send_req+0x11a>
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 f8bb 	bl	80070c0 <list_is_empty>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d140      	bne.n	8006fd0 <hci_send_req+0x19c>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8006f4e:	9901      	ldr	r1, [sp, #4]
 8006f50:	a802      	add	r0, sp, #8
 8006f52:	f000 f8cd 	bl	80070f0 <list_insert_tail>
      hciReadPacket=NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	9301      	str	r3, [sp, #4]
 8006f5a:	e7ae      	b.n	8006eba <hci_send_req+0x86>
        if (cc->opcode != opcode)
 8006f5c:	898b      	ldrh	r3, [r1, #12]
 8006f5e:	42bb      	cmp	r3, r7
 8006f60:	d014      	beq.n	8006f8c <hci_send_req+0x158>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006f62:	4824      	ldr	r0, [pc, #144]	; (8006ff4 <hci_send_req+0x1c0>)
 8006f64:	f000 f8b8 	bl	80070d8 <list_insert_head>
 8006f68:	e7b8      	b.n	8006edc <hci_send_req+0xa8>
      switch (event_pckt->evt) 
 8006f6a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f6c:	d1e6      	bne.n	8006f3c <hci_send_req+0x108>
        if (me->subevent != r->event)
 8006f6e:	7aca      	ldrb	r2, [r1, #11]
 8006f70:	6873      	ldr	r3, [r6, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d1e2      	bne.n	8006f3c <hci_send_req+0x108>
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8006f76:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
        len -= 1;
 8006f7a:	1f22      	subs	r2, r4, #4
        r->rlen = MIN(len, r->rlen);
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	bf28      	it	cs
 8006f80:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8006f82:	310c      	adds	r1, #12
        r->rlen = MIN(len, r->rlen);
 8006f84:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8006f86:	f002 fb5f 	bl	8009648 <memcpy>
        goto done;
 8006f8a:	e009      	b.n	8006fa0 <hci_send_req+0x16c>
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006f8c:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
        len -= EVT_CMD_COMPLETE_SIZE;
 8006f90:	1fa2      	subs	r2, r4, #6
        r->rlen = MIN(len, r->rlen);
 8006f92:	429a      	cmp	r2, r3
 8006f94:	bf28      	it	cs
 8006f96:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006f98:	310e      	adds	r1, #14
        r->rlen = MIN(len, r->rlen);
 8006f9a:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006f9c:	f002 fb54 	bl	8009648 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8006fa0:	9901      	ldr	r1, [sp, #4]
 8006fa2:	4814      	ldr	r0, [pc, #80]	; (8006ff4 <hci_send_req+0x1c0>)
    list_insert_head(dest_list, tmp_node);
 8006fa4:	4c14      	ldr	r4, [pc, #80]	; (8006ff8 <hci_send_req+0x1c4>)
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8006fa6:	f000 f897 	bl	80070d8 <list_insert_head>
static void move_list(tListNode * dest_list, tListNode * src_list)
 8006faa:	e005      	b.n	8006fb8 <hci_send_req+0x184>
    list_remove_tail(src_list, &tmp_node);
 8006fac:	f000 f8c6 	bl	800713c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8006fb0:	9904      	ldr	r1, [sp, #16]
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 f890 	bl	80070d8 <list_insert_head>
  while (!list_is_empty(src_list))
 8006fb8:	a802      	add	r0, sp, #8
 8006fba:	f000 f881 	bl	80070c0 <list_is_empty>
 8006fbe:	4603      	mov	r3, r0
    list_remove_tail(src_list, &tmp_node);
 8006fc0:	a904      	add	r1, sp, #16
 8006fc2:	a802      	add	r0, sp, #8
  while (!list_is_empty(src_list))
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f1      	beq.n	8006fac <hci_send_req+0x178>
    return 0;
 8006fc8:	2000      	movs	r0, #0
}
 8006fca:	b025      	add	sp, #148	; 0x94
 8006fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8006fd0:	9901      	ldr	r1, [sp, #4]
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	f000 f88c 	bl	80070f0 <list_insert_tail>
      hciReadPacket=NULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	e76d      	b.n	8006eba <hci_send_req+0x86>
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006fde:	e9d6 0304 	ldrd	r0, r3, [r6, #16]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8006fe2:	1ee2      	subs	r2, r4, #3
        r->rlen = MIN(len, r->rlen);
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	bf28      	it	cs
 8006fe8:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006fea:	310b      	adds	r1, #11
        r->rlen = MIN(len, r->rlen);
 8006fec:	6172      	str	r2, [r6, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006fee:	f002 fb2b 	bl	8009648 <memcpy>
        goto done;
 8006ff2:	e7d5      	b.n	8006fa0 <hci_send_req+0x16c>
 8006ff4:	20009c2c 	.word	0x20009c2c
 8006ff8:	20009c34 	.word	0x20009c34
 8006ffc:	200001d4 	.word	0x200001d4

08007000 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 8007004:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007006:	4c0d      	ldr	r4, [pc, #52]	; (800703c <hci_user_evt_proc+0x3c>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
 8007008:	4e0d      	ldr	r6, [pc, #52]	; (8007040 <hci_user_evt_proc+0x40>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800700a:	4d0e      	ldr	r5, [pc, #56]	; (8007044 <hci_user_evt_proc+0x44>)
  tHciDataPacket * hciReadPacket = NULL;
 800700c:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800700e:	e00a      	b.n	8007026 <hci_user_evt_proc+0x26>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8007010:	f000 f87a 	bl	8007108 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8007014:	69f3      	ldr	r3, [r6, #28]
 8007016:	b113      	cbz	r3, 800701e <hci_user_evt_proc+0x1e>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8007018:	9801      	ldr	r0, [sp, #4]
 800701a:	3008      	adds	r0, #8
 800701c:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800701e:	9901      	ldr	r1, [sp, #4]
 8007020:	4628      	mov	r0, r5
 8007022:	f000 f865 	bl	80070f0 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007026:	4620      	mov	r0, r4
 8007028:	f000 f84a 	bl	80070c0 <list_is_empty>
 800702c:	4603      	mov	r3, r0
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800702e:	a901      	add	r1, sp, #4
 8007030:	4620      	mov	r0, r4
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0ec      	beq.n	8007010 <hci_user_evt_proc+0x10>
  }
}
 8007036:	b002      	add	sp, #8
 8007038:	bd70      	pop	{r4, r5, r6, pc}
 800703a:	bf00      	nop
 800703c:	20009c34 	.word	0x20009c34
 8007040:	200001d4 	.word	0x200001d4
 8007044:	20009c2c 	.word	0x20009c2c

08007048 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8007048:	b530      	push	{r4, r5, lr}
 800704a:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 800704c:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800704e:	4817      	ldr	r0, [pc, #92]	; (80070ac <hci_notify_asynch_evt+0x64>)
  tHciDataPacket * hciReadPacket = NULL;
 8007050:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8007052:	f000 f835 	bl	80070c0 <list_is_empty>
 8007056:	b110      	cbz	r0, 800705e <hci_notify_asynch_evt+0x16>
      }
    }
  }
  else 
  {
    ret = 1;
 8007058:	2001      	movs	r0, #1
  }
  return ret;
  
}
 800705a:	b003      	add	sp, #12
 800705c:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800705e:	4605      	mov	r5, r0
 8007060:	a901      	add	r1, sp, #4
 8007062:	4812      	ldr	r0, [pc, #72]	; (80070ac <hci_notify_asynch_evt+0x64>)
 8007064:	f000 f850 	bl	8007108 <list_remove_head>
    if (hciContext.io.Receive)
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <hci_notify_asynch_evt+0x68>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	b1db      	cbz	r3, 80070a6 <hci_notify_asynch_evt+0x5e>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800706e:	9801      	ldr	r0, [sp, #4]
 8007070:	2180      	movs	r1, #128	; 0x80
 8007072:	3008      	adds	r0, #8
 8007074:	4798      	blx	r3
      if (data_len > 0)
 8007076:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
        hciReadPacket->data_len = data_len;
 800707a:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 800707c:	d00d      	beq.n	800709a <hci_notify_asynch_evt+0x52>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800707e:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 8007080:	f881 4088 	strb.w	r4, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8007084:	2b04      	cmp	r3, #4
 8007086:	d108      	bne.n	800709a <hci_notify_asynch_evt+0x52>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8007088:	7a8b      	ldrb	r3, [r1, #10]
 800708a:	3c03      	subs	r4, #3
 800708c:	42a3      	cmp	r3, r4
 800708e:	d104      	bne.n	800709a <hci_notify_asynch_evt+0x52>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8007090:	4808      	ldr	r0, [pc, #32]	; (80070b4 <hci_notify_asynch_evt+0x6c>)
 8007092:	f000 f82d 	bl	80070f0 <list_insert_tail>
  int32_t ret = 0;
 8007096:	4628      	mov	r0, r5
 8007098:	e7df      	b.n	800705a <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800709a:	4804      	ldr	r0, [pc, #16]	; (80070ac <hci_notify_asynch_evt+0x64>)
 800709c:	f000 f81c 	bl	80070d8 <list_insert_head>
  int32_t ret = 0;
 80070a0:	2000      	movs	r0, #0
}
 80070a2:	b003      	add	sp, #12
 80070a4:	bd30      	pop	{r4, r5, pc}
  int32_t ret = 0;
 80070a6:	4618      	mov	r0, r3
  return ret;
 80070a8:	e7d7      	b.n	800705a <hci_notify_asynch_evt+0x12>
 80070aa:	bf00      	nop
 80070ac:	20009c2c 	.word	0x20009c2c
 80070b0:	200001d4 	.word	0x200001d4
 80070b4:	20009c34 	.word	0x20009c34

080070b8 <list_init_head>:
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
  listHead->prev = listHead;	
 80070b8:	e9c0 0000 	strd	r0, r0, [r0]
}
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop

080070c0 <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070c0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80070c4:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80070c6:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 80070c8:	1a18      	subs	r0, r3, r0
 80070ca:	fab0 f080 	clz	r0, r0
 80070ce:	0940      	lsrs	r0, r0, #5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d0:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop

080070d8 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80070dc:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80070de:	6802      	ldr	r2, [r0, #0]
  node->prev = listHead;
 80070e0:	e9c1 2000 	strd	r2, r0, [r1]
  listHead->next = node;
 80070e4:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 80070e6:	680a      	ldr	r2, [r1, #0]
 80070e8:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ea:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80070ee:	4770      	bx	lr

080070f0 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80070f4:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 80070f6:	6842      	ldr	r2, [r0, #4]
 80070f8:	e9c1 0200 	strd	r0, r2, [r1]
  listHead->prev = node;
 80070fc:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 80070fe:	684a      	ldr	r2, [r1, #4]
 8007100:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007102:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007106:	4770      	bx	lr

08007108 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8007108:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800710a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800710e:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8007110:	6803      	ldr	r3, [r0, #0]
 8007112:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007114:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007118:	b672      	cpsid	i
  (node->prev)->next = node->next;
 800711a:	e9d3 3200 	ldrd	r3, r2, [r3]
 800711e:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 8007120:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007122:	f380 8810 	msr	PRIMASK, r0
  list_remove_node (listHead->next);
  (*node)->next = NULL;
 8007126:	680a      	ldr	r2, [r1, #0]
 8007128:	2300      	movs	r3, #0
 800712a:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800712c:	680a      	ldr	r2, [r1, #0]
 800712e:	6053      	str	r3, [r2, #4]
 8007130:	f384 8810 	msr	PRIMASK, r4
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop

0800713c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800713c:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800713e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007142:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8007144:	6843      	ldr	r3, [r0, #4]
 8007146:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007148:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800714c:	b672      	cpsid	i
  (node->prev)->next = node->next;
 800714e:	e9d3 3200 	ldrd	r3, r2, [r3]
 8007152:	6013      	str	r3, [r2, #0]
  (node->next)->prev = node->prev;
 8007154:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007156:	f380 8810 	msr	PRIMASK, r0
  list_remove_node (listHead->prev);
  (*node)->next = NULL;
 800715a:	680a      	ldr	r2, [r1, #0]
 800715c:	2300      	movs	r3, #0
 800715e:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8007160:	680a      	ldr	r2, [r1, #0]
 8007162:	6053      	str	r3, [r2, #4]
 8007164:	f384 8810 	msr	PRIMASK, r4
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop

08007170 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8007170:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007172:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007176:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8007178:	6803      	ldr	r3, [r0, #0]
  while (temp != listHead)
 800717a:	429a      	cmp	r2, r3
  int size = 0;
 800717c:	f04f 0000 	mov.w	r0, #0
  while (temp != listHead)
 8007180:	d004      	beq.n	800718c <list_get_size+0x1c>
  {
    size++;
    temp = temp->next;		
 8007182:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 8007184:	429a      	cmp	r2, r3
    size++;
 8007186:	f100 0001 	add.w	r0, r0, #1
  while (temp != listHead)
 800718a:	d1fa      	bne.n	8007182 <list_get_size+0x12>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800718c:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop

08007194 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007194:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8007196:	4b05      	ldr	r3, [pc, #20]	; (80071ac <SysTick_Handler+0x18>)
 8007198:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800719a:	f001 fb87 	bl	80088ac <xTaskGetSchedulerState>
 800719e:	2801      	cmp	r0, #1
 80071a0:	d100      	bne.n	80071a4 <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80071a2:	bd08      	pop	{r3, pc}
 80071a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80071a8:	f002 b80c 	b.w	80091c4 <xPortSysTickHandler>
 80071ac:	e000e010 	.word	0xe000e010

080071b0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071b0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80071b4:	b92b      	cbnz	r3, 80071c2 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80071b6:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <osKernelInitialize+0x20>)
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	b928      	cbnz	r0, 80071c8 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80071bc:	2201      	movs	r2, #1
 80071be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071c0:	4770      	bx	lr
    stat = osErrorISR;
 80071c2:	f06f 0005 	mvn.w	r0, #5
 80071c6:	4770      	bx	lr
    } else {
      stat = osError;
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	200009d8 	.word	0x200009d8

080071d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071d4:	b510      	push	{r4, lr}
 80071d6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80071da:	b974      	cbnz	r4, 80071fa <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80071dc:	4b08      	ldr	r3, [pc, #32]	; (8007200 <osKernelStart+0x2c>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	2a01      	cmp	r2, #1
 80071e2:	d107      	bne.n	80071f4 <osKernelStart+0x20>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071e4:	4907      	ldr	r1, [pc, #28]	; (8007204 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071e6:	2202      	movs	r2, #2
 80071e8:	77cc      	strb	r4, [r1, #31]
 80071ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071ec:	f001 f87a 	bl	80082e4 <vTaskStartScheduler>
      stat = osOK;
 80071f0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80071f2:	bd10      	pop	{r4, pc}
      stat = osError;
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80071f8:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80071fa:	f06f 0005 	mvn.w	r0, #5
}
 80071fe:	bd10      	pop	{r4, pc}
 8007200:	200009d8 	.word	0x200009d8
 8007204:	e000ed00 	.word	0xe000ed00

08007208 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007208:	4b04      	ldr	r3, [pc, #16]	; (800721c <vApplicationGetIdleTaskMemory+0x14>)
 800720a:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800720c:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800720e:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007210:	4c03      	ldr	r4, [pc, #12]	; (8007220 <vApplicationGetIdleTaskMemory+0x18>)
 8007212:	600c      	str	r4, [r1, #0]
}
 8007214:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007218:	6013      	str	r3, [r2, #0]
}
 800721a:	4770      	bx	lr
 800721c:	2000096c 	.word	0x2000096c
 8007220:	2000076c 	.word	0x2000076c

08007224 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <vApplicationGetTimerTaskMemory+0x18>)
 8007226:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007228:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800722a:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800722e:	4c04      	ldr	r4, [pc, #16]	; (8007240 <vApplicationGetTimerTaskMemory+0x1c>)
 8007230:	600c      	str	r4, [r1, #0]
}
 8007232:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007236:	6013      	str	r3, [r2, #0]
}
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	200011dc 	.word	0x200011dc
 8007240:	200009dc 	.word	0x200009dc

08007244 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007244:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007248:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800724c:	2200      	movs	r2, #0
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800724e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007252:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007254:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007256:	6043      	str	r3, [r0, #4]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop

0800725c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800725c:	2300      	movs	r3, #0
 800725e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop

08007264 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007264:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007266:	6802      	ldr	r2, [r0, #0]
{
 8007268:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800726a:	689c      	ldr	r4, [r3, #8]
 800726c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800726e:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007270:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8007272:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007274:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007276:	6099      	str	r1, [r3, #8]
}
 8007278:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800727c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800727e:	6002      	str	r2, [r0, #0]
}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop

08007284 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007284:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007286:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007288:	1c6b      	adds	r3, r5, #1
 800728a:	d010      	beq.n	80072ae <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800728c:	f100 0308 	add.w	r3, r0, #8
 8007290:	461c      	mov	r4, r3
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	42aa      	cmp	r2, r5
 8007298:	d9fa      	bls.n	8007290 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800729a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800729c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800729e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072a0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072a2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80072a4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80072a6:	6108      	str	r0, [r1, #16]
}
 80072a8:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80072aa:	6002      	str	r2, [r0, #0]
}
 80072ac:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80072ae:	6904      	ldr	r4, [r0, #16]
 80072b0:	6863      	ldr	r3, [r4, #4]
 80072b2:	e7f2      	b.n	800729a <vListInsert+0x16>

080072b4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072b4:	6903      	ldr	r3, [r0, #16]
{
 80072b6:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072b8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072bc:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072be:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 80072c0:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072c2:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072c4:	bf08      	it	eq
 80072c6:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80072c8:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80072ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 80072ce:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 80072d0:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 80072d2:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80072d4:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80072d6:	6818      	ldr	r0, [r3, #0]
}
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop

080072dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072e0:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072e2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072e4:	b920      	cbnz	r0, 80072f0 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072e6:	6825      	ldr	r5, [r4, #0]
 80072e8:	b35d      	cbz	r5, 8007342 <prvCopyDataToQueue+0x66>
 80072ea:	3601      	adds	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072ec:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80072f0:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072f2:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 80072f4:	b985      	cbnz	r5, 8007318 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072f6:	6860      	ldr	r0, [r4, #4]
 80072f8:	f002 f9a6 	bl	8009648 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007300:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007302:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007304:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007306:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007308:	f106 0601 	add.w	r6, r6, #1
 800730c:	bf24      	itt	cs
 800730e:	6823      	ldrcs	r3, [r4, #0]
 8007310:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8007312:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007314:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007316:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007318:	68e0      	ldr	r0, [r4, #12]
 800731a:	f002 f995 	bl	8009648 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800731e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007320:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007322:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007324:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007326:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007328:	60e3      	str	r3, [r4, #12]
 800732a:	f1c2 0200 	rsb	r2, r2, #0
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800732e:	d202      	bcs.n	8007336 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	441a      	add	r2, r3
 8007334:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007336:	2d02      	cmp	r5, #2
 8007338:	d008      	beq.n	800734c <prvCopyDataToQueue+0x70>
 800733a:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800733c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800733e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007340:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007342:	68a0      	ldr	r0, [r4, #8]
 8007344:	f001 fac2 	bl	80088cc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007348:	60a5      	str	r5, [r4, #8]
 800734a:	e7ce      	b.n	80072ea <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800734c:	2e01      	cmp	r6, #1
 800734e:	bf38      	it	cc
 8007350:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 8007352:	2000      	movs	r0, #0
 8007354:	e7ca      	b.n	80072ec <prvCopyDataToQueue+0x10>
 8007356:	bf00      	nop

08007358 <xQueueGenericCreateStatic>:
	{
 8007358:	b530      	push	{r4, r5, lr}
 800735a:	b083      	sub	sp, #12
 800735c:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007360:	b940      	cbnz	r0, 8007374 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	e7fe      	b.n	8007372 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8007374:	461c      	mov	r4, r3
 8007376:	b1e3      	cbz	r3, 80073b2 <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007378:	b172      	cbz	r2, 8007398 <xQueueGenericCreateStatic+0x40>
 800737a:	b319      	cbz	r1, 80073c4 <xQueueGenericCreateStatic+0x6c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800737c:	2350      	movs	r3, #80	; 0x50
 800737e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007380:	9b01      	ldr	r3, [sp, #4]
 8007382:	2b50      	cmp	r3, #80	; 0x50
 8007384:	d027      	beq.n	80073d6 <xQueueGenericCreateStatic+0x7e>
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	e7fe      	b.n	8007396 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007398:	2900      	cmp	r1, #0
 800739a:	d146      	bne.n	800742a <xQueueGenericCreateStatic+0xd2>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800739c:	2350      	movs	r3, #80	; 0x50
 800739e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073a0:	9b01      	ldr	r3, [sp, #4]
 80073a2:	2b50      	cmp	r3, #80	; 0x50
 80073a4:	d1ef      	bne.n	8007386 <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073a6:	2301      	movs	r3, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073a8:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073aa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80073ae:	4622      	mov	r2, r4
 80073b0:	e015      	b.n	80073de <xQueueGenericCreateStatic+0x86>
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80073c2:	e7fe      	b.n	80073c2 <xQueueGenericCreateStatic+0x6a>
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073d4:	e7fe      	b.n	80073d4 <xQueueGenericCreateStatic+0x7c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073d6:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073d8:	2301      	movs	r3, #1
 80073da:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80073de:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
 80073e2:	6022      	str	r2, [r4, #0]
	taskENTER_CRITICAL();
 80073e4:	f001 fe86 	bl	80090f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073e8:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 80073ec:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073ee:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073f0:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073f4:	1acb      	subs	r3, r1, r3
 80073f6:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073f8:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073fa:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 80073fc:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073fe:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007400:	e9c4 2302 	strd	r2, r3, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8007404:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007408:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800740c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007410:	f7ff ff18 	bl	8007244 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007414:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007418:	f7ff ff14 	bl	8007244 <vListInitialise>
	taskEXIT_CRITICAL();
 800741c:	f001 fe8c 	bl	8009138 <vPortExitCritical>
	}
 8007420:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007422:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	}
 8007426:	b003      	add	sp, #12
 8007428:	bd30      	pop	{r4, r5, pc}
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800743a:	e7fe      	b.n	800743a <xQueueGenericCreateStatic+0xe2>

0800743c <xQueueGenericSend>:
{
 800743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007444:	2800      	cmp	r0, #0
 8007446:	f000 80ac 	beq.w	80075a2 <xQueueGenericSend+0x166>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800744a:	4688      	mov	r8, r1
 800744c:	461f      	mov	r7, r3
 800744e:	4604      	mov	r4, r0
 8007450:	2900      	cmp	r1, #0
 8007452:	f000 8099 	beq.w	8007588 <xQueueGenericSend+0x14c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007456:	2f02      	cmp	r7, #2
 8007458:	d10b      	bne.n	8007472 <xQueueGenericSend+0x36>
 800745a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800745c:	2b01      	cmp	r3, #1
 800745e:	d008      	beq.n	8007472 <xQueueGenericSend+0x36>
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	e7fe      	b.n	8007470 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007472:	f001 fa1b 	bl	80088ac <xTaskGetSchedulerState>
 8007476:	4682      	mov	sl, r0
 8007478:	2800      	cmp	r0, #0
 800747a:	f000 809b 	beq.w	80075b4 <xQueueGenericSend+0x178>
 800747e:	f04f 0a00 	mov.w	sl, #0
					portYIELD_WITHIN_API();
 8007482:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8007744 <xQueueGenericSend+0x308>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007486:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 800748a:	f001 fe33 	bl	80090f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800748e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007490:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007492:	429a      	cmp	r2, r3
 8007494:	f0c0 80f4 	bcc.w	8007680 <xQueueGenericSend+0x244>
 8007498:	2f02      	cmp	r7, #2
 800749a:	f000 80f1 	beq.w	8007680 <xQueueGenericSend+0x244>
				if( xTicksToWait == ( TickType_t ) 0 )
 800749e:	9d01      	ldr	r5, [sp, #4]
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	f000 814a 	beq.w	800773a <xQueueGenericSend+0x2fe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074a6:	ad02      	add	r5, sp, #8
				else if( xEntryTimeSet == pdFALSE )
 80074a8:	f1ba 0f00 	cmp.w	sl, #0
 80074ac:	f000 80e4 	beq.w	8007678 <xQueueGenericSend+0x23c>
		taskEXIT_CRITICAL();
 80074b0:	f001 fe42 	bl	8009138 <vPortExitCritical>
		vTaskSuspendAll();
 80074b4:	f000 ffb4 	bl	8008420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074b8:	f001 fe1c 	bl	80090f4 <vPortEnterCritical>
 80074bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80074c0:	2bff      	cmp	r3, #255	; 0xff
 80074c2:	bf04      	itt	eq
 80074c4:	2300      	moveq	r3, #0
 80074c6:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80074ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80074ce:	2bff      	cmp	r3, #255	; 0xff
 80074d0:	bf04      	itt	eq
 80074d2:	2300      	moveq	r3, #0
 80074d4:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80074d8:	f001 fe2e 	bl	8009138 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074dc:	4628      	mov	r0, r5
 80074de:	a901      	add	r1, sp, #4
 80074e0:	f001 f974 	bl	80087cc <xTaskCheckForTimeOut>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	f040 80e8 	bne.w	80076ba <xQueueGenericSend+0x27e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074ea:	f001 fe03 	bl	80090f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80074f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d06b      	beq.n	80075ce <xQueueGenericSend+0x192>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80074f6:	f001 fe1f 	bl	8009138 <vPortExitCritical>
	taskENTER_CRITICAL();
 80074fa:	f001 fdfb 	bl	80090f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80074fe:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007502:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007504:	2d00      	cmp	r5, #0
 8007506:	dc05      	bgt.n	8007514 <xQueueGenericSend+0xd8>
 8007508:	e012      	b.n	8007530 <xQueueGenericSend+0xf4>
			--cTxLock;
 800750a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800750c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007510:	b25d      	sxtb	r5, r3
 8007512:	d00d      	beq.n	8007530 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007514:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007516:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007518:	b153      	cbz	r3, 8007530 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800751a:	f001 f903 	bl	8008724 <xTaskRemoveFromEventList>
 800751e:	2800      	cmp	r0, #0
 8007520:	d0f3      	beq.n	800750a <xQueueGenericSend+0xce>
						vTaskMissedYield();
 8007522:	f001 f9a3 	bl	800886c <vTaskMissedYield>
			--cTxLock;
 8007526:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007528:	f013 0fff 	tst.w	r3, #255	; 0xff
 800752c:	b25d      	sxtb	r5, r3
 800752e:	d1f1      	bne.n	8007514 <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 8007530:	23ff      	movs	r3, #255	; 0xff
 8007532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007536:	f001 fdff 	bl	8009138 <vPortExitCritical>
	taskENTER_CRITICAL();
 800753a:	f001 fddb 	bl	80090f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800753e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007542:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007544:	2d00      	cmp	r5, #0
 8007546:	dd15      	ble.n	8007574 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007548:	f104 0a10 	add.w	sl, r4, #16
 800754c:	e004      	b.n	8007558 <xQueueGenericSend+0x11c>
				--cRxLock;
 800754e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007550:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007554:	b25d      	sxtb	r5, r3
 8007556:	d00d      	beq.n	8007574 <xQueueGenericSend+0x138>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007558:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800755a:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800755c:	b153      	cbz	r3, 8007574 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800755e:	f001 f8e1 	bl	8008724 <xTaskRemoveFromEventList>
 8007562:	2800      	cmp	r0, #0
 8007564:	d0f3      	beq.n	800754e <xQueueGenericSend+0x112>
					vTaskMissedYield();
 8007566:	f001 f981 	bl	800886c <vTaskMissedYield>
				--cRxLock;
 800756a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800756c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007570:	b25d      	sxtb	r5, r3
 8007572:	d1f1      	bne.n	8007558 <xQueueGenericSend+0x11c>
		pxQueue->cRxLock = queueUNLOCKED;
 8007574:	23ff      	movs	r3, #255	; 0xff
 8007576:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800757a:	f001 fddd 	bl	8009138 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800757e:	f000 ff57 	bl	8008430 <xTaskResumeAll>
 8007582:	f04f 0a01 	mov.w	sl, #1
 8007586:	e780      	b.n	800748a <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007588:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	f43f af63 	beq.w	8007456 <xQueueGenericSend+0x1a>
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	e7fe      	b.n	80075a0 <xQueueGenericSend+0x164>
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80075b2:	e7fe      	b.n	80075b2 <xQueueGenericSend+0x176>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075b4:	9b01      	ldr	r3, [sp, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f43f af63 	beq.w	8007482 <xQueueGenericSend+0x46>
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	e7fe      	b.n	80075cc <xQueueGenericSend+0x190>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075ce:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 80075d2:	f001 fdb1 	bl	8009138 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075d6:	9901      	ldr	r1, [sp, #4]
 80075d8:	4650      	mov	r0, sl
 80075da:	f001 f80b 	bl	80085f4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80075de:	f001 fd89 	bl	80090f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80075e2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80075e6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075e8:	2d00      	cmp	r5, #0
 80075ea:	dc05      	bgt.n	80075f8 <xQueueGenericSend+0x1bc>
 80075ec:	e012      	b.n	8007614 <xQueueGenericSend+0x1d8>
			--cTxLock;
 80075ee:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075f0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80075f4:	b25d      	sxtb	r5, r3
 80075f6:	d00d      	beq.n	8007614 <xQueueGenericSend+0x1d8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075fa:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075fc:	b153      	cbz	r3, 8007614 <xQueueGenericSend+0x1d8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075fe:	f001 f891 	bl	8008724 <xTaskRemoveFromEventList>
 8007602:	2800      	cmp	r0, #0
 8007604:	d0f3      	beq.n	80075ee <xQueueGenericSend+0x1b2>
						vTaskMissedYield();
 8007606:	f001 f931 	bl	800886c <vTaskMissedYield>
			--cTxLock;
 800760a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800760c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007610:	b25d      	sxtb	r5, r3
 8007612:	d1f1      	bne.n	80075f8 <xQueueGenericSend+0x1bc>
		pxQueue->cTxLock = queueUNLOCKED;
 8007614:	23ff      	movs	r3, #255	; 0xff
 8007616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800761a:	f001 fd8d 	bl	8009138 <vPortExitCritical>
	taskENTER_CRITICAL();
 800761e:	f001 fd69 	bl	80090f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007622:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007626:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007628:	2d00      	cmp	r5, #0
 800762a:	dc05      	bgt.n	8007638 <xQueueGenericSend+0x1fc>
 800762c:	e012      	b.n	8007654 <xQueueGenericSend+0x218>
				--cRxLock;
 800762e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007630:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007634:	b25d      	sxtb	r5, r3
 8007636:	d00d      	beq.n	8007654 <xQueueGenericSend+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007638:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800763a:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800763c:	b153      	cbz	r3, 8007654 <xQueueGenericSend+0x218>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800763e:	f001 f871 	bl	8008724 <xTaskRemoveFromEventList>
 8007642:	2800      	cmp	r0, #0
 8007644:	d0f3      	beq.n	800762e <xQueueGenericSend+0x1f2>
					vTaskMissedYield();
 8007646:	f001 f911 	bl	800886c <vTaskMissedYield>
				--cRxLock;
 800764a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800764c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007650:	b25d      	sxtb	r5, r3
 8007652:	d1f1      	bne.n	8007638 <xQueueGenericSend+0x1fc>
		pxQueue->cRxLock = queueUNLOCKED;
 8007654:	23ff      	movs	r3, #255	; 0xff
 8007656:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800765a:	f001 fd6d 	bl	8009138 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800765e:	f000 fee7 	bl	8008430 <xTaskResumeAll>
 8007662:	2800      	cmp	r0, #0
 8007664:	d18d      	bne.n	8007582 <xQueueGenericSend+0x146>
					portYIELD_WITHIN_API();
 8007666:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800766a:	f8c9 3000 	str.w	r3, [r9]
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	e784      	b.n	8007582 <xQueueGenericSend+0x146>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007678:	4628      	mov	r0, r5
 800767a:	f001 f89b 	bl	80087b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800767e:	e717      	b.n	80074b0 <xQueueGenericSend+0x74>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007680:	463a      	mov	r2, r7
 8007682:	4641      	mov	r1, r8
 8007684:	4620      	mov	r0, r4
 8007686:	f7ff fe29 	bl	80072dc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800768a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800768c:	b973      	cbnz	r3, 80076ac <xQueueGenericSend+0x270>
					else if( xYieldRequired != pdFALSE )
 800768e:	b138      	cbz	r0, 80076a0 <xQueueGenericSend+0x264>
						queueYIELD_IF_USING_PREEMPTION();
 8007690:	4b2c      	ldr	r3, [pc, #176]	; (8007744 <xQueueGenericSend+0x308>)
 8007692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80076a0:	f001 fd4a 	bl	8009138 <vPortExitCritical>
				return pdPASS;
 80076a4:	2001      	movs	r0, #1
}
 80076a6:	b004      	add	sp, #16
 80076a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80076b0:	f001 f838 	bl	8008724 <xTaskRemoveFromEventList>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d0f3      	beq.n	80076a0 <xQueueGenericSend+0x264>
 80076b8:	e7ea      	b.n	8007690 <xQueueGenericSend+0x254>
	taskENTER_CRITICAL();
 80076ba:	f001 fd1b 	bl	80090f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80076be:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80076c2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	dd11      	ble.n	80076ec <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076c8:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80076cc:	e004      	b.n	80076d8 <xQueueGenericSend+0x29c>
			--cTxLock;
 80076ce:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80076d4:	b25d      	sxtb	r5, r3
 80076d6:	d009      	beq.n	80076ec <xQueueGenericSend+0x2b0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076da:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076dc:	b133      	cbz	r3, 80076ec <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076de:	f001 f821 	bl	8008724 <xTaskRemoveFromEventList>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	d0f3      	beq.n	80076ce <xQueueGenericSend+0x292>
						vTaskMissedYield();
 80076e6:	f001 f8c1 	bl	800886c <vTaskMissedYield>
 80076ea:	e7f0      	b.n	80076ce <xQueueGenericSend+0x292>
		pxQueue->cTxLock = queueUNLOCKED;
 80076ec:	23ff      	movs	r3, #255	; 0xff
 80076ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80076f2:	f001 fd21 	bl	8009138 <vPortExitCritical>
	taskENTER_CRITICAL();
 80076f6:	f001 fcfd 	bl	80090f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80076fa:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80076fe:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007700:	2d00      	cmp	r5, #0
 8007702:	dd11      	ble.n	8007728 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007704:	f104 0610 	add.w	r6, r4, #16
 8007708:	e004      	b.n	8007714 <xQueueGenericSend+0x2d8>
				--cRxLock;
 800770a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800770c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007710:	b25d      	sxtb	r5, r3
 8007712:	d009      	beq.n	8007728 <xQueueGenericSend+0x2ec>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007714:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007716:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007718:	b133      	cbz	r3, 8007728 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800771a:	f001 f803 	bl	8008724 <xTaskRemoveFromEventList>
 800771e:	2800      	cmp	r0, #0
 8007720:	d0f3      	beq.n	800770a <xQueueGenericSend+0x2ce>
					vTaskMissedYield();
 8007722:	f001 f8a3 	bl	800886c <vTaskMissedYield>
 8007726:	e7f0      	b.n	800770a <xQueueGenericSend+0x2ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8007728:	23ff      	movs	r3, #255	; 0xff
 800772a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800772e:	f001 fd03 	bl	8009138 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8007732:	f000 fe7d 	bl	8008430 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007736:	2000      	movs	r0, #0
 8007738:	e7b5      	b.n	80076a6 <xQueueGenericSend+0x26a>
					taskEXIT_CRITICAL();
 800773a:	f001 fcfd 	bl	8009138 <vPortExitCritical>
					return errQUEUE_FULL;
 800773e:	4628      	mov	r0, r5
 8007740:	e7b1      	b.n	80076a6 <xQueueGenericSend+0x26a>
 8007742:	bf00      	nop
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <xQueueReceive>:
{
 8007748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800774c:	b085      	sub	sp, #20
 800774e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007750:	2800      	cmp	r0, #0
 8007752:	f000 80f5 	beq.w	8007940 <xQueueReceive+0x1f8>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007756:	460e      	mov	r6, r1
 8007758:	4604      	mov	r4, r0
 800775a:	2900      	cmp	r1, #0
 800775c:	f000 808a 	beq.w	8007874 <xQueueReceive+0x12c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007760:	f001 f8a4 	bl	80088ac <xTaskGetSchedulerState>
 8007764:	2800      	cmp	r0, #0
 8007766:	d079      	beq.n	800785c <xQueueReceive+0x114>
		taskENTER_CRITICAL();
 8007768:	f001 fcc4 	bl	80090f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800776c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800776e:	2d00      	cmp	r5, #0
 8007770:	f040 8148 	bne.w	8007a04 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007774:	9b01      	ldr	r3, [sp, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 80dc 	beq.w	8007934 <xQueueReceive+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800777c:	a802      	add	r0, sp, #8
 800777e:	f001 f819 	bl	80087b4 <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 8007782:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8007a4c <xQueueReceive+0x304>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007786:	f104 0724 	add.w	r7, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 800778a:	f001 fcd5 	bl	8009138 <vPortExitCritical>
		vTaskSuspendAll();
 800778e:	f000 fe47 	bl	8008420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007792:	f001 fcaf 	bl	80090f4 <vPortEnterCritical>
 8007796:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800779a:	2bff      	cmp	r3, #255	; 0xff
 800779c:	bf04      	itt	eq
 800779e:	2300      	moveq	r3, #0
 80077a0:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80077a4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80077a8:	2bff      	cmp	r3, #255	; 0xff
 80077aa:	bf04      	itt	eq
 80077ac:	2300      	moveq	r3, #0
 80077ae:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80077b2:	f001 fcc1 	bl	8009138 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077b6:	a901      	add	r1, sp, #4
 80077b8:	a802      	add	r0, sp, #8
 80077ba:	f001 f807 	bl	80087cc <xTaskCheckForTimeOut>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d165      	bne.n	800788e <xQueueReceive+0x146>
	taskENTER_CRITICAL();
 80077c2:	f001 fc97 	bl	80090f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 80c2 	beq.w	8007952 <xQueueReceive+0x20a>
	taskEXIT_CRITICAL();
 80077ce:	f001 fcb3 	bl	8009138 <vPortExitCritical>
	taskENTER_CRITICAL();
 80077d2:	f001 fc8f 	bl	80090f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80077d6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80077da:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077dc:	2d00      	cmp	r5, #0
 80077de:	dc05      	bgt.n	80077ec <xQueueReceive+0xa4>
 80077e0:	e012      	b.n	8007808 <xQueueReceive+0xc0>
			--cTxLock;
 80077e2:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80077e8:	b25d      	sxtb	r5, r3
 80077ea:	d00d      	beq.n	8007808 <xQueueReceive+0xc0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077ee:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077f0:	b153      	cbz	r3, 8007808 <xQueueReceive+0xc0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077f2:	f000 ff97 	bl	8008724 <xTaskRemoveFromEventList>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d0f3      	beq.n	80077e2 <xQueueReceive+0x9a>
						vTaskMissedYield();
 80077fa:	f001 f837 	bl	800886c <vTaskMissedYield>
			--cTxLock;
 80077fe:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007800:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007804:	b25d      	sxtb	r5, r3
 8007806:	d1f1      	bne.n	80077ec <xQueueReceive+0xa4>
		pxQueue->cTxLock = queueUNLOCKED;
 8007808:	23ff      	movs	r3, #255	; 0xff
 800780a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800780e:	f001 fc93 	bl	8009138 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007812:	f001 fc6f 	bl	80090f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007816:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800781a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800781c:	2d00      	cmp	r5, #0
 800781e:	dd15      	ble.n	800784c <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007820:	f104 0910 	add.w	r9, r4, #16
 8007824:	e004      	b.n	8007830 <xQueueReceive+0xe8>
				--cRxLock;
 8007826:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007828:	f013 0fff 	tst.w	r3, #255	; 0xff
 800782c:	b25d      	sxtb	r5, r3
 800782e:	d00d      	beq.n	800784c <xQueueReceive+0x104>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007830:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007832:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007834:	b153      	cbz	r3, 800784c <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007836:	f000 ff75 	bl	8008724 <xTaskRemoveFromEventList>
 800783a:	2800      	cmp	r0, #0
 800783c:	d0f3      	beq.n	8007826 <xQueueReceive+0xde>
					vTaskMissedYield();
 800783e:	f001 f815 	bl	800886c <vTaskMissedYield>
				--cRxLock;
 8007842:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007844:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007848:	b25d      	sxtb	r5, r3
 800784a:	d1f1      	bne.n	8007830 <xQueueReceive+0xe8>
		pxQueue->cRxLock = queueUNLOCKED;
 800784c:	23ff      	movs	r3, #255	; 0xff
 800784e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007852:	f001 fc71 	bl	8009138 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8007856:	f000 fdeb 	bl	8008430 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800785a:	e062      	b.n	8007922 <xQueueReceive+0x1da>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800785c:	9b01      	ldr	r3, [sp, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d082      	beq.n	8007768 <xQueueReceive+0x20>
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	e7fe      	b.n	8007872 <xQueueReceive+0x12a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007874:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007876:	2b00      	cmp	r3, #0
 8007878:	f43f af72 	beq.w	8007760 <xQueueReceive+0x18>
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	e7fe      	b.n	800788c <xQueueReceive+0x144>
	taskENTER_CRITICAL();
 800788e:	f001 fc31 	bl	80090f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007892:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007896:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007898:	2d00      	cmp	r5, #0
 800789a:	dc05      	bgt.n	80078a8 <xQueueReceive+0x160>
 800789c:	e012      	b.n	80078c4 <xQueueReceive+0x17c>
			--cTxLock;
 800789e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078a0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80078a4:	b25d      	sxtb	r5, r3
 80078a6:	d00d      	beq.n	80078c4 <xQueueReceive+0x17c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078aa:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078ac:	b153      	cbz	r3, 80078c4 <xQueueReceive+0x17c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078ae:	f000 ff39 	bl	8008724 <xTaskRemoveFromEventList>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d0f3      	beq.n	800789e <xQueueReceive+0x156>
						vTaskMissedYield();
 80078b6:	f000 ffd9 	bl	800886c <vTaskMissedYield>
			--cTxLock;
 80078ba:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80078c0:	b25d      	sxtb	r5, r3
 80078c2:	d1f1      	bne.n	80078a8 <xQueueReceive+0x160>
		pxQueue->cTxLock = queueUNLOCKED;
 80078c4:	23ff      	movs	r3, #255	; 0xff
 80078c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80078ca:	f001 fc35 	bl	8009138 <vPortExitCritical>
	taskENTER_CRITICAL();
 80078ce:	f001 fc11 	bl	80090f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80078d2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80078d6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078d8:	2d00      	cmp	r5, #0
 80078da:	dd15      	ble.n	8007908 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078dc:	f104 0910 	add.w	r9, r4, #16
 80078e0:	e004      	b.n	80078ec <xQueueReceive+0x1a4>
				--cRxLock;
 80078e2:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80078e8:	b25d      	sxtb	r5, r3
 80078ea:	d00d      	beq.n	8007908 <xQueueReceive+0x1c0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ec:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078ee:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078f0:	b153      	cbz	r3, 8007908 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078f2:	f000 ff17 	bl	8008724 <xTaskRemoveFromEventList>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d0f3      	beq.n	80078e2 <xQueueReceive+0x19a>
					vTaskMissedYield();
 80078fa:	f000 ffb7 	bl	800886c <vTaskMissedYield>
				--cRxLock;
 80078fe:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007900:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007904:	b25d      	sxtb	r5, r3
 8007906:	d1f1      	bne.n	80078ec <xQueueReceive+0x1a4>
		pxQueue->cRxLock = queueUNLOCKED;
 8007908:	23ff      	movs	r3, #255	; 0xff
 800790a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800790e:	f001 fc13 	bl	8009138 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8007912:	f000 fd8d 	bl	8008430 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8007916:	f001 fbed 	bl	80090f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800791a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800791c:	b153      	cbz	r3, 8007934 <xQueueReceive+0x1ec>
	taskEXIT_CRITICAL();
 800791e:	f001 fc0b 	bl	8009138 <vPortExitCritical>
		taskENTER_CRITICAL();
 8007922:	f001 fbe7 	bl	80090f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007926:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007928:	2d00      	cmp	r5, #0
 800792a:	d16b      	bne.n	8007a04 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800792c:	9b01      	ldr	r3, [sp, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f47f af2b 	bne.w	800778a <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 8007934:	f001 fc00 	bl	8009138 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007938:	2000      	movs	r0, #0
}
 800793a:	b005      	add	sp, #20
 800793c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8007950:	e7fe      	b.n	8007950 <xQueueReceive+0x208>
	taskEXIT_CRITICAL();
 8007952:	f001 fbf1 	bl	8009138 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007956:	9901      	ldr	r1, [sp, #4]
 8007958:	4638      	mov	r0, r7
 800795a:	f000 fe4b 	bl	80085f4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800795e:	f001 fbc9 	bl	80090f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007962:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007966:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007968:	2d00      	cmp	r5, #0
 800796a:	dc05      	bgt.n	8007978 <xQueueReceive+0x230>
 800796c:	e012      	b.n	8007994 <xQueueReceive+0x24c>
			--cTxLock;
 800796e:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007970:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007974:	b25d      	sxtb	r5, r3
 8007976:	d00d      	beq.n	8007994 <xQueueReceive+0x24c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007978:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800797a:	4638      	mov	r0, r7
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800797c:	b153      	cbz	r3, 8007994 <xQueueReceive+0x24c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800797e:	f000 fed1 	bl	8008724 <xTaskRemoveFromEventList>
 8007982:	2800      	cmp	r0, #0
 8007984:	d0f3      	beq.n	800796e <xQueueReceive+0x226>
						vTaskMissedYield();
 8007986:	f000 ff71 	bl	800886c <vTaskMissedYield>
			--cTxLock;
 800798a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800798c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007990:	b25d      	sxtb	r5, r3
 8007992:	d1f1      	bne.n	8007978 <xQueueReceive+0x230>
		pxQueue->cTxLock = queueUNLOCKED;
 8007994:	23ff      	movs	r3, #255	; 0xff
 8007996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800799a:	f001 fbcd 	bl	8009138 <vPortExitCritical>
	taskENTER_CRITICAL();
 800799e:	f001 fba9 	bl	80090f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80079a2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80079a6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079a8:	2d00      	cmp	r5, #0
 80079aa:	dd15      	ble.n	80079d8 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ac:	f104 0910 	add.w	r9, r4, #16
 80079b0:	e004      	b.n	80079bc <xQueueReceive+0x274>
				--cRxLock;
 80079b2:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80079b8:	b25d      	sxtb	r5, r3
 80079ba:	d00d      	beq.n	80079d8 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079bc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079be:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079c0:	b153      	cbz	r3, 80079d8 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079c2:	f000 feaf 	bl	8008724 <xTaskRemoveFromEventList>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d0f3      	beq.n	80079b2 <xQueueReceive+0x26a>
					vTaskMissedYield();
 80079ca:	f000 ff4f 	bl	800886c <vTaskMissedYield>
				--cRxLock;
 80079ce:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80079d4:	b25d      	sxtb	r5, r3
 80079d6:	d1f1      	bne.n	80079bc <xQueueReceive+0x274>
		pxQueue->cRxLock = queueUNLOCKED;
 80079d8:	23ff      	movs	r3, #255	; 0xff
 80079da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80079de:	f001 fbab 	bl	8009138 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80079e2:	f000 fd25 	bl	8008430 <xTaskResumeAll>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d19b      	bne.n	8007922 <xQueueReceive+0x1da>
					portYIELD_WITHIN_API();
 80079ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079ee:	f8c8 3000 	str.w	r3, [r8]
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80079fa:	f001 fb7b 	bl	80090f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079fe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a00:	2d00      	cmp	r5, #0
 8007a02:	d093      	beq.n	800792c <xQueueReceive+0x1e4>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007a06:	b152      	cbz	r2, 8007a1e <xQueueReceive+0x2d6>
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a08:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a0c:	1899      	adds	r1, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a0e:	4281      	cmp	r1, r0
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a10:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a12:	bf24      	itt	cs
 8007a14:	6821      	ldrcs	r1, [r4, #0]
 8007a16:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f001 fe15 	bl	8009648 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a1e:	3d01      	subs	r5, #1
 8007a20:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	b91b      	cbnz	r3, 8007a2e <xQueueReceive+0x2e6>
				taskEXIT_CRITICAL();
 8007a26:	f001 fb87 	bl	8009138 <vPortExitCritical>
				return pdPASS;
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	e785      	b.n	800793a <xQueueReceive+0x1f2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a2e:	f104 0010 	add.w	r0, r4, #16
 8007a32:	f000 fe77 	bl	8008724 <xTaskRemoveFromEventList>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d0f5      	beq.n	8007a26 <xQueueReceive+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
 8007a3a:	4b04      	ldr	r3, [pc, #16]	; (8007a4c <xQueueReceive+0x304>)
 8007a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	e7ec      	b.n	8007a26 <xQueueReceive+0x2de>
 8007a4c:	e000ed04 	.word	0xe000ed04

08007a50 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a50:	4b1b      	ldr	r3, [pc, #108]	; (8007ac0 <vQueueAddToRegistry+0x70>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	b1ba      	cbz	r2, 8007a86 <vQueueAddToRegistry+0x36>
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	b1f2      	cbz	r2, 8007a98 <vQueueAddToRegistry+0x48>
 8007a5a:	691a      	ldr	r2, [r3, #16]
 8007a5c:	b1f2      	cbz	r2, 8007a9c <vQueueAddToRegistry+0x4c>
 8007a5e:	699a      	ldr	r2, [r3, #24]
 8007a60:	b1f2      	cbz	r2, 8007aa0 <vQueueAddToRegistry+0x50>
 8007a62:	6a1a      	ldr	r2, [r3, #32]
 8007a64:	b1f2      	cbz	r2, 8007aa4 <vQueueAddToRegistry+0x54>
 8007a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a68:	b1f2      	cbz	r2, 8007aa8 <vQueueAddToRegistry+0x58>
 8007a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a6c:	b1f2      	cbz	r2, 8007aac <vQueueAddToRegistry+0x5c>
 8007a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a70:	b1f2      	cbz	r2, 8007ab0 <vQueueAddToRegistry+0x60>
 8007a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a74:	b1f2      	cbz	r2, 8007ab4 <vQueueAddToRegistry+0x64>
 8007a76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a78:	b1f2      	cbz	r2, 8007ab8 <vQueueAddToRegistry+0x68>
 8007a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a7c:	b112      	cbz	r2, 8007a84 <vQueueAddToRegistry+0x34>
 8007a7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a80:	b1e2      	cbz	r2, 8007abc <vQueueAddToRegistry+0x6c>
 8007a82:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a84:	220a      	movs	r2, #10
	{
 8007a86:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a88:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a90:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a96:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a98:	2201      	movs	r2, #1
 8007a9a:	e7f4      	b.n	8007a86 <vQueueAddToRegistry+0x36>
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	e7f2      	b.n	8007a86 <vQueueAddToRegistry+0x36>
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	e7f0      	b.n	8007a86 <vQueueAddToRegistry+0x36>
 8007aa4:	2204      	movs	r2, #4
 8007aa6:	e7ee      	b.n	8007a86 <vQueueAddToRegistry+0x36>
 8007aa8:	2205      	movs	r2, #5
 8007aaa:	e7ec      	b.n	8007a86 <vQueueAddToRegistry+0x36>
 8007aac:	2206      	movs	r2, #6
 8007aae:	e7ea      	b.n	8007a86 <vQueueAddToRegistry+0x36>
 8007ab0:	2207      	movs	r2, #7
 8007ab2:	e7e8      	b.n	8007a86 <vQueueAddToRegistry+0x36>
 8007ab4:	2208      	movs	r2, #8
 8007ab6:	e7e6      	b.n	8007a86 <vQueueAddToRegistry+0x36>
 8007ab8:	2209      	movs	r2, #9
 8007aba:	e7e4      	b.n	8007a86 <vQueueAddToRegistry+0x36>
 8007abc:	220b      	movs	r2, #11
 8007abe:	e7e2      	b.n	8007a86 <vQueueAddToRegistry+0x36>
 8007ac0:	20009c3c 	.word	0x20009c3c

08007ac4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ac4:	b570      	push	{r4, r5, r6, lr}
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460e      	mov	r6, r1
 8007aca:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007acc:	f001 fb12 	bl	80090f4 <vPortEnterCritical>
 8007ad0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007ad4:	2bff      	cmp	r3, #255	; 0xff
 8007ad6:	bf04      	itt	eq
 8007ad8:	2300      	moveq	r3, #0
 8007ada:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8007ade:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ae2:	2bff      	cmp	r3, #255	; 0xff
 8007ae4:	bf04      	itt	eq
 8007ae6:	2300      	moveq	r3, #0
 8007ae8:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8007aec:	f001 fb24 	bl	8009138 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d045      	beq.n	8007b82 <vQueueWaitForMessageRestricted+0xbe>
	taskENTER_CRITICAL();
 8007af6:	f001 fafd 	bl	80090f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007afa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007afe:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	dd15      	ble.n	8007b30 <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b04:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8007b08:	e004      	b.n	8007b14 <vQueueWaitForMessageRestricted+0x50>
			--cTxLock;
 8007b0a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b0c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b10:	b25d      	sxtb	r5, r3
 8007b12:	d00d      	beq.n	8007b30 <vQueueWaitForMessageRestricted+0x6c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b16:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b18:	b153      	cbz	r3, 8007b30 <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b1a:	f000 fe03 	bl	8008724 <xTaskRemoveFromEventList>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d0f3      	beq.n	8007b0a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8007b22:	f000 fea3 	bl	800886c <vTaskMissedYield>
			--cTxLock;
 8007b26:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b28:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b2c:	b25d      	sxtb	r5, r3
 8007b2e:	d1f1      	bne.n	8007b14 <vQueueWaitForMessageRestricted+0x50>
		pxQueue->cTxLock = queueUNLOCKED;
 8007b30:	23ff      	movs	r3, #255	; 0xff
 8007b32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007b36:	f001 faff 	bl	8009138 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007b3a:	f001 fadb 	bl	80090f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007b3e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007b42:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b44:	2d00      	cmp	r5, #0
 8007b46:	dd15      	ble.n	8007b74 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b48:	f104 0610 	add.w	r6, r4, #16
 8007b4c:	e004      	b.n	8007b58 <vQueueWaitForMessageRestricted+0x94>
				--cRxLock;
 8007b4e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b50:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b54:	b25d      	sxtb	r5, r3
 8007b56:	d00d      	beq.n	8007b74 <vQueueWaitForMessageRestricted+0xb0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b58:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b5a:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b5c:	b153      	cbz	r3, 8007b74 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b5e:	f000 fde1 	bl	8008724 <xTaskRemoveFromEventList>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d0f3      	beq.n	8007b4e <vQueueWaitForMessageRestricted+0x8a>
					vTaskMissedYield();
 8007b66:	f000 fe81 	bl	800886c <vTaskMissedYield>
				--cRxLock;
 8007b6a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b70:	b25d      	sxtb	r5, r3
 8007b72:	d1f1      	bne.n	8007b58 <vQueueWaitForMessageRestricted+0x94>
		pxQueue->cRxLock = queueUNLOCKED;
 8007b74:	23ff      	movs	r3, #255	; 0xff
 8007b76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8007b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007b7e:	f001 badb 	b.w	8009138 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b82:	462a      	mov	r2, r5
 8007b84:	4631      	mov	r1, r6
 8007b86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b8a:	f000 fd7b 	bl	8008684 <vTaskPlaceOnEventListRestricted>
 8007b8e:	e7b2      	b.n	8007af6 <vQueueWaitForMessageRestricted+0x32>

08007b90 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b94:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b96:	f001 faad 	bl	80090f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b9a:	4a34      	ldr	r2, [pc, #208]	; (8007c6c <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8007b9c:	4e34      	ldr	r6, [pc, #208]	; (8007c70 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8007b9e:	6813      	ldr	r3, [r2, #0]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ba4:	6833      	ldr	r3, [r6, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d032      	beq.n	8007c10 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007baa:	4d32      	ldr	r5, [pc, #200]	; (8007c74 <prvAddNewTaskToReadyList+0xe4>)
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b33b      	cbz	r3, 8007c00 <prvAddNewTaskToReadyList+0x70>
 8007bb0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007bb2:	4f31      	ldr	r7, [pc, #196]	; (8007c78 <prvAddNewTaskToReadyList+0xe8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bb4:	4931      	ldr	r1, [pc, #196]	; (8007c7c <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8007bb6:	4a32      	ldr	r2, [pc, #200]	; (8007c80 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8007bb8:	f8d1 c000 	ldr.w	ip, [r1]
		uxTaskNumber++;
 8007bbc:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007bbe:	4584      	cmp	ip, r0
		uxTaskNumber++;
 8007bc0:	f103 0301 	add.w	r3, r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8007bc4:	bf38      	it	cc
 8007bc6:	6008      	strcc	r0, [r1, #0]
 8007bc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007bcc:	64e3      	str	r3, [r4, #76]	; 0x4c
		prvAddTaskToReadyList( pxNewTCB );
 8007bce:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007bd2:	1d21      	adds	r1, r4, #4
		uxTaskNumber++;
 8007bd4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007bd6:	f7ff fb45 	bl	8007264 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bda:	f001 faad 	bl	8009138 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bde:	682b      	ldr	r3, [r5, #0]
 8007be0:	b163      	cbz	r3, 8007bfc <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007be2:	6832      	ldr	r2, [r6, #0]
 8007be4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007be6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d207      	bcs.n	8007bfc <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bec:	4b25      	ldr	r3, [pc, #148]	; (8007c84 <prvAddNewTaskToReadyList+0xf4>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c00:	6833      	ldr	r3, [r6, #0]
 8007c02:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	4f1c      	ldr	r7, [pc, #112]	; (8007c78 <prvAddNewTaskToReadyList+0xe8>)
 8007c08:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8007c0a:	bf98      	it	ls
 8007c0c:	6034      	strls	r4, [r6, #0]
 8007c0e:	e7d1      	b.n	8007bb4 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8007c10:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c12:	6813      	ldr	r3, [r2, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d003      	beq.n	8007c20 <prvAddNewTaskToReadyList+0x90>
 8007c18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007c1a:	4f17      	ldr	r7, [pc, #92]	; (8007c78 <prvAddNewTaskToReadyList+0xe8>)
 8007c1c:	4d15      	ldr	r5, [pc, #84]	; (8007c74 <prvAddNewTaskToReadyList+0xe4>)
 8007c1e:	e7c9      	b.n	8007bb4 <prvAddNewTaskToReadyList+0x24>
 8007c20:	4f15      	ldr	r7, [pc, #84]	; (8007c78 <prvAddNewTaskToReadyList+0xe8>)
 8007c22:	463d      	mov	r5, r7
 8007c24:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c28:	4628      	mov	r0, r5
 8007c2a:	3514      	adds	r5, #20
 8007c2c:	f7ff fb0a 	bl	8007244 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c30:	45a8      	cmp	r8, r5
 8007c32:	d1f9      	bne.n	8007c28 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c34:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8007c9c <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 8007c38:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007ca0 <prvAddNewTaskToReadyList+0x110>
 8007c3c:	4d0d      	ldr	r5, [pc, #52]	; (8007c74 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8007c3e:	4648      	mov	r0, r9
 8007c40:	f7ff fb00 	bl	8007244 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c44:	4640      	mov	r0, r8
 8007c46:	f7ff fafd 	bl	8007244 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c4a:	480f      	ldr	r0, [pc, #60]	; (8007c88 <prvAddNewTaskToReadyList+0xf8>)
 8007c4c:	f7ff fafa 	bl	8007244 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c50:	480e      	ldr	r0, [pc, #56]	; (8007c8c <prvAddNewTaskToReadyList+0xfc>)
 8007c52:	f7ff faf7 	bl	8007244 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c56:	480e      	ldr	r0, [pc, #56]	; (8007c90 <prvAddNewTaskToReadyList+0x100>)
 8007c58:	f7ff faf4 	bl	8007244 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c5c:	4a0d      	ldr	r2, [pc, #52]	; (8007c94 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c5e:	4b0e      	ldr	r3, [pc, #56]	; (8007c98 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c60:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007c66:	f8c3 8000 	str.w	r8, [r3]
}
 8007c6a:	e7a3      	b.n	8007bb4 <prvAddNewTaskToReadyList+0x24>
 8007c6c:	200016b8 	.word	0x200016b8
 8007c70:	20001248 	.word	0x20001248
 8007c74:	20001714 	.word	0x20001714
 8007c78:	20001254 	.word	0x20001254
 8007c7c:	200016c8 	.word	0x200016c8
 8007c80:	200016c4 	.word	0x200016c4
 8007c84:	e000ed04 	.word	0xe000ed04
 8007c88:	20001700 	.word	0x20001700
 8007c8c:	2000172c 	.word	0x2000172c
 8007c90:	20001718 	.word	0x20001718
 8007c94:	2000124c 	.word	0x2000124c
 8007c98:	20001250 	.word	0x20001250
 8007c9c:	200016cc 	.word	0x200016cc
 8007ca0:	200016e0 	.word	0x200016e0

08007ca4 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007ca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007caa:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8007cae:	465a      	mov	r2, fp
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007cb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007cb6:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007cb8:	4699      	mov	r9, r3
 8007cba:	e9dd 6a0a 	ldrd	r6, sl, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007cbe:	f001 fcd1 	bl	8009664 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007cc4:	f1ab 0b04 	sub.w	fp, fp, #4
 8007cc8:	449b      	add	fp, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cca:	f02b 0b07 	bic.w	fp, fp, #7
	if( pcName != NULL )
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	d038      	beq.n	8007d44 <prvInitialiseNewTask.isra.0+0xa0>
 8007cd2:	1e6a      	subs	r2, r5, #1
 8007cd4:	f105 0117 	add.w	r1, r5, #23
 8007cd8:	f104 0533 	add.w	r5, r4, #51	; 0x33
 8007cdc:	e001      	b.n	8007ce2 <prvInitialiseNewTask.isra.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cde:	428a      	cmp	r2, r1
 8007ce0:	d006      	beq.n	8007cf0 <prvInitialiseNewTask.isra.0+0x4c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ce2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007ce6:	f805 3f01 	strb.w	r3, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8007cea:	7817      	ldrb	r7, [r2, #0]
 8007cec:	2f00      	cmp	r7, #0
 8007cee:	d1f6      	bne.n	8007cde <prvInitialiseNewTask.isra.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cf6:	2e37      	cmp	r6, #55	; 0x37
 8007cf8:	bf28      	it	cs
 8007cfa:	2637      	movcs	r6, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8007cfc:	2500      	movs	r5, #0
 8007cfe:	e9c4 6515 	strd	r6, r5, [r4, #84]	; 0x54
	pxNewTCB->uxPriority = uxPriority;
 8007d02:	62e6      	str	r6, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d04:	1d20      	adds	r0, r4, #4
 8007d06:	f7ff faa9 	bl	800725c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d0a:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d0e:	f104 0018 	add.w	r0, r4, #24
 8007d12:	f7ff faa3 	bl	800725c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8007d16:	6665      	str	r5, [r4, #100]	; 0x64
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007d18:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d1c:	61a6      	str	r6, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d1e:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8007d22:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d26:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d28:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d2a:	464a      	mov	r2, r9
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	4658      	mov	r0, fp
 8007d30:	f001 f9b4 	bl	800909c <pxPortInitialiseStack>
 8007d34:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8007d36:	f1ba 0f00 	cmp.w	sl, #0
 8007d3a:	d001      	beq.n	8007d40 <prvInitialiseNewTask.isra.0+0x9c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d3c:	f8ca 4000 	str.w	r4, [sl]
}
 8007d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d44:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8007d48:	e7d5      	b.n	8007cf6 <prvInitialiseNewTask.isra.0+0x52>
 8007d4a:	bf00      	nop

08007d4c <prvIdleTask>:
{
 8007d4c:	4d23      	ldr	r5, [pc, #140]	; (8007ddc <prvIdleTask+0x90>)
 8007d4e:	f8df a094 	ldr.w	sl, [pc, #148]	; 8007de4 <prvIdleTask+0x98>
 8007d52:	4e23      	ldr	r6, [pc, #140]	; (8007de0 <prvIdleTask+0x94>)
 8007d54:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007de8 <prvIdleTask+0x9c>
				taskYIELD();
 8007d58:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8007dec <prvIdleTask+0xa0>
{
 8007d5c:	b580      	push	{r7, lr}
				taskYIELD();
 8007d5e:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d62:	682b      	ldr	r3, [r5, #0]
 8007d64:	b343      	cbz	r3, 8007db8 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 8007d66:	f001 f9c5 	bl	80090f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d6a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007d6e:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d70:	1d20      	adds	r0, r4, #4
 8007d72:	f7ff fa9f 	bl	80072b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d76:	6833      	ldr	r3, [r6, #0]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 8007d82:	f001 f9d9 	bl	8009138 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d86:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8007d8a:	b163      	cbz	r3, 8007da6 <prvIdleTask+0x5a>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d020      	beq.n	8007dd2 <prvIdleTask+0x86>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d0e6      	beq.n	8007d62 <prvIdleTask+0x16>
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	e7fe      	b.n	8007da4 <prvIdleTask+0x58>
				vPortFree( pxTCB->pxStack );
 8007da6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007da8:	f001 fbc6 	bl	8009538 <vPortFree>
				vPortFree( pxTCB );
 8007dac:	4620      	mov	r0, r4
 8007dae:	f001 fbc3 	bl	8009538 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007db2:	682b      	ldr	r3, [r5, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1d6      	bne.n	8007d66 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007db8:	f8d9 3000 	ldr.w	r3, [r9]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d905      	bls.n	8007dcc <prvIdleTask+0x80>
				taskYIELD();
 8007dc0:	f8c8 7000 	str.w	r7, [r8]
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8007dcc:	f7f9 fd1c 	bl	8001808 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007dd0:	e7c7      	b.n	8007d62 <prvIdleTask+0x16>
				vPortFree( pxTCB );
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f001 fbb0 	bl	8009538 <vPortFree>
 8007dd8:	e7c3      	b.n	8007d62 <prvIdleTask+0x16>
 8007dda:	bf00      	nop
 8007ddc:	200016bc 	.word	0x200016bc
 8007de0:	200016b8 	.word	0x200016b8
 8007de4:	2000172c 	.word	0x2000172c
 8007de8:	20001254 	.word	0x20001254
 8007dec:	e000ed04 	.word	0xe000ed04

08007df0 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8007df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007df4:	4b47      	ldr	r3, [pc, #284]	; (8007f14 <xTaskIncrementTick.part.0+0x124>)
 8007df6:	681e      	ldr	r6, [r3, #0]
 8007df8:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 8007dfa:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8007dfc:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007dfe:	2e00      	cmp	r6, #0
 8007e00:	d041      	beq.n	8007e86 <xTaskIncrementTick.part.0+0x96>
 8007e02:	4d45      	ldr	r5, [pc, #276]	; (8007f18 <xTaskIncrementTick.part.0+0x128>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	429e      	cmp	r6, r3
 8007e08:	d34a      	bcc.n	8007ea0 <xTaskIncrementTick.part.0+0xb0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e0a:	f8df a110 	ldr.w	sl, [pc, #272]	; 8007f1c <xTaskIncrementTick.part.0+0x12c>
 8007e0e:	f8da 3000 	ldr.w	r3, [sl]
 8007e12:	681c      	ldr	r4, [r3, #0]
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	d074      	beq.n	8007f02 <xTaskIncrementTick.part.0+0x112>
 8007e18:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8007f2c <xTaskIncrementTick.part.0+0x13c>
 8007e1c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8007f30 <xTaskIncrementTick.part.0+0x140>
					prvAddTaskToReadyList( pxTCB );
 8007e20:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007f34 <xTaskIncrementTick.part.0+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 8007e24:	2400      	movs	r4, #0
 8007e26:	e023      	b.n	8007e70 <xTaskIncrementTick.part.0+0x80>
 8007e28:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e2a:	f7ff fa43 	bl	80072b4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e32:	f107 0018 	add.w	r0, r7, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e36:	b113      	cbz	r3, 8007e3e <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e38:	f7ff fa3c 	bl	80072b4 <uxListRemove>
 8007e3c:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	f8db 2000 	ldr.w	r2, [fp]
 8007e44:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8007e4e:	bf88      	it	hi
 8007e50:	f8cb 3000 	strhi.w	r3, [fp]
 8007e54:	f7ff fa06 	bl	8007264 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e58:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e5c:	f8da 3000 	ldr.w	r3, [sl]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e64:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8007e66:	4291      	cmp	r1, r2
 8007e68:	bf28      	it	cs
 8007e6a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d04c      	beq.n	8007f0a <xTaskIncrementTick.part.0+0x11a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e70:	f8da 3000 	ldr.w	r3, [sl]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e78:	687b      	ldr	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e7a:	1d39      	adds	r1, r7, #4
					if( xConstTickCount < xItemValue )
 8007e7c:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e7e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8007e80:	d2d2      	bcs.n	8007e28 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8007e82:	602b      	str	r3, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e84:	e011      	b.n	8007eaa <xTaskIncrementTick.part.0+0xba>
			taskSWITCH_DELAYED_LISTS();
 8007e86:	4b25      	ldr	r3, [pc, #148]	; (8007f1c <xTaskIncrementTick.part.0+0x12c>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	6812      	ldr	r2, [r2, #0]
 8007e8c:	b30a      	cbz	r2, 8007ed2 <xTaskIncrementTick.part.0+0xe2>
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	e7fe      	b.n	8007e9e <xTaskIncrementTick.part.0+0xae>
 8007ea0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8007f2c <xTaskIncrementTick.part.0+0x13c>
 8007ea4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8007f30 <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 8007ea8:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007eaa:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 8007eae:	491c      	ldr	r1, [pc, #112]	; (8007f20 <xTaskIncrementTick.part.0+0x130>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 8007ebc:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8007ebe:	2a02      	cmp	r2, #2
 8007ec0:	bf28      	it	cs
 8007ec2:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8007ec4:	2b00      	cmp	r3, #0
}
 8007ec6:	bf0c      	ite	eq
 8007ec8:	4620      	moveq	r0, r4
 8007eca:	2001      	movne	r0, #1
 8007ecc:	b003      	add	sp, #12
 8007ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8007ed2:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <xTaskIncrementTick.part.0+0x134>)
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	4914      	ldr	r1, [pc, #80]	; (8007f28 <xTaskIncrementTick.part.0+0x138>)
 8007ed8:	6814      	ldr	r4, [r2, #0]
 8007eda:	601c      	str	r4, [r3, #0]
 8007edc:	6010      	str	r0, [r2, #0]
 8007ede:	680a      	ldr	r2, [r1, #0]
 8007ee0:	3201      	adds	r2, #1
 8007ee2:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	b922      	cbnz	r2, 8007ef4 <xTaskIncrementTick.part.0+0x104>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007eea:	4d0b      	ldr	r5, [pc, #44]	; (8007f18 <xTaskIncrementTick.part.0+0x128>)
 8007eec:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef0:	602b      	str	r3, [r5, #0]
 8007ef2:	e787      	b.n	8007e04 <xTaskIncrementTick.part.0+0x14>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef4:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ef6:	4d08      	ldr	r5, [pc, #32]	; (8007f18 <xTaskIncrementTick.part.0+0x128>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	602b      	str	r3, [r5, #0]
	}
}
 8007f00:	e780      	b.n	8007e04 <xTaskIncrementTick.part.0+0x14>
 8007f02:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8007f2c <xTaskIncrementTick.part.0+0x13c>
 8007f06:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8007f30 <xTaskIncrementTick.part.0+0x140>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0e:	602b      	str	r3, [r5, #0]
					break;
 8007f10:	e7cb      	b.n	8007eaa <xTaskIncrementTick.part.0+0xba>
 8007f12:	bf00      	nop
 8007f14:	20001740 	.word	0x20001740
 8007f18:	200016f4 	.word	0x200016f4
 8007f1c:	2000124c 	.word	0x2000124c
 8007f20:	20001744 	.word	0x20001744
 8007f24:	20001250 	.word	0x20001250
 8007f28:	200016f8 	.word	0x200016f8
 8007f2c:	20001254 	.word	0x20001254
 8007f30:	20001248 	.word	0x20001248
 8007f34:	200016c8 	.word	0x200016c8

08007f38 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8007f3c:	4d40      	ldr	r5, [pc, #256]	; (8008040 <xTaskResumeAll.part.0+0x108>)
BaseType_t xTaskResumeAll( void )
 8007f3e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8007f40:	f001 f8d8 	bl	80090f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f4a:	682b      	ldr	r3, [r5, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d15f      	bne.n	8008010 <xTaskResumeAll.part.0+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f50:	4b3c      	ldr	r3, [pc, #240]	; (8008044 <xTaskResumeAll.part.0+0x10c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d05b      	beq.n	8008010 <xTaskResumeAll.part.0+0xd8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f58:	4e3b      	ldr	r6, [pc, #236]	; (8008048 <xTaskResumeAll.part.0+0x110>)
 8007f5a:	6833      	ldr	r3, [r6, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d06c      	beq.n	800803a <xTaskResumeAll.part.0+0x102>
 8007f60:	4f3a      	ldr	r7, [pc, #232]	; (800804c <xTaskResumeAll.part.0+0x114>)
 8007f62:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8008060 <xTaskResumeAll.part.0+0x128>
 8007f66:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8008064 <xTaskResumeAll.part.0+0x12c>
 8007f6a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8008068 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f6e:	68f3      	ldr	r3, [r6, #12]
 8007f70:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f72:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f76:	f104 0018 	add.w	r0, r4, #24
 8007f7a:	f7ff f99b 	bl	80072b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f7e:	4658      	mov	r0, fp
 8007f80:	f7ff f998 	bl	80072b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	4659      	mov	r1, fp
 8007f90:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8007f94:	bf88      	it	hi
 8007f96:	603b      	strhi	r3, [r7, #0]
 8007f98:	f7ff f964 	bl	8007264 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8007fa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d33b      	bcc.n	8008020 <xTaskResumeAll.part.0+0xe8>
						xYieldPending = pdTRUE;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fae:	6833      	ldr	r3, [r6, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1dc      	bne.n	8007f6e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fb4:	4b26      	ldr	r3, [pc, #152]	; (8008050 <xTaskResumeAll.part.0+0x118>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	6812      	ldr	r2, [r2, #0]
 8007fba:	2a00      	cmp	r2, #0
 8007fbc:	d038      	beq.n	8008030 <xTaskResumeAll.part.0+0xf8>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fbe:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fc0:	4b24      	ldr	r3, [pc, #144]	; (8008054 <xTaskResumeAll.part.0+0x11c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fc4:	68d2      	ldr	r2, [r2, #12]
 8007fc6:	6852      	ldr	r2, [r2, #4]
 8007fc8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007fca:	4e23      	ldr	r6, [pc, #140]	; (8008058 <xTaskResumeAll.part.0+0x120>)
 8007fcc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8007fce:	b194      	cbz	r4, 8007ff6 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8007fd0:	2701      	movs	r7, #1
 8007fd2:	e006      	b.n	8007fe2 <xTaskResumeAll.part.0+0xaa>
 8007fd4:	f7ff ff0c 	bl	8007df0 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8007fd8:	b108      	cbz	r0, 8007fde <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8007fda:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007fde:	3c01      	subs	r4, #1
 8007fe0:	d008      	beq.n	8007ff4 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe2:	682b      	ldr	r3, [r5, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d0f5      	beq.n	8007fd4 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8007fe8:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007fea:	3c01      	subs	r4, #1
		++xPendedTicks;
 8007fec:	f103 0301 	add.w	r3, r3, #1
 8007ff0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ff2:	d1f6      	bne.n	8007fe2 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8007ff4:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8007ff6:	f8da 3000 	ldr.w	r3, [sl]
 8007ffa:	b14b      	cbz	r3, 8008010 <xTaskResumeAll.part.0+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 8007ffc:	4b17      	ldr	r3, [pc, #92]	; (800805c <xTaskResumeAll.part.0+0x124>)
 8007ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800800c:	2001      	movs	r0, #1
 800800e:	e000      	b.n	8008012 <xTaskResumeAll.part.0+0xda>
BaseType_t xAlreadyYielded = pdFALSE;
 8008010:	2000      	movs	r0, #0
 8008012:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8008014:	f001 f890 	bl	8009138 <vPortExitCritical>
}
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	b003      	add	sp, #12
 800801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008020:	6833      	ldr	r3, [r6, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1a3      	bne.n	8007f6e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008026:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <xTaskResumeAll.part.0+0x118>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	2a00      	cmp	r2, #0
 800802e:	d1c6      	bne.n	8007fbe <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008030:	4b08      	ldr	r3, [pc, #32]	; (8008054 <xTaskResumeAll.part.0+0x11c>)
 8008032:	f04f 32ff 	mov.w	r2, #4294967295
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e7c7      	b.n	8007fca <xTaskResumeAll.part.0+0x92>
 800803a:	f8df a02c 	ldr.w	sl, [pc, #44]	; 8008068 <xTaskResumeAll.part.0+0x130>
 800803e:	e7c4      	b.n	8007fca <xTaskResumeAll.part.0+0x92>
 8008040:	200016c0 	.word	0x200016c0
 8008044:	200016b8 	.word	0x200016b8
 8008048:	20001700 	.word	0x20001700
 800804c:	200016c8 	.word	0x200016c8
 8008050:	2000124c 	.word	0x2000124c
 8008054:	200016f4 	.word	0x200016f4
 8008058:	200016fc 	.word	0x200016fc
 800805c:	e000ed04 	.word	0xe000ed04
 8008060:	20001254 	.word	0x20001254
 8008064:	20001248 	.word	0x20001248
 8008068:	20001744 	.word	0x20001744

0800806c <xTaskCreateStatic>:
	{
 800806c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806e:	b087      	sub	sp, #28
 8008070:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8008074:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 8008076:	b1bd      	cbz	r5, 80080a8 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
 8008078:	b16c      	cbz	r4, 8008096 <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800807a:	276c      	movs	r7, #108	; 0x6c
 800807c:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800807e:	9f05      	ldr	r7, [sp, #20]
 8008080:	2f6c      	cmp	r7, #108	; 0x6c
 8008082:	d01a      	beq.n	80080ba <xTaskCreateStatic+0x4e>
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	e7fe      	b.n	8008094 <xTaskCreateStatic+0x28>
 8008096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80080a6:	e7fe      	b.n	80080a6 <xTaskCreateStatic+0x3a>
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80080b8:	e7fe      	b.n	80080b8 <xTaskCreateStatic+0x4c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080ba:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080bc:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080be:	ad04      	add	r5, sp, #16
 80080c0:	9402      	str	r4, [sp, #8]
 80080c2:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080c4:	f884 7069 	strb.w	r7, [r4, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080c8:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080ca:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080cc:	f7ff fdea 	bl	8007ca4 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7ff fd5d 	bl	8007b90 <prvAddNewTaskToReadyList>
	}
 80080d6:	9804      	ldr	r0, [sp, #16]
 80080d8:	b007      	add	sp, #28
 80080da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080dc <xTaskCreate>:
	{
 80080dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080e0:	4607      	mov	r7, r0
 80080e2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080e4:	0090      	lsls	r0, r2, #2
	{
 80080e6:	4615      	mov	r5, r2
 80080e8:	4688      	mov	r8, r1
 80080ea:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080ec:	f001 f968 	bl	80093c0 <pvPortMalloc>
			if( pxStack != NULL )
 80080f0:	b1e0      	cbz	r0, 800812c <xTaskCreate+0x50>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080f2:	4604      	mov	r4, r0
 80080f4:	206c      	movs	r0, #108	; 0x6c
 80080f6:	f001 f963 	bl	80093c0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80080fa:	4606      	mov	r6, r0
 80080fc:	b1d8      	cbz	r0, 8008136 <xTaskCreate+0x5a>
					pxNewTCB->pxStack = pxStack;
 80080fe:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008100:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008104:	9c0d      	ldr	r4, [sp, #52]	; 0x34
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008106:	f886 c069 	strb.w	ip, [r6, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800810a:	9401      	str	r4, [sp, #4]
 800810c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800810e:	9602      	str	r6, [sp, #8]
 8008110:	464b      	mov	r3, r9
 8008112:	462a      	mov	r2, r5
 8008114:	4641      	mov	r1, r8
 8008116:	4638      	mov	r0, r7
 8008118:	9400      	str	r4, [sp, #0]
 800811a:	f7ff fdc3 	bl	8007ca4 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800811e:	4630      	mov	r0, r6
 8008120:	f7ff fd36 	bl	8007b90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008124:	2001      	movs	r0, #1
	}
 8008126:	b005      	add	sp, #20
 8008128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800812c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008130:	b005      	add	sp, #20
 8008132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008136:	4620      	mov	r0, r4
 8008138:	f001 f9fe 	bl	8009538 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800813c:	f04f 30ff 	mov.w	r0, #4294967295
 8008140:	e7f1      	b.n	8008126 <xTaskCreate+0x4a>
 8008142:	bf00      	nop

08008144 <vTaskDelayUntil>:
		configASSERT( pxPreviousWakeTime );
 8008144:	b338      	cbz	r0, 8008196 <vTaskDelayUntil+0x52>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008146:	b941      	cbnz	r1, 800815a <vTaskDelayUntil+0x16>
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	e7fe      	b.n	8008158 <vTaskDelayUntil+0x14>
	{
 800815a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		configASSERT( uxSchedulerSuspended == 0 );
 800815e:	4f31      	ldr	r7, [pc, #196]	; (8008224 <vTaskDelayUntil+0xe0>)
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	bb0b      	cbnz	r3, 80081a8 <vTaskDelayUntil+0x64>
	++uxSchedulerSuspended;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	3301      	adds	r3, #1
 8008168:	603b      	str	r3, [r7, #0]
			const TickType_t xConstTickCount = xTickCount;
 800816a:	4d2f      	ldr	r5, [pc, #188]	; (8008228 <vTaskDelayUntil+0xe4>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800816c:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 800816e:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008170:	1854      	adds	r4, r2, r1
 8008172:	bf2c      	ite	cs
 8008174:	2101      	movcs	r1, #1
 8008176:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8008178:	429a      	cmp	r2, r3
			*pxPreviousWakeTime = xTimeToWake;
 800817a:	6004      	str	r4, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 800817c:	d92a      	bls.n	80081d4 <vTaskDelayUntil+0x90>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800817e:	bb51      	cbnz	r1, 80081d6 <vTaskDelayUntil+0x92>
	configASSERT( uxSchedulerSuspended );
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	b9d3      	cbnz	r3, 80081ba <vTaskDelayUntil+0x76>
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	e7fe      	b.n	8008194 <vTaskDelayUntil+0x50>
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 80081a6:	e7fe      	b.n	80081a6 <vTaskDelayUntil+0x62>
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
		configASSERT( uxSchedulerSuspended == 0 );
 80081b8:	e7fe      	b.n	80081b8 <vTaskDelayUntil+0x74>
 80081ba:	f7ff febd 	bl	8007f38 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80081be:	b938      	cbnz	r0, 80081d0 <vTaskDelayUntil+0x8c>
			portYIELD_WITHIN_API();
 80081c0:	4b1a      	ldr	r3, [pc, #104]	; (800822c <vTaskDelayUntil+0xe8>)
 80081c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
	}
 80081d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80081d4:	b909      	cbnz	r1, 80081da <vTaskDelayUntil+0x96>
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	d2d2      	bcs.n	8008180 <vTaskDelayUntil+0x3c>
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80081da:	4e15      	ldr	r6, [pc, #84]	; (8008230 <vTaskDelayUntil+0xec>)
const TickType_t xConstTickCount = xTickCount;
 80081dc:	f8d5 8000 	ldr.w	r8, [r5]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80081e0:	6832      	ldr	r2, [r6, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081e2:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80081e4:	2100      	movs	r1, #0
 80081e6:	eba8 0503 	sub.w	r5, r8, r3
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ea:	3004      	adds	r0, #4
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80081ec:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081f0:	f7ff f860 	bl	80072b4 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081f4:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081f6:	6833      	ldr	r3, [r6, #0]

			if( xTimeToWake < xConstTickCount )
 80081f8:	45a0      	cmp	r8, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081fa:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081fc:	d906      	bls.n	800820c <vTaskDelayUntil+0xc8>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081fe:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <vTaskDelayUntil+0xf0>)
 8008200:	6818      	ldr	r0, [r3, #0]
 8008202:	6831      	ldr	r1, [r6, #0]
 8008204:	3104      	adds	r1, #4
 8008206:	f7ff f83d 	bl	8007284 <vListInsert>
 800820a:	e7b9      	b.n	8008180 <vTaskDelayUntil+0x3c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <vTaskDelayUntil+0xf4>)
 800820e:	6818      	ldr	r0, [r3, #0]
 8008210:	6831      	ldr	r1, [r6, #0]
 8008212:	3104      	adds	r1, #4
 8008214:	f7ff f836 	bl	8007284 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8008218:	4b08      	ldr	r3, [pc, #32]	; (800823c <vTaskDelayUntil+0xf8>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 800821e:	bf38      	it	cc
 8008220:	601c      	strcc	r4, [r3, #0]
 8008222:	e7ad      	b.n	8008180 <vTaskDelayUntil+0x3c>
 8008224:	200016c0 	.word	0x200016c0
 8008228:	20001740 	.word	0x20001740
 800822c:	e000ed04 	.word	0xe000ed04
 8008230:	20001248 	.word	0x20001248
 8008234:	20001250 	.word	0x20001250
 8008238:	2000124c 	.word	0x2000124c
 800823c:	200016f4 	.word	0x200016f4

08008240 <vTaskResume>:
		configASSERT( xTaskToResume );
 8008240:	b198      	cbz	r0, 800826a <vTaskResume+0x2a>
	{
 8008242:	b530      	push	{r4, r5, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8008244:	4d21      	ldr	r5, [pc, #132]	; (80082cc <vTaskResume+0x8c>)
 8008246:	682b      	ldr	r3, [r5, #0]
 8008248:	4283      	cmp	r3, r0
	{
 800824a:	b083      	sub	sp, #12
 800824c:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800824e:	d00a      	beq.n	8008266 <vTaskResume+0x26>
			taskENTER_CRITICAL();
 8008250:	f000 ff50 	bl	80090f4 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008254:	4b1e      	ldr	r3, [pc, #120]	; (80082d0 <vTaskResume+0x90>)
 8008256:	6962      	ldr	r2, [r4, #20]
 8008258:	429a      	cmp	r2, r3
 800825a:	d00f      	beq.n	800827c <vTaskResume+0x3c>
	}
 800825c:	b003      	add	sp, #12
 800825e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			taskEXIT_CRITICAL();
 8008262:	f000 bf69 	b.w	8009138 <vPortExitCritical>
	}
 8008266:	b003      	add	sp, #12
 8008268:	bd30      	pop	{r4, r5, pc}
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 800827a:	e7fe      	b.n	800827a <vTaskResume+0x3a>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800827c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800827e:	4a15      	ldr	r2, [pc, #84]	; (80082d4 <vTaskResume+0x94>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d0eb      	beq.n	800825c <vTaskResume+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e9      	bne.n	800825c <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008288:	1d21      	adds	r1, r4, #4
 800828a:	4608      	mov	r0, r1
 800828c:	9101      	str	r1, [sp, #4]
 800828e:	f7ff f811 	bl	80072b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008292:	4a11      	ldr	r2, [pc, #68]	; (80082d8 <vTaskResume+0x98>)
 8008294:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008296:	6810      	ldr	r0, [r2, #0]
 8008298:	9901      	ldr	r1, [sp, #4]
 800829a:	4283      	cmp	r3, r0
 800829c:	480f      	ldr	r0, [pc, #60]	; (80082dc <vTaskResume+0x9c>)
 800829e:	bf88      	it	hi
 80082a0:	6013      	strhi	r3, [r2, #0]
 80082a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80082a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80082aa:	f7fe ffdb 	bl	8007264 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082ae:	682b      	ldr	r3, [r5, #0]
 80082b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d3d1      	bcc.n	800825c <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 80082b8:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <vTaskResume+0xa0>)
 80082ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	e7c8      	b.n	800825c <vTaskResume+0x1c>
 80082ca:	bf00      	nop
 80082cc:	20001248 	.word	0x20001248
 80082d0:	20001718 	.word	0x20001718
 80082d4:	20001700 	.word	0x20001700
 80082d8:	200016c8 	.word	0x200016c8
 80082dc:	20001254 	.word	0x20001254
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <vTaskStartScheduler>:
{
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082e8:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ea:	4668      	mov	r0, sp
 80082ec:	aa02      	add	r2, sp, #8
 80082ee:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082f0:	e9cd 3300 	strd	r3, r3, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082f4:	f7fe ff88 	bl	8007208 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082f8:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 80082fa:	b1c8      	cbz	r0, 8008330 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082fc:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 80082fe:	b174      	cbz	r4, 800831e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008300:	236c      	movs	r3, #108	; 0x6c
 8008302:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008304:	9b03      	ldr	r3, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008306:	9d02      	ldr	r5, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008308:	2b6c      	cmp	r3, #108	; 0x6c
 800830a:	d01a      	beq.n	8008342 <vTaskStartScheduler+0x5e>
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	e7fe      	b.n	800831c <vTaskStartScheduler+0x38>
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800832e:	e7fe      	b.n	800832e <vTaskStartScheduler+0x4a>
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8008340:	e7fe      	b.n	8008340 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008342:	00ad      	lsls	r5, r5, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008344:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008346:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008348:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800834c:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800834e:	6320      	str	r0, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008350:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008352:	f001 f987 	bl	8009664 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008356:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008358:	4a2c      	ldr	r2, [pc, #176]	; (800840c <vTaskStartScheduler+0x128>)
 800835a:	3d04      	subs	r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800835c:	4621      	mov	r1, r4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800835e:	441d      	add	r5, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008360:	2349      	movs	r3, #73	; 0x49
 8008362:	f801 3f34 	strb.w	r3, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008366:	f025 0607 	bic.w	r6, r5, #7
			if( pcName[ x ] == ( char ) 0x00 )
 800836a:	f102 0017 	add.w	r0, r2, #23
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800836e:	4290      	cmp	r0, r2
 8008370:	d005      	beq.n	800837e <vTaskStartScheduler+0x9a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008372:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8008376:	f801 3f01 	strb.w	r3, [r1, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f7      	bne.n	800836e <vTaskStartScheduler+0x8a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800837e:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008380:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8008382:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008386:	f884 504b 	strb.w	r5, [r4, #75]	; 0x4b
	pxNewTCB->uxPriority = uxPriority;
 800838a:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800838c:	f7fe ff66 	bl	800725c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008390:	f104 0018 	add.w	r0, r4, #24
 8008394:	f7fe ff62 	bl	800725c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008398:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800839a:	491d      	ldr	r1, [pc, #116]	; (8008410 <vTaskStartScheduler+0x12c>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800839c:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800839e:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 80083a0:	6665      	str	r5, [r4, #100]	; 0x64
		pxNewTCB->ulRunTimeCounter = 0UL;
 80083a2:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083a6:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 80083aa:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083ae:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083b0:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083b2:	4630      	mov	r0, r6
 80083b4:	f000 fe72 	bl	800909c <pxPortInitialiseStack>
 80083b8:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80083ba:	4620      	mov	r0, r4
 80083bc:	f7ff fbe8 	bl	8007b90 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 80083c0:	f000 fdd0 	bl	8008f64 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80083c4:	2801      	cmp	r0, #1
 80083c6:	d003      	beq.n	80083d0 <vTaskStartScheduler+0xec>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083c8:	3001      	adds	r0, #1
 80083ca:	d016      	beq.n	80083fa <vTaskStartScheduler+0x116>
}
 80083cc:	b004      	add	sp, #16
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80083e0:	490c      	ldr	r1, [pc, #48]	; (8008414 <vTaskStartScheduler+0x130>)
		xSchedulerRunning = pdTRUE;
 80083e2:	4a0d      	ldr	r2, [pc, #52]	; (8008418 <vTaskStartScheduler+0x134>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083e4:	4b0d      	ldr	r3, [pc, #52]	; (800841c <vTaskStartScheduler+0x138>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80083e6:	f04f 34ff 	mov.w	r4, #4294967295
 80083ea:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80083ec:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083ee:	601d      	str	r5, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80083f0:	f7f9 fa06 	bl	8001800 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 80083f4:	f000 ff1a 	bl	800922c <xPortStartScheduler>
 80083f8:	e7e8      	b.n	80083cc <vTaskStartScheduler+0xe8>
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800840a:	e7fe      	b.n	800840a <vTaskStartScheduler+0x126>
 800840c:	0800ad74 	.word	0x0800ad74
 8008410:	08007d4d 	.word	0x08007d4d
 8008414:	200016f4 	.word	0x200016f4
 8008418:	20001714 	.word	0x20001714
 800841c:	20001740 	.word	0x20001740

08008420 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008420:	4a02      	ldr	r2, [pc, #8]	; (800842c <vTaskSuspendAll+0xc>)
 8008422:	6813      	ldr	r3, [r2, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	6013      	str	r3, [r2, #0]
}
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	200016c0 	.word	0x200016c0

08008430 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8008430:	4b06      	ldr	r3, [pc, #24]	; (800844c <xTaskResumeAll+0x1c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	b943      	cbnz	r3, 8008448 <xTaskResumeAll+0x18>
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	e7fe      	b.n	8008446 <xTaskResumeAll+0x16>
 8008448:	f7ff bd76 	b.w	8007f38 <xTaskResumeAll.part.0>
 800844c:	200016c0 	.word	0x200016c0

08008450 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008450:	4b01      	ldr	r3, [pc, #4]	; (8008458 <xTaskGetTickCount+0x8>)
 8008452:	6818      	ldr	r0, [r3, #0]
}
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	20001740 	.word	0x20001740

0800845c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800845c:	4b05      	ldr	r3, [pc, #20]	; (8008474 <xTaskIncrementTick+0x18>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	b90b      	cbnz	r3, 8008466 <xTaskIncrementTick+0xa>
 8008462:	f7ff bcc5 	b.w	8007df0 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8008466:	4a04      	ldr	r2, [pc, #16]	; (8008478 <xTaskIncrementTick+0x1c>)
 8008468:	6813      	ldr	r3, [r2, #0]
 800846a:	3301      	adds	r3, #1
 800846c:	6013      	str	r3, [r2, #0]
}
 800846e:	2000      	movs	r0, #0
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	200016c0 	.word	0x200016c0
 8008478:	200016fc 	.word	0x200016fc

0800847c <vTaskSwitchContext>:
{
 800847c:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800847e:	4b20      	ldr	r3, [pc, #128]	; (8008500 <vTaskSwitchContext+0x84>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	b11b      	cbz	r3, 800848c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008484:	4b1f      	ldr	r3, [pc, #124]	; (8008504 <vTaskSwitchContext+0x88>)
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
}
 800848a:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 800848c:	4a1d      	ldr	r2, [pc, #116]	; (8008504 <vTaskSwitchContext+0x88>)
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800848e:	4c1e      	ldr	r4, [pc, #120]	; (8008508 <vTaskSwitchContext+0x8c>)
		xYieldPending = pdFALSE;
 8008490:	6013      	str	r3, [r2, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008492:	f7f9 f9b7 	bl	8001804 <getRunTimeCounterValue>
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008496:	491d      	ldr	r1, [pc, #116]	; (800850c <vTaskSwitchContext+0x90>)
 8008498:	680d      	ldr	r5, [r1, #0]
 800849a:	42a8      	cmp	r0, r5
 800849c:	d904      	bls.n	80084a8 <vTaskSwitchContext+0x2c>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80084a2:	1b5b      	subs	r3, r3, r5
 80084a4:	4403      	add	r3, r0
 80084a6:	6613      	str	r3, [r2, #96]	; 0x60
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a8:	4d19      	ldr	r5, [pc, #100]	; (8008510 <vTaskSwitchContext+0x94>)
			ulTaskSwitchedInTime = ulTotalRunTime;
 80084aa:	6008      	str	r0, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	4a19      	ldr	r2, [pc, #100]	; (8008514 <vTaskSwitchContext+0x98>)
 80084b0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80084b4:	0080      	lsls	r0, r0, #2
 80084b6:	0099      	lsls	r1, r3, #2
 80084b8:	5810      	ldr	r0, [r2, r0]
 80084ba:	b940      	cbnz	r0, 80084ce <vTaskSwitchContext+0x52>
 80084bc:	b1bb      	cbz	r3, 80084ee <vTaskSwitchContext+0x72>
 80084be:	3b01      	subs	r3, #1
 80084c0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80084c4:	0099      	lsls	r1, r3, #2
 80084c6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d0f6      	beq.n	80084bc <vTaskSwitchContext+0x40>
 80084ce:	4419      	add	r1, r3
 80084d0:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80084d4:	4602      	mov	r2, r0
 80084d6:	6841      	ldr	r1, [r0, #4]
 80084d8:	6849      	ldr	r1, [r1, #4]
 80084da:	6041      	str	r1, [r0, #4]
 80084dc:	3208      	adds	r2, #8
 80084de:	4291      	cmp	r1, r2
 80084e0:	bf04      	itt	eq
 80084e2:	6849      	ldreq	r1, [r1, #4]
 80084e4:	6041      	streq	r1, [r0, #4]
 80084e6:	68ca      	ldr	r2, [r1, #12]
 80084e8:	6022      	str	r2, [r4, #0]
 80084ea:	602b      	str	r3, [r5, #0]
}
 80084ec:	bd38      	pop	{r3, r4, r5, pc}
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084fe:	e7fe      	b.n	80084fe <vTaskSwitchContext+0x82>
 8008500:	200016c0 	.word	0x200016c0
 8008504:	20001744 	.word	0x20001744
 8008508:	20001248 	.word	0x20001248
 800850c:	200016b4 	.word	0x200016b4
 8008510:	200016c8 	.word	0x200016c8
 8008514:	20001254 	.word	0x20001254

08008518 <vTaskSuspend>:
	{
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800851c:	4d2d      	ldr	r5, [pc, #180]	; (80085d4 <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 800851e:	f000 fde9 	bl	80090f4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8008522:	2c00      	cmp	r4, #0
 8008524:	d03a      	beq.n	800859c <vTaskSuspend+0x84>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008526:	1d26      	adds	r6, r4, #4
 8008528:	4630      	mov	r0, r6
 800852a:	f7fe fec3 	bl	80072b4 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800852e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008530:	b11b      	cbz	r3, 800853a <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008532:	f104 0018 	add.w	r0, r4, #24
 8008536:	f7fe febd 	bl	80072b4 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800853a:	4631      	mov	r1, r6
 800853c:	4826      	ldr	r0, [pc, #152]	; (80085d8 <vTaskSuspend+0xc0>)
		if( xSchedulerRunning != pdFALSE )
 800853e:	4e27      	ldr	r6, [pc, #156]	; (80085dc <vTaskSuspend+0xc4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8008540:	f7fe fe90 	bl	8007264 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008544:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8008548:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800854a:	bf04      	itt	eq
 800854c:	2300      	moveq	r3, #0
 800854e:	f884 3068 	strbeq.w	r3, [r4, #104]	; 0x68
		taskEXIT_CRITICAL();
 8008552:	f000 fdf1 	bl	8009138 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8008556:	6833      	ldr	r3, [r6, #0]
 8008558:	b98b      	cbnz	r3, 800857e <vTaskSuspend+0x66>
		if( pxTCB == pxCurrentTCB )
 800855a:	682b      	ldr	r3, [r5, #0]
 800855c:	42a3      	cmp	r3, r4
 800855e:	d000      	beq.n	8008562 <vTaskSuspend+0x4a>
	}
 8008560:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 8008562:	6833      	ldr	r3, [r6, #0]
 8008564:	b30b      	cbz	r3, 80085aa <vTaskSuspend+0x92>
				configASSERT( uxSchedulerSuspended == 0 );
 8008566:	4b1e      	ldr	r3, [pc, #120]	; (80085e0 <vTaskSuspend+0xc8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	b333      	cbz	r3, 80085ba <vTaskSuspend+0xa2>
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	e7fe      	b.n	800857c <vTaskSuspend+0x64>
			taskENTER_CRITICAL();
 800857e:	f000 fdb9 	bl	80090f4 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008582:	4b18      	ldr	r3, [pc, #96]	; (80085e4 <vTaskSuspend+0xcc>)
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	6812      	ldr	r2, [r2, #0]
 8008588:	b152      	cbz	r2, 80085a0 <vTaskSuspend+0x88>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800858a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800858c:	4b16      	ldr	r3, [pc, #88]	; (80085e8 <vTaskSuspend+0xd0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800858e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008590:	68d2      	ldr	r2, [r2, #12]
 8008592:	6852      	ldr	r2, [r2, #4]
 8008594:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8008596:	f000 fdcf 	bl	8009138 <vPortExitCritical>
 800859a:	e7de      	b.n	800855a <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800859c:	682c      	ldr	r4, [r5, #0]
 800859e:	e7c2      	b.n	8008526 <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 80085a0:	4b11      	ldr	r3, [pc, #68]	; (80085e8 <vTaskSuspend+0xd0>)
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	e7f5      	b.n	8008596 <vTaskSuspend+0x7e>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80085aa:	490b      	ldr	r1, [pc, #44]	; (80085d8 <vTaskSuspend+0xc0>)
 80085ac:	4a0f      	ldr	r2, [pc, #60]	; (80085ec <vTaskSuspend+0xd4>)
 80085ae:	6809      	ldr	r1, [r1, #0]
 80085b0:	6812      	ldr	r2, [r2, #0]
 80085b2:	4291      	cmp	r1, r2
 80085b4:	d10a      	bne.n	80085cc <vTaskSuspend+0xb4>
					pxCurrentTCB = NULL;
 80085b6:	602b      	str	r3, [r5, #0]
	}
 80085b8:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 80085ba:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <vTaskSuspend+0xd8>)
 80085bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	f3bf 8f6f 	isb	sy
	}
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 80085d0:	f7ff bf54 	b.w	800847c <vTaskSwitchContext>
 80085d4:	20001248 	.word	0x20001248
 80085d8:	20001718 	.word	0x20001718
 80085dc:	20001714 	.word	0x20001714
 80085e0:	200016c0 	.word	0x200016c0
 80085e4:	2000124c 	.word	0x2000124c
 80085e8:	200016f4 	.word	0x200016f4
 80085ec:	200016b8 	.word	0x200016b8
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80085f4:	b1f0      	cbz	r0, 8008634 <vTaskPlaceOnEventList+0x40>
{
 80085f6:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085f8:	4d1c      	ldr	r5, [pc, #112]	; (800866c <vTaskPlaceOnEventList+0x78>)
 80085fa:	460c      	mov	r4, r1
 80085fc:	6829      	ldr	r1, [r5, #0]
 80085fe:	3118      	adds	r1, #24
 8008600:	f7fe fe40 	bl	8007284 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8008604:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <vTaskPlaceOnEventList+0x7c>)
 8008606:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8008608:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800860a:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800860c:	2200      	movs	r2, #0
 800860e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008612:	3004      	adds	r0, #4
 8008614:	f7fe fe4e 	bl	80072b4 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008618:	1c63      	adds	r3, r4, #1
 800861a:	d014      	beq.n	8008646 <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	19a4      	adds	r4, r4, r6
 8008620:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008622:	d317      	bcc.n	8008654 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008624:	4b13      	ldr	r3, [pc, #76]	; (8008674 <vTaskPlaceOnEventList+0x80>)
 8008626:	6818      	ldr	r0, [r3, #0]
 8008628:	6829      	ldr	r1, [r5, #0]
}
 800862a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800862e:	3104      	adds	r1, #4
 8008630:	f7fe be28 	b.w	8007284 <vListInsert>
 8008634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8008644:	e7fe      	b.n	8008644 <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008646:	6829      	ldr	r1, [r5, #0]
 8008648:	480b      	ldr	r0, [pc, #44]	; (8008678 <vTaskPlaceOnEventList+0x84>)
}
 800864a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800864e:	3104      	adds	r1, #4
 8008650:	f7fe be08 	b.w	8007264 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008654:	4b09      	ldr	r3, [pc, #36]	; (800867c <vTaskPlaceOnEventList+0x88>)
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	6829      	ldr	r1, [r5, #0]
 800865a:	3104      	adds	r1, #4
 800865c:	f7fe fe12 	bl	8007284 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008660:	4b07      	ldr	r3, [pc, #28]	; (8008680 <vTaskPlaceOnEventList+0x8c>)
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8008666:	bf38      	it	cc
 8008668:	601c      	strcc	r4, [r3, #0]
}
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	20001248 	.word	0x20001248
 8008670:	20001740 	.word	0x20001740
 8008674:	20001250 	.word	0x20001250
 8008678:	20001718 	.word	0x20001718
 800867c:	2000124c 	.word	0x2000124c
 8008680:	200016f4 	.word	0x200016f4

08008684 <vTaskPlaceOnEventListRestricted>:
	{
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 8008686:	b360      	cbz	r0, 80086e2 <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008688:	4d20      	ldr	r5, [pc, #128]	; (800870c <vTaskPlaceOnEventListRestricted+0x88>)
 800868a:	460c      	mov	r4, r1
 800868c:	6829      	ldr	r1, [r5, #0]
 800868e:	4616      	mov	r6, r2
 8008690:	3118      	adds	r1, #24
 8008692:	f7fe fde7 	bl	8007264 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8008696:	4b1e      	ldr	r3, [pc, #120]	; (8008710 <vTaskPlaceOnEventListRestricted+0x8c>)
		if( xWaitIndefinitely != pdFALSE )
 8008698:	b99e      	cbnz	r6, 80086c2 <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 800869a:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800869c:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800869e:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80086a0:	f883 606a 	strb.w	r6, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086a4:	3004      	adds	r0, #4
 80086a6:	f7fe fe05 	bl	80072b4 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	19e4      	adds	r4, r4, r7
 80086ae:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086b0:	d320      	bcc.n	80086f4 <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086b2:	4b18      	ldr	r3, [pc, #96]	; (8008714 <vTaskPlaceOnEventListRestricted+0x90>)
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	6829      	ldr	r1, [r5, #0]
	}
 80086b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086bc:	3104      	adds	r1, #4
 80086be:	f7fe bde1 	b.w	8007284 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80086c2:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80086c4:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086c6:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086ce:	3004      	adds	r0, #4
 80086d0:	f7fe fdf0 	bl	80072b4 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d4:	6829      	ldr	r1, [r5, #0]
 80086d6:	4810      	ldr	r0, [pc, #64]	; (8008718 <vTaskPlaceOnEventListRestricted+0x94>)
	}
 80086d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086dc:	3104      	adds	r1, #4
 80086de:	f7fe bdc1 	b.w	8007264 <vListInsertEnd>
 80086e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80086f2:	e7fe      	b.n	80086f2 <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086f4:	4b09      	ldr	r3, [pc, #36]	; (800871c <vTaskPlaceOnEventListRestricted+0x98>)
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	6829      	ldr	r1, [r5, #0]
 80086fa:	3104      	adds	r1, #4
 80086fc:	f7fe fdc2 	bl	8007284 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <vTaskPlaceOnEventListRestricted+0x9c>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8008706:	bf38      	it	cc
 8008708:	601c      	strcc	r4, [r3, #0]
	}
 800870a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800870c:	20001248 	.word	0x20001248
 8008710:	20001740 	.word	0x20001740
 8008714:	20001250 	.word	0x20001250
 8008718:	20001718 	.word	0x20001718
 800871c:	2000124c 	.word	0x2000124c
 8008720:	200016f4 	.word	0x200016f4

08008724 <xTaskRemoveFromEventList>:
{
 8008724:	b510      	push	{r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008726:	68c3      	ldr	r3, [r0, #12]
 8008728:	68dc      	ldr	r4, [r3, #12]
{
 800872a:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 800872c:	2c00      	cmp	r4, #0
 800872e:	d02c      	beq.n	800878a <xTaskRemoveFromEventList+0x66>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008730:	f104 0118 	add.w	r1, r4, #24
 8008734:	4608      	mov	r0, r1
 8008736:	9101      	str	r1, [sp, #4]
 8008738:	f7fe fdbc 	bl	80072b4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800873c:	4b17      	ldr	r3, [pc, #92]	; (800879c <xTaskRemoveFromEventList+0x78>)
 800873e:	9901      	ldr	r1, [sp, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	b173      	cbz	r3, 8008762 <xTaskRemoveFromEventList+0x3e>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008744:	4816      	ldr	r0, [pc, #88]	; (80087a0 <xTaskRemoveFromEventList+0x7c>)
 8008746:	f7fe fd8d 	bl	8007264 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800874a:	4b16      	ldr	r3, [pc, #88]	; (80087a4 <xTaskRemoveFromEventList+0x80>)
 800874c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008752:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008754:	bf85      	ittet	hi
 8008756:	4b14      	ldrhi	r3, [pc, #80]	; (80087a8 <xTaskRemoveFromEventList+0x84>)
 8008758:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 800875a:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800875c:	6018      	strhi	r0, [r3, #0]
}
 800875e:	b002      	add	sp, #8
 8008760:	bd10      	pop	{r4, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008762:	1d21      	adds	r1, r4, #4
 8008764:	4608      	mov	r0, r1
 8008766:	9101      	str	r1, [sp, #4]
 8008768:	f7fe fda4 	bl	80072b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800876c:	4a0f      	ldr	r2, [pc, #60]	; (80087ac <xTaskRemoveFromEventList+0x88>)
 800876e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008770:	6810      	ldr	r0, [r2, #0]
 8008772:	9901      	ldr	r1, [sp, #4]
 8008774:	4283      	cmp	r3, r0
 8008776:	480e      	ldr	r0, [pc, #56]	; (80087b0 <xTaskRemoveFromEventList+0x8c>)
 8008778:	bf88      	it	hi
 800877a:	6013      	strhi	r3, [r2, #0]
 800877c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008780:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008784:	f7fe fd6e 	bl	8007264 <vListInsertEnd>
 8008788:	e7df      	b.n	800874a <xTaskRemoveFromEventList+0x26>
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800879a:	e7fe      	b.n	800879a <xTaskRemoveFromEventList+0x76>
 800879c:	200016c0 	.word	0x200016c0
 80087a0:	20001700 	.word	0x20001700
 80087a4:	20001248 	.word	0x20001248
 80087a8:	20001744 	.word	0x20001744
 80087ac:	200016c8 	.word	0x200016c8
 80087b0:	20001254 	.word	0x20001254

080087b4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087b4:	4a03      	ldr	r2, [pc, #12]	; (80087c4 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087b6:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087b8:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	e9c0 2300 	strd	r2, r3, [r0]
}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	200016f8 	.word	0x200016f8
 80087c8:	20001740 	.word	0x20001740

080087cc <xTaskCheckForTimeOut>:
{
 80087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 80087ce:	b318      	cbz	r0, 8008818 <xTaskCheckForTimeOut+0x4c>
	configASSERT( pxTicksToWait );
 80087d0:	460e      	mov	r6, r1
 80087d2:	b1c1      	cbz	r1, 8008806 <xTaskCheckForTimeOut+0x3a>
	taskENTER_CRITICAL();
 80087d4:	4605      	mov	r5, r0
 80087d6:	f000 fc8d 	bl	80090f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80087da:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8008868 <xTaskCheckForTimeOut+0x9c>
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80087de:	4b20      	ldr	r3, [pc, #128]	; (8008860 <xTaskCheckForTimeOut+0x94>)
		const TickType_t xConstTickCount = xTickCount;
 80087e0:	f8dc 1000 	ldr.w	r1, [ip]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	f892 406a 	ldrb.w	r4, [r2, #106]	; 0x6a
 80087ea:	b9f4      	cbnz	r4, 800882a <xTaskCheckForTimeOut+0x5e>
			if( *pxTicksToWait == portMAX_DELAY )
 80087ec:	6833      	ldr	r3, [r6, #0]
 80087ee:	1c5a      	adds	r2, r3, #1
 80087f0:	d020      	beq.n	8008834 <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087f2:	4c1c      	ldr	r4, [pc, #112]	; (8008864 <xTaskCheckForTimeOut+0x98>)
 80087f4:	e9d5 0200 	ldrd	r0, r2, [r5]
 80087f8:	6827      	ldr	r7, [r4, #0]
 80087fa:	42b8      	cmp	r0, r7
 80087fc:	d01e      	beq.n	800883c <xTaskCheckForTimeOut+0x70>
 80087fe:	428a      	cmp	r2, r1
 8008800:	d81c      	bhi.n	800883c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
 8008802:	2401      	movs	r4, #1
 8008804:	e016      	b.n	8008834 <xTaskCheckForTimeOut+0x68>
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8008816:	e7fe      	b.n	8008816 <xTaskCheckForTimeOut+0x4a>
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8008828:	e7fe      	b.n	8008828 <xTaskCheckForTimeOut+0x5c>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 8008832:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008834:	f000 fc80 	bl	8009138 <vPortExitCritical>
}
 8008838:	4620      	mov	r0, r4
 800883a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800883c:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800883e:	42bb      	cmp	r3, r7
 8008840:	d909      	bls.n	8008856 <xTaskCheckForTimeOut+0x8a>
			*pxTicksToWait -= xElapsedTime;
 8008842:	1a5b      	subs	r3, r3, r1
 8008844:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008846:	6821      	ldr	r1, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008848:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
 800884c:	6033      	str	r3, [r6, #0]
			xReturn = pdFALSE;
 800884e:	2400      	movs	r4, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008850:	e9c5 1200 	strd	r1, r2, [r5]
			xReturn = pdFALSE;
 8008854:	e7ee      	b.n	8008834 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	6033      	str	r3, [r6, #0]
			xReturn = pdTRUE;
 800885a:	2401      	movs	r4, #1
 800885c:	e7ea      	b.n	8008834 <xTaskCheckForTimeOut+0x68>
 800885e:	bf00      	nop
 8008860:	20001248 	.word	0x20001248
 8008864:	200016f8 	.word	0x200016f8
 8008868:	20001740 	.word	0x20001740

0800886c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800886c:	4b01      	ldr	r3, [pc, #4]	; (8008874 <vTaskMissedYield+0x8>)
 800886e:	2201      	movs	r2, #1
 8008870:	601a      	str	r2, [r3, #0]
}
 8008872:	4770      	bx	lr
 8008874:	20001744 	.word	0x20001744

08008878 <uxTaskGetStackHighWaterMark>:
		pxTCB = prvGetTCBFromHandle( xTask );
 8008878:	b168      	cbz	r0, 8008896 <uxTaskGetStackHighWaterMark+0x1e>
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800887a:	6b03      	ldr	r3, [r0, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800887c:	781a      	ldrb	r2, [r3, #0]
 800887e:	2aa5      	cmp	r2, #165	; 0xa5
 8008880:	d10f      	bne.n	80088a2 <uxTaskGetStackHighWaterMark+0x2a>
 8008882:	f1c3 0101 	rsb	r1, r3, #1
			ulCount++;
 8008886:	18c8      	adds	r0, r1, r3
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008888:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800888c:	2aa5      	cmp	r2, #165	; 0xa5
 800888e:	d0fa      	beq.n	8008886 <uxTaskGetStackHighWaterMark+0xe>
 8008890:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8008894:	4770      	bx	lr
		pxTCB = prvGetTCBFromHandle( xTask );
 8008896:	4b04      	ldr	r3, [pc, #16]	; (80088a8 <uxTaskGetStackHighWaterMark+0x30>)
 8008898:	6818      	ldr	r0, [r3, #0]
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800889a:	6b03      	ldr	r3, [r0, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800889c:	781a      	ldrb	r2, [r3, #0]
 800889e:	2aa5      	cmp	r2, #165	; 0xa5
 80088a0:	d0ef      	beq.n	8008882 <uxTaskGetStackHighWaterMark+0xa>
 80088a2:	2000      	movs	r0, #0
	}
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	20001248 	.word	0x20001248

080088ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <xTaskGetSchedulerState+0x18>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	b133      	cbz	r3, 80088c0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b2:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <xTaskGetSchedulerState+0x1c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80088b8:	bf0c      	ite	eq
 80088ba:	2002      	moveq	r0, #2
 80088bc:	2000      	movne	r0, #0
 80088be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088c0:	2001      	movs	r0, #1
	}
 80088c2:	4770      	bx	lr
 80088c4:	20001714 	.word	0x20001714
 80088c8:	200016c0 	.word	0x200016c0

080088cc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80088cc:	b1d0      	cbz	r0, 8008904 <xTaskPriorityDisinherit+0x38>
	{
 80088ce:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80088d0:	4b1e      	ldr	r3, [pc, #120]	; (800894c <xTaskPriorityDisinherit+0x80>)
 80088d2:	681c      	ldr	r4, [r3, #0]
 80088d4:	4284      	cmp	r4, r0
	{
 80088d6:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 80088d8:	d008      	beq.n	80088ec <xTaskPriorityDisinherit+0x20>
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	e7fe      	b.n	80088ea <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80088ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088ee:	b15b      	cbz	r3, 8008908 <xTaskPriorityDisinherit+0x3c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80088f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
			( pxTCB->uxMutexesHeld )--;
 80088f4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088f6:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80088f8:	65a3      	str	r3, [r4, #88]	; 0x58
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088fa:	d000      	beq.n	80088fe <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088fc:	b16b      	cbz	r3, 800891a <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 80088fe:	2000      	movs	r0, #0
	}
 8008900:	b003      	add	sp, #12
 8008902:	bd30      	pop	{r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8008904:	2000      	movs	r0, #0
	}
 8008906:	4770      	bx	lr
 8008908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8008918:	e7fe      	b.n	8008918 <xTaskPriorityDisinherit+0x4c>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800891a:	1d21      	adds	r1, r4, #4
 800891c:	4608      	mov	r0, r1
 800891e:	9101      	str	r1, [sp, #4]
 8008920:	f7fe fcc8 	bl	80072b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008924:	4a0a      	ldr	r2, [pc, #40]	; (8008950 <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008926:	6d63      	ldr	r3, [r4, #84]	; 0x54
					prvAddTaskToReadyList( pxTCB );
 8008928:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800892a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800892c:	4283      	cmp	r3, r0
 800892e:	4809      	ldr	r0, [pc, #36]	; (8008954 <xTaskPriorityDisinherit+0x88>)
 8008930:	bf88      	it	hi
 8008932:	6013      	strhi	r3, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008934:	f1c3 0538 	rsb	r5, r3, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8008938:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800893c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008940:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008942:	61a5      	str	r5, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008944:	f7fe fc8e 	bl	8007264 <vListInsertEnd>
					xReturn = pdTRUE;
 8008948:	2001      	movs	r0, #1
		return xReturn;
 800894a:	e7d9      	b.n	8008900 <xTaskPriorityDisinherit+0x34>
 800894c:	20001248 	.word	0x20001248
 8008950:	200016c8 	.word	0x200016c8
 8008954:	20001254 	.word	0x20001254

08008958 <ulTaskNotifyTake>:
	{
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800895a:	4c29      	ldr	r4, [pc, #164]	; (8008a00 <ulTaskNotifyTake+0xa8>)
	{
 800895c:	4606      	mov	r6, r0
 800895e:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8008960:	f000 fbc8 	bl	80090f4 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008968:	b923      	cbnz	r3, 8008974 <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800896a:	6822      	ldr	r2, [r4, #0]
 800896c:	2101      	movs	r1, #1
 800896e:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
				if( xTicksToWait > ( TickType_t ) 0 )
 8008972:	b9ad      	cbnz	r5, 80089a0 <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 8008974:	f000 fbe0 	bl	8009138 <vPortExitCritical>
		taskENTER_CRITICAL();
 8008978:	f000 fbbc 	bl	80090f4 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
			if( ulReturn != 0UL )
 8008980:	b11d      	cbz	r5, 800898a <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008982:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8008984:	b14e      	cbz	r6, 800899a <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008986:	2200      	movs	r2, #0
 8008988:	665a      	str	r2, [r3, #100]	; 0x64
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		taskEXIT_CRITICAL();
 8008992:	f000 fbd1 	bl	8009138 <vPortExitCritical>
	}
 8008996:	4628      	mov	r0, r5
 8008998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800899a:	1e6a      	subs	r2, r5, #1
 800899c:	665a      	str	r2, [r3, #100]	; 0x64
 800899e:	e7f4      	b.n	800898a <ulTaskNotifyTake+0x32>
const TickType_t xConstTickCount = xTickCount;
 80089a0:	4a18      	ldr	r2, [pc, #96]	; (8008a04 <ulTaskNotifyTake+0xac>)
 80089a2:	6817      	ldr	r7, [r2, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80089a4:	6822      	ldr	r2, [r4, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089a6:	6820      	ldr	r0, [r4, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80089a8:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ac:	3004      	adds	r0, #4
 80089ae:	f7fe fc81 	bl	80072b4 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089b2:	1c6b      	adds	r3, r5, #1
 80089b4:	d012      	beq.n	80089dc <ulTaskNotifyTake+0x84>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	19ed      	adds	r5, r5, r7
 80089ba:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089bc:	d314      	bcc.n	80089e8 <ulTaskNotifyTake+0x90>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089be:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <ulTaskNotifyTake+0xb0>)
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	6821      	ldr	r1, [r4, #0]
 80089c4:	3104      	adds	r1, #4
 80089c6:	f7fe fc5d 	bl	8007284 <vListInsert>
					portYIELD_WITHIN_API();
 80089ca:	4b10      	ldr	r3, [pc, #64]	; (8008a0c <ulTaskNotifyTake+0xb4>)
 80089cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	e7cb      	b.n	8008974 <ulTaskNotifyTake+0x1c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089dc:	6821      	ldr	r1, [r4, #0]
 80089de:	480c      	ldr	r0, [pc, #48]	; (8008a10 <ulTaskNotifyTake+0xb8>)
 80089e0:	3104      	adds	r1, #4
 80089e2:	f7fe fc3f 	bl	8007264 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089e6:	e7f0      	b.n	80089ca <ulTaskNotifyTake+0x72>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089e8:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <ulTaskNotifyTake+0xbc>)
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	6821      	ldr	r1, [r4, #0]
 80089ee:	3104      	adds	r1, #4
 80089f0:	f7fe fc48 	bl	8007284 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089f4:	4b08      	ldr	r3, [pc, #32]	; (8008a18 <ulTaskNotifyTake+0xc0>)
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	4295      	cmp	r5, r2
					xNextTaskUnblockTime = xTimeToWake;
 80089fa:	bf38      	it	cc
 80089fc:	601d      	strcc	r5, [r3, #0]
 80089fe:	e7e4      	b.n	80089ca <ulTaskNotifyTake+0x72>
 8008a00:	20001248 	.word	0x20001248
 8008a04:	20001740 	.word	0x20001740
 8008a08:	20001250 	.word	0x20001250
 8008a0c:	e000ed04 	.word	0xe000ed04
 8008a10:	20001718 	.word	0x20001718
 8008a14:	2000124c 	.word	0x2000124c
 8008a18:	200016f4 	.word	0x200016f4

08008a1c <xTaskGenericNotify>:
		configASSERT( xTaskToNotify );
 8008a1c:	b1b8      	cbz	r0, 8008a4e <xTaskGenericNotify+0x32>
	{
 8008a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a20:	461f      	mov	r7, r3
 8008a22:	b083      	sub	sp, #12
 8008a24:	460d      	mov	r5, r1
 8008a26:	4616      	mov	r6, r2
 8008a28:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8008a2a:	f000 fb63 	bl	80090f4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8008a2e:	b10f      	cbz	r7, 8008a34 <xTaskGenericNotify+0x18>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008a30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a32:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008a34:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008a38:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008a3a:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008a3c:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
			switch( eAction )
 8008a40:	2e04      	cmp	r6, #4
 8008a42:	d84f      	bhi.n	8008ae4 <xTaskGenericNotify+0xc8>
 8008a44:	e8df f006 	tbb	[pc, r6]
 8008a48:	3b350c0f 	.word	0x3b350c0f
 8008a4c:	39          	.byte	0x39
 8008a4d:	00          	.byte	0x00
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 8008a5e:	e7fe      	b.n	8008a5e <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue |= ulValue;
 8008a60:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a62:	4315      	orrs	r5, r2
 8008a64:	6665      	str	r5, [r4, #100]	; 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d005      	beq.n	8008a76 <xTaskGenericNotify+0x5a>
					taskYIELD_IF_USING_PREEMPTION();
 8008a6a:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 8008a6c:	f000 fb64 	bl	8009138 <vPortExitCritical>
	}
 8008a70:	4620      	mov	r0, r4
 8008a72:	b003      	add	sp, #12
 8008a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a76:	1d21      	adds	r1, r4, #4
 8008a78:	4608      	mov	r0, r1
 8008a7a:	9101      	str	r1, [sp, #4]
 8008a7c:	f7fe fc1a 	bl	80072b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008a80:	4a1e      	ldr	r2, [pc, #120]	; (8008afc <xTaskGenericNotify+0xe0>)
 8008a82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a84:	6810      	ldr	r0, [r2, #0]
 8008a86:	9901      	ldr	r1, [sp, #4]
 8008a88:	4283      	cmp	r3, r0
 8008a8a:	481d      	ldr	r0, [pc, #116]	; (8008b00 <xTaskGenericNotify+0xe4>)
 8008a8c:	bf88      	it	hi
 8008a8e:	6013      	strhi	r3, [r2, #0]
 8008a90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008a94:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008a98:	f7fe fbe4 	bl	8007264 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008a9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a9e:	b183      	cbz	r3, 8008ac2 <xTaskGenericNotify+0xa6>
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	e7fe      	b.n	8008ab0 <xTaskGenericNotify+0x94>
					( pxTCB->ulNotifiedValue )++;
 8008ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ab4:	3201      	adds	r2, #1
 8008ab6:	6662      	str	r2, [r4, #100]	; 0x64
					break;
 8008ab8:	e7d5      	b.n	8008a66 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d010      	beq.n	8008ae0 <xTaskGenericNotify+0xc4>
						pxTCB->ulNotifiedValue = ulValue;
 8008abe:	6665      	str	r5, [r4, #100]	; 0x64
 8008ac0:	e7d1      	b.n	8008a66 <xTaskGenericNotify+0x4a>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ac2:	4b10      	ldr	r3, [pc, #64]	; (8008b04 <xTaskGenericNotify+0xe8>)
 8008ac4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d9cd      	bls.n	8008a6a <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 8008ace:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <xTaskGenericNotify+0xec>)
 8008ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	e7c4      	b.n	8008a6a <xTaskGenericNotify+0x4e>
						xReturn = pdFAIL;
 8008ae0:	2400      	movs	r4, #0
 8008ae2:	e7c3      	b.n	8008a6c <xTaskGenericNotify+0x50>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008ae4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ae6:	3201      	adds	r2, #1
 8008ae8:	d0bd      	beq.n	8008a66 <xTaskGenericNotify+0x4a>
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	e7fe      	b.n	8008afa <xTaskGenericNotify+0xde>
 8008afc:	200016c8 	.word	0x200016c8
 8008b00:	20001254 	.word	0x20001254
 8008b04:	20001248 	.word	0x20001248
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <xTaskGenericNotifyFromISR>:
	{
 8008b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b10:	b083      	sub	sp, #12
 8008b12:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		configASSERT( xTaskToNotify );
 8008b14:	b318      	cbz	r0, 8008b5e <xTaskGenericNotifyFromISR+0x52>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b16:	460d      	mov	r5, r1
 8008b18:	4690      	mov	r8, r2
 8008b1a:	4699      	mov	r9, r3
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	f000 fc21 	bl	8009364 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b22:	f3ef 8611 	mrs	r6, BASEPRI
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8008b36:	f1b9 0f00 	cmp.w	r9, #0
 8008b3a:	d002      	beq.n	8008b42 <xTaskGenericNotifyFromISR+0x36>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b3e:	f8c9 3000 	str.w	r3, [r9]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008b42:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008b46:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008b48:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008b4a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
			switch( eAction )
 8008b4e:	f1b8 0f04 	cmp.w	r8, #4
 8008b52:	d856      	bhi.n	8008c02 <xTaskGenericNotifyFromISR+0xf6>
 8008b54:	e8df f008 	tbb	[pc, r8]
 8008b58:	28220c0f 	.word	0x28220c0f
 8008b5c:	26          	.byte	0x26
 8008b5d:	00          	.byte	0x00
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 8008b6e:	e7fe      	b.n	8008b6e <xTaskGenericNotifyFromISR+0x62>
					pxTCB->ulNotifiedValue |= ulValue;
 8008b70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b72:	4315      	orrs	r5, r2
 8008b74:	6665      	str	r5, [r4, #100]	; 0x64
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d005      	beq.n	8008b86 <xTaskGenericNotifyFromISR+0x7a>
 8008b7a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b7c:	f386 8811 	msr	BASEPRI, r6
	}
 8008b80:	b003      	add	sp, #12
 8008b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008b86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b88:	b183      	cbz	r3, 8008bac <xTaskGenericNotifyFromISR+0xa0>
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	e7fe      	b.n	8008b9a <xTaskGenericNotifyFromISR+0x8e>
					( pxTCB->ulNotifiedValue )++;
 8008b9c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b9e:	3201      	adds	r2, #1
 8008ba0:	6662      	str	r2, [r4, #100]	; 0x64
					break;
 8008ba2:	e7e8      	b.n	8008b76 <xTaskGenericNotifyFromISR+0x6a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d02a      	beq.n	8008bfe <xTaskGenericNotifyFromISR+0xf2>
						pxTCB->ulNotifiedValue = ulValue;
 8008ba8:	6665      	str	r5, [r4, #100]	; 0x64
 8008baa:	e7e4      	b.n	8008b76 <xTaskGenericNotifyFromISR+0x6a>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bac:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <xTaskGenericNotifyFromISR+0x110>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	b9fb      	cbnz	r3, 8008bf2 <xTaskGenericNotifyFromISR+0xe6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bb2:	1d21      	adds	r1, r4, #4
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	9101      	str	r1, [sp, #4]
 8008bb8:	f7fe fb7c 	bl	80072b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bbc:	4a18      	ldr	r2, [pc, #96]	; (8008c20 <xTaskGenericNotifyFromISR+0x114>)
 8008bbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008bc0:	6810      	ldr	r0, [r2, #0]
 8008bc2:	9901      	ldr	r1, [sp, #4]
 8008bc4:	4283      	cmp	r3, r0
 8008bc6:	4817      	ldr	r0, [pc, #92]	; (8008c24 <xTaskGenericNotifyFromISR+0x118>)
 8008bc8:	bf88      	it	hi
 8008bca:	6013      	strhi	r3, [r2, #0]
 8008bcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008bd0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008bd4:	f7fe fb46 	bl	8007264 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bd8:	4b13      	ldr	r3, [pc, #76]	; (8008c28 <xTaskGenericNotifyFromISR+0x11c>)
 8008bda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d9ca      	bls.n	8008b7a <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 8008be4:	b10f      	cbz	r7, 8008bea <xTaskGenericNotifyFromISR+0xde>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008be6:	2301      	movs	r3, #1
 8008be8:	603b      	str	r3, [r7, #0]
					xYieldPending = pdTRUE;
 8008bea:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <xTaskGenericNotifyFromISR+0x120>)
 8008bec:	2001      	movs	r0, #1
 8008bee:	6018      	str	r0, [r3, #0]
 8008bf0:	e7c4      	b.n	8008b7c <xTaskGenericNotifyFromISR+0x70>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008bf2:	480f      	ldr	r0, [pc, #60]	; (8008c30 <xTaskGenericNotifyFromISR+0x124>)
 8008bf4:	f104 0118 	add.w	r1, r4, #24
 8008bf8:	f7fe fb34 	bl	8007264 <vListInsertEnd>
 8008bfc:	e7ec      	b.n	8008bd8 <xTaskGenericNotifyFromISR+0xcc>
						xReturn = pdFAIL;
 8008bfe:	2000      	movs	r0, #0
 8008c00:	e7bc      	b.n	8008b7c <xTaskGenericNotifyFromISR+0x70>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c04:	3201      	adds	r2, #1
 8008c06:	d0b6      	beq.n	8008b76 <xTaskGenericNotifyFromISR+0x6a>
 8008c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	e7fe      	b.n	8008c18 <xTaskGenericNotifyFromISR+0x10c>
 8008c1a:	bf00      	nop
 8008c1c:	200016c0 	.word	0x200016c0
 8008c20:	200016c8 	.word	0x200016c8
 8008c24:	20001254 	.word	0x20001254
 8008c28:	20001248 	.word	0x20001248
 8008c2c:	20001744 	.word	0x20001744
 8008c30:	20001700 	.word	0x20001700

08008c34 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c38:	4e22      	ldr	r6, [pc, #136]	; (8008cc4 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 8008c3a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008ccc <prvSwitchTimerLists+0x98>
{
 8008c3e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8008c40:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c44:	e00d      	b.n	8008c62 <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c46:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c48:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c4a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c4c:	1d25      	adds	r5, r4, #4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f7fe fb30 	bl	80072b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c54:	6a23      	ldr	r3, [r4, #32]
 8008c56:	4620      	mov	r0, r4
 8008c58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c5a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008c5e:	075b      	lsls	r3, r3, #29
 8008c60:	d40a      	bmi.n	8008c78 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c62:	6833      	ldr	r3, [r6, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	2a00      	cmp	r2, #0
 8008c68:	d1ed      	bne.n	8008c46 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8008c6a:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <prvSwitchTimerLists+0x94>)
 8008c6c:	6811      	ldr	r1, [r2, #0]
 8008c6e:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8008c70:	6013      	str	r3, [r2, #0]
}
 8008c72:	b005      	add	sp, #20
 8008c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c78:	69a3      	ldr	r3, [r4, #24]
 8008c7a:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8008c7c:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c7e:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8008c80:	d205      	bcs.n	8008c8e <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c82:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c84:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c86:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c88:	f7fe fafc 	bl	8007284 <vListInsert>
 8008c8c:	e7e9      	b.n	8008c62 <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 8008c8e:	f8d9 3000 	ldr.w	r3, [r9]
 8008c92:	b16b      	cbz	r3, 8008cb0 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c94:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c98:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c9a:	f7ff fe07 	bl	80088ac <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f8d9 0000 	ldr.w	r0, [r9]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4669      	mov	r1, sp
 8008ca8:	f7fe fbc8 	bl	800743c <xQueueGenericSend>
				configASSERT( xResult );
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d1d8      	bne.n	8008c62 <prvSwitchTimerLists+0x2e>
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	e7fe      	b.n	8008cc0 <prvSwitchTimerLists+0x8c>
 8008cc2:	bf00      	nop
 8008cc4:	20001748 	.word	0x20001748
 8008cc8:	2000174c 	.word	0x2000174c
 8008ccc:	2000186c 	.word	0x2000186c

08008cd0 <prvTimerTask>:
{
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	4e9e      	ldr	r6, [pc, #632]	; (8008f50 <prvTimerTask+0x280>)
 8008cd6:	4d9f      	ldr	r5, [pc, #636]	; (8008f54 <prvTimerTask+0x284>)
 8008cd8:	4c9f      	ldr	r4, [pc, #636]	; (8008f58 <prvTimerTask+0x288>)
 8008cda:	b08b      	sub	sp, #44	; 0x2c
 8008cdc:	f04f 0800 	mov.w	r8, #0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ce0:	6833      	ldr	r3, [r6, #0]
 8008ce2:	f8d3 a000 	ldr.w	sl, [r3]
 8008ce6:	f1ba 0f00 	cmp.w	sl, #0
 8008cea:	f000 80ad 	beq.w	8008e48 <prvTimerTask+0x178>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 8008cf4:	f7ff fb94 	bl	8008420 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008cf8:	f7ff fbaa 	bl	8008450 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008cfc:	682a      	ldr	r2, [r5, #0]
 8008cfe:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8008d00:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8008d02:	f0c0 80b2 	bcc.w	8008e6a <prvTimerTask+0x19a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d06:	4550      	cmp	r0, sl
	xLastTime = xTimeNow;
 8008d08:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d0a:	f080 80b8 	bcs.w	8008e7e <prvTimerTask+0x1ae>
 8008d0e:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d10:	6820      	ldr	r0, [r4, #0]
 8008d12:	ebaa 0109 	sub.w	r1, sl, r9
 8008d16:	f7fe fed5 	bl	8007ac4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d1a:	f7ff fb89 	bl	8008430 <xTaskResumeAll>
 8008d1e:	b938      	cbnz	r0, 8008d30 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 8008d20:	4b8e      	ldr	r3, [pc, #568]	; (8008f5c <prvTimerTask+0x28c>)
 8008d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	2200      	movs	r2, #0
 8008d34:	a902      	add	r1, sp, #8
 8008d36:	f7fe fd07 	bl	8007748 <xQueueReceive>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d0d0      	beq.n	8008ce0 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d3e:	9b02      	ldr	r3, [sp, #8]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	db78      	blt.n	8008e36 <prvTimerTask+0x166>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d44:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	b113      	cbz	r3, 8008d50 <prvTimerTask+0x80>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d4a:	1d38      	adds	r0, r7, #4
 8008d4c:	f7fe fab2 	bl	80072b4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008d50:	f7ff fb7e 	bl	8008450 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8008d58:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8008d5a:	f0c0 808d 	bcc.w	8008e78 <prvTimerTask+0x1a8>
	xLastTime = xTimeNow;
 8008d5e:	9b02      	ldr	r3, [sp, #8]
 8008d60:	f8c5 9000 	str.w	r9, [r5]
			switch( xMessage.xMessageID )
 8008d64:	2b09      	cmp	r3, #9
 8008d66:	d8e3      	bhi.n	8008d30 <prvTimerTask+0x60>
 8008d68:	e8df f003 	tbb	[pc, r3]
 8008d6c:	55050505 	.word	0x55050505
 8008d70:	05055c3e 	.word	0x05055c3e
 8008d74:	3e55      	.short	0x3e55
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d76:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d7e:	613f      	str	r7, [r7, #16]
 8008d80:	1898      	adds	r0, r3, r2
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d82:	f041 0101 	orr.w	r1, r1, #1
 8008d86:	f887 1028 	strb.w	r1, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d8a:	bf2c      	ite	cs
 8008d8c:	2101      	movcs	r1, #1
 8008d8e:	2100      	movcc	r1, #0
	if( xNextExpiryTime <= xTimeNow )
 8008d90:	4548      	cmp	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d92:	6078      	str	r0, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008d94:	f200 808e 	bhi.w	8008eb4 <prvTimerTask+0x1e4>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d98:	eba9 0303 	sub.w	r3, r9, r3
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	f200 8097 	bhi.w	8008ed0 <prvTimerTask+0x200>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	4638      	mov	r0, r7
 8008da6:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008da8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008dac:	075b      	lsls	r3, r3, #29
 8008dae:	d5bf      	bpl.n	8008d30 <prvTimerTask+0x60>
	if( xTimerQueue != NULL )
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	b183      	cbz	r3, 8008dd6 <prvTimerTask+0x106>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	9b03      	ldr	r3, [sp, #12]
		xMessage.xMessageID = xCommandID;
 8008db8:	f8cd 8018 	str.w	r8, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008dbc:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008dbe:	e9cd 3707 	strd	r3, r7, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008dc2:	f7ff fd73 	bl	80088ac <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	6820      	ldr	r0, [r4, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	a906      	add	r1, sp, #24
 8008dce:	f7fe fb35 	bl	800743c <xQueueGenericSend>
							configASSERT( xResult );
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d1ac      	bne.n	8008d30 <prvTimerTask+0x60>
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	e7fe      	b.n	8008de6 <prvTimerTask+0x116>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008de8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008df0:	f042 0201 	orr.w	r2, r2, #1
 8008df4:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 809a 	beq.w	8008f32 <prvTimerTask+0x262>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dfe:	444b      	add	r3, r9
	if( xNextExpiryTime <= xTimeNow )
 8008e00:	454b      	cmp	r3, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e02:	607b      	str	r3, [r7, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e04:	bf96      	itet	ls
 8008e06:	4b56      	ldrls	r3, [pc, #344]	; (8008f60 <prvTimerTask+0x290>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e08:	6830      	ldrhi	r0, [r6, #0]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e0a:	6818      	ldrls	r0, [r3, #0]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e0c:	613f      	str	r7, [r7, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e0e:	1d39      	adds	r1, r7, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e10:	f7fe fa38 	bl	8007284 <vListInsert>
 8008e14:	e78c      	b.n	8008d30 <prvTimerTask+0x60>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e1a:	f023 0301 	bic.w	r3, r3, #1
 8008e1e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8008e22:	e785      	b.n	8008d30 <prvTimerTask+0x60>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e28:	079a      	lsls	r2, r3, #30
 8008e2a:	d54d      	bpl.n	8008ec8 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e2c:	f023 0301 	bic.w	r3, r3, #1
 8008e30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008e34:	e77c      	b.n	8008d30 <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e36:	9b03      	ldr	r3, [sp, #12]
 8008e38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e3c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e3e:	9b02      	ldr	r3, [sp, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f6ff af75 	blt.w	8008d30 <prvTimerTask+0x60>
 8008e46:	e77d      	b.n	8008d44 <prvTimerTask+0x74>
	vTaskSuspendAll();
 8008e48:	f7ff faea 	bl	8008420 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008e4c:	f7ff fb00 	bl	8008450 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008e50:	682a      	ldr	r2, [r5, #0]
 8008e52:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8008e54:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8008e56:	d808      	bhi.n	8008e6a <prvTimerTask+0x19a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e58:	4b41      	ldr	r3, [pc, #260]	; (8008f60 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
 8008e5a:	f8c5 9000 	str.w	r9, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	fab2 f282 	clz	r2, r2
 8008e66:	0952      	lsrs	r2, r2, #5
 8008e68:	e752      	b.n	8008d10 <prvTimerTask+0x40>
		prvSwitchTimerLists();
 8008e6a:	f7ff fee3 	bl	8008c34 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008e6e:	f8c5 9000 	str.w	r9, [r5]
			( void ) xTaskResumeAll();
 8008e72:	f7ff fadd 	bl	8008430 <xTaskResumeAll>
 8008e76:	e75b      	b.n	8008d30 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 8008e78:	f7ff fedc 	bl	8008c34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e7c:	e76f      	b.n	8008d5e <prvTimerTask+0x8e>
				( void ) xTaskResumeAll();
 8008e7e:	f7ff fad7 	bl	8008430 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e82:	6832      	ldr	r2, [r6, #0]
 8008e84:	68d2      	ldr	r2, [r2, #12]
 8008e86:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e8a:	f10b 0104 	add.w	r1, fp, #4
 8008e8e:	4608      	mov	r0, r1
 8008e90:	9101      	str	r1, [sp, #4]
 8008e92:	f7fe fa0f 	bl	80072b4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e96:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8008e9a:	9901      	ldr	r1, [sp, #4]
 8008e9c:	f010 0f04 	tst.w	r0, #4
 8008ea0:	d11c      	bne.n	8008edc <prvTimerTask+0x20c>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ea2:	f020 0001 	bic.w	r0, r0, #1
 8008ea6:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008eaa:	f8db 3020 	ldr.w	r3, [fp, #32]
 8008eae:	4658      	mov	r0, fp
 8008eb0:	4798      	blx	r3
}
 8008eb2:	e73d      	b.n	8008d30 <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008eb4:	454b      	cmp	r3, r9
 8008eb6:	d902      	bls.n	8008ebe <prvTimerTask+0x1ee>
 8008eb8:	2900      	cmp	r1, #0
 8008eba:	f43f af72 	beq.w	8008da2 <prvTimerTask+0xd2>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ebe:	6830      	ldr	r0, [r6, #0]
 8008ec0:	1d39      	adds	r1, r7, #4
 8008ec2:	f7fe f9df 	bl	8007284 <vListInsert>
	return xProcessTimerNow;
 8008ec6:	e733      	b.n	8008d30 <prvTimerTask+0x60>
							vPortFree( pxTimer );
 8008ec8:	4638      	mov	r0, r7
 8008eca:	f000 fb35 	bl	8009538 <vPortFree>
 8008ece:	e72f      	b.n	8008d30 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ed0:	4b23      	ldr	r3, [pc, #140]	; (8008f60 <prvTimerTask+0x290>)
 8008ed2:	1d39      	adds	r1, r7, #4
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	f7fe f9d5 	bl	8007284 <vListInsert>
	return xProcessTimerNow;
 8008eda:	e729      	b.n	8008d30 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008edc:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ee0:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ee4:	eb0a 0300 	add.w	r3, sl, r0
	if( xNextExpiryTime <= xTimeNow )
 8008ee8:	4599      	cmp	r9, r3
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008eea:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008eee:	d203      	bcs.n	8008ef8 <prvTimerTask+0x228>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ef0:	6830      	ldr	r0, [r6, #0]
 8008ef2:	f7fe f9c7 	bl	8007284 <vListInsert>
	return xProcessTimerNow;
 8008ef6:	e7d8      	b.n	8008eaa <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef8:	eba9 030a 	sub.w	r3, r9, sl
 8008efc:	4298      	cmp	r0, r3
 8008efe:	d821      	bhi.n	8008f44 <prvTimerTask+0x274>
	if( xTimerQueue != NULL )
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	b16b      	cbz	r3, 8008f20 <prvTimerTask+0x250>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f04:	e9cd 8a06 	strd	r8, sl, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f08:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f0c:	f7ff fcce 	bl	80088ac <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f10:	2300      	movs	r3, #0
 8008f12:	6820      	ldr	r0, [r4, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	a906      	add	r1, sp, #24
 8008f18:	f7fe fa90 	bl	800743c <xQueueGenericSend>
			configASSERT( xResult );
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d1c4      	bne.n	8008eaa <prvTimerTask+0x1da>
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	e7fe      	b.n	8008f30 <prvTimerTask+0x260>
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f42:	e7fe      	b.n	8008f42 <prvTimerTask+0x272>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f44:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <prvTimerTask+0x290>)
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	f7fe f99c 	bl	8007284 <vListInsert>
	return xProcessTimerNow;
 8008f4c:	e7ad      	b.n	8008eaa <prvTimerTask+0x1da>
 8008f4e:	bf00      	nop
 8008f50:	20001748 	.word	0x20001748
 8008f54:	20001818 	.word	0x20001818
 8008f58:	2000186c 	.word	0x2000186c
 8008f5c:	e000ed04 	.word	0xe000ed04
 8008f60:	2000174c 	.word	0x2000174c

08008f64 <xTimerCreateTimerTask>:
{
 8008f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008f66:	4c23      	ldr	r4, [pc, #140]	; (8008ff4 <xTimerCreateTimerTask+0x90>)
{
 8008f68:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8008f6a:	f000 f8c3 	bl	80090f4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008f6e:	6827      	ldr	r7, [r4, #0]
 8008f70:	b337      	cbz	r7, 8008fc0 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f72:	f000 f8e1 	bl	8009138 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	b1cb      	cbz	r3, 8008fae <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f7a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f7c:	aa07      	add	r2, sp, #28
 8008f7e:	a906      	add	r1, sp, #24
 8008f80:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f82:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f86:	f7fe f94d 	bl	8007224 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f8a:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	e9cd 2100 	strd	r2, r1, [sp]
 8008f94:	9302      	str	r3, [sp, #8]
 8008f96:	9a07      	ldr	r2, [sp, #28]
 8008f98:	4917      	ldr	r1, [pc, #92]	; (8008ff8 <xTimerCreateTimerTask+0x94>)
 8008f9a:	4818      	ldr	r0, [pc, #96]	; (8008ffc <xTimerCreateTimerTask+0x98>)
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	f7ff f865 	bl	800806c <xTaskCreateStatic>
 8008fa2:	4b17      	ldr	r3, [pc, #92]	; (8009000 <xTimerCreateTimerTask+0x9c>)
 8008fa4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008fa6:	b110      	cbz	r0, 8008fae <xTimerCreateTimerTask+0x4a>
}
 8008fa8:	2001      	movs	r0, #1
 8008faa:	b009      	add	sp, #36	; 0x24
 8008fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008fbe:	e7fe      	b.n	8008fbe <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8008fc0:	4e10      	ldr	r6, [pc, #64]	; (8009004 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8008fc2:	4d11      	ldr	r5, [pc, #68]	; (8009008 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7fe f93d 	bl	8007244 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f7fe f93a 	bl	8007244 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008fd0:	4a0e      	ldr	r2, [pc, #56]	; (800900c <xTimerCreateTimerTask+0xa8>)
			pxOverflowTimerList = &xActiveTimerList2;
 8008fd2:	490f      	ldr	r1, [pc, #60]	; (8009010 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008fd4:	9700      	str	r7, [sp, #0]
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <xTimerCreateTimerTask+0xb0>)
			pxCurrentTimerList = &xActiveTimerList1;
 8008fd8:	6016      	str	r6, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008fda:	600d      	str	r5, [r1, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008fdc:	4a0e      	ldr	r2, [pc, #56]	; (8009018 <xTimerCreateTimerTask+0xb4>)
 8008fde:	2110      	movs	r1, #16
 8008fe0:	200a      	movs	r0, #10
 8008fe2:	f7fe f9b9 	bl	8007358 <xQueueGenericCreateStatic>
 8008fe6:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d0c2      	beq.n	8008f72 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008fec:	490b      	ldr	r1, [pc, #44]	; (800901c <xTimerCreateTimerTask+0xb8>)
 8008fee:	f7fe fd2f 	bl	8007a50 <vQueueAddToRegistry>
 8008ff2:	e7be      	b.n	8008f72 <xTimerCreateTimerTask+0xe>
 8008ff4:	2000186c 	.word	0x2000186c
 8008ff8:	0800ad84 	.word	0x0800ad84
 8008ffc:	08008cd1 	.word	0x08008cd1
 8009000:	20001870 	.word	0x20001870
 8009004:	200017f0 	.word	0x200017f0
 8009008:	20001804 	.word	0x20001804
 800900c:	20001748 	.word	0x20001748
 8009010:	2000174c 	.word	0x2000174c
 8009014:	2000181c 	.word	0x2000181c
 8009018:	20001750 	.word	0x20001750
 800901c:	0800ad7c 	.word	0x0800ad7c

08009020 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009020:	4808      	ldr	r0, [pc, #32]	; (8009044 <prvPortStartFirstTask+0x24>)
 8009022:	6800      	ldr	r0, [r0, #0]
 8009024:	6800      	ldr	r0, [r0, #0]
 8009026:	f380 8808 	msr	MSP, r0
 800902a:	f04f 0000 	mov.w	r0, #0
 800902e:	f380 8814 	msr	CONTROL, r0
 8009032:	b662      	cpsie	i
 8009034:	b661      	cpsie	f
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	df00      	svc	0
 8009040:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009042:	0000      	.short	0x0000
 8009044:	e000ed08 	.word	0xe000ed08

08009048 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009048:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009058 <vPortEnableVFP+0x10>
 800904c:	6801      	ldr	r1, [r0, #0]
 800904e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009052:	6001      	str	r1, [r0, #0]
 8009054:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009056:	0000      	.short	0x0000
 8009058:	e000ed88 	.word	0xe000ed88

0800905c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800905c:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <prvTaskExitError+0x3c>)
 800905e:	681b      	ldr	r3, [r3, #0]
{
 8009060:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009062:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8009064:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8009066:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009068:	d008      	beq.n	800907c <prvTaskExitError+0x20>
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	e7fe      	b.n	800907a <prvTaskExitError+0x1e>
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800908c:	9b01      	ldr	r3, [sp, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0fc      	beq.n	800908c <prvTaskExitError+0x30>
}
 8009092:	b002      	add	sp, #8
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	20000008 	.word	0x20000008

0800909c <pxPortInitialiseStack>:
{
 800909c:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800909e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090a2:	4c09      	ldr	r4, [pc, #36]	; (80090c8 <pxPortInitialiseStack+0x2c>)
 80090a4:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090a8:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090ac:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090b0:	f840 5c04 	str.w	r5, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090b4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090b8:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090bc:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80090c0:	bc30      	pop	{r4, r5}
 80090c2:	3844      	subs	r0, #68	; 0x44
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	0800905d 	.word	0x0800905d
 80090cc:	00000000 	.word	0x00000000

080090d0 <SVC_Handler>:
	__asm volatile (
 80090d0:	4b07      	ldr	r3, [pc, #28]	; (80090f0 <pxCurrentTCBConst2>)
 80090d2:	6819      	ldr	r1, [r3, #0]
 80090d4:	6808      	ldr	r0, [r1, #0]
 80090d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090da:	f380 8809 	msr	PSP, r0
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f04f 0000 	mov.w	r0, #0
 80090e6:	f380 8811 	msr	BASEPRI, r0
 80090ea:	4770      	bx	lr
 80090ec:	f3af 8000 	nop.w

080090f0 <pxCurrentTCBConst2>:
 80090f0:	20001248 	.word	0x20001248

080090f4 <vPortEnterCritical>:
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009104:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <vPortEnterCritical+0x3c>)
 8009106:	6813      	ldr	r3, [r2, #0]
 8009108:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800910a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800910c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800910e:	d000      	beq.n	8009112 <vPortEnterCritical+0x1e>
}
 8009110:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009112:	4b08      	ldr	r3, [pc, #32]	; (8009134 <vPortEnterCritical+0x40>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f013 0fff 	tst.w	r3, #255	; 0xff
 800911a:	d0f9      	beq.n	8009110 <vPortEnterCritical+0x1c>
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	e7fe      	b.n	800912c <vPortEnterCritical+0x38>
 800912e:	bf00      	nop
 8009130:	20000008 	.word	0x20000008
 8009134:	e000ed04 	.word	0xe000ed04

08009138 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009138:	4a08      	ldr	r2, [pc, #32]	; (800915c <vPortExitCritical+0x24>)
 800913a:	6813      	ldr	r3, [r2, #0]
 800913c:	b943      	cbnz	r3, 8009150 <vPortExitCritical+0x18>
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	e7fe      	b.n	800914e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009150:	3b01      	subs	r3, #1
 8009152:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009154:	b90b      	cbnz	r3, 800915a <vPortExitCritical+0x22>
	__asm volatile
 8009156:	f383 8811 	msr	BASEPRI, r3
}
 800915a:	4770      	bx	lr
 800915c:	20000008 	.word	0x20000008

08009160 <PendSV_Handler>:
	__asm volatile
 8009160:	f3ef 8009 	mrs	r0, PSP
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	4b15      	ldr	r3, [pc, #84]	; (80091c0 <pxCurrentTCBConst>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	f01e 0f10 	tst.w	lr, #16
 8009170:	bf08      	it	eq
 8009172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917a:	6010      	str	r0, [r2, #0]
 800917c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009184:	f380 8811 	msr	BASEPRI, r0
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f7ff f974 	bl	800847c <vTaskSwitchContext>
 8009194:	f04f 0000 	mov.w	r0, #0
 8009198:	f380 8811 	msr	BASEPRI, r0
 800919c:	bc09      	pop	{r0, r3}
 800919e:	6819      	ldr	r1, [r3, #0]
 80091a0:	6808      	ldr	r0, [r1, #0]
 80091a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a6:	f01e 0f10 	tst.w	lr, #16
 80091aa:	bf08      	it	eq
 80091ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091b0:	f380 8809 	msr	PSP, r0
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	f3af 8000 	nop.w

080091c0 <pxCurrentTCBConst>:
 80091c0:	20001248 	.word	0x20001248

080091c4 <xPortSysTickHandler>:
{
 80091c4:	b508      	push	{r3, lr}
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80091d6:	f7ff f941 	bl	800845c <xTaskIncrementTick>
 80091da:	b118      	cbz	r0, 80091e4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091dc:	4b03      	ldr	r3, [pc, #12]	; (80091ec <xPortSysTickHandler+0x28>)
 80091de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80091e4:	2300      	movs	r3, #0
 80091e6:	f383 8811 	msr	BASEPRI, r3
}
 80091ea:	bd08      	pop	{r3, pc}
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <vPortSetupTimerInterrupt>:
{
 80091f0:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091f2:	4a09      	ldr	r2, [pc, #36]	; (8009218 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091f4:	4d09      	ldr	r5, [pc, #36]	; (800921c <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091f6:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <vPortSetupTimerInterrupt+0x30>)
 80091f8:	4c0a      	ldr	r4, [pc, #40]	; (8009224 <vPortSetupTimerInterrupt+0x34>)
 80091fa:	480b      	ldr	r0, [pc, #44]	; (8009228 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091fc:	2100      	movs	r1, #0
 80091fe:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009200:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	fba4 1303 	umull	r1, r3, r4, r3
 8009208:	099b      	lsrs	r3, r3, #6
 800920a:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800920c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800920e:	6003      	str	r3, [r0, #0]
}
 8009210:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009212:	6011      	str	r1, [r2, #0]
}
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	e000e010 	.word	0xe000e010
 800921c:	e000e018 	.word	0xe000e018
 8009220:	20000000 	.word	0x20000000
 8009224:	10624dd3 	.word	0x10624dd3
 8009228:	e000e014 	.word	0xe000e014

0800922c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800922c:	4b44      	ldr	r3, [pc, #272]	; (8009340 <xPortStartScheduler+0x114>)
 800922e:	4a45      	ldr	r2, [pc, #276]	; (8009344 <xPortStartScheduler+0x118>)
 8009230:	6819      	ldr	r1, [r3, #0]
 8009232:	4291      	cmp	r1, r2
 8009234:	d040      	beq.n	80092b8 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	4b43      	ldr	r3, [pc, #268]	; (8009348 <xPortStartScheduler+0x11c>)
 800923a:	429a      	cmp	r2, r3
 800923c:	d033      	beq.n	80092a6 <xPortStartScheduler+0x7a>
{
 800923e:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009240:	4b42      	ldr	r3, [pc, #264]	; (800934c <xPortStartScheduler+0x120>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009242:	4c43      	ldr	r4, [pc, #268]	; (8009350 <xPortStartScheduler+0x124>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009244:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009246:	4943      	ldr	r1, [pc, #268]	; (8009354 <xPortStartScheduler+0x128>)
{
 8009248:	b085      	sub	sp, #20
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800924a:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800924c:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800924e:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009250:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	b2db      	uxtb	r3, r3
 8009256:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800925a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800925e:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009262:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009266:	2007      	movs	r0, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009268:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800926a:	0614      	lsls	r4, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800926c:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800926e:	bf48      	it	mi
 8009270:	2206      	movmi	r2, #6
 8009272:	d50f      	bpl.n	8009294 <xPortStartScheduler+0x68>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009274:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	b2db      	uxtb	r3, r3
 800927c:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009280:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8009284:	0600      	lsls	r0, r0, #24
 8009286:	4613      	mov	r3, r2
 8009288:	f102 32ff 	add.w	r2, r2, #4294967295
 800928c:	d4f2      	bmi.n	8009274 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800928e:	2b03      	cmp	r3, #3
 8009290:	d01b      	beq.n	80092ca <xPortStartScheduler+0x9e>
 8009292:	600b      	str	r3, [r1, #0]
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	e7fe      	b.n	80092a4 <xPortStartScheduler+0x78>
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092b6:	e7fe      	b.n	80092b6 <xPortStartScheduler+0x8a>
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092c8:	e7fe      	b.n	80092c8 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092ca:	9a02      	ldr	r2, [sp, #8]
 80092cc:	481f      	ldr	r0, [pc, #124]	; (800934c <xPortStartScheduler+0x120>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092ce:	4b22      	ldr	r3, [pc, #136]	; (8009358 <xPortStartScheduler+0x12c>)
	uxCriticalNesting = 0;
 80092d0:	4c22      	ldr	r4, [pc, #136]	; (800935c <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092d2:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092d4:	f44f 7540 	mov.w	r5, #768	; 0x300
 80092d8:	600d      	str	r5, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092da:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80092e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80092ea:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 80092ec:	2500      	movs	r5, #0
	vPortSetupTimerInterrupt();
 80092ee:	f7ff ff7f 	bl	80091f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80092f2:	6025      	str	r5, [r4, #0]
	vPortEnableVFP();
 80092f4:	f7ff fea8 	bl	8009048 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092f8:	4a19      	ldr	r2, [pc, #100]	; (8009360 <xPortStartScheduler+0x134>)
 80092fa:	6813      	ldr	r3, [r2, #0]
 80092fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009300:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8009302:	f7ff fe8d 	bl	8009020 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009306:	f7ff f8b9 	bl	800847c <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800930a:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0;
 800930c:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800930e:	3301      	adds	r3, #1
 8009310:	d008      	beq.n	8009324 <xPortStartScheduler+0xf8>
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	e7fe      	b.n	8009322 <xPortStartScheduler+0xf6>
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009334:	9b03      	ldr	r3, [sp, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d0fc      	beq.n	8009334 <xPortStartScheduler+0x108>
}
 800933a:	2000      	movs	r0, #0
 800933c:	b005      	add	sp, #20
 800933e:	bd30      	pop	{r4, r5, pc}
 8009340:	e000ed00 	.word	0xe000ed00
 8009344:	410fc271 	.word	0x410fc271
 8009348:	410fc270 	.word	0x410fc270
 800934c:	e000e400 	.word	0xe000e400
 8009350:	20001874 	.word	0x20001874
 8009354:	20001878 	.word	0x20001878
 8009358:	e000ed20 	.word	0xe000ed20
 800935c:	20000008 	.word	0x20000008
 8009360:	e000ef34 	.word	0xe000ef34

08009364 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009364:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009368:	2b0f      	cmp	r3, #15
 800936a:	d90e      	bls.n	800938a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800936c:	4910      	ldr	r1, [pc, #64]	; (80093b0 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800936e:	4a11      	ldr	r2, [pc, #68]	; (80093b4 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009370:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009372:	7812      	ldrb	r2, [r2, #0]
 8009374:	429a      	cmp	r2, r3
 8009376:	d908      	bls.n	800938a <vPortValidateInterruptPriority+0x26>
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	e7fe      	b.n	8009388 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800938a:	4b0b      	ldr	r3, [pc, #44]	; (80093b8 <vPortValidateInterruptPriority+0x54>)
 800938c:	4a0b      	ldr	r2, [pc, #44]	; (80093bc <vPortValidateInterruptPriority+0x58>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6812      	ldr	r2, [r2, #0]
 8009392:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009396:	4293      	cmp	r3, r2
 8009398:	d908      	bls.n	80093ac <vPortValidateInterruptPriority+0x48>
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	e7fe      	b.n	80093aa <vPortValidateInterruptPriority+0x46>
	}
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	e000e3f0 	.word	0xe000e3f0
 80093b4:	20001874 	.word	0x20001874
 80093b8:	e000ed0c 	.word	0xe000ed0c
 80093bc:	20001878 	.word	0x20001878

080093c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c4:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80093c6:	f7ff f82b 	bl	8008420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80093ca:	4854      	ldr	r0, [pc, #336]	; (800951c <pvPortMalloc+0x15c>)
 80093cc:	6803      	ldr	r3, [r0, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d03c      	beq.n	800944c <pvPortMalloc+0x8c>
 80093d2:	4a53      	ldr	r2, [pc, #332]	; (8009520 <pvPortMalloc+0x160>)
 80093d4:	6815      	ldr	r5, [r2, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80093d6:	422e      	tst	r6, r5
 80093d8:	d130      	bne.n	800943c <pvPortMalloc+0x7c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80093da:	b37e      	cbz	r6, 800943c <pvPortMalloc+0x7c>
			{
				xWantedSize += xHeapStructSize;
 80093dc:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80093e0:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80093e2:	bf1c      	itt	ne
 80093e4:	f024 0407 	bicne.w	r4, r4, #7
 80093e8:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80093ea:	b33c      	cbz	r4, 800943c <pvPortMalloc+0x7c>
 80093ec:	f8df c13c 	ldr.w	ip, [pc, #316]	; 800952c <pvPortMalloc+0x16c>
 80093f0:	f8dc 7000 	ldr.w	r7, [ip]
 80093f4:	42a7      	cmp	r7, r4
 80093f6:	d321      	bcc.n	800943c <pvPortMalloc+0x7c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80093f8:	4a4a      	ldr	r2, [pc, #296]	; (8009524 <pvPortMalloc+0x164>)
 80093fa:	6811      	ldr	r1, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093fc:	e003      	b.n	8009406 <pvPortMalloc+0x46>
 80093fe:	680e      	ldr	r6, [r1, #0]
 8009400:	b126      	cbz	r6, 800940c <pvPortMalloc+0x4c>
 8009402:	460a      	mov	r2, r1
 8009404:	4631      	mov	r1, r6
 8009406:	6848      	ldr	r0, [r1, #4]
 8009408:	42a0      	cmp	r0, r4
 800940a:	d3f8      	bcc.n	80093fe <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800940c:	4299      	cmp	r1, r3
 800940e:	d015      	beq.n	800943c <pvPortMalloc+0x7c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009410:	460e      	mov	r6, r1
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009412:	eba0 0e04 	sub.w	lr, r0, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009416:	f856 8b08 	ldr.w	r8, [r6], #8
 800941a:	f8c2 8000 	str.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800941e:	f1be 0f10 	cmp.w	lr, #16
 8009422:	d950      	bls.n	80094c6 <pvPortMalloc+0x106>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009424:	190a      	adds	r2, r1, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009426:	0750      	lsls	r0, r2, #29
 8009428:	d034      	beq.n	8009494 <pvPortMalloc+0xd4>
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	e7fe      	b.n	800943a <pvPortMalloc+0x7a>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800943c:	f7fe fff8 	bl	8008430 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009440:	2600      	movs	r6, #0
 8009442:	f7f8 f9e3 	bl	800180c <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8009446:	4630      	mov	r0, r6
 8009448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800944c:	4b36      	ldr	r3, [pc, #216]	; (8009528 <pvPortMalloc+0x168>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800944e:	4c35      	ldr	r4, [pc, #212]	; (8009524 <pvPortMalloc+0x164>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009450:	4d36      	ldr	r5, [pc, #216]	; (800952c <pvPortMalloc+0x16c>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009452:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8009530 <pvPortMalloc+0x170>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009456:	075f      	lsls	r7, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009458:	bf14      	ite	ne
 800945a:	1dda      	addne	r2, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800945c:	461a      	moveq	r2, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800945e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
	uxAddress -= xHeapStructSize;
 8009462:	f1a3 0308 	sub.w	r3, r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009466:	f023 0307 	bic.w	r3, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800946a:	bf18      	it	ne
 800946c:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009470:	6022      	str	r2, [r4, #0]
 8009472:	4611      	mov	r1, r2

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009474:	4f2a      	ldr	r7, [pc, #168]	; (8009520 <pvPortMalloc+0x160>)
	pxEnd = ( void * ) uxAddress;
 8009476:	6003      	str	r3, [r0, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009478:	1a9a      	subs	r2, r3, r2
	xStart.xBlockSize = ( size_t ) 0;
 800947a:	2000      	movs	r0, #0
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800947c:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800947e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8009482:	6060      	str	r0, [r4, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009484:	f8cc 2000 	str.w	r2, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 8009488:	e9c3 0000 	strd	r0, r0, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800948c:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800948e:	e9c1 3200 	strd	r3, r2, [r1]
}
 8009492:	e7a0      	b.n	80093d6 <pvPortMalloc+0x16>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009494:	4823      	ldr	r0, [pc, #140]	; (8009524 <pvPortMalloc+0x164>)
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009496:	f8c2 e004 	str.w	lr, [r2, #4]
						pxBlock->xBlockSize = xWantedSize;
 800949a:	604c      	str	r4, [r1, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800949c:	4686      	mov	lr, r0
 800949e:	6800      	ldr	r0, [r0, #0]
 80094a0:	4282      	cmp	r2, r0
 80094a2:	d8fb      	bhi.n	800949c <pvPortMalloc+0xdc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094a4:	f8de 4004 	ldr.w	r4, [lr, #4]
 80094a8:	eb0e 0804 	add.w	r8, lr, r4
 80094ac:	4542      	cmp	r2, r8
 80094ae:	d027      	beq.n	8009500 <pvPortMalloc+0x140>
 80094b0:	6854      	ldr	r4, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094b2:	eb02 0804 	add.w	r8, r2, r4
 80094b6:	4540      	cmp	r0, r8
 80094b8:	d028      	beq.n	800950c <pvPortMalloc+0x14c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094ba:	6010      	str	r0, [r2, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094bc:	4596      	cmp	lr, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094be:	6848      	ldr	r0, [r1, #4]
 80094c0:	bf18      	it	ne
 80094c2:	f8ce 2000 	strne.w	r2, [lr]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094c6:	4c1a      	ldr	r4, [pc, #104]	; (8009530 <pvPortMalloc+0x170>)
 80094c8:	6822      	ldr	r2, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094ca:	1a3f      	subs	r7, r7, r0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094cc:	4297      	cmp	r7, r2
					xNumberOfSuccessfulAllocations++;
 80094ce:	4a19      	ldr	r2, [pc, #100]	; (8009534 <pvPortMalloc+0x174>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80094d0:	bf38      	it	cc
 80094d2:	6027      	strcc	r7, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80094d4:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094d6:	f8cc 7000 	str.w	r7, [ip]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094da:	4328      	orrs	r0, r5
					pxBlock->pxNextFreeBlock = NULL;
 80094dc:	2400      	movs	r4, #0
					xNumberOfSuccessfulAllocations++;
 80094de:	3301      	adds	r3, #1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094e0:	6048      	str	r0, [r1, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80094e2:	600c      	str	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 80094e4:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80094e6:	f7fe ffa3 	bl	8008430 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80094ea:	0773      	lsls	r3, r6, #29
 80094ec:	d0ab      	beq.n	8009446 <pvPortMalloc+0x86>
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	e7fe      	b.n	80094fe <pvPortMalloc+0x13e>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009500:	6852      	ldr	r2, [r2, #4]
 8009502:	4414      	add	r4, r2
 8009504:	f8ce 4004 	str.w	r4, [lr, #4]
		pxBlockToInsert = pxIterator;
 8009508:	4672      	mov	r2, lr
 800950a:	e7d2      	b.n	80094b2 <pvPortMalloc+0xf2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800950c:	4298      	cmp	r0, r3
 800950e:	d0d4      	beq.n	80094ba <pvPortMalloc+0xfa>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009510:	e9d0 0300 	ldrd	r0, r3, [r0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009514:	441c      	add	r4, r3
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009516:	6010      	str	r0, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009518:	6054      	str	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800951a:	e7cf      	b.n	80094bc <pvPortMalloc+0xfc>
 800951c:	2000187c 	.word	0x2000187c
 8009520:	20009880 	.word	0x20009880
 8009524:	20009894 	.word	0x20009894
 8009528:	20001880 	.word	0x20001880
 800952c:	20009884 	.word	0x20009884
 8009530:	20009888 	.word	0x20009888
 8009534:	2000988c 	.word	0x2000988c

08009538 <vPortFree>:
	if( pv != NULL )
 8009538:	b1e0      	cbz	r0, 8009574 <vPortFree+0x3c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800953a:	4a29      	ldr	r2, [pc, #164]	; (80095e0 <vPortFree+0xa8>)
{
 800953c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800953e:	6812      	ldr	r2, [r2, #0]
 8009540:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009544:	4213      	tst	r3, r2
 8009546:	4604      	mov	r4, r0
 8009548:	d00b      	beq.n	8009562 <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800954a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800954e:	b191      	cbz	r1, 8009576 <vPortFree+0x3e>
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	e7fe      	b.n	8009560 <vPortFree+0x28>
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009572:	e7fe      	b.n	8009572 <vPortFree+0x3a>
 8009574:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009576:	ea23 0302 	bic.w	r3, r3, r2
 800957a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800957e:	f7fe ff4f 	bl	8008420 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009582:	4918      	ldr	r1, [pc, #96]	; (80095e4 <vPortFree+0xac>)
 8009584:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8009588:	680b      	ldr	r3, [r1, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800958a:	4a17      	ldr	r2, [pc, #92]	; (80095e8 <vPortFree+0xb0>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 800958c:	4403      	add	r3, r0
 800958e:	600b      	str	r3, [r1, #0]
		puc -= xHeapStructSize;
 8009590:	f1a4 0308 	sub.w	r3, r4, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009594:	4611      	mov	r1, r2
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	4293      	cmp	r3, r2
 800959a:	d8fb      	bhi.n	8009594 <vPortFree+0x5c>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800959c:	684c      	ldr	r4, [r1, #4]
 800959e:	190d      	adds	r5, r1, r4
 80095a0:	42ab      	cmp	r3, r5
 80095a2:	d00e      	beq.n	80095c2 <vPortFree+0x8a>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095a4:	181c      	adds	r4, r3, r0
 80095a6:	42a2      	cmp	r2, r4
 80095a8:	d00f      	beq.n	80095ca <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095aa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulFrees++;
 80095ac:	4a0f      	ldr	r2, [pc, #60]	; (80095ec <vPortFree+0xb4>)
	if( pxIterator != pxBlockToInsert )
 80095ae:	4299      	cmp	r1, r3
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095b0:	bf18      	it	ne
 80095b2:	600b      	strne	r3, [r1, #0]
					xNumberOfSuccessfulFrees++;
 80095b4:	6813      	ldr	r3, [r2, #0]
 80095b6:	3301      	adds	r3, #1
 80095b8:	6013      	str	r3, [r2, #0]
}
 80095ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 80095be:	f7fe bf37 	b.w	8008430 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095c2:	4420      	add	r0, r4
 80095c4:	6048      	str	r0, [r1, #4]
		pxBlockToInsert = pxIterator;
 80095c6:	460b      	mov	r3, r1
 80095c8:	e7ec      	b.n	80095a4 <vPortFree+0x6c>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095ca:	4c09      	ldr	r4, [pc, #36]	; (80095f0 <vPortFree+0xb8>)
 80095cc:	6824      	ldr	r4, [r4, #0]
 80095ce:	42a2      	cmp	r2, r4
 80095d0:	d0eb      	beq.n	80095aa <vPortFree+0x72>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095d2:	e9d2 2400 	ldrd	r2, r4, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095d6:	4420      	add	r0, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095d8:	601a      	str	r2, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095da:	6058      	str	r0, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095dc:	e7e6      	b.n	80095ac <vPortFree+0x74>
 80095de:	bf00      	nop
 80095e0:	20009880 	.word	0x20009880
 80095e4:	20009884 	.word	0x20009884
 80095e8:	20009894 	.word	0x20009894
 80095ec:	20009890 	.word	0x20009890
 80095f0:	2000187c 	.word	0x2000187c

080095f4 <__errno>:
 80095f4:	4b01      	ldr	r3, [pc, #4]	; (80095fc <__errno+0x8>)
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	2000000c 	.word	0x2000000c

08009600 <__libc_init_array>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	4d0d      	ldr	r5, [pc, #52]	; (8009638 <__libc_init_array+0x38>)
 8009604:	4c0d      	ldr	r4, [pc, #52]	; (800963c <__libc_init_array+0x3c>)
 8009606:	1b64      	subs	r4, r4, r5
 8009608:	10a4      	asrs	r4, r4, #2
 800960a:	2600      	movs	r6, #0
 800960c:	42a6      	cmp	r6, r4
 800960e:	d109      	bne.n	8009624 <__libc_init_array+0x24>
 8009610:	4d0b      	ldr	r5, [pc, #44]	; (8009640 <__libc_init_array+0x40>)
 8009612:	4c0c      	ldr	r4, [pc, #48]	; (8009644 <__libc_init_array+0x44>)
 8009614:	f000 fffa 	bl	800a60c <_init>
 8009618:	1b64      	subs	r4, r4, r5
 800961a:	10a4      	asrs	r4, r4, #2
 800961c:	2600      	movs	r6, #0
 800961e:	42a6      	cmp	r6, r4
 8009620:	d105      	bne.n	800962e <__libc_init_array+0x2e>
 8009622:	bd70      	pop	{r4, r5, r6, pc}
 8009624:	f855 3b04 	ldr.w	r3, [r5], #4
 8009628:	4798      	blx	r3
 800962a:	3601      	adds	r6, #1
 800962c:	e7ee      	b.n	800960c <__libc_init_array+0xc>
 800962e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009632:	4798      	blx	r3
 8009634:	3601      	adds	r6, #1
 8009636:	e7f2      	b.n	800961e <__libc_init_array+0x1e>
 8009638:	0800ae2c 	.word	0x0800ae2c
 800963c:	0800ae2c 	.word	0x0800ae2c
 8009640:	0800ae2c 	.word	0x0800ae2c
 8009644:	0800ae30 	.word	0x0800ae30

08009648 <memcpy>:
 8009648:	440a      	add	r2, r1
 800964a:	4291      	cmp	r1, r2
 800964c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009650:	d100      	bne.n	8009654 <memcpy+0xc>
 8009652:	4770      	bx	lr
 8009654:	b510      	push	{r4, lr}
 8009656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800965a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800965e:	4291      	cmp	r1, r2
 8009660:	d1f9      	bne.n	8009656 <memcpy+0xe>
 8009662:	bd10      	pop	{r4, pc}

08009664 <memset>:
 8009664:	4402      	add	r2, r0
 8009666:	4603      	mov	r3, r0
 8009668:	4293      	cmp	r3, r2
 800966a:	d100      	bne.n	800966e <memset+0xa>
 800966c:	4770      	bx	lr
 800966e:	f803 1b01 	strb.w	r1, [r3], #1
 8009672:	e7f9      	b.n	8009668 <memset+0x4>

08009674 <iprintf>:
 8009674:	b40f      	push	{r0, r1, r2, r3}
 8009676:	4b0a      	ldr	r3, [pc, #40]	; (80096a0 <iprintf+0x2c>)
 8009678:	b513      	push	{r0, r1, r4, lr}
 800967a:	681c      	ldr	r4, [r3, #0]
 800967c:	b124      	cbz	r4, 8009688 <iprintf+0x14>
 800967e:	69a3      	ldr	r3, [r4, #24]
 8009680:	b913      	cbnz	r3, 8009688 <iprintf+0x14>
 8009682:	4620      	mov	r0, r4
 8009684:	f000 fa5e 	bl	8009b44 <__sinit>
 8009688:	ab05      	add	r3, sp, #20
 800968a:	9a04      	ldr	r2, [sp, #16]
 800968c:	68a1      	ldr	r1, [r4, #8]
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	4620      	mov	r0, r4
 8009692:	f000 fc2f 	bl	8009ef4 <_vfiprintf_r>
 8009696:	b002      	add	sp, #8
 8009698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800969c:	b004      	add	sp, #16
 800969e:	4770      	bx	lr
 80096a0:	2000000c 	.word	0x2000000c

080096a4 <_puts_r>:
 80096a4:	b570      	push	{r4, r5, r6, lr}
 80096a6:	460e      	mov	r6, r1
 80096a8:	4605      	mov	r5, r0
 80096aa:	b118      	cbz	r0, 80096b4 <_puts_r+0x10>
 80096ac:	6983      	ldr	r3, [r0, #24]
 80096ae:	b90b      	cbnz	r3, 80096b4 <_puts_r+0x10>
 80096b0:	f000 fa48 	bl	8009b44 <__sinit>
 80096b4:	69ab      	ldr	r3, [r5, #24]
 80096b6:	68ac      	ldr	r4, [r5, #8]
 80096b8:	b913      	cbnz	r3, 80096c0 <_puts_r+0x1c>
 80096ba:	4628      	mov	r0, r5
 80096bc:	f000 fa42 	bl	8009b44 <__sinit>
 80096c0:	4b2c      	ldr	r3, [pc, #176]	; (8009774 <_puts_r+0xd0>)
 80096c2:	429c      	cmp	r4, r3
 80096c4:	d120      	bne.n	8009708 <_puts_r+0x64>
 80096c6:	686c      	ldr	r4, [r5, #4]
 80096c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096ca:	07db      	lsls	r3, r3, #31
 80096cc:	d405      	bmi.n	80096da <_puts_r+0x36>
 80096ce:	89a3      	ldrh	r3, [r4, #12]
 80096d0:	0598      	lsls	r0, r3, #22
 80096d2:	d402      	bmi.n	80096da <_puts_r+0x36>
 80096d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096d6:	f000 fad3 	bl	8009c80 <__retarget_lock_acquire_recursive>
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	0719      	lsls	r1, r3, #28
 80096de:	d51d      	bpl.n	800971c <_puts_r+0x78>
 80096e0:	6923      	ldr	r3, [r4, #16]
 80096e2:	b1db      	cbz	r3, 800971c <_puts_r+0x78>
 80096e4:	3e01      	subs	r6, #1
 80096e6:	68a3      	ldr	r3, [r4, #8]
 80096e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80096ec:	3b01      	subs	r3, #1
 80096ee:	60a3      	str	r3, [r4, #8]
 80096f0:	bb39      	cbnz	r1, 8009742 <_puts_r+0x9e>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	da38      	bge.n	8009768 <_puts_r+0xc4>
 80096f6:	4622      	mov	r2, r4
 80096f8:	210a      	movs	r1, #10
 80096fa:	4628      	mov	r0, r5
 80096fc:	f000 f848 	bl	8009790 <__swbuf_r>
 8009700:	3001      	adds	r0, #1
 8009702:	d011      	beq.n	8009728 <_puts_r+0x84>
 8009704:	250a      	movs	r5, #10
 8009706:	e011      	b.n	800972c <_puts_r+0x88>
 8009708:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <_puts_r+0xd4>)
 800970a:	429c      	cmp	r4, r3
 800970c:	d101      	bne.n	8009712 <_puts_r+0x6e>
 800970e:	68ac      	ldr	r4, [r5, #8]
 8009710:	e7da      	b.n	80096c8 <_puts_r+0x24>
 8009712:	4b1a      	ldr	r3, [pc, #104]	; (800977c <_puts_r+0xd8>)
 8009714:	429c      	cmp	r4, r3
 8009716:	bf08      	it	eq
 8009718:	68ec      	ldreq	r4, [r5, #12]
 800971a:	e7d5      	b.n	80096c8 <_puts_r+0x24>
 800971c:	4621      	mov	r1, r4
 800971e:	4628      	mov	r0, r5
 8009720:	f000 f888 	bl	8009834 <__swsetup_r>
 8009724:	2800      	cmp	r0, #0
 8009726:	d0dd      	beq.n	80096e4 <_puts_r+0x40>
 8009728:	f04f 35ff 	mov.w	r5, #4294967295
 800972c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800972e:	07da      	lsls	r2, r3, #31
 8009730:	d405      	bmi.n	800973e <_puts_r+0x9a>
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	059b      	lsls	r3, r3, #22
 8009736:	d402      	bmi.n	800973e <_puts_r+0x9a>
 8009738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800973a:	f000 faa2 	bl	8009c82 <__retarget_lock_release_recursive>
 800973e:	4628      	mov	r0, r5
 8009740:	bd70      	pop	{r4, r5, r6, pc}
 8009742:	2b00      	cmp	r3, #0
 8009744:	da04      	bge.n	8009750 <_puts_r+0xac>
 8009746:	69a2      	ldr	r2, [r4, #24]
 8009748:	429a      	cmp	r2, r3
 800974a:	dc06      	bgt.n	800975a <_puts_r+0xb6>
 800974c:	290a      	cmp	r1, #10
 800974e:	d004      	beq.n	800975a <_puts_r+0xb6>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	6022      	str	r2, [r4, #0]
 8009756:	7019      	strb	r1, [r3, #0]
 8009758:	e7c5      	b.n	80096e6 <_puts_r+0x42>
 800975a:	4622      	mov	r2, r4
 800975c:	4628      	mov	r0, r5
 800975e:	f000 f817 	bl	8009790 <__swbuf_r>
 8009762:	3001      	adds	r0, #1
 8009764:	d1bf      	bne.n	80096e6 <_puts_r+0x42>
 8009766:	e7df      	b.n	8009728 <_puts_r+0x84>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	250a      	movs	r5, #10
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	6022      	str	r2, [r4, #0]
 8009770:	701d      	strb	r5, [r3, #0]
 8009772:	e7db      	b.n	800972c <_puts_r+0x88>
 8009774:	0800adb0 	.word	0x0800adb0
 8009778:	0800add0 	.word	0x0800add0
 800977c:	0800ad90 	.word	0x0800ad90

08009780 <puts>:
 8009780:	4b02      	ldr	r3, [pc, #8]	; (800978c <puts+0xc>)
 8009782:	4601      	mov	r1, r0
 8009784:	6818      	ldr	r0, [r3, #0]
 8009786:	f7ff bf8d 	b.w	80096a4 <_puts_r>
 800978a:	bf00      	nop
 800978c:	2000000c 	.word	0x2000000c

08009790 <__swbuf_r>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	460e      	mov	r6, r1
 8009794:	4614      	mov	r4, r2
 8009796:	4605      	mov	r5, r0
 8009798:	b118      	cbz	r0, 80097a2 <__swbuf_r+0x12>
 800979a:	6983      	ldr	r3, [r0, #24]
 800979c:	b90b      	cbnz	r3, 80097a2 <__swbuf_r+0x12>
 800979e:	f000 f9d1 	bl	8009b44 <__sinit>
 80097a2:	4b21      	ldr	r3, [pc, #132]	; (8009828 <__swbuf_r+0x98>)
 80097a4:	429c      	cmp	r4, r3
 80097a6:	d12b      	bne.n	8009800 <__swbuf_r+0x70>
 80097a8:	686c      	ldr	r4, [r5, #4]
 80097aa:	69a3      	ldr	r3, [r4, #24]
 80097ac:	60a3      	str	r3, [r4, #8]
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	071a      	lsls	r2, r3, #28
 80097b2:	d52f      	bpl.n	8009814 <__swbuf_r+0x84>
 80097b4:	6923      	ldr	r3, [r4, #16]
 80097b6:	b36b      	cbz	r3, 8009814 <__swbuf_r+0x84>
 80097b8:	6923      	ldr	r3, [r4, #16]
 80097ba:	6820      	ldr	r0, [r4, #0]
 80097bc:	1ac0      	subs	r0, r0, r3
 80097be:	6963      	ldr	r3, [r4, #20]
 80097c0:	b2f6      	uxtb	r6, r6
 80097c2:	4283      	cmp	r3, r0
 80097c4:	4637      	mov	r7, r6
 80097c6:	dc04      	bgt.n	80097d2 <__swbuf_r+0x42>
 80097c8:	4621      	mov	r1, r4
 80097ca:	4628      	mov	r0, r5
 80097cc:	f000 f926 	bl	8009a1c <_fflush_r>
 80097d0:	bb30      	cbnz	r0, 8009820 <__swbuf_r+0x90>
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	60a3      	str	r3, [r4, #8]
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	6022      	str	r2, [r4, #0]
 80097de:	701e      	strb	r6, [r3, #0]
 80097e0:	6963      	ldr	r3, [r4, #20]
 80097e2:	3001      	adds	r0, #1
 80097e4:	4283      	cmp	r3, r0
 80097e6:	d004      	beq.n	80097f2 <__swbuf_r+0x62>
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	07db      	lsls	r3, r3, #31
 80097ec:	d506      	bpl.n	80097fc <__swbuf_r+0x6c>
 80097ee:	2e0a      	cmp	r6, #10
 80097f0:	d104      	bne.n	80097fc <__swbuf_r+0x6c>
 80097f2:	4621      	mov	r1, r4
 80097f4:	4628      	mov	r0, r5
 80097f6:	f000 f911 	bl	8009a1c <_fflush_r>
 80097fa:	b988      	cbnz	r0, 8009820 <__swbuf_r+0x90>
 80097fc:	4638      	mov	r0, r7
 80097fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <__swbuf_r+0x9c>)
 8009802:	429c      	cmp	r4, r3
 8009804:	d101      	bne.n	800980a <__swbuf_r+0x7a>
 8009806:	68ac      	ldr	r4, [r5, #8]
 8009808:	e7cf      	b.n	80097aa <__swbuf_r+0x1a>
 800980a:	4b09      	ldr	r3, [pc, #36]	; (8009830 <__swbuf_r+0xa0>)
 800980c:	429c      	cmp	r4, r3
 800980e:	bf08      	it	eq
 8009810:	68ec      	ldreq	r4, [r5, #12]
 8009812:	e7ca      	b.n	80097aa <__swbuf_r+0x1a>
 8009814:	4621      	mov	r1, r4
 8009816:	4628      	mov	r0, r5
 8009818:	f000 f80c 	bl	8009834 <__swsetup_r>
 800981c:	2800      	cmp	r0, #0
 800981e:	d0cb      	beq.n	80097b8 <__swbuf_r+0x28>
 8009820:	f04f 37ff 	mov.w	r7, #4294967295
 8009824:	e7ea      	b.n	80097fc <__swbuf_r+0x6c>
 8009826:	bf00      	nop
 8009828:	0800adb0 	.word	0x0800adb0
 800982c:	0800add0 	.word	0x0800add0
 8009830:	0800ad90 	.word	0x0800ad90

08009834 <__swsetup_r>:
 8009834:	4b32      	ldr	r3, [pc, #200]	; (8009900 <__swsetup_r+0xcc>)
 8009836:	b570      	push	{r4, r5, r6, lr}
 8009838:	681d      	ldr	r5, [r3, #0]
 800983a:	4606      	mov	r6, r0
 800983c:	460c      	mov	r4, r1
 800983e:	b125      	cbz	r5, 800984a <__swsetup_r+0x16>
 8009840:	69ab      	ldr	r3, [r5, #24]
 8009842:	b913      	cbnz	r3, 800984a <__swsetup_r+0x16>
 8009844:	4628      	mov	r0, r5
 8009846:	f000 f97d 	bl	8009b44 <__sinit>
 800984a:	4b2e      	ldr	r3, [pc, #184]	; (8009904 <__swsetup_r+0xd0>)
 800984c:	429c      	cmp	r4, r3
 800984e:	d10f      	bne.n	8009870 <__swsetup_r+0x3c>
 8009850:	686c      	ldr	r4, [r5, #4]
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009858:	0719      	lsls	r1, r3, #28
 800985a:	d42c      	bmi.n	80098b6 <__swsetup_r+0x82>
 800985c:	06dd      	lsls	r5, r3, #27
 800985e:	d411      	bmi.n	8009884 <__swsetup_r+0x50>
 8009860:	2309      	movs	r3, #9
 8009862:	6033      	str	r3, [r6, #0]
 8009864:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	f04f 30ff 	mov.w	r0, #4294967295
 800986e:	e03e      	b.n	80098ee <__swsetup_r+0xba>
 8009870:	4b25      	ldr	r3, [pc, #148]	; (8009908 <__swsetup_r+0xd4>)
 8009872:	429c      	cmp	r4, r3
 8009874:	d101      	bne.n	800987a <__swsetup_r+0x46>
 8009876:	68ac      	ldr	r4, [r5, #8]
 8009878:	e7eb      	b.n	8009852 <__swsetup_r+0x1e>
 800987a:	4b24      	ldr	r3, [pc, #144]	; (800990c <__swsetup_r+0xd8>)
 800987c:	429c      	cmp	r4, r3
 800987e:	bf08      	it	eq
 8009880:	68ec      	ldreq	r4, [r5, #12]
 8009882:	e7e6      	b.n	8009852 <__swsetup_r+0x1e>
 8009884:	0758      	lsls	r0, r3, #29
 8009886:	d512      	bpl.n	80098ae <__swsetup_r+0x7a>
 8009888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800988a:	b141      	cbz	r1, 800989e <__swsetup_r+0x6a>
 800988c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009890:	4299      	cmp	r1, r3
 8009892:	d002      	beq.n	800989a <__swsetup_r+0x66>
 8009894:	4630      	mov	r0, r6
 8009896:	f000 fa59 	bl	8009d4c <_free_r>
 800989a:	2300      	movs	r3, #0
 800989c:	6363      	str	r3, [r4, #52]	; 0x34
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	2300      	movs	r3, #0
 80098a8:	6063      	str	r3, [r4, #4]
 80098aa:	6923      	ldr	r3, [r4, #16]
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f043 0308 	orr.w	r3, r3, #8
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	6923      	ldr	r3, [r4, #16]
 80098b8:	b94b      	cbnz	r3, 80098ce <__swsetup_r+0x9a>
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098c4:	d003      	beq.n	80098ce <__swsetup_r+0x9a>
 80098c6:	4621      	mov	r1, r4
 80098c8:	4630      	mov	r0, r6
 80098ca:	f000 f9ff 	bl	8009ccc <__smakebuf_r>
 80098ce:	89a0      	ldrh	r0, [r4, #12]
 80098d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098d4:	f010 0301 	ands.w	r3, r0, #1
 80098d8:	d00a      	beq.n	80098f0 <__swsetup_r+0xbc>
 80098da:	2300      	movs	r3, #0
 80098dc:	60a3      	str	r3, [r4, #8]
 80098de:	6963      	ldr	r3, [r4, #20]
 80098e0:	425b      	negs	r3, r3
 80098e2:	61a3      	str	r3, [r4, #24]
 80098e4:	6923      	ldr	r3, [r4, #16]
 80098e6:	b943      	cbnz	r3, 80098fa <__swsetup_r+0xc6>
 80098e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098ec:	d1ba      	bne.n	8009864 <__swsetup_r+0x30>
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	0781      	lsls	r1, r0, #30
 80098f2:	bf58      	it	pl
 80098f4:	6963      	ldrpl	r3, [r4, #20]
 80098f6:	60a3      	str	r3, [r4, #8]
 80098f8:	e7f4      	b.n	80098e4 <__swsetup_r+0xb0>
 80098fa:	2000      	movs	r0, #0
 80098fc:	e7f7      	b.n	80098ee <__swsetup_r+0xba>
 80098fe:	bf00      	nop
 8009900:	2000000c 	.word	0x2000000c
 8009904:	0800adb0 	.word	0x0800adb0
 8009908:	0800add0 	.word	0x0800add0
 800990c:	0800ad90 	.word	0x0800ad90

08009910 <__sflush_r>:
 8009910:	898a      	ldrh	r2, [r1, #12]
 8009912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009916:	4605      	mov	r5, r0
 8009918:	0710      	lsls	r0, r2, #28
 800991a:	460c      	mov	r4, r1
 800991c:	d458      	bmi.n	80099d0 <__sflush_r+0xc0>
 800991e:	684b      	ldr	r3, [r1, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	dc05      	bgt.n	8009930 <__sflush_r+0x20>
 8009924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	dc02      	bgt.n	8009930 <__sflush_r+0x20>
 800992a:	2000      	movs	r0, #0
 800992c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009932:	2e00      	cmp	r6, #0
 8009934:	d0f9      	beq.n	800992a <__sflush_r+0x1a>
 8009936:	2300      	movs	r3, #0
 8009938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800993c:	682f      	ldr	r7, [r5, #0]
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	d032      	beq.n	80099a8 <__sflush_r+0x98>
 8009942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	075a      	lsls	r2, r3, #29
 8009948:	d505      	bpl.n	8009956 <__sflush_r+0x46>
 800994a:	6863      	ldr	r3, [r4, #4]
 800994c:	1ac0      	subs	r0, r0, r3
 800994e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009950:	b10b      	cbz	r3, 8009956 <__sflush_r+0x46>
 8009952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009954:	1ac0      	subs	r0, r0, r3
 8009956:	2300      	movs	r3, #0
 8009958:	4602      	mov	r2, r0
 800995a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800995c:	6a21      	ldr	r1, [r4, #32]
 800995e:	4628      	mov	r0, r5
 8009960:	47b0      	blx	r6
 8009962:	1c43      	adds	r3, r0, #1
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	d106      	bne.n	8009976 <__sflush_r+0x66>
 8009968:	6829      	ldr	r1, [r5, #0]
 800996a:	291d      	cmp	r1, #29
 800996c:	d82c      	bhi.n	80099c8 <__sflush_r+0xb8>
 800996e:	4a2a      	ldr	r2, [pc, #168]	; (8009a18 <__sflush_r+0x108>)
 8009970:	40ca      	lsrs	r2, r1
 8009972:	07d6      	lsls	r6, r2, #31
 8009974:	d528      	bpl.n	80099c8 <__sflush_r+0xb8>
 8009976:	2200      	movs	r2, #0
 8009978:	6062      	str	r2, [r4, #4]
 800997a:	04d9      	lsls	r1, r3, #19
 800997c:	6922      	ldr	r2, [r4, #16]
 800997e:	6022      	str	r2, [r4, #0]
 8009980:	d504      	bpl.n	800998c <__sflush_r+0x7c>
 8009982:	1c42      	adds	r2, r0, #1
 8009984:	d101      	bne.n	800998a <__sflush_r+0x7a>
 8009986:	682b      	ldr	r3, [r5, #0]
 8009988:	b903      	cbnz	r3, 800998c <__sflush_r+0x7c>
 800998a:	6560      	str	r0, [r4, #84]	; 0x54
 800998c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800998e:	602f      	str	r7, [r5, #0]
 8009990:	2900      	cmp	r1, #0
 8009992:	d0ca      	beq.n	800992a <__sflush_r+0x1a>
 8009994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009998:	4299      	cmp	r1, r3
 800999a:	d002      	beq.n	80099a2 <__sflush_r+0x92>
 800999c:	4628      	mov	r0, r5
 800999e:	f000 f9d5 	bl	8009d4c <_free_r>
 80099a2:	2000      	movs	r0, #0
 80099a4:	6360      	str	r0, [r4, #52]	; 0x34
 80099a6:	e7c1      	b.n	800992c <__sflush_r+0x1c>
 80099a8:	6a21      	ldr	r1, [r4, #32]
 80099aa:	2301      	movs	r3, #1
 80099ac:	4628      	mov	r0, r5
 80099ae:	47b0      	blx	r6
 80099b0:	1c41      	adds	r1, r0, #1
 80099b2:	d1c7      	bne.n	8009944 <__sflush_r+0x34>
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0c4      	beq.n	8009944 <__sflush_r+0x34>
 80099ba:	2b1d      	cmp	r3, #29
 80099bc:	d001      	beq.n	80099c2 <__sflush_r+0xb2>
 80099be:	2b16      	cmp	r3, #22
 80099c0:	d101      	bne.n	80099c6 <__sflush_r+0xb6>
 80099c2:	602f      	str	r7, [r5, #0]
 80099c4:	e7b1      	b.n	800992a <__sflush_r+0x1a>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099cc:	81a3      	strh	r3, [r4, #12]
 80099ce:	e7ad      	b.n	800992c <__sflush_r+0x1c>
 80099d0:	690f      	ldr	r7, [r1, #16]
 80099d2:	2f00      	cmp	r7, #0
 80099d4:	d0a9      	beq.n	800992a <__sflush_r+0x1a>
 80099d6:	0793      	lsls	r3, r2, #30
 80099d8:	680e      	ldr	r6, [r1, #0]
 80099da:	bf08      	it	eq
 80099dc:	694b      	ldreq	r3, [r1, #20]
 80099de:	600f      	str	r7, [r1, #0]
 80099e0:	bf18      	it	ne
 80099e2:	2300      	movne	r3, #0
 80099e4:	eba6 0807 	sub.w	r8, r6, r7
 80099e8:	608b      	str	r3, [r1, #8]
 80099ea:	f1b8 0f00 	cmp.w	r8, #0
 80099ee:	dd9c      	ble.n	800992a <__sflush_r+0x1a>
 80099f0:	6a21      	ldr	r1, [r4, #32]
 80099f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099f4:	4643      	mov	r3, r8
 80099f6:	463a      	mov	r2, r7
 80099f8:	4628      	mov	r0, r5
 80099fa:	47b0      	blx	r6
 80099fc:	2800      	cmp	r0, #0
 80099fe:	dc06      	bgt.n	8009a0e <__sflush_r+0xfe>
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a06:	81a3      	strh	r3, [r4, #12]
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	e78e      	b.n	800992c <__sflush_r+0x1c>
 8009a0e:	4407      	add	r7, r0
 8009a10:	eba8 0800 	sub.w	r8, r8, r0
 8009a14:	e7e9      	b.n	80099ea <__sflush_r+0xda>
 8009a16:	bf00      	nop
 8009a18:	20400001 	.word	0x20400001

08009a1c <_fflush_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	690b      	ldr	r3, [r1, #16]
 8009a20:	4605      	mov	r5, r0
 8009a22:	460c      	mov	r4, r1
 8009a24:	b913      	cbnz	r3, 8009a2c <_fflush_r+0x10>
 8009a26:	2500      	movs	r5, #0
 8009a28:	4628      	mov	r0, r5
 8009a2a:	bd38      	pop	{r3, r4, r5, pc}
 8009a2c:	b118      	cbz	r0, 8009a36 <_fflush_r+0x1a>
 8009a2e:	6983      	ldr	r3, [r0, #24]
 8009a30:	b90b      	cbnz	r3, 8009a36 <_fflush_r+0x1a>
 8009a32:	f000 f887 	bl	8009b44 <__sinit>
 8009a36:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <_fflush_r+0x6c>)
 8009a38:	429c      	cmp	r4, r3
 8009a3a:	d11b      	bne.n	8009a74 <_fflush_r+0x58>
 8009a3c:	686c      	ldr	r4, [r5, #4]
 8009a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d0ef      	beq.n	8009a26 <_fflush_r+0xa>
 8009a46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a48:	07d0      	lsls	r0, r2, #31
 8009a4a:	d404      	bmi.n	8009a56 <_fflush_r+0x3a>
 8009a4c:	0599      	lsls	r1, r3, #22
 8009a4e:	d402      	bmi.n	8009a56 <_fflush_r+0x3a>
 8009a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a52:	f000 f915 	bl	8009c80 <__retarget_lock_acquire_recursive>
 8009a56:	4628      	mov	r0, r5
 8009a58:	4621      	mov	r1, r4
 8009a5a:	f7ff ff59 	bl	8009910 <__sflush_r>
 8009a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a60:	07da      	lsls	r2, r3, #31
 8009a62:	4605      	mov	r5, r0
 8009a64:	d4e0      	bmi.n	8009a28 <_fflush_r+0xc>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	059b      	lsls	r3, r3, #22
 8009a6a:	d4dd      	bmi.n	8009a28 <_fflush_r+0xc>
 8009a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a6e:	f000 f908 	bl	8009c82 <__retarget_lock_release_recursive>
 8009a72:	e7d9      	b.n	8009a28 <_fflush_r+0xc>
 8009a74:	4b05      	ldr	r3, [pc, #20]	; (8009a8c <_fflush_r+0x70>)
 8009a76:	429c      	cmp	r4, r3
 8009a78:	d101      	bne.n	8009a7e <_fflush_r+0x62>
 8009a7a:	68ac      	ldr	r4, [r5, #8]
 8009a7c:	e7df      	b.n	8009a3e <_fflush_r+0x22>
 8009a7e:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <_fflush_r+0x74>)
 8009a80:	429c      	cmp	r4, r3
 8009a82:	bf08      	it	eq
 8009a84:	68ec      	ldreq	r4, [r5, #12]
 8009a86:	e7da      	b.n	8009a3e <_fflush_r+0x22>
 8009a88:	0800adb0 	.word	0x0800adb0
 8009a8c:	0800add0 	.word	0x0800add0
 8009a90:	0800ad90 	.word	0x0800ad90

08009a94 <std>:
 8009a94:	2300      	movs	r3, #0
 8009a96:	b510      	push	{r4, lr}
 8009a98:	4604      	mov	r4, r0
 8009a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aa2:	6083      	str	r3, [r0, #8]
 8009aa4:	8181      	strh	r1, [r0, #12]
 8009aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8009aa8:	81c2      	strh	r2, [r0, #14]
 8009aaa:	6183      	str	r3, [r0, #24]
 8009aac:	4619      	mov	r1, r3
 8009aae:	2208      	movs	r2, #8
 8009ab0:	305c      	adds	r0, #92	; 0x5c
 8009ab2:	f7ff fdd7 	bl	8009664 <memset>
 8009ab6:	4b05      	ldr	r3, [pc, #20]	; (8009acc <std+0x38>)
 8009ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8009aba:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <std+0x3c>)
 8009abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009abe:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <std+0x40>)
 8009ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ac2:	4b05      	ldr	r3, [pc, #20]	; (8009ad8 <std+0x44>)
 8009ac4:	6224      	str	r4, [r4, #32]
 8009ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ac8:	bd10      	pop	{r4, pc}
 8009aca:	bf00      	nop
 8009acc:	0800a49d 	.word	0x0800a49d
 8009ad0:	0800a4bf 	.word	0x0800a4bf
 8009ad4:	0800a4f7 	.word	0x0800a4f7
 8009ad8:	0800a51b 	.word	0x0800a51b

08009adc <_cleanup_r>:
 8009adc:	4901      	ldr	r1, [pc, #4]	; (8009ae4 <_cleanup_r+0x8>)
 8009ade:	f000 b8af 	b.w	8009c40 <_fwalk_reent>
 8009ae2:	bf00      	nop
 8009ae4:	08009a1d 	.word	0x08009a1d

08009ae8 <__sfmoreglue>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	1e4a      	subs	r2, r1, #1
 8009aec:	2568      	movs	r5, #104	; 0x68
 8009aee:	4355      	muls	r5, r2
 8009af0:	460e      	mov	r6, r1
 8009af2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009af6:	f000 f979 	bl	8009dec <_malloc_r>
 8009afa:	4604      	mov	r4, r0
 8009afc:	b140      	cbz	r0, 8009b10 <__sfmoreglue+0x28>
 8009afe:	2100      	movs	r1, #0
 8009b00:	e9c0 1600 	strd	r1, r6, [r0]
 8009b04:	300c      	adds	r0, #12
 8009b06:	60a0      	str	r0, [r4, #8]
 8009b08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b0c:	f7ff fdaa 	bl	8009664 <memset>
 8009b10:	4620      	mov	r0, r4
 8009b12:	bd70      	pop	{r4, r5, r6, pc}

08009b14 <__sfp_lock_acquire>:
 8009b14:	4801      	ldr	r0, [pc, #4]	; (8009b1c <__sfp_lock_acquire+0x8>)
 8009b16:	f000 b8b3 	b.w	8009c80 <__retarget_lock_acquire_recursive>
 8009b1a:	bf00      	nop
 8009b1c:	20009ca4 	.word	0x20009ca4

08009b20 <__sfp_lock_release>:
 8009b20:	4801      	ldr	r0, [pc, #4]	; (8009b28 <__sfp_lock_release+0x8>)
 8009b22:	f000 b8ae 	b.w	8009c82 <__retarget_lock_release_recursive>
 8009b26:	bf00      	nop
 8009b28:	20009ca4 	.word	0x20009ca4

08009b2c <__sinit_lock_acquire>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	; (8009b34 <__sinit_lock_acquire+0x8>)
 8009b2e:	f000 b8a7 	b.w	8009c80 <__retarget_lock_acquire_recursive>
 8009b32:	bf00      	nop
 8009b34:	20009c9f 	.word	0x20009c9f

08009b38 <__sinit_lock_release>:
 8009b38:	4801      	ldr	r0, [pc, #4]	; (8009b40 <__sinit_lock_release+0x8>)
 8009b3a:	f000 b8a2 	b.w	8009c82 <__retarget_lock_release_recursive>
 8009b3e:	bf00      	nop
 8009b40:	20009c9f 	.word	0x20009c9f

08009b44 <__sinit>:
 8009b44:	b510      	push	{r4, lr}
 8009b46:	4604      	mov	r4, r0
 8009b48:	f7ff fff0 	bl	8009b2c <__sinit_lock_acquire>
 8009b4c:	69a3      	ldr	r3, [r4, #24]
 8009b4e:	b11b      	cbz	r3, 8009b58 <__sinit+0x14>
 8009b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b54:	f7ff bff0 	b.w	8009b38 <__sinit_lock_release>
 8009b58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b5c:	6523      	str	r3, [r4, #80]	; 0x50
 8009b5e:	4b13      	ldr	r3, [pc, #76]	; (8009bac <__sinit+0x68>)
 8009b60:	4a13      	ldr	r2, [pc, #76]	; (8009bb0 <__sinit+0x6c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b66:	42a3      	cmp	r3, r4
 8009b68:	bf04      	itt	eq
 8009b6a:	2301      	moveq	r3, #1
 8009b6c:	61a3      	streq	r3, [r4, #24]
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f000 f820 	bl	8009bb4 <__sfp>
 8009b74:	6060      	str	r0, [r4, #4]
 8009b76:	4620      	mov	r0, r4
 8009b78:	f000 f81c 	bl	8009bb4 <__sfp>
 8009b7c:	60a0      	str	r0, [r4, #8]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f000 f818 	bl	8009bb4 <__sfp>
 8009b84:	2200      	movs	r2, #0
 8009b86:	60e0      	str	r0, [r4, #12]
 8009b88:	2104      	movs	r1, #4
 8009b8a:	6860      	ldr	r0, [r4, #4]
 8009b8c:	f7ff ff82 	bl	8009a94 <std>
 8009b90:	68a0      	ldr	r0, [r4, #8]
 8009b92:	2201      	movs	r2, #1
 8009b94:	2109      	movs	r1, #9
 8009b96:	f7ff ff7d 	bl	8009a94 <std>
 8009b9a:	68e0      	ldr	r0, [r4, #12]
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	2112      	movs	r1, #18
 8009ba0:	f7ff ff78 	bl	8009a94 <std>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	61a3      	str	r3, [r4, #24]
 8009ba8:	e7d2      	b.n	8009b50 <__sinit+0xc>
 8009baa:	bf00      	nop
 8009bac:	0800ad8c 	.word	0x0800ad8c
 8009bb0:	08009add 	.word	0x08009add

08009bb4 <__sfp>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	f7ff ffac 	bl	8009b14 <__sfp_lock_acquire>
 8009bbc:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <__sfp+0x84>)
 8009bbe:	681e      	ldr	r6, [r3, #0]
 8009bc0:	69b3      	ldr	r3, [r6, #24]
 8009bc2:	b913      	cbnz	r3, 8009bca <__sfp+0x16>
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff ffbd 	bl	8009b44 <__sinit>
 8009bca:	3648      	adds	r6, #72	; 0x48
 8009bcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	d503      	bpl.n	8009bdc <__sfp+0x28>
 8009bd4:	6833      	ldr	r3, [r6, #0]
 8009bd6:	b30b      	cbz	r3, 8009c1c <__sfp+0x68>
 8009bd8:	6836      	ldr	r6, [r6, #0]
 8009bda:	e7f7      	b.n	8009bcc <__sfp+0x18>
 8009bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009be0:	b9d5      	cbnz	r5, 8009c18 <__sfp+0x64>
 8009be2:	4b16      	ldr	r3, [pc, #88]	; (8009c3c <__sfp+0x88>)
 8009be4:	60e3      	str	r3, [r4, #12]
 8009be6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bea:	6665      	str	r5, [r4, #100]	; 0x64
 8009bec:	f000 f847 	bl	8009c7e <__retarget_lock_init_recursive>
 8009bf0:	f7ff ff96 	bl	8009b20 <__sfp_lock_release>
 8009bf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bfc:	6025      	str	r5, [r4, #0]
 8009bfe:	61a5      	str	r5, [r4, #24]
 8009c00:	2208      	movs	r2, #8
 8009c02:	4629      	mov	r1, r5
 8009c04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c08:	f7ff fd2c 	bl	8009664 <memset>
 8009c0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c14:	4620      	mov	r0, r4
 8009c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c18:	3468      	adds	r4, #104	; 0x68
 8009c1a:	e7d9      	b.n	8009bd0 <__sfp+0x1c>
 8009c1c:	2104      	movs	r1, #4
 8009c1e:	4638      	mov	r0, r7
 8009c20:	f7ff ff62 	bl	8009ae8 <__sfmoreglue>
 8009c24:	4604      	mov	r4, r0
 8009c26:	6030      	str	r0, [r6, #0]
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d1d5      	bne.n	8009bd8 <__sfp+0x24>
 8009c2c:	f7ff ff78 	bl	8009b20 <__sfp_lock_release>
 8009c30:	230c      	movs	r3, #12
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	e7ee      	b.n	8009c14 <__sfp+0x60>
 8009c36:	bf00      	nop
 8009c38:	0800ad8c 	.word	0x0800ad8c
 8009c3c:	ffff0001 	.word	0xffff0001

08009c40 <_fwalk_reent>:
 8009c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c44:	4606      	mov	r6, r0
 8009c46:	4688      	mov	r8, r1
 8009c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c4c:	2700      	movs	r7, #0
 8009c4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c52:	f1b9 0901 	subs.w	r9, r9, #1
 8009c56:	d505      	bpl.n	8009c64 <_fwalk_reent+0x24>
 8009c58:	6824      	ldr	r4, [r4, #0]
 8009c5a:	2c00      	cmp	r4, #0
 8009c5c:	d1f7      	bne.n	8009c4e <_fwalk_reent+0xe>
 8009c5e:	4638      	mov	r0, r7
 8009c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c64:	89ab      	ldrh	r3, [r5, #12]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d907      	bls.n	8009c7a <_fwalk_reent+0x3a>
 8009c6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	d003      	beq.n	8009c7a <_fwalk_reent+0x3a>
 8009c72:	4629      	mov	r1, r5
 8009c74:	4630      	mov	r0, r6
 8009c76:	47c0      	blx	r8
 8009c78:	4307      	orrs	r7, r0
 8009c7a:	3568      	adds	r5, #104	; 0x68
 8009c7c:	e7e9      	b.n	8009c52 <_fwalk_reent+0x12>

08009c7e <__retarget_lock_init_recursive>:
 8009c7e:	4770      	bx	lr

08009c80 <__retarget_lock_acquire_recursive>:
 8009c80:	4770      	bx	lr

08009c82 <__retarget_lock_release_recursive>:
 8009c82:	4770      	bx	lr

08009c84 <__swhatbuf_r>:
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	460e      	mov	r6, r1
 8009c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	b096      	sub	sp, #88	; 0x58
 8009c90:	4614      	mov	r4, r2
 8009c92:	461d      	mov	r5, r3
 8009c94:	da07      	bge.n	8009ca6 <__swhatbuf_r+0x22>
 8009c96:	2300      	movs	r3, #0
 8009c98:	602b      	str	r3, [r5, #0]
 8009c9a:	89b3      	ldrh	r3, [r6, #12]
 8009c9c:	061a      	lsls	r2, r3, #24
 8009c9e:	d410      	bmi.n	8009cc2 <__swhatbuf_r+0x3e>
 8009ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ca4:	e00e      	b.n	8009cc4 <__swhatbuf_r+0x40>
 8009ca6:	466a      	mov	r2, sp
 8009ca8:	f000 fc5e 	bl	800a568 <_fstat_r>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	dbf2      	blt.n	8009c96 <__swhatbuf_r+0x12>
 8009cb0:	9a01      	ldr	r2, [sp, #4]
 8009cb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cba:	425a      	negs	r2, r3
 8009cbc:	415a      	adcs	r2, r3
 8009cbe:	602a      	str	r2, [r5, #0]
 8009cc0:	e7ee      	b.n	8009ca0 <__swhatbuf_r+0x1c>
 8009cc2:	2340      	movs	r3, #64	; 0x40
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	b016      	add	sp, #88	; 0x58
 8009cca:	bd70      	pop	{r4, r5, r6, pc}

08009ccc <__smakebuf_r>:
 8009ccc:	898b      	ldrh	r3, [r1, #12]
 8009cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cd0:	079d      	lsls	r5, r3, #30
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	d507      	bpl.n	8009ce8 <__smakebuf_r+0x1c>
 8009cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	6123      	str	r3, [r4, #16]
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	6163      	str	r3, [r4, #20]
 8009ce4:	b002      	add	sp, #8
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
 8009ce8:	ab01      	add	r3, sp, #4
 8009cea:	466a      	mov	r2, sp
 8009cec:	f7ff ffca 	bl	8009c84 <__swhatbuf_r>
 8009cf0:	9900      	ldr	r1, [sp, #0]
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f000 f879 	bl	8009dec <_malloc_r>
 8009cfa:	b948      	cbnz	r0, 8009d10 <__smakebuf_r+0x44>
 8009cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d00:	059a      	lsls	r2, r3, #22
 8009d02:	d4ef      	bmi.n	8009ce4 <__smakebuf_r+0x18>
 8009d04:	f023 0303 	bic.w	r3, r3, #3
 8009d08:	f043 0302 	orr.w	r3, r3, #2
 8009d0c:	81a3      	strh	r3, [r4, #12]
 8009d0e:	e7e3      	b.n	8009cd8 <__smakebuf_r+0xc>
 8009d10:	4b0d      	ldr	r3, [pc, #52]	; (8009d48 <__smakebuf_r+0x7c>)
 8009d12:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	6020      	str	r0, [r4, #0]
 8009d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	9b00      	ldr	r3, [sp, #0]
 8009d20:	6163      	str	r3, [r4, #20]
 8009d22:	9b01      	ldr	r3, [sp, #4]
 8009d24:	6120      	str	r0, [r4, #16]
 8009d26:	b15b      	cbz	r3, 8009d40 <__smakebuf_r+0x74>
 8009d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f000 fc2d 	bl	800a58c <_isatty_r>
 8009d32:	b128      	cbz	r0, 8009d40 <__smakebuf_r+0x74>
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	f023 0303 	bic.w	r3, r3, #3
 8009d3a:	f043 0301 	orr.w	r3, r3, #1
 8009d3e:	81a3      	strh	r3, [r4, #12]
 8009d40:	89a0      	ldrh	r0, [r4, #12]
 8009d42:	4305      	orrs	r5, r0
 8009d44:	81a5      	strh	r5, [r4, #12]
 8009d46:	e7cd      	b.n	8009ce4 <__smakebuf_r+0x18>
 8009d48:	08009add 	.word	0x08009add

08009d4c <_free_r>:
 8009d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	d048      	beq.n	8009de4 <_free_r+0x98>
 8009d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d56:	9001      	str	r0, [sp, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d5e:	bfb8      	it	lt
 8009d60:	18e4      	addlt	r4, r4, r3
 8009d62:	f000 fc35 	bl	800a5d0 <__malloc_lock>
 8009d66:	4a20      	ldr	r2, [pc, #128]	; (8009de8 <_free_r+0x9c>)
 8009d68:	9801      	ldr	r0, [sp, #4]
 8009d6a:	6813      	ldr	r3, [r2, #0]
 8009d6c:	4615      	mov	r5, r2
 8009d6e:	b933      	cbnz	r3, 8009d7e <_free_r+0x32>
 8009d70:	6063      	str	r3, [r4, #4]
 8009d72:	6014      	str	r4, [r2, #0]
 8009d74:	b003      	add	sp, #12
 8009d76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d7a:	f000 bc2f 	b.w	800a5dc <__malloc_unlock>
 8009d7e:	42a3      	cmp	r3, r4
 8009d80:	d90b      	bls.n	8009d9a <_free_r+0x4e>
 8009d82:	6821      	ldr	r1, [r4, #0]
 8009d84:	1862      	adds	r2, r4, r1
 8009d86:	4293      	cmp	r3, r2
 8009d88:	bf04      	itt	eq
 8009d8a:	681a      	ldreq	r2, [r3, #0]
 8009d8c:	685b      	ldreq	r3, [r3, #4]
 8009d8e:	6063      	str	r3, [r4, #4]
 8009d90:	bf04      	itt	eq
 8009d92:	1852      	addeq	r2, r2, r1
 8009d94:	6022      	streq	r2, [r4, #0]
 8009d96:	602c      	str	r4, [r5, #0]
 8009d98:	e7ec      	b.n	8009d74 <_free_r+0x28>
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	b10b      	cbz	r3, 8009da4 <_free_r+0x58>
 8009da0:	42a3      	cmp	r3, r4
 8009da2:	d9fa      	bls.n	8009d9a <_free_r+0x4e>
 8009da4:	6811      	ldr	r1, [r2, #0]
 8009da6:	1855      	adds	r5, r2, r1
 8009da8:	42a5      	cmp	r5, r4
 8009daa:	d10b      	bne.n	8009dc4 <_free_r+0x78>
 8009dac:	6824      	ldr	r4, [r4, #0]
 8009dae:	4421      	add	r1, r4
 8009db0:	1854      	adds	r4, r2, r1
 8009db2:	42a3      	cmp	r3, r4
 8009db4:	6011      	str	r1, [r2, #0]
 8009db6:	d1dd      	bne.n	8009d74 <_free_r+0x28>
 8009db8:	681c      	ldr	r4, [r3, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	6053      	str	r3, [r2, #4]
 8009dbe:	4421      	add	r1, r4
 8009dc0:	6011      	str	r1, [r2, #0]
 8009dc2:	e7d7      	b.n	8009d74 <_free_r+0x28>
 8009dc4:	d902      	bls.n	8009dcc <_free_r+0x80>
 8009dc6:	230c      	movs	r3, #12
 8009dc8:	6003      	str	r3, [r0, #0]
 8009dca:	e7d3      	b.n	8009d74 <_free_r+0x28>
 8009dcc:	6825      	ldr	r5, [r4, #0]
 8009dce:	1961      	adds	r1, r4, r5
 8009dd0:	428b      	cmp	r3, r1
 8009dd2:	bf04      	itt	eq
 8009dd4:	6819      	ldreq	r1, [r3, #0]
 8009dd6:	685b      	ldreq	r3, [r3, #4]
 8009dd8:	6063      	str	r3, [r4, #4]
 8009dda:	bf04      	itt	eq
 8009ddc:	1949      	addeq	r1, r1, r5
 8009dde:	6021      	streq	r1, [r4, #0]
 8009de0:	6054      	str	r4, [r2, #4]
 8009de2:	e7c7      	b.n	8009d74 <_free_r+0x28>
 8009de4:	b003      	add	sp, #12
 8009de6:	bd30      	pop	{r4, r5, pc}
 8009de8:	2000989c 	.word	0x2000989c

08009dec <_malloc_r>:
 8009dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dee:	1ccd      	adds	r5, r1, #3
 8009df0:	f025 0503 	bic.w	r5, r5, #3
 8009df4:	3508      	adds	r5, #8
 8009df6:	2d0c      	cmp	r5, #12
 8009df8:	bf38      	it	cc
 8009dfa:	250c      	movcc	r5, #12
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	4606      	mov	r6, r0
 8009e00:	db01      	blt.n	8009e06 <_malloc_r+0x1a>
 8009e02:	42a9      	cmp	r1, r5
 8009e04:	d903      	bls.n	8009e0e <_malloc_r+0x22>
 8009e06:	230c      	movs	r3, #12
 8009e08:	6033      	str	r3, [r6, #0]
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e0e:	f000 fbdf 	bl	800a5d0 <__malloc_lock>
 8009e12:	4921      	ldr	r1, [pc, #132]	; (8009e98 <_malloc_r+0xac>)
 8009e14:	680a      	ldr	r2, [r1, #0]
 8009e16:	4614      	mov	r4, r2
 8009e18:	b99c      	cbnz	r4, 8009e42 <_malloc_r+0x56>
 8009e1a:	4f20      	ldr	r7, [pc, #128]	; (8009e9c <_malloc_r+0xb0>)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	b923      	cbnz	r3, 8009e2a <_malloc_r+0x3e>
 8009e20:	4621      	mov	r1, r4
 8009e22:	4630      	mov	r0, r6
 8009e24:	f000 fb2a 	bl	800a47c <_sbrk_r>
 8009e28:	6038      	str	r0, [r7, #0]
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f000 fb25 	bl	800a47c <_sbrk_r>
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	d123      	bne.n	8009e7e <_malloc_r+0x92>
 8009e36:	230c      	movs	r3, #12
 8009e38:	6033      	str	r3, [r6, #0]
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f000 fbce 	bl	800a5dc <__malloc_unlock>
 8009e40:	e7e3      	b.n	8009e0a <_malloc_r+0x1e>
 8009e42:	6823      	ldr	r3, [r4, #0]
 8009e44:	1b5b      	subs	r3, r3, r5
 8009e46:	d417      	bmi.n	8009e78 <_malloc_r+0x8c>
 8009e48:	2b0b      	cmp	r3, #11
 8009e4a:	d903      	bls.n	8009e54 <_malloc_r+0x68>
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	441c      	add	r4, r3
 8009e50:	6025      	str	r5, [r4, #0]
 8009e52:	e004      	b.n	8009e5e <_malloc_r+0x72>
 8009e54:	6863      	ldr	r3, [r4, #4]
 8009e56:	42a2      	cmp	r2, r4
 8009e58:	bf0c      	ite	eq
 8009e5a:	600b      	streq	r3, [r1, #0]
 8009e5c:	6053      	strne	r3, [r2, #4]
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f000 fbbc 	bl	800a5dc <__malloc_unlock>
 8009e64:	f104 000b 	add.w	r0, r4, #11
 8009e68:	1d23      	adds	r3, r4, #4
 8009e6a:	f020 0007 	bic.w	r0, r0, #7
 8009e6e:	1ac2      	subs	r2, r0, r3
 8009e70:	d0cc      	beq.n	8009e0c <_malloc_r+0x20>
 8009e72:	1a1b      	subs	r3, r3, r0
 8009e74:	50a3      	str	r3, [r4, r2]
 8009e76:	e7c9      	b.n	8009e0c <_malloc_r+0x20>
 8009e78:	4622      	mov	r2, r4
 8009e7a:	6864      	ldr	r4, [r4, #4]
 8009e7c:	e7cc      	b.n	8009e18 <_malloc_r+0x2c>
 8009e7e:	1cc4      	adds	r4, r0, #3
 8009e80:	f024 0403 	bic.w	r4, r4, #3
 8009e84:	42a0      	cmp	r0, r4
 8009e86:	d0e3      	beq.n	8009e50 <_malloc_r+0x64>
 8009e88:	1a21      	subs	r1, r4, r0
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	f000 faf6 	bl	800a47c <_sbrk_r>
 8009e90:	3001      	adds	r0, #1
 8009e92:	d1dd      	bne.n	8009e50 <_malloc_r+0x64>
 8009e94:	e7cf      	b.n	8009e36 <_malloc_r+0x4a>
 8009e96:	bf00      	nop
 8009e98:	2000989c 	.word	0x2000989c
 8009e9c:	200098a0 	.word	0x200098a0

08009ea0 <__sfputc_r>:
 8009ea0:	6893      	ldr	r3, [r2, #8]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	b410      	push	{r4}
 8009ea8:	6093      	str	r3, [r2, #8]
 8009eaa:	da08      	bge.n	8009ebe <__sfputc_r+0x1e>
 8009eac:	6994      	ldr	r4, [r2, #24]
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	db01      	blt.n	8009eb6 <__sfputc_r+0x16>
 8009eb2:	290a      	cmp	r1, #10
 8009eb4:	d103      	bne.n	8009ebe <__sfputc_r+0x1e>
 8009eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eba:	f7ff bc69 	b.w	8009790 <__swbuf_r>
 8009ebe:	6813      	ldr	r3, [r2, #0]
 8009ec0:	1c58      	adds	r0, r3, #1
 8009ec2:	6010      	str	r0, [r2, #0]
 8009ec4:	7019      	strb	r1, [r3, #0]
 8009ec6:	4608      	mov	r0, r1
 8009ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ecc:	4770      	bx	lr

08009ece <__sfputs_r>:
 8009ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	4614      	mov	r4, r2
 8009ed6:	18d5      	adds	r5, r2, r3
 8009ed8:	42ac      	cmp	r4, r5
 8009eda:	d101      	bne.n	8009ee0 <__sfputs_r+0x12>
 8009edc:	2000      	movs	r0, #0
 8009ede:	e007      	b.n	8009ef0 <__sfputs_r+0x22>
 8009ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee4:	463a      	mov	r2, r7
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ffda 	bl	8009ea0 <__sfputc_r>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d1f3      	bne.n	8009ed8 <__sfputs_r+0xa>
 8009ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ef4 <_vfiprintf_r>:
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	460d      	mov	r5, r1
 8009efa:	b09d      	sub	sp, #116	; 0x74
 8009efc:	4614      	mov	r4, r2
 8009efe:	4698      	mov	r8, r3
 8009f00:	4606      	mov	r6, r0
 8009f02:	b118      	cbz	r0, 8009f0c <_vfiprintf_r+0x18>
 8009f04:	6983      	ldr	r3, [r0, #24]
 8009f06:	b90b      	cbnz	r3, 8009f0c <_vfiprintf_r+0x18>
 8009f08:	f7ff fe1c 	bl	8009b44 <__sinit>
 8009f0c:	4b89      	ldr	r3, [pc, #548]	; (800a134 <_vfiprintf_r+0x240>)
 8009f0e:	429d      	cmp	r5, r3
 8009f10:	d11b      	bne.n	8009f4a <_vfiprintf_r+0x56>
 8009f12:	6875      	ldr	r5, [r6, #4]
 8009f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f16:	07d9      	lsls	r1, r3, #31
 8009f18:	d405      	bmi.n	8009f26 <_vfiprintf_r+0x32>
 8009f1a:	89ab      	ldrh	r3, [r5, #12]
 8009f1c:	059a      	lsls	r2, r3, #22
 8009f1e:	d402      	bmi.n	8009f26 <_vfiprintf_r+0x32>
 8009f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f22:	f7ff fead 	bl	8009c80 <__retarget_lock_acquire_recursive>
 8009f26:	89ab      	ldrh	r3, [r5, #12]
 8009f28:	071b      	lsls	r3, r3, #28
 8009f2a:	d501      	bpl.n	8009f30 <_vfiprintf_r+0x3c>
 8009f2c:	692b      	ldr	r3, [r5, #16]
 8009f2e:	b9eb      	cbnz	r3, 8009f6c <_vfiprintf_r+0x78>
 8009f30:	4629      	mov	r1, r5
 8009f32:	4630      	mov	r0, r6
 8009f34:	f7ff fc7e 	bl	8009834 <__swsetup_r>
 8009f38:	b1c0      	cbz	r0, 8009f6c <_vfiprintf_r+0x78>
 8009f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f3c:	07dc      	lsls	r4, r3, #31
 8009f3e:	d50e      	bpl.n	8009f5e <_vfiprintf_r+0x6a>
 8009f40:	f04f 30ff 	mov.w	r0, #4294967295
 8009f44:	b01d      	add	sp, #116	; 0x74
 8009f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4a:	4b7b      	ldr	r3, [pc, #492]	; (800a138 <_vfiprintf_r+0x244>)
 8009f4c:	429d      	cmp	r5, r3
 8009f4e:	d101      	bne.n	8009f54 <_vfiprintf_r+0x60>
 8009f50:	68b5      	ldr	r5, [r6, #8]
 8009f52:	e7df      	b.n	8009f14 <_vfiprintf_r+0x20>
 8009f54:	4b79      	ldr	r3, [pc, #484]	; (800a13c <_vfiprintf_r+0x248>)
 8009f56:	429d      	cmp	r5, r3
 8009f58:	bf08      	it	eq
 8009f5a:	68f5      	ldreq	r5, [r6, #12]
 8009f5c:	e7da      	b.n	8009f14 <_vfiprintf_r+0x20>
 8009f5e:	89ab      	ldrh	r3, [r5, #12]
 8009f60:	0598      	lsls	r0, r3, #22
 8009f62:	d4ed      	bmi.n	8009f40 <_vfiprintf_r+0x4c>
 8009f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f66:	f7ff fe8c 	bl	8009c82 <__retarget_lock_release_recursive>
 8009f6a:	e7e9      	b.n	8009f40 <_vfiprintf_r+0x4c>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f70:	2320      	movs	r3, #32
 8009f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f7a:	2330      	movs	r3, #48	; 0x30
 8009f7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a140 <_vfiprintf_r+0x24c>
 8009f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f84:	f04f 0901 	mov.w	r9, #1
 8009f88:	4623      	mov	r3, r4
 8009f8a:	469a      	mov	sl, r3
 8009f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f90:	b10a      	cbz	r2, 8009f96 <_vfiprintf_r+0xa2>
 8009f92:	2a25      	cmp	r2, #37	; 0x25
 8009f94:	d1f9      	bne.n	8009f8a <_vfiprintf_r+0x96>
 8009f96:	ebba 0b04 	subs.w	fp, sl, r4
 8009f9a:	d00b      	beq.n	8009fb4 <_vfiprintf_r+0xc0>
 8009f9c:	465b      	mov	r3, fp
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f7ff ff93 	bl	8009ece <__sfputs_r>
 8009fa8:	3001      	adds	r0, #1
 8009faa:	f000 80aa 	beq.w	800a102 <_vfiprintf_r+0x20e>
 8009fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fb0:	445a      	add	r2, fp
 8009fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 80a2 	beq.w	800a102 <_vfiprintf_r+0x20e>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fc8:	f10a 0a01 	add.w	sl, sl, #1
 8009fcc:	9304      	str	r3, [sp, #16]
 8009fce:	9307      	str	r3, [sp, #28]
 8009fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8009fd6:	4654      	mov	r4, sl
 8009fd8:	2205      	movs	r2, #5
 8009fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fde:	4858      	ldr	r0, [pc, #352]	; (800a140 <_vfiprintf_r+0x24c>)
 8009fe0:	f7f6 f8fe 	bl	80001e0 <memchr>
 8009fe4:	9a04      	ldr	r2, [sp, #16]
 8009fe6:	b9d8      	cbnz	r0, 800a020 <_vfiprintf_r+0x12c>
 8009fe8:	06d1      	lsls	r1, r2, #27
 8009fea:	bf44      	itt	mi
 8009fec:	2320      	movmi	r3, #32
 8009fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ff2:	0713      	lsls	r3, r2, #28
 8009ff4:	bf44      	itt	mi
 8009ff6:	232b      	movmi	r3, #43	; 0x2b
 8009ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ffc:	f89a 3000 	ldrb.w	r3, [sl]
 800a000:	2b2a      	cmp	r3, #42	; 0x2a
 800a002:	d015      	beq.n	800a030 <_vfiprintf_r+0x13c>
 800a004:	9a07      	ldr	r2, [sp, #28]
 800a006:	4654      	mov	r4, sl
 800a008:	2000      	movs	r0, #0
 800a00a:	f04f 0c0a 	mov.w	ip, #10
 800a00e:	4621      	mov	r1, r4
 800a010:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a014:	3b30      	subs	r3, #48	; 0x30
 800a016:	2b09      	cmp	r3, #9
 800a018:	d94e      	bls.n	800a0b8 <_vfiprintf_r+0x1c4>
 800a01a:	b1b0      	cbz	r0, 800a04a <_vfiprintf_r+0x156>
 800a01c:	9207      	str	r2, [sp, #28]
 800a01e:	e014      	b.n	800a04a <_vfiprintf_r+0x156>
 800a020:	eba0 0308 	sub.w	r3, r0, r8
 800a024:	fa09 f303 	lsl.w	r3, r9, r3
 800a028:	4313      	orrs	r3, r2
 800a02a:	9304      	str	r3, [sp, #16]
 800a02c:	46a2      	mov	sl, r4
 800a02e:	e7d2      	b.n	8009fd6 <_vfiprintf_r+0xe2>
 800a030:	9b03      	ldr	r3, [sp, #12]
 800a032:	1d19      	adds	r1, r3, #4
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	9103      	str	r1, [sp, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bfbb      	ittet	lt
 800a03c:	425b      	neglt	r3, r3
 800a03e:	f042 0202 	orrlt.w	r2, r2, #2
 800a042:	9307      	strge	r3, [sp, #28]
 800a044:	9307      	strlt	r3, [sp, #28]
 800a046:	bfb8      	it	lt
 800a048:	9204      	strlt	r2, [sp, #16]
 800a04a:	7823      	ldrb	r3, [r4, #0]
 800a04c:	2b2e      	cmp	r3, #46	; 0x2e
 800a04e:	d10c      	bne.n	800a06a <_vfiprintf_r+0x176>
 800a050:	7863      	ldrb	r3, [r4, #1]
 800a052:	2b2a      	cmp	r3, #42	; 0x2a
 800a054:	d135      	bne.n	800a0c2 <_vfiprintf_r+0x1ce>
 800a056:	9b03      	ldr	r3, [sp, #12]
 800a058:	1d1a      	adds	r2, r3, #4
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	9203      	str	r2, [sp, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	bfb8      	it	lt
 800a062:	f04f 33ff 	movlt.w	r3, #4294967295
 800a066:	3402      	adds	r4, #2
 800a068:	9305      	str	r3, [sp, #20]
 800a06a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a150 <_vfiprintf_r+0x25c>
 800a06e:	7821      	ldrb	r1, [r4, #0]
 800a070:	2203      	movs	r2, #3
 800a072:	4650      	mov	r0, sl
 800a074:	f7f6 f8b4 	bl	80001e0 <memchr>
 800a078:	b140      	cbz	r0, 800a08c <_vfiprintf_r+0x198>
 800a07a:	2340      	movs	r3, #64	; 0x40
 800a07c:	eba0 000a 	sub.w	r0, r0, sl
 800a080:	fa03 f000 	lsl.w	r0, r3, r0
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	4303      	orrs	r3, r0
 800a088:	3401      	adds	r4, #1
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a090:	482c      	ldr	r0, [pc, #176]	; (800a144 <_vfiprintf_r+0x250>)
 800a092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a096:	2206      	movs	r2, #6
 800a098:	f7f6 f8a2 	bl	80001e0 <memchr>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d03f      	beq.n	800a120 <_vfiprintf_r+0x22c>
 800a0a0:	4b29      	ldr	r3, [pc, #164]	; (800a148 <_vfiprintf_r+0x254>)
 800a0a2:	bb1b      	cbnz	r3, 800a0ec <_vfiprintf_r+0x1f8>
 800a0a4:	9b03      	ldr	r3, [sp, #12]
 800a0a6:	3307      	adds	r3, #7
 800a0a8:	f023 0307 	bic.w	r3, r3, #7
 800a0ac:	3308      	adds	r3, #8
 800a0ae:	9303      	str	r3, [sp, #12]
 800a0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b2:	443b      	add	r3, r7
 800a0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b6:	e767      	b.n	8009f88 <_vfiprintf_r+0x94>
 800a0b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0bc:	460c      	mov	r4, r1
 800a0be:	2001      	movs	r0, #1
 800a0c0:	e7a5      	b.n	800a00e <_vfiprintf_r+0x11a>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	3401      	adds	r4, #1
 800a0c6:	9305      	str	r3, [sp, #20]
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	f04f 0c0a 	mov.w	ip, #10
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0d4:	3a30      	subs	r2, #48	; 0x30
 800a0d6:	2a09      	cmp	r2, #9
 800a0d8:	d903      	bls.n	800a0e2 <_vfiprintf_r+0x1ee>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0c5      	beq.n	800a06a <_vfiprintf_r+0x176>
 800a0de:	9105      	str	r1, [sp, #20]
 800a0e0:	e7c3      	b.n	800a06a <_vfiprintf_r+0x176>
 800a0e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e7f0      	b.n	800a0ce <_vfiprintf_r+0x1da>
 800a0ec:	ab03      	add	r3, sp, #12
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	462a      	mov	r2, r5
 800a0f2:	4b16      	ldr	r3, [pc, #88]	; (800a14c <_vfiprintf_r+0x258>)
 800a0f4:	a904      	add	r1, sp, #16
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	f3af 8000 	nop.w
 800a0fc:	4607      	mov	r7, r0
 800a0fe:	1c78      	adds	r0, r7, #1
 800a100:	d1d6      	bne.n	800a0b0 <_vfiprintf_r+0x1bc>
 800a102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a104:	07d9      	lsls	r1, r3, #31
 800a106:	d405      	bmi.n	800a114 <_vfiprintf_r+0x220>
 800a108:	89ab      	ldrh	r3, [r5, #12]
 800a10a:	059a      	lsls	r2, r3, #22
 800a10c:	d402      	bmi.n	800a114 <_vfiprintf_r+0x220>
 800a10e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a110:	f7ff fdb7 	bl	8009c82 <__retarget_lock_release_recursive>
 800a114:	89ab      	ldrh	r3, [r5, #12]
 800a116:	065b      	lsls	r3, r3, #25
 800a118:	f53f af12 	bmi.w	8009f40 <_vfiprintf_r+0x4c>
 800a11c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a11e:	e711      	b.n	8009f44 <_vfiprintf_r+0x50>
 800a120:	ab03      	add	r3, sp, #12
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	462a      	mov	r2, r5
 800a126:	4b09      	ldr	r3, [pc, #36]	; (800a14c <_vfiprintf_r+0x258>)
 800a128:	a904      	add	r1, sp, #16
 800a12a:	4630      	mov	r0, r6
 800a12c:	f000 f880 	bl	800a230 <_printf_i>
 800a130:	e7e4      	b.n	800a0fc <_vfiprintf_r+0x208>
 800a132:	bf00      	nop
 800a134:	0800adb0 	.word	0x0800adb0
 800a138:	0800add0 	.word	0x0800add0
 800a13c:	0800ad90 	.word	0x0800ad90
 800a140:	0800adf0 	.word	0x0800adf0
 800a144:	0800adfa 	.word	0x0800adfa
 800a148:	00000000 	.word	0x00000000
 800a14c:	08009ecf 	.word	0x08009ecf
 800a150:	0800adf6 	.word	0x0800adf6

0800a154 <_printf_common>:
 800a154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a158:	4616      	mov	r6, r2
 800a15a:	4699      	mov	r9, r3
 800a15c:	688a      	ldr	r2, [r1, #8]
 800a15e:	690b      	ldr	r3, [r1, #16]
 800a160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a164:	4293      	cmp	r3, r2
 800a166:	bfb8      	it	lt
 800a168:	4613      	movlt	r3, r2
 800a16a:	6033      	str	r3, [r6, #0]
 800a16c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a170:	4607      	mov	r7, r0
 800a172:	460c      	mov	r4, r1
 800a174:	b10a      	cbz	r2, 800a17a <_printf_common+0x26>
 800a176:	3301      	adds	r3, #1
 800a178:	6033      	str	r3, [r6, #0]
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	0699      	lsls	r1, r3, #26
 800a17e:	bf42      	ittt	mi
 800a180:	6833      	ldrmi	r3, [r6, #0]
 800a182:	3302      	addmi	r3, #2
 800a184:	6033      	strmi	r3, [r6, #0]
 800a186:	6825      	ldr	r5, [r4, #0]
 800a188:	f015 0506 	ands.w	r5, r5, #6
 800a18c:	d106      	bne.n	800a19c <_printf_common+0x48>
 800a18e:	f104 0a19 	add.w	sl, r4, #25
 800a192:	68e3      	ldr	r3, [r4, #12]
 800a194:	6832      	ldr	r2, [r6, #0]
 800a196:	1a9b      	subs	r3, r3, r2
 800a198:	42ab      	cmp	r3, r5
 800a19a:	dc26      	bgt.n	800a1ea <_printf_common+0x96>
 800a19c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1a0:	1e13      	subs	r3, r2, #0
 800a1a2:	6822      	ldr	r2, [r4, #0]
 800a1a4:	bf18      	it	ne
 800a1a6:	2301      	movne	r3, #1
 800a1a8:	0692      	lsls	r2, r2, #26
 800a1aa:	d42b      	bmi.n	800a204 <_printf_common+0xb0>
 800a1ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	47c0      	blx	r8
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	d01e      	beq.n	800a1f8 <_printf_common+0xa4>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	68e5      	ldr	r5, [r4, #12]
 800a1be:	6832      	ldr	r2, [r6, #0]
 800a1c0:	f003 0306 	and.w	r3, r3, #6
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	bf08      	it	eq
 800a1c8:	1aad      	subeq	r5, r5, r2
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	6922      	ldr	r2, [r4, #16]
 800a1ce:	bf0c      	ite	eq
 800a1d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1d4:	2500      	movne	r5, #0
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	bfc4      	itt	gt
 800a1da:	1a9b      	subgt	r3, r3, r2
 800a1dc:	18ed      	addgt	r5, r5, r3
 800a1de:	2600      	movs	r6, #0
 800a1e0:	341a      	adds	r4, #26
 800a1e2:	42b5      	cmp	r5, r6
 800a1e4:	d11a      	bne.n	800a21c <_printf_common+0xc8>
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	e008      	b.n	800a1fc <_printf_common+0xa8>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	4652      	mov	r2, sl
 800a1ee:	4649      	mov	r1, r9
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	47c0      	blx	r8
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d103      	bne.n	800a200 <_printf_common+0xac>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a200:	3501      	adds	r5, #1
 800a202:	e7c6      	b.n	800a192 <_printf_common+0x3e>
 800a204:	18e1      	adds	r1, r4, r3
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	2030      	movs	r0, #48	; 0x30
 800a20a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a20e:	4422      	add	r2, r4
 800a210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a218:	3302      	adds	r3, #2
 800a21a:	e7c7      	b.n	800a1ac <_printf_common+0x58>
 800a21c:	2301      	movs	r3, #1
 800a21e:	4622      	mov	r2, r4
 800a220:	4649      	mov	r1, r9
 800a222:	4638      	mov	r0, r7
 800a224:	47c0      	blx	r8
 800a226:	3001      	adds	r0, #1
 800a228:	d0e6      	beq.n	800a1f8 <_printf_common+0xa4>
 800a22a:	3601      	adds	r6, #1
 800a22c:	e7d9      	b.n	800a1e2 <_printf_common+0x8e>
	...

0800a230 <_printf_i>:
 800a230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a234:	460c      	mov	r4, r1
 800a236:	4691      	mov	r9, r2
 800a238:	7e27      	ldrb	r7, [r4, #24]
 800a23a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a23c:	2f78      	cmp	r7, #120	; 0x78
 800a23e:	4680      	mov	r8, r0
 800a240:	469a      	mov	sl, r3
 800a242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a246:	d807      	bhi.n	800a258 <_printf_i+0x28>
 800a248:	2f62      	cmp	r7, #98	; 0x62
 800a24a:	d80a      	bhi.n	800a262 <_printf_i+0x32>
 800a24c:	2f00      	cmp	r7, #0
 800a24e:	f000 80d8 	beq.w	800a402 <_printf_i+0x1d2>
 800a252:	2f58      	cmp	r7, #88	; 0x58
 800a254:	f000 80a3 	beq.w	800a39e <_printf_i+0x16e>
 800a258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a25c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a260:	e03a      	b.n	800a2d8 <_printf_i+0xa8>
 800a262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a266:	2b15      	cmp	r3, #21
 800a268:	d8f6      	bhi.n	800a258 <_printf_i+0x28>
 800a26a:	a001      	add	r0, pc, #4	; (adr r0, 800a270 <_printf_i+0x40>)
 800a26c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a270:	0800a2c9 	.word	0x0800a2c9
 800a274:	0800a2dd 	.word	0x0800a2dd
 800a278:	0800a259 	.word	0x0800a259
 800a27c:	0800a259 	.word	0x0800a259
 800a280:	0800a259 	.word	0x0800a259
 800a284:	0800a259 	.word	0x0800a259
 800a288:	0800a2dd 	.word	0x0800a2dd
 800a28c:	0800a259 	.word	0x0800a259
 800a290:	0800a259 	.word	0x0800a259
 800a294:	0800a259 	.word	0x0800a259
 800a298:	0800a259 	.word	0x0800a259
 800a29c:	0800a3e9 	.word	0x0800a3e9
 800a2a0:	0800a30d 	.word	0x0800a30d
 800a2a4:	0800a3cb 	.word	0x0800a3cb
 800a2a8:	0800a259 	.word	0x0800a259
 800a2ac:	0800a259 	.word	0x0800a259
 800a2b0:	0800a40b 	.word	0x0800a40b
 800a2b4:	0800a259 	.word	0x0800a259
 800a2b8:	0800a30d 	.word	0x0800a30d
 800a2bc:	0800a259 	.word	0x0800a259
 800a2c0:	0800a259 	.word	0x0800a259
 800a2c4:	0800a3d3 	.word	0x0800a3d3
 800a2c8:	680b      	ldr	r3, [r1, #0]
 800a2ca:	1d1a      	adds	r2, r3, #4
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	600a      	str	r2, [r1, #0]
 800a2d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a2d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e0a3      	b.n	800a424 <_printf_i+0x1f4>
 800a2dc:	6825      	ldr	r5, [r4, #0]
 800a2de:	6808      	ldr	r0, [r1, #0]
 800a2e0:	062e      	lsls	r6, r5, #24
 800a2e2:	f100 0304 	add.w	r3, r0, #4
 800a2e6:	d50a      	bpl.n	800a2fe <_printf_i+0xce>
 800a2e8:	6805      	ldr	r5, [r0, #0]
 800a2ea:	600b      	str	r3, [r1, #0]
 800a2ec:	2d00      	cmp	r5, #0
 800a2ee:	da03      	bge.n	800a2f8 <_printf_i+0xc8>
 800a2f0:	232d      	movs	r3, #45	; 0x2d
 800a2f2:	426d      	negs	r5, r5
 800a2f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f8:	485e      	ldr	r0, [pc, #376]	; (800a474 <_printf_i+0x244>)
 800a2fa:	230a      	movs	r3, #10
 800a2fc:	e019      	b.n	800a332 <_printf_i+0x102>
 800a2fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a302:	6805      	ldr	r5, [r0, #0]
 800a304:	600b      	str	r3, [r1, #0]
 800a306:	bf18      	it	ne
 800a308:	b22d      	sxthne	r5, r5
 800a30a:	e7ef      	b.n	800a2ec <_printf_i+0xbc>
 800a30c:	680b      	ldr	r3, [r1, #0]
 800a30e:	6825      	ldr	r5, [r4, #0]
 800a310:	1d18      	adds	r0, r3, #4
 800a312:	6008      	str	r0, [r1, #0]
 800a314:	0628      	lsls	r0, r5, #24
 800a316:	d501      	bpl.n	800a31c <_printf_i+0xec>
 800a318:	681d      	ldr	r5, [r3, #0]
 800a31a:	e002      	b.n	800a322 <_printf_i+0xf2>
 800a31c:	0669      	lsls	r1, r5, #25
 800a31e:	d5fb      	bpl.n	800a318 <_printf_i+0xe8>
 800a320:	881d      	ldrh	r5, [r3, #0]
 800a322:	4854      	ldr	r0, [pc, #336]	; (800a474 <_printf_i+0x244>)
 800a324:	2f6f      	cmp	r7, #111	; 0x6f
 800a326:	bf0c      	ite	eq
 800a328:	2308      	moveq	r3, #8
 800a32a:	230a      	movne	r3, #10
 800a32c:	2100      	movs	r1, #0
 800a32e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a332:	6866      	ldr	r6, [r4, #4]
 800a334:	60a6      	str	r6, [r4, #8]
 800a336:	2e00      	cmp	r6, #0
 800a338:	bfa2      	ittt	ge
 800a33a:	6821      	ldrge	r1, [r4, #0]
 800a33c:	f021 0104 	bicge.w	r1, r1, #4
 800a340:	6021      	strge	r1, [r4, #0]
 800a342:	b90d      	cbnz	r5, 800a348 <_printf_i+0x118>
 800a344:	2e00      	cmp	r6, #0
 800a346:	d04d      	beq.n	800a3e4 <_printf_i+0x1b4>
 800a348:	4616      	mov	r6, r2
 800a34a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a34e:	fb03 5711 	mls	r7, r3, r1, r5
 800a352:	5dc7      	ldrb	r7, [r0, r7]
 800a354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a358:	462f      	mov	r7, r5
 800a35a:	42bb      	cmp	r3, r7
 800a35c:	460d      	mov	r5, r1
 800a35e:	d9f4      	bls.n	800a34a <_printf_i+0x11a>
 800a360:	2b08      	cmp	r3, #8
 800a362:	d10b      	bne.n	800a37c <_printf_i+0x14c>
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	07df      	lsls	r7, r3, #31
 800a368:	d508      	bpl.n	800a37c <_printf_i+0x14c>
 800a36a:	6923      	ldr	r3, [r4, #16]
 800a36c:	6861      	ldr	r1, [r4, #4]
 800a36e:	4299      	cmp	r1, r3
 800a370:	bfde      	ittt	le
 800a372:	2330      	movle	r3, #48	; 0x30
 800a374:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a378:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a37c:	1b92      	subs	r2, r2, r6
 800a37e:	6122      	str	r2, [r4, #16]
 800a380:	f8cd a000 	str.w	sl, [sp]
 800a384:	464b      	mov	r3, r9
 800a386:	aa03      	add	r2, sp, #12
 800a388:	4621      	mov	r1, r4
 800a38a:	4640      	mov	r0, r8
 800a38c:	f7ff fee2 	bl	800a154 <_printf_common>
 800a390:	3001      	adds	r0, #1
 800a392:	d14c      	bne.n	800a42e <_printf_i+0x1fe>
 800a394:	f04f 30ff 	mov.w	r0, #4294967295
 800a398:	b004      	add	sp, #16
 800a39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39e:	4835      	ldr	r0, [pc, #212]	; (800a474 <_printf_i+0x244>)
 800a3a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	680e      	ldr	r6, [r1, #0]
 800a3a8:	061f      	lsls	r7, r3, #24
 800a3aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800a3ae:	600e      	str	r6, [r1, #0]
 800a3b0:	d514      	bpl.n	800a3dc <_printf_i+0x1ac>
 800a3b2:	07d9      	lsls	r1, r3, #31
 800a3b4:	bf44      	itt	mi
 800a3b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a3ba:	6023      	strmi	r3, [r4, #0]
 800a3bc:	b91d      	cbnz	r5, 800a3c6 <_printf_i+0x196>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	f023 0320 	bic.w	r3, r3, #32
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	2310      	movs	r3, #16
 800a3c8:	e7b0      	b.n	800a32c <_printf_i+0xfc>
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	f043 0320 	orr.w	r3, r3, #32
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	2378      	movs	r3, #120	; 0x78
 800a3d4:	4828      	ldr	r0, [pc, #160]	; (800a478 <_printf_i+0x248>)
 800a3d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3da:	e7e3      	b.n	800a3a4 <_printf_i+0x174>
 800a3dc:	065e      	lsls	r6, r3, #25
 800a3de:	bf48      	it	mi
 800a3e0:	b2ad      	uxthmi	r5, r5
 800a3e2:	e7e6      	b.n	800a3b2 <_printf_i+0x182>
 800a3e4:	4616      	mov	r6, r2
 800a3e6:	e7bb      	b.n	800a360 <_printf_i+0x130>
 800a3e8:	680b      	ldr	r3, [r1, #0]
 800a3ea:	6826      	ldr	r6, [r4, #0]
 800a3ec:	6960      	ldr	r0, [r4, #20]
 800a3ee:	1d1d      	adds	r5, r3, #4
 800a3f0:	600d      	str	r5, [r1, #0]
 800a3f2:	0635      	lsls	r5, r6, #24
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	d501      	bpl.n	800a3fc <_printf_i+0x1cc>
 800a3f8:	6018      	str	r0, [r3, #0]
 800a3fa:	e002      	b.n	800a402 <_printf_i+0x1d2>
 800a3fc:	0671      	lsls	r1, r6, #25
 800a3fe:	d5fb      	bpl.n	800a3f8 <_printf_i+0x1c8>
 800a400:	8018      	strh	r0, [r3, #0]
 800a402:	2300      	movs	r3, #0
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	4616      	mov	r6, r2
 800a408:	e7ba      	b.n	800a380 <_printf_i+0x150>
 800a40a:	680b      	ldr	r3, [r1, #0]
 800a40c:	1d1a      	adds	r2, r3, #4
 800a40e:	600a      	str	r2, [r1, #0]
 800a410:	681e      	ldr	r6, [r3, #0]
 800a412:	6862      	ldr	r2, [r4, #4]
 800a414:	2100      	movs	r1, #0
 800a416:	4630      	mov	r0, r6
 800a418:	f7f5 fee2 	bl	80001e0 <memchr>
 800a41c:	b108      	cbz	r0, 800a422 <_printf_i+0x1f2>
 800a41e:	1b80      	subs	r0, r0, r6
 800a420:	6060      	str	r0, [r4, #4]
 800a422:	6863      	ldr	r3, [r4, #4]
 800a424:	6123      	str	r3, [r4, #16]
 800a426:	2300      	movs	r3, #0
 800a428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a42c:	e7a8      	b.n	800a380 <_printf_i+0x150>
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	4632      	mov	r2, r6
 800a432:	4649      	mov	r1, r9
 800a434:	4640      	mov	r0, r8
 800a436:	47d0      	blx	sl
 800a438:	3001      	adds	r0, #1
 800a43a:	d0ab      	beq.n	800a394 <_printf_i+0x164>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	079b      	lsls	r3, r3, #30
 800a440:	d413      	bmi.n	800a46a <_printf_i+0x23a>
 800a442:	68e0      	ldr	r0, [r4, #12]
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	4298      	cmp	r0, r3
 800a448:	bfb8      	it	lt
 800a44a:	4618      	movlt	r0, r3
 800a44c:	e7a4      	b.n	800a398 <_printf_i+0x168>
 800a44e:	2301      	movs	r3, #1
 800a450:	4632      	mov	r2, r6
 800a452:	4649      	mov	r1, r9
 800a454:	4640      	mov	r0, r8
 800a456:	47d0      	blx	sl
 800a458:	3001      	adds	r0, #1
 800a45a:	d09b      	beq.n	800a394 <_printf_i+0x164>
 800a45c:	3501      	adds	r5, #1
 800a45e:	68e3      	ldr	r3, [r4, #12]
 800a460:	9903      	ldr	r1, [sp, #12]
 800a462:	1a5b      	subs	r3, r3, r1
 800a464:	42ab      	cmp	r3, r5
 800a466:	dcf2      	bgt.n	800a44e <_printf_i+0x21e>
 800a468:	e7eb      	b.n	800a442 <_printf_i+0x212>
 800a46a:	2500      	movs	r5, #0
 800a46c:	f104 0619 	add.w	r6, r4, #25
 800a470:	e7f5      	b.n	800a45e <_printf_i+0x22e>
 800a472:	bf00      	nop
 800a474:	0800ae01 	.word	0x0800ae01
 800a478:	0800ae12 	.word	0x0800ae12

0800a47c <_sbrk_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4d06      	ldr	r5, [pc, #24]	; (800a498 <_sbrk_r+0x1c>)
 800a480:	2300      	movs	r3, #0
 800a482:	4604      	mov	r4, r0
 800a484:	4608      	mov	r0, r1
 800a486:	602b      	str	r3, [r5, #0]
 800a488:	f7f7 fd5c 	bl	8001f44 <_sbrk>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d102      	bne.n	800a496 <_sbrk_r+0x1a>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	b103      	cbz	r3, 800a496 <_sbrk_r+0x1a>
 800a494:	6023      	str	r3, [r4, #0]
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	20009ca8 	.word	0x20009ca8

0800a49c <__sread>:
 800a49c:	b510      	push	{r4, lr}
 800a49e:	460c      	mov	r4, r1
 800a4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a4:	f000 f8a0 	bl	800a5e8 <_read_r>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	bfab      	itete	ge
 800a4ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a4b0:	181b      	addge	r3, r3, r0
 800a4b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4b6:	bfac      	ite	ge
 800a4b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4ba:	81a3      	strhlt	r3, [r4, #12]
 800a4bc:	bd10      	pop	{r4, pc}

0800a4be <__swrite>:
 800a4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c2:	461f      	mov	r7, r3
 800a4c4:	898b      	ldrh	r3, [r1, #12]
 800a4c6:	05db      	lsls	r3, r3, #23
 800a4c8:	4605      	mov	r5, r0
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	4616      	mov	r6, r2
 800a4ce:	d505      	bpl.n	800a4dc <__swrite+0x1e>
 800a4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f000 f868 	bl	800a5ac <_lseek_r>
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4e6:	81a3      	strh	r3, [r4, #12]
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	463b      	mov	r3, r7
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f2:	f000 b817 	b.w	800a524 <_write_r>

0800a4f6 <__sseek>:
 800a4f6:	b510      	push	{r4, lr}
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fe:	f000 f855 	bl	800a5ac <_lseek_r>
 800a502:	1c43      	adds	r3, r0, #1
 800a504:	89a3      	ldrh	r3, [r4, #12]
 800a506:	bf15      	itete	ne
 800a508:	6560      	strne	r0, [r4, #84]	; 0x54
 800a50a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a50e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a512:	81a3      	strheq	r3, [r4, #12]
 800a514:	bf18      	it	ne
 800a516:	81a3      	strhne	r3, [r4, #12]
 800a518:	bd10      	pop	{r4, pc}

0800a51a <__sclose>:
 800a51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51e:	f000 b813 	b.w	800a548 <_close_r>
	...

0800a524 <_write_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4d07      	ldr	r5, [pc, #28]	; (800a544 <_write_r+0x20>)
 800a528:	4604      	mov	r4, r0
 800a52a:	4608      	mov	r0, r1
 800a52c:	4611      	mov	r1, r2
 800a52e:	2200      	movs	r2, #0
 800a530:	602a      	str	r2, [r5, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	f7f7 faae 	bl	8001a94 <_write>
 800a538:	1c43      	adds	r3, r0, #1
 800a53a:	d102      	bne.n	800a542 <_write_r+0x1e>
 800a53c:	682b      	ldr	r3, [r5, #0]
 800a53e:	b103      	cbz	r3, 800a542 <_write_r+0x1e>
 800a540:	6023      	str	r3, [r4, #0]
 800a542:	bd38      	pop	{r3, r4, r5, pc}
 800a544:	20009ca8 	.word	0x20009ca8

0800a548 <_close_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d06      	ldr	r5, [pc, #24]	; (800a564 <_close_r+0x1c>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	4608      	mov	r0, r1
 800a552:	602b      	str	r3, [r5, #0]
 800a554:	f7f7 fce8 	bl	8001f28 <_close>
 800a558:	1c43      	adds	r3, r0, #1
 800a55a:	d102      	bne.n	800a562 <_close_r+0x1a>
 800a55c:	682b      	ldr	r3, [r5, #0]
 800a55e:	b103      	cbz	r3, 800a562 <_close_r+0x1a>
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	bd38      	pop	{r3, r4, r5, pc}
 800a564:	20009ca8 	.word	0x20009ca8

0800a568 <_fstat_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4d07      	ldr	r5, [pc, #28]	; (800a588 <_fstat_r+0x20>)
 800a56c:	2300      	movs	r3, #0
 800a56e:	4604      	mov	r4, r0
 800a570:	4608      	mov	r0, r1
 800a572:	4611      	mov	r1, r2
 800a574:	602b      	str	r3, [r5, #0]
 800a576:	f7f7 fcdb 	bl	8001f30 <_fstat>
 800a57a:	1c43      	adds	r3, r0, #1
 800a57c:	d102      	bne.n	800a584 <_fstat_r+0x1c>
 800a57e:	682b      	ldr	r3, [r5, #0]
 800a580:	b103      	cbz	r3, 800a584 <_fstat_r+0x1c>
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	bd38      	pop	{r3, r4, r5, pc}
 800a586:	bf00      	nop
 800a588:	20009ca8 	.word	0x20009ca8

0800a58c <_isatty_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4d06      	ldr	r5, [pc, #24]	; (800a5a8 <_isatty_r+0x1c>)
 800a590:	2300      	movs	r3, #0
 800a592:	4604      	mov	r4, r0
 800a594:	4608      	mov	r0, r1
 800a596:	602b      	str	r3, [r5, #0]
 800a598:	f7f7 fcd0 	bl	8001f3c <_isatty>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_isatty_r+0x1a>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_isatty_r+0x1a>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20009ca8 	.word	0x20009ca8

0800a5ac <_lseek_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4d07      	ldr	r5, [pc, #28]	; (800a5cc <_lseek_r+0x20>)
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	4608      	mov	r0, r1
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	602a      	str	r2, [r5, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	f7f7 fcc0 	bl	8001f40 <_lseek>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d102      	bne.n	800a5ca <_lseek_r+0x1e>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	b103      	cbz	r3, 800a5ca <_lseek_r+0x1e>
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	20009ca8 	.word	0x20009ca8

0800a5d0 <__malloc_lock>:
 800a5d0:	4801      	ldr	r0, [pc, #4]	; (800a5d8 <__malloc_lock+0x8>)
 800a5d2:	f7ff bb55 	b.w	8009c80 <__retarget_lock_acquire_recursive>
 800a5d6:	bf00      	nop
 800a5d8:	20009ca0 	.word	0x20009ca0

0800a5dc <__malloc_unlock>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	; (800a5e4 <__malloc_unlock+0x8>)
 800a5de:	f7ff bb50 	b.w	8009c82 <__retarget_lock_release_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	20009ca0 	.word	0x20009ca0

0800a5e8 <_read_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d07      	ldr	r5, [pc, #28]	; (800a608 <_read_r+0x20>)
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	4608      	mov	r0, r1
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	602a      	str	r2, [r5, #0]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f7f7 fc88 	bl	8001f0c <_read>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	d102      	bne.n	800a606 <_read_r+0x1e>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	b103      	cbz	r3, 800a606 <_read_r+0x1e>
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	20009ca8 	.word	0x20009ca8

0800a60c <_init>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	bf00      	nop
 800a610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a612:	bc08      	pop	{r3}
 800a614:	469e      	mov	lr, r3
 800a616:	4770      	bx	lr

0800a618 <_fini>:
 800a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61a:	bf00      	nop
 800a61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61e:	bc08      	pop	{r3}
 800a620:	469e      	mov	lr, r3
 800a622:	4770      	bx	lr
